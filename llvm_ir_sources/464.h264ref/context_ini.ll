; ModuleID = '../../SPEC/benchspec/CPU2006/464.h264ref/src/context_ini.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ImageParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32**, i32**, i32, i32***, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [9 x [16 x [16 x i16]]], [5 x [16 x [16 x i16]]], [9 x [8 x [8 x i16]]], [2 x [4 x [16 x [16 x i16]]]], [16 x [16 x i16]], [16 x [16 x i32]], i32****, i32***, %struct.Picture*, %struct.Slice*, %struct.macroblock*, [1200 x %struct.syntaxelement], i32*, i32*, i32, i32, i32, i32, [4 x [4 x i32]], i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i16******, i16******, i16******, i16******, [15 x i16], i32, i32, i32, i32, i32, i32, i32, i32, [6 x [15 x i32]], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1 x i32], i32, i32, [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.DecRefPicMarking_s*, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, double*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], i32, i32, i32 }
%struct.Picture = type { i32, i32, [100 x %struct.Slice*], i32, float, float, float }
%struct.Slice = type { i32, i32, i32, i32, i32, i32, %struct.datapartition*, %struct.MotionInfoContexts*, %struct.TextureInfoContexts*, %struct.RMPNIbuffer_s*, i32, i32*, i32*, i32*, i32, i32*, i32*, i32*, i32 (i32)*, [3 x [2 x i32]] }
%struct.datapartition = type { %struct.Bitstream*, %struct.EncodingEnvironment, i32 (%struct.syntaxelement*, %struct.datapartition*)* }
%struct.Bitstream = type { i32, i32, i8, i32, i32, i8, i8, i32, i32, i8*, i32 }
%struct.EncodingEnvironment = type { i32, i32, i32, i32, i32, i8*, i32*, i32, i32, i32, i32, i32, i8*, i32*, i32, i32, i32, i32, i32, i32 }
%struct.syntaxelement = type { i32, i32, i32, i32, i32, i32, i32, i32, void (i32, i32, i32*, i32*)*, void (%struct.syntaxelement*, %struct.EncodingEnvironment*)* }
%struct.MotionInfoContexts = type { [3 x [11 x %struct.BiContextType]], [2 x [9 x %struct.BiContextType]], [2 x [10 x %struct.BiContextType]], [2 x [6 x %struct.BiContextType]], [4 x %struct.BiContextType], [4 x %struct.BiContextType], [3 x %struct.BiContextType] }
%struct.BiContextType = type { i16, i8, i64 }
%struct.TextureInfoContexts = type { [2 x %struct.BiContextType], [4 x %struct.BiContextType], [3 x [4 x %struct.BiContextType]], [10 x [4 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]], [10 x [5 x %struct.BiContextType]], [10 x [5 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]], [10 x [15 x %struct.BiContextType]] }
%struct.RMPNIbuffer_s = type { i32, i32, %struct.RMPNIbuffer_s* }
%struct.macroblock = type { i32, i32, i32, i32, i32, [8 x i32], %struct.macroblock*, %struct.macroblock*, i32, [2 x [4 x [4 x [2 x i32]]]], [16 x i32], [16 x i32], i32, i64, [4 x i32], [4 x i32], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.DecRefPicMarking_s = type { i32, i32, i32, i32, i32, %struct.DecRefPicMarking_s* }
%struct.InputParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i32]], [8 x [2 x i32]], i32, i32, i32, i32, [200 x i8], [200 x i8], [200 x i8], [200 x i8], [200 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1024 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [200 x i8], [200 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [200 x i8], i32, i32, i32*, i32*, i8*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x double], [200 x i8], i32 }

@probability = global [128 x double] [double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 5.000000e-01, double 4.746090e-01, double 4.505070e-01, double 4.276290e-01, double 4.059120e-01, double 3.852990e-01, double 3.657320e-01, double 3.471590e-01, double 3.295300e-01, double 3.127950e-01, double 2.969110e-01, double 2.818330e-01, double 2.675200e-01, double 2.539350e-01, double 2.410390e-01, double 2.287990e-01, double 2.171800e-01, double 2.061510e-01, double 1.956820e-01, double 1.857440e-01, double 1.763120e-01, double 1.673580e-01, double 1.588590e-01, double 1.507920e-01, double 1.431340e-01, double 1.358660e-01, double 1.289660e-01, double 1.224170e-01, double 1.162000e-01, double 1.102990e-01, double 1.046980e-01, double 9.938100e-02, double 9.433400e-02, double 8.954300e-02, double 8.499600e-02, double 8.068000e-02, double 7.658300e-02, double 7.269400e-02, double 6.900200e-02, double 6.549800e-02, double 6.217200e-02, double 5.901400e-02, double 5.601800e-02, double 5.317300e-02, double 5.047300e-02, double 4.790900e-02, double 4.547600e-02, double 4.316700e-02, double 4.097500e-02, double 3.889400e-02, double 3.691900e-02, double 3.504400e-02, double 3.326400e-02, double 3.157500e-02, double 2.997200e-02, double 2.845000e-02, double 2.700500e-02, double 2.563300e-02, double 2.433200e-02, double 2.309600e-02, double 2.192300e-02, double 2.081000e-02, double 1.975300e-02, double 1.875000e-02], align 16
@img = external global %struct.ImageParameters*
@input = external global %struct.InputParameters*
@num_mb_per_slice = common global i32 0, align 4
@number_of_slices = common global i32 0, align 4
@initialized = common global i32*** null, align 8
@.str = private unnamed_addr constant [35 x i8] c"create_context_memory: initialized\00", align 1
@model_number = common global i32*** null, align 8
@.str1 = private unnamed_addr constant [36 x i8] c"create_context_memory: model_number\00", align 1
@entropy = common global [128 x double] zeroinitializer, align 16
@INIT_MB_TYPE_I = internal constant [1 x [3 x [11 x [2 x i32]]]] [[3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 20, i32 -15], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 3, i32 74], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -28, i32 127], [2 x i32] [i32 -23, i32 104], [2 x i32] [i32 -6, i32 53], [2 x i32] [i32 -1, i32 54], [2 x i32] [i32 7, i32 51], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 20, i32 -15], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 3, i32 74], [2 x i32] [i32 20, i32 -15], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 3, i32 74], [2 x i32] [i32 -28, i32 127], [2 x i32] [i32 -23, i32 104], [2 x i32] [i32 -6, i32 53], [2 x i32] [i32 -1, i32 54], [2 x i32] [i32 7, i32 51]], [11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MB_TYPE_P = internal constant [3 x [3 x [11 x [2 x i32]]]] [[3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 23, i32 33], [2 x i32] [i32 23, i32 2], [2 x i32] [i32 21, i32 0], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 9], [2 x i32] [i32 0, i32 49], [2 x i32] [i32 -37, i32 118], [2 x i32] [i32 5, i32 57], [2 x i32] [i32 -13, i32 78], [2 x i32] [i32 -11, i32 65], [2 x i32] [i32 1, i32 62]], [11 x [2 x i32]] [[2 x i32] [i32 26, i32 67], [2 x i32] [i32 16, i32 90], [2 x i32] [i32 9, i32 104], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -46, i32 127], [2 x i32] [i32 -20, i32 104], [2 x i32] [i32 1, i32 67], [2 x i32] [i32 18, i32 64], [2 x i32] [i32 9, i32 43], [2 x i32] [i32 29, i32 0], [2 x i32] [i32 0, i32 64]]], [3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 22, i32 25], [2 x i32] [i32 34, i32 0], [2 x i32] [i32 16, i32 0], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -2, i32 9], [2 x i32] [i32 4, i32 41], [2 x i32] [i32 -29, i32 118], [2 x i32] [i32 2, i32 65], [2 x i32] [i32 -6, i32 71], [2 x i32] [i32 -13, i32 79], [2 x i32] [i32 5, i32 52]], [11 x [2 x i32]] [[2 x i32] [i32 57, i32 2], [2 x i32] [i32 41, i32 36], [2 x i32] [i32 26, i32 69], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -45, i32 127], [2 x i32] [i32 -15, i32 101], [2 x i32] [i32 -4, i32 76], [2 x i32] [i32 26, i32 34], [2 x i32] [i32 19, i32 22], [2 x i32] [i32 40, i32 0], [2 x i32] [i32 0, i32 64]]], [3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 29, i32 16], [2 x i32] [i32 25, i32 0], [2 x i32] [i32 14, i32 0], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -10, i32 51], [2 x i32] [i32 -3, i32 62], [2 x i32] [i32 -27, i32 99], [2 x i32] [i32 26, i32 16], [2 x i32] [i32 -4, i32 85], [2 x i32] [i32 -24, i32 102], [2 x i32] [i32 5, i32 57]], [11 x [2 x i32]] [[2 x i32] [i32 54, i32 0], [2 x i32] [i32 37, i32 42], [2 x i32] [i32 12, i32 97], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -32, i32 127], [2 x i32] [i32 -22, i32 117], [2 x i32] [i32 -2, i32 74], [2 x i32] [i32 20, i32 40], [2 x i32] [i32 20, i32 10], [2 x i32] [i32 29, i32 0], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_B8_TYPE_I = internal constant [1 x [2 x [9 x [2 x i32]]]] [[2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_B8_TYPE_P = internal constant [3 x [2 x [9 x [2 x i32]]]] [[2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 12, i32 49], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 73], [2 x i32] [i32 17, i32 50], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 -6, i32 86], [2 x i32] [i32 -17, i32 95], [2 x i32] [i32 -6, i32 61], [2 x i32] [i32 9, i32 45], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 9, i32 50], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 70], [2 x i32] [i32 10, i32 54], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 6, i32 69], [2 x i32] [i32 -13, i32 90], [2 x i32] [i32 0, i32 52], [2 x i32] [i32 8, i32 43], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 6, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -17, i32 73], [2 x i32] [i32 14, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 -6, i32 93], [2 x i32] [i32 -14, i32 88], [2 x i32] [i32 -6, i32 44], [2 x i32] [i32 4, i32 55], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MV_RES_I = internal constant [1 x [2 x [10 x [2 x i32]]]] [[2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MV_RES_P = internal constant [3 x [2 x [10 x [2 x i32]]]] [[2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 -3, i32 69], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -6, i32 81], [2 x i32] [i32 -11, i32 96], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 76], [2 x i32] [i32 -10, i32 94], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 6, i32 55], [2 x i32] [i32 7, i32 67], [2 x i32] [i32 -5, i32 86], [2 x i32] [i32 2, i32 88], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 5, i32 54], [2 x i32] [i32 4, i32 69], [2 x i32] [i32 -3, i32 81], [2 x i32] [i32 0, i32 88], [2 x i32] [i32 0, i32 64]]], [2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 -2, i32 69], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -5, i32 82], [2 x i32] [i32 -10, i32 96], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 56], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 74], [2 x i32] [i32 -6, i32 85], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 2, i32 59], [2 x i32] [i32 2, i32 75], [2 x i32] [i32 -3, i32 87], [2 x i32] [i32 -3, i32 100], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 -3, i32 81], [2 x i32] [i32 -7, i32 86], [2 x i32] [i32 -5, i32 95], [2 x i32] [i32 0, i32 64]]], [2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 -11, i32 89], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -15, i32 103], [2 x i32] [i32 -21, i32 116], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 63], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -5, i32 85], [2 x i32] [i32 -13, i32 106], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 19, i32 57], [2 x i32] [i32 20, i32 58], [2 x i32] [i32 4, i32 84], [2 x i32] [i32 6, i32 96], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 5, i32 63], [2 x i32] [i32 6, i32 75], [2 x i32] [i32 -3, i32 90], [2 x i32] [i32 -1, i32 101], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_REF_NO_I = internal constant [1 x [2 x [6 x [2 x i32]]]] [[2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_REF_NO_P = internal constant [3 x [2 x [6 x [2 x i32]]]] [[2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 -7, i32 67], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 -4, i32 74], [2 x i32] [i32 -5, i32 80], [2 x i32] [i32 -7, i32 72], [2 x i32] [i32 1, i32 58]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 -1, i32 66], [2 x i32] [i32 -1, i32 77], [2 x i32] [i32 1, i32 70], [2 x i32] [i32 -2, i32 86], [2 x i32] [i32 -5, i32 72], [2 x i32] [i32 0, i32 61]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 3, i32 55], [2 x i32] [i32 -4, i32 79], [2 x i32] [i32 -2, i32 75], [2 x i32] [i32 -12, i32 97], [2 x i32] [i32 -7, i32 50], [2 x i32] [i32 1, i32 60]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_DELTA_QP_I = internal constant [1 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]]], align 16
@INIT_DELTA_QP_P = internal constant [3 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]]], align 16
@INIT_MB_AFF_I = internal constant [1 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 11], [2 x i32] [i32 1, i32 55], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MB_AFF_P = internal constant [3 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 45], [2 x i32] [i32 -4, i32 78], [2 x i32] [i32 -3, i32 96], [2 x i32] [i32 0, i32 64]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 13, i32 15], [2 x i32] [i32 7, i32 51], [2 x i32] [i32 2, i32 80], [2 x i32] [i32 0, i32 64]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 7, i32 34], [2 x i32] [i32 -9, i32 88], [2 x i32] [i32 -20, i32 127], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_TRANSFORM_SIZE_I = internal constant [1 x [1 x [3 x [2 x i32]]]] [[1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 31, i32 21], [2 x i32] [i32 31, i32 31], [2 x i32] [i32 25, i32 50]]]], align 16
@INIT_TRANSFORM_SIZE_P = internal constant [3 x [1 x [3 x [2 x i32]]]] [[1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 12, i32 40], [2 x i32] [i32 11, i32 51], [2 x i32] [i32 14, i32 59]]], [1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 25, i32 32], [2 x i32] [i32 21, i32 49], [2 x i32] [i32 21, i32 54]]], [1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 21, i32 33], [2 x i32] [i32 19, i32 50], [2 x i32] [i32 17, i32 61]]]], align 16
@INIT_IPR_I = internal constant [1 x [1 x [2 x [2 x i32]]]] [[1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]]], align 16
@INIT_IPR_P = internal constant [3 x [1 x [2 x [2 x i32]]]] [[1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]], [1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]], [1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]]], align 16
@INIT_CIPR_I = internal constant [1 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]]], align 16
@INIT_CIPR_P = internal constant [3 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]]], align 16
@INIT_CBP_I = internal constant [1 x [3 x [4 x [2 x i32]]]] [[3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -17, i32 127], [2 x i32] [i32 -13, i32 102], [2 x i32] [i32 0, i32 82], [2 x i32] [i32 -7, i32 74]], [4 x [2 x i32]] [[2 x i32] [i32 -21, i32 107], [2 x i32] [i32 -27, i32 127], [2 x i32] [i32 -31, i32 127], [2 x i32] [i32 -24, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -18, i32 95], [2 x i32] [i32 -27, i32 127], [2 x i32] [i32 -21, i32 114], [2 x i32] [i32 -30, i32 127]]]], align 16
@INIT_CBP_P = internal constant [3 x [3 x [4 x [2 x i32]]]] [[3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -27, i32 126], [2 x i32] [i32 -28, i32 98], [2 x i32] [i32 -25, i32 101], [2 x i32] [i32 -23, i32 67]], [4 x [2 x i32]] [[2 x i32] [i32 -28, i32 82], [2 x i32] [i32 -20, i32 94], [2 x i32] [i32 -16, i32 83], [2 x i32] [i32 -22, i32 110]], [4 x [2 x i32]] [[2 x i32] [i32 -21, i32 91], [2 x i32] [i32 -18, i32 102], [2 x i32] [i32 -13, i32 93], [2 x i32] [i32 -29, i32 127]]], [3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -39, i32 127], [2 x i32] [i32 -18, i32 91], [2 x i32] [i32 -17, i32 96], [2 x i32] [i32 -26, i32 81]], [4 x [2 x i32]] [[2 x i32] [i32 -35, i32 98], [2 x i32] [i32 -24, i32 102], [2 x i32] [i32 -23, i32 97], [2 x i32] [i32 -27, i32 119]], [4 x [2 x i32]] [[2 x i32] [i32 -24, i32 99], [2 x i32] [i32 -21, i32 110], [2 x i32] [i32 -18, i32 102], [2 x i32] [i32 -36, i32 127]]], [3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -36, i32 127], [2 x i32] [i32 -17, i32 91], [2 x i32] [i32 -14, i32 95], [2 x i32] [i32 -25, i32 84]], [4 x [2 x i32]] [[2 x i32] [i32 -25, i32 86], [2 x i32] [i32 -12, i32 89], [2 x i32] [i32 -17, i32 91], [2 x i32] [i32 -31, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -14, i32 76], [2 x i32] [i32 -18, i32 103], [2 x i32] [i32 -13, i32 90], [2 x i32] [i32 -37, i32 127]]]], align 16
@INIT_BCBP_I = internal constant [1 x [8 x [4 x [2 x i32]]]] [[8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -17, i32 123], [2 x i32] [i32 -12, i32 115], [2 x i32] [i32 -16, i32 122], [2 x i32] [i32 -11, i32 115]], [4 x [2 x i32]] [[2 x i32] [i32 -12, i32 63], [2 x i32] [i32 -2, i32 68], [2 x i32] [i32 -15, i32 84], [2 x i32] [i32 -13, i32 104]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 70], [2 x i32] [i32 -8, i32 93], [2 x i32] [i32 -10, i32 90], [2 x i32] [i32 -30, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -1, i32 74], [2 x i32] [i32 -6, i32 97], [2 x i32] [i32 -7, i32 91], [2 x i32] [i32 -20, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -4, i32 56], [2 x i32] [i32 -5, i32 82], [2 x i32] [i32 -7, i32 76], [2 x i32] [i32 -22, i32 125]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_BCBP_P = internal constant [3 x [8 x [4 x [2 x i32]]]] [[8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -7, i32 92], [2 x i32] [i32 -5, i32 89], [2 x i32] [i32 -7, i32 96], [2 x i32] [i32 -13, i32 108]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 46], [2 x i32] [i32 -1, i32 65], [2 x i32] [i32 -1, i32 57], [2 x i32] [i32 -9, i32 93]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 74], [2 x i32] [i32 -9, i32 92], [2 x i32] [i32 -8, i32 87], [2 x i32] [i32 -23, i32 126]], [4 x [2 x i32]] [[2 x i32] [i32 5, i32 54], [2 x i32] [i32 6, i32 60], [2 x i32] [i32 6, i32 59], [2 x i32] [i32 6, i32 69]], [4 x [2 x i32]] [[2 x i32] [i32 -1, i32 48], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -4, i32 69], [2 x i32] [i32 -8, i32 88]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 80], [2 x i32] [i32 -5, i32 89], [2 x i32] [i32 -7, i32 94], [2 x i32] [i32 -4, i32 92]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 39], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 -15, i32 84], [2 x i32] [i32 -35, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -2, i32 73], [2 x i32] [i32 -12, i32 104], [2 x i32] [i32 -9, i32 91], [2 x i32] [i32 -31, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 3, i32 55], [2 x i32] [i32 7, i32 56], [2 x i32] [i32 7, i32 55], [2 x i32] [i32 8, i32 61]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 53], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -7, i32 74], [2 x i32] [i32 -9, i32 88]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 11, i32 80], [2 x i32] [i32 5, i32 76], [2 x i32] [i32 2, i32 84], [2 x i32] [i32 5, i32 78]], [4 x [2 x i32]] [[2 x i32] [i32 -6, i32 55], [2 x i32] [i32 4, i32 61], [2 x i32] [i32 -14, i32 83], [2 x i32] [i32 -37, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -5, i32 79], [2 x i32] [i32 -11, i32 104], [2 x i32] [i32 -11, i32 91], [2 x i32] [i32 -30, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 65], [2 x i32] [i32 -2, i32 79], [2 x i32] [i32 0, i32 72], [2 x i32] [i32 -4, i32 92]], [4 x [2 x i32]] [[2 x i32] [i32 -6, i32 56], [2 x i32] [i32 3, i32 68], [2 x i32] [i32 -8, i32 71], [2 x i32] [i32 -13, i32 98]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_MAP_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -7, i32 93], [2 x i32] [i32 -11, i32 87], [2 x i32] [i32 -3, i32 77], [2 x i32] [i32 -5, i32 71], [2 x i32] [i32 -4, i32 63], [2 x i32] [i32 -4, i32 68], [2 x i32] [i32 -12, i32 84], [2 x i32] [i32 -7, i32 62], [2 x i32] [i32 -7, i32 65], [2 x i32] [i32 8, i32 61], [2 x i32] [i32 5, i32 56], [2 x i32] [i32 -2, i32 66], [2 x i32] [i32 1, i32 64], [2 x i32] [i32 0, i32 61], [2 x i32] [i32 -2, i32 78]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 50], [2 x i32] [i32 7, i32 52], [2 x i32] [i32 10, i32 35], [2 x i32] [i32 0, i32 44], [2 x i32] [i32 11, i32 38], [2 x i32] [i32 1, i32 45], [2 x i32] [i32 0, i32 46], [2 x i32] [i32 5, i32 44], [2 x i32] [i32 31, i32 17], [2 x i32] [i32 1, i32 51], [2 x i32] [i32 7, i32 50], [2 x i32] [i32 28, i32 19], [2 x i32] [i32 16, i32 33], [2 x i32] [i32 14, i32 62]], [15 x [2 x i32]] [[2 x i32] [i32 -17, i32 120], [2 x i32] [i32 -20, i32 112], [2 x i32] [i32 -18, i32 114], [2 x i32] [i32 -11, i32 85], [2 x i32] [i32 -15, i32 92], [2 x i32] [i32 -14, i32 89], [2 x i32] [i32 -26, i32 71], [2 x i32] [i32 -15, i32 81], [2 x i32] [i32 -14, i32 80], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -14, i32 70], [2 x i32] [i32 -24, i32 56], [2 x i32] [i32 -23, i32 68], [2 x i32] [i32 -24, i32 50], [2 x i32] [i32 -11, i32 74]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -13, i32 108], [2 x i32] [i32 -15, i32 100], [2 x i32] [i32 -13, i32 101], [2 x i32] [i32 -13, i32 91], [2 x i32] [i32 -12, i32 94], [2 x i32] [i32 -10, i32 88], [2 x i32] [i32 -16, i32 84], [2 x i32] [i32 -10, i32 86], [2 x i32] [i32 -7, i32 83], [2 x i32] [i32 -13, i32 87], [2 x i32] [i32 -19, i32 94], [2 x i32] [i32 1, i32 70], [2 x i32] [i32 0, i32 72], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 18, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 -8, i32 102], [2 x i32] [i32 -15, i32 100], [2 x i32] [i32 0, i32 95], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 75], [2 x i32] [i32 2, i32 72], [2 x i32] [i32 -11, i32 75], [2 x i32] [i32 -3, i32 71], [2 x i32] [i32 15, i32 46], [2 x i32] [i32 -13, i32 69], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 21, i32 37], [2 x i32] [i32 -15, i32 72], [2 x i32] [i32 9, i32 57], [2 x i32] [i32 16, i32 54], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 12, i32 72]]]], align 16
@INIT_MAP_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -2, i32 85], [2 x i32] [i32 -6, i32 78], [2 x i32] [i32 -1, i32 75], [2 x i32] [i32 -7, i32 77], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 5, i32 50], [2 x i32] [i32 -3, i32 68], [2 x i32] [i32 1, i32 50], [2 x i32] [i32 6, i32 42], [2 x i32] [i32 -4, i32 81], [2 x i32] [i32 1, i32 63], [2 x i32] [i32 -4, i32 70], [2 x i32] [i32 0, i32 67], [2 x i32] [i32 2, i32 57], [2 x i32] [i32 -2, i32 76]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 11, i32 35], [2 x i32] [i32 4, i32 64], [2 x i32] [i32 1, i32 61], [2 x i32] [i32 11, i32 35], [2 x i32] [i32 18, i32 25], [2 x i32] [i32 12, i32 24], [2 x i32] [i32 13, i32 29], [2 x i32] [i32 13, i32 36], [2 x i32] [i32 -10, i32 93], [2 x i32] [i32 -7, i32 73], [2 x i32] [i32 -2, i32 73], [2 x i32] [i32 13, i32 46], [2 x i32] [i32 9, i32 49], [2 x i32] [i32 -7, i32 100]], [15 x [2 x i32]] [[2 x i32] [i32 -4, i32 79], [2 x i32] [i32 -7, i32 71], [2 x i32] [i32 -5, i32 69], [2 x i32] [i32 -9, i32 70], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -10, i32 68], [2 x i32] [i32 -19, i32 73], [2 x i32] [i32 -12, i32 69], [2 x i32] [i32 -16, i32 70], [2 x i32] [i32 -15, i32 67], [2 x i32] [i32 -20, i32 62], [2 x i32] [i32 -19, i32 70], [2 x i32] [i32 -16, i32 66], [2 x i32] [i32 -22, i32 65], [2 x i32] [i32 -20, i32 63]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 53], [2 x i32] [i32 2, i32 53], [2 x i32] [i32 5, i32 53], [2 x i32] [i32 -2, i32 61], [2 x i32] [i32 0, i32 56], [2 x i32] [i32 0, i32 56], [2 x i32] [i32 -13, i32 63], [2 x i32] [i32 -5, i32 60], [2 x i32] [i32 -1, i32 62], [2 x i32] [i32 4, i32 57], [2 x i32] [i32 -6, i32 69], [2 x i32] [i32 4, i32 57], [2 x i32] [i32 14, i32 39], [2 x i32] [i32 4, i32 51], [2 x i32] [i32 13, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 3, i32 64], [2 x i32] [i32 1, i32 61], [2 x i32] [i32 9, i32 63], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 7, i32 50], [2 x i32] [i32 16, i32 39], [2 x i32] [i32 5, i32 44], [2 x i32] [i32 4, i32 52], [2 x i32] [i32 11, i32 48], [2 x i32] [i32 -5, i32 60], [2 x i32] [i32 -1, i32 59], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 22, i32 33], [2 x i32] [i32 5, i32 44], [2 x i32] [i32 14, i32 43], [2 x i32] [i32 -1, i32 78], [2 x i32] [i32 0, i32 60], [2 x i32] [i32 9, i32 69]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -13, i32 103], [2 x i32] [i32 -13, i32 91], [2 x i32] [i32 -9, i32 89], [2 x i32] [i32 -14, i32 92], [2 x i32] [i32 -8, i32 76], [2 x i32] [i32 -12, i32 87], [2 x i32] [i32 -23, i32 110], [2 x i32] [i32 -24, i32 105], [2 x i32] [i32 -10, i32 78], [2 x i32] [i32 -20, i32 112], [2 x i32] [i32 -17, i32 99], [2 x i32] [i32 -78, i32 127], [2 x i32] [i32 -70, i32 127], [2 x i32] [i32 -50, i32 127], [2 x i32] [i32 -46, i32 127]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 66], [2 x i32] [i32 -5, i32 78], [2 x i32] [i32 -4, i32 71], [2 x i32] [i32 -8, i32 72], [2 x i32] [i32 2, i32 59], [2 x i32] [i32 -1, i32 55], [2 x i32] [i32 -7, i32 70], [2 x i32] [i32 -6, i32 75], [2 x i32] [i32 -8, i32 89], [2 x i32] [i32 -34, i32 119], [2 x i32] [i32 -3, i32 75], [2 x i32] [i32 32, i32 20], [2 x i32] [i32 30, i32 22], [2 x i32] [i32 -44, i32 127]], [15 x [2 x i32]] [[2 x i32] [i32 -5, i32 85], [2 x i32] [i32 -6, i32 81], [2 x i32] [i32 -10, i32 77], [2 x i32] [i32 -7, i32 81], [2 x i32] [i32 -17, i32 80], [2 x i32] [i32 -18, i32 73], [2 x i32] [i32 -4, i32 74], [2 x i32] [i32 -10, i32 83], [2 x i32] [i32 -9, i32 71], [2 x i32] [i32 -9, i32 67], [2 x i32] [i32 -1, i32 61], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -14, i32 66], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 2, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 54], [2 x i32] [i32 -5, i32 61], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 -1, i32 60], [2 x i32] [i32 -3, i32 61], [2 x i32] [i32 -8, i32 67], [2 x i32] [i32 -25, i32 84], [2 x i32] [i32 -14, i32 74], [2 x i32] [i32 -5, i32 65], [2 x i32] [i32 5, i32 52], [2 x i32] [i32 2, i32 57], [2 x i32] [i32 0, i32 61], [2 x i32] [i32 -9, i32 69], [2 x i32] [i32 -11, i32 70], [2 x i32] [i32 18, i32 55]], [15 x [2 x i32]] [[2 x i32] [i32 -4, i32 71], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 7, i32 61], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 9, i32 41], [2 x i32] [i32 18, i32 25], [2 x i32] [i32 9, i32 32], [2 x i32] [i32 5, i32 43], [2 x i32] [i32 9, i32 47], [2 x i32] [i32 0, i32 44], [2 x i32] [i32 0, i32 51], [2 x i32] [i32 2, i32 46], [2 x i32] [i32 19, i32 38], [2 x i32] [i32 -4, i32 66], [2 x i32] [i32 15, i32 38], [2 x i32] [i32 12, i32 42], [2 x i32] [i32 9, i32 34], [2 x i32] [i32 0, i32 89]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -4, i32 86], [2 x i32] [i32 -12, i32 88], [2 x i32] [i32 -5, i32 82], [2 x i32] [i32 -3, i32 72], [2 x i32] [i32 -4, i32 67], [2 x i32] [i32 -8, i32 72], [2 x i32] [i32 -16, i32 89], [2 x i32] [i32 -9, i32 69], [2 x i32] [i32 -1, i32 59], [2 x i32] [i32 5, i32 66], [2 x i32] [i32 4, i32 57], [2 x i32] [i32 -4, i32 71], [2 x i32] [i32 -2, i32 71], [2 x i32] [i32 2, i32 58], [2 x i32] [i32 -1, i32 74]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 44], [2 x i32] [i32 -1, i32 69], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 -7, i32 51], [2 x i32] [i32 -4, i32 47], [2 x i32] [i32 -6, i32 42], [2 x i32] [i32 -3, i32 41], [2 x i32] [i32 -6, i32 53], [2 x i32] [i32 8, i32 76], [2 x i32] [i32 -9, i32 78], [2 x i32] [i32 -11, i32 83], [2 x i32] [i32 9, i32 52], [2 x i32] [i32 0, i32 67], [2 x i32] [i32 -5, i32 90]], [15 x [2 x i32]] [[2 x i32] [i32 -3, i32 78], [2 x i32] [i32 -8, i32 74], [2 x i32] [i32 -9, i32 72], [2 x i32] [i32 -10, i32 72], [2 x i32] [i32 -18, i32 75], [2 x i32] [i32 -12, i32 71], [2 x i32] [i32 -11, i32 63], [2 x i32] [i32 -5, i32 70], [2 x i32] [i32 -17, i32 75], [2 x i32] [i32 -14, i32 72], [2 x i32] [i32 -16, i32 67], [2 x i32] [i32 -8, i32 53], [2 x i32] [i32 -14, i32 59], [2 x i32] [i32 -9, i32 52], [2 x i32] [i32 -11, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 1, i32 67], [2 x i32] [i32 -15, i32 72], [2 x i32] [i32 -5, i32 75], [2 x i32] [i32 -8, i32 80], [2 x i32] [i32 -21, i32 83], [2 x i32] [i32 -21, i32 64], [2 x i32] [i32 -13, i32 31], [2 x i32] [i32 -25, i32 64], [2 x i32] [i32 -29, i32 94], [2 x i32] [i32 9, i32 75], [2 x i32] [i32 17, i32 63], [2 x i32] [i32 -8, i32 74], [2 x i32] [i32 -5, i32 35], [2 x i32] [i32 -2, i32 27], [2 x i32] [i32 13, i32 91]], [15 x [2 x i32]] [[2 x i32] [i32 3, i32 65], [2 x i32] [i32 -7, i32 69], [2 x i32] [i32 8, i32 77], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -10, i32 66], [2 x i32] [i32 3, i32 62], [2 x i32] [i32 -3, i32 68], [2 x i32] [i32 -20, i32 81], [2 x i32] [i32 0, i32 30], [2 x i32] [i32 1, i32 7], [2 x i32] [i32 -3, i32 23], [2 x i32] [i32 -21, i32 74], [2 x i32] [i32 16, i32 66], [2 x i32] [i32 -23, i32 124], [2 x i32] [i32 17, i32 37], [2 x i32] [i32 44, i32 -18], [2 x i32] [i32 50, i32 -34], [2 x i32] [i32 -22, i32 127]]]], align 16
@INIT_LAST_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 24, i32 0], [2 x i32] [i32 15, i32 9], [2 x i32] [i32 8, i32 25], [2 x i32] [i32 13, i32 18], [2 x i32] [i32 15, i32 9], [2 x i32] [i32 13, i32 19], [2 x i32] [i32 10, i32 37], [2 x i32] [i32 12, i32 18], [2 x i32] [i32 6, i32 29], [2 x i32] [i32 20, i32 33], [2 x i32] [i32 15, i32 30], [2 x i32] [i32 4, i32 45], [2 x i32] [i32 1, i32 58], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 7, i32 61]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 12, i32 38], [2 x i32] [i32 11, i32 45], [2 x i32] [i32 15, i32 39], [2 x i32] [i32 11, i32 42], [2 x i32] [i32 13, i32 44], [2 x i32] [i32 16, i32 45], [2 x i32] [i32 12, i32 41], [2 x i32] [i32 10, i32 49], [2 x i32] [i32 30, i32 34], [2 x i32] [i32 18, i32 42], [2 x i32] [i32 10, i32 55], [2 x i32] [i32 17, i32 51], [2 x i32] [i32 17, i32 46], [2 x i32] [i32 0, i32 89]], [15 x [2 x i32]] [[2 x i32] [i32 23, i32 -13], [2 x i32] [i32 26, i32 -13], [2 x i32] [i32 40, i32 -15], [2 x i32] [i32 49, i32 -14], [2 x i32] [i32 44, i32 3], [2 x i32] [i32 45, i32 6], [2 x i32] [i32 44, i32 34], [2 x i32] [i32 33, i32 54], [2 x i32] [i32 19, i32 82], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 26, i32 -19], [2 x i32] [i32 22, i32 -17], [2 x i32] [i32 26, i32 -17], [2 x i32] [i32 30, i32 -25], [2 x i32] [i32 28, i32 -20], [2 x i32] [i32 33, i32 -23], [2 x i32] [i32 37, i32 -27], [2 x i32] [i32 33, i32 -23], [2 x i32] [i32 40, i32 -28], [2 x i32] [i32 38, i32 -17], [2 x i32] [i32 33, i32 -11], [2 x i32] [i32 40, i32 -15], [2 x i32] [i32 41, i32 -6], [2 x i32] [i32 38, i32 1], [2 x i32] [i32 41, i32 17]], [15 x [2 x i32]] [[2 x i32] [i32 30, i32 -6], [2 x i32] [i32 27, i32 3], [2 x i32] [i32 26, i32 22], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 37, i32 -16], [2 x i32] [i32 35, i32 -4], [2 x i32] [i32 38, i32 -8], [2 x i32] [i32 38, i32 -3], [2 x i32] [i32 37, i32 3], [2 x i32] [i32 38, i32 5], [2 x i32] [i32 42, i32 0], [2 x i32] [i32 35, i32 16], [2 x i32] [i32 39, i32 22], [2 x i32] [i32 14, i32 48], [2 x i32] [i32 27, i32 37], [2 x i32] [i32 21, i32 60], [2 x i32] [i32 12, i32 68], [2 x i32] [i32 2, i32 97]]]], align 16
@INIT_LAST_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 11, i32 28], [2 x i32] [i32 2, i32 40], [2 x i32] [i32 3, i32 44], [2 x i32] [i32 0, i32 49], [2 x i32] [i32 0, i32 46], [2 x i32] [i32 2, i32 44], [2 x i32] [i32 2, i32 51], [2 x i32] [i32 0, i32 47], [2 x i32] [i32 4, i32 39], [2 x i32] [i32 2, i32 62], [2 x i32] [i32 6, i32 46], [2 x i32] [i32 0, i32 54], [2 x i32] [i32 3, i32 54], [2 x i32] [i32 2, i32 58], [2 x i32] [i32 4, i32 63]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 6, i32 51], [2 x i32] [i32 6, i32 57], [2 x i32] [i32 7, i32 53], [2 x i32] [i32 6, i32 52], [2 x i32] [i32 6, i32 55], [2 x i32] [i32 11, i32 45], [2 x i32] [i32 14, i32 36], [2 x i32] [i32 8, i32 53], [2 x i32] [i32 -1, i32 82], [2 x i32] [i32 7, i32 55], [2 x i32] [i32 -3, i32 78], [2 x i32] [i32 15, i32 46], [2 x i32] [i32 22, i32 31], [2 x i32] [i32 -1, i32 84]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 -2], [2 x i32] [i32 26, i32 -9], [2 x i32] [i32 33, i32 -9], [2 x i32] [i32 39, i32 -7], [2 x i32] [i32 41, i32 -2], [2 x i32] [i32 45, i32 3], [2 x i32] [i32 49, i32 9], [2 x i32] [i32 45, i32 27], [2 x i32] [i32 36, i32 59], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 25, i32 7], [2 x i32] [i32 30, i32 -7], [2 x i32] [i32 28, i32 3], [2 x i32] [i32 28, i32 4], [2 x i32] [i32 32, i32 0], [2 x i32] [i32 34, i32 -1], [2 x i32] [i32 30, i32 6], [2 x i32] [i32 30, i32 6], [2 x i32] [i32 32, i32 9], [2 x i32] [i32 31, i32 19], [2 x i32] [i32 26, i32 27], [2 x i32] [i32 26, i32 30], [2 x i32] [i32 37, i32 20], [2 x i32] [i32 28, i32 34], [2 x i32] [i32 17, i32 70]], [15 x [2 x i32]] [[2 x i32] [i32 1, i32 67], [2 x i32] [i32 5, i32 59], [2 x i32] [i32 9, i32 67], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 16, i32 30], [2 x i32] [i32 18, i32 32], [2 x i32] [i32 18, i32 35], [2 x i32] [i32 22, i32 29], [2 x i32] [i32 24, i32 31], [2 x i32] [i32 23, i32 38], [2 x i32] [i32 18, i32 43], [2 x i32] [i32 20, i32 41], [2 x i32] [i32 11, i32 63], [2 x i32] [i32 9, i32 59], [2 x i32] [i32 9, i32 64], [2 x i32] [i32 -1, i32 94], [2 x i32] [i32 -2, i32 89], [2 x i32] [i32 -9, i32 108]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 4, i32 45], [2 x i32] [i32 10, i32 28], [2 x i32] [i32 10, i32 31], [2 x i32] [i32 33, i32 -11], [2 x i32] [i32 52, i32 -43], [2 x i32] [i32 18, i32 15], [2 x i32] [i32 28, i32 0], [2 x i32] [i32 35, i32 -22], [2 x i32] [i32 38, i32 -25], [2 x i32] [i32 34, i32 0], [2 x i32] [i32 39, i32 -18], [2 x i32] [i32 32, i32 -12], [2 x i32] [i32 102, i32 -94], [2 x i32] zeroinitializer, [2 x i32] [i32 56, i32 -15]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 33, i32 -4], [2 x i32] [i32 29, i32 10], [2 x i32] [i32 37, i32 -5], [2 x i32] [i32 51, i32 -29], [2 x i32] [i32 39, i32 -9], [2 x i32] [i32 52, i32 -34], [2 x i32] [i32 69, i32 -58], [2 x i32] [i32 67, i32 -63], [2 x i32] [i32 44, i32 -5], [2 x i32] [i32 32, i32 7], [2 x i32] [i32 55, i32 -29], [2 x i32] [i32 32, i32 1], [2 x i32] zeroinitializer, [2 x i32] [i32 27, i32 36]], [15 x [2 x i32]] [[2 x i32] [i32 17, i32 -10], [2 x i32] [i32 32, i32 -13], [2 x i32] [i32 42, i32 -9], [2 x i32] [i32 49, i32 -5], [2 x i32] [i32 53, i32 0], [2 x i32] [i32 64, i32 3], [2 x i32] [i32 68, i32 10], [2 x i32] [i32 66, i32 27], [2 x i32] [i32 47, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 33, i32 -25], [2 x i32] [i32 34, i32 -30], [2 x i32] [i32 36, i32 -28], [2 x i32] [i32 38, i32 -28], [2 x i32] [i32 38, i32 -27], [2 x i32] [i32 34, i32 -18], [2 x i32] [i32 35, i32 -16], [2 x i32] [i32 34, i32 -14], [2 x i32] [i32 32, i32 -8], [2 x i32] [i32 37, i32 -6], [2 x i32] [i32 35, i32 0], [2 x i32] [i32 30, i32 10], [2 x i32] [i32 28, i32 18], [2 x i32] [i32 26, i32 25], [2 x i32] [i32 29, i32 41]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 75], [2 x i32] [i32 2, i32 72], [2 x i32] [i32 8, i32 77], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 14, i32 35], [2 x i32] [i32 18, i32 31], [2 x i32] [i32 17, i32 35], [2 x i32] [i32 21, i32 30], [2 x i32] [i32 17, i32 45], [2 x i32] [i32 20, i32 42], [2 x i32] [i32 18, i32 45], [2 x i32] [i32 27, i32 26], [2 x i32] [i32 16, i32 54], [2 x i32] [i32 7, i32 66], [2 x i32] [i32 16, i32 56], [2 x i32] [i32 11, i32 73], [2 x i32] [i32 10, i32 67], [2 x i32] [i32 -10, i32 116]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 4, i32 39], [2 x i32] [i32 0, i32 42], [2 x i32] [i32 7, i32 34], [2 x i32] [i32 11, i32 29], [2 x i32] [i32 8, i32 31], [2 x i32] [i32 6, i32 37], [2 x i32] [i32 7, i32 42], [2 x i32] [i32 3, i32 40], [2 x i32] [i32 8, i32 33], [2 x i32] [i32 13, i32 43], [2 x i32] [i32 13, i32 36], [2 x i32] [i32 4, i32 47], [2 x i32] [i32 3, i32 55], [2 x i32] [i32 2, i32 58], [2 x i32] [i32 6, i32 60]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 8, i32 44], [2 x i32] [i32 11, i32 44], [2 x i32] [i32 14, i32 42], [2 x i32] [i32 7, i32 48], [2 x i32] [i32 4, i32 56], [2 x i32] [i32 4, i32 52], [2 x i32] [i32 13, i32 37], [2 x i32] [i32 9, i32 49], [2 x i32] [i32 19, i32 58], [2 x i32] [i32 10, i32 48], [2 x i32] [i32 12, i32 45], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 20, i32 33], [2 x i32] [i32 8, i32 63]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 -2], [2 x i32] [i32 30, i32 -10], [2 x i32] [i32 31, i32 -4], [2 x i32] [i32 33, i32 -1], [2 x i32] [i32 33, i32 7], [2 x i32] [i32 31, i32 12], [2 x i32] [i32 37, i32 23], [2 x i32] [i32 31, i32 38], [2 x i32] [i32 20, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 35, i32 -18], [2 x i32] [i32 33, i32 -25], [2 x i32] [i32 28, i32 -3], [2 x i32] [i32 24, i32 10], [2 x i32] [i32 27, i32 0], [2 x i32] [i32 34, i32 -14], [2 x i32] [i32 52, i32 -44], [2 x i32] [i32 39, i32 -24], [2 x i32] [i32 19, i32 17], [2 x i32] [i32 31, i32 25], [2 x i32] [i32 36, i32 29], [2 x i32] [i32 24, i32 33], [2 x i32] [i32 34, i32 15], [2 x i32] [i32 30, i32 20], [2 x i32] [i32 22, i32 73]], [15 x [2 x i32]] [[2 x i32] [i32 20, i32 34], [2 x i32] [i32 19, i32 31], [2 x i32] [i32 27, i32 44], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 19, i32 16], [2 x i32] [i32 15, i32 36], [2 x i32] [i32 15, i32 36], [2 x i32] [i32 21, i32 28], [2 x i32] [i32 25, i32 21], [2 x i32] [i32 30, i32 20], [2 x i32] [i32 31, i32 12], [2 x i32] [i32 27, i32 16], [2 x i32] [i32 24, i32 42], [2 x i32] [i32 0, i32 93], [2 x i32] [i32 14, i32 56], [2 x i32] [i32 15, i32 57], [2 x i32] [i32 26, i32 38], [2 x i32] [i32 -24, i32 127]]]], align 16
@INIT_ONE_I = internal constant [1 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -3, i32 71], [2 x i32] [i32 -6, i32 42], [2 x i32] [i32 -5, i32 50], [2 x i32] [i32 -3, i32 54], [2 x i32] [i32 -2, i32 62]], [5 x [2 x i32]] [[2 x i32] [i32 -5, i32 67], [2 x i32] [i32 -5, i32 27], [2 x i32] [i32 -3, i32 39], [2 x i32] [i32 -2, i32 44], [2 x i32] [i32 0, i32 46]], [5 x [2 x i32]] [[2 x i32] [i32 -3, i32 75], [2 x i32] [i32 -1, i32 23], [2 x i32] [i32 1, i32 34], [2 x i32] [i32 1, i32 43], [2 x i32] [i32 0, i32 54]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 92], [2 x i32] [i32 -15, i32 55], [2 x i32] [i32 -10, i32 60], [2 x i32] [i32 -6, i32 62], [2 x i32] [i32 -4, i32 65]], [5 x [2 x i32]] [[2 x i32] [i32 -11, i32 97], [2 x i32] [i32 -20, i32 84], [2 x i32] [i32 -11, i32 79], [2 x i32] [i32 -6, i32 73], [2 x i32] [i32 -4, i32 74]], [5 x [2 x i32]] [[2 x i32] [i32 -8, i32 78], [2 x i32] [i32 -5, i32 33], [2 x i32] [i32 -4, i32 48], [2 x i32] [i32 -2, i32 53], [2 x i32] [i32 -3, i32 62]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_ONE_P = internal constant [3 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -6, i32 76], [2 x i32] [i32 -2, i32 44], [2 x i32] [i32 0, i32 45], [2 x i32] [i32 0, i32 52], [2 x i32] [i32 -3, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -9, i32 77], [2 x i32] [i32 3, i32 24], [2 x i32] [i32 0, i32 42], [2 x i32] [i32 0, i32 48], [2 x i32] [i32 0, i32 55]], [5 x [2 x i32]] [[2 x i32] [i32 -6, i32 66], [2 x i32] [i32 -7, i32 35], [2 x i32] [i32 -7, i32 42], [2 x i32] [i32 -8, i32 45], [2 x i32] [i32 -5, i32 48]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 1, i32 58], [2 x i32] [i32 -3, i32 29], [2 x i32] [i32 -1, i32 36], [2 x i32] [i32 1, i32 38], [2 x i32] [i32 2, i32 43]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 70], [2 x i32] [i32 -4, i32 29], [2 x i32] [i32 5, i32 31], [2 x i32] [i32 7, i32 42], [2 x i32] [i32 1, i32 59]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 58], [2 x i32] [i32 8, i32 5], [2 x i32] [i32 10, i32 14], [2 x i32] [i32 14, i32 18], [2 x i32] [i32 13, i32 27]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -23, i32 112], [2 x i32] [i32 -15, i32 71], [2 x i32] [i32 -7, i32 61], [2 x i32] [i32 0, i32 53], [2 x i32] [i32 -5, i32 66]], [5 x [2 x i32]] [[2 x i32] [i32 -21, i32 101], [2 x i32] [i32 -3, i32 39], [2 x i32] [i32 -5, i32 53], [2 x i32] [i32 -7, i32 61], [2 x i32] [i32 -11, i32 75]], [5 x [2 x i32]] [[2 x i32] [i32 -5, i32 71], [2 x i32] [i32 0, i32 24], [2 x i32] [i32 -1, i32 36], [2 x i32] [i32 -2, i32 42], [2 x i32] [i32 -2, i32 52]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -11, i32 76], [2 x i32] [i32 -10, i32 44], [2 x i32] [i32 -10, i32 52], [2 x i32] [i32 -10, i32 57], [2 x i32] [i32 -9, i32 58]], [5 x [2 x i32]] [[2 x i32] [i32 2, i32 66], [2 x i32] [i32 -9, i32 34], [2 x i32] [i32 1, i32 32], [2 x i32] [i32 11, i32 31], [2 x i32] [i32 5, i32 52]], [5 x [2 x i32]] [[2 x i32] [i32 3, i32 52], [2 x i32] [i32 7, i32 4], [2 x i32] [i32 10, i32 8], [2 x i32] [i32 17, i32 8], [2 x i32] [i32 16, i32 19]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -24, i32 115], [2 x i32] [i32 -22, i32 82], [2 x i32] [i32 -9, i32 62], [2 x i32] [i32 0, i32 53], [2 x i32] [i32 0, i32 59]], [5 x [2 x i32]] [[2 x i32] [i32 -21, i32 100], [2 x i32] [i32 -14, i32 57], [2 x i32] [i32 -12, i32 67], [2 x i32] [i32 -11, i32 71], [2 x i32] [i32 -10, i32 77]], [5 x [2 x i32]] [[2 x i32] [i32 -9, i32 71], [2 x i32] [i32 -7, i32 37], [2 x i32] [i32 -8, i32 44], [2 x i32] [i32 -11, i32 49], [2 x i32] [i32 -10, i32 56]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -10, i32 82], [2 x i32] [i32 -8, i32 48], [2 x i32] [i32 -8, i32 61], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -7, i32 70]], [5 x [2 x i32]] [[2 x i32] [i32 -4, i32 79], [2 x i32] [i32 -22, i32 69], [2 x i32] [i32 -16, i32 75], [2 x i32] [i32 -2, i32 58], [2 x i32] [i32 1, i32 58]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 81], [2 x i32] [i32 -6, i32 38], [2 x i32] [i32 -13, i32 62], [2 x i32] [i32 -6, i32 58], [2 x i32] [i32 -2, i32 59]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_ABS_I = internal constant [1 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 0, i32 58], [2 x i32] [i32 1, i32 63], [2 x i32] [i32 -2, i32 72], [2 x i32] [i32 -1, i32 74], [2 x i32] [i32 -9, i32 91]], [5 x [2 x i32]] [[2 x i32] [i32 -16, i32 64], [2 x i32] [i32 -8, i32 68], [2 x i32] [i32 -10, i32 78], [2 x i32] [i32 -6, i32 77], [2 x i32] [i32 -10, i32 86]], [5 x [2 x i32]] [[2 x i32] [i32 -2, i32 55], [2 x i32] [i32 0, i32 61], [2 x i32] [i32 1, i32 64], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -9, i32 92]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 73], [2 x i32] [i32 -8, i32 76], [2 x i32] [i32 -7, i32 80], [2 x i32] [i32 -9, i32 88], [2 x i32] [i32 -17, i32 110]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 86], [2 x i32] [i32 -13, i32 96], [2 x i32] [i32 -11, i32 97], [2 x i32] [i32 -19, i32 117], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 71], [2 x i32] [i32 -10, i32 79], [2 x i32] [i32 -12, i32 86], [2 x i32] [i32 -13, i32 90], [2 x i32] [i32 -14, i32 97]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_ABS_P = internal constant [3 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -2, i32 59], [2 x i32] [i32 -4, i32 70], [2 x i32] [i32 -4, i32 75], [2 x i32] [i32 -8, i32 82], [2 x i32] [i32 -17, i32 102]], [5 x [2 x i32]] [[2 x i32] [i32 -6, i32 59], [2 x i32] [i32 -7, i32 71], [2 x i32] [i32 -12, i32 83], [2 x i32] [i32 -11, i32 87], [2 x i32] [i32 -30, i32 119]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 56], [2 x i32] [i32 -6, i32 60], [2 x i32] [i32 -5, i32 62], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -8, i32 76]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -6, i32 55], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 74], [2 x i32] [i32 -10, i32 90]], [5 x [2 x i32]] [[2 x i32] [i32 -2, i32 58], [2 x i32] [i32 -3, i32 72], [2 x i32] [i32 -3, i32 81], [2 x i32] [i32 -11, i32 97], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 2, i32 40], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 -3, i32 70], [2 x i32] [i32 -6, i32 79], [2 x i32] [i32 -8, i32 85]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -11, i32 77], [2 x i32] [i32 -9, i32 80], [2 x i32] [i32 -9, i32 84], [2 x i32] [i32 -10, i32 87], [2 x i32] [i32 -34, i32 127]], [5 x [2 x i32]] [[2 x i32] [i32 -15, i32 77], [2 x i32] [i32 -17, i32 91], [2 x i32] [i32 -25, i32 107], [2 x i32] [i32 -25, i32 111], [2 x i32] [i32 -28, i32 122]], [5 x [2 x i32]] [[2 x i32] [i32 -9, i32 57], [2 x i32] [i32 -6, i32 63], [2 x i32] [i32 -4, i32 65], [2 x i32] [i32 -4, i32 67], [2 x i32] [i32 -7, i32 82]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -16, i32 72], [2 x i32] [i32 -7, i32 69], [2 x i32] [i32 -4, i32 69], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 -9, i32 86]], [5 x [2 x i32]] [[2 x i32] [i32 -2, i32 55], [2 x i32] [i32 -2, i32 67], [2 x i32] [i32 0, i32 73], [2 x i32] [i32 -8, i32 89], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 3, i32 37], [2 x i32] [i32 -1, i32 61], [2 x i32] [i32 -5, i32 73], [2 x i32] [i32 -1, i32 70], [2 x i32] [i32 -4, i32 78]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -14, i32 85], [2 x i32] [i32 -13, i32 89], [2 x i32] [i32 -13, i32 94], [2 x i32] [i32 -11, i32 92], [2 x i32] [i32 -29, i32 127]], [5 x [2 x i32]] [[2 x i32] [i32 -21, i32 85], [2 x i32] [i32 -16, i32 88], [2 x i32] [i32 -23, i32 104], [2 x i32] [i32 -15, i32 98], [2 x i32] [i32 -37, i32 127]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 59], [2 x i32] [i32 -8, i32 63], [2 x i32] [i32 -9, i32 67], [2 x i32] [i32 -6, i32 68], [2 x i32] [i32 -10, i32 79]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -14, i32 75], [2 x i32] [i32 -10, i32 79], [2 x i32] [i32 -9, i32 83], [2 x i32] [i32 -12, i32 92], [2 x i32] [i32 -18, i32 108]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 78], [2 x i32] [i32 -9, i32 83], [2 x i32] [i32 -4, i32 81], [2 x i32] [i32 -13, i32 99], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -16, i32 73], [2 x i32] [i32 -10, i32 76], [2 x i32] [i32 -13, i32 86], [2 x i32] [i32 -9, i32 83], [2 x i32] [i32 -10, i32 87]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 16
@INIT_FLD_MAP_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -6, i32 93], [2 x i32] [i32 -6, i32 84], [2 x i32] [i32 -8, i32 79], [2 x i32] [i32 0, i32 66], [2 x i32] [i32 -1, i32 71], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 -2, i32 60], [2 x i32] [i32 -2, i32 59], [2 x i32] [i32 -5, i32 75], [2 x i32] [i32 -3, i32 62], [2 x i32] [i32 -4, i32 58], [2 x i32] [i32 -9, i32 66], [2 x i32] [i32 -1, i32 79], [2 x i32] [i32 0, i32 71], [2 x i32] [i32 3, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 10, i32 44], [2 x i32] [i32 -7, i32 62], [2 x i32] [i32 15, i32 36], [2 x i32] [i32 14, i32 40], [2 x i32] [i32 16, i32 27], [2 x i32] [i32 12, i32 29], [2 x i32] [i32 1, i32 44], [2 x i32] [i32 20, i32 36], [2 x i32] [i32 18, i32 32], [2 x i32] [i32 5, i32 42], [2 x i32] [i32 1, i32 48], [2 x i32] [i32 10, i32 62], [2 x i32] [i32 17, i32 46], [2 x i32] [i32 9, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -14, i32 106], [2 x i32] [i32 -13, i32 97], [2 x i32] [i32 -15, i32 90], [2 x i32] [i32 -12, i32 90], [2 x i32] [i32 -18, i32 88], [2 x i32] [i32 -10, i32 73], [2 x i32] [i32 -9, i32 79], [2 x i32] [i32 -14, i32 86], [2 x i32] [i32 -10, i32 73], [2 x i32] [i32 -10, i32 70], [2 x i32] [i32 -10, i32 69], [2 x i32] [i32 -5, i32 66], [2 x i32] [i32 -9, i32 64], [2 x i32] [i32 -5, i32 58], [2 x i32] [i32 2, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -12, i32 104], [2 x i32] [i32 -11, i32 97], [2 x i32] [i32 -16, i32 96], [2 x i32] [i32 -7, i32 88], [2 x i32] [i32 -8, i32 85], [2 x i32] [i32 -7, i32 85], [2 x i32] [i32 -9, i32 85], [2 x i32] [i32 -13, i32 88], [2 x i32] [i32 4, i32 66], [2 x i32] [i32 -3, i32 77], [2 x i32] [i32 -3, i32 76], [2 x i32] [i32 -6, i32 76], [2 x i32] [i32 10, i32 58], [2 x i32] [i32 -1, i32 76], [2 x i32] [i32 -1, i32 83]], [15 x [2 x i32]] [[2 x i32] [i32 -7, i32 99], [2 x i32] [i32 -14, i32 95], [2 x i32] [i32 2, i32 95], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 76], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 0, i32 70], [2 x i32] [i32 -11, i32 75], [2 x i32] [i32 1, i32 68], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 -14, i32 73], [2 x i32] [i32 3, i32 62], [2 x i32] [i32 4, i32 62], [2 x i32] [i32 -1, i32 68], [2 x i32] [i32 -13, i32 75], [2 x i32] [i32 11, i32 55], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 12, i32 70]]]], align 16
@INIT_FLD_MAP_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -13, i32 106], [2 x i32] [i32 -16, i32 106], [2 x i32] [i32 -10, i32 87], [2 x i32] [i32 -21, i32 114], [2 x i32] [i32 -18, i32 110], [2 x i32] [i32 -14, i32 98], [2 x i32] [i32 -22, i32 110], [2 x i32] [i32 -21, i32 106], [2 x i32] [i32 -18, i32 103], [2 x i32] [i32 -21, i32 107], [2 x i32] [i32 -23, i32 108], [2 x i32] [i32 -26, i32 112], [2 x i32] [i32 -10, i32 96], [2 x i32] [i32 -12, i32 95], [2 x i32] [i32 -5, i32 91]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -9, i32 93], [2 x i32] [i32 -22, i32 94], [2 x i32] [i32 -5, i32 86], [2 x i32] [i32 9, i32 67], [2 x i32] [i32 -4, i32 80], [2 x i32] [i32 -10, i32 85], [2 x i32] [i32 -1, i32 70], [2 x i32] [i32 7, i32 60], [2 x i32] [i32 9, i32 58], [2 x i32] [i32 5, i32 61], [2 x i32] [i32 12, i32 50], [2 x i32] [i32 15, i32 50], [2 x i32] [i32 18, i32 49], [2 x i32] [i32 17, i32 54]], [15 x [2 x i32]] [[2 x i32] [i32 -5, i32 85], [2 x i32] [i32 -6, i32 81], [2 x i32] [i32 -10, i32 77], [2 x i32] [i32 -7, i32 81], [2 x i32] [i32 -17, i32 80], [2 x i32] [i32 -18, i32 73], [2 x i32] [i32 -4, i32 74], [2 x i32] [i32 -10, i32 83], [2 x i32] [i32 -9, i32 71], [2 x i32] [i32 -9, i32 67], [2 x i32] [i32 -1, i32 61], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -14, i32 66], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 2, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 10, i32 41], [2 x i32] [i32 7, i32 46], [2 x i32] [i32 -1, i32 51], [2 x i32] [i32 7, i32 49], [2 x i32] [i32 8, i32 52], [2 x i32] [i32 9, i32 41], [2 x i32] [i32 6, i32 47], [2 x i32] [i32 2, i32 55], [2 x i32] [i32 13, i32 41], [2 x i32] [i32 10, i32 44], [2 x i32] [i32 6, i32 50], [2 x i32] [i32 5, i32 53], [2 x i32] [i32 13, i32 49], [2 x i32] [i32 4, i32 63], [2 x i32] [i32 6, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -2, i32 69], [2 x i32] [i32 -2, i32 59], [2 x i32] [i32 6, i32 70], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 10, i32 44], [2 x i32] [i32 9, i32 31], [2 x i32] [i32 12, i32 43], [2 x i32] [i32 3, i32 53], [2 x i32] [i32 14, i32 34], [2 x i32] [i32 10, i32 38], [2 x i32] [i32 -3, i32 52], [2 x i32] [i32 13, i32 40], [2 x i32] [i32 17, i32 32], [2 x i32] [i32 7, i32 44], [2 x i32] [i32 7, i32 38], [2 x i32] [i32 13, i32 50], [2 x i32] [i32 10, i32 57], [2 x i32] [i32 26, i32 43]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -21, i32 126], [2 x i32] [i32 -23, i32 124], [2 x i32] [i32 -20, i32 110], [2 x i32] [i32 -26, i32 126], [2 x i32] [i32 -25, i32 124], [2 x i32] [i32 -17, i32 105], [2 x i32] [i32 -27, i32 121], [2 x i32] [i32 -27, i32 117], [2 x i32] [i32 -17, i32 102], [2 x i32] [i32 -26, i32 117], [2 x i32] [i32 -27, i32 116], [2 x i32] [i32 -33, i32 122], [2 x i32] [i32 -10, i32 95], [2 x i32] [i32 -14, i32 100], [2 x i32] [i32 -8, i32 95]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -17, i32 111], [2 x i32] [i32 -28, i32 114], [2 x i32] [i32 -6, i32 89], [2 x i32] [i32 -2, i32 80], [2 x i32] [i32 -4, i32 82], [2 x i32] [i32 -9, i32 85], [2 x i32] [i32 -8, i32 81], [2 x i32] [i32 -1, i32 72], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 1, i32 67], [2 x i32] [i32 9, i32 56], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 1, i32 69], [2 x i32] [i32 7, i32 69]], [15 x [2 x i32]] [[2 x i32] [i32 -3, i32 81], [2 x i32] [i32 -3, i32 76], [2 x i32] [i32 -7, i32 72], [2 x i32] [i32 -6, i32 78], [2 x i32] [i32 -12, i32 72], [2 x i32] [i32 -14, i32 68], [2 x i32] [i32 -3, i32 70], [2 x i32] [i32 -6, i32 76], [2 x i32] [i32 -5, i32 66], [2 x i32] [i32 -5, i32 62], [2 x i32] [i32 0, i32 57], [2 x i32] [i32 -4, i32 61], [2 x i32] [i32 -9, i32 60], [2 x i32] [i32 1, i32 54], [2 x i32] [i32 2, i32 58]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -7, i32 69], [2 x i32] [i32 -6, i32 67], [2 x i32] [i32 -16, i32 77], [2 x i32] [i32 -2, i32 64], [2 x i32] [i32 2, i32 61], [2 x i32] [i32 -6, i32 67], [2 x i32] [i32 -3, i32 64], [2 x i32] [i32 2, i32 57], [2 x i32] [i32 -3, i32 65], [2 x i32] [i32 -3, i32 66], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 9, i32 51], [2 x i32] [i32 -1, i32 66], [2 x i32] [i32 -2, i32 71], [2 x i32] [i32 -2, i32 75]], [15 x [2 x i32]] [[2 x i32] [i32 -1, i32 70], [2 x i32] [i32 -9, i32 72], [2 x i32] [i32 14, i32 60], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 16, i32 37], [2 x i32] [i32 0, i32 47], [2 x i32] [i32 18, i32 35], [2 x i32] [i32 11, i32 37], [2 x i32] [i32 12, i32 41], [2 x i32] [i32 10, i32 41], [2 x i32] [i32 2, i32 48], [2 x i32] [i32 12, i32 41], [2 x i32] [i32 13, i32 41], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 3, i32 50], [2 x i32] [i32 19, i32 40], [2 x i32] [i32 3, i32 66], [2 x i32] [i32 18, i32 50]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -22, i32 127], [2 x i32] [i32 -25, i32 127], [2 x i32] [i32 -25, i32 120], [2 x i32] [i32 -27, i32 127], [2 x i32] [i32 -19, i32 114], [2 x i32] [i32 -23, i32 117], [2 x i32] [i32 -25, i32 118], [2 x i32] [i32 -26, i32 117], [2 x i32] [i32 -24, i32 113], [2 x i32] [i32 -28, i32 118], [2 x i32] [i32 -31, i32 120], [2 x i32] [i32 -37, i32 124], [2 x i32] [i32 -10, i32 94], [2 x i32] [i32 -15, i32 102], [2 x i32] [i32 -10, i32 99]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -13, i32 106], [2 x i32] [i32 -50, i32 127], [2 x i32] [i32 -5, i32 92], [2 x i32] [i32 17, i32 57], [2 x i32] [i32 -5, i32 86], [2 x i32] [i32 -13, i32 94], [2 x i32] [i32 -12, i32 91], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 0, i32 71], [2 x i32] [i32 -1, i32 73], [2 x i32] [i32 4, i32 64], [2 x i32] [i32 -7, i32 81], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 15, i32 57]], [15 x [2 x i32]] [[2 x i32] [i32 -3, i32 78], [2 x i32] [i32 -8, i32 74], [2 x i32] [i32 -9, i32 72], [2 x i32] [i32 -10, i32 72], [2 x i32] [i32 -18, i32 75], [2 x i32] [i32 -12, i32 71], [2 x i32] [i32 -11, i32 63], [2 x i32] [i32 -5, i32 70], [2 x i32] [i32 -17, i32 75], [2 x i32] [i32 -14, i32 72], [2 x i32] [i32 -16, i32 67], [2 x i32] [i32 -8, i32 53], [2 x i32] [i32 -14, i32 59], [2 x i32] [i32 -9, i32 52], [2 x i32] [i32 -11, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 1, i32 67], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -10, i32 67], [2 x i32] [i32 1, i32 68], [2 x i32] [i32 0, i32 77], [2 x i32] [i32 2, i32 64], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -5, i32 78], [2 x i32] [i32 7, i32 55], [2 x i32] [i32 5, i32 59], [2 x i32] [i32 2, i32 65], [2 x i32] [i32 14, i32 54], [2 x i32] [i32 15, i32 44], [2 x i32] [i32 5, i32 60], [2 x i32] [i32 2, i32 70]], [15 x [2 x i32]] [[2 x i32] [i32 -2, i32 76], [2 x i32] [i32 -18, i32 86], [2 x i32] [i32 12, i32 70], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 -12, i32 70], [2 x i32] [i32 11, i32 55], [2 x i32] [i32 5, i32 56], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 2, i32 65], [2 x i32] [i32 -6, i32 74], [2 x i32] [i32 5, i32 54], [2 x i32] [i32 7, i32 54], [2 x i32] [i32 -6, i32 76], [2 x i32] [i32 -11, i32 82], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 25, i32 42]]]], align 16
@INIT_FLD_LAST_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 15, i32 6], [2 x i32] [i32 6, i32 19], [2 x i32] [i32 7, i32 16], [2 x i32] [i32 12, i32 14], [2 x i32] [i32 18, i32 13], [2 x i32] [i32 13, i32 11], [2 x i32] [i32 13, i32 15], [2 x i32] [i32 15, i32 16], [2 x i32] [i32 12, i32 23], [2 x i32] [i32 13, i32 23], [2 x i32] [i32 15, i32 20], [2 x i32] [i32 14, i32 26], [2 x i32] [i32 14, i32 44], [2 x i32] [i32 17, i32 40], [2 x i32] [i32 17, i32 47]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 24, i32 17], [2 x i32] [i32 21, i32 21], [2 x i32] [i32 25, i32 22], [2 x i32] [i32 31, i32 27], [2 x i32] [i32 22, i32 29], [2 x i32] [i32 19, i32 35], [2 x i32] [i32 14, i32 50], [2 x i32] [i32 10, i32 57], [2 x i32] [i32 7, i32 63], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 -4, i32 82], [2 x i32] [i32 -3, i32 94], [2 x i32] [i32 9, i32 69], [2 x i32] [i32 -12, i32 109]], [15 x [2 x i32]] [[2 x i32] [i32 21, i32 -10], [2 x i32] [i32 24, i32 -11], [2 x i32] [i32 28, i32 -8], [2 x i32] [i32 28, i32 -1], [2 x i32] [i32 29, i32 3], [2 x i32] [i32 29, i32 9], [2 x i32] [i32 35, i32 20], [2 x i32] [i32 29, i32 36], [2 x i32] [i32 14, i32 67], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 36, i32 -35], [2 x i32] [i32 36, i32 -34], [2 x i32] [i32 32, i32 -26], [2 x i32] [i32 37, i32 -30], [2 x i32] [i32 44, i32 -32], [2 x i32] [i32 34, i32 -18], [2 x i32] [i32 34, i32 -15], [2 x i32] [i32 40, i32 -15], [2 x i32] [i32 33, i32 -7], [2 x i32] [i32 35, i32 -5], [2 x i32] [i32 33, i32 0], [2 x i32] [i32 38, i32 2], [2 x i32] [i32 33, i32 13], [2 x i32] [i32 23, i32 35], [2 x i32] [i32 13, i32 58]], [15 x [2 x i32]] [[2 x i32] [i32 29, i32 -3], [2 x i32] [i32 26, i32 0], [2 x i32] [i32 22, i32 30], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 31, i32 -7], [2 x i32] [i32 35, i32 -15], [2 x i32] [i32 34, i32 -3], [2 x i32] [i32 34, i32 3], [2 x i32] [i32 36, i32 -1], [2 x i32] [i32 34, i32 5], [2 x i32] [i32 32, i32 11], [2 x i32] [i32 35, i32 5], [2 x i32] [i32 34, i32 12], [2 x i32] [i32 39, i32 11], [2 x i32] [i32 30, i32 29], [2 x i32] [i32 34, i32 26], [2 x i32] [i32 29, i32 39], [2 x i32] [i32 19, i32 66]]]], align 16
@INIT_FLD_LAST_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 14, i32 11], [2 x i32] [i32 11, i32 14], [2 x i32] [i32 9, i32 11], [2 x i32] [i32 18, i32 11], [2 x i32] [i32 21, i32 9], [2 x i32] [i32 23, i32 -2], [2 x i32] [i32 32, i32 -15], [2 x i32] [i32 32, i32 -15], [2 x i32] [i32 34, i32 -21], [2 x i32] [i32 39, i32 -23], [2 x i32] [i32 42, i32 -33], [2 x i32] [i32 41, i32 -31], [2 x i32] [i32 46, i32 -28], [2 x i32] [i32 38, i32 -12], [2 x i32] [i32 21, i32 29]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 45, i32 -24], [2 x i32] [i32 53, i32 -45], [2 x i32] [i32 48, i32 -26], [2 x i32] [i32 65, i32 -43], [2 x i32] [i32 43, i32 -19], [2 x i32] [i32 39, i32 -10], [2 x i32] [i32 30, i32 9], [2 x i32] [i32 18, i32 26], [2 x i32] [i32 20, i32 27], [2 x i32] [i32 0, i32 57], [2 x i32] [i32 -14, i32 82], [2 x i32] [i32 -5, i32 75], [2 x i32] [i32 -19, i32 97], [2 x i32] [i32 -35, i32 125]], [15 x [2 x i32]] [[2 x i32] [i32 21, i32 -13], [2 x i32] [i32 33, i32 -14], [2 x i32] [i32 39, i32 -7], [2 x i32] [i32 46, i32 -2], [2 x i32] [i32 51, i32 2], [2 x i32] [i32 60, i32 6], [2 x i32] [i32 61, i32 17], [2 x i32] [i32 55, i32 34], [2 x i32] [i32 42, i32 62], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 27, i32 0], [2 x i32] [i32 28, i32 0], [2 x i32] [i32 31, i32 -4], [2 x i32] [i32 27, i32 6], [2 x i32] [i32 34, i32 8], [2 x i32] [i32 30, i32 10], [2 x i32] [i32 24, i32 22], [2 x i32] [i32 33, i32 19], [2 x i32] [i32 22, i32 32], [2 x i32] [i32 26, i32 31], [2 x i32] [i32 21, i32 41], [2 x i32] [i32 26, i32 44], [2 x i32] [i32 23, i32 47], [2 x i32] [i32 16, i32 65], [2 x i32] [i32 14, i32 71]], [15 x [2 x i32]] [[2 x i32] [i32 8, i32 60], [2 x i32] [i32 6, i32 63], [2 x i32] [i32 17, i32 65], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 21, i32 24], [2 x i32] [i32 23, i32 20], [2 x i32] [i32 26, i32 23], [2 x i32] [i32 27, i32 32], [2 x i32] [i32 28, i32 23], [2 x i32] [i32 28, i32 24], [2 x i32] [i32 23, i32 40], [2 x i32] [i32 24, i32 32], [2 x i32] [i32 28, i32 29], [2 x i32] [i32 23, i32 42], [2 x i32] [i32 19, i32 57], [2 x i32] [i32 22, i32 53], [2 x i32] [i32 22, i32 61], [2 x i32] [i32 11, i32 86]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 19, i32 -6], [2 x i32] [i32 18, i32 -6], [2 x i32] [i32 14, i32 0], [2 x i32] [i32 26, i32 -12], [2 x i32] [i32 31, i32 -16], [2 x i32] [i32 33, i32 -25], [2 x i32] [i32 33, i32 -22], [2 x i32] [i32 37, i32 -28], [2 x i32] [i32 39, i32 -30], [2 x i32] [i32 42, i32 -30], [2 x i32] [i32 47, i32 -42], [2 x i32] [i32 45, i32 -36], [2 x i32] [i32 49, i32 -34], [2 x i32] [i32 41, i32 -17], [2 x i32] [i32 32, i32 9]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 69, i32 -71], [2 x i32] [i32 63, i32 -63], [2 x i32] [i32 66, i32 -64], [2 x i32] [i32 77, i32 -74], [2 x i32] [i32 54, i32 -39], [2 x i32] [i32 52, i32 -35], [2 x i32] [i32 41, i32 -10], [2 x i32] [i32 36, i32 0], [2 x i32] [i32 40, i32 -1], [2 x i32] [i32 30, i32 14], [2 x i32] [i32 28, i32 26], [2 x i32] [i32 23, i32 37], [2 x i32] [i32 12, i32 55], [2 x i32] [i32 11, i32 65]], [15 x [2 x i32]] [[2 x i32] [i32 17, i32 -10], [2 x i32] [i32 32, i32 -13], [2 x i32] [i32 42, i32 -9], [2 x i32] [i32 49, i32 -5], [2 x i32] [i32 53, i32 0], [2 x i32] [i32 64, i32 3], [2 x i32] [i32 68, i32 10], [2 x i32] [i32 66, i32 27], [2 x i32] [i32 47, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 37, i32 -33], [2 x i32] [i32 39, i32 -36], [2 x i32] [i32 40, i32 -37], [2 x i32] [i32 38, i32 -30], [2 x i32] [i32 46, i32 -33], [2 x i32] [i32 42, i32 -30], [2 x i32] [i32 40, i32 -24], [2 x i32] [i32 49, i32 -29], [2 x i32] [i32 38, i32 -12], [2 x i32] [i32 40, i32 -10], [2 x i32] [i32 38, i32 -3], [2 x i32] [i32 46, i32 -5], [2 x i32] [i32 31, i32 20], [2 x i32] [i32 29, i32 30], [2 x i32] [i32 25, i32 44]], [15 x [2 x i32]] [[2 x i32] [i32 12, i32 48], [2 x i32] [i32 11, i32 49], [2 x i32] [i32 26, i32 45], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 22, i32 22], [2 x i32] [i32 23, i32 22], [2 x i32] [i32 27, i32 21], [2 x i32] [i32 33, i32 20], [2 x i32] [i32 26, i32 28], [2 x i32] [i32 30, i32 24], [2 x i32] [i32 27, i32 34], [2 x i32] [i32 18, i32 42], [2 x i32] [i32 25, i32 39], [2 x i32] [i32 18, i32 50], [2 x i32] [i32 12, i32 70], [2 x i32] [i32 21, i32 54], [2 x i32] [i32 14, i32 71], [2 x i32] [i32 11, i32 83]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 17, i32 -13], [2 x i32] [i32 16, i32 -9], [2 x i32] [i32 17, i32 -12], [2 x i32] [i32 27, i32 -21], [2 x i32] [i32 37, i32 -30], [2 x i32] [i32 41, i32 -40], [2 x i32] [i32 42, i32 -41], [2 x i32] [i32 48, i32 -47], [2 x i32] [i32 39, i32 -32], [2 x i32] [i32 46, i32 -40], [2 x i32] [i32 52, i32 -51], [2 x i32] [i32 46, i32 -41], [2 x i32] [i32 52, i32 -39], [2 x i32] [i32 43, i32 -19], [2 x i32] [i32 32, i32 11]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 61, i32 -55], [2 x i32] [i32 56, i32 -46], [2 x i32] [i32 62, i32 -50], [2 x i32] [i32 81, i32 -67], [2 x i32] [i32 45, i32 -20], [2 x i32] [i32 35, i32 -2], [2 x i32] [i32 28, i32 15], [2 x i32] [i32 34, i32 1], [2 x i32] [i32 39, i32 1], [2 x i32] [i32 30, i32 17], [2 x i32] [i32 20, i32 38], [2 x i32] [i32 18, i32 45], [2 x i32] [i32 15, i32 54], [2 x i32] [i32 0, i32 79]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 -2], [2 x i32] [i32 30, i32 -10], [2 x i32] [i32 31, i32 -4], [2 x i32] [i32 33, i32 -1], [2 x i32] [i32 33, i32 7], [2 x i32] [i32 31, i32 12], [2 x i32] [i32 37, i32 23], [2 x i32] [i32 31, i32 38], [2 x i32] [i32 20, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 36, i32 -16], [2 x i32] [i32 37, i32 -14], [2 x i32] [i32 37, i32 -17], [2 x i32] [i32 32, i32 1], [2 x i32] [i32 34, i32 15], [2 x i32] [i32 29, i32 15], [2 x i32] [i32 24, i32 25], [2 x i32] [i32 34, i32 22], [2 x i32] [i32 31, i32 16], [2 x i32] [i32 35, i32 18], [2 x i32] [i32 31, i32 28], [2 x i32] [i32 33, i32 41], [2 x i32] [i32 36, i32 28], [2 x i32] [i32 27, i32 47], [2 x i32] [i32 21, i32 62]], [15 x [2 x i32]] [[2 x i32] [i32 18, i32 31], [2 x i32] [i32 19, i32 26], [2 x i32] [i32 36, i32 24], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 24, i32 23], [2 x i32] [i32 27, i32 16], [2 x i32] [i32 24, i32 30], [2 x i32] [i32 31, i32 29], [2 x i32] [i32 22, i32 41], [2 x i32] [i32 22, i32 42], [2 x i32] [i32 16, i32 60], [2 x i32] [i32 15, i32 52], [2 x i32] [i32 14, i32 60], [2 x i32] [i32 3, i32 78], [2 x i32] [i32 -16, i32 123], [2 x i32] [i32 21, i32 53], [2 x i32] [i32 22, i32 56], [2 x i32] [i32 25, i32 61]]]], align 16

; Function Attrs: nounwind optsize uwtable
define void @create_context_memory() #0 {
entry:
  %0 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %FrameSizeInMbs = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 111
  %1 = load i32* %FrameSizeInMbs, align 4, !tbaa !3
  %2 = load %struct.InputParameters** @input, align 8, !tbaa !0
  %slice_mode = getelementptr inbounds %struct.InputParameters* %2, i64 0, i32 22
  %3 = load i32* %slice_mode, align 4, !tbaa !3
  %cmp = icmp eq i32 %3, 1
  br i1 %cmp, label %cond.true, label %cond.end

cond.true:                                        ; preds = %entry
  %slice_argument = getelementptr inbounds %struct.InputParameters* %2, i64 0, i32 23
  %4 = load i32* %slice_argument, align 4, !tbaa !3
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ %1, %entry ]
  store i32 %cond, i32* @num_mb_per_slice, align 4, !tbaa !3
  %add = add i32 %1, -1
  %sub = add i32 %add, %cond
  %div = sdiv i32 %sub, %cond
  store i32 %div, i32* @number_of_slices, align 4, !tbaa !3
  %call = tail call noalias i8* @malloc(i64 24) #4
  %5 = bitcast i8* %call to i32***
  store i32*** %5, i32**** @initialized, align 8, !tbaa !0
  %cmp1 = icmp eq i8* %call, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  tail call void @no_mem_exit(i8* getelementptr inbounds ([35 x i8]* @.str, i64 0, i64 0)) #4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %call2 = tail call noalias i8* @malloc(i64 24) #4
  %6 = bitcast i8* %call2 to i32***
  store i32*** %6, i32**** @model_number, align 8, !tbaa !0
  %cmp3 = icmp eq i8* %call2, null
  br i1 %cmp3, label %if.then4, label %for.body

if.then4:                                         ; preds = %if.end
  tail call void @no_mem_exit(i8* getelementptr inbounds ([36 x i8]* @.str1, i64 0, i64 0)) #4
  br label %for.body

for.cond43.preheader:                             ; preds = %for.inc40
  %7 = load i32**** @initialized, align 8, !tbaa !0
  %.pre150.pre = load i32* @number_of_slices, align 4, !tbaa !3
  br label %for.cond47.preheader

for.body:                                         ; preds = %for.inc40, %if.end, %if.then4
  %indvars.iv146 = phi i64 [ 0, %if.then4 ], [ 0, %if.end ], [ %indvars.iv.next147, %for.inc40 ]
  %call7 = tail call noalias i8* @malloc(i64 32) #4
  %8 = bitcast i8* %call7 to i32**
  %9 = load i32**** @initialized, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i32*** %9, i64 %indvars.iv146
  store i32** %8, i32*** %arrayidx, align 8, !tbaa !0
  %cmp8 = icmp eq i8* %call7, null
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.body
  tail call void @no_mem_exit(i8* getelementptr inbounds ([35 x i8]* @.str, i64 0, i64 0)) #4
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %for.body
  %call11 = tail call noalias i8* @malloc(i64 32) #4
  %10 = bitcast i8* %call11 to i32**
  %11 = load i32**** @model_number, align 8, !tbaa !0
  %arrayidx13 = getelementptr inbounds i32*** %11, i64 %indvars.iv146
  store i32** %10, i32*** %arrayidx13, align 8, !tbaa !0
  %cmp14 = icmp eq i8* %call11, null
  br i1 %cmp14, label %if.then15, label %for.body19

if.then15:                                        ; preds = %if.end10
  tail call void @no_mem_exit(i8* getelementptr inbounds ([36 x i8]* @.str1, i64 0, i64 0)) #4
  br label %for.body19

for.body19:                                       ; preds = %for.inc, %if.end10, %if.then15
  %indvars.iv142 = phi i64 [ 0, %if.then15 ], [ 0, %if.end10 ], [ %indvars.iv.next143, %for.inc ]
  %12 = load i32* @number_of_slices, align 4, !tbaa !3
  %conv = sext i32 %12 to i64
  %mul = shl nsw i64 %conv, 2
  %call20 = tail call noalias i8* @malloc(i64 %mul) #4
  %13 = bitcast i8* %call20 to i32*
  %14 = load i32**** @initialized, align 8, !tbaa !0
  %arrayidx23 = getelementptr inbounds i32*** %14, i64 %indvars.iv146
  %15 = load i32*** %arrayidx23, align 8, !tbaa !0
  %arrayidx24 = getelementptr inbounds i32** %15, i64 %indvars.iv142
  store i32* %13, i32** %arrayidx24, align 8, !tbaa !0
  %cmp25 = icmp eq i8* %call20, null
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body19
  tail call void @no_mem_exit(i8* getelementptr inbounds ([35 x i8]* @.str, i64 0, i64 0)) #4
  %.pre = load i32* @number_of_slices, align 4, !tbaa !3
  br label %if.end28

if.end28:                                         ; preds = %if.then27, %for.body19
  %16 = phi i32 [ %.pre, %if.then27 ], [ %12, %for.body19 ]
  %conv29 = sext i32 %16 to i64
  %mul30 = shl nsw i64 %conv29, 2
  %call31 = tail call noalias i8* @malloc(i64 %mul30) #4
  %17 = bitcast i8* %call31 to i32*
  %18 = load i32**** @model_number, align 8, !tbaa !0
  %arrayidx34 = getelementptr inbounds i32*** %18, i64 %indvars.iv146
  %19 = load i32*** %arrayidx34, align 8, !tbaa !0
  %arrayidx35 = getelementptr inbounds i32** %19, i64 %indvars.iv142
  store i32* %17, i32** %arrayidx35, align 8, !tbaa !0
  %cmp36 = icmp eq i8* %call31, null
  br i1 %cmp36, label %if.then38, label %for.inc

if.then38:                                        ; preds = %if.end28
  tail call void @no_mem_exit(i8* getelementptr inbounds ([36 x i8]* @.str1, i64 0, i64 0)) #4
  br label %for.inc

for.inc:                                          ; preds = %if.end28, %if.then38
  %indvars.iv.next143 = add i64 %indvars.iv142, 1
  %lftr.wideiv144 = trunc i64 %indvars.iv.next143 to i32
  %exitcond145 = icmp eq i32 %lftr.wideiv144, 4
  br i1 %exitcond145, label %for.inc40, label %for.body19

for.inc40:                                        ; preds = %for.inc
  %indvars.iv.next147 = add i64 %indvars.iv146, 1
  %lftr.wideiv148 = trunc i64 %indvars.iv.next147 to i32
  %exitcond149 = icmp eq i32 %lftr.wideiv148, 3
  br i1 %exitcond149, label %for.cond43.preheader, label %for.body

for.cond47.preheader:                             ; preds = %for.inc67, %for.cond43.preheader
  %.pre150 = phi i32 [ %.pre150.pre, %for.cond43.preheader ], [ %25, %for.inc67 ]
  %indvars.iv138 = phi i64 [ 0, %for.cond43.preheader ], [ %indvars.iv.next139, %for.inc67 ]
  %arrayidx58 = getelementptr inbounds i32*** %7, i64 %indvars.iv138
  br label %for.cond51.preheader

for.cond51.preheader:                             ; preds = %for.inc64, %for.cond47.preheader
  %20 = phi i32 [ %.pre150, %for.cond47.preheader ], [ %25, %for.inc64 ]
  %indvars.iv134 = phi i64 [ 0, %for.cond47.preheader ], [ %indvars.iv.next135, %for.inc64 ]
  %cmp52125 = icmp sgt i32 %20, 0
  br i1 %cmp52125, label %for.body54.lr.ph, label %for.inc64

for.body54.lr.ph:                                 ; preds = %for.cond51.preheader
  %21 = load i32*** %arrayidx58, align 8, !tbaa !0
  %arrayidx59 = getelementptr inbounds i32** %21, i64 %indvars.iv134
  %22 = load i32** %arrayidx59, align 8, !tbaa !0
  br label %for.body54

for.body54:                                       ; preds = %for.body54.lr.ph, %for.body54
  %indvars.iv132 = phi i64 [ 0, %for.body54.lr.ph ], [ %indvars.iv.next133, %for.body54 ]
  %arrayidx60 = getelementptr inbounds i32* %22, i64 %indvars.iv132
  store i32 0, i32* %arrayidx60, align 4, !tbaa !3
  %indvars.iv.next133 = add i64 %indvars.iv132, 1
  %23 = load i32* @number_of_slices, align 4, !tbaa !3
  %24 = trunc i64 %indvars.iv.next133 to i32
  %cmp52 = icmp slt i32 %24, %23
  br i1 %cmp52, label %for.body54, label %for.inc64

for.inc64:                                        ; preds = %for.body54, %for.cond51.preheader
  %25 = phi i32 [ %20, %for.cond51.preheader ], [ %23, %for.body54 ]
  %indvars.iv.next135 = add i64 %indvars.iv134, 1
  %lftr.wideiv136 = trunc i64 %indvars.iv.next135 to i32
  %exitcond137 = icmp eq i32 %lftr.wideiv136, 4
  br i1 %exitcond137, label %for.inc67, label %for.cond51.preheader

for.inc67:                                        ; preds = %for.inc64
  %indvars.iv.next139 = add i64 %indvars.iv138, 1
  %lftr.wideiv140 = trunc i64 %indvars.iv.next139 to i32
  %exitcond141 = icmp eq i32 %lftr.wideiv140, 3
  br i1 %exitcond141, label %for.body73, label %for.cond47.preheader

for.body73:                                       ; preds = %for.inc67, %for.body73
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body73 ], [ 0, %for.inc67 ]
  %26 = sub nsw i64 127, %indvars.iv
  %arrayidx76 = getelementptr inbounds [128 x double]* @probability, i64 0, i64 %26
  %27 = load double* %arrayidx76, align 8, !tbaa !4
  %sub77 = fsub double 1.000000e+00, %27
  %arrayidx79 = getelementptr inbounds [128 x double]* @probability, i64 0, i64 %indvars.iv
  store double %sub77, double* %arrayidx79, align 8, !tbaa !4
  %call82 = tail call double @log10(double %sub77) #4
  %div84 = fdiv double %call82, 0x3FD34413509F79FF
  %arrayidx86 = getelementptr inbounds [128 x double]* @entropy, i64 0, i64 %indvars.iv
  store double %div84, double* %arrayidx86, align 8, !tbaa !4
  %28 = load double* %arrayidx76, align 8, !tbaa !4
  %call90 = tail call double @log10(double %28) #4
  %div92 = fdiv double %call90, 0x3FD34413509F79FF
  %arrayidx95 = getelementptr inbounds [128 x double]* @entropy, i64 0, i64 %26
  store double %div92, double* %arrayidx95, align 8, !tbaa !4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 64
  br i1 %exitcond, label %for.end98, label %for.body73

for.end98:                                        ; preds = %for.body73
  ret void
}

; Function Attrs: nounwind optsize
declare noalias i8* @malloc(i64) #1

; Function Attrs: optsize
declare void @no_mem_exit(i8*) #2

; Function Attrs: nounwind optsize
declare double @log10(double) #1

; Function Attrs: nounwind optsize uwtable
define void @free_context_memory() #0 {
entry:
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.end, %entry
  %indvars.iv27 = phi i64 [ 0, %entry ], [ %indvars.iv.next28, %for.end ]
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  %0 = load i32**** @initialized, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i32*** %0, i64 %indvars.iv27
  %1 = load i32*** %arrayidx, align 8, !tbaa !0
  %arrayidx5 = getelementptr inbounds i32** %1, i64 %indvars.iv
  %2 = load i32** %arrayidx5, align 8, !tbaa !0
  %3 = bitcast i32* %2 to i8*
  tail call void @free(i8* %3) #4
  %4 = load i32**** @model_number, align 8, !tbaa !0
  %arrayidx8 = getelementptr inbounds i32*** %4, i64 %indvars.iv27
  %5 = load i32*** %arrayidx8, align 8, !tbaa !0
  %arrayidx9 = getelementptr inbounds i32** %5, i64 %indvars.iv
  %6 = load i32** %arrayidx9, align 8, !tbaa !0
  %7 = bitcast i32* %6 to i8*
  tail call void @free(i8* %7) #4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond, label %for.end, label %for.body3

for.end:                                          ; preds = %for.body3
  %8 = load i32**** @initialized, align 8, !tbaa !0
  %arrayidx11 = getelementptr inbounds i32*** %8, i64 %indvars.iv27
  %9 = load i32*** %arrayidx11, align 8, !tbaa !0
  %10 = bitcast i32** %9 to i8*
  tail call void @free(i8* %10) #4
  %11 = load i32**** @model_number, align 8, !tbaa !0
  %arrayidx13 = getelementptr inbounds i32*** %11, i64 %indvars.iv27
  %12 = load i32*** %arrayidx13, align 8, !tbaa !0
  %13 = bitcast i32** %12 to i8*
  tail call void @free(i8* %13) #4
  %indvars.iv.next28 = add i64 %indvars.iv27, 1
  %lftr.wideiv29 = trunc i64 %indvars.iv.next28 to i32
  %exitcond30 = icmp eq i32 %lftr.wideiv29, 3
  br i1 %exitcond30, label %for.end16, label %for.cond1.preheader

for.end16:                                        ; preds = %for.end
  %14 = load i32**** @initialized, align 8, !tbaa !0
  %15 = bitcast i32*** %14 to i8*
  tail call void @free(i8* %15) #4
  %16 = load i32**** @model_number, align 8, !tbaa !0
  %17 = bitcast i32*** %16 to i8*
  tail call void @free(i8* %17) #4
  ret void
}

; Function Attrs: nounwind optsize
declare void @free(i8* nocapture) #1

; Function Attrs: nounwind optsize uwtable
define void @SetCtxModelNumber() #0 {
entry:
  %0 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %field_picture = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 100
  %1 = load i32* %field_picture, align 4, !tbaa !3
  %type = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 6
  %2 = load i32* %type, align 4, !tbaa !3
  %currentSlice = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 50
  %3 = load %struct.Slice** %currentSlice, align 8, !tbaa !0
  %start_mb_nr = getelementptr inbounds %struct.Slice* %3, i64 0, i32 3
  %4 = load i32* %start_mb_nr, align 4, !tbaa !3
  %5 = load i32* @num_mb_per_slice, align 4, !tbaa !3
  %div = sdiv i32 %4, %5
  %cmp = icmp eq i32 %2, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %model_number = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 118
  store i32 0, i32* %model_number, align 4, !tbaa !3
  br label %if.end39

if.end:                                           ; preds = %entry
  %6 = load %struct.InputParameters** @input, align 8, !tbaa !0
  %context_init_method = getelementptr inbounds %struct.InputParameters* %6, i64 0, i32 121
  %7 = load i32* %context_init_method, align 4, !tbaa !3
  %cmp2 = icmp eq i32 %7, 0
  br i1 %cmp2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.end
  %model_number4 = getelementptr inbounds %struct.InputParameters* %6, i64 0, i32 122
  %8 = load i32* %model_number4, align 4, !tbaa !3
  %model_number5 = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 118
  store i32 %8, i32* %model_number5, align 4, !tbaa !3
  br label %if.end39

if.end6:                                          ; preds = %if.end
  %idxprom = sext i32 %div to i64
  %idxprom7 = sext i32 %2 to i64
  %idxprom8 = sext i32 %1 to i64
  %9 = load i32**** @initialized, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i32*** %9, i64 %idxprom8
  %10 = load i32*** %arrayidx, align 8, !tbaa !0
  %arrayidx9 = getelementptr inbounds i32** %10, i64 %idxprom7
  %11 = load i32** %arrayidx9, align 8, !tbaa !0
  %arrayidx10 = getelementptr inbounds i32* %11, i64 %idxprom
  %12 = load i32* %arrayidx10, align 4, !tbaa !3
  %tobool = icmp eq i32 %12, 0
  br i1 %tobool, label %if.else, label %if.then11

if.then11:                                        ; preds = %if.end6
  %13 = load i32**** @model_number, align 8, !tbaa !0
  %arrayidx15 = getelementptr inbounds i32*** %13, i64 %idxprom8
  %14 = load i32*** %arrayidx15, align 8, !tbaa !0
  %arrayidx16 = getelementptr inbounds i32** %14, i64 %idxprom7
  %15 = load i32** %arrayidx16, align 8, !tbaa !0
  %arrayidx17 = getelementptr inbounds i32* %15, i64 %idxprom
  %16 = load i32* %arrayidx17, align 4, !tbaa !3
  %model_number18 = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 118
  store i32 %16, i32* %model_number18, align 4, !tbaa !3
  br label %if.end39

if.else:                                          ; preds = %if.end6
  %tobool19 = icmp eq i32 %div, 0
  br i1 %tobool19, label %if.else36, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %sub = add nsw i32 %div, -1
  %idxprom20 = sext i32 %sub to i64
  %arrayidx25 = getelementptr inbounds i32* %11, i64 %idxprom20
  %17 = load i32* %arrayidx25, align 4, !tbaa !3
  %tobool26 = icmp eq i32 %17, 0
  br i1 %tobool26, label %if.else36, label %if.then27

if.then27:                                        ; preds = %land.lhs.true
  %18 = load i32**** @model_number, align 8, !tbaa !0
  %arrayidx32 = getelementptr inbounds i32*** %18, i64 %idxprom8
  %19 = load i32*** %arrayidx32, align 8, !tbaa !0
  %arrayidx33 = getelementptr inbounds i32** %19, i64 %idxprom7
  %20 = load i32** %arrayidx33, align 8, !tbaa !0
  %arrayidx34 = getelementptr inbounds i32* %20, i64 %idxprom20
  %21 = load i32* %arrayidx34, align 4, !tbaa !3
  %model_number35 = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 118
  store i32 %21, i32* %model_number35, align 4, !tbaa !3
  br label %if.end39

if.else36:                                        ; preds = %land.lhs.true, %if.else
  %model_number37 = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 118
  store i32 0, i32* %model_number37, align 4, !tbaa !3
  br label %if.end39

if.end39:                                         ; preds = %if.then27, %if.else36, %if.then, %if.then3, %if.then11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @init_contexts() #0 {
entry:
  %0 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %currentSlice = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 50
  %1 = load %struct.Slice** %currentSlice, align 8, !tbaa !0
  %mot_ctx = getelementptr inbounds %struct.Slice* %1, i64 0, i32 7
  %2 = load %struct.MotionInfoContexts** %mot_ctx, align 8, !tbaa !0
  %tex_ctx = getelementptr inbounds %struct.Slice* %1, i64 0, i32 8
  %3 = load %struct.TextureInfoContexts** %tex_ctx, align 8, !tbaa !0
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc28, %entry
  %indvars.iv909 = phi i64 [ 0, %entry ], [ %indvars.iv.next910, %for.inc28 ]
  br label %for.body4

for.body4:                                        ; preds = %for.inc, %for.cond2.preheader
  %indvars.iv905 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next906, %for.inc ]
  %4 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type = getelementptr inbounds %struct.ImageParameters* %4, i64 0, i32 6
  %5 = load i32* %type, align 4, !tbaa !3
  %cmp5 = icmp eq i32 %5, 2
  %arrayidx7 = getelementptr inbounds %struct.MotionInfoContexts* %2, i64 0, i32 0, i64 %indvars.iv909, i64 %indvars.iv905
  %model_number = getelementptr inbounds %struct.ImageParameters* %4, i64 0, i32 118
  %6 = load i32* %model_number, align 4, !tbaa !3
  %idxprom10 = sext i32 %6 to i64
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %for.body4
  %arrayidx14 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]]* @INIT_MB_TYPE_I, i64 0, i64 %idxprom10, i64 %indvars.iv909, i64 %indvars.iv905, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx7, i32* %arrayidx14) #4
  br label %for.inc

if.else:                                          ; preds = %for.body4
  %arrayidx27 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]]* @INIT_MB_TYPE_P, i64 0, i64 %idxprom10, i64 %indvars.iv909, i64 %indvars.iv905, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx7, i32* %arrayidx27) #4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else
  %indvars.iv.next906 = add i64 %indvars.iv905, 1
  %lftr.wideiv907 = trunc i64 %indvars.iv.next906 to i32
  %exitcond908 = icmp eq i32 %lftr.wideiv907, 11
  br i1 %exitcond908, label %for.inc28, label %for.body4

for.inc28:                                        ; preds = %for.inc
  %indvars.iv.next910 = add i64 %indvars.iv909, 1
  %lftr.wideiv911 = trunc i64 %indvars.iv.next910 to i32
  %exitcond912 = icmp eq i32 %lftr.wideiv911, 3
  br i1 %exitcond912, label %for.cond34.preheader, label %for.cond2.preheader

for.cond34.preheader:                             ; preds = %for.inc28, %for.inc70
  %indvars.iv901 = phi i64 [ %indvars.iv.next902, %for.inc70 ], [ 0, %for.inc28 ]
  br label %for.body36

for.body36:                                       ; preds = %for.inc67, %for.cond34.preheader
  %indvars.iv897 = phi i64 [ 0, %for.cond34.preheader ], [ %indvars.iv.next898, %for.inc67 ]
  %7 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type37 = getelementptr inbounds %struct.ImageParameters* %7, i64 0, i32 6
  %8 = load i32* %type37, align 4, !tbaa !3
  %cmp38 = icmp eq i32 %8, 2
  %arrayidx43 = getelementptr inbounds %struct.MotionInfoContexts* %2, i64 0, i32 1, i64 %indvars.iv901, i64 %indvars.iv897
  %model_number46 = getelementptr inbounds %struct.ImageParameters* %7, i64 0, i32 118
  %9 = load i32* %model_number46, align 4, !tbaa !3
  %idxprom47 = sext i32 %9 to i64
  br i1 %cmp38, label %if.then39, label %if.else52

if.then39:                                        ; preds = %for.body36
  %arrayidx51 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]]* @INIT_B8_TYPE_I, i64 0, i64 %idxprom47, i64 %indvars.iv901, i64 %indvars.iv897, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx43, i32* %arrayidx51) #4
  br label %for.inc67

if.else52:                                        ; preds = %for.body36
  %arrayidx65 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]]* @INIT_B8_TYPE_P, i64 0, i64 %idxprom47, i64 %indvars.iv901, i64 %indvars.iv897, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx43, i32* %arrayidx65) #4
  br label %for.inc67

for.inc67:                                        ; preds = %if.then39, %if.else52
  %indvars.iv.next898 = add i64 %indvars.iv897, 1
  %lftr.wideiv899 = trunc i64 %indvars.iv.next898 to i32
  %exitcond900 = icmp eq i32 %lftr.wideiv899, 9
  br i1 %exitcond900, label %for.inc70, label %for.body36

for.inc70:                                        ; preds = %for.inc67
  %indvars.iv.next902 = add i64 %indvars.iv901, 1
  %lftr.wideiv903 = trunc i64 %indvars.iv.next902 to i32
  %exitcond904 = icmp eq i32 %lftr.wideiv903, 2
  br i1 %exitcond904, label %for.cond76.preheader, label %for.cond34.preheader

for.cond76.preheader:                             ; preds = %for.inc70, %for.inc112
  %indvars.iv893 = phi i64 [ %indvars.iv.next894, %for.inc112 ], [ 0, %for.inc70 ]
  br label %for.body78

for.body78:                                       ; preds = %for.inc109, %for.cond76.preheader
  %indvars.iv889 = phi i64 [ 0, %for.cond76.preheader ], [ %indvars.iv.next890, %for.inc109 ]
  %10 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type79 = getelementptr inbounds %struct.ImageParameters* %10, i64 0, i32 6
  %11 = load i32* %type79, align 4, !tbaa !3
  %cmp80 = icmp eq i32 %11, 2
  %arrayidx85 = getelementptr inbounds %struct.MotionInfoContexts* %2, i64 0, i32 2, i64 %indvars.iv893, i64 %indvars.iv889
  %model_number88 = getelementptr inbounds %struct.ImageParameters* %10, i64 0, i32 118
  %12 = load i32* %model_number88, align 4, !tbaa !3
  %idxprom89 = sext i32 %12 to i64
  br i1 %cmp80, label %if.then81, label %if.else94

if.then81:                                        ; preds = %for.body78
  %arrayidx93 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]]* @INIT_MV_RES_I, i64 0, i64 %idxprom89, i64 %indvars.iv893, i64 %indvars.iv889, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx85, i32* %arrayidx93) #4
  br label %for.inc109

if.else94:                                        ; preds = %for.body78
  %arrayidx107 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]]* @INIT_MV_RES_P, i64 0, i64 %idxprom89, i64 %indvars.iv893, i64 %indvars.iv889, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx85, i32* %arrayidx107) #4
  br label %for.inc109

for.inc109:                                       ; preds = %if.then81, %if.else94
  %indvars.iv.next890 = add i64 %indvars.iv889, 1
  %lftr.wideiv891 = trunc i64 %indvars.iv.next890 to i32
  %exitcond892 = icmp eq i32 %lftr.wideiv891, 10
  br i1 %exitcond892, label %for.inc112, label %for.body78

for.inc112:                                       ; preds = %for.inc109
  %indvars.iv.next894 = add i64 %indvars.iv893, 1
  %lftr.wideiv895 = trunc i64 %indvars.iv.next894 to i32
  %exitcond896 = icmp eq i32 %lftr.wideiv895, 2
  br i1 %exitcond896, label %for.cond118.preheader, label %for.cond76.preheader

for.cond118.preheader:                            ; preds = %for.inc112, %for.inc154
  %indvars.iv885 = phi i64 [ %indvars.iv.next886, %for.inc154 ], [ 0, %for.inc112 ]
  br label %for.body120

for.body120:                                      ; preds = %for.inc151, %for.cond118.preheader
  %indvars.iv881 = phi i64 [ 0, %for.cond118.preheader ], [ %indvars.iv.next882, %for.inc151 ]
  %13 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type121 = getelementptr inbounds %struct.ImageParameters* %13, i64 0, i32 6
  %14 = load i32* %type121, align 4, !tbaa !3
  %cmp122 = icmp eq i32 %14, 2
  %arrayidx127 = getelementptr inbounds %struct.MotionInfoContexts* %2, i64 0, i32 3, i64 %indvars.iv885, i64 %indvars.iv881
  %model_number130 = getelementptr inbounds %struct.ImageParameters* %13, i64 0, i32 118
  %15 = load i32* %model_number130, align 4, !tbaa !3
  %idxprom131 = sext i32 %15 to i64
  br i1 %cmp122, label %if.then123, label %if.else136

if.then123:                                       ; preds = %for.body120
  %arrayidx135 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]]* @INIT_REF_NO_I, i64 0, i64 %idxprom131, i64 %indvars.iv885, i64 %indvars.iv881, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx127, i32* %arrayidx135) #4
  br label %for.inc151

if.else136:                                       ; preds = %for.body120
  %arrayidx149 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]]* @INIT_REF_NO_P, i64 0, i64 %idxprom131, i64 %indvars.iv885, i64 %indvars.iv881, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx127, i32* %arrayidx149) #4
  br label %for.inc151

for.inc151:                                       ; preds = %if.then123, %if.else136
  %indvars.iv.next882 = add i64 %indvars.iv881, 1
  %lftr.wideiv883 = trunc i64 %indvars.iv.next882 to i32
  %exitcond884 = icmp eq i32 %lftr.wideiv883, 6
  br i1 %exitcond884, label %for.inc154, label %for.body120

for.inc154:                                       ; preds = %for.inc151
  %indvars.iv.next886 = add i64 %indvars.iv885, 1
  %lftr.wideiv887 = trunc i64 %indvars.iv.next886 to i32
  %exitcond888 = icmp eq i32 %lftr.wideiv887, 2
  br i1 %exitcond888, label %for.body159, label %for.cond118.preheader

for.body159:                                      ; preds = %for.inc154, %for.inc184
  %indvars.iv877 = phi i64 [ %indvars.iv.next878, %for.inc184 ], [ 0, %for.inc154 ]
  %16 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type160 = getelementptr inbounds %struct.ImageParameters* %16, i64 0, i32 6
  %17 = load i32* %type160, align 4, !tbaa !3
  %cmp161 = icmp eq i32 %17, 2
  %arrayidx164 = getelementptr inbounds %struct.MotionInfoContexts* %2, i64 0, i32 4, i64 %indvars.iv877
  %model_number166 = getelementptr inbounds %struct.ImageParameters* %16, i64 0, i32 118
  %18 = load i32* %model_number166, align 4, !tbaa !3
  %idxprom167 = sext i32 %18 to i64
  br i1 %cmp161, label %if.then162, label %if.else172

if.then162:                                       ; preds = %for.body159
  %arrayidx171 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]]* @INIT_DELTA_QP_I, i64 0, i64 %idxprom167, i64 0, i64 %indvars.iv877, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx164, i32* %arrayidx171) #4
  br label %for.inc184

if.else172:                                       ; preds = %for.body159
  %arrayidx182 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]]* @INIT_DELTA_QP_P, i64 0, i64 %idxprom167, i64 0, i64 %indvars.iv877, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx164, i32* %arrayidx182) #4
  br label %for.inc184

for.inc184:                                       ; preds = %if.then162, %if.else172
  %indvars.iv.next878 = add i64 %indvars.iv877, 1
  %lftr.wideiv879 = trunc i64 %indvars.iv.next878 to i32
  %exitcond880 = icmp eq i32 %lftr.wideiv879, 4
  br i1 %exitcond880, label %for.body189, label %for.body159

for.body189:                                      ; preds = %for.inc184, %for.inc214
  %indvars.iv873 = phi i64 [ %indvars.iv.next874, %for.inc214 ], [ 0, %for.inc184 ]
  %19 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type190 = getelementptr inbounds %struct.ImageParameters* %19, i64 0, i32 6
  %20 = load i32* %type190, align 4, !tbaa !3
  %cmp191 = icmp eq i32 %20, 2
  %arrayidx194 = getelementptr inbounds %struct.MotionInfoContexts* %2, i64 0, i32 5, i64 %indvars.iv873
  %model_number196 = getelementptr inbounds %struct.ImageParameters* %19, i64 0, i32 118
  %21 = load i32* %model_number196, align 4, !tbaa !3
  %idxprom197 = sext i32 %21 to i64
  br i1 %cmp191, label %if.then192, label %if.else202

if.then192:                                       ; preds = %for.body189
  %arrayidx201 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]]* @INIT_MB_AFF_I, i64 0, i64 %idxprom197, i64 0, i64 %indvars.iv873, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx194, i32* %arrayidx201) #4
  br label %for.inc214

if.else202:                                       ; preds = %for.body189
  %arrayidx212 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]]* @INIT_MB_AFF_P, i64 0, i64 %idxprom197, i64 0, i64 %indvars.iv873, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx194, i32* %arrayidx212) #4
  br label %for.inc214

for.inc214:                                       ; preds = %if.then192, %if.else202
  %indvars.iv.next874 = add i64 %indvars.iv873, 1
  %lftr.wideiv875 = trunc i64 %indvars.iv.next874 to i32
  %exitcond876 = icmp eq i32 %lftr.wideiv875, 4
  br i1 %exitcond876, label %for.body219, label %for.body189

for.body219:                                      ; preds = %for.inc214, %for.inc244
  %indvars.iv869 = phi i64 [ %indvars.iv.next870, %for.inc244 ], [ 0, %for.inc214 ]
  %22 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type220 = getelementptr inbounds %struct.ImageParameters* %22, i64 0, i32 6
  %23 = load i32* %type220, align 4, !tbaa !3
  %cmp221 = icmp eq i32 %23, 2
  %arrayidx224 = getelementptr inbounds %struct.MotionInfoContexts* %2, i64 0, i32 6, i64 %indvars.iv869
  %model_number226 = getelementptr inbounds %struct.ImageParameters* %22, i64 0, i32 118
  %24 = load i32* %model_number226, align 4, !tbaa !3
  %idxprom227 = sext i32 %24 to i64
  br i1 %cmp221, label %if.then222, label %if.else232

if.then222:                                       ; preds = %for.body219
  %arrayidx231 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]]* @INIT_TRANSFORM_SIZE_I, i64 0, i64 %idxprom227, i64 0, i64 %indvars.iv869, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx224, i32* %arrayidx231) #4
  br label %for.inc244

if.else232:                                       ; preds = %for.body219
  %arrayidx242 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]]* @INIT_TRANSFORM_SIZE_P, i64 0, i64 %idxprom227, i64 0, i64 %indvars.iv869, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx224, i32* %arrayidx242) #4
  br label %for.inc244

for.inc244:                                       ; preds = %if.then222, %if.else232
  %indvars.iv.next870 = add i64 %indvars.iv869, 1
  %lftr.wideiv871 = trunc i64 %indvars.iv.next870 to i32
  %exitcond872 = icmp eq i32 %lftr.wideiv871, 3
  br i1 %exitcond872, label %for.body249, label %for.body219

for.body249:                                      ; preds = %for.inc244, %for.inc274
  %indvars.iv865 = phi i64 [ %indvars.iv.next866, %for.inc274 ], [ 0, %for.inc244 ]
  %25 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type250 = getelementptr inbounds %struct.ImageParameters* %25, i64 0, i32 6
  %26 = load i32* %type250, align 4, !tbaa !3
  %cmp251 = icmp eq i32 %26, 2
  %arrayidx254 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 0, i64 %indvars.iv865
  %model_number256 = getelementptr inbounds %struct.ImageParameters* %25, i64 0, i32 118
  %27 = load i32* %model_number256, align 4, !tbaa !3
  %idxprom257 = sext i32 %27 to i64
  br i1 %cmp251, label %if.then252, label %if.else262

if.then252:                                       ; preds = %for.body249
  %arrayidx261 = getelementptr inbounds [1 x [1 x [2 x [2 x i32]]]]* @INIT_IPR_I, i64 0, i64 %idxprom257, i64 0, i64 %indvars.iv865, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx254, i32* %arrayidx261) #4
  br label %for.inc274

if.else262:                                       ; preds = %for.body249
  %arrayidx272 = getelementptr inbounds [3 x [1 x [2 x [2 x i32]]]]* @INIT_IPR_P, i64 0, i64 %idxprom257, i64 0, i64 %indvars.iv865, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx254, i32* %arrayidx272) #4
  br label %for.inc274

for.inc274:                                       ; preds = %if.then252, %if.else262
  %indvars.iv.next866 = add i64 %indvars.iv865, 1
  %lftr.wideiv867 = trunc i64 %indvars.iv.next866 to i32
  %exitcond868 = icmp eq i32 %lftr.wideiv867, 2
  br i1 %exitcond868, label %for.body279, label %for.body249

for.body279:                                      ; preds = %for.inc274, %for.inc304
  %indvars.iv861 = phi i64 [ %indvars.iv.next862, %for.inc304 ], [ 0, %for.inc274 ]
  %28 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type280 = getelementptr inbounds %struct.ImageParameters* %28, i64 0, i32 6
  %29 = load i32* %type280, align 4, !tbaa !3
  %cmp281 = icmp eq i32 %29, 2
  %arrayidx284 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 1, i64 %indvars.iv861
  %model_number286 = getelementptr inbounds %struct.ImageParameters* %28, i64 0, i32 118
  %30 = load i32* %model_number286, align 4, !tbaa !3
  %idxprom287 = sext i32 %30 to i64
  br i1 %cmp281, label %if.then282, label %if.else292

if.then282:                                       ; preds = %for.body279
  %arrayidx291 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]]* @INIT_CIPR_I, i64 0, i64 %idxprom287, i64 0, i64 %indvars.iv861, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx284, i32* %arrayidx291) #4
  br label %for.inc304

if.else292:                                       ; preds = %for.body279
  %arrayidx302 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]]* @INIT_CIPR_P, i64 0, i64 %idxprom287, i64 0, i64 %indvars.iv861, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx284, i32* %arrayidx302) #4
  br label %for.inc304

for.inc304:                                       ; preds = %if.then282, %if.else292
  %indvars.iv.next862 = add i64 %indvars.iv861, 1
  %lftr.wideiv863 = trunc i64 %indvars.iv.next862 to i32
  %exitcond864 = icmp eq i32 %lftr.wideiv863, 4
  br i1 %exitcond864, label %for.cond310.preheader, label %for.body279

for.cond310.preheader:                            ; preds = %for.inc304, %for.inc346
  %indvars.iv857 = phi i64 [ %indvars.iv.next858, %for.inc346 ], [ 0, %for.inc304 ]
  br label %for.body312

for.body312:                                      ; preds = %for.inc343, %for.cond310.preheader
  %indvars.iv853 = phi i64 [ 0, %for.cond310.preheader ], [ %indvars.iv.next854, %for.inc343 ]
  %31 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type313 = getelementptr inbounds %struct.ImageParameters* %31, i64 0, i32 6
  %32 = load i32* %type313, align 4, !tbaa !3
  %cmp314 = icmp eq i32 %32, 2
  %arrayidx319 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 2, i64 %indvars.iv857, i64 %indvars.iv853
  %model_number322 = getelementptr inbounds %struct.ImageParameters* %31, i64 0, i32 118
  %33 = load i32* %model_number322, align 4, !tbaa !3
  %idxprom323 = sext i32 %33 to i64
  br i1 %cmp314, label %if.then315, label %if.else328

if.then315:                                       ; preds = %for.body312
  %arrayidx327 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]]* @INIT_CBP_I, i64 0, i64 %idxprom323, i64 %indvars.iv857, i64 %indvars.iv853, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx319, i32* %arrayidx327) #4
  br label %for.inc343

if.else328:                                       ; preds = %for.body312
  %arrayidx341 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]]* @INIT_CBP_P, i64 0, i64 %idxprom323, i64 %indvars.iv857, i64 %indvars.iv853, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx319, i32* %arrayidx341) #4
  br label %for.inc343

for.inc343:                                       ; preds = %if.then315, %if.else328
  %indvars.iv.next854 = add i64 %indvars.iv853, 1
  %lftr.wideiv855 = trunc i64 %indvars.iv.next854 to i32
  %exitcond856 = icmp eq i32 %lftr.wideiv855, 4
  br i1 %exitcond856, label %for.inc346, label %for.body312

for.inc346:                                       ; preds = %for.inc343
  %indvars.iv.next858 = add i64 %indvars.iv857, 1
  %lftr.wideiv859 = trunc i64 %indvars.iv.next858 to i32
  %exitcond860 = icmp eq i32 %lftr.wideiv859, 3
  br i1 %exitcond860, label %for.cond352.preheader, label %for.cond310.preheader

for.cond352.preheader:                            ; preds = %for.inc346, %for.inc388
  %indvars.iv849 = phi i64 [ %indvars.iv.next850, %for.inc388 ], [ 0, %for.inc346 ]
  br label %for.body354

for.body354:                                      ; preds = %for.inc385, %for.cond352.preheader
  %indvars.iv845 = phi i64 [ 0, %for.cond352.preheader ], [ %indvars.iv.next846, %for.inc385 ]
  %34 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type355 = getelementptr inbounds %struct.ImageParameters* %34, i64 0, i32 6
  %35 = load i32* %type355, align 4, !tbaa !3
  %cmp356 = icmp eq i32 %35, 2
  %arrayidx361 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 3, i64 %indvars.iv849, i64 %indvars.iv845
  %model_number364 = getelementptr inbounds %struct.ImageParameters* %34, i64 0, i32 118
  %36 = load i32* %model_number364, align 4, !tbaa !3
  %idxprom365 = sext i32 %36 to i64
  br i1 %cmp356, label %if.then357, label %if.else370

if.then357:                                       ; preds = %for.body354
  %arrayidx369 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]]* @INIT_BCBP_I, i64 0, i64 %idxprom365, i64 %indvars.iv849, i64 %indvars.iv845, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx361, i32* %arrayidx369) #4
  br label %for.inc385

if.else370:                                       ; preds = %for.body354
  %arrayidx383 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]]* @INIT_BCBP_P, i64 0, i64 %idxprom365, i64 %indvars.iv849, i64 %indvars.iv845, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx361, i32* %arrayidx383) #4
  br label %for.inc385

for.inc385:                                       ; preds = %if.then357, %if.else370
  %indvars.iv.next846 = add i64 %indvars.iv845, 1
  %lftr.wideiv847 = trunc i64 %indvars.iv.next846 to i32
  %exitcond848 = icmp eq i32 %lftr.wideiv847, 4
  br i1 %exitcond848, label %for.inc388, label %for.body354

for.inc388:                                       ; preds = %for.inc385
  %indvars.iv.next850 = add i64 %indvars.iv849, 1
  %lftr.wideiv851 = trunc i64 %indvars.iv.next850 to i32
  %exitcond852 = icmp eq i32 %lftr.wideiv851, 10
  br i1 %exitcond852, label %for.cond394.preheader, label %for.cond352.preheader

for.cond394.preheader:                            ; preds = %for.inc388, %for.inc430
  %indvars.iv841 = phi i64 [ %indvars.iv.next842, %for.inc430 ], [ 0, %for.inc388 ]
  br label %for.body396

for.body396:                                      ; preds = %for.inc427, %for.cond394.preheader
  %indvars.iv837 = phi i64 [ 0, %for.cond394.preheader ], [ %indvars.iv.next838, %for.inc427 ]
  %37 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type397 = getelementptr inbounds %struct.ImageParameters* %37, i64 0, i32 6
  %38 = load i32* %type397, align 4, !tbaa !3
  %cmp398 = icmp eq i32 %38, 2
  %arrayidx403 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 4, i64 %indvars.iv841, i64 %indvars.iv837
  %model_number406 = getelementptr inbounds %struct.ImageParameters* %37, i64 0, i32 118
  %39 = load i32* %model_number406, align 4, !tbaa !3
  %idxprom407 = sext i32 %39 to i64
  br i1 %cmp398, label %if.then399, label %if.else412

if.then399:                                       ; preds = %for.body396
  %arrayidx411 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]]* @INIT_MAP_I, i64 0, i64 %idxprom407, i64 %indvars.iv841, i64 %indvars.iv837, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx403, i32* %arrayidx411) #4
  br label %for.inc427

if.else412:                                       ; preds = %for.body396
  %arrayidx425 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]]* @INIT_MAP_P, i64 0, i64 %idxprom407, i64 %indvars.iv841, i64 %indvars.iv837, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx403, i32* %arrayidx425) #4
  br label %for.inc427

for.inc427:                                       ; preds = %if.then399, %if.else412
  %indvars.iv.next838 = add i64 %indvars.iv837, 1
  %lftr.wideiv839 = trunc i64 %indvars.iv.next838 to i32
  %exitcond840 = icmp eq i32 %lftr.wideiv839, 15
  br i1 %exitcond840, label %for.inc430, label %for.body396

for.inc430:                                       ; preds = %for.inc427
  %indvars.iv.next842 = add i64 %indvars.iv841, 1
  %lftr.wideiv843 = trunc i64 %indvars.iv.next842 to i32
  %exitcond844 = icmp eq i32 %lftr.wideiv843, 10
  br i1 %exitcond844, label %for.cond436.preheader, label %for.cond394.preheader

for.cond436.preheader:                            ; preds = %for.inc430, %for.inc472
  %indvars.iv833 = phi i64 [ %indvars.iv.next834, %for.inc472 ], [ 0, %for.inc430 ]
  br label %for.body438

for.body438:                                      ; preds = %for.inc469, %for.cond436.preheader
  %indvars.iv829 = phi i64 [ 0, %for.cond436.preheader ], [ %indvars.iv.next830, %for.inc469 ]
  %40 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type439 = getelementptr inbounds %struct.ImageParameters* %40, i64 0, i32 6
  %41 = load i32* %type439, align 4, !tbaa !3
  %cmp440 = icmp eq i32 %41, 2
  %arrayidx445 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 5, i64 %indvars.iv833, i64 %indvars.iv829
  %model_number448 = getelementptr inbounds %struct.ImageParameters* %40, i64 0, i32 118
  %42 = load i32* %model_number448, align 4, !tbaa !3
  %idxprom449 = sext i32 %42 to i64
  br i1 %cmp440, label %if.then441, label %if.else454

if.then441:                                       ; preds = %for.body438
  %arrayidx453 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]]* @INIT_LAST_I, i64 0, i64 %idxprom449, i64 %indvars.iv833, i64 %indvars.iv829, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx445, i32* %arrayidx453) #4
  br label %for.inc469

if.else454:                                       ; preds = %for.body438
  %arrayidx467 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]]* @INIT_LAST_P, i64 0, i64 %idxprom449, i64 %indvars.iv833, i64 %indvars.iv829, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx445, i32* %arrayidx467) #4
  br label %for.inc469

for.inc469:                                       ; preds = %if.then441, %if.else454
  %indvars.iv.next830 = add i64 %indvars.iv829, 1
  %lftr.wideiv831 = trunc i64 %indvars.iv.next830 to i32
  %exitcond832 = icmp eq i32 %lftr.wideiv831, 15
  br i1 %exitcond832, label %for.inc472, label %for.body438

for.inc472:                                       ; preds = %for.inc469
  %indvars.iv.next834 = add i64 %indvars.iv833, 1
  %lftr.wideiv835 = trunc i64 %indvars.iv.next834 to i32
  %exitcond836 = icmp eq i32 %lftr.wideiv835, 10
  br i1 %exitcond836, label %for.cond478.preheader, label %for.cond436.preheader

for.cond478.preheader:                            ; preds = %for.inc472, %for.inc514
  %indvars.iv825 = phi i64 [ %indvars.iv.next826, %for.inc514 ], [ 0, %for.inc472 ]
  br label %for.body480

for.body480:                                      ; preds = %for.inc511, %for.cond478.preheader
  %indvars.iv821 = phi i64 [ 0, %for.cond478.preheader ], [ %indvars.iv.next822, %for.inc511 ]
  %43 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type481 = getelementptr inbounds %struct.ImageParameters* %43, i64 0, i32 6
  %44 = load i32* %type481, align 4, !tbaa !3
  %cmp482 = icmp eq i32 %44, 2
  %arrayidx487 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 6, i64 %indvars.iv825, i64 %indvars.iv821
  %model_number490 = getelementptr inbounds %struct.ImageParameters* %43, i64 0, i32 118
  %45 = load i32* %model_number490, align 4, !tbaa !3
  %idxprom491 = sext i32 %45 to i64
  br i1 %cmp482, label %if.then483, label %if.else496

if.then483:                                       ; preds = %for.body480
  %arrayidx495 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]]* @INIT_ONE_I, i64 0, i64 %idxprom491, i64 %indvars.iv825, i64 %indvars.iv821, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx487, i32* %arrayidx495) #4
  br label %for.inc511

if.else496:                                       ; preds = %for.body480
  %arrayidx509 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]]* @INIT_ONE_P, i64 0, i64 %idxprom491, i64 %indvars.iv825, i64 %indvars.iv821, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx487, i32* %arrayidx509) #4
  br label %for.inc511

for.inc511:                                       ; preds = %if.then483, %if.else496
  %indvars.iv.next822 = add i64 %indvars.iv821, 1
  %lftr.wideiv823 = trunc i64 %indvars.iv.next822 to i32
  %exitcond824 = icmp eq i32 %lftr.wideiv823, 5
  br i1 %exitcond824, label %for.inc514, label %for.body480

for.inc514:                                       ; preds = %for.inc511
  %indvars.iv.next826 = add i64 %indvars.iv825, 1
  %lftr.wideiv827 = trunc i64 %indvars.iv.next826 to i32
  %exitcond828 = icmp eq i32 %lftr.wideiv827, 10
  br i1 %exitcond828, label %for.cond520.preheader, label %for.cond478.preheader

for.cond520.preheader:                            ; preds = %for.inc514, %for.inc556
  %indvars.iv817 = phi i64 [ %indvars.iv.next818, %for.inc556 ], [ 0, %for.inc514 ]
  br label %for.body522

for.body522:                                      ; preds = %for.inc553, %for.cond520.preheader
  %indvars.iv813 = phi i64 [ 0, %for.cond520.preheader ], [ %indvars.iv.next814, %for.inc553 ]
  %46 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type523 = getelementptr inbounds %struct.ImageParameters* %46, i64 0, i32 6
  %47 = load i32* %type523, align 4, !tbaa !3
  %cmp524 = icmp eq i32 %47, 2
  %arrayidx529 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 7, i64 %indvars.iv817, i64 %indvars.iv813
  %model_number532 = getelementptr inbounds %struct.ImageParameters* %46, i64 0, i32 118
  %48 = load i32* %model_number532, align 4, !tbaa !3
  %idxprom533 = sext i32 %48 to i64
  br i1 %cmp524, label %if.then525, label %if.else538

if.then525:                                       ; preds = %for.body522
  %arrayidx537 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]]* @INIT_ABS_I, i64 0, i64 %idxprom533, i64 %indvars.iv817, i64 %indvars.iv813, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx529, i32* %arrayidx537) #4
  br label %for.inc553

if.else538:                                       ; preds = %for.body522
  %arrayidx551 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]]* @INIT_ABS_P, i64 0, i64 %idxprom533, i64 %indvars.iv817, i64 %indvars.iv813, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx529, i32* %arrayidx551) #4
  br label %for.inc553

for.inc553:                                       ; preds = %if.then525, %if.else538
  %indvars.iv.next814 = add i64 %indvars.iv813, 1
  %lftr.wideiv815 = trunc i64 %indvars.iv.next814 to i32
  %exitcond816 = icmp eq i32 %lftr.wideiv815, 5
  br i1 %exitcond816, label %for.inc556, label %for.body522

for.inc556:                                       ; preds = %for.inc553
  %indvars.iv.next818 = add i64 %indvars.iv817, 1
  %lftr.wideiv819 = trunc i64 %indvars.iv.next818 to i32
  %exitcond820 = icmp eq i32 %lftr.wideiv819, 10
  br i1 %exitcond820, label %for.cond562.preheader, label %for.cond520.preheader

for.cond562.preheader:                            ; preds = %for.inc556, %for.inc598
  %indvars.iv809 = phi i64 [ %indvars.iv.next810, %for.inc598 ], [ 0, %for.inc556 ]
  br label %for.body564

for.body564:                                      ; preds = %for.inc595, %for.cond562.preheader
  %indvars.iv805 = phi i64 [ 0, %for.cond562.preheader ], [ %indvars.iv.next806, %for.inc595 ]
  %49 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type565 = getelementptr inbounds %struct.ImageParameters* %49, i64 0, i32 6
  %50 = load i32* %type565, align 4, !tbaa !3
  %cmp566 = icmp eq i32 %50, 2
  %arrayidx571 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 8, i64 %indvars.iv809, i64 %indvars.iv805
  %model_number574 = getelementptr inbounds %struct.ImageParameters* %49, i64 0, i32 118
  %51 = load i32* %model_number574, align 4, !tbaa !3
  %idxprom575 = sext i32 %51 to i64
  br i1 %cmp566, label %if.then567, label %if.else580

if.then567:                                       ; preds = %for.body564
  %arrayidx579 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]]* @INIT_FLD_MAP_I, i64 0, i64 %idxprom575, i64 %indvars.iv809, i64 %indvars.iv805, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx571, i32* %arrayidx579) #4
  br label %for.inc595

if.else580:                                       ; preds = %for.body564
  %arrayidx593 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]]* @INIT_FLD_MAP_P, i64 0, i64 %idxprom575, i64 %indvars.iv809, i64 %indvars.iv805, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx571, i32* %arrayidx593) #4
  br label %for.inc595

for.inc595:                                       ; preds = %if.then567, %if.else580
  %indvars.iv.next806 = add i64 %indvars.iv805, 1
  %lftr.wideiv807 = trunc i64 %indvars.iv.next806 to i32
  %exitcond808 = icmp eq i32 %lftr.wideiv807, 15
  br i1 %exitcond808, label %for.inc598, label %for.body564

for.inc598:                                       ; preds = %for.inc595
  %indvars.iv.next810 = add i64 %indvars.iv809, 1
  %lftr.wideiv811 = trunc i64 %indvars.iv.next810 to i32
  %exitcond812 = icmp eq i32 %lftr.wideiv811, 10
  br i1 %exitcond812, label %for.cond604.preheader, label %for.cond562.preheader

for.cond604.preheader:                            ; preds = %for.inc598, %for.inc640
  %indvars.iv801 = phi i64 [ %indvars.iv.next802, %for.inc640 ], [ 0, %for.inc598 ]
  br label %for.body606

for.body606:                                      ; preds = %for.inc637, %for.cond604.preheader
  %indvars.iv = phi i64 [ 0, %for.cond604.preheader ], [ %indvars.iv.next, %for.inc637 ]
  %52 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type607 = getelementptr inbounds %struct.ImageParameters* %52, i64 0, i32 6
  %53 = load i32* %type607, align 4, !tbaa !3
  %cmp608 = icmp eq i32 %53, 2
  %arrayidx613 = getelementptr inbounds %struct.TextureInfoContexts* %3, i64 0, i32 9, i64 %indvars.iv801, i64 %indvars.iv
  %model_number616 = getelementptr inbounds %struct.ImageParameters* %52, i64 0, i32 118
  %54 = load i32* %model_number616, align 4, !tbaa !3
  %idxprom617 = sext i32 %54 to i64
  br i1 %cmp608, label %if.then609, label %if.else622

if.then609:                                       ; preds = %for.body606
  %arrayidx621 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]]* @INIT_FLD_LAST_I, i64 0, i64 %idxprom617, i64 %indvars.iv801, i64 %indvars.iv, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx613, i32* %arrayidx621) #4
  br label %for.inc637

if.else622:                                       ; preds = %for.body606
  %arrayidx635 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]]* @INIT_FLD_LAST_P, i64 0, i64 %idxprom617, i64 %indvars.iv801, i64 %indvars.iv, i64 0
  tail call void @biari_init_context(%struct.BiContextType* %arrayidx613, i32* %arrayidx635) #4
  br label %for.inc637

for.inc637:                                       ; preds = %if.then609, %if.else622
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 15
  br i1 %exitcond, label %for.inc640, label %for.body606

for.inc640:                                       ; preds = %for.inc637
  %indvars.iv.next802 = add i64 %indvars.iv801, 1
  %lftr.wideiv803 = trunc i64 %indvars.iv.next802 to i32
  %exitcond804 = icmp eq i32 %lftr.wideiv803, 10
  br i1 %exitcond804, label %for.end642, label %for.cond604.preheader

for.end642:                                       ; preds = %for.inc640
  ret void
}

; Function Attrs: optsize
declare void @biari_init_context(%struct.BiContextType*, i32*) #2

; Function Attrs: nounwind optsize readonly uwtable
define double @XRate(%struct.BiContextType* nocapture %ctx, i32* nocapture %model) #3 {
entry:
  %0 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %qp1 = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 10
  %1 = load i32* %qp1, align 4, !tbaa !3
  %cmp = icmp slt i32 %1, 0
  %. = select i1 %cmp, i32 0, i32 %1
  %count = getelementptr inbounds %struct.BiContextType* %ctx, i64 0, i32 2
  %2 = load i64* %count, align 8, !tbaa !5
  %conv = uitofp i64 %2 to double
  %div = fmul double %conv, 3.125000e-02
  %cmp3 = fcmp ogt double %div, 1.000000e+00
  %cond11 = select i1 %cmp3, double 1.000000e+00, double %div
  %3 = load i32* %model, align 4, !tbaa !3
  %mul = mul nsw i32 %3, %.
  %shr = ashr i32 %mul, 4
  %arrayidx12 = getelementptr inbounds i32* %model, i64 1
  %4 = load i32* %arrayidx12, align 4, !tbaa !3
  %add = add nsw i32 %shr, %4
  %cmp13 = icmp slt i32 %add, 0
  %cond18 = select i1 %cmp13, i32 0, i32 %add
  %cmp19 = icmp slt i32 %cond18, 127
  %cond18. = select i1 %cmp19, i32 %cond18, i32 127
  %MPS = getelementptr inbounds %struct.BiContextType* %ctx, i64 0, i32 1
  %5 = load i8* %MPS, align 1, !tbaa !1
  %tobool = icmp ne i8 %5, 0
  %state = getelementptr inbounds %struct.BiContextType* %ctx, i64 0, i32 0
  %6 = load i16* %state, align 2, !tbaa !6
  %conv33 = zext i16 %6 to i32
  %add34 = add nsw i32 %conv33, 64
  %sub = sub nsw i32 63, %conv33
  %cond39 = select i1 %tobool, i32 %add34, i32 %sub
  %idxprom = sext i32 %cond39 to i64
  %arrayidx40 = getelementptr inbounds [128 x double]* @probability, i64 0, i64 %idxprom
  %7 = load double* %arrayidx40, align 8, !tbaa !4
  %mul41 = fmul double %cond11, %7
  %idxprom42 = sext i32 %cond18. to i64
  %arrayidx43 = getelementptr inbounds [128 x double]* @entropy, i64 0, i64 %idxprom42
  %8 = load double* %arrayidx43, align 8, !tbaa !4
  %mul44 = fmul double %mul41, %8
  %sub45 = fsub double 0.000000e+00, %mul44
  %sub46 = sub nsw i32 127, %cond39
  %idxprom47 = sext i32 %sub46 to i64
  %arrayidx48 = getelementptr inbounds [128 x double]* @probability, i64 0, i64 %idxprom47
  %9 = load double* %arrayidx48, align 8, !tbaa !4
  %mul49 = fmul double %cond11, %9
  %sub50 = sub nsw i32 127, %cond18.
  %idxprom51 = sext i32 %sub50 to i64
  %arrayidx52 = getelementptr inbounds [128 x double]* @entropy, i64 0, i64 %idxprom51
  %10 = load double* %arrayidx52, align 8, !tbaa !4
  %mul53 = fmul double %mul49, %10
  %sub54 = fsub double %sub45, %mul53
  ret double %sub54
}

; Function Attrs: nounwind optsize uwtable
define void @GetCtxModelNumber(i32* nocapture %mnumber, %struct.MotionInfoContexts* nocapture %mc, %struct.TextureInfoContexts* nocapture %tc) #0 {
entry:
  %0 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %type = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 6
  %1 = load i32* %type, align 4, !tbaa !3
  %cmp = icmp eq i32 %1, 2
  %cond = select i1 %cmp, i32 1, i32 3
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc683.for.cond2.preheader_crit_edge, %entry
  %2 = phi i32 [ %1, %entry ], [ %.pre, %for.inc683.for.cond2.preheader_crit_edge ]
  %indvars.iv1041 = phi i64 [ 0, %entry ], [ %indvars.iv.next1042, %for.inc683.for.cond2.preheader_crit_edge ]
  %min_xr.0928 = phi double [ 1.000000e+30, %entry ], [ %min_xr.1, %for.inc683.for.cond2.preheader_crit_edge ]
  %cmp9 = icmp eq i32 %2, 2
  br label %for.cond5.preheader

for.cond5.preheader:                              ; preds = %for.inc33, %for.cond2.preheader
  %indvars.iv929 = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next930, %for.inc33 ]
  %xr.0872 = phi double [ 0.000000e+00, %for.cond2.preheader ], [ %xr.2, %for.inc33 ]
  br label %for.body7

for.body7:                                        ; preds = %for.inc, %for.cond5.preheader
  %indvars.iv = phi i64 [ 0, %for.cond5.preheader ], [ %indvars.iv.next, %for.inc ]
  %xr.1870 = phi double [ %xr.0872, %for.cond5.preheader ], [ %xr.2, %for.inc ]
  %arrayidx11 = getelementptr inbounds %struct.MotionInfoContexts* %mc, i64 0, i32 0, i64 %indvars.iv929, i64 %indvars.iv
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %for.body7
  %arrayidx18 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]]* @INIT_MB_TYPE_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv929, i64 %indvars.iv, i64 0
  %call = tail call double @XRate(%struct.BiContextType* %arrayidx11, i32* %arrayidx18) #5
  br label %for.inc

if.else:                                          ; preds = %for.body7
  %arrayidx30 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]]* @INIT_MB_TYPE_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv929, i64 %indvars.iv, i64 0
  %call31 = tail call double @XRate(%struct.BiContextType* %arrayidx11, i32* %arrayidx30) #5
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else
  %call.pn = phi double [ %call, %if.then ], [ %call31, %if.else ]
  %xr.2 = fadd double %xr.1870, %call.pn
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 11
  br i1 %exitcond, label %for.inc33, label %for.body7

for.inc33:                                        ; preds = %for.inc
  %indvars.iv.next930 = add i64 %indvars.iv929, 1
  %lftr.wideiv931 = trunc i64 %indvars.iv.next930 to i32
  %exitcond932 = icmp eq i32 %lftr.wideiv931, 3
  br i1 %exitcond932, label %for.cond39.preheader, label %for.cond5.preheader

for.cond39.preheader:                             ; preds = %for.inc33, %for.inc77
  %indvars.iv937 = phi i64 [ %indvars.iv.next938, %for.inc77 ], [ 0, %for.inc33 ]
  %xr.3876 = phi double [ %xr.5, %for.inc77 ], [ %xr.2, %for.inc33 ]
  br label %for.body41

for.body41:                                       ; preds = %for.inc74, %for.cond39.preheader
  %indvars.iv933 = phi i64 [ 0, %for.cond39.preheader ], [ %indvars.iv.next934, %for.inc74 ]
  %xr.4874 = phi double [ %xr.3876, %for.cond39.preheader ], [ %xr.5, %for.inc74 ]
  %arrayidx48 = getelementptr inbounds %struct.MotionInfoContexts* %mc, i64 0, i32 1, i64 %indvars.iv937, i64 %indvars.iv933
  br i1 %cmp9, label %if.then44, label %if.else58

if.then44:                                        ; preds = %for.body41
  %arrayidx55 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]]* @INIT_B8_TYPE_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv937, i64 %indvars.iv933, i64 0
  %call56 = tail call double @XRate(%struct.BiContextType* %arrayidx48, i32* %arrayidx55) #5
  br label %for.inc74

if.else58:                                        ; preds = %for.body41
  %arrayidx70 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]]* @INIT_B8_TYPE_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv937, i64 %indvars.iv933, i64 0
  %call71 = tail call double @XRate(%struct.BiContextType* %arrayidx48, i32* %arrayidx70) #5
  br label %for.inc74

for.inc74:                                        ; preds = %if.then44, %if.else58
  %call56.pn = phi double [ %call56, %if.then44 ], [ %call71, %if.else58 ]
  %xr.5 = fadd double %xr.4874, %call56.pn
  %indvars.iv.next934 = add i64 %indvars.iv933, 1
  %lftr.wideiv935 = trunc i64 %indvars.iv.next934 to i32
  %exitcond936 = icmp eq i32 %lftr.wideiv935, 9
  br i1 %exitcond936, label %for.inc77, label %for.body41

for.inc77:                                        ; preds = %for.inc74
  %indvars.iv.next938 = add i64 %indvars.iv937, 1
  %lftr.wideiv939 = trunc i64 %indvars.iv.next938 to i32
  %exitcond940 = icmp eq i32 %lftr.wideiv939, 2
  br i1 %exitcond940, label %for.cond83.preheader, label %for.cond39.preheader

for.cond83.preheader:                             ; preds = %for.inc77, %for.inc121
  %indvars.iv945 = phi i64 [ %indvars.iv.next946, %for.inc121 ], [ 0, %for.inc77 ]
  %xr.6880 = phi double [ %xr.8, %for.inc121 ], [ %xr.5, %for.inc77 ]
  br label %for.body85

for.body85:                                       ; preds = %for.inc118, %for.cond83.preheader
  %indvars.iv941 = phi i64 [ 0, %for.cond83.preheader ], [ %indvars.iv.next942, %for.inc118 ]
  %xr.7878 = phi double [ %xr.6880, %for.cond83.preheader ], [ %xr.8, %for.inc118 ]
  %arrayidx92 = getelementptr inbounds %struct.MotionInfoContexts* %mc, i64 0, i32 2, i64 %indvars.iv945, i64 %indvars.iv941
  br i1 %cmp9, label %if.then88, label %if.else102

if.then88:                                        ; preds = %for.body85
  %arrayidx99 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]]* @INIT_MV_RES_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv945, i64 %indvars.iv941, i64 0
  %call100 = tail call double @XRate(%struct.BiContextType* %arrayidx92, i32* %arrayidx99) #5
  br label %for.inc118

if.else102:                                       ; preds = %for.body85
  %arrayidx114 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]]* @INIT_MV_RES_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv945, i64 %indvars.iv941, i64 0
  %call115 = tail call double @XRate(%struct.BiContextType* %arrayidx92, i32* %arrayidx114) #5
  br label %for.inc118

for.inc118:                                       ; preds = %if.then88, %if.else102
  %call100.pn = phi double [ %call100, %if.then88 ], [ %call115, %if.else102 ]
  %xr.8 = fadd double %xr.7878, %call100.pn
  %indvars.iv.next942 = add i64 %indvars.iv941, 1
  %lftr.wideiv943 = trunc i64 %indvars.iv.next942 to i32
  %exitcond944 = icmp eq i32 %lftr.wideiv943, 10
  br i1 %exitcond944, label %for.inc121, label %for.body85

for.inc121:                                       ; preds = %for.inc118
  %indvars.iv.next946 = add i64 %indvars.iv945, 1
  %lftr.wideiv947 = trunc i64 %indvars.iv.next946 to i32
  %exitcond948 = icmp eq i32 %lftr.wideiv947, 2
  br i1 %exitcond948, label %for.cond127.preheader, label %for.cond83.preheader

for.cond127.preheader:                            ; preds = %for.inc121, %for.inc165
  %indvars.iv953 = phi i64 [ %indvars.iv.next954, %for.inc165 ], [ 0, %for.inc121 ]
  %xr.9884 = phi double [ %xr.11, %for.inc165 ], [ %xr.8, %for.inc121 ]
  br label %for.body129

for.body129:                                      ; preds = %for.inc162, %for.cond127.preheader
  %indvars.iv949 = phi i64 [ 0, %for.cond127.preheader ], [ %indvars.iv.next950, %for.inc162 ]
  %xr.10882 = phi double [ %xr.9884, %for.cond127.preheader ], [ %xr.11, %for.inc162 ]
  %arrayidx136 = getelementptr inbounds %struct.MotionInfoContexts* %mc, i64 0, i32 3, i64 %indvars.iv953, i64 %indvars.iv949
  br i1 %cmp9, label %if.then132, label %if.else146

if.then132:                                       ; preds = %for.body129
  %arrayidx143 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]]* @INIT_REF_NO_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv953, i64 %indvars.iv949, i64 0
  %call144 = tail call double @XRate(%struct.BiContextType* %arrayidx136, i32* %arrayidx143) #5
  br label %for.inc162

if.else146:                                       ; preds = %for.body129
  %arrayidx158 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]]* @INIT_REF_NO_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv953, i64 %indvars.iv949, i64 0
  %call159 = tail call double @XRate(%struct.BiContextType* %arrayidx136, i32* %arrayidx158) #5
  br label %for.inc162

for.inc162:                                       ; preds = %if.then132, %if.else146
  %call144.pn = phi double [ %call144, %if.then132 ], [ %call159, %if.else146 ]
  %xr.11 = fadd double %xr.10882, %call144.pn
  %indvars.iv.next950 = add i64 %indvars.iv949, 1
  %lftr.wideiv951 = trunc i64 %indvars.iv.next950 to i32
  %exitcond952 = icmp eq i32 %lftr.wideiv951, 6
  br i1 %exitcond952, label %for.inc165, label %for.body129

for.inc165:                                       ; preds = %for.inc162
  %indvars.iv.next954 = add i64 %indvars.iv953, 1
  %lftr.wideiv955 = trunc i64 %indvars.iv.next954 to i32
  %exitcond956 = icmp eq i32 %lftr.wideiv955, 2
  br i1 %exitcond956, label %for.body170, label %for.cond127.preheader

for.body170:                                      ; preds = %for.inc165, %for.inc197
  %indvars.iv957 = phi i64 [ %indvars.iv.next958, %for.inc197 ], [ 0, %for.inc165 ]
  %xr.12886 = phi double [ %xr.13, %for.inc197 ], [ %xr.11, %for.inc165 ]
  %arrayidx175 = getelementptr inbounds %struct.MotionInfoContexts* %mc, i64 0, i32 4, i64 %indvars.iv957
  br i1 %cmp9, label %if.then173, label %if.else184

if.then173:                                       ; preds = %for.body170
  %arrayidx181 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]]* @INIT_DELTA_QP_I, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv957, i64 0
  %call182 = tail call double @XRate(%struct.BiContextType* %arrayidx175, i32* %arrayidx181) #5
  br label %for.inc197

if.else184:                                       ; preds = %for.body170
  %arrayidx193 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]]* @INIT_DELTA_QP_P, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv957, i64 0
  %call194 = tail call double @XRate(%struct.BiContextType* %arrayidx175, i32* %arrayidx193) #5
  br label %for.inc197

for.inc197:                                       ; preds = %if.then173, %if.else184
  %call182.pn = phi double [ %call182, %if.then173 ], [ %call194, %if.else184 ]
  %xr.13 = fadd double %xr.12886, %call182.pn
  %indvars.iv.next958 = add i64 %indvars.iv957, 1
  %lftr.wideiv959 = trunc i64 %indvars.iv.next958 to i32
  %exitcond960 = icmp eq i32 %lftr.wideiv959, 4
  br i1 %exitcond960, label %for.body202, label %for.body170

for.body202:                                      ; preds = %for.inc197, %for.inc229
  %indvars.iv961 = phi i64 [ %indvars.iv.next962, %for.inc229 ], [ 0, %for.inc197 ]
  %xr.14888 = phi double [ %xr.15, %for.inc229 ], [ %xr.13, %for.inc197 ]
  %arrayidx207 = getelementptr inbounds %struct.MotionInfoContexts* %mc, i64 0, i32 5, i64 %indvars.iv961
  br i1 %cmp9, label %if.then205, label %if.else216

if.then205:                                       ; preds = %for.body202
  %arrayidx213 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]]* @INIT_MB_AFF_I, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv961, i64 0
  %call214 = tail call double @XRate(%struct.BiContextType* %arrayidx207, i32* %arrayidx213) #5
  br label %for.inc229

if.else216:                                       ; preds = %for.body202
  %arrayidx225 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]]* @INIT_MB_AFF_P, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv961, i64 0
  %call226 = tail call double @XRate(%struct.BiContextType* %arrayidx207, i32* %arrayidx225) #5
  br label %for.inc229

for.inc229:                                       ; preds = %if.then205, %if.else216
  %call214.pn = phi double [ %call214, %if.then205 ], [ %call226, %if.else216 ]
  %xr.15 = fadd double %xr.14888, %call214.pn
  %indvars.iv.next962 = add i64 %indvars.iv961, 1
  %lftr.wideiv963 = trunc i64 %indvars.iv.next962 to i32
  %exitcond964 = icmp eq i32 %lftr.wideiv963, 4
  br i1 %exitcond964, label %for.body234, label %for.body202

for.body234:                                      ; preds = %for.inc229, %for.inc261
  %indvars.iv965 = phi i64 [ %indvars.iv.next966, %for.inc261 ], [ 0, %for.inc229 ]
  %xr.16890 = phi double [ %xr.17, %for.inc261 ], [ %xr.15, %for.inc229 ]
  %arrayidx239 = getelementptr inbounds %struct.MotionInfoContexts* %mc, i64 0, i32 6, i64 %indvars.iv965
  br i1 %cmp9, label %if.then237, label %if.else248

if.then237:                                       ; preds = %for.body234
  %arrayidx245 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]]* @INIT_TRANSFORM_SIZE_I, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv965, i64 0
  %call246 = tail call double @XRate(%struct.BiContextType* %arrayidx239, i32* %arrayidx245) #5
  br label %for.inc261

if.else248:                                       ; preds = %for.body234
  %arrayidx257 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]]* @INIT_TRANSFORM_SIZE_P, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv965, i64 0
  %call258 = tail call double @XRate(%struct.BiContextType* %arrayidx239, i32* %arrayidx257) #5
  br label %for.inc261

for.inc261:                                       ; preds = %if.then237, %if.else248
  %call246.pn = phi double [ %call246, %if.then237 ], [ %call258, %if.else248 ]
  %xr.17 = fadd double %xr.16890, %call246.pn
  %indvars.iv.next966 = add i64 %indvars.iv965, 1
  %lftr.wideiv967 = trunc i64 %indvars.iv.next966 to i32
  %exitcond968 = icmp eq i32 %lftr.wideiv967, 3
  br i1 %exitcond968, label %for.body266, label %for.body234

for.body266:                                      ; preds = %for.inc261, %for.inc293
  %indvars.iv969 = phi i64 [ %indvars.iv.next970, %for.inc293 ], [ 0, %for.inc261 ]
  %xr.18892 = phi double [ %xr.19, %for.inc293 ], [ %xr.17, %for.inc261 ]
  %arrayidx271 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 0, i64 %indvars.iv969
  br i1 %cmp9, label %if.then269, label %if.else280

if.then269:                                       ; preds = %for.body266
  %arrayidx277 = getelementptr inbounds [1 x [1 x [2 x [2 x i32]]]]* @INIT_IPR_I, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv969, i64 0
  %call278 = tail call double @XRate(%struct.BiContextType* %arrayidx271, i32* %arrayidx277) #5
  br label %for.inc293

if.else280:                                       ; preds = %for.body266
  %arrayidx289 = getelementptr inbounds [3 x [1 x [2 x [2 x i32]]]]* @INIT_IPR_P, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv969, i64 0
  %call290 = tail call double @XRate(%struct.BiContextType* %arrayidx271, i32* %arrayidx289) #5
  br label %for.inc293

for.inc293:                                       ; preds = %if.then269, %if.else280
  %call278.pn = phi double [ %call278, %if.then269 ], [ %call290, %if.else280 ]
  %xr.19 = fadd double %xr.18892, %call278.pn
  %indvars.iv.next970 = add i64 %indvars.iv969, 1
  %lftr.wideiv971 = trunc i64 %indvars.iv.next970 to i32
  %exitcond972 = icmp eq i32 %lftr.wideiv971, 2
  br i1 %exitcond972, label %for.body298, label %for.body266

for.body298:                                      ; preds = %for.inc293, %for.inc325
  %indvars.iv973 = phi i64 [ %indvars.iv.next974, %for.inc325 ], [ 0, %for.inc293 ]
  %xr.20894 = phi double [ %xr.21, %for.inc325 ], [ %xr.19, %for.inc293 ]
  %arrayidx303 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 1, i64 %indvars.iv973
  br i1 %cmp9, label %if.then301, label %if.else312

if.then301:                                       ; preds = %for.body298
  %arrayidx309 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]]* @INIT_CIPR_I, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv973, i64 0
  %call310 = tail call double @XRate(%struct.BiContextType* %arrayidx303, i32* %arrayidx309) #5
  br label %for.inc325

if.else312:                                       ; preds = %for.body298
  %arrayidx321 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]]* @INIT_CIPR_P, i64 0, i64 %indvars.iv1041, i64 0, i64 %indvars.iv973, i64 0
  %call322 = tail call double @XRate(%struct.BiContextType* %arrayidx303, i32* %arrayidx321) #5
  br label %for.inc325

for.inc325:                                       ; preds = %if.then301, %if.else312
  %call310.pn = phi double [ %call310, %if.then301 ], [ %call322, %if.else312 ]
  %xr.21 = fadd double %xr.20894, %call310.pn
  %indvars.iv.next974 = add i64 %indvars.iv973, 1
  %lftr.wideiv975 = trunc i64 %indvars.iv.next974 to i32
  %exitcond976 = icmp eq i32 %lftr.wideiv975, 4
  br i1 %exitcond976, label %for.cond331.preheader, label %for.body298

for.cond331.preheader:                            ; preds = %for.inc325, %for.inc369
  %indvars.iv981 = phi i64 [ %indvars.iv.next982, %for.inc369 ], [ 0, %for.inc325 ]
  %xr.22898 = phi double [ %xr.24, %for.inc369 ], [ %xr.21, %for.inc325 ]
  br label %for.body333

for.body333:                                      ; preds = %for.inc366, %for.cond331.preheader
  %indvars.iv977 = phi i64 [ 0, %for.cond331.preheader ], [ %indvars.iv.next978, %for.inc366 ]
  %xr.23896 = phi double [ %xr.22898, %for.cond331.preheader ], [ %xr.24, %for.inc366 ]
  %arrayidx340 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 2, i64 %indvars.iv981, i64 %indvars.iv977
  br i1 %cmp9, label %if.then336, label %if.else350

if.then336:                                       ; preds = %for.body333
  %arrayidx347 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]]* @INIT_CBP_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv981, i64 %indvars.iv977, i64 0
  %call348 = tail call double @XRate(%struct.BiContextType* %arrayidx340, i32* %arrayidx347) #5
  br label %for.inc366

if.else350:                                       ; preds = %for.body333
  %arrayidx362 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]]* @INIT_CBP_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv981, i64 %indvars.iv977, i64 0
  %call363 = tail call double @XRate(%struct.BiContextType* %arrayidx340, i32* %arrayidx362) #5
  br label %for.inc366

for.inc366:                                       ; preds = %if.then336, %if.else350
  %call348.pn = phi double [ %call348, %if.then336 ], [ %call363, %if.else350 ]
  %xr.24 = fadd double %xr.23896, %call348.pn
  %indvars.iv.next978 = add i64 %indvars.iv977, 1
  %lftr.wideiv979 = trunc i64 %indvars.iv.next978 to i32
  %exitcond980 = icmp eq i32 %lftr.wideiv979, 4
  br i1 %exitcond980, label %for.inc369, label %for.body333

for.inc369:                                       ; preds = %for.inc366
  %indvars.iv.next982 = add i64 %indvars.iv981, 1
  %lftr.wideiv983 = trunc i64 %indvars.iv.next982 to i32
  %exitcond984 = icmp eq i32 %lftr.wideiv983, 3
  br i1 %exitcond984, label %for.cond375.preheader, label %for.cond331.preheader

for.cond375.preheader:                            ; preds = %for.inc369, %for.inc413
  %indvars.iv989 = phi i64 [ %indvars.iv.next990, %for.inc413 ], [ 0, %for.inc369 ]
  %xr.25902 = phi double [ %xr.27, %for.inc413 ], [ %xr.24, %for.inc369 ]
  br label %for.body377

for.body377:                                      ; preds = %for.inc410, %for.cond375.preheader
  %indvars.iv985 = phi i64 [ 0, %for.cond375.preheader ], [ %indvars.iv.next986, %for.inc410 ]
  %xr.26900 = phi double [ %xr.25902, %for.cond375.preheader ], [ %xr.27, %for.inc410 ]
  %arrayidx384 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 3, i64 %indvars.iv989, i64 %indvars.iv985
  br i1 %cmp9, label %if.then380, label %if.else394

if.then380:                                       ; preds = %for.body377
  %arrayidx391 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]]* @INIT_BCBP_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv989, i64 %indvars.iv985, i64 0
  %call392 = tail call double @XRate(%struct.BiContextType* %arrayidx384, i32* %arrayidx391) #5
  br label %for.inc410

if.else394:                                       ; preds = %for.body377
  %arrayidx406 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]]* @INIT_BCBP_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv989, i64 %indvars.iv985, i64 0
  %call407 = tail call double @XRate(%struct.BiContextType* %arrayidx384, i32* %arrayidx406) #5
  br label %for.inc410

for.inc410:                                       ; preds = %if.then380, %if.else394
  %call392.pn = phi double [ %call392, %if.then380 ], [ %call407, %if.else394 ]
  %xr.27 = fadd double %xr.26900, %call392.pn
  %indvars.iv.next986 = add i64 %indvars.iv985, 1
  %lftr.wideiv987 = trunc i64 %indvars.iv.next986 to i32
  %exitcond988 = icmp eq i32 %lftr.wideiv987, 4
  br i1 %exitcond988, label %for.inc413, label %for.body377

for.inc413:                                       ; preds = %for.inc410
  %indvars.iv.next990 = add i64 %indvars.iv989, 1
  %lftr.wideiv991 = trunc i64 %indvars.iv.next990 to i32
  %exitcond992 = icmp eq i32 %lftr.wideiv991, 10
  br i1 %exitcond992, label %for.cond419.preheader, label %for.cond375.preheader

for.cond419.preheader:                            ; preds = %for.inc413, %for.inc457
  %indvars.iv997 = phi i64 [ %indvars.iv.next998, %for.inc457 ], [ 0, %for.inc413 ]
  %xr.28906 = phi double [ %xr.30, %for.inc457 ], [ %xr.27, %for.inc413 ]
  br label %for.body421

for.body421:                                      ; preds = %for.inc454, %for.cond419.preheader
  %indvars.iv993 = phi i64 [ 0, %for.cond419.preheader ], [ %indvars.iv.next994, %for.inc454 ]
  %xr.29904 = phi double [ %xr.28906, %for.cond419.preheader ], [ %xr.30, %for.inc454 ]
  %arrayidx428 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 4, i64 %indvars.iv997, i64 %indvars.iv993
  br i1 %cmp9, label %if.then424, label %if.else438

if.then424:                                       ; preds = %for.body421
  %arrayidx435 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]]* @INIT_MAP_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv997, i64 %indvars.iv993, i64 0
  %call436 = tail call double @XRate(%struct.BiContextType* %arrayidx428, i32* %arrayidx435) #5
  br label %for.inc454

if.else438:                                       ; preds = %for.body421
  %arrayidx450 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]]* @INIT_MAP_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv997, i64 %indvars.iv993, i64 0
  %call451 = tail call double @XRate(%struct.BiContextType* %arrayidx428, i32* %arrayidx450) #5
  br label %for.inc454

for.inc454:                                       ; preds = %if.then424, %if.else438
  %call436.pn = phi double [ %call436, %if.then424 ], [ %call451, %if.else438 ]
  %xr.30 = fadd double %xr.29904, %call436.pn
  %indvars.iv.next994 = add i64 %indvars.iv993, 1
  %lftr.wideiv995 = trunc i64 %indvars.iv.next994 to i32
  %exitcond996 = icmp eq i32 %lftr.wideiv995, 15
  br i1 %exitcond996, label %for.inc457, label %for.body421

for.inc457:                                       ; preds = %for.inc454
  %indvars.iv.next998 = add i64 %indvars.iv997, 1
  %lftr.wideiv999 = trunc i64 %indvars.iv.next998 to i32
  %exitcond1000 = icmp eq i32 %lftr.wideiv999, 10
  br i1 %exitcond1000, label %for.cond463.preheader, label %for.cond419.preheader

for.cond463.preheader:                            ; preds = %for.inc457, %for.inc501
  %indvars.iv1005 = phi i64 [ %indvars.iv.next1006, %for.inc501 ], [ 0, %for.inc457 ]
  %xr.31910 = phi double [ %xr.33, %for.inc501 ], [ %xr.30, %for.inc457 ]
  br label %for.body465

for.body465:                                      ; preds = %for.inc498, %for.cond463.preheader
  %indvars.iv1001 = phi i64 [ 0, %for.cond463.preheader ], [ %indvars.iv.next1002, %for.inc498 ]
  %xr.32908 = phi double [ %xr.31910, %for.cond463.preheader ], [ %xr.33, %for.inc498 ]
  %arrayidx472 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 5, i64 %indvars.iv1005, i64 %indvars.iv1001
  br i1 %cmp9, label %if.then468, label %if.else482

if.then468:                                       ; preds = %for.body465
  %arrayidx479 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]]* @INIT_LAST_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1005, i64 %indvars.iv1001, i64 0
  %call480 = tail call double @XRate(%struct.BiContextType* %arrayidx472, i32* %arrayidx479) #5
  br label %for.inc498

if.else482:                                       ; preds = %for.body465
  %arrayidx494 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]]* @INIT_LAST_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1005, i64 %indvars.iv1001, i64 0
  %call495 = tail call double @XRate(%struct.BiContextType* %arrayidx472, i32* %arrayidx494) #5
  br label %for.inc498

for.inc498:                                       ; preds = %if.then468, %if.else482
  %call480.pn = phi double [ %call480, %if.then468 ], [ %call495, %if.else482 ]
  %xr.33 = fadd double %xr.32908, %call480.pn
  %indvars.iv.next1002 = add i64 %indvars.iv1001, 1
  %lftr.wideiv1003 = trunc i64 %indvars.iv.next1002 to i32
  %exitcond1004 = icmp eq i32 %lftr.wideiv1003, 15
  br i1 %exitcond1004, label %for.inc501, label %for.body465

for.inc501:                                       ; preds = %for.inc498
  %indvars.iv.next1006 = add i64 %indvars.iv1005, 1
  %lftr.wideiv1007 = trunc i64 %indvars.iv.next1006 to i32
  %exitcond1008 = icmp eq i32 %lftr.wideiv1007, 10
  br i1 %exitcond1008, label %for.cond507.preheader, label %for.cond463.preheader

for.cond507.preheader:                            ; preds = %for.inc501, %for.inc545
  %indvars.iv1013 = phi i64 [ %indvars.iv.next1014, %for.inc545 ], [ 0, %for.inc501 ]
  %xr.34914 = phi double [ %xr.36, %for.inc545 ], [ %xr.33, %for.inc501 ]
  br label %for.body509

for.body509:                                      ; preds = %for.inc542, %for.cond507.preheader
  %indvars.iv1009 = phi i64 [ 0, %for.cond507.preheader ], [ %indvars.iv.next1010, %for.inc542 ]
  %xr.35912 = phi double [ %xr.34914, %for.cond507.preheader ], [ %xr.36, %for.inc542 ]
  %arrayidx516 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 6, i64 %indvars.iv1013, i64 %indvars.iv1009
  br i1 %cmp9, label %if.then512, label %if.else526

if.then512:                                       ; preds = %for.body509
  %arrayidx523 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]]* @INIT_ONE_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1013, i64 %indvars.iv1009, i64 0
  %call524 = tail call double @XRate(%struct.BiContextType* %arrayidx516, i32* %arrayidx523) #5
  br label %for.inc542

if.else526:                                       ; preds = %for.body509
  %arrayidx538 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]]* @INIT_ONE_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1013, i64 %indvars.iv1009, i64 0
  %call539 = tail call double @XRate(%struct.BiContextType* %arrayidx516, i32* %arrayidx538) #5
  br label %for.inc542

for.inc542:                                       ; preds = %if.then512, %if.else526
  %call524.pn = phi double [ %call524, %if.then512 ], [ %call539, %if.else526 ]
  %xr.36 = fadd double %xr.35912, %call524.pn
  %indvars.iv.next1010 = add i64 %indvars.iv1009, 1
  %lftr.wideiv1011 = trunc i64 %indvars.iv.next1010 to i32
  %exitcond1012 = icmp eq i32 %lftr.wideiv1011, 5
  br i1 %exitcond1012, label %for.inc545, label %for.body509

for.inc545:                                       ; preds = %for.inc542
  %indvars.iv.next1014 = add i64 %indvars.iv1013, 1
  %lftr.wideiv1015 = trunc i64 %indvars.iv.next1014 to i32
  %exitcond1016 = icmp eq i32 %lftr.wideiv1015, 10
  br i1 %exitcond1016, label %for.cond551.preheader, label %for.cond507.preheader

for.cond551.preheader:                            ; preds = %for.inc545, %for.inc589
  %indvars.iv1021 = phi i64 [ %indvars.iv.next1022, %for.inc589 ], [ 0, %for.inc545 ]
  %xr.37918 = phi double [ %xr.39, %for.inc589 ], [ %xr.36, %for.inc545 ]
  br label %for.body553

for.body553:                                      ; preds = %for.inc586, %for.cond551.preheader
  %indvars.iv1017 = phi i64 [ 0, %for.cond551.preheader ], [ %indvars.iv.next1018, %for.inc586 ]
  %xr.38916 = phi double [ %xr.37918, %for.cond551.preheader ], [ %xr.39, %for.inc586 ]
  %arrayidx560 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 7, i64 %indvars.iv1021, i64 %indvars.iv1017
  br i1 %cmp9, label %if.then556, label %if.else570

if.then556:                                       ; preds = %for.body553
  %arrayidx567 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]]* @INIT_ABS_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1021, i64 %indvars.iv1017, i64 0
  %call568 = tail call double @XRate(%struct.BiContextType* %arrayidx560, i32* %arrayidx567) #5
  br label %for.inc586

if.else570:                                       ; preds = %for.body553
  %arrayidx582 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]]* @INIT_ABS_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1021, i64 %indvars.iv1017, i64 0
  %call583 = tail call double @XRate(%struct.BiContextType* %arrayidx560, i32* %arrayidx582) #5
  br label %for.inc586

for.inc586:                                       ; preds = %if.then556, %if.else570
  %call568.pn = phi double [ %call568, %if.then556 ], [ %call583, %if.else570 ]
  %xr.39 = fadd double %xr.38916, %call568.pn
  %indvars.iv.next1018 = add i64 %indvars.iv1017, 1
  %lftr.wideiv1019 = trunc i64 %indvars.iv.next1018 to i32
  %exitcond1020 = icmp eq i32 %lftr.wideiv1019, 5
  br i1 %exitcond1020, label %for.inc589, label %for.body553

for.inc589:                                       ; preds = %for.inc586
  %indvars.iv.next1022 = add i64 %indvars.iv1021, 1
  %lftr.wideiv1023 = trunc i64 %indvars.iv.next1022 to i32
  %exitcond1024 = icmp eq i32 %lftr.wideiv1023, 10
  br i1 %exitcond1024, label %for.cond595.preheader, label %for.cond551.preheader

for.cond595.preheader:                            ; preds = %for.inc589, %for.inc633
  %indvars.iv1029 = phi i64 [ %indvars.iv.next1030, %for.inc633 ], [ 0, %for.inc589 ]
  %xr.40922 = phi double [ %xr.42, %for.inc633 ], [ %xr.39, %for.inc589 ]
  br label %for.body597

for.body597:                                      ; preds = %for.inc630, %for.cond595.preheader
  %indvars.iv1025 = phi i64 [ 0, %for.cond595.preheader ], [ %indvars.iv.next1026, %for.inc630 ]
  %xr.41920 = phi double [ %xr.40922, %for.cond595.preheader ], [ %xr.42, %for.inc630 ]
  %arrayidx604 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 8, i64 %indvars.iv1029, i64 %indvars.iv1025
  br i1 %cmp9, label %if.then600, label %if.else614

if.then600:                                       ; preds = %for.body597
  %arrayidx611 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]]* @INIT_FLD_MAP_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1029, i64 %indvars.iv1025, i64 0
  %call612 = tail call double @XRate(%struct.BiContextType* %arrayidx604, i32* %arrayidx611) #5
  br label %for.inc630

if.else614:                                       ; preds = %for.body597
  %arrayidx626 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]]* @INIT_FLD_MAP_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1029, i64 %indvars.iv1025, i64 0
  %call627 = tail call double @XRate(%struct.BiContextType* %arrayidx604, i32* %arrayidx626) #5
  br label %for.inc630

for.inc630:                                       ; preds = %if.then600, %if.else614
  %call612.pn = phi double [ %call612, %if.then600 ], [ %call627, %if.else614 ]
  %xr.42 = fadd double %xr.41920, %call612.pn
  %indvars.iv.next1026 = add i64 %indvars.iv1025, 1
  %lftr.wideiv1027 = trunc i64 %indvars.iv.next1026 to i32
  %exitcond1028 = icmp eq i32 %lftr.wideiv1027, 15
  br i1 %exitcond1028, label %for.inc633, label %for.body597

for.inc633:                                       ; preds = %for.inc630
  %indvars.iv.next1030 = add i64 %indvars.iv1029, 1
  %lftr.wideiv1031 = trunc i64 %indvars.iv.next1030 to i32
  %exitcond1032 = icmp eq i32 %lftr.wideiv1031, 10
  br i1 %exitcond1032, label %for.cond639.preheader, label %for.cond595.preheader

for.cond639.preheader:                            ; preds = %for.inc633, %for.inc677
  %indvars.iv1037 = phi i64 [ %indvars.iv.next1038, %for.inc677 ], [ 0, %for.inc633 ]
  %xr.43926 = phi double [ %xr.45, %for.inc677 ], [ %xr.42, %for.inc633 ]
  br label %for.body641

for.body641:                                      ; preds = %for.inc674, %for.cond639.preheader
  %indvars.iv1033 = phi i64 [ 0, %for.cond639.preheader ], [ %indvars.iv.next1034, %for.inc674 ]
  %xr.44924 = phi double [ %xr.43926, %for.cond639.preheader ], [ %xr.45, %for.inc674 ]
  %arrayidx648 = getelementptr inbounds %struct.TextureInfoContexts* %tc, i64 0, i32 9, i64 %indvars.iv1037, i64 %indvars.iv1033
  br i1 %cmp9, label %if.then644, label %if.else658

if.then644:                                       ; preds = %for.body641
  %arrayidx655 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]]* @INIT_FLD_LAST_I, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1037, i64 %indvars.iv1033, i64 0
  %call656 = tail call double @XRate(%struct.BiContextType* %arrayidx648, i32* %arrayidx655) #5
  br label %for.inc674

if.else658:                                       ; preds = %for.body641
  %arrayidx670 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]]* @INIT_FLD_LAST_P, i64 0, i64 %indvars.iv1041, i64 %indvars.iv1037, i64 %indvars.iv1033, i64 0
  %call671 = tail call double @XRate(%struct.BiContextType* %arrayidx648, i32* %arrayidx670) #5
  br label %for.inc674

for.inc674:                                       ; preds = %if.then644, %if.else658
  %call656.pn = phi double [ %call656, %if.then644 ], [ %call671, %if.else658 ]
  %xr.45 = fadd double %xr.44924, %call656.pn
  %indvars.iv.next1034 = add i64 %indvars.iv1033, 1
  %lftr.wideiv1035 = trunc i64 %indvars.iv.next1034 to i32
  %exitcond1036 = icmp eq i32 %lftr.wideiv1035, 15
  br i1 %exitcond1036, label %for.inc677, label %for.body641

for.inc677:                                       ; preds = %for.inc674
  %indvars.iv.next1038 = add i64 %indvars.iv1037, 1
  %lftr.wideiv1039 = trunc i64 %indvars.iv.next1038 to i32
  %exitcond1040 = icmp eq i32 %lftr.wideiv1039, 10
  br i1 %exitcond1040, label %for.end679, label %for.cond639.preheader

for.end679:                                       ; preds = %for.inc677
  %cmp680 = fcmp olt double %xr.45, %min_xr.0928
  br i1 %cmp680, label %if.then681, label %for.inc683

if.then681:                                       ; preds = %for.end679
  %3 = trunc i64 %indvars.iv1041 to i32
  store i32 %3, i32* %mnumber, align 4, !tbaa !3
  br label %for.inc683

for.inc683:                                       ; preds = %for.end679, %if.then681
  %min_xr.1 = phi double [ %xr.45, %if.then681 ], [ %min_xr.0928, %for.end679 ]
  %indvars.iv.next1042 = add i64 %indvars.iv1041, 1
  %4 = trunc i64 %indvars.iv.next1042 to i32
  %cmp1 = icmp slt i32 %4, %cond
  br i1 %cmp1, label %for.inc683.for.cond2.preheader_crit_edge, label %for.end685

for.inc683.for.cond2.preheader_crit_edge:         ; preds = %for.inc683
  %.pre = load i32* %type, align 4, !tbaa !3
  br label %for.cond2.preheader

for.end685:                                       ; preds = %for.inc683
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @store_contexts() #0 {
entry:
  %0 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %1 = load %struct.InputParameters** @input, align 8, !tbaa !0
  %context_init_method = getelementptr inbounds %struct.InputParameters* %1, i64 0, i32 121
  %2 = load i32* %context_init_method, align 4, !tbaa !3
  %tobool = icmp eq i32 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %currentSlice = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 50
  %3 = load %struct.Slice** %currentSlice, align 8, !tbaa !0
  %start_mb_nr = getelementptr inbounds %struct.Slice* %3, i64 0, i32 3
  %4 = load i32* @num_mb_per_slice, align 4, !tbaa !3
  %5 = load i32* %start_mb_nr, align 4, !tbaa !3
  %type = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 6
  %field_picture = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 100
  %div = sdiv i32 %5, %4
  %6 = load i32* %type, align 4, !tbaa !3
  %7 = load i32* %field_picture, align 4, !tbaa !3
  %idxprom = sext i32 %div to i64
  %idxprom1 = sext i32 %6 to i64
  %idxprom2 = sext i32 %7 to i64
  %8 = load i32**** @initialized, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i32*** %8, i64 %idxprom2
  %9 = load i32*** %arrayidx, align 8, !tbaa !0
  %arrayidx3 = getelementptr inbounds i32** %9, i64 %idxprom1
  %10 = load i32** %arrayidx3, align 8, !tbaa !0
  %arrayidx4 = getelementptr inbounds i32* %10, i64 %idxprom
  store i32 1, i32* %arrayidx4, align 4, !tbaa !3
  %11 = load i32**** @model_number, align 8, !tbaa !0
  %arrayidx7 = getelementptr inbounds i32*** %11, i64 %idxprom2
  %12 = load i32*** %arrayidx7, align 8, !tbaa !0
  %arrayidx8 = getelementptr inbounds i32** %12, i64 %idxprom1
  %13 = load i32** %arrayidx8, align 8, !tbaa !0
  %add.ptr = getelementptr inbounds i32* %13, i64 %idxprom
  %mot_ctx = getelementptr inbounds %struct.Slice* %3, i64 0, i32 7
  %14 = load %struct.MotionInfoContexts** %mot_ctx, align 8, !tbaa !0
  %tex_ctx = getelementptr inbounds %struct.Slice* %3, i64 0, i32 8
  %15 = load %struct.TextureInfoContexts** %tex_ctx, align 8, !tbaa !0
  tail call void @GetCtxModelNumber(i32* %add.ptr, %struct.MotionInfoContexts* %14, %struct.TextureInfoContexts* %15) #5
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @update_field_frame_contexts(i32 %field) #0 {
entry:
  %tobool = icmp eq i32 %field, 0
  %0 = load i32**** @initialized, align 8, !tbaa !0
  %arrayidx40 = getelementptr inbounds i32*** %0, i64 1
  %1 = load i32**** @model_number, align 8, !tbaa !0
  %arrayidx51 = getelementptr inbounds i32*** %1, i64 1
  %.pre = load i32* @number_of_slices, align 4, !tbaa !3
  br i1 %tobool, label %for.cond29.preheader, label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %entry, %for.inc23
  %2 = phi i32 [ %16, %for.inc23 ], [ %.pre, %entry ]
  %indvars.iv95 = phi i64 [ %indvars.iv.next96, %for.inc23 ], [ 0, %entry ]
  %cmp287 = icmp sgt i32 %2, 0
  br i1 %cmp287, label %for.body3.lr.ph, label %for.inc23

for.body3.lr.ph:                                  ; preds = %for.cond1.preheader
  %3 = load i32*** %arrayidx40, align 8, !tbaa !0
  %arrayidx5 = getelementptr inbounds i32** %3, i64 %indvars.iv95
  %4 = load i32** %arrayidx5, align 8, !tbaa !0
  %5 = load i32*** %0, align 8, !tbaa !0
  %arrayidx10 = getelementptr inbounds i32** %5, i64 %indvars.iv95
  %6 = load i32** %arrayidx10, align 8, !tbaa !0
  %7 = load i32*** %arrayidx51, align 8, !tbaa !0
  %arrayidx16 = getelementptr inbounds i32** %7, i64 %indvars.iv95
  %8 = load i32** %arrayidx16, align 8, !tbaa !0
  %9 = load i32*** %1, align 8, !tbaa !0
  %arrayidx21 = getelementptr inbounds i32** %9, i64 %indvars.iv95
  %10 = load i32** %arrayidx21, align 8, !tbaa !0
  br label %for.body3

for.body3:                                        ; preds = %for.body3.lr.ph, %for.body3
  %indvars.iv93 = phi i64 [ 0, %for.body3.lr.ph ], [ %indvars.iv.next94, %for.body3 ]
  %11 = trunc i64 %indvars.iv93 to i32
  %shr = ashr i32 %11, 1
  %idxprom = sext i32 %shr to i64
  %arrayidx6 = getelementptr inbounds i32* %4, i64 %idxprom
  %12 = load i32* %arrayidx6, align 4, !tbaa !3
  %arrayidx11 = getelementptr inbounds i32* %6, i64 %indvars.iv93
  store i32 %12, i32* %arrayidx11, align 4, !tbaa !3
  %arrayidx17 = getelementptr inbounds i32* %8, i64 %idxprom
  %13 = load i32* %arrayidx17, align 4, !tbaa !3
  %arrayidx22 = getelementptr inbounds i32* %10, i64 %indvars.iv93
  store i32 %13, i32* %arrayidx22, align 4, !tbaa !3
  %indvars.iv.next94 = add i64 %indvars.iv93, 1
  %14 = load i32* @number_of_slices, align 4, !tbaa !3
  %15 = trunc i64 %indvars.iv.next94 to i32
  %cmp2 = icmp slt i32 %15, %14
  br i1 %cmp2, label %for.body3, label %for.inc23

for.inc23:                                        ; preds = %for.body3, %for.cond1.preheader
  %16 = phi i32 [ %2, %for.cond1.preheader ], [ %14, %for.body3 ]
  %indvars.iv.next96 = add i64 %indvars.iv95, 1
  %lftr.wideiv97 = trunc i64 %indvars.iv.next96 to i32
  %exitcond98 = icmp eq i32 %lftr.wideiv97, 4
  br i1 %exitcond98, label %if.end, label %for.cond1.preheader

for.cond29.preheader:                             ; preds = %entry, %for.inc57
  %17 = phi i32 [ %31, %for.inc57 ], [ %.pre, %entry ]
  %indvars.iv91 = phi i64 [ %indvars.iv.next92, %for.inc57 ], [ 0, %entry ]
  %add82 = add nsw i32 %17, 1
  %shr3083 = ashr i32 %add82, 1
  %cmp3184 = icmp sgt i32 %shr3083, 0
  br i1 %cmp3184, label %for.body32.lr.ph, label %for.inc57

for.body32.lr.ph:                                 ; preds = %for.cond29.preheader
  %18 = load i32*** %0, align 8, !tbaa !0
  %arrayidx36 = getelementptr inbounds i32** %18, i64 %indvars.iv91
  %19 = load i32** %arrayidx36, align 8, !tbaa !0
  %20 = load i32*** %arrayidx40, align 8, !tbaa !0
  %arrayidx41 = getelementptr inbounds i32** %20, i64 %indvars.iv91
  %21 = load i32** %arrayidx41, align 8, !tbaa !0
  %22 = load i32*** %1, align 8, !tbaa !0
  %arrayidx47 = getelementptr inbounds i32** %22, i64 %indvars.iv91
  %23 = load i32** %arrayidx47, align 8, !tbaa !0
  %24 = load i32*** %arrayidx51, align 8, !tbaa !0
  %arrayidx52 = getelementptr inbounds i32** %24, i64 %indvars.iv91
  %25 = load i32** %arrayidx52, align 8, !tbaa !0
  br label %for.body32

for.body32:                                       ; preds = %for.body32.lr.ph, %for.body32
  %indvars.iv = phi i64 [ 0, %for.body32.lr.ph ], [ %indvars.iv.next, %for.body32 ]
  %26 = trunc i64 %indvars.iv to i32
  %shl = shl i32 %26, 1
  %idxprom33 = sext i32 %shl to i64
  %arrayidx37 = getelementptr inbounds i32* %19, i64 %idxprom33
  %27 = load i32* %arrayidx37, align 4, !tbaa !3
  %arrayidx42 = getelementptr inbounds i32* %21, i64 %indvars.iv
  store i32 %27, i32* %arrayidx42, align 4, !tbaa !3
  %arrayidx48 = getelementptr inbounds i32* %23, i64 %idxprom33
  %28 = load i32* %arrayidx48, align 4, !tbaa !3
  %arrayidx53 = getelementptr inbounds i32* %25, i64 %indvars.iv
  store i32 %28, i32* %arrayidx53, align 4, !tbaa !3
  %indvars.iv.next = add i64 %indvars.iv, 1
  %29 = load i32* @number_of_slices, align 4, !tbaa !3
  %add = add nsw i32 %29, 1
  %shr30 = ashr i32 %add, 1
  %30 = trunc i64 %indvars.iv.next to i32
  %cmp31 = icmp slt i32 %30, %shr30
  br i1 %cmp31, label %for.body32, label %for.inc57

for.inc57:                                        ; preds = %for.body32, %for.cond29.preheader
  %31 = phi i32 [ %17, %for.cond29.preheader ], [ %29, %for.body32 ]
  %indvars.iv.next92 = add i64 %indvars.iv91, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next92 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond, label %if.end, label %for.cond29.preheader

if.end:                                           ; preds = %for.inc23, %for.inc57
  ret void
}

attributes #0 = { nounwind optsize uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind optsize "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { optsize "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind optsize readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind optsize }
attributes #5 = { optsize }

!0 = metadata !{metadata !"any pointer", metadata !1}
!1 = metadata !{metadata !"omnipotent char", metadata !2}
!2 = metadata !{metadata !"Simple C/C++ TBAA"}
!3 = metadata !{metadata !"int", metadata !1}
!4 = metadata !{metadata !"double", metadata !1}
!5 = metadata !{metadata !"long", metadata !1}
!6 = metadata !{metadata !"short", metadata !1}
