; ModuleID = '../../SPEC/benchspec/CPU2006/400.perlbench/src/sv.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sv = type { i8*, i32, i32 }
%struct.xpv = type { i8*, i64, i64 }
%struct.xrv = type { %struct.sv* }
%struct.xpviv = type { i8*, i64, i64, i64 }
%struct.xpvnv = type { i8*, i64, i64, i64, double }
%struct.xpvcv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.hv*, %struct.op*, %struct.op*, void (%struct.cv*)*, %union.any, %struct.gv*, i8*, i64, %struct.av*, %struct.cv*, i16, i32 }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, %struct.sv*, i8*, i32 }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter* }
%struct.av = type { %struct.xpvav*, i32, i32 }
%struct.xpvav = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.sv**, %struct.sv*, i8 }
%struct.hv = type { %struct.xpvhv*, i32, i32 }
%struct.xpvhv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i32, %struct.he*, %struct.pmop*, i8* }
%struct.he = type { %struct.he*, %struct.hek*, %struct.sv* }
%struct.hek = type { i32, i32, [1 x i8] }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, %struct.op*, %struct.op*, %struct.op*, %struct.op*, %struct.pmop*, %struct.regexp*, i32, i32, i8, %struct.hv* }
%struct.op = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8 }
%struct.regexp = type { i32*, i32*, %struct.regnode*, %struct.reg_substr_data*, i8*, %struct.reg_data*, i8*, i32*, i32, i32, i32, i32, i32, i32, i32, i32, [1 x %struct.regnode] }
%struct.regnode = type { i8, i8, i16 }
%struct.reg_substr_data = type { [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i32, i32, %struct.sv*, %struct.sv* }
%struct.reg_data = type { i32, i8*, [1 x i8*] }
%struct.interpreter = type { i8 }
%struct.cv = type { %struct.xpvcv*, i32, i32 }
%union.any = type { i8* }
%struct.gv = type { %struct.xpvgv*, i32, i32 }
%struct.xpvgv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct.gp*, i8*, i64, %struct.hv*, i8 }
%struct.gp = type { %struct.sv*, i32, %struct.io*, %struct.cv*, %struct.av*, %struct.hv*, %struct.gv*, %struct.cv*, i32, i32, i32, i8* }
%struct.io = type { %struct.xpvio*, i32, i32 }
%struct.xpvio = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, %struct._PerlIO**, %struct._PerlIO**, %union.anon, i64, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i16, i8, i8 }
%struct._PerlIO = type opaque
%union.anon = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%struct.xpvmg = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv* }
%struct.xpvlv = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i64, i64, %struct.sv*, i8 }
%struct.xpvbm = type { i8*, i64, i64, i64, double, %struct.magic*, %struct.hv*, i32, i16, i8 }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i16, i8, i8, i8*, %struct.hv*, %struct.gv*, i32, i32, i32, %struct.sv*, %struct.sv* }
%struct.stackinfo = type { %struct.av*, %struct.context*, i32, i32, i32, %struct.stackinfo*, %struct.stackinfo*, i32 }
%struct.context = type { i32, %union.anon.0 }
%union.anon.0 = type { %struct.block }
%struct.block = type { i32, %struct.cop*, i32, i32, i32, %struct.pmop*, i8, %union.anon.1 }
%union.anon.1 = type { %struct.block_loop }
%struct.block_loop = type { i8*, i32, %struct.op*, %struct.op*, %struct.op*, %struct.sv**, %struct.sv*, %struct.sv*, %struct.av*, i64, i64 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }

@PL_sv_arenaroot = external global %struct.sv*
@PL_sv_root = external global %struct.sv*
@PL_in_clean_objs = external global i8
@PL_in_clean_all = external global i8
@PL_xiv_arenaroot = external global %struct.xpv*
@PL_xiv_root = external global i64*
@PL_xnv_arenaroot = external global %struct.xpv*
@PL_xnv_root = external global double*
@PL_xrv_arenaroot = external global %struct.xpv*
@PL_xrv_root = external global %struct.xrv*
@PL_xpv_arenaroot = external global %struct.xpv*
@PL_xpv_root = external global %struct.xpv*
@PL_xpviv_arenaroot = external global %struct.xpviv*
@PL_xpviv_root = external global %struct.xpviv*
@PL_xpvnv_arenaroot = external global %struct.xpvnv*
@PL_xpvnv_root = external global %struct.xpvnv*
@PL_xpvcv_arenaroot = external global %struct.xpvcv*
@PL_xpvcv_root = external global %struct.xpvcv*
@PL_xpvav_arenaroot = external global %struct.xpvav*
@PL_xpvav_root = external global %struct.xpvav*
@PL_xpvhv_arenaroot = external global %struct.xpvhv*
@PL_xpvhv_root = external global %struct.xpvhv*
@PL_xpvmg_arenaroot = external global %struct.xpvmg*
@PL_xpvmg_root = external global %struct.xpvmg*
@PL_xpvlv_arenaroot = external global %struct.xpvlv*
@PL_xpvlv_root = external global %struct.xpvlv*
@PL_xpvbm_arenaroot = external global %struct.xpvbm*
@PL_xpvbm_root = external global %struct.xpvbm*
@PL_he_arenaroot = external global %struct.xpv*
@PL_he_root = external global %struct.he*
@PL_nice_chunk = external global i8*
@PL_nice_chunk_size = external global i32
@PL_op = external global %struct.op*
@PL_warn_uninit = external constant [0 x i8]
@.str = private unnamed_addr constant [5 x i8] c" in \00", align 1
@PL_op_desc = external global [0 x i8*]
@.str1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str2 = private unnamed_addr constant [34 x i8] c"Can't upgrade that kind of scalar\00", align 1
@.str3 = private unnamed_addr constant [23 x i8] c"Can't upgrade to undef\00", align 1
@.str4 = private unnamed_addr constant [33 x i8] c"Can't coerce %s to integer in %s\00", align 1
@PL_tainting = external global i8
@PL_tainted = external global i8
@.str5 = private unnamed_addr constant [32 x i8] c"Can't coerce %s to number in %s\00", align 1
@PL_op_name = external global [0 x i8*]
@PL_curcop = external global %struct.cop*
@PL_dowarn = external global i8
@PL_localizing = external global i32
@PL_sv_undef = external global %struct.sv
@.str6 = private unnamed_addr constant [107 x i8] c"sv_2iv assumed (U_V(fabs((double)SvNVX(sv))) < (UV)IV_MAX) but SvNVX(sv)=%g U_V is 0x%lx, IV_MAX is 0x%lx\0A\00", align 1
@.str7 = private unnamed_addr constant [107 x i8] c"sv_2uv assumed (U_V(fabs((double)SvNVX(sv))) < (UV)IV_MAX) but SvNVX(sv)=%g U_V is 0x%lx, IV_MAX is 0x%lx\0A\00", align 1
@.str8 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str9 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str10 = private unnamed_addr constant [8 x i8] c"NULLREF\00", align 1
@.str11 = private unnamed_addr constant [5 x i8] c"msix\00", align 1
@PL_reginterp_cnt = external global i32
@.str14 = private unnamed_addr constant [4 x i8] c"REF\00", align 1
@.str15 = private unnamed_addr constant [7 x i8] c"SCALAR\00", align 1
@.str16 = private unnamed_addr constant [7 x i8] c"LVALUE\00", align 1
@.str17 = private unnamed_addr constant [6 x i8] c"ARRAY\00", align 1
@.str18 = private unnamed_addr constant [5 x i8] c"HASH\00", align 1
@.str19 = private unnamed_addr constant [5 x i8] c"CODE\00", align 1
@.str20 = private unnamed_addr constant [5 x i8] c"GLOB\00", align 1
@.str21 = private unnamed_addr constant [7 x i8] c"FORMAT\00", align 1
@.str22 = private unnamed_addr constant [3 x i8] c"IO\00", align 1
@.str23 = private unnamed_addr constant [8 x i8] c"UNKNOWN\00", align 1
@.str24 = private unnamed_addr constant [13 x i8] c"%s=%s(0x%lx)\00", align 1
@.str25 = private unnamed_addr constant [9 x i8] c"__ANON__\00", align 1
@.str26 = private unnamed_addr constant [10 x i8] c"%s(0x%lx)\00", align 1
@PL_Xpv = external global %struct.xpv*
@PL_encoding = external global %struct.sv*
@.str27 = private unnamed_addr constant [21 x i8] c"Wide character in %s\00", align 1
@.str28 = private unnamed_addr constant [15 x i8] c"Wide character\00", align 1
@PL_no_modify = external constant [0 x i8]
@.str29 = private unnamed_addr constant [25 x i8] c"Bizarre copy of %s in %s\00", align 1
@.str30 = private unnamed_addr constant [19 x i8] c"Bizarre copy of %s\00", align 1
@PL_Sv = external global %struct.sv*
@PL_curstackinfo = external global %struct.stackinfo*
@PL_sortcop = external global %struct.op*
@.str31 = private unnamed_addr constant [41 x i8] c"Can't redefine active sort subroutine %s\00", align 1
@PL_sub_generation = external global i32
@.str32 = private unnamed_addr constant [37 x i8] c"Constant subroutine %s::%s redefined\00", align 1
@.str33 = private unnamed_addr constant [28 x i8] c"Subroutine %s::%s redefined\00", align 1
@.str34 = private unnamed_addr constant [37 x i8] c"Undefined value assigned to typeglob\00", align 1
@.str35 = private unnamed_addr constant [45 x i8] c"panic: sv_setpvn called with negative strlen\00", align 1
@PL_compiling = external global %struct.cop
@PL_sv_count = external global i32
@PL_vtbl_sv = external global %struct.mgvtbl
@PL_vtbl_amagic = external global %struct.mgvtbl
@PL_vtbl_amagicelem = external global %struct.mgvtbl
@PL_vtbl_ovrld = external global %struct.mgvtbl
@PL_vtbl_bm = external global %struct.mgvtbl
@PL_vtbl_regdata = external global %struct.mgvtbl
@PL_vtbl_regdatum = external global %struct.mgvtbl
@PL_vtbl_env = external global %struct.mgvtbl
@PL_vtbl_fm = external global %struct.mgvtbl
@PL_vtbl_envelem = external global %struct.mgvtbl
@PL_vtbl_mglob = external global %struct.mgvtbl
@PL_vtbl_isa = external global %struct.mgvtbl
@PL_vtbl_isaelem = external global %struct.mgvtbl
@PL_vtbl_nkeys = external global %struct.mgvtbl
@PL_vtbl_dbline = external global %struct.mgvtbl
@PL_vtbl_pack = external global %struct.mgvtbl
@PL_vtbl_packelem = external global %struct.mgvtbl
@PL_vtbl_regexp = external global %struct.mgvtbl
@PL_vtbl_sig = external global %struct.mgvtbl
@PL_vtbl_sigelem = external global %struct.mgvtbl
@PL_vtbl_taint = external global %struct.mgvtbl
@PL_vtbl_uvar = external global %struct.mgvtbl
@PL_vtbl_vec = external global %struct.mgvtbl
@PL_vtbl_utf8 = external global %struct.mgvtbl
@PL_vtbl_substr = external global %struct.mgvtbl
@PL_vtbl_defelem = external global %struct.mgvtbl
@PL_vtbl_glob = external global %struct.mgvtbl
@PL_vtbl_arylen = external global %struct.mgvtbl
@PL_vtbl_pos = external global %struct.mgvtbl
@PL_vtbl_backref = external global %struct.mgvtbl
@.str36 = private unnamed_addr constant [43 x i8] c"Don't know how to handle magic of type \5C%o\00", align 1
@.str37 = private unnamed_addr constant [28 x i8] c"Can't weaken a nonreference\00", align 1
@.str38 = private unnamed_addr constant [26 x i8] c"Reference is already weak\00", align 1
@.str39 = private unnamed_addr constant [36 x i8] c"Can't modify non-existent substring\00", align 1
@.str40 = private unnamed_addr constant [17 x i8] c"panic: sv_insert\00", align 1
@.str41 = private unnamed_addr constant [35 x i8] c"Reference miscount in sv_replace()\00", align 1
@PL_defstash = external global %struct.hv*
@PL_stack_sp = external global %struct.sv**
@PL_stack_base = external global %struct.sv**
@PL_curstack = external global %struct.av*
@PL_stack_max = external global %struct.sv**
@PL_markstack_ptr = external global i32*
@PL_markstack_max = external global i32*
@PL_stderrgv = external global %struct.gv*
@.str42 = private unnamed_addr constant [17 x i8] c"panic: POPSTACK\0A\00", align 1
@.str43 = private unnamed_addr constant [50 x i8] c"DESTROY created new reference to dead object '%s'\00", align 1
@PL_sv_objcount = external global i32
@PL_hv_fetch_ent_mh = external global %struct.he*
@PL_sv_yes = external global %struct.sv
@PL_sv_no = external global %struct.sv
@PL_sv_placeholder = external global %struct.sv
@.str44 = private unnamed_addr constant [46 x i8] c"Attempt to free unreferenced scalar: SV 0x%lx\00", align 1
@PL_utf8skip = external constant [0 x i8]
@.str45 = private unnamed_addr constant [35 x i8] c"panic: sv_pos_b2u: bad byte offset\00", align 1
@.str46 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@PL_rs = external global %struct.sv*
@.str47 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str48 = private unnamed_addr constant [21 x i8] c"Wide character in $/\00", align 1
@PL_tmps_ix = external global i32
@PL_tmps_max = external global i32
@PL_tmps_stack = external global %struct.sv**
@.str49 = private unnamed_addr constant [40 x i8] c"semi-panic: attempt to dup freed string\00", align 1
@PL_envgv = external global %struct.gv*
@environ = external global i8**
@.str50 = private unnamed_addr constant [19 x i8] c"Bad filehandle: %s\00", align 1
@PL_no_usym = external constant [0 x i8]
@.str51 = private unnamed_addr constant [11 x i8] c"filehandle\00", align 1
@.str52 = private unnamed_addr constant [19 x i8] c"Bad filehandle: %_\00", align 1
@PL_amagic_generation = external global i64
@.str53 = private unnamed_addr constant [50 x i8] c"Overloaded dereference did not return a reference\00", align 1
@.str54 = private unnamed_addr constant [27 x i8] c"Not a subroutine reference\00", align 1
@.str55 = private unnamed_addr constant [32 x i8] c"Unable to create sub named \22%_\22\00", align 1
@.str56 = private unnamed_addr constant [32 x i8] c"Can't coerce %s to string in %s\00", align 1
@.str57 = private unnamed_addr constant [32 x i8] c"Can't bless non-reference value\00", align 1
@Perl_sv_vcatpvfn.nullstr = internal global [7 x i8] c"(null)\00", align 1
@.str58 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str59 = private unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 1
@.str60 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str61 = private unnamed_addr constant [13 x i8] c"panic: frexp\00", align 1
@PL_efloatsize = external global i64
@PL_efloatbuf = external global i8*
@Perl_sv_vcatpvfn.prifldbl = internal constant [3 x i8] c"Lf\00", align 1
@.str62 = private unnamed_addr constant [33 x i8] c"Invalid conversion in %sprintf: \00", align 1
@.str63 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str64 = private unnamed_addr constant [7 x i8] c"\22%%%c\22\00", align 1
@.str65 = private unnamed_addr constant [11 x i8] c"\22%%\5C%03lo\22\00", align 1
@.str66 = private unnamed_addr constant [14 x i8] c"end of string\00", align 1
@.str67 = private unnamed_addr constant [3 x i8] c"%_\00", align 1
@.str68 = private unnamed_addr constant [46 x i8] c"Newline in left-justified string for %sprintf\00", align 1
@PL_tmps_floor = external global i32
@.str69 = private unnamed_addr constant [7 x i8] c"decode\00", align 1
@.str70 = private unnamed_addr constant [11 x i8] c"cat_decode\00", align 1
@.str71 = private unnamed_addr constant [34 x i8] c"Invalid argument to sv_cat_decode\00", align 1
@.str72 = private unnamed_addr constant [19 x i8] c"panic: del_backref\00", align 1
@.str73 = private unnamed_addr constant [34 x i8] c"Argument \22%s\22 isn't numeric in %s\00", align 1
@.str74 = private unnamed_addr constant [28 x i8] c"Argument \22%s\22 isn't numeric\00", align 1

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_add_arena(i8* %ptr, i32 %size, i32 %flags) #0 {
entry:
  %0 = bitcast i8* %ptr to %struct.sv*
  %1 = load %struct.sv** @PL_sv_arenaroot, align 8, !tbaa !0
  %2 = bitcast %struct.sv* %1 to i8*
  %sv_any = bitcast i8* %ptr to i8**
  store i8* %2, i8** %sv_any, align 8, !tbaa !0
  %div = lshr i32 %size, 4
  %sv_refcnt = getelementptr inbounds i8* %ptr, i64 8
  %3 = bitcast i8* %sv_refcnt to i32*
  store i32 %div, i32* %3, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds i8* %ptr, i64 12
  %4 = bitcast i8* %sv_flags to i32*
  store i32 %flags, i32* %4, align 4, !tbaa !3
  store %struct.sv* %0, %struct.sv** @PL_sv_arenaroot, align 8, !tbaa !0
  %add.ptr = getelementptr inbounds i8* %ptr, i64 16
  %5 = bitcast i8* %add.ptr to %struct.sv*
  store %struct.sv* %5, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %sub = add i32 %div, -1
  %idxprom = zext i32 %sub to i64
  %arrayidx = getelementptr inbounds %struct.sv* %0, i64 %idxprom
  %cmp24 = icmp ult %struct.sv* %5, %arrayidx
  br i1 %cmp24, label %while.body, label %while.end

while.body:                                       ; preds = %entry, %while.body
  %sv.025 = phi %struct.sv* [ %add.ptr5, %while.body ], [ %5, %entry ]
  %add.ptr5 = getelementptr inbounds %struct.sv* %sv.025, i64 1
  %6 = bitcast %struct.sv* %add.ptr5 to i8*
  %sv_any6 = getelementptr inbounds %struct.sv* %sv.025, i64 0, i32 0
  store i8* %6, i8** %sv_any6, align 8, !tbaa !0
  %sv_refcnt7 = getelementptr inbounds %struct.sv* %sv.025, i64 0, i32 1
  store i32 0, i32* %sv_refcnt7, align 4, !tbaa !3
  %sv_flags8 = getelementptr inbounds %struct.sv* %sv.025, i64 0, i32 2
  store i32 255, i32* %sv_flags8, align 4, !tbaa !3
  %cmp = icmp ult %struct.sv* %add.ptr5, %arrayidx
  br i1 %cmp, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %entry
  %sv.0.lcssa = phi %struct.sv* [ %5, %entry ], [ %add.ptr5, %while.body ]
  %sv_any9 = getelementptr inbounds %struct.sv* %sv.0.lcssa, i64 0, i32 0
  store i8* null, i8** %sv_any9, align 8, !tbaa !0
  %sv_flags10 = getelementptr inbounds %struct.sv* %sv.0.lcssa, i64 0, i32 2
  store i32 255, i32* %sv_flags10, align 4, !tbaa !3
  ret void
}

; Function Attrs: nounwind optsize readnone uwtable
define void @Perl_sv_report_used() #1 {
entry:
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_clean_objs() #0 {
entry:
  store i8 1, i8* @PL_in_clean_objs, align 1, !tbaa !1
  %call = tail call fastcc i32 @S_visit(void (%struct.sv*)* @do_clean_objs, i32 524288, i32 524288) #7
  %call1 = tail call fastcc i32 @S_visit(void (%struct.sv*)* @do_clean_named_objs, i32 13, i32 255) #7
  store i8 0, i8* @PL_in_clean_objs, align 1, !tbaa !1
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @S_visit(void (%struct.sv*)* nocapture %f, i32 %flags, i32 %mask) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_arenaroot, align 8, !tbaa !0
  %tobool34 = icmp eq %struct.sv* %0, null
  br i1 %tobool34, label %for.end11, label %for.body

for.body:                                         ; preds = %entry, %for.inc10
  %visited.036 = phi i32 [ %visited.1.ph28, %for.inc10 ], [ 0, %entry ]
  %sva.035 = phi %struct.sv* [ %5, %for.inc10 ], [ %0, %entry ]
  %sv_refcnt = getelementptr inbounds %struct.sv* %sva.035, i64 0, i32 1
  %1 = load i32* %sv_refcnt, align 4, !tbaa !3
  %idxprom = zext i32 %1 to i64
  %arrayidx = getelementptr inbounds %struct.sv* %sva.035, i64 %idxprom
  %cmp2430 = icmp ugt i32 %1, 1
  br i1 %cmp2430, label %for.body2.lr.ph.lr.ph, label %for.inc10

for.body2.lr.ph.lr.ph:                            ; preds = %for.body
  %sv.02329 = getelementptr inbounds %struct.sv* %sva.035, i64 1
  br label %for.body2.lr.ph

for.body2.lr.ph:                                  ; preds = %for.body2.lr.ph.lr.ph, %if.then
  %sv.02333 = phi %struct.sv* [ %sv.02329, %for.body2.lr.ph.lr.ph ], [ %sv.023, %if.then ]
  %visited.1.ph32 = phi i32 [ %visited.036, %for.body2.lr.ph.lr.ph ], [ %inc, %if.then ]
  %sva.0.pn.ph31 = phi %struct.sv* [ %sva.035, %for.body2.lr.ph.lr.ph ], [ %sv.026, %if.then ]
  br label %for.body2

for.body2:                                        ; preds = %for.body2.lr.ph, %for.cond1.backedge
  %sv.026 = phi %struct.sv* [ %sv.02333, %for.body2.lr.ph ], [ %sv.0, %for.cond1.backedge ]
  %sva.0.pn25 = phi %struct.sv* [ %sva.0.pn.ph31, %for.body2.lr.ph ], [ %sv.026, %for.cond1.backedge ]
  %sv_flags = getelementptr inbounds %struct.sv* %sva.0.pn25, i64 1, i32 2
  %2 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %2, 255
  %cmp3 = icmp eq i32 %and, 255
  br i1 %cmp3, label %for.cond1.backedge, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body2
  %and5 = and i32 %2, %mask
  %cmp6 = icmp eq i32 %and5, %flags
  br i1 %cmp6, label %land.lhs.true7, label %for.cond1.backedge

land.lhs.true7:                                   ; preds = %land.lhs.true
  %sv_refcnt8 = getelementptr inbounds %struct.sv* %sva.0.pn25, i64 1, i32 1
  %3 = load i32* %sv_refcnt8, align 4, !tbaa !3
  %tobool9 = icmp eq i32 %3, 0
  br i1 %tobool9, label %for.cond1.backedge, label %if.then

for.cond1.backedge:                               ; preds = %land.lhs.true7, %for.body2, %land.lhs.true
  %sv.0 = getelementptr inbounds %struct.sv* %sv.026, i64 1
  %cmp = icmp ult %struct.sv* %sv.0, %arrayidx
  br i1 %cmp, label %for.body2, label %for.inc10

if.then:                                          ; preds = %land.lhs.true7
  tail call void %f(%struct.sv* %sv.026) #8
  %inc = add nsw i32 %visited.1.ph32, 1
  %sv.023 = getelementptr inbounds %struct.sv* %sv.026, i64 1
  %cmp24 = icmp ult %struct.sv* %sv.023, %arrayidx
  br i1 %cmp24, label %for.body2.lr.ph, label %for.inc10

for.inc10:                                        ; preds = %for.body, %if.then, %for.cond1.backedge
  %visited.1.ph28 = phi i32 [ %visited.1.ph32, %for.cond1.backedge ], [ %visited.036, %for.body ], [ %inc, %if.then ]
  %sv_any = getelementptr inbounds %struct.sv* %sva.035, i64 0, i32 0
  %4 = load i8** %sv_any, align 8, !tbaa !0
  %5 = bitcast i8* %4 to %struct.sv*
  %tobool = icmp eq i8* %4, null
  br i1 %tobool, label %for.end11, label %for.body

for.end11:                                        ; preds = %for.inc10, %entry
  %visited.0.lcssa = phi i32 [ 0, %entry ], [ %visited.1.ph28, %for.inc10 ]
  ret i32 %visited.0.lcssa
}

; Function Attrs: nounwind optsize uwtable
define internal void @do_clean_objs(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 524288
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end15, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %1 to %struct.sv**
  %2 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_flags1 = getelementptr inbounds %struct.sv* %2, i64 0, i32 2
  %3 = load i32* %sv_flags1, align 4, !tbaa !3
  %and2 = and i32 %3, 4096
  %tobool3 = icmp eq i32 %and2, 0
  br i1 %tobool3, label %if.end15, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %and5 = and i32 %0, -2146959360
  %cmp = icmp eq i32 %and5, -2146959360
  br i1 %cmp, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then
  tail call fastcc void @S_sv_del_backref(%struct.sv* %sv) #7
  %4 = load i32* %sv_flags, align 4, !tbaa !3
  %and8 = and i32 %4, 2146959359
  store i32 %and8, i32* %sv_flags, align 4, !tbaa !3
  %5 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv10 = bitcast i8* %5 to %struct.sv**
  store %struct.sv* null, %struct.sv** %xrv_rv10, align 8, !tbaa !0
  br label %if.end15

if.else:                                          ; preds = %if.then
  %and12 = and i32 %0, -268959745
  store i32 %and12, i32* %sv_flags, align 4, !tbaa !3
  store %struct.sv* null, %struct.sv** %xrv_rv, align 8, !tbaa !0
  tail call void @Perl_sv_free(%struct.sv* %2) #7
  br label %if.end15

if.end15:                                         ; preds = %land.lhs.true, %entry, %if.then6, %if.else
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal void @do_clean_named_objs(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 255
  %cmp = icmp eq i32 %and, 13
  br i1 %cmp, label %land.lhs.true, label %if.end71

land.lhs.true:                                    ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds i8* %1, i64 56
  %2 = bitcast i8* %xgv_gp to %struct.gp**
  %3 = load %struct.gp** %2, align 8, !tbaa !0
  %tobool = icmp eq %struct.gp* %3, null
  br i1 %tobool, label %if.end71, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %gp_sv = getelementptr inbounds %struct.gp* %3, i64 0, i32 0
  %4 = load %struct.sv** %gp_sv, align 8, !tbaa !0
  %sv_flags3 = getelementptr inbounds %struct.sv* %4, i64 0, i32 2
  %5 = load i32* %sv_flags3, align 4, !tbaa !3
  %and4 = and i32 %5, 4096
  %tobool5 = icmp eq i32 %and4, 0
  br i1 %tobool5, label %lor.lhs.false, label %if.then69

lor.lhs.false:                                    ; preds = %if.then
  %gp_av = getelementptr inbounds %struct.gp* %3, i64 0, i32 4
  %6 = load %struct.av** %gp_av, align 8, !tbaa !0
  %tobool8 = icmp eq %struct.av* %6, null
  br i1 %tobool8, label %lor.lhs.false16, label %land.lhs.true9

land.lhs.true9:                                   ; preds = %lor.lhs.false
  %sv_flags13 = getelementptr inbounds %struct.av* %6, i64 0, i32 2
  %7 = load i32* %sv_flags13, align 4, !tbaa !3
  %and14 = and i32 %7, 4096
  %tobool15 = icmp eq i32 %and14, 0
  br i1 %tobool15, label %lor.lhs.false16, label %if.then69

lor.lhs.false16:                                  ; preds = %land.lhs.true9, %lor.lhs.false
  %gp_hv = getelementptr inbounds %struct.gp* %3, i64 0, i32 5
  %8 = load %struct.hv** %gp_hv, align 8, !tbaa !0
  %tobool19 = icmp eq %struct.hv* %8, null
  br i1 %tobool19, label %lor.lhs.false27, label %land.lhs.true20

land.lhs.true20:                                  ; preds = %lor.lhs.false16
  %sv_flags24 = getelementptr inbounds %struct.hv* %8, i64 0, i32 2
  %9 = load i32* %sv_flags24, align 4, !tbaa !3
  %and25 = and i32 %9, 4096
  %tobool26 = icmp eq i32 %and25, 0
  br i1 %tobool26, label %lor.lhs.false27, label %if.then69

lor.lhs.false27:                                  ; preds = %land.lhs.true20, %lor.lhs.false16
  %tobool28 = icmp eq %struct.sv* %sv, null
  br i1 %tobool28, label %lor.lhs.false58, label %cond.true

cond.true:                                        ; preds = %lor.lhs.false27
  %gp_io = getelementptr inbounds %struct.gp* %3, i64 0, i32 2
  %10 = load %struct.io** %gp_io, align 8, !tbaa !0
  %tobool39 = icmp eq %struct.io* %10, null
  br i1 %tobool39, label %lor.lhs.false58, label %land.lhs.true40

land.lhs.true40:                                  ; preds = %cond.true
  %sv_flags55 = getelementptr inbounds %struct.io* %10, i64 0, i32 2
  %11 = load i32* %sv_flags55, align 4, !tbaa !3
  %and56 = and i32 %11, 4096
  %tobool57 = icmp eq i32 %and56, 0
  br i1 %tobool57, label %lor.lhs.false58, label %if.then69

lor.lhs.false58:                                  ; preds = %land.lhs.true40, %cond.true, %lor.lhs.false27
  %gp_cv = getelementptr inbounds %struct.gp* %3, i64 0, i32 7
  %12 = load %struct.cv** %gp_cv, align 8, !tbaa !0
  %tobool61 = icmp eq %struct.cv* %12, null
  br i1 %tobool61, label %if.end71, label %land.lhs.true62

land.lhs.true62:                                  ; preds = %lor.lhs.false58
  %sv_flags66 = getelementptr inbounds %struct.cv* %12, i64 0, i32 2
  %13 = load i32* %sv_flags66, align 4, !tbaa !3
  %and67 = and i32 %13, 4096
  %tobool68 = icmp eq i32 %and67, 0
  br i1 %tobool68, label %if.end71, label %if.then69

if.then69:                                        ; preds = %land.lhs.true9, %land.lhs.true20, %land.lhs.true40, %land.lhs.true62, %if.then
  %or = or i32 %0, 4194304
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  tail call void @Perl_sv_free(%struct.sv* %sv) #7
  br label %if.end71

if.end71:                                         ; preds = %land.lhs.true62, %lor.lhs.false58, %land.lhs.true, %if.then69, %entry
  ret void
}

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_sv_clean_all() #0 {
entry:
  store i8 1, i8* @PL_in_clean_all, align 1, !tbaa !1
  %call = tail call fastcc i32 @S_visit(void (%struct.sv*)* @do_clean_all, i32 0, i32 0) #7
  store i8 0, i8* @PL_in_clean_all, align 1, !tbaa !1
  ret i32 %call
}

; Function Attrs: nounwind optsize uwtable
define internal void @do_clean_all(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %0, 4194304
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  tail call void @Perl_sv_free(%struct.sv* %sv) #7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_free_arenas() #0 {
entry:
  %0 = load %struct.sv** @PL_sv_arenaroot, align 8, !tbaa !0
  %tobool174 = icmp eq %struct.sv* %0, null
  br i1 %tobool174, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.cond.backedge
  %sva.0175 = phi %struct.sv* [ %svanext.0.lcssa, %for.cond.backedge ], [ %0, %entry ]
  %sv_any = getelementptr inbounds %struct.sv* %sva.0175, i64 0, i32 0
  %svanext.0.in169 = load i8** %sv_any, align 8
  %svanext.0170 = bitcast i8* %svanext.0.in169 to %struct.sv*
  %tobool1171 = icmp eq i8* %svanext.0.in169, null
  br i1 %tobool1171, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %for.body, %while.body
  %svanext.0173 = phi %struct.sv* [ %svanext.0, %while.body ], [ %svanext.0170, %for.body ]
  %svanext.0.in172 = phi i8* [ %svanext.0.in, %while.body ], [ %svanext.0.in169, %for.body ]
  %sv_flags = getelementptr inbounds i8* %svanext.0.in172, i64 12
  %1 = bitcast i8* %sv_flags to i32*
  %2 = load i32* %1, align 4, !tbaa !3
  %and = and i32 %2, 1048576
  %tobool2 = icmp eq i32 %and, 0
  br i1 %tobool2, label %while.end, label %while.body

while.body:                                       ; preds = %land.rhs
  %sv_any3 = bitcast i8* %svanext.0.in172 to i8**
  %svanext.0.in = load i8** %sv_any3, align 8
  %svanext.0 = bitcast i8* %svanext.0.in to %struct.sv*
  %tobool1 = icmp eq i8* %svanext.0.in, null
  br i1 %tobool1, label %while.end, label %land.rhs

while.end:                                        ; preds = %while.body, %land.rhs, %for.body
  %svanext.0.lcssa = phi %struct.sv* [ %svanext.0170, %for.body ], [ %svanext.0173, %land.rhs ], [ %svanext.0, %while.body ]
  %sv_flags4 = getelementptr inbounds %struct.sv* %sva.0175, i64 0, i32 2
  %3 = load i32* %sv_flags4, align 4, !tbaa !3
  %and5 = and i32 %3, 1048576
  %tobool6 = icmp eq i32 %and5, 0
  br i1 %tobool6, label %if.then, label %for.cond.backedge

for.cond.backedge:                                ; preds = %while.end, %if.then
  %tobool = icmp eq %struct.sv* %svanext.0.lcssa, null
  br i1 %tobool, label %for.end, label %for.body

if.then:                                          ; preds = %while.end
  %4 = bitcast %struct.sv* %sva.0175 to i8*
  tail call void @Perl_safesysfree(i8* %4) #8
  br label %for.cond.backedge

for.end:                                          ; preds = %for.cond.backedge, %entry
  %5 = load %struct.xpv** @PL_xiv_arenaroot, align 8, !tbaa !0
  %tobool8167 = icmp eq %struct.xpv* %5, null
  br i1 %tobool8167, label %for.end11, label %for.body9

for.body9:                                        ; preds = %for.end, %for.body9
  %arena.0168 = phi %struct.xpv* [ %7, %for.body9 ], [ %5, %for.end ]
  %xpv_pv = getelementptr inbounds %struct.xpv* %arena.0168, i64 0, i32 0
  %6 = load i8** %xpv_pv, align 8, !tbaa !0
  %7 = bitcast i8* %6 to %struct.xpv*
  %8 = bitcast %struct.xpv* %arena.0168 to i8*
  tail call void @Perl_safesysfree(i8* %8) #8
  %tobool8 = icmp eq i8* %6, null
  br i1 %tobool8, label %for.end11, label %for.body9

for.end11:                                        ; preds = %for.body9, %for.end
  store %struct.xpv* null, %struct.xpv** @PL_xiv_arenaroot, align 8, !tbaa !0
  store i64* null, i64** @PL_xiv_root, align 8, !tbaa !0
  %9 = load %struct.xpv** @PL_xnv_arenaroot, align 8, !tbaa !0
  %tobool13165 = icmp eq %struct.xpv* %9, null
  br i1 %tobool13165, label %for.end17, label %for.body14

for.body14:                                       ; preds = %for.end11, %for.body14
  %arena.1166 = phi %struct.xpv* [ %11, %for.body14 ], [ %9, %for.end11 ]
  %xpv_pv15 = getelementptr inbounds %struct.xpv* %arena.1166, i64 0, i32 0
  %10 = load i8** %xpv_pv15, align 8, !tbaa !0
  %11 = bitcast i8* %10 to %struct.xpv*
  %12 = bitcast %struct.xpv* %arena.1166 to i8*
  tail call void @Perl_safesysfree(i8* %12) #8
  %tobool13 = icmp eq i8* %10, null
  br i1 %tobool13, label %for.end17, label %for.body14

for.end17:                                        ; preds = %for.body14, %for.end11
  store %struct.xpv* null, %struct.xpv** @PL_xnv_arenaroot, align 8, !tbaa !0
  store double* null, double** @PL_xnv_root, align 8, !tbaa !0
  %13 = load %struct.xpv** @PL_xrv_arenaroot, align 8, !tbaa !0
  %tobool19163 = icmp eq %struct.xpv* %13, null
  br i1 %tobool19163, label %for.end23, label %for.body20

for.body20:                                       ; preds = %for.end17, %for.body20
  %arena.2164 = phi %struct.xpv* [ %15, %for.body20 ], [ %13, %for.end17 ]
  %xpv_pv21 = getelementptr inbounds %struct.xpv* %arena.2164, i64 0, i32 0
  %14 = load i8** %xpv_pv21, align 8, !tbaa !0
  %15 = bitcast i8* %14 to %struct.xpv*
  %16 = bitcast %struct.xpv* %arena.2164 to i8*
  tail call void @Perl_safesysfree(i8* %16) #8
  %tobool19 = icmp eq i8* %14, null
  br i1 %tobool19, label %for.end23, label %for.body20

for.end23:                                        ; preds = %for.body20, %for.end17
  store %struct.xpv* null, %struct.xpv** @PL_xrv_arenaroot, align 8, !tbaa !0
  store %struct.xrv* null, %struct.xrv** @PL_xrv_root, align 8, !tbaa !0
  %17 = load %struct.xpv** @PL_xpv_arenaroot, align 8, !tbaa !0
  %tobool25161 = icmp eq %struct.xpv* %17, null
  br i1 %tobool25161, label %for.end29, label %for.body26

for.body26:                                       ; preds = %for.end23, %for.body26
  %arena.3162 = phi %struct.xpv* [ %19, %for.body26 ], [ %17, %for.end23 ]
  %xpv_pv27 = getelementptr inbounds %struct.xpv* %arena.3162, i64 0, i32 0
  %18 = load i8** %xpv_pv27, align 8, !tbaa !0
  %19 = bitcast i8* %18 to %struct.xpv*
  %20 = bitcast %struct.xpv* %arena.3162 to i8*
  tail call void @Perl_safesysfree(i8* %20) #8
  %tobool25 = icmp eq i8* %18, null
  br i1 %tobool25, label %for.end29, label %for.body26

for.end29:                                        ; preds = %for.body26, %for.end23
  store %struct.xpv* null, %struct.xpv** @PL_xpv_arenaroot, align 8, !tbaa !0
  store %struct.xpv* null, %struct.xpv** @PL_xpv_root, align 8, !tbaa !0
  %21 = load %struct.xpviv** @PL_xpviv_arenaroot, align 8, !tbaa !0
  %tobool31159 = icmp eq %struct.xpviv* %21, null
  br i1 %tobool31159, label %for.end35, label %for.body32.lr.ph

for.body32.lr.ph:                                 ; preds = %for.end29
  %22 = bitcast %struct.xpviv* %21 to %struct.xpv*
  br label %for.body32

for.body32:                                       ; preds = %for.body32.lr.ph, %for.body32
  %arena.4160 = phi %struct.xpv* [ %22, %for.body32.lr.ph ], [ %24, %for.body32 ]
  %xpv_pv33 = getelementptr inbounds %struct.xpv* %arena.4160, i64 0, i32 0
  %23 = load i8** %xpv_pv33, align 8, !tbaa !0
  %24 = bitcast i8* %23 to %struct.xpv*
  %25 = bitcast %struct.xpv* %arena.4160 to i8*
  tail call void @Perl_safesysfree(i8* %25) #8
  %tobool31 = icmp eq i8* %23, null
  br i1 %tobool31, label %for.end35, label %for.body32

for.end35:                                        ; preds = %for.body32, %for.end29
  store %struct.xpviv* null, %struct.xpviv** @PL_xpviv_arenaroot, align 8, !tbaa !0
  store %struct.xpviv* null, %struct.xpviv** @PL_xpviv_root, align 8, !tbaa !0
  %26 = load %struct.xpvnv** @PL_xpvnv_arenaroot, align 8, !tbaa !0
  %tobool37157 = icmp eq %struct.xpvnv* %26, null
  br i1 %tobool37157, label %for.end41, label %for.body38.lr.ph

for.body38.lr.ph:                                 ; preds = %for.end35
  %27 = bitcast %struct.xpvnv* %26 to %struct.xpv*
  br label %for.body38

for.body38:                                       ; preds = %for.body38.lr.ph, %for.body38
  %arena.5158 = phi %struct.xpv* [ %27, %for.body38.lr.ph ], [ %29, %for.body38 ]
  %xpv_pv39 = getelementptr inbounds %struct.xpv* %arena.5158, i64 0, i32 0
  %28 = load i8** %xpv_pv39, align 8, !tbaa !0
  %29 = bitcast i8* %28 to %struct.xpv*
  %30 = bitcast %struct.xpv* %arena.5158 to i8*
  tail call void @Perl_safesysfree(i8* %30) #8
  %tobool37 = icmp eq i8* %28, null
  br i1 %tobool37, label %for.end41, label %for.body38

for.end41:                                        ; preds = %for.body38, %for.end35
  store %struct.xpvnv* null, %struct.xpvnv** @PL_xpvnv_arenaroot, align 8, !tbaa !0
  store %struct.xpvnv* null, %struct.xpvnv** @PL_xpvnv_root, align 8, !tbaa !0
  %31 = load %struct.xpvcv** @PL_xpvcv_arenaroot, align 8, !tbaa !0
  %tobool43155 = icmp eq %struct.xpvcv* %31, null
  br i1 %tobool43155, label %for.end47, label %for.body44.lr.ph

for.body44.lr.ph:                                 ; preds = %for.end41
  %32 = bitcast %struct.xpvcv* %31 to %struct.xpv*
  br label %for.body44

for.body44:                                       ; preds = %for.body44.lr.ph, %for.body44
  %arena.6156 = phi %struct.xpv* [ %32, %for.body44.lr.ph ], [ %34, %for.body44 ]
  %xpv_pv45 = getelementptr inbounds %struct.xpv* %arena.6156, i64 0, i32 0
  %33 = load i8** %xpv_pv45, align 8, !tbaa !0
  %34 = bitcast i8* %33 to %struct.xpv*
  %35 = bitcast %struct.xpv* %arena.6156 to i8*
  tail call void @Perl_safesysfree(i8* %35) #8
  %tobool43 = icmp eq i8* %33, null
  br i1 %tobool43, label %for.end47, label %for.body44

for.end47:                                        ; preds = %for.body44, %for.end41
  store %struct.xpvcv* null, %struct.xpvcv** @PL_xpvcv_arenaroot, align 8, !tbaa !0
  store %struct.xpvcv* null, %struct.xpvcv** @PL_xpvcv_root, align 8, !tbaa !0
  %36 = load %struct.xpvav** @PL_xpvav_arenaroot, align 8, !tbaa !0
  %tobool49153 = icmp eq %struct.xpvav* %36, null
  br i1 %tobool49153, label %for.end53, label %for.body50.lr.ph

for.body50.lr.ph:                                 ; preds = %for.end47
  %37 = bitcast %struct.xpvav* %36 to %struct.xpv*
  br label %for.body50

for.body50:                                       ; preds = %for.body50.lr.ph, %for.body50
  %arena.7154 = phi %struct.xpv* [ %37, %for.body50.lr.ph ], [ %39, %for.body50 ]
  %xpv_pv51 = getelementptr inbounds %struct.xpv* %arena.7154, i64 0, i32 0
  %38 = load i8** %xpv_pv51, align 8, !tbaa !0
  %39 = bitcast i8* %38 to %struct.xpv*
  %40 = bitcast %struct.xpv* %arena.7154 to i8*
  tail call void @Perl_safesysfree(i8* %40) #8
  %tobool49 = icmp eq i8* %38, null
  br i1 %tobool49, label %for.end53, label %for.body50

for.end53:                                        ; preds = %for.body50, %for.end47
  store %struct.xpvav* null, %struct.xpvav** @PL_xpvav_arenaroot, align 8, !tbaa !0
  store %struct.xpvav* null, %struct.xpvav** @PL_xpvav_root, align 8, !tbaa !0
  %41 = load %struct.xpvhv** @PL_xpvhv_arenaroot, align 8, !tbaa !0
  %tobool55151 = icmp eq %struct.xpvhv* %41, null
  br i1 %tobool55151, label %for.end59, label %for.body56.lr.ph

for.body56.lr.ph:                                 ; preds = %for.end53
  %42 = bitcast %struct.xpvhv* %41 to %struct.xpv*
  br label %for.body56

for.body56:                                       ; preds = %for.body56.lr.ph, %for.body56
  %arena.8152 = phi %struct.xpv* [ %42, %for.body56.lr.ph ], [ %44, %for.body56 ]
  %xpv_pv57 = getelementptr inbounds %struct.xpv* %arena.8152, i64 0, i32 0
  %43 = load i8** %xpv_pv57, align 8, !tbaa !0
  %44 = bitcast i8* %43 to %struct.xpv*
  %45 = bitcast %struct.xpv* %arena.8152 to i8*
  tail call void @Perl_safesysfree(i8* %45) #8
  %tobool55 = icmp eq i8* %43, null
  br i1 %tobool55, label %for.end59, label %for.body56

for.end59:                                        ; preds = %for.body56, %for.end53
  store %struct.xpvhv* null, %struct.xpvhv** @PL_xpvhv_arenaroot, align 8, !tbaa !0
  store %struct.xpvhv* null, %struct.xpvhv** @PL_xpvhv_root, align 8, !tbaa !0
  %46 = load %struct.xpvmg** @PL_xpvmg_arenaroot, align 8, !tbaa !0
  %tobool61149 = icmp eq %struct.xpvmg* %46, null
  br i1 %tobool61149, label %for.end65, label %for.body62.lr.ph

for.body62.lr.ph:                                 ; preds = %for.end59
  %47 = bitcast %struct.xpvmg* %46 to %struct.xpv*
  br label %for.body62

for.body62:                                       ; preds = %for.body62.lr.ph, %for.body62
  %arena.9150 = phi %struct.xpv* [ %47, %for.body62.lr.ph ], [ %49, %for.body62 ]
  %xpv_pv63 = getelementptr inbounds %struct.xpv* %arena.9150, i64 0, i32 0
  %48 = load i8** %xpv_pv63, align 8, !tbaa !0
  %49 = bitcast i8* %48 to %struct.xpv*
  %50 = bitcast %struct.xpv* %arena.9150 to i8*
  tail call void @Perl_safesysfree(i8* %50) #8
  %tobool61 = icmp eq i8* %48, null
  br i1 %tobool61, label %for.end65, label %for.body62

for.end65:                                        ; preds = %for.body62, %for.end59
  store %struct.xpvmg* null, %struct.xpvmg** @PL_xpvmg_arenaroot, align 8, !tbaa !0
  store %struct.xpvmg* null, %struct.xpvmg** @PL_xpvmg_root, align 8, !tbaa !0
  %51 = load %struct.xpvlv** @PL_xpvlv_arenaroot, align 8, !tbaa !0
  %tobool67147 = icmp eq %struct.xpvlv* %51, null
  br i1 %tobool67147, label %for.end71, label %for.body68.lr.ph

for.body68.lr.ph:                                 ; preds = %for.end65
  %52 = bitcast %struct.xpvlv* %51 to %struct.xpv*
  br label %for.body68

for.body68:                                       ; preds = %for.body68.lr.ph, %for.body68
  %arena.10148 = phi %struct.xpv* [ %52, %for.body68.lr.ph ], [ %54, %for.body68 ]
  %xpv_pv69 = getelementptr inbounds %struct.xpv* %arena.10148, i64 0, i32 0
  %53 = load i8** %xpv_pv69, align 8, !tbaa !0
  %54 = bitcast i8* %53 to %struct.xpv*
  %55 = bitcast %struct.xpv* %arena.10148 to i8*
  tail call void @Perl_safesysfree(i8* %55) #8
  %tobool67 = icmp eq i8* %53, null
  br i1 %tobool67, label %for.end71, label %for.body68

for.end71:                                        ; preds = %for.body68, %for.end65
  store %struct.xpvlv* null, %struct.xpvlv** @PL_xpvlv_arenaroot, align 8, !tbaa !0
  store %struct.xpvlv* null, %struct.xpvlv** @PL_xpvlv_root, align 8, !tbaa !0
  %56 = load %struct.xpvbm** @PL_xpvbm_arenaroot, align 8, !tbaa !0
  %tobool73145 = icmp eq %struct.xpvbm* %56, null
  br i1 %tobool73145, label %for.end77, label %for.body74.lr.ph

for.body74.lr.ph:                                 ; preds = %for.end71
  %57 = bitcast %struct.xpvbm* %56 to %struct.xpv*
  br label %for.body74

for.body74:                                       ; preds = %for.body74.lr.ph, %for.body74
  %arena.11146 = phi %struct.xpv* [ %57, %for.body74.lr.ph ], [ %59, %for.body74 ]
  %xpv_pv75 = getelementptr inbounds %struct.xpv* %arena.11146, i64 0, i32 0
  %58 = load i8** %xpv_pv75, align 8, !tbaa !0
  %59 = bitcast i8* %58 to %struct.xpv*
  %60 = bitcast %struct.xpv* %arena.11146 to i8*
  tail call void @Perl_safesysfree(i8* %60) #8
  %tobool73 = icmp eq i8* %58, null
  br i1 %tobool73, label %for.end77, label %for.body74

for.end77:                                        ; preds = %for.body74, %for.end71
  store %struct.xpvbm* null, %struct.xpvbm** @PL_xpvbm_arenaroot, align 8, !tbaa !0
  store %struct.xpvbm* null, %struct.xpvbm** @PL_xpvbm_root, align 8, !tbaa !0
  %61 = load %struct.xpv** @PL_he_arenaroot, align 8, !tbaa !0
  %tobool79143 = icmp eq %struct.xpv* %61, null
  br i1 %tobool79143, label %for.end83, label %for.body80

for.body80:                                       ; preds = %for.end77, %for.body80
  %arena.12144 = phi %struct.xpv* [ %63, %for.body80 ], [ %61, %for.end77 ]
  %xpv_pv81 = getelementptr inbounds %struct.xpv* %arena.12144, i64 0, i32 0
  %62 = load i8** %xpv_pv81, align 8, !tbaa !0
  %63 = bitcast i8* %62 to %struct.xpv*
  %64 = bitcast %struct.xpv* %arena.12144 to i8*
  tail call void @Perl_safesysfree(i8* %64) #8
  %tobool79 = icmp eq i8* %62, null
  br i1 %tobool79, label %for.end83, label %for.body80

for.end83:                                        ; preds = %for.body80, %for.end77
  store %struct.xpv* null, %struct.xpv** @PL_he_arenaroot, align 8, !tbaa !0
  store %struct.he* null, %struct.he** @PL_he_root, align 8, !tbaa !0
  %65 = load i8** @PL_nice_chunk, align 8, !tbaa !0
  %tobool84 = icmp eq i8* %65, null
  br i1 %tobool84, label %if.end86, label %if.then85

if.then85:                                        ; preds = %for.end83
  tail call void @Perl_safesysfree(i8* %65) #8
  br label %if.end86

if.end86:                                         ; preds = %for.end83, %if.then85
  store i8* null, i8** @PL_nice_chunk, align 8, !tbaa !0
  store i32 0, i32* @PL_nice_chunk_size, align 4, !tbaa !3
  store %struct.sv* null, %struct.sv** @PL_sv_arenaroot, align 8, !tbaa !0
  store %struct.sv* null, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  ret void
}

; Function Attrs: optsize
declare void @Perl_safesysfree(i8*) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_report_uninit() #0 {
entry:
  %0 = load %struct.op** @PL_op, align 8, !tbaa !0
  %tobool = icmp eq %struct.op* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %op_type = getelementptr inbounds %struct.op* %0, i64 0, i32 4
  %1 = load i16* %op_type, align 2, !tbaa !4
  %cmp = icmp eq i16 %1, 351
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %call = tail call i8* @Perl_custom_op_desc(%struct.op* %0) #8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %idxprom = zext i16 %1 to i64
  %arrayidx = getelementptr inbounds [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %2 = load i8** %arrayidx, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %2, %cond.false ]
  tail call void (i32, i8*, ...)* @Perl_warner(i32 41, i8* getelementptr inbounds ([0 x i8]* @PL_warn_uninit, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str, i64 0, i64 0), i8* %cond) #8
  br label %if.end

if.else:                                          ; preds = %entry
  tail call void (i32, i8*, ...)* @Perl_warner(i32 41, i8* getelementptr inbounds ([0 x i8]* @PL_warn_uninit, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0)) #8
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  ret void
}

; Function Attrs: optsize
declare void @Perl_warner(i32, i8*, ...) #2

; Function Attrs: optsize
declare i8* @Perl_custom_op_desc(%struct.op*) #2

; Function Attrs: nounwind optsize uwtable
define signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 %mt) #0 {
entry:
  %cmp = icmp eq i32 %mt, 4
  %sv_flags5.pre = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  br i1 %cmp, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %0 = load i32* %sv_flags5.pre, align 4, !tbaa !3
  %1 = and i32 %0, 9437184
  %2 = icmp eq i32 %1, 9437184
  br i1 %2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  br label %if.end

if.end:                                           ; preds = %entry, %land.lhs.true, %if.then
  %3 = load i32* %sv_flags5.pre, align 4, !tbaa !3
  %and6 = and i32 %3, 255
  %cmp7 = icmp eq i32 %and6, %mt
  br i1 %cmp7, label %return, label %if.end9

if.end9:                                          ; preds = %if.end
  %cmp10 = icmp ult i32 %mt, 5
  br i1 %cmp10, label %if.then11, label %if.end16

if.then11:                                        ; preds = %if.end9
  %and13 = and i32 %3, 2097152
  %tobool14 = icmp eq i32 %and13, 0
  br i1 %tobool14, label %if.end16, label %land.rhs

land.rhs:                                         ; preds = %if.then11
  %call = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre = load i32* %sv_flags5.pre, align 4, !tbaa !3
  br label %if.end16

if.end16:                                         ; preds = %land.rhs, %if.then11, %if.end9
  %4 = phi i32 [ %.pre, %land.rhs ], [ %3, %if.then11 ], [ %3, %if.end9 ]
  %and18 = and i32 %4, 255
  switch i32 %and18, label %sw.default [
    i32 0, label %sw.epilog
    i32 1, label %sw.bb
    i32 2, label %sw.bb26
    i32 3, label %sw.bb32
    i32 4, label %sw.bb35
    i32 5, label %sw.bb50
    i32 6, label %sw.bb62
    i32 7, label %sw.bb76
  ]

sw.bb:                                            ; preds = %if.end16
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %5 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %5, i64 24
  %6 = bitcast i8* %xiv_iv to i64*
  %7 = load i64* %6, align 8, !tbaa !5
  %8 = load i64** @PL_xiv_root, align 8, !tbaa !0
  %.c.i = ptrtoint i64* %8 to i64
  store i64 %.c.i, i64* %6, align 8, !tbaa !0
  store i64* %6, i64** @PL_xiv_root, align 8, !tbaa !0
  %cmp20 = icmp eq i32 %mt, 2
  br i1 %cmp20, label %sw.bb148, label %if.else

if.else:                                          ; preds = %sw.bb
  %.mt = select i1 %cmp10, i32 5, i32 %mt
  br label %sw.epilog

sw.bb26:                                          ; preds = %if.end16
  %sv_any27 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %9 = load i8** %sv_any27, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %9, i64 32
  %10 = bitcast i8* %xnv_nv to double*
  %11 = load double* %10, align 8, !tbaa !6
  %12 = load double** @PL_xnv_root, align 8, !tbaa !0
  %13 = bitcast i8* %xnv_nv to double**
  store double* %12, double** %13, align 8, !tbaa !0
  store double* %10, double** @PL_xnv_root, align 8, !tbaa !0
  %cmp29 = icmp ult i32 %mt, 6
  %.mt591 = select i1 %cmp29, i32 6, i32 %mt
  br label %sw.epilog

sw.bb32:                                          ; preds = %if.end16
  %sv_any33 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %14 = load i8** %sv_any33, align 8, !tbaa !0
  %15 = bitcast i8* %14 to %struct.xrv*
  %xrv_rv = bitcast i8* %14 to %struct.sv**
  %16 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %17 = bitcast %struct.sv* %16 to i8*
  %18 = load %struct.xrv** @PL_xrv_root, align 8, !tbaa !0
  %19 = bitcast %struct.xrv* %18 to %struct.sv*
  store %struct.sv* %19, %struct.sv** %xrv_rv, align 8, !tbaa !0
  store %struct.xrv* %15, %struct.xrv** @PL_xrv_root, align 8, !tbaa !0
  br label %sw.epilog

sw.bb35:                                          ; preds = %if.end16
  %sv_any36 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %20 = load i8** %sv_any36, align 8, !tbaa !0
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_pv = bitcast i8* %20 to i8**
  %22 = load i8** %xpv_pv, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %20, i64 8
  %23 = bitcast i8* %xpv_cur to i64*
  %24 = load i64* %23, align 8, !tbaa !5
  %conv = trunc i64 %24 to i32
  %xpv_len = getelementptr inbounds i8* %20, i64 16
  %25 = bitcast i8* %xpv_len to i64*
  %26 = load i64* %25, align 8, !tbaa !5
  %conv39 = trunc i64 %26 to i32
  %27 = load %struct.xpv** @PL_xpv_root, align 8, !tbaa !0
  %28 = bitcast %struct.xpv* %27 to i8*
  store i8* %28, i8** %xpv_pv, align 8, !tbaa !0
  store %struct.xpv* %21, %struct.xpv** @PL_xpv_root, align 8, !tbaa !0
  %cmp41 = icmp ult i32 %mt, 2
  br i1 %cmp41, label %sw.bb119, label %if.else44

if.else44:                                        ; preds = %sw.bb35
  %cmp45 = icmp eq i32 %mt, 2
  %.mt592 = select i1 %cmp45, i32 6, i32 %mt
  br label %sw.epilog

sw.bb50:                                          ; preds = %if.end16
  %sv_any51 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %29 = load i8** %sv_any51, align 8, !tbaa !0
  %xpv_pv52 = bitcast i8* %29 to i8**
  %30 = load i8** %xpv_pv52, align 8, !tbaa !0
  %xpv_cur54 = getelementptr inbounds i8* %29, i64 8
  %31 = bitcast i8* %xpv_cur54 to i64*
  %32 = load i64* %31, align 8, !tbaa !5
  %conv55 = trunc i64 %32 to i32
  %xpv_len57 = getelementptr inbounds i8* %29, i64 16
  %33 = bitcast i8* %xpv_len57 to i64*
  %34 = load i64* %33, align 8, !tbaa !5
  %conv58 = trunc i64 %34 to i32
  %35 = bitcast i8* %29 to %struct.xpviv*
  %xiv_iv60 = getelementptr inbounds i8* %29, i64 24
  %36 = bitcast i8* %xiv_iv60 to i64*
  %37 = load i64* %36, align 8, !tbaa !5
  %38 = load %struct.xpviv** @PL_xpviv_root, align 8, !tbaa !0
  %39 = bitcast %struct.xpviv* %38 to i8*
  store i8* %39, i8** %xpv_pv52, align 8, !tbaa !0
  store %struct.xpviv* %35, %struct.xpviv** @PL_xpviv_root, align 8, !tbaa !0
  br label %sw.epilog

sw.bb62:                                          ; preds = %if.end16
  %sv_any63 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %40 = load i8** %sv_any63, align 8, !tbaa !0
  %xpv_pv64 = bitcast i8* %40 to i8**
  %41 = load i8** %xpv_pv64, align 8, !tbaa !0
  %xpv_cur66 = getelementptr inbounds i8* %40, i64 8
  %42 = bitcast i8* %xpv_cur66 to i64*
  %43 = load i64* %42, align 8, !tbaa !5
  %conv67 = trunc i64 %43 to i32
  %xpv_len69 = getelementptr inbounds i8* %40, i64 16
  %44 = bitcast i8* %xpv_len69 to i64*
  %45 = load i64* %44, align 8, !tbaa !5
  %conv70 = trunc i64 %45 to i32
  %xiv_iv72 = getelementptr inbounds i8* %40, i64 24
  %46 = bitcast i8* %xiv_iv72 to i64*
  %47 = load i64* %46, align 8, !tbaa !5
  %48 = bitcast i8* %40 to %struct.xpvnv*
  %xnv_nv74 = getelementptr inbounds i8* %40, i64 32
  %49 = bitcast i8* %xnv_nv74 to double*
  %50 = load double* %49, align 8, !tbaa !6
  %51 = load %struct.xpvnv** @PL_xpvnv_root, align 8, !tbaa !0
  %52 = bitcast %struct.xpvnv* %51 to i8*
  store i8* %52, i8** %xpv_pv64, align 8, !tbaa !0
  store %struct.xpvnv* %48, %struct.xpvnv** @PL_xpvnv_root, align 8, !tbaa !0
  br label %sw.epilog

sw.bb76:                                          ; preds = %if.end16
  %sv_any77 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %53 = load i8** %sv_any77, align 8, !tbaa !0
  %xpv_pv78 = bitcast i8* %53 to i8**
  %54 = load i8** %xpv_pv78, align 8, !tbaa !0
  %xpv_cur80 = getelementptr inbounds i8* %53, i64 8
  %55 = bitcast i8* %xpv_cur80 to i64*
  %56 = load i64* %55, align 8, !tbaa !5
  %conv81 = trunc i64 %56 to i32
  %xpv_len83 = getelementptr inbounds i8* %53, i64 16
  %57 = bitcast i8* %xpv_len83 to i64*
  %58 = load i64* %57, align 8, !tbaa !5
  %conv84 = trunc i64 %58 to i32
  %xiv_iv86 = getelementptr inbounds i8* %53, i64 24
  %59 = bitcast i8* %xiv_iv86 to i64*
  %60 = load i64* %59, align 8, !tbaa !5
  %xnv_nv88 = getelementptr inbounds i8* %53, i64 32
  %61 = bitcast i8* %xnv_nv88 to double*
  %62 = load double* %61, align 8, !tbaa !6
  %63 = bitcast i8* %53 to %struct.xpvmg*
  %xmg_magic = getelementptr inbounds i8* %53, i64 40
  %64 = bitcast i8* %xmg_magic to %struct.magic**
  %65 = load %struct.magic** %64, align 8, !tbaa !0
  %xmg_stash = getelementptr inbounds i8* %53, i64 48
  %66 = bitcast i8* %xmg_stash to %struct.hv**
  %67 = load %struct.hv** %66, align 8, !tbaa !0
  %68 = load %struct.xpvmg** @PL_xpvmg_root, align 8, !tbaa !0
  %69 = bitcast %struct.xpvmg* %68 to i8*
  store i8* %69, i8** %xpv_pv78, align 8, !tbaa !0
  store %struct.xpvmg* %63, %struct.xpvmg** @PL_xpvmg_root, align 8, !tbaa !0
  br label %sw.epilog

sw.default:                                       ; preds = %if.end16
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([34 x i8]* @.str2, i64 0, i64 0)) #8
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else44, %sw.bb26, %if.else, %sw.default, %sw.bb76, %sw.bb62, %sw.bb50, %sw.bb32, %if.end16
  %mt.addr.0 = phi i32 [ %mt, %sw.default ], [ %mt, %sw.bb76 ], [ %mt, %sw.bb62 ], [ %mt, %sw.bb50 ], [ %mt, %sw.bb32 ], [ %mt, %if.end16 ], [ %.mt, %if.else ], [ %.mt591, %sw.bb26 ], [ %.mt592, %if.else44 ]
  %pv.0 = phi i8* [ null, %sw.default ], [ %54, %sw.bb76 ], [ %41, %sw.bb62 ], [ %30, %sw.bb50 ], [ %17, %sw.bb32 ], [ null, %if.end16 ], [ null, %if.else ], [ null, %sw.bb26 ], [ %22, %if.else44 ]
  %cur.0 = phi i32 [ 0, %sw.default ], [ %conv81, %sw.bb76 ], [ %conv67, %sw.bb62 ], [ %conv55, %sw.bb50 ], [ 0, %sw.bb32 ], [ 0, %if.end16 ], [ 0, %if.else ], [ 0, %sw.bb26 ], [ %conv, %if.else44 ]
  %len.0 = phi i32 [ 0, %sw.default ], [ %conv84, %sw.bb76 ], [ %conv70, %sw.bb62 ], [ %conv58, %sw.bb50 ], [ 0, %sw.bb32 ], [ 0, %if.end16 ], [ 0, %if.else ], [ 0, %sw.bb26 ], [ %conv39, %if.else44 ]
  %iv.0 = phi i64 [ 0, %sw.default ], [ %60, %sw.bb76 ], [ %47, %sw.bb62 ], [ %37, %sw.bb50 ], [ 0, %sw.bb32 ], [ 0, %if.end16 ], [ %7, %if.else ], [ 0, %sw.bb26 ], [ 0, %if.else44 ]
  %nv.0 = phi double [ 0.000000e+00, %sw.default ], [ %62, %sw.bb76 ], [ %50, %sw.bb62 ], [ 0.000000e+00, %sw.bb50 ], [ 0.000000e+00, %sw.bb32 ], [ 0.000000e+00, %if.end16 ], [ 0.000000e+00, %if.else ], [ %11, %sw.bb26 ], [ 0.000000e+00, %if.else44 ]
  %magic.0 = phi %struct.magic* [ null, %sw.default ], [ %65, %sw.bb76 ], [ null, %sw.bb62 ], [ null, %sw.bb50 ], [ null, %sw.bb32 ], [ null, %if.end16 ], [ null, %if.else ], [ null, %sw.bb26 ], [ null, %if.else44 ]
  %stash.0 = phi %struct.hv* [ null, %sw.default ], [ %67, %sw.bb76 ], [ null, %sw.bb62 ], [ null, %sw.bb50 ], [ null, %sw.bb32 ], [ null, %if.end16 ], [ null, %if.else ], [ null, %sw.bb26 ], [ null, %if.else44 ]
  switch i32 %mt.addr.0, label %sw.epilog354 [
    i32 0, label %sw.bb92
    i32 1, label %sw.bb93
    i32 2, label %sw.bb98
    i32 3, label %sw.bb103
    i32 4, label %sw.bb108
    i32 5, label %sw.bb119
    i32 6, label %sw.bb148
    i32 7, label %sw.bb163
    i32 9, label %sw.bb182
    i32 10, label %sw.bb205
    i32 11, label %sw.bb226
    i32 12, label %sw.bb247
    i32 13, label %sw.bb267
    i32 8, label %sw.bb291
    i32 14, label %sw.bb313
    i32 15, label %sw.bb333
  ]

sw.bb92:                                          ; preds = %sw.epilog
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([23 x i8]* @.str3, i64 0, i64 0)) #8
  br label %sw.bb93

sw.bb93:                                          ; preds = %sw.epilog, %sw.bb92
  %70 = load i64** @PL_xiv_root, align 8, !tbaa !0
  %tobool.i = icmp eq i64* %70, null
  br i1 %tobool.i, label %if.then.i, label %S_new_xiv.exit

if.then.i:                                        ; preds = %sw.bb93
  %call.i.i = tail call i8* @Perl_safesysmalloc(i64 4080) #8
  %71 = bitcast i8* %call.i.i to %struct.xpv*
  %72 = load %struct.xpv** @PL_xiv_arenaroot, align 8, !tbaa !0
  %73 = bitcast %struct.xpv* %72 to i8*
  %xpv_pv.i.i = bitcast i8* %call.i.i to i8**
  store i8* %73, i8** %xpv_pv.i.i, align 8, !tbaa !0
  store %struct.xpv* %71, %struct.xpv** @PL_xiv_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i = getelementptr inbounds i8* %call.i.i, i64 4072
  %74 = bitcast i8* %arrayidx.i.i to i64*
  %add.ptr.i.i = getelementptr inbounds i8* %call.i.i, i64 24
  %75 = bitcast i8* %add.ptr.i.i to i64*
  store i64* %75, i64** @PL_xiv_root, align 8, !tbaa !0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then.i
  %xiv.011.i.i = phi i64* [ %75, %if.then.i ], [ %add.ptr1.i.i, %while.body.i.i ]
  %add.ptr1.i.i = getelementptr inbounds i64* %xiv.011.i.i, i64 1
  %add.ptr1.c.i.i = ptrtoint i64* %add.ptr1.i.i to i64
  store i64 %add.ptr1.c.i.i, i64* %xiv.011.i.i, align 8, !tbaa !0
  %cmp.i.i = icmp ult i64* %add.ptr1.i.i, %74
  br i1 %cmp.i.i, label %while.body.i.i, label %S_more_xiv.exit.i

S_more_xiv.exit.i:                                ; preds = %while.body.i.i
  store i64 0, i64* %add.ptr1.i.i, align 8, !tbaa !0
  %.pre.i = load i64** @PL_xiv_root, align 8, !tbaa !0
  br label %S_new_xiv.exit

S_new_xiv.exit:                                   ; preds = %sw.bb93, %S_more_xiv.exit.i
  %76 = phi i64* [ %70, %sw.bb93 ], [ %.pre.i, %S_more_xiv.exit.i ]
  %77 = bitcast i64* %76 to i64**
  %78 = load i64** %77, align 8, !tbaa !0
  store i64* %78, i64** @PL_xiv_root, align 8, !tbaa !0
  %add.ptr2.i = getelementptr inbounds i64* %76, i64 -3
  %79 = bitcast i64* %add.ptr2.i to i8*
  %sv_any95 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %79, i8** %sv_any95, align 8, !tbaa !0
  store i64 %iv.0, i64* %76, align 8, !tbaa !5
  br label %sw.epilog354

sw.bb98:                                          ; preds = %sw.epilog
  %80 = load double** @PL_xnv_root, align 8, !tbaa !0
  %tobool.i597 = icmp eq double* %80, null
  br i1 %tobool.i597, label %if.then.i602, label %S_new_xnv.exit

if.then.i602:                                     ; preds = %sw.bb98
  %call.i.i598 = tail call i8* @Perl_safesysmalloc(i64 4080) #8
  %81 = bitcast i8* %call.i.i598 to %struct.xpv*
  %82 = load %struct.xpv** @PL_xnv_arenaroot, align 8, !tbaa !0
  %83 = bitcast %struct.xpv* %82 to i8*
  %xpv_pv.i.i599 = bitcast i8* %call.i.i598 to i8**
  store i8* %83, i8** %xpv_pv.i.i599, align 8, !tbaa !0
  store %struct.xpv* %81, %struct.xpv** @PL_xnv_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i600 = getelementptr inbounds i8* %call.i.i598, i64 4072
  %84 = bitcast i8* %arrayidx.i.i600 to double*
  %add.ptr.i.i601 = getelementptr inbounds i8* %call.i.i598, i64 32
  %85 = bitcast i8* %add.ptr.i.i601 to double*
  store double* %85, double** @PL_xnv_root, align 8, !tbaa !0
  br label %while.body.i.i605

while.body.i.i605:                                ; preds = %while.body.i.i605, %if.then.i602
  %xnv.011.i.i = phi double* [ %85, %if.then.i602 ], [ %add.ptr1.i.i603, %while.body.i.i605 ]
  %add.ptr1.i.i603 = getelementptr inbounds double* %xnv.011.i.i, i64 1
  %86 = bitcast double* %xnv.011.i.i to double**
  store double* %add.ptr1.i.i603, double** %86, align 8, !tbaa !0
  %cmp.i.i604 = icmp ult double* %add.ptr1.i.i603, %84
  br i1 %cmp.i.i604, label %while.body.i.i605, label %S_more_xnv.exit.i

S_more_xnv.exit.i:                                ; preds = %while.body.i.i605
  %87 = bitcast double* %add.ptr1.i.i603 to double**
  store double* null, double** %87, align 8, !tbaa !0
  %.pre.i606 = load double** @PL_xnv_root, align 8, !tbaa !0
  br label %S_new_xnv.exit

S_new_xnv.exit:                                   ; preds = %sw.bb98, %S_more_xnv.exit.i
  %88 = phi double* [ %80, %sw.bb98 ], [ %.pre.i606, %S_more_xnv.exit.i ]
  %89 = bitcast double* %88 to double**
  %90 = load double** %89, align 8, !tbaa !0
  store double* %90, double** @PL_xnv_root, align 8, !tbaa !0
  %add.ptr2.i607 = getelementptr inbounds double* %88, i64 -4
  %91 = bitcast double* %add.ptr2.i607 to i8*
  %sv_any100 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %91, i8** %sv_any100, align 8, !tbaa !0
  store double %nv.0, double* %88, align 8, !tbaa !6
  br label %sw.epilog354

sw.bb103:                                         ; preds = %sw.epilog
  %92 = load %struct.xrv** @PL_xrv_root, align 8, !tbaa !0
  %tobool.i608 = icmp eq %struct.xrv* %92, null
  br i1 %tobool.i608, label %if.then.i613, label %S_new_xrv.exit

if.then.i613:                                     ; preds = %sw.bb103
  %call.i.i609 = tail call i8* @Perl_safesysmalloc(i64 4080) #8
  %93 = bitcast i8* %call.i.i609 to %struct.xpv*
  %94 = load %struct.xpv** @PL_xrv_arenaroot, align 8, !tbaa !0
  %95 = bitcast %struct.xpv* %94 to i8*
  %xpv_pv.i.i610 = bitcast i8* %call.i.i609 to i8**
  store i8* %95, i8** %xpv_pv.i.i610, align 8, !tbaa !0
  store %struct.xpv* %93, %struct.xpv** @PL_xrv_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i611 = getelementptr inbounds i8* %call.i.i609, i64 4072
  %96 = bitcast i8* %arrayidx.i.i611 to %struct.xrv*
  %add.ptr.i.i612 = getelementptr inbounds i8* %call.i.i609, i64 24
  %97 = bitcast i8* %add.ptr.i.i612 to %struct.xrv*
  store %struct.xrv* %97, %struct.xrv** @PL_xrv_root, align 8, !tbaa !0
  br label %while.body.i.i616

while.body.i.i616:                                ; preds = %while.body.i.i616, %if.then.i613
  %xrv.012.i.i = phi %struct.xrv* [ %97, %if.then.i613 ], [ %add.ptr1.i.i614, %while.body.i.i616 ]
  %add.ptr1.i.i614 = getelementptr inbounds %struct.xrv* %xrv.012.i.i, i64 1
  %98 = bitcast %struct.xrv* %add.ptr1.i.i614 to %struct.sv*
  %xrv_rv.i.i = getelementptr inbounds %struct.xrv* %xrv.012.i.i, i64 0, i32 0
  store %struct.sv* %98, %struct.sv** %xrv_rv.i.i, align 8, !tbaa !0
  %cmp.i.i615 = icmp ult %struct.xrv* %add.ptr1.i.i614, %96
  br i1 %cmp.i.i615, label %while.body.i.i616, label %S_more_xrv.exit.i

S_more_xrv.exit.i:                                ; preds = %while.body.i.i616
  %xrv_rv2.i.i = getelementptr inbounds %struct.xrv* %add.ptr1.i.i614, i64 0, i32 0
  store %struct.sv* null, %struct.sv** %xrv_rv2.i.i, align 8, !tbaa !0
  %.pre.i617 = load %struct.xrv** @PL_xrv_root, align 8, !tbaa !0
  br label %S_new_xrv.exit

S_new_xrv.exit:                                   ; preds = %sw.bb103, %S_more_xrv.exit.i
  %99 = phi %struct.xrv* [ %92, %sw.bb103 ], [ %.pre.i617, %S_more_xrv.exit.i ]
  %xrv_rv.i618 = getelementptr inbounds %struct.xrv* %99, i64 0, i32 0
  %100 = load %struct.sv** %xrv_rv.i618, align 8, !tbaa !0
  %101 = bitcast %struct.sv* %100 to %struct.xrv*
  store %struct.xrv* %101, %struct.xrv** @PL_xrv_root, align 8, !tbaa !0
  %102 = bitcast %struct.xrv* %99 to i8*
  %sv_any105 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %102, i8** %sv_any105, align 8, !tbaa !0
  %103 = bitcast i8* %pv.0 to %struct.sv*
  store %struct.sv* %103, %struct.sv** %xrv_rv.i618, align 8, !tbaa !0
  br label %sw.epilog354

sw.bb108:                                         ; preds = %sw.epilog
  %104 = load %struct.xpv** @PL_xpv_root, align 8, !tbaa !0
  %tobool.i619 = icmp eq %struct.xpv* %104, null
  br i1 %tobool.i619, label %if.then.i623, label %S_new_xpv.exit

if.then.i623:                                     ; preds = %sw.bb108
  %call.i.i620 = tail call i8* @Perl_safesysmalloc(i64 4080) #8
  %105 = bitcast i8* %call.i.i620 to %struct.xpv*
  %106 = load %struct.xpv** @PL_xpv_arenaroot, align 8, !tbaa !0
  %107 = bitcast %struct.xpv* %106 to i8*
  %xpv_pv.i.i621 = bitcast i8* %call.i.i620 to i8**
  store i8* %107, i8** %xpv_pv.i.i621, align 8, !tbaa !0
  store %struct.xpv* %105, %struct.xpv** @PL_xpv_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i622 = getelementptr inbounds i8* %call.i.i620, i64 4056
  %108 = bitcast i8* %arrayidx.i.i622 to %struct.xpv*
  %incdec.ptr.i.i = getelementptr inbounds i8* %call.i.i620, i64 24
  %109 = bitcast i8* %incdec.ptr.i.i to %struct.xpv*
  store %struct.xpv* %109, %struct.xpv** @PL_xpv_root, align 8, !tbaa !0
  br label %while.body.i.i626

while.body.i.i626:                                ; preds = %while.body.i.i626, %if.then.i623
  %xpv.012.i.i = phi %struct.xpv* [ %109, %if.then.i623 ], [ %add.ptr.i.i624, %while.body.i.i626 ]
  %add.ptr.i.i624 = getelementptr inbounds %struct.xpv* %xpv.012.i.i, i64 1
  %110 = bitcast %struct.xpv* %add.ptr.i.i624 to i8*
  %xpv_pv1.i.i = getelementptr inbounds %struct.xpv* %xpv.012.i.i, i64 0, i32 0
  store i8* %110, i8** %xpv_pv1.i.i, align 8, !tbaa !0
  %cmp.i.i625 = icmp ult %struct.xpv* %add.ptr.i.i624, %108
  br i1 %cmp.i.i625, label %while.body.i.i626, label %S_more_xpv.exit.i

S_more_xpv.exit.i:                                ; preds = %while.body.i.i626
  %xpv_pv3.i.i = getelementptr inbounds %struct.xpv* %add.ptr.i.i624, i64 0, i32 0
  store i8* null, i8** %xpv_pv3.i.i, align 8, !tbaa !0
  %.pre.i627 = load %struct.xpv** @PL_xpv_root, align 8, !tbaa !0
  br label %S_new_xpv.exit

S_new_xpv.exit:                                   ; preds = %sw.bb108, %S_more_xpv.exit.i
  %111 = phi %struct.xpv* [ %104, %sw.bb108 ], [ %.pre.i627, %S_more_xpv.exit.i ]
  %xpv_pv.i628 = getelementptr inbounds %struct.xpv* %111, i64 0, i32 0
  %112 = load i8** %xpv_pv.i628, align 8, !tbaa !0
  %113 = bitcast i8* %112 to %struct.xpv*
  store %struct.xpv* %113, %struct.xpv** @PL_xpv_root, align 8, !tbaa !0
  %114 = bitcast %struct.xpv* %111 to i8*
  %sv_any110 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %114, i8** %sv_any110, align 8, !tbaa !0
  store i8* %pv.0, i8** %xpv_pv.i628, align 8, !tbaa !0
  %conv113 = zext i32 %cur.0 to i64
  %115 = load i8** %sv_any110, align 8, !tbaa !0
  %xpv_cur115 = getelementptr inbounds i8* %115, i64 8
  %116 = bitcast i8* %xpv_cur115 to i64*
  store i64 %conv113, i64* %116, align 8, !tbaa !5
  %conv116 = zext i32 %len.0 to i64
  %xpv_len118 = getelementptr inbounds i8* %115, i64 16
  %117 = bitcast i8* %xpv_len118 to i64*
  store i64 %conv116, i64* %117, align 8, !tbaa !5
  br label %sw.epilog354

sw.bb119:                                         ; preds = %sw.epilog, %sw.bb35
  %iv.0717 = phi i64 [ 0, %sw.bb35 ], [ %iv.0, %sw.epilog ]
  %len.0716 = phi i32 [ %conv39, %sw.bb35 ], [ %len.0, %sw.epilog ]
  %cur.0715 = phi i32 [ %conv, %sw.bb35 ], [ %cur.0, %sw.epilog ]
  %pv.0714 = phi i8* [ %22, %sw.bb35 ], [ %pv.0, %sw.epilog ]
  %118 = load %struct.xpviv** @PL_xpviv_root, align 8, !tbaa !0
  %tobool.i629 = icmp eq %struct.xpviv* %118, null
  br i1 %tobool.i629, label %if.then.i634, label %S_new_xpviv.exit

if.then.i634:                                     ; preds = %sw.bb119
  %call.i.i630 = tail call i8* @Perl_safesysmalloc(i64 4064) #8
  %119 = bitcast i8* %call.i.i630 to %struct.xpviv*
  %120 = load %struct.xpviv** @PL_xpviv_arenaroot, align 8, !tbaa !0
  %121 = bitcast %struct.xpviv* %120 to i8*
  %xpv_pv.i.i631 = bitcast i8* %call.i.i630 to i8**
  store i8* %121, i8** %xpv_pv.i.i631, align 8, !tbaa !0
  store %struct.xpviv* %119, %struct.xpviv** @PL_xpviv_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i632 = getelementptr inbounds i8* %call.i.i630, i64 4032
  %122 = bitcast i8* %arrayidx.i.i632 to %struct.xpviv*
  %incdec.ptr.i.i633 = getelementptr inbounds i8* %call.i.i630, i64 32
  %123 = bitcast i8* %incdec.ptr.i.i633 to %struct.xpviv*
  store %struct.xpviv* %123, %struct.xpviv** @PL_xpviv_root, align 8, !tbaa !0
  br label %while.body.i.i638

while.body.i.i638:                                ; preds = %while.body.i.i638, %if.then.i634
  %xpviv.012.i.i = phi %struct.xpviv* [ %123, %if.then.i634 ], [ %add.ptr.i.i635, %while.body.i.i638 ]
  %add.ptr.i.i635 = getelementptr inbounds %struct.xpviv* %xpviv.012.i.i, i64 1
  %124 = bitcast %struct.xpviv* %add.ptr.i.i635 to i8*
  %xpv_pv1.i.i636 = getelementptr inbounds %struct.xpviv* %xpviv.012.i.i, i64 0, i32 0
  store i8* %124, i8** %xpv_pv1.i.i636, align 8, !tbaa !0
  %cmp.i.i637 = icmp ult %struct.xpviv* %add.ptr.i.i635, %122
  br i1 %cmp.i.i637, label %while.body.i.i638, label %S_more_xpviv.exit.i

S_more_xpviv.exit.i:                              ; preds = %while.body.i.i638
  %xpv_pv3.i.i639 = getelementptr inbounds %struct.xpviv* %add.ptr.i.i635, i64 0, i32 0
  store i8* null, i8** %xpv_pv3.i.i639, align 8, !tbaa !0
  %.pre.i640 = load %struct.xpviv** @PL_xpviv_root, align 8, !tbaa !0
  br label %S_new_xpviv.exit

S_new_xpviv.exit:                                 ; preds = %sw.bb119, %S_more_xpviv.exit.i
  %125 = phi %struct.xpviv* [ %.pre.i640, %S_more_xpviv.exit.i ], [ %118, %sw.bb119 ]
  %xpv_pv.i641 = getelementptr inbounds %struct.xpviv* %125, i64 0, i32 0
  %126 = load i8** %xpv_pv.i641, align 8, !tbaa !0
  %127 = bitcast i8* %126 to %struct.xpviv*
  store %struct.xpviv* %127, %struct.xpviv** @PL_xpviv_root, align 8, !tbaa !0
  %128 = bitcast %struct.xpviv* %125 to i8*
  %sv_any121 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %128, i8** %sv_any121, align 8, !tbaa !0
  store i8* %pv.0714, i8** %xpv_pv.i641, align 8, !tbaa !0
  %conv124 = zext i32 %cur.0715 to i64
  %129 = load i8** %sv_any121, align 8, !tbaa !0
  %xpv_cur126 = getelementptr inbounds i8* %129, i64 8
  %130 = bitcast i8* %xpv_cur126 to i64*
  store i64 %conv124, i64* %130, align 8, !tbaa !5
  %conv127 = zext i32 %len.0716 to i64
  %xpv_len129 = getelementptr inbounds i8* %129, i64 16
  %131 = bitcast i8* %xpv_len129 to i64*
  store i64 %conv127, i64* %131, align 8, !tbaa !5
  %xiv_iv131 = getelementptr inbounds i8* %129, i64 24
  %132 = bitcast i8* %xiv_iv131 to i64*
  store i64 %iv.0717, i64* %132, align 8, !tbaa !5
  %133 = load i32* %sv_flags5.pre, align 4, !tbaa !3
  %and133 = and i32 %133, 196608
  %tobool134 = icmp eq i32 %and133, 0
  br i1 %tobool134, label %if.end145, label %if.then135

if.then135:                                       ; preds = %S_new_xpviv.exit
  %and137 = and i32 %133, 2097152
  %tobool138 = icmp eq i32 %and137, 0
  br i1 %tobool138, label %land.end142, label %land.rhs139

land.rhs139:                                      ; preds = %if.then135
  %call140 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre727 = load i32* %sv_flags5.pre, align 4, !tbaa !3
  br label %land.end142

land.end142:                                      ; preds = %if.then135, %land.rhs139
  %134 = phi i32 [ %133, %if.then135 ], [ %.pre727, %land.rhs139 ]
  %or = or i32 %134, 16842752
  store i32 %or, i32* %sv_flags5.pre, align 4, !tbaa !3
  br label %if.end145

if.end145:                                        ; preds = %S_new_xpviv.exit, %land.end142
  %135 = phi i32 [ %133, %S_new_xpviv.exit ], [ %or, %land.end142 ]
  %and147 = and i32 %135, -33685505
  store i32 %and147, i32* %sv_flags5.pre, align 4, !tbaa !3
  br label %sw.epilog354

sw.bb148:                                         ; preds = %sw.epilog, %sw.bb
  %nv.0724 = phi double [ 0.000000e+00, %sw.bb ], [ %nv.0, %sw.epilog ]
  %iv.0723 = phi i64 [ %7, %sw.bb ], [ %iv.0, %sw.epilog ]
  %len.0722 = phi i32 [ 0, %sw.bb ], [ %len.0, %sw.epilog ]
  %cur.0721 = phi i32 [ 0, %sw.bb ], [ %cur.0, %sw.epilog ]
  %pv.0720 = phi i8* [ null, %sw.bb ], [ %pv.0, %sw.epilog ]
  %136 = load %struct.xpvnv** @PL_xpvnv_root, align 8, !tbaa !0
  %tobool.i642 = icmp eq %struct.xpvnv* %136, null
  br i1 %tobool.i642, label %if.then.i647, label %S_new_xpvnv.exit

if.then.i647:                                     ; preds = %sw.bb148
  %call.i.i643 = tail call i8* @Perl_safesysmalloc(i64 4080) #8
  %137 = bitcast i8* %call.i.i643 to %struct.xpvnv*
  %138 = load %struct.xpvnv** @PL_xpvnv_arenaroot, align 8, !tbaa !0
  %139 = bitcast %struct.xpvnv* %138 to i8*
  %xpv_pv.i.i644 = bitcast i8* %call.i.i643 to i8**
  store i8* %139, i8** %xpv_pv.i.i644, align 8, !tbaa !0
  store %struct.xpvnv* %137, %struct.xpvnv** @PL_xpvnv_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i645 = getelementptr inbounds i8* %call.i.i643, i64 4040
  %140 = bitcast i8* %arrayidx.i.i645 to %struct.xpvnv*
  %incdec.ptr.i.i646 = getelementptr inbounds i8* %call.i.i643, i64 40
  %141 = bitcast i8* %incdec.ptr.i.i646 to %struct.xpvnv*
  store %struct.xpvnv* %141, %struct.xpvnv** @PL_xpvnv_root, align 8, !tbaa !0
  br label %while.body.i.i651

while.body.i.i651:                                ; preds = %while.body.i.i651, %if.then.i647
  %xpvnv.012.i.i = phi %struct.xpvnv* [ %141, %if.then.i647 ], [ %add.ptr.i.i648, %while.body.i.i651 ]
  %add.ptr.i.i648 = getelementptr inbounds %struct.xpvnv* %xpvnv.012.i.i, i64 1
  %142 = bitcast %struct.xpvnv* %add.ptr.i.i648 to i8*
  %xpv_pv1.i.i649 = getelementptr inbounds %struct.xpvnv* %xpvnv.012.i.i, i64 0, i32 0
  store i8* %142, i8** %xpv_pv1.i.i649, align 8, !tbaa !0
  %cmp.i.i650 = icmp ult %struct.xpvnv* %add.ptr.i.i648, %140
  br i1 %cmp.i.i650, label %while.body.i.i651, label %S_more_xpvnv.exit.i

S_more_xpvnv.exit.i:                              ; preds = %while.body.i.i651
  %xpv_pv3.i.i652 = getelementptr inbounds %struct.xpvnv* %add.ptr.i.i648, i64 0, i32 0
  store i8* null, i8** %xpv_pv3.i.i652, align 8, !tbaa !0
  %.pre.i653 = load %struct.xpvnv** @PL_xpvnv_root, align 8, !tbaa !0
  br label %S_new_xpvnv.exit

S_new_xpvnv.exit:                                 ; preds = %sw.bb148, %S_more_xpvnv.exit.i
  %143 = phi %struct.xpvnv* [ %136, %sw.bb148 ], [ %.pre.i653, %S_more_xpvnv.exit.i ]
  %xpv_pv.i654 = getelementptr inbounds %struct.xpvnv* %143, i64 0, i32 0
  %144 = load i8** %xpv_pv.i654, align 8, !tbaa !0
  %145 = bitcast i8* %144 to %struct.xpvnv*
  store %struct.xpvnv* %145, %struct.xpvnv** @PL_xpvnv_root, align 8, !tbaa !0
  %146 = bitcast %struct.xpvnv* %143 to i8*
  %sv_any150 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %146, i8** %sv_any150, align 8, !tbaa !0
  store i8* %pv.0720, i8** %xpv_pv.i654, align 8, !tbaa !0
  %conv153 = zext i32 %cur.0721 to i64
  %147 = load i8** %sv_any150, align 8, !tbaa !0
  %xpv_cur155 = getelementptr inbounds i8* %147, i64 8
  %148 = bitcast i8* %xpv_cur155 to i64*
  store i64 %conv153, i64* %148, align 8, !tbaa !5
  %conv156 = zext i32 %len.0722 to i64
  %xpv_len158 = getelementptr inbounds i8* %147, i64 16
  %149 = bitcast i8* %xpv_len158 to i64*
  store i64 %conv156, i64* %149, align 8, !tbaa !5
  %xiv_iv160 = getelementptr inbounds i8* %147, i64 24
  %150 = bitcast i8* %xiv_iv160 to i64*
  store i64 %iv.0723, i64* %150, align 8, !tbaa !5
  %xnv_nv162 = getelementptr inbounds i8* %147, i64 32
  %151 = bitcast i8* %xnv_nv162 to double*
  store double %nv.0724, double* %151, align 8, !tbaa !6
  br label %sw.epilog354

sw.bb163:                                         ; preds = %sw.epilog
  %call164 = tail call fastcc %struct.xpvmg* @S_new_xpvmg() #7
  %152 = bitcast %struct.xpvmg* %call164 to i8*
  %sv_any165 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %152, i8** %sv_any165, align 8, !tbaa !0
  %xpv_pv167 = getelementptr inbounds %struct.xpvmg* %call164, i64 0, i32 0
  store i8* %pv.0, i8** %xpv_pv167, align 8, !tbaa !0
  %conv168 = zext i32 %cur.0 to i64
  %153 = load i8** %sv_any165, align 8, !tbaa !0
  %xpv_cur170 = getelementptr inbounds i8* %153, i64 8
  %154 = bitcast i8* %xpv_cur170 to i64*
  store i64 %conv168, i64* %154, align 8, !tbaa !5
  %conv171 = zext i32 %len.0 to i64
  %xpv_len173 = getelementptr inbounds i8* %153, i64 16
  %155 = bitcast i8* %xpv_len173 to i64*
  store i64 %conv171, i64* %155, align 8, !tbaa !5
  %xiv_iv175 = getelementptr inbounds i8* %153, i64 24
  %156 = bitcast i8* %xiv_iv175 to i64*
  store i64 %iv.0, i64* %156, align 8, !tbaa !5
  %xnv_nv177 = getelementptr inbounds i8* %153, i64 32
  %157 = bitcast i8* %xnv_nv177 to double*
  store double %nv.0, double* %157, align 8, !tbaa !6
  %xmg_magic179 = getelementptr inbounds i8* %153, i64 40
  %158 = bitcast i8* %xmg_magic179 to %struct.magic**
  store %struct.magic* %magic.0, %struct.magic** %158, align 8, !tbaa !0
  %159 = load i8** %sv_any165, align 8, !tbaa !0
  %xmg_stash181 = getelementptr inbounds i8* %159, i64 48
  %160 = bitcast i8* %xmg_stash181 to %struct.hv**
  store %struct.hv* %stash.0, %struct.hv** %160, align 8, !tbaa !0
  br label %sw.epilog354

sw.bb182:                                         ; preds = %sw.epilog
  %161 = load %struct.xpvlv** @PL_xpvlv_root, align 8, !tbaa !0
  %tobool.i655 = icmp eq %struct.xpvlv* %161, null
  br i1 %tobool.i655, label %if.then.i660, label %S_new_xpvlv.exit

if.then.i660:                                     ; preds = %sw.bb182
  %call.i.i656 = tail call i8* @Perl_safesysmalloc(i64 4048) #8
  %162 = bitcast i8* %call.i.i656 to %struct.xpvlv*
  %163 = load %struct.xpvlv** @PL_xpvlv_arenaroot, align 8, !tbaa !0
  %164 = bitcast %struct.xpvlv* %163 to i8*
  %xpv_pv.i.i657 = bitcast i8* %call.i.i656 to i8**
  store i8* %164, i8** %xpv_pv.i.i657, align 8, !tbaa !0
  store %struct.xpvlv* %162, %struct.xpvlv** @PL_xpvlv_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i658 = getelementptr inbounds i8* %call.i.i656, i64 3960
  %165 = bitcast i8* %arrayidx.i.i658 to %struct.xpvlv*
  %incdec.ptr.i.i659 = getelementptr inbounds i8* %call.i.i656, i64 88
  %166 = bitcast i8* %incdec.ptr.i.i659 to %struct.xpvlv*
  store %struct.xpvlv* %166, %struct.xpvlv** @PL_xpvlv_root, align 8, !tbaa !0
  br label %while.body.i.i664

while.body.i.i664:                                ; preds = %while.body.i.i664, %if.then.i660
  %xpvlv.012.i.i = phi %struct.xpvlv* [ %166, %if.then.i660 ], [ %add.ptr.i.i661, %while.body.i.i664 ]
  %add.ptr.i.i661 = getelementptr inbounds %struct.xpvlv* %xpvlv.012.i.i, i64 1
  %167 = bitcast %struct.xpvlv* %add.ptr.i.i661 to i8*
  %xpv_pv1.i.i662 = getelementptr inbounds %struct.xpvlv* %xpvlv.012.i.i, i64 0, i32 0
  store i8* %167, i8** %xpv_pv1.i.i662, align 8, !tbaa !0
  %cmp.i.i663 = icmp ult %struct.xpvlv* %add.ptr.i.i661, %165
  br i1 %cmp.i.i663, label %while.body.i.i664, label %S_more_xpvlv.exit.i

S_more_xpvlv.exit.i:                              ; preds = %while.body.i.i664
  %xpv_pv3.i.i665 = getelementptr inbounds %struct.xpvlv* %add.ptr.i.i661, i64 0, i32 0
  store i8* null, i8** %xpv_pv3.i.i665, align 8, !tbaa !0
  %.pre.i666 = load %struct.xpvlv** @PL_xpvlv_root, align 8, !tbaa !0
  br label %S_new_xpvlv.exit

S_new_xpvlv.exit:                                 ; preds = %sw.bb182, %S_more_xpvlv.exit.i
  %168 = phi %struct.xpvlv* [ %161, %sw.bb182 ], [ %.pre.i666, %S_more_xpvlv.exit.i ]
  %xpv_pv.i667 = getelementptr inbounds %struct.xpvlv* %168, i64 0, i32 0
  %169 = load i8** %xpv_pv.i667, align 8, !tbaa !0
  %170 = bitcast i8* %169 to %struct.xpvlv*
  store %struct.xpvlv* %170, %struct.xpvlv** @PL_xpvlv_root, align 8, !tbaa !0
  %171 = bitcast %struct.xpvlv* %168 to i8*
  %sv_any184 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %171, i8** %sv_any184, align 8, !tbaa !0
  store i8* %pv.0, i8** %xpv_pv.i667, align 8, !tbaa !0
  %conv187 = zext i32 %cur.0 to i64
  %172 = load i8** %sv_any184, align 8, !tbaa !0
  %xpv_cur189 = getelementptr inbounds i8* %172, i64 8
  %173 = bitcast i8* %xpv_cur189 to i64*
  store i64 %conv187, i64* %173, align 8, !tbaa !5
  %conv190 = zext i32 %len.0 to i64
  %xpv_len192 = getelementptr inbounds i8* %172, i64 16
  %174 = bitcast i8* %xpv_len192 to i64*
  store i64 %conv190, i64* %174, align 8, !tbaa !5
  %xiv_iv194 = getelementptr inbounds i8* %172, i64 24
  %175 = bitcast i8* %xiv_iv194 to i64*
  store i64 %iv.0, i64* %175, align 8, !tbaa !5
  %xnv_nv196 = getelementptr inbounds i8* %172, i64 32
  %176 = bitcast i8* %xnv_nv196 to double*
  store double %nv.0, double* %176, align 8, !tbaa !6
  %xmg_magic198 = getelementptr inbounds i8* %172, i64 40
  %177 = bitcast i8* %xmg_magic198 to %struct.magic**
  store %struct.magic* %magic.0, %struct.magic** %177, align 8, !tbaa !0
  %178 = load i8** %sv_any184, align 8, !tbaa !0
  %xmg_stash200 = getelementptr inbounds i8* %178, i64 48
  %179 = bitcast i8* %xmg_stash200 to %struct.hv**
  store %struct.hv* %stash.0, %struct.hv** %179, align 8, !tbaa !0
  %180 = load i8** %sv_any184, align 8, !tbaa !0
  %xlv_targoff = getelementptr inbounds i8* %180, i64 56
  call void @llvm.memset.p0i8.i64(i8* %xlv_targoff, i8 0, i64 24, i32 8, i1 false)
  %181 = load i8** %sv_any184, align 8, !tbaa !0
  %182 = getelementptr inbounds i8* %181, i64 80
  store i8 0, i8* %182, align 1, !tbaa !1
  br label %sw.epilog354

sw.bb205:                                         ; preds = %sw.epilog
  %183 = load %struct.xpvav** @PL_xpvav_root, align 8, !tbaa !0
  %tobool.i668 = icmp eq %struct.xpvav* %183, null
  br i1 %tobool.i668, label %if.then.i672, label %S_new_xpvav.exit

if.then.i672:                                     ; preds = %sw.bb205
  %call.i.i669 = tail call i8* @Perl_safesysmalloc(i64 4080) #8
  %184 = bitcast i8* %call.i.i669 to %struct.xpvav*
  %185 = load %struct.xpvav** @PL_xpvav_arenaroot, align 8, !tbaa !0
  %186 = bitcast %struct.xpvav* %185 to i8*
  %xav_array.i.i = bitcast i8* %call.i.i669 to i8**
  store i8* %186, i8** %xav_array.i.i, align 8, !tbaa !0
  store %struct.xpvav* %184, %struct.xpvav** @PL_xpvav_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i670 = getelementptr inbounds i8* %call.i.i669, i64 4000
  %187 = bitcast i8* %arrayidx.i.i670 to %struct.xpvav*
  %incdec.ptr.i.i671 = getelementptr inbounds i8* %call.i.i669, i64 80
  %188 = bitcast i8* %incdec.ptr.i.i671 to %struct.xpvav*
  store %struct.xpvav* %188, %struct.xpvav** @PL_xpvav_root, align 8, !tbaa !0
  br label %while.body.i.i675

while.body.i.i675:                                ; preds = %while.body.i.i675, %if.then.i672
  %xpvav.012.i.i = phi %struct.xpvav* [ %188, %if.then.i672 ], [ %add.ptr.i.i673, %while.body.i.i675 ]
  %add.ptr.i.i673 = getelementptr inbounds %struct.xpvav* %xpvav.012.i.i, i64 1
  %189 = bitcast %struct.xpvav* %add.ptr.i.i673 to i8*
  %xav_array1.i.i = getelementptr inbounds %struct.xpvav* %xpvav.012.i.i, i64 0, i32 0
  store i8* %189, i8** %xav_array1.i.i, align 8, !tbaa !0
  %cmp.i.i674 = icmp ult %struct.xpvav* %add.ptr.i.i673, %187
  br i1 %cmp.i.i674, label %while.body.i.i675, label %S_more_xpvav.exit.i

S_more_xpvav.exit.i:                              ; preds = %while.body.i.i675
  %xav_array3.i.i = getelementptr inbounds %struct.xpvav* %add.ptr.i.i673, i64 0, i32 0
  store i8* null, i8** %xav_array3.i.i, align 8, !tbaa !0
  %.pre.i676 = load %struct.xpvav** @PL_xpvav_root, align 8, !tbaa !0
  br label %S_new_xpvav.exit

S_new_xpvav.exit:                                 ; preds = %sw.bb205, %S_more_xpvav.exit.i
  %190 = phi %struct.xpvav* [ %183, %sw.bb205 ], [ %.pre.i676, %S_more_xpvav.exit.i ]
  %xav_array.i = getelementptr inbounds %struct.xpvav* %190, i64 0, i32 0
  %191 = load i8** %xav_array.i, align 8, !tbaa !0
  %192 = bitcast i8* %191 to %struct.xpvav*
  store %struct.xpvav* %192, %struct.xpvav** @PL_xpvav_root, align 8, !tbaa !0
  %193 = bitcast %struct.xpvav* %190 to i8*
  %sv_any207 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %193, i8** %sv_any207, align 8, !tbaa !0
  %tobool208 = icmp eq i8* %pv.0, null
  br i1 %tobool208, label %if.end210, label %if.then209

if.then209:                                       ; preds = %S_new_xpvav.exit
  tail call void @Perl_safesysfree(i8* %pv.0) #8
  %.pre725 = load i8** %sv_any207, align 8, !tbaa !0
  br label %if.end210

if.end210:                                        ; preds = %S_new_xpvav.exit, %if.then209
  %194 = phi i8* [ %193, %S_new_xpvav.exit ], [ %.pre725, %if.then209 ]
  %xpv_pv212 = bitcast i8* %194 to i8**
  store i8* null, i8** %xpv_pv212, align 8, !tbaa !0
  %195 = load i8** %sv_any207, align 8, !tbaa !0
  %xav_fill = getelementptr inbounds i8* %195, i64 8
  %xiv_iv216 = getelementptr inbounds i8* %195, i64 24
  call void @llvm.memset.p0i8.i64(i8* %xav_fill, i8 -1, i64 16, i32 8, i1 false)
  %xmg_magic220 = getelementptr inbounds i8* %195, i64 40
  %196 = bitcast i8* %xmg_magic220 to %struct.magic**
  call void @llvm.memset.p0i8.i64(i8* %xiv_iv216, i8 0, i64 16, i32 8, i1 false)
  store %struct.magic* %magic.0, %struct.magic** %196, align 8, !tbaa !0
  %197 = load i8** %sv_any207, align 8, !tbaa !0
  %xmg_stash222 = getelementptr inbounds i8* %197, i64 48
  %198 = bitcast i8* %xmg_stash222 to %struct.hv**
  store %struct.hv* %stash.0, %struct.hv** %198, align 8, !tbaa !0
  %199 = load i8** %sv_any207, align 8, !tbaa !0
  %xav_alloc = getelementptr inbounds i8* %199, i64 56
  %200 = bitcast i8* %xav_alloc to %struct.sv***
  store %struct.sv** null, %struct.sv*** %200, align 8, !tbaa !0
  %201 = load i8** %sv_any207, align 8, !tbaa !0
  %xav_arylen = getelementptr inbounds i8* %201, i64 64
  %202 = bitcast i8* %xav_arylen to %struct.sv**
  store %struct.sv* null, %struct.sv** %202, align 8, !tbaa !0
  %203 = load i8** %sv_any207, align 8, !tbaa !0
  %204 = getelementptr inbounds i8* %203, i64 72
  store i8 1, i8* %204, align 1, !tbaa !1
  br label %sw.epilog354

sw.bb226:                                         ; preds = %sw.epilog
  %205 = load %struct.xpvhv** @PL_xpvhv_root, align 8, !tbaa !0
  %tobool.i677 = icmp eq %struct.xpvhv* %205, null
  br i1 %tobool.i677, label %if.then.i681, label %S_new_xpvhv.exit

if.then.i681:                                     ; preds = %sw.bb226
  %call.i.i678 = tail call i8* @Perl_safesysmalloc(i64 4048) #8
  %206 = bitcast i8* %call.i.i678 to %struct.xpvhv*
  %207 = load %struct.xpvhv** @PL_xpvhv_arenaroot, align 8, !tbaa !0
  %208 = bitcast %struct.xpvhv* %207 to i8*
  %xhv_array.i.i = bitcast i8* %call.i.i678 to i8**
  store i8* %208, i8** %xhv_array.i.i, align 8, !tbaa !0
  store %struct.xpvhv* %206, %struct.xpvhv** @PL_xpvhv_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i679 = getelementptr inbounds i8* %call.i.i678, i64 3960
  %209 = bitcast i8* %arrayidx.i.i679 to %struct.xpvhv*
  %incdec.ptr.i.i680 = getelementptr inbounds i8* %call.i.i678, i64 88
  %210 = bitcast i8* %incdec.ptr.i.i680 to %struct.xpvhv*
  store %struct.xpvhv* %210, %struct.xpvhv** @PL_xpvhv_root, align 8, !tbaa !0
  br label %while.body.i.i684

while.body.i.i684:                                ; preds = %while.body.i.i684, %if.then.i681
  %xpvhv.012.i.i = phi %struct.xpvhv* [ %210, %if.then.i681 ], [ %add.ptr.i.i682, %while.body.i.i684 ]
  %add.ptr.i.i682 = getelementptr inbounds %struct.xpvhv* %xpvhv.012.i.i, i64 1
  %211 = bitcast %struct.xpvhv* %add.ptr.i.i682 to i8*
  %xhv_array1.i.i = getelementptr inbounds %struct.xpvhv* %xpvhv.012.i.i, i64 0, i32 0
  store i8* %211, i8** %xhv_array1.i.i, align 8, !tbaa !0
  %cmp.i.i683 = icmp ult %struct.xpvhv* %add.ptr.i.i682, %209
  br i1 %cmp.i.i683, label %while.body.i.i684, label %S_more_xpvhv.exit.i

S_more_xpvhv.exit.i:                              ; preds = %while.body.i.i684
  %xhv_array3.i.i = getelementptr inbounds %struct.xpvhv* %add.ptr.i.i682, i64 0, i32 0
  store i8* null, i8** %xhv_array3.i.i, align 8, !tbaa !0
  %.pre.i685 = load %struct.xpvhv** @PL_xpvhv_root, align 8, !tbaa !0
  br label %S_new_xpvhv.exit

S_new_xpvhv.exit:                                 ; preds = %sw.bb226, %S_more_xpvhv.exit.i
  %212 = phi %struct.xpvhv* [ %205, %sw.bb226 ], [ %.pre.i685, %S_more_xpvhv.exit.i ]
  %xhv_array.i = getelementptr inbounds %struct.xpvhv* %212, i64 0, i32 0
  %213 = load i8** %xhv_array.i, align 8, !tbaa !0
  %214 = bitcast i8* %213 to %struct.xpvhv*
  store %struct.xpvhv* %214, %struct.xpvhv** @PL_xpvhv_root, align 8, !tbaa !0
  %215 = bitcast %struct.xpvhv* %212 to i8*
  %sv_any228 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %215, i8** %sv_any228, align 8, !tbaa !0
  %tobool229 = icmp eq i8* %pv.0, null
  br i1 %tobool229, label %if.end231, label %if.then230

if.then230:                                       ; preds = %S_new_xpvhv.exit
  tail call void @Perl_safesysfree(i8* %pv.0) #8
  %.pre726 = load i8** %sv_any228, align 8, !tbaa !0
  br label %if.end231

if.end231:                                        ; preds = %S_new_xpvhv.exit, %if.then230
  %216 = phi i8* [ %215, %S_new_xpvhv.exit ], [ %.pre726, %if.then230 ]
  %xpv_pv233 = bitcast i8* %216 to i8**
  store i8* null, i8** %xpv_pv233, align 8, !tbaa !0
  %217 = load i8** %sv_any228, align 8, !tbaa !0
  %xhv_fill = getelementptr inbounds i8* %217, i64 8
  %xmg_magic240 = getelementptr inbounds i8* %217, i64 40
  %218 = bitcast i8* %xmg_magic240 to %struct.magic**
  call void @llvm.memset.p0i8.i64(i8* %xhv_fill, i8 0, i64 32, i32 8, i1 false)
  store %struct.magic* %magic.0, %struct.magic** %218, align 8, !tbaa !0
  %219 = load i8** %sv_any228, align 8, !tbaa !0
  %xmg_stash242 = getelementptr inbounds i8* %219, i64 48
  %220 = bitcast i8* %xmg_stash242 to %struct.hv**
  store %struct.hv* %stash.0, %struct.hv** %220, align 8, !tbaa !0
  %221 = load i8** %sv_any228, align 8, !tbaa !0
  %xhv_riter = getelementptr inbounds i8* %221, i64 56
  %222 = bitcast i8* %xhv_riter to i32*
  store i32 0, i32* %222, align 4, !tbaa !3
  %xhv_eiter = getelementptr inbounds i8* %221, i64 64
  %223 = bitcast i8* %xhv_eiter to %struct.he**
  store %struct.he* null, %struct.he** %223, align 8, !tbaa !0
  %224 = load i8** %sv_any228, align 8, !tbaa !0
  %xhv_pmroot = getelementptr inbounds i8* %224, i64 72
  %225 = bitcast i8* %xhv_pmroot to %struct.pmop**
  store %struct.pmop* null, %struct.pmop** %225, align 8, !tbaa !0
  %226 = load i8** %sv_any228, align 8, !tbaa !0
  %xhv_name = getelementptr inbounds i8* %226, i64 80
  %227 = bitcast i8* %xhv_name to i8**
  store i8* null, i8** %227, align 8, !tbaa !0
  br label %sw.epilog354

sw.bb247:                                         ; preds = %sw.epilog
  %228 = load %struct.xpvcv** @PL_xpvcv_root, align 8, !tbaa !0
  %tobool.i686 = icmp eq %struct.xpvcv* %228, null
  br i1 %tobool.i686, label %if.then.i691, label %S_new_xpvcv.exit

if.then.i691:                                     ; preds = %sw.bb247
  %call.i.i687 = tail call i8* @Perl_safesysmalloc(i64 4032) #8
  %229 = bitcast i8* %call.i.i687 to %struct.xpvcv*
  %230 = load %struct.xpvcv** @PL_xpvcv_arenaroot, align 8, !tbaa !0
  %231 = bitcast %struct.xpvcv* %230 to i8*
  %xpv_pv.i.i688 = bitcast i8* %call.i.i687 to i8**
  store i8* %231, i8** %xpv_pv.i.i688, align 8, !tbaa !0
  store %struct.xpvcv* %229, %struct.xpvcv** @PL_xpvcv_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i689 = getelementptr inbounds i8* %call.i.i687, i64 3888
  %232 = bitcast i8* %arrayidx.i.i689 to %struct.xpvcv*
  %incdec.ptr.i.i690 = getelementptr inbounds i8* %call.i.i687, i64 144
  %233 = bitcast i8* %incdec.ptr.i.i690 to %struct.xpvcv*
  store %struct.xpvcv* %233, %struct.xpvcv** @PL_xpvcv_root, align 8, !tbaa !0
  br label %while.body.i.i695

while.body.i.i695:                                ; preds = %while.body.i.i695, %if.then.i691
  %xpvcv.012.i.i = phi %struct.xpvcv* [ %233, %if.then.i691 ], [ %add.ptr.i.i692, %while.body.i.i695 ]
  %add.ptr.i.i692 = getelementptr inbounds %struct.xpvcv* %xpvcv.012.i.i, i64 1
  %234 = bitcast %struct.xpvcv* %add.ptr.i.i692 to i8*
  %xpv_pv1.i.i693 = getelementptr inbounds %struct.xpvcv* %xpvcv.012.i.i, i64 0, i32 0
  store i8* %234, i8** %xpv_pv1.i.i693, align 8, !tbaa !0
  %cmp.i.i694 = icmp ult %struct.xpvcv* %add.ptr.i.i692, %232
  br i1 %cmp.i.i694, label %while.body.i.i695, label %S_more_xpvcv.exit.i

S_more_xpvcv.exit.i:                              ; preds = %while.body.i.i695
  %xpv_pv3.i.i696 = getelementptr inbounds %struct.xpvcv* %add.ptr.i.i692, i64 0, i32 0
  store i8* null, i8** %xpv_pv3.i.i696, align 8, !tbaa !0
  %.pre.i697 = load %struct.xpvcv** @PL_xpvcv_root, align 8, !tbaa !0
  br label %S_new_xpvcv.exit

S_new_xpvcv.exit:                                 ; preds = %sw.bb247, %S_more_xpvcv.exit.i
  %235 = phi %struct.xpvcv* [ %228, %sw.bb247 ], [ %.pre.i697, %S_more_xpvcv.exit.i ]
  %xpv_pv.i698 = getelementptr inbounds %struct.xpvcv* %235, i64 0, i32 0
  %236 = load i8** %xpv_pv.i698, align 8, !tbaa !0
  %237 = bitcast i8* %236 to %struct.xpvcv*
  store %struct.xpvcv* %237, %struct.xpvcv** @PL_xpvcv_root, align 8, !tbaa !0
  %238 = bitcast %struct.xpvcv* %235 to i8*
  %sv_any249 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %238, i8** %sv_any249, align 8, !tbaa !0
  tail call void @llvm.memset.p0i8.i64(i8* %238, i8 0, i64 144, i32 1, i1 false)
  %239 = load i8** %sv_any249, align 8, !tbaa !0
  %xpv_pv252 = bitcast i8* %239 to i8**
  store i8* %pv.0, i8** %xpv_pv252, align 8, !tbaa !0
  %conv253 = zext i32 %cur.0 to i64
  %240 = load i8** %sv_any249, align 8, !tbaa !0
  %xpv_cur255 = getelementptr inbounds i8* %240, i64 8
  %241 = bitcast i8* %xpv_cur255 to i64*
  store i64 %conv253, i64* %241, align 8, !tbaa !5
  %conv256 = zext i32 %len.0 to i64
  %xpv_len258 = getelementptr inbounds i8* %240, i64 16
  %242 = bitcast i8* %xpv_len258 to i64*
  store i64 %conv256, i64* %242, align 8, !tbaa !5
  %xiv_iv260 = getelementptr inbounds i8* %240, i64 24
  %243 = bitcast i8* %xiv_iv260 to i64*
  store i64 %iv.0, i64* %243, align 8, !tbaa !5
  %xnv_nv262 = getelementptr inbounds i8* %240, i64 32
  %244 = bitcast i8* %xnv_nv262 to double*
  store double %nv.0, double* %244, align 8, !tbaa !6
  %xmg_magic264 = getelementptr inbounds i8* %240, i64 40
  %245 = bitcast i8* %xmg_magic264 to %struct.magic**
  store %struct.magic* %magic.0, %struct.magic** %245, align 8, !tbaa !0
  %246 = load i8** %sv_any249, align 8, !tbaa !0
  %xmg_stash266 = getelementptr inbounds i8* %246, i64 48
  %247 = bitcast i8* %xmg_stash266 to %struct.hv**
  store %struct.hv* %stash.0, %struct.hv** %247, align 8, !tbaa !0
  br label %sw.epilog354

sw.bb267:                                         ; preds = %sw.epilog
  %call268 = tail call i8* @Perl_safesysmalloc(i64 96) #8
  %sv_any269 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %call268, i8** %sv_any269, align 8, !tbaa !0
  %xpv_pv271 = bitcast i8* %call268 to i8**
  store i8* %pv.0, i8** %xpv_pv271, align 8, !tbaa !0
  %conv272 = zext i32 %cur.0 to i64
  %248 = load i8** %sv_any269, align 8, !tbaa !0
  %xpv_cur274 = getelementptr inbounds i8* %248, i64 8
  %249 = bitcast i8* %xpv_cur274 to i64*
  store i64 %conv272, i64* %249, align 8, !tbaa !5
  %conv275 = zext i32 %len.0 to i64
  %xpv_len277 = getelementptr inbounds i8* %248, i64 16
  %250 = bitcast i8* %xpv_len277 to i64*
  store i64 %conv275, i64* %250, align 8, !tbaa !5
  %xiv_iv279 = getelementptr inbounds i8* %248, i64 24
  %251 = bitcast i8* %xiv_iv279 to i64*
  store i64 %iv.0, i64* %251, align 8, !tbaa !5
  %xnv_nv281 = getelementptr inbounds i8* %248, i64 32
  %252 = bitcast i8* %xnv_nv281 to double*
  store double %nv.0, double* %252, align 8, !tbaa !6
  %xmg_magic283 = getelementptr inbounds i8* %248, i64 40
  %253 = bitcast i8* %xmg_magic283 to %struct.magic**
  store %struct.magic* %magic.0, %struct.magic** %253, align 8, !tbaa !0
  %254 = load i8** %sv_any269, align 8, !tbaa !0
  %xmg_stash285 = getelementptr inbounds i8* %254, i64 48
  %255 = bitcast i8* %xmg_stash285 to %struct.hv**
  store %struct.hv* %stash.0, %struct.hv** %255, align 8, !tbaa !0
  %256 = load i8** %sv_any269, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds i8* %256, i64 56
  %257 = bitcast i8* %xgv_gp to %struct.gp**
  store %struct.gp* null, %struct.gp** %257, align 8, !tbaa !0
  %258 = load i8** %sv_any269, align 8, !tbaa !0
  %xgv_name = getelementptr inbounds i8* %258, i64 64
  %259 = bitcast i8* %xgv_name to i8**
  store i8* null, i8** %259, align 8, !tbaa !0
  %260 = load i8** %sv_any269, align 8, !tbaa !0
  %xgv_namelen = getelementptr inbounds i8* %260, i64 72
  call void @llvm.memset.p0i8.i64(i8* %xgv_namelen, i8 0, i64 16, i32 8, i1 false)
  %261 = load i8** %sv_any269, align 8, !tbaa !0
  %262 = getelementptr inbounds i8* %261, i64 88
  store i8 0, i8* %262, align 1, !tbaa !1
  br label %sw.epilog354

sw.bb291:                                         ; preds = %sw.epilog
  %263 = load %struct.xpvbm** @PL_xpvbm_root, align 8, !tbaa !0
  %tobool.i699 = icmp eq %struct.xpvbm* %263, null
  br i1 %tobool.i699, label %if.then.i704, label %S_new_xpvbm.exit

if.then.i704:                                     ; preds = %sw.bb291
  %call.i.i700 = tail call i8* @Perl_safesysmalloc(i64 4032) #8
  %264 = bitcast i8* %call.i.i700 to %struct.xpvbm*
  %265 = load %struct.xpvbm** @PL_xpvbm_arenaroot, align 8, !tbaa !0
  %266 = bitcast %struct.xpvbm* %265 to i8*
  %xpv_pv.i.i701 = bitcast i8* %call.i.i700 to i8**
  store i8* %266, i8** %xpv_pv.i.i701, align 8, !tbaa !0
  store %struct.xpvbm* %264, %struct.xpvbm** @PL_xpvbm_arenaroot, align 8, !tbaa !0
  %arrayidx.i.i702 = getelementptr inbounds i8* %call.i.i700, i64 3968
  %267 = bitcast i8* %arrayidx.i.i702 to %struct.xpvbm*
  %incdec.ptr.i.i703 = getelementptr inbounds i8* %call.i.i700, i64 64
  %268 = bitcast i8* %incdec.ptr.i.i703 to %struct.xpvbm*
  store %struct.xpvbm* %268, %struct.xpvbm** @PL_xpvbm_root, align 8, !tbaa !0
  br label %while.body.i.i708

while.body.i.i708:                                ; preds = %while.body.i.i708, %if.then.i704
  %xpvbm.012.i.i = phi %struct.xpvbm* [ %268, %if.then.i704 ], [ %add.ptr.i.i705, %while.body.i.i708 ]
  %add.ptr.i.i705 = getelementptr inbounds %struct.xpvbm* %xpvbm.012.i.i, i64 1
  %269 = bitcast %struct.xpvbm* %add.ptr.i.i705 to i8*
  %xpv_pv1.i.i706 = getelementptr inbounds %struct.xpvbm* %xpvbm.012.i.i, i64 0, i32 0
  store i8* %269, i8** %xpv_pv1.i.i706, align 8, !tbaa !0
  %cmp.i.i707 = icmp ult %struct.xpvbm* %add.ptr.i.i705, %267
  br i1 %cmp.i.i707, label %while.body.i.i708, label %S_more_xpvbm.exit.i

S_more_xpvbm.exit.i:                              ; preds = %while.body.i.i708
  %xpv_pv3.i.i709 = getelementptr inbounds %struct.xpvbm* %add.ptr.i.i705, i64 0, i32 0
  store i8* null, i8** %xpv_pv3.i.i709, align 8, !tbaa !0
  %.pre.i710 = load %struct.xpvbm** @PL_xpvbm_root, align 8, !tbaa !0
  br label %S_new_xpvbm.exit

S_new_xpvbm.exit:                                 ; preds = %sw.bb291, %S_more_xpvbm.exit.i
  %270 = phi %struct.xpvbm* [ %263, %sw.bb291 ], [ %.pre.i710, %S_more_xpvbm.exit.i ]
  %xpv_pv.i711 = getelementptr inbounds %struct.xpvbm* %270, i64 0, i32 0
  %271 = load i8** %xpv_pv.i711, align 8, !tbaa !0
  %272 = bitcast i8* %271 to %struct.xpvbm*
  store %struct.xpvbm* %272, %struct.xpvbm** @PL_xpvbm_root, align 8, !tbaa !0
  %273 = bitcast %struct.xpvbm* %270 to i8*
  %sv_any293 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %273, i8** %sv_any293, align 8, !tbaa !0
  store i8* %pv.0, i8** %xpv_pv.i711, align 8, !tbaa !0
  %conv296 = zext i32 %cur.0 to i64
  %274 = load i8** %sv_any293, align 8, !tbaa !0
  %xpv_cur298 = getelementptr inbounds i8* %274, i64 8
  %275 = bitcast i8* %xpv_cur298 to i64*
  store i64 %conv296, i64* %275, align 8, !tbaa !5
  %conv299 = zext i32 %len.0 to i64
  %xpv_len301 = getelementptr inbounds i8* %274, i64 16
  %276 = bitcast i8* %xpv_len301 to i64*
  store i64 %conv299, i64* %276, align 8, !tbaa !5
  %xiv_iv303 = getelementptr inbounds i8* %274, i64 24
  %277 = bitcast i8* %xiv_iv303 to i64*
  store i64 %iv.0, i64* %277, align 8, !tbaa !5
  %xnv_nv305 = getelementptr inbounds i8* %274, i64 32
  %278 = bitcast i8* %xnv_nv305 to double*
  store double %nv.0, double* %278, align 8, !tbaa !6
  %xmg_magic307 = getelementptr inbounds i8* %274, i64 40
  %279 = bitcast i8* %xmg_magic307 to %struct.magic**
  store %struct.magic* %magic.0, %struct.magic** %279, align 8, !tbaa !0
  %280 = load i8** %sv_any293, align 8, !tbaa !0
  %xmg_stash309 = getelementptr inbounds i8* %280, i64 48
  %281 = bitcast i8* %xmg_stash309 to %struct.hv**
  store %struct.hv* %stash.0, %struct.hv** %281, align 8, !tbaa !0
  %282 = load i8** %sv_any293, align 8, !tbaa !0
  %283 = getelementptr inbounds i8* %282, i64 62
  store i8 0, i8* %283, align 1, !tbaa !1
  %284 = load i8** %sv_any293, align 8, !tbaa !0
  %xbm_useful = getelementptr inbounds i8* %284, i64 56
  %285 = bitcast i8* %xbm_useful to i32*
  store i32 0, i32* %285, align 4, !tbaa !3
  %xbm_previous = getelementptr inbounds i8* %284, i64 60
  %286 = bitcast i8* %xbm_previous to i16*
  store i16 0, i16* %286, align 2, !tbaa !4
  br label %sw.epilog354

sw.bb313:                                         ; preds = %sw.epilog
  %call314 = tail call i8* @Perl_safesysmalloc(i64 152) #8
  %sv_any315 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %call314, i8** %sv_any315, align 8, !tbaa !0
  tail call void @llvm.memset.p0i8.i64(i8* %call314, i8 0, i64 152, i32 1, i1 false)
  %287 = load i8** %sv_any315, align 8, !tbaa !0
  %xpv_pv318 = bitcast i8* %287 to i8**
  store i8* %pv.0, i8** %xpv_pv318, align 8, !tbaa !0
  %conv319 = zext i32 %cur.0 to i64
  %288 = load i8** %sv_any315, align 8, !tbaa !0
  %xpv_cur321 = getelementptr inbounds i8* %288, i64 8
  %289 = bitcast i8* %xpv_cur321 to i64*
  store i64 %conv319, i64* %289, align 8, !tbaa !5
  %conv322 = zext i32 %len.0 to i64
  %xpv_len324 = getelementptr inbounds i8* %288, i64 16
  %290 = bitcast i8* %xpv_len324 to i64*
  store i64 %conv322, i64* %290, align 8, !tbaa !5
  %xiv_iv326 = getelementptr inbounds i8* %288, i64 24
  %291 = bitcast i8* %xiv_iv326 to i64*
  store i64 %iv.0, i64* %291, align 8, !tbaa !5
  %xnv_nv328 = getelementptr inbounds i8* %288, i64 32
  %292 = bitcast i8* %xnv_nv328 to double*
  store double %nv.0, double* %292, align 8, !tbaa !6
  %xmg_magic330 = getelementptr inbounds i8* %288, i64 40
  %293 = bitcast i8* %xmg_magic330 to %struct.magic**
  store %struct.magic* %magic.0, %struct.magic** %293, align 8, !tbaa !0
  %294 = load i8** %sv_any315, align 8, !tbaa !0
  %xmg_stash332 = getelementptr inbounds i8* %294, i64 48
  %295 = bitcast i8* %xmg_stash332 to %struct.hv**
  store %struct.hv* %stash.0, %struct.hv** %295, align 8, !tbaa !0
  br label %sw.epilog354

sw.bb333:                                         ; preds = %sw.epilog
  %call334 = tail call i8* @Perl_safesysmalloc(i64 168) #8
  %sv_any335 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %call334, i8** %sv_any335, align 8, !tbaa !0
  tail call void @llvm.memset.p0i8.i64(i8* %call334, i8 0, i64 168, i32 1, i1 false)
  %296 = load i8** %sv_any335, align 8, !tbaa !0
  %xpv_pv338 = bitcast i8* %296 to i8**
  store i8* %pv.0, i8** %xpv_pv338, align 8, !tbaa !0
  %conv339 = zext i32 %cur.0 to i64
  %297 = load i8** %sv_any335, align 8, !tbaa !0
  %xpv_cur341 = getelementptr inbounds i8* %297, i64 8
  %298 = bitcast i8* %xpv_cur341 to i64*
  store i64 %conv339, i64* %298, align 8, !tbaa !5
  %conv342 = zext i32 %len.0 to i64
  %xpv_len344 = getelementptr inbounds i8* %297, i64 16
  %299 = bitcast i8* %xpv_len344 to i64*
  store i64 %conv342, i64* %299, align 8, !tbaa !5
  %xiv_iv346 = getelementptr inbounds i8* %297, i64 24
  %300 = bitcast i8* %xiv_iv346 to i64*
  store i64 %iv.0, i64* %300, align 8, !tbaa !5
  %xnv_nv348 = getelementptr inbounds i8* %297, i64 32
  %301 = bitcast i8* %xnv_nv348 to double*
  store double %nv.0, double* %301, align 8, !tbaa !6
  %xmg_magic350 = getelementptr inbounds i8* %297, i64 40
  %302 = bitcast i8* %xmg_magic350 to %struct.magic**
  store %struct.magic* %magic.0, %struct.magic** %302, align 8, !tbaa !0
  %303 = load i8** %sv_any335, align 8, !tbaa !0
  %xmg_stash352 = getelementptr inbounds i8* %303, i64 48
  %304 = bitcast i8* %xmg_stash352 to %struct.hv**
  store %struct.hv* %stash.0, %struct.hv** %304, align 8, !tbaa !0
  %305 = load i8** %sv_any335, align 8, !tbaa !0
  %xio_page_len = getelementptr inbounds i8* %305, i64 96
  %306 = bitcast i8* %xio_page_len to i64*
  store i64 60, i64* %306, align 8, !tbaa !5
  br label %sw.epilog354

sw.epilog354:                                     ; preds = %sw.epilog, %sw.bb333, %sw.bb313, %S_new_xpvbm.exit, %sw.bb267, %S_new_xpvcv.exit, %if.end231, %if.end210, %S_new_xpvlv.exit, %sw.bb163, %S_new_xpvnv.exit, %if.end145, %S_new_xpv.exit, %S_new_xrv.exit, %S_new_xnv.exit, %S_new_xiv.exit
  %mt.addr.0713 = phi i32 [ 15, %sw.bb333 ], [ 14, %sw.bb313 ], [ 8, %S_new_xpvbm.exit ], [ 13, %sw.bb267 ], [ 12, %S_new_xpvcv.exit ], [ 11, %if.end231 ], [ 10, %if.end210 ], [ 9, %S_new_xpvlv.exit ], [ 7, %sw.bb163 ], [ 6, %S_new_xpvnv.exit ], [ 5, %if.end145 ], [ 4, %S_new_xpv.exit ], [ 3, %S_new_xrv.exit ], [ 2, %S_new_xnv.exit ], [ %mt.addr.0, %S_new_xiv.exit ], [ %mt.addr.0, %sw.epilog ]
  %307 = load i32* %sv_flags5.pre, align 4, !tbaa !3
  %and356 = and i32 %307, -256
  %or358 = or i32 %and356, %mt.addr.0713
  store i32 %or358, i32* %sv_flags5.pre, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %if.end, %sw.epilog354
  ret i8 1
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_force_normal(%struct.sv* %sv) #0 {
entry:
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_sv_backoff(%struct.sv* nocapture %sv) #0 {
entry:
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %0 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %0, i64 24
  %1 = bitcast i8* %xiv_iv to i64*
  %2 = load i64* %1, align 8, !tbaa !5
  %tobool = icmp eq i64 %2, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %xpv_pv = bitcast i8* %0 to i8**
  %3 = load i8** %xpv_pv, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %0, i64 16
  %4 = bitcast i8* %xpv_len to i64*
  %5 = load i64* %4, align 8, !tbaa !5
  %add = add i64 %5, %2
  store i64 %add, i64* %4, align 8, !tbaa !5
  %idx.neg = sub i64 0, %2
  %add.ptr = getelementptr inbounds i8* %3, i64 %idx.neg
  store i8* %add.ptr, i8** %xpv_pv, align 8, !tbaa !0
  %6 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv10 = getelementptr inbounds i8* %6, i64 24
  %7 = bitcast i8* %xiv_iv10 to i64*
  store i64 0, i64* %7, align 8, !tbaa !5
  %xpv_pv12 = bitcast i8* %6 to i8**
  %8 = load i8** %xpv_pv12, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %6, i64 8
  %9 = bitcast i8* %xpv_cur to i64*
  %10 = load i64* %9, align 8, !tbaa !5
  %add14 = add i64 %10, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %8, i8* %3, i64 %add14, i32 1, i1 false)
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %11 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %11, -2097153
  store i32 %and, i32* %sv_flags, align 4, !tbaa !3
  ret i32 0
}

; Function Attrs: optsize
declare void @Perl_croak(i8*, ...) #2

; Function Attrs: nounwind optsize uwtable
define internal fastcc %struct.xpvmg* @S_new_xpvmg() #0 {
entry:
  %0 = load %struct.xpvmg** @PL_xpvmg_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.xpvmg* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @Perl_safesysmalloc(i64 4032) #8
  %1 = bitcast i8* %call.i to %struct.xpvmg*
  %2 = load %struct.xpvmg** @PL_xpvmg_arenaroot, align 8, !tbaa !0
  %3 = bitcast %struct.xpvmg* %2 to i8*
  %xpv_pv.i = bitcast i8* %call.i to i8**
  store i8* %3, i8** %xpv_pv.i, align 8, !tbaa !0
  store %struct.xpvmg* %1, %struct.xpvmg** @PL_xpvmg_arenaroot, align 8, !tbaa !0
  %arrayidx.i = getelementptr inbounds i8* %call.i, i64 3976
  %4 = bitcast i8* %arrayidx.i to %struct.xpvmg*
  %incdec.ptr.i = getelementptr inbounds i8* %call.i, i64 56
  %5 = bitcast i8* %incdec.ptr.i to %struct.xpvmg*
  store %struct.xpvmg* %5, %struct.xpvmg** @PL_xpvmg_root, align 8, !tbaa !0
  br label %while.body.i

while.body.i:                                     ; preds = %while.body.i, %if.then
  %xpvmg.012.i = phi %struct.xpvmg* [ %5, %if.then ], [ %add.ptr.i, %while.body.i ]
  %add.ptr.i = getelementptr inbounds %struct.xpvmg* %xpvmg.012.i, i64 1
  %6 = bitcast %struct.xpvmg* %add.ptr.i to i8*
  %xpv_pv1.i = getelementptr inbounds %struct.xpvmg* %xpvmg.012.i, i64 0, i32 0
  store i8* %6, i8** %xpv_pv1.i, align 8, !tbaa !0
  %cmp.i = icmp ult %struct.xpvmg* %add.ptr.i, %4
  br i1 %cmp.i, label %while.body.i, label %S_more_xpvmg.exit

S_more_xpvmg.exit:                                ; preds = %while.body.i
  %xpv_pv3.i = getelementptr inbounds %struct.xpvmg* %add.ptr.i, i64 0, i32 0
  store i8* null, i8** %xpv_pv3.i, align 8, !tbaa !0
  %.pre = load %struct.xpvmg** @PL_xpvmg_root, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %entry, %S_more_xpvmg.exit
  %7 = phi %struct.xpvmg* [ %0, %entry ], [ %.pre, %S_more_xpvmg.exit ]
  %xpv_pv = getelementptr inbounds %struct.xpvmg* %7, i64 0, i32 0
  %8 = load i8** %xpv_pv, align 8, !tbaa !0
  %9 = bitcast i8* %8 to %struct.xpvmg*
  store %struct.xpvmg* %9, %struct.xpvmg** @PL_xpvmg_root, align 8, !tbaa !0
  ret %struct.xpvmg* %7
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #3

; Function Attrs: optsize
declare i8* @Perl_safesysmalloc(i64) #2

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) #3

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_grow(%struct.sv* %sv, i64 %newlen) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 524288
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_unref_flags(%struct.sv* %sv, i32 0) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %1 = phi i32 [ %0, %entry ], [ %.pre, %if.then ]
  %and2 = and i32 %1, 252
  %cmp = icmp ult i32 %and2, 4
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %call = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 4) #7
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %2 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %2 to i8**
  %3 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %if.end20

if.else:                                          ; preds = %if.end
  %and5 = and i32 %1, 2097152
  %tobool6 = icmp eq i32 %and5, 0
  br i1 %tobool6, label %if.else16, label %if.then7

if.then7:                                         ; preds = %if.else
  %call8 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %sv_any9 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %4 = load i8** %sv_any9, align 8, !tbaa !0
  %xpv_pv10 = bitcast i8* %4 to i8**
  %5 = load i8** %xpv_pv10, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %4, i64 16
  %6 = bitcast i8* %xpv_len to i64*
  %7 = load i64* %6, align 8, !tbaa !5
  %cmp12 = icmp ult i64 %7, %newlen
  br i1 %cmp12, label %if.then13, label %if.end20

if.then13:                                        ; preds = %if.then7
  %xpv_cur = getelementptr inbounds i8* %4, i64 8
  %8 = bitcast i8* %xpv_cur to i64*
  %9 = load i64* %8, align 8, !tbaa !5
  %sub = sub i64 %newlen, %9
  %mul = mul i64 %sub, 10
  %add = add i64 %mul, %newlen
  br label %if.end20

if.else16:                                        ; preds = %if.else
  %sv_any17 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %10 = load i8** %sv_any17, align 8, !tbaa !0
  %xpv_pv18 = bitcast i8* %10 to i8**
  %11 = load i8** %xpv_pv18, align 8, !tbaa !0
  br label %if.end20

if.end20:                                         ; preds = %if.else16, %if.then13, %if.then7, %if.then3
  %12 = phi i8* [ %2, %if.then3 ], [ %4, %if.then13 ], [ %4, %if.then7 ], [ %10, %if.else16 ]
  %newlen.addr.0 = phi i64 [ %newlen, %if.then3 ], [ %add, %if.then13 ], [ %newlen, %if.then7 ], [ %newlen, %if.else16 ]
  %s.0 = phi i8* [ %3, %if.then3 ], [ %5, %if.then13 ], [ %5, %if.then7 ], [ %11, %if.else16 ]
  %sv_any21 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %xpv_len22 = getelementptr inbounds i8* %12, i64 16
  %13 = bitcast i8* %xpv_len22 to i64*
  %14 = load i64* %13, align 8, !tbaa !5
  %cmp23 = icmp ugt i64 %newlen.addr.0, %14
  br i1 %cmp23, label %if.then24, label %if.end70

if.then24:                                        ; preds = %if.end20
  %tobool27 = icmp eq i64 %14, 0
  %tobool28 = icmp eq i8* %s.0, null
  %or.cond = or i1 %tobool27, %tobool28
  br i1 %or.cond, label %if.else32, label %if.then29

if.then29:                                        ; preds = %if.then24
  %call31 = tail call i8* @Perl_safesysrealloc(i8* %s.0, i64 %newlen.addr.0) #8
  br label %if.end65

if.else32:                                        ; preds = %if.then24
  %15 = load i32* %sv_flags, align 4, !tbaa !3
  %16 = and i32 %15, 9437184
  %17 = icmp eq i32 %16, 9437184
  br i1 %17, label %if.then40, label %if.end45

if.then40:                                        ; preds = %if.else32
  %and44 = and i32 %15, -9437185
  store i32 %and44, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end45

if.end45:                                         ; preds = %if.else32, %if.then40
  %call47 = tail call i8* @Perl_safesysmalloc(i64 %newlen.addr.0) #8
  %18 = load i8** %sv_any21, align 8, !tbaa !0
  %xpv_pv49 = bitcast i8* %18 to i8**
  %19 = load i8** %xpv_pv49, align 8, !tbaa !0
  %tobool50 = icmp eq i8* %19, null
  br i1 %tobool50, label %if.end65, label %land.lhs.true51

land.lhs.true51:                                  ; preds = %if.end45
  %xpv_cur53 = getelementptr inbounds i8* %18, i64 8
  %20 = bitcast i8* %xpv_cur53 to i64*
  %21 = load i64* %20, align 8, !tbaa !5
  %tobool54 = icmp eq i64 %21, 0
  br i1 %tobool54, label %if.end65, label %if.then55

if.then55:                                        ; preds = %land.lhs.true51
  %cmp60 = icmp ult i64 %newlen.addr.0, %21
  %newlen.addr.0. = select i1 %cmp60, i64 %newlen.addr.0, i64 %21
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %call47, i8* %19, i64 %newlen.addr.0., i32 1, i1 false)
  br label %if.end65

if.end65:                                         ; preds = %land.lhs.true51, %if.end45, %if.then55, %if.then29
  %s.1 = phi i8* [ %call31, %if.then29 ], [ %call47, %if.then55 ], [ %call47, %land.lhs.true51 ], [ %call47, %if.end45 ]
  %22 = load i8** %sv_any21, align 8, !tbaa !0
  %xpv_pv67 = bitcast i8* %22 to i8**
  store i8* %s.1, i8** %xpv_pv67, align 8, !tbaa !0
  %23 = load i8** %sv_any21, align 8, !tbaa !0
  %xpv_len69 = getelementptr inbounds i8* %23, i64 16
  %24 = bitcast i8* %xpv_len69 to i64*
  store i64 %newlen.addr.0, i64* %24, align 8, !tbaa !5
  br label %if.end70

if.end70:                                         ; preds = %if.end65, %if.end20
  %s.2 = phi i8* [ %s.1, %if.end65 ], [ %s.0, %if.end20 ]
  ret i8* %s.2
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_unref(%struct.sv* %sv) #0 {
entry:
  tail call void @Perl_sv_unref_flags(%struct.sv* %sv, i32 0) #7
  ret void
}

; Function Attrs: optsize
declare i8* @Perl_safesysrealloc(i8*, i64) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setiv(%struct.sv* %sv, i64 %i) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9961472
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %1 = phi i32 [ %0, %entry ], [ %.pre, %if.then ]
  %and2 = and i32 %1, 255
  switch i32 %and2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb3
    i32 3, label %sw.bb5
    i32 4, label %sw.bb5
    i32 13, label %sw.bb7
    i32 10, label %sw.bb7
    i32 11, label %sw.bb7
    i32 12, label %sw.bb7
    i32 14, label %sw.bb7
    i32 15, label %sw.bb7
  ]

sw.bb:                                            ; preds = %if.end
  %call = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 1) #7
  br label %sw.epilog

sw.bb3:                                           ; preds = %if.end
  %call4 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  br label %sw.epilog

sw.bb5:                                           ; preds = %if.end, %if.end
  %call6 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 5) #7
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %call8 = tail call i8* @Perl_sv_reftype(%struct.sv* %sv, i32 0) #7
  %2 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_type = getelementptr inbounds %struct.op* %2, i64 0, i32 4
  %3 = load i16* %op_type, align 2, !tbaa !4
  %cmp = icmp eq i16 %3, 351
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb7
  %call10 = tail call i8* @Perl_custom_op_desc(%struct.op* %2) #8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb7
  %idxprom = zext i16 %3 to i64
  %arrayidx = getelementptr inbounds [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %4 = load i8** %arrayidx, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call10, %cond.true ], [ %4, %cond.false ]
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([33 x i8]* @.str4, i64 0, i64 0), i8* %call8, i8* %cond) #8
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end, %if.end, %sw.bb5, %sw.bb3, %sw.bb
  %5 = load i32* %sv_flags, align 4, !tbaa !3
  %and13 = and i32 %5, 1223753727
  store i32 %and13, i32* %sv_flags, align 4, !tbaa !3
  %and15 = and i32 %5, 2097152
  %tobool16 = icmp eq i32 %and15, 0
  br i1 %tobool16, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %sw.epilog
  %call17 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre42 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %sw.epilog, %land.rhs
  %6 = phi i32 [ %and13, %sw.epilog ], [ %.pre42, %land.rhs ]
  %or = or i32 %6, 16842752
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %7 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %7, i64 24
  %8 = bitcast i8* %xiv_iv to i64*
  store i64 %i, i64* %8, align 8, !tbaa !5
  %9 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool20 = icmp ne i8 %9, 0
  %10 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool22 = icmp ne i8 %10, 0
  %or.cond = and i1 %tobool20, %tobool22
  br i1 %or.cond, label %if.then25, label %if.end28

if.then25:                                        ; preds = %land.end
  tail call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end28

if.end28:                                         ; preds = %if.then25, %land.end
  ret void
}

; Function Attrs: nounwind optsize readonly uwtable
define i8* @Perl_sv_reftype(%struct.sv* nocapture %sv, i32 %ob) #4 {
entry:
  %tobool = icmp eq i32 %ob, 0
  %sv_flags4.phi.trans.insert = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %.pre = load i32* %sv_flags4.phi.trans.insert, align 4, !tbaa !3
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %and = and i32 %.pre, 4096
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %0 = load i8** %sv_any, align 8, !tbaa !0
  %xmg_stash = getelementptr inbounds i8* %0, i64 48
  %1 = bitcast i8* %xmg_stash to %struct.hv**
  %2 = load %struct.hv** %1, align 8, !tbaa !0
  %sv_any2 = getelementptr inbounds %struct.hv* %2, i64 0, i32 0
  %3 = load %struct.xpvhv** %sv_any2, align 8, !tbaa !0
  %xhv_name = getelementptr inbounds %struct.xpvhv* %3, i64 0, i32 10
  %4 = load i8** %xhv_name, align 8, !tbaa !0
  %tobool3 = icmp ne i8* %4, null
  %cond = select i1 %tobool3, i8* %4, i8* getelementptr inbounds ([9 x i8]* @.str25, i64 0, i64 0)
  br label %return

if.else:                                          ; preds = %entry, %land.lhs.true
  %and5 = and i32 %.pre, 255
  switch i32 %and5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 5, label %sw.bb
    i32 6, label %sw.bb
    i32 7, label %sw.bb
    i32 8, label %sw.bb
    i32 9, label %sw.bb11
    i32 10, label %return
    i32 11, label %sw.bb28
    i32 12, label %sw.bb29
    i32 13, label %sw.bb30
    i32 14, label %sw.bb31
    i32 15, label %sw.bb32
  ]

sw.bb:                                            ; preds = %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else, %if.else
  %and7 = and i32 %.pre, 524288
  %tobool8 = icmp eq i32 %and7, 0
  %. = select i1 %tobool8, i8* getelementptr inbounds ([7 x i8]* @.str15, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8]* @.str14, i64 0, i64 0)
  br label %return

sw.bb11:                                          ; preds = %if.else
  %and13 = and i32 %.pre, 524288
  %tobool14 = icmp eq i32 %and13, 0
  br i1 %tobool14, label %cond.false16, label %return

cond.false16:                                     ; preds = %sw.bb11
  %sv_any17 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %5 = load i8** %sv_any17, align 8, !tbaa !0
  %6 = getelementptr inbounds i8* %5, i64 80
  %7 = load i8* %6, align 1, !tbaa !1
  %cmp = icmp eq i8 %7, 116
  br i1 %cmp, label %return, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false16
  %cmp22 = icmp eq i8 %7, 84
  %phitmp = select i1 %cmp22, i8* getelementptr inbounds ([7 x i8]* @.str15, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str16, i64 0, i64 0)
  br label %return

sw.bb28:                                          ; preds = %if.else
  br label %return

sw.bb29:                                          ; preds = %if.else
  br label %return

sw.bb30:                                          ; preds = %if.else
  br label %return

sw.bb31:                                          ; preds = %if.else
  br label %return

sw.bb32:                                          ; preds = %if.else
  br label %return

sw.default:                                       ; preds = %if.else
  br label %return

return:                                           ; preds = %if.else, %sw.bb11, %lor.rhs, %cond.false16, %sw.bb, %sw.default, %sw.bb32, %sw.bb31, %sw.bb30, %sw.bb29, %sw.bb28, %if.then
  %retval.0 = phi i8* [ %cond, %if.then ], [ getelementptr inbounds ([8 x i8]* @.str23, i64 0, i64 0), %sw.default ], [ getelementptr inbounds ([3 x i8]* @.str22, i64 0, i64 0), %sw.bb32 ], [ getelementptr inbounds ([7 x i8]* @.str21, i64 0, i64 0), %sw.bb31 ], [ getelementptr inbounds ([5 x i8]* @.str20, i64 0, i64 0), %sw.bb30 ], [ getelementptr inbounds ([5 x i8]* @.str19, i64 0, i64 0), %sw.bb29 ], [ getelementptr inbounds ([5 x i8]* @.str18, i64 0, i64 0), %sw.bb28 ], [ %., %sw.bb ], [ getelementptr inbounds ([4 x i8]* @.str14, i64 0, i64 0), %sw.bb11 ], [ getelementptr inbounds ([7 x i8]* @.str15, i64 0, i64 0), %cond.false16 ], [ %phitmp, %lor.rhs ], [ getelementptr inbounds ([6 x i8]* @.str17, i64 0, i64 0), %if.else ]
  ret i8* %retval.0
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_taint(%struct.sv* %sv) #0 {
entry:
  tail call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 116, i8* null, i32 0) #7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setiv_mg(%struct.sv* %sv, i64 %i) #0 {
entry:
  tail call void @Perl_sv_setiv(%struct.sv* %sv, i64 %i) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: optsize
declare i32 @Perl_mg_set(%struct.sv*) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setuv(%struct.sv* %sv, i64 %u) #0 {
entry:
  %cmp = icmp sgt i64 %u, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_setiv(%struct.sv* %sv, i64 %u) #7
  br label %return

if.end:                                           ; preds = %entry
  tail call void @Perl_sv_setiv(%struct.sv* %sv, i64 0) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %0, -2147483648
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %1, i64 24
  %2 = bitcast i8* %xuv_uv to i64*
  store i64 %u, i64* %2, align 8, !tbaa !5
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setuv_mg(%struct.sv* %sv, i64 %u) #0 {
entry:
  %cmp = icmp sgt i64 %u, -1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_setiv(%struct.sv* %sv, i64 %u) #7
  %sv_flags1.pre = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  br label %if.end

if.else:                                          ; preds = %entry
  tail call void @Perl_sv_setiv(%struct.sv* %sv, i64 0) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %0, -2147483648
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  tail call void @Perl_sv_setuv(%struct.sv* %sv, i64 %u) #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv_flags1.pre-phi = phi i32* [ %sv_flags, %if.else ], [ %sv_flags1.pre, %if.then ]
  %1 = load i32* %sv_flags1.pre-phi, align 4, !tbaa !3
  %and = and i32 %1, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then2
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setnv(%struct.sv* %sv, double %num) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9961472
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %1 = phi i32 [ %0, %entry ], [ %.pre, %if.then ]
  %and2 = and i32 %1, 255
  switch i32 %and2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 3, label %sw.bb3
    i32 4, label %sw.bb3
    i32 5, label %sw.bb3
    i32 13, label %sw.bb5
    i32 10, label %sw.bb5
    i32 11, label %sw.bb5
    i32 12, label %sw.bb5
    i32 14, label %sw.bb5
    i32 15, label %sw.bb5
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  %call = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 2) #7
  br label %sw.epilog

sw.bb3:                                           ; preds = %if.end, %if.end, %if.end
  %call4 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  br label %sw.epilog

sw.bb5:                                           ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %call6 = tail call i8* @Perl_sv_reftype(%struct.sv* %sv, i32 0) #7
  %2 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_type = getelementptr inbounds %struct.op* %2, i64 0, i32 4
  %3 = load i16* %op_type, align 2, !tbaa !4
  %cmp = icmp eq i16 %3, 351
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb5
  %call8 = tail call i8* @Perl_custom_op_name(%struct.op* %2) #8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb5
  %idxprom = zext i16 %3 to i64
  %arrayidx = getelementptr inbounds [0 x i8*]* @PL_op_name, i64 0, i64 %idxprom
  %4 = load i8** %arrayidx, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call8, %cond.true ], [ %4, %cond.false ]
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([32 x i8]* @.str5, i64 0, i64 0), i8* %call6, i8* %cond) #8
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end, %if.end, %sw.bb3, %sw.bb
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %5 = load i8** %sv_any, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %5, i64 32
  %6 = bitcast i8* %xnv_nv to double*
  store double %num, double* %6, align 8, !tbaa !6
  %7 = load i32* %sv_flags, align 4, !tbaa !3
  %and11 = and i32 %7, 1223753727
  store i32 %and11, i32* %sv_flags, align 4, !tbaa !3
  %and13 = and i32 %7, 2097152
  %tobool14 = icmp eq i32 %and13, 0
  br i1 %tobool14, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %sw.epilog
  %call15 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre39 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %sw.epilog, %land.rhs
  %8 = phi i32 [ %and11, %sw.epilog ], [ %.pre39, %land.rhs ]
  %or = or i32 %8, 33685504
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %9 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool18 = icmp ne i8 %9, 0
  %10 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool20 = icmp ne i8 %10, 0
  %or.cond = and i1 %tobool18, %tobool20
  br i1 %or.cond, label %if.then23, label %if.end26

if.then23:                                        ; preds = %land.end
  tail call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end26

if.end26:                                         ; preds = %if.then23, %land.end
  ret void
}

; Function Attrs: optsize
declare i8* @Perl_custom_op_name(%struct.op*) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setnv_mg(%struct.sv* %sv, double %num) #0 {
entry:
  tail call void @Perl_sv_setnv(%struct.sv* %sv, double %num) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_looks_like_number(%struct.sv* %sv) #0 {
entry:
  %len = alloca i64, align 8
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %1 to i8**
  %2 = load i8** %xpv_pv, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %3 = bitcast i8* %xpv_cur to i64*
  %4 = load i64* %3, align 8, !tbaa !5
  store i64 %4, i64* %len, align 8, !tbaa !5
  br label %if.end15

if.else:                                          ; preds = %entry
  %and3 = and i32 %0, 67108864
  %tobool4 = icmp eq i32 %and3, 0
  br i1 %tobool4, label %if.else12, label %cond.false

cond.false:                                       ; preds = %if.else
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %len, i32 2) #7
  %.pre = load i64* %len, align 8, !tbaa !5
  br label %if.end15

if.else12:                                        ; preds = %if.else
  %and14 = and i32 %0, 50528256
  br label %return

if.end15:                                         ; preds = %cond.false, %if.then
  %5 = phi i64 [ %4, %if.then ], [ %.pre, %cond.false ]
  %sbegin.0 = phi i8* [ %2, %if.then ], [ %call, %cond.false ]
  %call16 = call i32 @Perl_grok_number(i8* %sbegin.0, i64 %5, i64* null) #8
  br label %return

return:                                           ; preds = %if.end15, %if.else12
  %retval.0 = phi i32 [ %call16, %if.end15 ], [ %and14, %if.else12 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* nocapture %lp, i32 %flags) #0 {
entry:
  %tbuf = alloca [64 x i8], align 16
  %reflags = alloca [6 x i8], align 1
  %buf = alloca [22 x i8], align 16
  %0 = getelementptr inbounds [64 x i8]* %tbuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 64, i8* %0) #3
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 0, i64* %lp, align 8, !tbaa !5
  br label %cleanup

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %1, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end66, label %if.then2

if.then2:                                         ; preds = %if.end
  %and3 = and i32 %flags, 2
  %tobool4 = icmp eq i32 %and3, 0
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.then2
  %call = call i32 @Perl_mg_get(%struct.sv* %sv) #8
  %.pre753 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end6

if.end6:                                          ; preds = %if.then2, %if.then5
  %2 = phi i32 [ %1, %if.then2 ], [ %.pre753, %if.then5 ]
  %and8 = and i32 %2, 67108864
  %tobool9 = icmp eq i32 %and8, 0
  br i1 %tobool9, label %if.end12, label %if.then10

if.then10:                                        ; preds = %if.end6
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %3, i64 8
  %4 = bitcast i8* %xpv_cur to i64*
  %5 = load i64* %4, align 8, !tbaa !5
  store i64 %5, i64* %lp, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %3 to i8**
  %6 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cleanup

if.end12:                                         ; preds = %if.end6
  %and14 = and i32 %2, 16777216
  %tobool15 = icmp eq i32 %and14, 0
  br i1 %tobool15, label %if.end26, label %if.then16

if.then16:                                        ; preds = %if.end12
  %tobool19 = icmp slt i32 %2, 0
  %sv_any21 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %7 = load i8** %sv_any21, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %7, i64 24
  %8 = bitcast i8* %xuv_uv to i64*
  %9 = load i64* %8, align 8, !tbaa !5
  br i1 %tobool19, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.then16
  %call22 = call i32 (i8*, i8*, ...)* @sprintf(i8* %0, i8* getelementptr inbounds ([4 x i8]* @.str8, i64 0, i64 0), i64 %9) #8
  br label %tokensave

if.else:                                          ; preds = %if.then16
  %call24 = call i32 (i8*, i8*, ...)* @sprintf(i8* %0, i8* getelementptr inbounds ([4 x i8]* @.str9, i64 0, i64 0), i64 %9) #8
  br label %tokensave

if.end26:                                         ; preds = %if.end12
  %and28 = and i32 %2, 33554432
  %tobool29 = icmp eq i32 %and28, 0
  br i1 %tobool29, label %if.end33, label %if.then30

if.then30:                                        ; preds = %if.end26
  %sv_any31 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %10 = load i8** %sv_any31, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %10, i64 32
  %11 = bitcast i8* %xnv_nv to double*
  %12 = load double* %11, align 8, !tbaa !6
  %call32 = call i8* @gcvt(double %12, i32 15, i8* %0) #8
  br label %tokensave

if.end33:                                         ; preds = %if.end26
  %and35 = and i32 %2, 524288
  %tobool36 = icmp eq i32 %and35, 0
  br i1 %tobool36, label %if.then37, label %if.end66

if.then37:                                        ; preds = %if.end33
  %and39 = and i32 %2, 512
  %tobool40 = icmp eq i32 %and39, 0
  br i1 %tobool40, label %if.then41, label %if.end64

if.then41:                                        ; preds = %if.then37
  %13 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %13, i64 0, i32 14
  %14 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp = icmp eq %struct.sv* %14, null
  br i1 %cmp, label %lor.lhs.false52, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then41
  %15 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings42 = getelementptr inbounds %struct.cop* %15, i64 0, i32 14
  %16 = load %struct.sv** %cop_warnings42, align 8, !tbaa !0
  %cmp43 = icmp eq %struct.sv* %16, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp43, label %lor.lhs.false52, label %land.lhs.true44

land.lhs.true44:                                  ; preds = %land.lhs.true
  %17 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings45 = getelementptr inbounds %struct.cop* %17, i64 0, i32 14
  %18 = load %struct.sv** %cop_warnings45, align 8, !tbaa !0
  %cmp46 = icmp eq %struct.sv* %18, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp46, label %land.lhs.true60, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true44
  %19 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings47 = getelementptr inbounds %struct.cop* %19, i64 0, i32 14
  %20 = load %struct.sv** %cop_warnings47, align 8, !tbaa !0
  %sv_any48 = getelementptr inbounds %struct.sv* %20, i64 0, i32 0
  %21 = load i8** %sv_any48, align 8, !tbaa !0
  %xpv_pv49 = bitcast i8* %21 to i8**
  %22 = load i8** %xpv_pv49, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %22, i64 10
  %23 = load i8* %arrayidx, align 1, !tbaa !1
  %and50 = and i8 %23, 4
  %tobool51 = icmp eq i8 %and50, 0
  br i1 %tobool51, label %lor.lhs.false52, label %land.lhs.true60

lor.lhs.false52:                                  ; preds = %lor.lhs.false, %land.lhs.true, %if.then41
  %24 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings53 = getelementptr inbounds %struct.cop* %24, i64 0, i32 14
  %25 = load %struct.sv** %cop_warnings53, align 8, !tbaa !0
  %cmp54 = icmp eq %struct.sv* %25, null
  br i1 %cmp54, label %land.lhs.true56, label %if.end64

land.lhs.true56:                                  ; preds = %lor.lhs.false52
  %26 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and58 = and i8 %26, 1
  %tobool59 = icmp eq i8 %and58, 0
  %27 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool61 = icmp ne i32 %27, 0
  %or.cond = or i1 %tobool59, %tobool61
  br i1 %or.cond, label %if.end64, label %if.then62

land.lhs.true60:                                  ; preds = %lor.lhs.false, %land.lhs.true44
  %.old = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool61.old = icmp eq i32 %.old, 0
  br i1 %tobool61.old, label %if.then62, label %if.end64

if.then62:                                        ; preds = %land.lhs.true60, %land.lhs.true56
  call void @Perl_report_uninit() #7
  br label %if.end64

if.end64:                                         ; preds = %land.lhs.true60, %if.then37, %lor.lhs.false52, %if.then62, %land.lhs.true56
  store i64 0, i64* %lp, align 8, !tbaa !5
  br label %cleanup

if.end66:                                         ; preds = %if.end33, %if.end
  %.pr = phi i32 [ %2, %if.end33 ], [ %1, %if.end ]
  %and68 = and i32 %.pr, 9961472
  %tobool69 = icmp eq i32 %and68, 0
  br i1 %tobool69, label %if.end320, label %if.then70

if.then70:                                        ; preds = %if.end66
  %and72 = and i32 %.pr, 524288
  %tobool73 = icmp eq i32 %and72, 0
  br i1 %tobool73, label %if.end281, label %if.then74

if.then74:                                        ; preds = %if.then70
  %and76 = and i32 %.pr, 268435456
  %tobool77 = icmp eq i32 %and76, 0
  br i1 %tobool77, label %if.end110, label %land.lhs.true78

land.lhs.true78:                                  ; preds = %if.then74
  %call79 = call %struct.sv* @Perl_amagic_call(%struct.sv* %sv, %struct.sv* @PL_sv_undef, i32 4, i32 9) #8
  %tobool80 = icmp eq %struct.sv* %call79, null
  br i1 %tobool80, label %if.end110, label %land.lhs.true81

land.lhs.true81:                                  ; preds = %land.lhs.true78
  %sv_flags82 = getelementptr inbounds %struct.sv* %call79, i64 0, i32 2
  %28 = load i32* %sv_flags82, align 4, !tbaa !3
  %and83 = and i32 %28, 524288
  %tobool84 = icmp eq i32 %and83, 0
  br i1 %tobool84, label %if.then91, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %land.lhs.true81
  %sv_any86 = getelementptr inbounds %struct.sv* %call79, i64 0, i32 0
  %29 = load i8** %sv_any86, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %29 to %struct.sv**
  %30 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_any87 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %31 = load i8** %sv_any87, align 8, !tbaa !0
  %xrv_rv88 = bitcast i8* %31 to %struct.sv**
  %32 = load %struct.sv** %xrv_rv88, align 8, !tbaa !0
  %cmp89 = icmp eq %struct.sv* %30, %32
  br i1 %cmp89, label %if.end110, label %if.then91

if.then91:                                        ; preds = %lor.lhs.false85, %land.lhs.true81
  %and93 = and i32 %28, 262144
  %cmp94 = icmp eq i32 %and93, 0
  br i1 %cmp94, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then91
  %sv_any96 = getelementptr inbounds %struct.sv* %call79, i64 0, i32 0
  %33 = load i8** %sv_any96, align 8, !tbaa !0
  %xpv_cur97 = getelementptr inbounds i8* %33, i64 8
  %34 = bitcast i8* %xpv_cur97 to i64*
  %35 = load i64* %34, align 8, !tbaa !5
  store i64 %35, i64* %lp, align 8, !tbaa !5
  %xpv_pv99 = bitcast i8* %33 to i8**
  %36 = load i8** %xpv_pv99, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.then91
  %call100 = call i8* @Perl_sv_2pv_flags(%struct.sv* %call79, i64* %lp, i32 2) #7
  %.pre752 = load i32* %sv_flags82, align 4, !tbaa !3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %37 = phi i32 [ %28, %cond.true ], [ %.pre752, %cond.false ]
  %cond = phi i8* [ %36, %cond.true ], [ %call100, %cond.false ]
  %and102 = and i32 %37, 536870912
  %tobool103 = icmp eq i32 %and102, 0
  %38 = load i32* %sv_flags, align 4, !tbaa !3
  %and108 = and i32 %38, -536870913
  %or = or i32 %38, 536870912
  %storemerge716 = select i1 %tobool103, i32 %and108, i32 %or
  store i32 %storemerge716, i32* %sv_flags, align 4, !tbaa !3
  br label %cleanup

if.end110:                                        ; preds = %land.lhs.true78, %if.then74, %lor.lhs.false85
  %sv_any111 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %39 = load i8** %sv_any111, align 8, !tbaa !0
  %xrv_rv112 = bitcast i8* %39 to %struct.sv**
  %40 = load %struct.sv** %xrv_rv112, align 8, !tbaa !0
  %tobool113 = icmp eq %struct.sv* %40, null
  br i1 %tobool113, label %if.then114, label %if.else115

if.then114:                                       ; preds = %if.end110
  store i64 7, i64* %lp, align 8, !tbaa !5
  br label %cleanup

if.else115:                                       ; preds = %if.end110
  %sv_flags116 = getelementptr inbounds %struct.sv* %40, i64 0, i32 2
  %41 = load i32* %sv_flags116, align 4, !tbaa !3
  %and117 = and i32 %41, 255
  switch i32 %and117, label %sw.default [
    i32 7, label %sw.bb
    i32 0, label %sw.bb234
    i32 1, label %sw.bb234
    i32 2, label %sw.bb234
    i32 3, label %sw.bb234
    i32 4, label %sw.bb234
    i32 5, label %sw.bb234
    i32 6, label %sw.bb234
    i32 8, label %sw.bb234
    i32 9, label %sw.bb241
    i32 10, label %sw.epilog
    i32 11, label %sw.bb260
    i32 12, label %sw.bb261
    i32 13, label %sw.bb262
    i32 14, label %sw.bb263
    i32 15, label %sw.bb264
  ]

sw.bb:                                            ; preds = %if.else115
  %and119 = and i32 %41, 118484992
  %cmp120 = icmp eq i32 %and119, 20480
  br i1 %cmp120, label %land.lhs.true122, label %sw.bb234

land.lhs.true122:                                 ; preds = %sw.bb
  %call123 = call %struct.magic* @Perl_mg_find(%struct.sv* %40, i32 114) #8
  %tobool124 = icmp eq %struct.magic* %call123, null
  br i1 %tobool124, label %land.lhs.true122.sw.bb234_crit_edge, label %if.then125

land.lhs.true122.sw.bb234_crit_edge:              ; preds = %land.lhs.true122
  %.pre755 = load i32* %sv_flags116, align 4, !tbaa !3
  br label %sw.bb234

if.then125:                                       ; preds = %land.lhs.true122
  %mg_obj = getelementptr inbounds %struct.magic* %call123, i64 0, i32 5
  %42 = load %struct.sv** %mg_obj, align 8, !tbaa !0
  %mg_ptr = getelementptr inbounds %struct.magic* %call123, i64 0, i32 6
  %43 = load i8** %mg_ptr, align 8, !tbaa !0
  %tobool126 = icmp eq i8* %43, null
  %44 = getelementptr inbounds %struct.sv* %42, i64 5, i32 2
  br i1 %tobool126, label %if.then127, label %if.then125.if.end216_crit_edge

if.then125.if.end216_crit_edge:                   ; preds = %if.then125
  %mg_len230.pre = getelementptr inbounds %struct.magic* %call123, i64 0, i32 7
  br label %if.end216

if.then127:                                       ; preds = %if.then125
  %45 = load i32* %44, align 4, !tbaa !3
  %and129 = lshr i32 %45, 12
  %conv130 = and i32 %and129, 15
  br label %while.body

while.body:                                       ; preds = %if.then127, %if.end140
  %46 = phi i8 [ 109, %if.then127 ], [ %47, %if.end140 ]
  %incdec.ptr746 = phi i8* [ getelementptr inbounds ([5 x i8]* @.str11, i64 0, i64 1), %if.then127 ], [ %incdec.ptr, %if.end140 ]
  %reganch.0745 = phi i32 [ %conv130, %if.then127 ], [ %conv132, %if.end140 ]
  %right.0744 = phi i32 [ 4, %if.then127 ], [ %right.1, %if.end140 ]
  %left.0743 = phi i32 [ 0, %if.then127 ], [ %left.1, %if.end140 ]
  %and133 = and i32 %reganch.0745, 1
  %tobool134 = icmp eq i32 %and133, 0
  br i1 %tobool134, label %if.else137, label %if.then135

if.then135:                                       ; preds = %while.body
  %inc = add nsw i32 %left.0743, 1
  %idxprom = sext i32 %left.0743 to i64
  %arrayidx136 = getelementptr inbounds [6 x i8]* %reflags, i64 0, i64 %idxprom
  store i8 %46, i8* %arrayidx136, align 1, !tbaa !1
  br label %if.end140

if.else137:                                       ; preds = %while.body
  %dec = add nsw i32 %right.0744, -1
  %idxprom138 = sext i32 %right.0744 to i64
  %arrayidx139 = getelementptr inbounds [6 x i8]* %reflags, i64 0, i64 %idxprom138
  store i8 %46, i8* %arrayidx139, align 1, !tbaa !1
  br label %if.end140

if.end140:                                        ; preds = %if.else137, %if.then135
  %left.1 = phi i32 [ %inc, %if.then135 ], [ %left.0743, %if.else137 ]
  %right.1 = phi i32 [ %right.0744, %if.then135 ], [ %dec, %if.else137 ]
  %conv132 = lshr i32 %reganch.0745, 1
  %incdec.ptr = getelementptr inbounds i8* %incdec.ptr746, i64 1
  %47 = load i8* %incdec.ptr746, align 1, !tbaa !1
  %exitcond = icmp eq i8* %incdec.ptr, getelementptr inbounds ([5 x i8]* @.str11, i64 1, i64 0)
  br i1 %exitcond, label %while.end, label %while.body

while.end:                                        ; preds = %if.end140
  %cmp144 = icmp eq i32 %left.1, 4
  br i1 %cmp144, label %if.end149, label %if.then146

if.then146:                                       ; preds = %while.end
  %idxprom147 = sext i32 %left.1 to i64
  %arrayidx148 = getelementptr inbounds [6 x i8]* %reflags, i64 0, i64 %idxprom147
  store i8 45, i8* %arrayidx148, align 1, !tbaa !1
  br label %if.end149

if.end149:                                        ; preds = %while.end, %if.then146
  %left.2 = phi i32 [ 5, %if.then146 ], [ 4, %while.end ]
  %48 = getelementptr inbounds %struct.sv* %42, i64 4, i32 2
  %49 = load i32* %48, align 4, !tbaa !3
  %add = add i32 %left.2, 4
  %add150 = add i32 %add, %49
  %mg_len = getelementptr inbounds %struct.magic* %call123, i64 0, i32 7
  store i32 %add150, i32* %mg_len, align 4, !tbaa !3
  %50 = load i32* %44, align 4, !tbaa !3
  %and152 = and i32 %50, 32768
  %tobool153 = icmp eq i32 %and152, 0
  %.pre756 = getelementptr inbounds %struct.sv* %42, i64 2, i32 0
  br i1 %tobool153, label %if.end175, label %if.then154

if.then154:                                       ; preds = %if.end149
  %51 = load i8** %.pre756, align 8, !tbaa !0
  %52 = load i32* %48, align 4, !tbaa !3
  %idx.ext = sext i32 %52 to i64
  %add.ptr = getelementptr inbounds i8* %51, i64 %idx.ext
  br label %while.cond156

while.cond156:                                    ; preds = %if.end166, %if.then154
  %endptr.0 = phi i8* [ %add.ptr, %if.then154 ], [ %incdec.ptr161, %if.end166 ]
  %cmp158 = icmp ult i8* %endptr.0, %51
  br i1 %cmp158, label %if.end175, label %while.body160

while.body160:                                    ; preds = %while.cond156
  %53 = load i8* %endptr.0, align 1, !tbaa !1
  %cmp163 = icmp eq i8 %53, 10
  br i1 %cmp163, label %if.end175, label %if.end166

if.end166:                                        ; preds = %while.body160
  %incdec.ptr161 = getelementptr inbounds i8* %endptr.0, i64 -1
  %cmp168 = icmp eq i8 %53, 35
  br i1 %cmp168, label %if.then170, label %while.cond156

if.then170:                                       ; preds = %if.end166
  %inc172 = add nsw i32 %add150, 1
  store i32 %inc172, i32* %mg_len, align 4, !tbaa !3
  br label %if.end175

if.end175:                                        ; preds = %if.end149, %while.cond156, %while.body160, %if.then170
  %54 = phi i32 [ %inc172, %if.then170 ], [ %add150, %while.body160 ], [ %add150, %while.cond156 ], [ %add150, %if.end149 ]
  %need_newline.0 = phi i1 [ true, %if.then170 ], [ false, %while.body160 ], [ false, %while.cond156 ], [ false, %if.end149 ]
  %add177 = add i32 %left.2, 1
  %add178 = add i32 %add177, %54
  %conv179 = sext i32 %add178 to i64
  %call180 = call i8* @Perl_safesysmalloc(i64 %conv179) #8
  store i8* %call180, i8** %mg_ptr, align 8, !tbaa !0
  %55 = bitcast i8* %call180 to i16*
  store i16 16168, i16* %55, align 1
  %56 = load i8** %mg_ptr, align 8, !tbaa !0
  %add.ptr184 = getelementptr inbounds i8* %56, i64 2
  %arraydecay185 = getelementptr inbounds [6 x i8]* %reflags, i64 0, i64 0
  %conv186741 = zext i32 %left.2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr184, i8* %arraydecay185, i64 %conv186741, i32 1, i1 false)
  %57 = load i8** %mg_ptr, align 8, !tbaa !0
  %add.ptr190.sum742 = or i64 %conv186741, 2
  %add.ptr191 = getelementptr inbounds i8* %57, i64 %add.ptr190.sum742
  store i8 58, i8* %add.ptr191, align 1
  %58 = load i8** %mg_ptr, align 8, !tbaa !0
  %add.ptr193.sum = add i64 %conv186741, 3
  %add.ptr195 = getelementptr inbounds i8* %58, i64 %add.ptr193.sum
  %59 = load i8** %.pre756, align 8, !tbaa !0
  %60 = load i32* %48, align 4, !tbaa !3
  %conv198 = sext i32 %60 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr195, i8* %59, i64 %conv198, i32 1, i1 false)
  br i1 %need_newline.0, label %if.then201, label %if.end206

if.then201:                                       ; preds = %if.end175
  %61 = load i32* %mg_len, align 4, !tbaa !3
  %sub = add nsw i32 %61, -2
  %idxprom203 = sext i32 %sub to i64
  %62 = load i8** %mg_ptr, align 8, !tbaa !0
  %arrayidx205 = getelementptr inbounds i8* %62, i64 %idxprom203
  store i8 10, i8* %arrayidx205, align 1, !tbaa !1
  br label %if.end206

if.end206:                                        ; preds = %if.then201, %if.end175
  %63 = load i32* %mg_len, align 4, !tbaa !3
  %sub208 = add nsw i32 %63, -1
  %idxprom209 = sext i32 %sub208 to i64
  %64 = load i8** %mg_ptr, align 8, !tbaa !0
  %arrayidx211 = getelementptr inbounds i8* %64, i64 %idxprom209
  store i8 41, i8* %arrayidx211, align 1, !tbaa !1
  %65 = load i32* %mg_len, align 4, !tbaa !3
  %idxprom213 = sext i32 %65 to i64
  %66 = load i8** %mg_ptr, align 8, !tbaa !0
  %arrayidx215 = getelementptr inbounds i8* %66, i64 %idxprom213
  store i8 0, i8* %arrayidx215, align 1, !tbaa !1
  %.pre751 = load i8** %mg_ptr, align 8, !tbaa !0
  br label %if.end216

if.end216:                                        ; preds = %if.then125.if.end216_crit_edge, %if.end206
  %mg_len230.pre-phi = phi i32* [ %mg_len230.pre, %if.then125.if.end216_crit_edge ], [ %mg_len, %if.end206 ]
  %67 = phi i8* [ %43, %if.then125.if.end216_crit_edge ], [ %.pre751, %if.end206 ]
  %program = getelementptr inbounds %struct.sv* %42, i64 6
  %arrayidx217 = bitcast %struct.sv* %program to %struct.regnode*
  %next_off = getelementptr inbounds %struct.regnode* %arrayidx217, i64 0, i32 2
  %68 = load i16* %next_off, align 2, !tbaa !4
  %conv218 = zext i16 %68 to i32
  %69 = load i32* @PL_reginterp_cnt, align 4, !tbaa !3
  %add219 = add nsw i32 %69, %conv218
  store i32 %add219, i32* @PL_reginterp_cnt, align 4, !tbaa !3
  %70 = load i32* %44, align 4, !tbaa !3
  %and221 = and i32 %70, 65536
  %tobool222 = icmp eq i32 %and221, 0
  %71 = load i32* %sv_flags, align 4, !tbaa !3
  %and228 = and i32 %71, -536870913
  %or225 = or i32 %71, 536870912
  %storemerge714 = select i1 %tobool222, i32 %and228, i32 %or225
  store i32 %storemerge714, i32* %sv_flags, align 4, !tbaa !3
  %72 = load i32* %mg_len230.pre-phi, align 4, !tbaa !3
  %conv231 = sext i32 %72 to i64
  store i64 %conv231, i64* %lp, align 8, !tbaa !5
  br label %cleanup

sw.bb234:                                         ; preds = %land.lhs.true122.sw.bb234_crit_edge, %sw.bb, %if.else115, %if.else115, %if.else115, %if.else115, %if.else115, %if.else115, %if.else115, %if.else115
  %73 = phi i32 [ %.pre755, %land.lhs.true122.sw.bb234_crit_edge ], [ %41, %sw.bb ], [ %41, %if.else115 ], [ %41, %if.else115 ], [ %41, %if.else115 ], [ %41, %if.else115 ], [ %41, %if.else115 ], [ %41, %if.else115 ], [ %41, %if.else115 ], [ %41, %if.else115 ]
  %and236 = and i32 %73, 524288
  %tobool237 = icmp eq i32 %and236, 0
  %. = select i1 %tobool237, i8* getelementptr inbounds ([7 x i8]* @.str15, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8]* @.str14, i64 0, i64 0)
  br label %sw.epilog

sw.bb241:                                         ; preds = %if.else115
  %and243 = and i32 %41, 524288
  %tobool244 = icmp eq i32 %and243, 0
  br i1 %tobool244, label %cond.false246, label %sw.epilog

cond.false246:                                    ; preds = %sw.bb241
  %sv_any247 = getelementptr inbounds %struct.sv* %40, i64 0, i32 0
  %74 = load i8** %sv_any247, align 8, !tbaa !0
  %75 = getelementptr inbounds i8* %74, i64 80
  %76 = load i8* %75, align 1, !tbaa !1
  %cmp249 = icmp eq i8 %76, 116
  br i1 %cmp249, label %sw.epilog, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false246
  %cmp254 = icmp eq i8 %76, 84
  %phitmp = select i1 %cmp254, i8* getelementptr inbounds ([7 x i8]* @.str15, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str16, i64 0, i64 0)
  br label %sw.epilog

sw.bb260:                                         ; preds = %if.else115
  br label %sw.epilog

sw.bb261:                                         ; preds = %if.else115
  br label %sw.epilog

sw.bb262:                                         ; preds = %if.else115
  br label %sw.epilog

sw.bb263:                                         ; preds = %if.else115
  br label %sw.epilog

sw.bb264:                                         ; preds = %if.else115
  br label %sw.epilog

sw.default:                                       ; preds = %if.else115
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else115, %sw.bb241, %lor.rhs, %cond.false246, %sw.bb234, %sw.default, %sw.bb264, %sw.bb263, %sw.bb262, %sw.bb261, %sw.bb260
  %s.0 = phi i8* [ getelementptr inbounds ([8 x i8]* @.str23, i64 0, i64 0), %sw.default ], [ getelementptr inbounds ([3 x i8]* @.str22, i64 0, i64 0), %sw.bb264 ], [ getelementptr inbounds ([7 x i8]* @.str21, i64 0, i64 0), %sw.bb263 ], [ getelementptr inbounds ([5 x i8]* @.str20, i64 0, i64 0), %sw.bb262 ], [ getelementptr inbounds ([5 x i8]* @.str19, i64 0, i64 0), %sw.bb261 ], [ getelementptr inbounds ([5 x i8]* @.str18, i64 0, i64 0), %sw.bb260 ], [ %., %sw.bb234 ], [ getelementptr inbounds ([4 x i8]* @.str14, i64 0, i64 0), %sw.bb241 ], [ getelementptr inbounds ([7 x i8]* @.str15, i64 0, i64 0), %cond.false246 ], [ %phitmp, %lor.rhs ], [ getelementptr inbounds ([6 x i8]* @.str17, i64 0, i64 0), %if.else115 ]
  %call265 = call %struct.sv* @Perl_newSV(i64 0) #7
  %77 = load i32* %sv_flags116, align 4, !tbaa !3
  %and267 = and i32 %77, 4096
  %tobool268 = icmp eq i32 %and267, 0
  br i1 %tobool268, label %if.else277, label %if.then269

if.then269:                                       ; preds = %sw.epilog
  %sv_any270 = getelementptr inbounds %struct.sv* %40, i64 0, i32 0
  %78 = load i8** %sv_any270, align 8, !tbaa !0
  %xmg_stash = getelementptr inbounds i8* %78, i64 48
  %79 = bitcast i8* %xmg_stash to %struct.hv**
  %80 = load %struct.hv** %79, align 8, !tbaa !0
  %sv_any271 = getelementptr inbounds %struct.hv* %80, i64 0, i32 0
  %81 = load %struct.xpvhv** %sv_any271, align 8, !tbaa !0
  %xhv_name = getelementptr inbounds %struct.xpvhv* %81, i64 0, i32 10
  %82 = load i8** %xhv_name, align 8, !tbaa !0
  %tobool272 = icmp ne i8* %82, null
  %cond276 = select i1 %tobool272, i8* %82, i8* getelementptr inbounds ([9 x i8]* @.str25, i64 0, i64 0)
  %83 = ptrtoint %struct.sv* %40 to i64
  call void (%struct.sv*, i8*, ...)* @Perl_sv_setpvf(%struct.sv* %call265, i8* getelementptr inbounds ([13 x i8]* @.str24, i64 0, i64 0), i8* %cond276, i8* %s.0, i64 %83) #7
  br label %tokensaveref

if.else277:                                       ; preds = %sw.epilog
  %84 = ptrtoint %struct.sv* %40 to i64
  call void (%struct.sv*, i8*, ...)* @Perl_sv_setpvf(%struct.sv* %call265, i8* getelementptr inbounds ([10 x i8]* @.str26, i64 0, i64 0), i8* %s.0, i64 %84) #7
  br label %tokensaveref

if.end281:                                        ; preds = %if.then70
  %85 = and i32 %.pr, 126812160
  %86 = icmp eq i32 %85, 8388608
  br i1 %86, label %if.then289, label %if.end320

if.then289:                                       ; preds = %if.end281
  %87 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings290 = getelementptr inbounds %struct.cop* %87, i64 0, i32 14
  %88 = load %struct.sv** %cop_warnings290, align 8, !tbaa !0
  %cmp291 = icmp eq %struct.sv* %88, null
  br i1 %cmp291, label %lor.lhs.false309, label %land.lhs.true293

land.lhs.true293:                                 ; preds = %if.then289
  %89 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings294 = getelementptr inbounds %struct.cop* %89, i64 0, i32 14
  %90 = load %struct.sv** %cop_warnings294, align 8, !tbaa !0
  %cmp295 = icmp eq %struct.sv* %90, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp295, label %lor.lhs.false309, label %land.lhs.true297

land.lhs.true297:                                 ; preds = %land.lhs.true293
  %91 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings298 = getelementptr inbounds %struct.cop* %91, i64 0, i32 14
  %92 = load %struct.sv** %cop_warnings298, align 8, !tbaa !0
  %cmp299 = icmp eq %struct.sv* %92, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp299, label %if.then317, label %lor.lhs.false301

lor.lhs.false301:                                 ; preds = %land.lhs.true297
  %93 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings302 = getelementptr inbounds %struct.cop* %93, i64 0, i32 14
  %94 = load %struct.sv** %cop_warnings302, align 8, !tbaa !0
  %sv_any303 = getelementptr inbounds %struct.sv* %94, i64 0, i32 0
  %95 = load i8** %sv_any303, align 8, !tbaa !0
  %xpv_pv304 = bitcast i8* %95 to i8**
  %96 = load i8** %xpv_pv304, align 8, !tbaa !0
  %arrayidx305 = getelementptr inbounds i8* %96, i64 10
  %97 = load i8* %arrayidx305, align 1, !tbaa !1
  %and307 = and i8 %97, 4
  %tobool308 = icmp eq i8 %and307, 0
  br i1 %tobool308, label %lor.lhs.false309, label %if.then317

lor.lhs.false309:                                 ; preds = %lor.lhs.false301, %land.lhs.true293, %if.then289
  %98 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings310 = getelementptr inbounds %struct.cop* %98, i64 0, i32 14
  %99 = load %struct.sv** %cop_warnings310, align 8, !tbaa !0
  %cmp311 = icmp eq %struct.sv* %99, null
  br i1 %cmp311, label %land.lhs.true313, label %if.end318

land.lhs.true313:                                 ; preds = %lor.lhs.false309
  %100 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and315 = and i8 %100, 1
  %tobool316 = icmp eq i8 %and315, 0
  br i1 %tobool316, label %if.end318, label %if.then317

if.then317:                                       ; preds = %lor.lhs.false301, %land.lhs.true313, %land.lhs.true297
  call void @Perl_report_uninit() #7
  br label %if.end318

if.end318:                                        ; preds = %land.lhs.true313, %if.then317, %lor.lhs.false309
  store i64 0, i64* %lp, align 8, !tbaa !5
  br label %cleanup

if.end320:                                        ; preds = %if.end281, %if.end66
  %and322 = and i32 %.pr, 65536
  %tobool323 = icmp eq i32 %and322, 0
  %tobool323.not = xor i1 %tobool323, true
  %101 = and i32 %.pr, 50331648
  %102 = icmp eq i32 %101, 16777216
  %or.cond761 = or i1 %102, %tobool323.not
  br i1 %or.cond761, label %if.then332, label %if.else413

if.then332:                                       ; preds = %if.end320
  %and338 = and i32 %.pr, 255
  %cmp339 = icmp ult i32 %and338, 5
  br i1 %cmp339, label %if.then341, label %if.end343

if.then341:                                       ; preds = %if.then332
  %call342 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 5) #7
  br label %if.end343

if.end343:                                        ; preds = %if.then341, %if.then332
  %tobool344 = icmp slt i32 %.pr, 0
  %sv_any347 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %103 = load i8** %sv_any347, align 8, !tbaa !0
  %xuv_uv348 = getelementptr inbounds i8* %103, i64 24
  %104 = bitcast i8* %xuv_uv348 to i64*
  %105 = load i64* %104, align 8, !tbaa !5
  %add.ptr.i722 = getelementptr inbounds [22 x i8]* %buf, i64 0, i64 22
  br i1 %tobool344, label %do.body.i730, label %if.else350

do.body.i730:                                     ; preds = %if.end343, %do.body.i730
  %ptr.0.i723 = phi i8* [ %incdec.ptr.i728, %do.body.i730 ], [ %add.ptr.i722, %if.end343 ]
  %uv.addr.0.i724 = phi i64 [ %div.i729, %do.body.i730 ], [ %105, %if.end343 ]
  %rem.i725 = urem i64 %uv.addr.0.i724, 10
  %conv.i726 = trunc i64 %rem.i725 to i8
  %add17.i727 = or i8 %conv.i726, 48
  %incdec.ptr.i728 = getelementptr inbounds i8* %ptr.0.i723, i64 -1
  store i8 %add17.i727, i8* %incdec.ptr.i728, align 1, !tbaa !1
  %div.i729 = udiv i64 %uv.addr.0.i724, 10
  %106 = icmp ugt i64 %uv.addr.0.i724, 9
  br i1 %106, label %do.body.i730, label %if.end355

if.else350:                                       ; preds = %if.end343
  %cmp.i = icmp sgt i64 %105, -1
  %sub.i = sub nsw i64 0, %105
  %iv.sub.i = select i1 %cmp.i, i64 %105, i64 %sub.i
  br label %do.body.i

do.body.i:                                        ; preds = %do.body.i, %if.else350
  %ptr.0.i = phi i8* [ %incdec.ptr.i, %do.body.i ], [ %add.ptr.i722, %if.else350 ]
  %uv.addr.0.i = phi i64 [ %div.i, %do.body.i ], [ %iv.sub.i, %if.else350 ]
  %rem.i = urem i64 %uv.addr.0.i, 10
  %conv.i = trunc i64 %rem.i to i8
  %add17.i = or i8 %conv.i, 48
  %incdec.ptr.i = getelementptr inbounds i8* %ptr.0.i, i64 -1
  store i8 %add17.i, i8* %incdec.ptr.i, align 1, !tbaa !1
  %div.i = udiv i64 %uv.addr.0.i, 10
  %107 = icmp ugt i64 %uv.addr.0.i, 9
  br i1 %107, label %do.body.i, label %do.end.i

do.end.i:                                         ; preds = %do.body.i
  br i1 %cmp.i, label %if.end355, label %if.then8.i

if.then8.i:                                       ; preds = %do.end.i
  %incdec.ptr9.i = getelementptr inbounds i8* %ptr.0.i, i64 -2
  store i8 45, i8* %incdec.ptr9.i, align 1, !tbaa !1
  br label %if.end355

if.end355:                                        ; preds = %do.body.i730, %if.then8.i, %do.end.i
  %ptr.0 = phi i8* [ %incdec.ptr9.i, %if.then8.i ], [ %incdec.ptr.i, %do.end.i ], [ %incdec.ptr.i728, %do.body.i730 ]
  %108 = load i8** %sv_any347, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %108, i64 16
  %109 = bitcast i8* %xpv_len to i64*
  %110 = load i64* %109, align 8, !tbaa !5
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr.i722 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %ptr.0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add357 = add nsw i64 %sub.ptr.sub, 1
  %cmp358 = icmp ult i64 %110, %add357
  br i1 %cmp358, label %cond.true360, label %cond.end369

cond.true360:                                     ; preds = %if.end355
  %call365 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add357) #7
  %.pre747 = load i8** %sv_any347, align 8, !tbaa !0
  br label %cond.end369

cond.end369:                                      ; preds = %if.end355, %cond.true360
  %111 = phi i8* [ %108, %if.end355 ], [ %.pre747, %cond.true360 ]
  %xpv_pv372 = bitcast i8* %111 to i8**
  %112 = load i8** %xpv_pv372, align 8, !tbaa !0
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %112, i8* %ptr.0, i64 %sub.ptr.sub, i32 1, i1 false)
  %113 = load i8** %sv_any347, align 8, !tbaa !0
  %xpv_cur381 = getelementptr inbounds i8* %113, i64 8
  %114 = bitcast i8* %xpv_cur381 to i64*
  store i64 %sub.ptr.sub, i64* %114, align 8, !tbaa !5
  %xpv_pv383 = bitcast i8* %113 to i8**
  %115 = load i8** %xpv_pv383, align 8, !tbaa !0
  %add.ptr386 = getelementptr inbounds i8* %115, i64 %sub.ptr.sub
  store i8 0, i8* %add.ptr386, align 1, !tbaa !1
  %116 = load i32* %sv_flags, align 4, !tbaa !3
  %and390 = and i32 %116, 2097152
  %tobool391 = icmp ne i32 %and390, 0
  br i1 %tobool323, label %if.else396, label %if.then388

if.then388:                                       ; preds = %cond.end369
  br i1 %tobool391, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then388
  %call392 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre749 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then388
  %117 = phi i32 [ %.pre749, %land.rhs ], [ %116, %if.then388 ]
  %or395 = or i32 %117, 16842752
  br label %if.end407

if.else396:                                       ; preds = %cond.end369
  br i1 %tobool391, label %land.rhs400, label %land.end403

land.rhs400:                                      ; preds = %if.else396
  %call401 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre748 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end403

land.end403:                                      ; preds = %land.rhs400, %if.else396
  %118 = phi i32 [ %.pre748, %land.rhs400 ], [ %116, %if.else396 ]
  %or406 = or i32 %118, 16777216
  br label %if.end407

if.end407:                                        ; preds = %land.end403, %land.end
  %storemerge = phi i32 [ %or406, %land.end403 ], [ %or395, %land.end ]
  store i32 %storemerge, i32* %sv_flags, align 4, !tbaa !3
  br i1 %tobool344, label %if.then409, label %if.end492

if.then409:                                       ; preds = %if.end407
  %or411 = or i32 %storemerge, -2147483648
  store i32 %or411, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end492

if.else413:                                       ; preds = %if.end320
  %and330 = and i32 %.pr, 33554432
  %tobool331 = icmp eq i32 %and330, 0
  br i1 %tobool331, label %if.else448, label %if.then417

if.then417:                                       ; preds = %if.else413
  %and419 = and i32 %.pr, 254
  %cmp420 = icmp ult i32 %and419, 6
  br i1 %cmp420, label %if.then422, label %if.end424

if.then422:                                       ; preds = %if.then417
  %call423 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  br label %if.end424

if.end424:                                        ; preds = %if.then422, %if.then417
  %sv_any425 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %119 = load i8** %sv_any425, align 8, !tbaa !0
  %xpv_len426 = getelementptr inbounds i8* %119, i64 16
  %120 = bitcast i8* %xpv_len426 to i64*
  %121 = load i64* %120, align 8, !tbaa !5
  %cmp427 = icmp ult i64 %121, 35
  br i1 %cmp427, label %cond.true429, label %cond.end434

cond.true429:                                     ; preds = %if.end424
  %call430 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 35) #7
  %.pre = load i8** %sv_any425, align 8, !tbaa !0
  br label %cond.end434

cond.end434:                                      ; preds = %if.end424, %cond.true429
  %122 = phi i8* [ %119, %if.end424 ], [ %.pre, %cond.true429 ]
  %xpv_pv437 = bitcast i8* %122 to i8**
  %123 = load i8** %xpv_pv437, align 8, !tbaa !0
  %call438 = call i32* @__errno_location() #8
  %124 = load i32* %call438, align 4, !tbaa !3
  %125 = load i8** %sv_any425, align 8, !tbaa !0
  %xnv_nv440 = getelementptr inbounds i8* %125, i64 32
  %126 = bitcast i8* %xnv_nv440 to double*
  %127 = load double* %126, align 8, !tbaa !6
  %call441 = call i8* @gcvt(double %127, i32 15, i8* %123) #8
  %call442 = call i32* @__errno_location() #8
  store i32 %124, i32* %call442, align 4, !tbaa !3
  br label %while.cond443

while.cond443:                                    ; preds = %while.cond443, %cond.end434
  %s.1 = phi i8* [ %123, %cond.end434 ], [ %incdec.ptr446, %while.cond443 ]
  %128 = load i8* %s.1, align 1, !tbaa !1
  %tobool444 = icmp eq i8 %128, 0
  %incdec.ptr446 = getelementptr inbounds i8* %s.1, i64 1
  br i1 %tobool444, label %if.end492.loopexit, label %while.cond443

if.else448:                                       ; preds = %if.else413
  %129 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings449 = getelementptr inbounds %struct.cop* %129, i64 0, i32 14
  %130 = load %struct.sv** %cop_warnings449, align 8, !tbaa !0
  %cmp450 = icmp eq %struct.sv* %130, null
  br i1 %cmp450, label %lor.lhs.false468, label %land.lhs.true452

land.lhs.true452:                                 ; preds = %if.else448
  %131 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings453 = getelementptr inbounds %struct.cop* %131, i64 0, i32 14
  %132 = load %struct.sv** %cop_warnings453, align 8, !tbaa !0
  %cmp454 = icmp eq %struct.sv* %132, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp454, label %lor.lhs.false468, label %land.lhs.true456

land.lhs.true456:                                 ; preds = %land.lhs.true452
  %133 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings457 = getelementptr inbounds %struct.cop* %133, i64 0, i32 14
  %134 = load %struct.sv** %cop_warnings457, align 8, !tbaa !0
  %cmp458 = icmp eq %struct.sv* %134, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp458, label %land.lhs.true476, label %lor.lhs.false460

lor.lhs.false460:                                 ; preds = %land.lhs.true456
  %135 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings461 = getelementptr inbounds %struct.cop* %135, i64 0, i32 14
  %136 = load %struct.sv** %cop_warnings461, align 8, !tbaa !0
  %sv_any462 = getelementptr inbounds %struct.sv* %136, i64 0, i32 0
  %137 = load i8** %sv_any462, align 8, !tbaa !0
  %xpv_pv463 = bitcast i8* %137 to i8**
  %138 = load i8** %xpv_pv463, align 8, !tbaa !0
  %arrayidx464 = getelementptr inbounds i8* %138, i64 10
  %139 = load i8* %arrayidx464, align 1, !tbaa !1
  %and466 = and i8 %139, 4
  %tobool467 = icmp eq i8 %and466, 0
  br i1 %tobool467, label %lor.lhs.false468, label %land.lhs.true476

lor.lhs.false468:                                 ; preds = %lor.lhs.false460, %land.lhs.true452, %if.else448
  %140 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings469 = getelementptr inbounds %struct.cop* %140, i64 0, i32 14
  %141 = load %struct.sv** %cop_warnings469, align 8, !tbaa !0
  %cmp470 = icmp eq %struct.sv* %141, null
  br i1 %cmp470, label %land.lhs.true472, label %if.end483

land.lhs.true472:                                 ; preds = %lor.lhs.false468
  %142 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and474 = and i8 %142, 1
  %tobool475 = icmp eq i8 %and474, 0
  %143 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool477 = icmp ne i32 %143, 0
  %or.cond556 = or i1 %tobool475, %tobool477
  br i1 %or.cond556, label %if.end483, label %land.lhs.true478

land.lhs.true476:                                 ; preds = %lor.lhs.false460, %land.lhs.true456
  %.old555 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool477.old = icmp eq i32 %.old555, 0
  br i1 %tobool477.old, label %land.lhs.true478, label %if.end483

land.lhs.true478:                                 ; preds = %land.lhs.true476, %land.lhs.true472
  %144 = load i32* %sv_flags, align 4, !tbaa !3
  %and480 = and i32 %144, 512
  %tobool481 = icmp eq i32 %and480, 0
  br i1 %tobool481, label %if.then482, label %if.end483

if.then482:                                       ; preds = %land.lhs.true478
  call void @Perl_report_uninit() #7
  br label %if.end483

if.end483:                                        ; preds = %land.lhs.true476, %land.lhs.true472, %lor.lhs.false468, %land.lhs.true478, %if.then482
  store i64 0, i64* %lp, align 8, !tbaa !5
  %145 = load i32* %sv_flags, align 4, !tbaa !3
  %and485 = and i32 %145, 252
  %cmp486 = icmp ult i32 %and485, 4
  br i1 %cmp486, label %if.then488, label %cleanup

if.then488:                                       ; preds = %if.end483
  %call489 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 4) #7
  br label %cleanup

if.end492.loopexit:                               ; preds = %while.cond443
  %.pre750 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end492

if.end492:                                        ; preds = %if.end492.loopexit, %if.end407, %if.then409
  %146 = phi i32 [ %or411, %if.then409 ], [ %storemerge, %if.end407 ], [ %.pre750, %if.end492.loopexit ]
  %s.2 = phi i8* [ %add.ptr386, %if.then409 ], [ %add.ptr386, %if.end407 ], [ %s.1, %if.end492.loopexit ]
  %sv_any493 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %147 = load i8** %sv_any493, align 8, !tbaa !0
  %xpv_pv494 = bitcast i8* %147 to i8**
  %148 = load i8** %xpv_pv494, align 8, !tbaa !0
  %sub.ptr.lhs.cast495 = ptrtoint i8* %s.2 to i64
  %sub.ptr.rhs.cast496 = ptrtoint i8* %148 to i64
  %sub.ptr.sub497 = sub i64 %sub.ptr.lhs.cast495, %sub.ptr.rhs.cast496
  store i64 %sub.ptr.sub497, i64* %lp, align 8, !tbaa !5
  %xpv_cur499 = getelementptr inbounds i8* %147, i64 8
  %149 = bitcast i8* %xpv_cur499 to i64*
  store i64 %sub.ptr.sub497, i64* %149, align 8, !tbaa !5
  %or501 = or i32 %146, 67371008
  store i32 %or501, i32* %sv_flags, align 4, !tbaa !3
  br label %cleanup

tokensave:                                        ; preds = %if.then20, %if.else, %if.then30
  %150 = load i32* %sv_flags, align 4, !tbaa !3
  %and505 = and i32 %150, 524288
  %tobool506 = icmp eq i32 %and505, 0
  br i1 %tobool506, label %if.else525, label %if.then509

tokensaveref:                                     ; preds = %if.then269, %if.else277
  %tobool508 = icmp eq %struct.sv* %call265, null
  br i1 %tobool508, label %if.then509, label %if.end511

if.then509:                                       ; preds = %tokensave, %tokensaveref
  %call510 = call %struct.sv* @Perl_newSVpv(i8* %0, i64 0) #7
  br label %if.end511

if.end511:                                        ; preds = %tokensaveref, %if.then509
  %tsv.2 = phi %struct.sv* [ %call265, %tokensaveref ], [ %call510, %if.then509 ]
  %call512 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %tsv.2) #7
  %sv_any513 = getelementptr inbounds %struct.sv* %tsv.2, i64 0, i32 0
  %151 = load i8** %sv_any513, align 8, !tbaa !0
  %xpv_cur514 = getelementptr inbounds i8* %151, i64 8
  %152 = bitcast i8* %xpv_cur514 to i64*
  %153 = load i64* %152, align 8, !tbaa !5
  store i64 %153, i64* %lp, align 8, !tbaa !5
  %xpv_pv516 = bitcast i8* %151 to i8**
  %154 = load i8** %xpv_pv516, align 8, !tbaa !0
  br label %cleanup

if.else525:                                       ; preds = %tokensave
  %call526 = call i64 @strlen(i8* %0) #8
  %and529 = and i32 %150, 252
  %cmp530 = icmp eq i32 %and529, 0
  br i1 %cmp530, label %lor.rhs532, label %lor.end536

lor.rhs532:                                       ; preds = %if.else525
  %call533 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 4) #7
  br label %lor.end536

lor.end536:                                       ; preds = %if.else525, %lor.rhs532
  store i64 %call526, i64* %lp, align 8, !tbaa !5
  %sv_any537 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %155 = load i8** %sv_any537, align 8, !tbaa !0
  %xpv_len538 = getelementptr inbounds i8* %155, i64 16
  %156 = bitcast i8* %xpv_len538 to i64*
  %157 = load i64* %156, align 8, !tbaa !5
  %add539 = add i64 %call526, 1
  %cmp540 = icmp ult i64 %157, %add539
  br i1 %cmp540, label %cond.true542, label %cond.false545

cond.true542:                                     ; preds = %lor.end536
  %call544 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add539) #7
  %.pre754 = load i8** %sv_any537, align 8, !tbaa !0
  br label %cond.end548

cond.false545:                                    ; preds = %lor.end536
  %xpv_pv547 = bitcast i8* %155 to i8**
  %158 = load i8** %xpv_pv547, align 8, !tbaa !0
  br label %cond.end548

cond.end548:                                      ; preds = %cond.false545, %cond.true542
  %159 = phi i8* [ %.pre754, %cond.true542 ], [ %155, %cond.false545 ]
  %cond549 = phi i8* [ %call544, %cond.true542 ], [ %158, %cond.false545 ]
  %xpv_cur551 = getelementptr inbounds i8* %159, i64 8
  %160 = bitcast i8* %xpv_cur551 to i64*
  store i64 %call526, i64* %160, align 8, !tbaa !5
  %161 = load i32* %sv_flags, align 4, !tbaa !3
  %or553 = or i32 %161, 67108864
  store i32 %or553, i32* %sv_flags, align 4, !tbaa !3
  %call554 = call i8* @strcpy(i8* %cond549, i8* %0) #8
  br label %cleanup

cleanup:                                          ; preds = %if.end483, %if.then488, %cond.end548, %if.end511, %if.end492, %if.end318, %if.then114, %if.end216, %cond.end, %if.end64, %if.then10, %if.then
  %retval.0 = phi i8* [ %6, %if.then10 ], [ %154, %if.end511 ], [ %call554, %cond.end548 ], [ %cond, %cond.end ], [ %67, %if.end216 ], [ getelementptr inbounds ([8 x i8]* @.str10, i64 0, i64 0), %if.then114 ], [ %148, %if.end492 ], [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.end318 ], [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.end64 ], [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.then ], [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.then488 ], [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.end483 ]
  call void @llvm.lifetime.end(i64 64, i8* %0) #3
  ret i8* %retval.0
}

; Function Attrs: optsize
declare i32 @Perl_grok_number(i8*, i64, i64*) #2

; Function Attrs: nounwind optsize uwtable
define i64 @Perl_sv_2iv(%struct.sv* %sv) #0 {
entry:
  %value.i = alloca i64, align 8
  %value = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end55, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = call i32 @Perl_mg_get(%struct.sv* %sv) #8
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and4 = and i32 %1, 16777216
  %tobool5 = icmp eq i32 %and4, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then2
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %2 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %2, i64 24
  %3 = bitcast i8* %xiv_iv to i64*
  %4 = load i64* %3, align 8, !tbaa !5
  br label %return

if.end7:                                          ; preds = %if.then2
  %and9 = and i32 %1, 33554432
  %tobool10 = icmp eq i32 %and9, 0
  br i1 %tobool10, label %if.end14, label %if.then11

if.then11:                                        ; preds = %if.end7
  %sv_any12 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %5 = load i8** %sv_any12, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %5, i64 32
  %6 = bitcast i8* %xnv_nv to double*
  %7 = load double* %6, align 8, !tbaa !6
  %call13 = call i64 @Perl_cast_iv(double %7) #8
  br label %return

if.end14:                                         ; preds = %if.end7
  %and16 = and i32 %1, 67108864
  %tobool17 = icmp eq i32 %and16, 0
  br i1 %tobool17, label %if.end22, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end14
  %sv_any18 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %8 = load i8** %sv_any18, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %8, i64 16
  %9 = bitcast i8* %xpv_len to i64*
  %10 = load i64* %9, align 8, !tbaa !5
  %tobool19 = icmp eq i64 %10, 0
  br i1 %tobool19, label %if.end22, label %if.then20

if.then20:                                        ; preds = %land.lhs.true
  %11 = bitcast i64* %value.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #3
  %xpv_pv.i = bitcast i8* %8 to i8**
  %12 = load i8** %xpv_pv.i, align 8, !tbaa !0
  %xpv_cur.i = getelementptr inbounds i8* %8, i64 8
  %13 = bitcast i8* %xpv_cur.i to i64*
  %14 = load i64* %13, align 8, !tbaa !5
  %call.i = call i32 @Perl_grok_number(i8* %12, i64 %14, i64* %value.i) #8
  %and.i = and i32 %call.i, 5
  %cmp.i = icmp eq i32 %and.i, 1
  br i1 %cmp.i, label %if.then.i, label %if.end10.i

if.then.i:                                        ; preds = %if.then20
  %and2.i = and i32 %call.i, 8
  %tobool.i = icmp eq i32 %and2.i, 0
  %15 = load i64* %value.i, align 8, !tbaa !5
  br i1 %tobool.i, label %if.else.i, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i
  %cmp4.i = icmp sgt i64 %15, -1
  br i1 %cmp4.i, label %if.then5.i, label %if.end10.i

if.then5.i:                                       ; preds = %if.then3.i
  %sub.i = sub nsw i64 0, %15
  br label %return

if.else.i:                                        ; preds = %if.then.i
  %cmp6.i = icmp ult i64 %15, 9223372036854775807
  br i1 %cmp6.i, label %return, label %if.end10.i

if.end10.i:                                       ; preds = %if.else.i, %if.then3.i, %if.then20
  %tobool11.i = icmp eq i32 %call.i, 0
  br i1 %tobool11.i, label %if.then12.i, label %if.end34.i

if.then12.i:                                      ; preds = %if.end10.i
  %16 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings.i = getelementptr inbounds %struct.cop* %16, i64 0, i32 14
  %17 = load %struct.sv** %cop_warnings.i, align 8, !tbaa !0
  %cmp13.i = icmp eq %struct.sv* %17, null
  br i1 %cmp13.i, label %lor.lhs.false24.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.then12.i
  %18 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings14.i = getelementptr inbounds %struct.cop* %18, i64 0, i32 14
  %19 = load %struct.sv** %cop_warnings14.i, align 8, !tbaa !0
  %cmp15.i = icmp eq %struct.sv* %19, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp15.i, label %lor.lhs.false24.i, label %land.lhs.true16.i

land.lhs.true16.i:                                ; preds = %land.lhs.true.i
  %20 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings17.i = getelementptr inbounds %struct.cop* %20, i64 0, i32 14
  %21 = load %struct.sv** %cop_warnings17.i, align 8, !tbaa !0
  %cmp18.i = icmp eq %struct.sv* %21, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp18.i, label %if.then32.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true16.i
  %22 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings19.i = getelementptr inbounds %struct.cop* %22, i64 0, i32 14
  %23 = load %struct.sv** %cop_warnings19.i, align 8, !tbaa !0
  %sv_any20.i = getelementptr inbounds %struct.sv* %23, i64 0, i32 0
  %24 = load i8** %sv_any20.i, align 8, !tbaa !0
  %xpv_pv21.i = bitcast i8* %24 to i8**
  %25 = load i8** %xpv_pv21.i, align 8, !tbaa !0
  %arrayidx.i = getelementptr inbounds i8* %25, i64 3
  %26 = load i8* %arrayidx.i, align 1, !tbaa !1
  %and22.i = and i8 %26, 4
  %tobool23.i = icmp eq i8 %and22.i, 0
  br i1 %tobool23.i, label %lor.lhs.false24.i, label %if.then32.i

lor.lhs.false24.i:                                ; preds = %lor.lhs.false.i, %land.lhs.true.i, %if.then12.i
  %27 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings25.i = getelementptr inbounds %struct.cop* %27, i64 0, i32 14
  %28 = load %struct.sv** %cop_warnings25.i, align 8, !tbaa !0
  %cmp26.i = icmp eq %struct.sv* %28, null
  br i1 %cmp26.i, label %land.lhs.true28.i, label %if.end34.i

land.lhs.true28.i:                                ; preds = %lor.lhs.false24.i
  %29 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and30.i = and i8 %29, 1
  %tobool31.i = icmp eq i8 %and30.i, 0
  br i1 %tobool31.i, label %if.end34.i, label %if.then32.i

if.then32.i:                                      ; preds = %land.lhs.true28.i, %lor.lhs.false.i, %land.lhs.true16.i
  call fastcc void @S_not_a_number(%struct.sv* %sv) #8
  br label %if.end34.i

if.end34.i:                                       ; preds = %if.then32.i, %land.lhs.true28.i, %lor.lhs.false24.i, %if.end10.i
  %30 = load i8** %sv_any18, align 8, !tbaa !0
  %xpv_pv36.i = bitcast i8* %30 to i8**
  %31 = load i8** %xpv_pv36.i, align 8, !tbaa !0
  %call37.i = call double @Perl_my_atof(i8* %31) #8
  %call38.i = call i64 @Perl_cast_iv(double %call37.i) #8
  br label %return

if.end22:                                         ; preds = %land.lhs.true, %if.end14
  %and24 = and i32 %1, 524288
  %tobool25 = icmp eq i32 %and24, 0
  br i1 %tobool25, label %if.then26, label %if.end55

if.then26:                                        ; preds = %if.end22
  %and28 = and i32 %1, 512
  %tobool29 = icmp eq i32 %and28, 0
  br i1 %tobool29, label %if.then30, label %return

if.then30:                                        ; preds = %if.then26
  %32 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %32, i64 0, i32 14
  %33 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp = icmp eq %struct.sv* %33, null
  br i1 %cmp, label %lor.lhs.false41, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %if.then30
  %34 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings32 = getelementptr inbounds %struct.cop* %34, i64 0, i32 14
  %35 = load %struct.sv** %cop_warnings32, align 8, !tbaa !0
  %cmp33 = icmp eq %struct.sv* %35, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp33, label %lor.lhs.false41, label %land.lhs.true34

land.lhs.true34:                                  ; preds = %land.lhs.true31
  %36 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings35 = getelementptr inbounds %struct.cop* %36, i64 0, i32 14
  %37 = load %struct.sv** %cop_warnings35, align 8, !tbaa !0
  %cmp36 = icmp eq %struct.sv* %37, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp36, label %land.lhs.true49, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true34
  %38 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings37 = getelementptr inbounds %struct.cop* %38, i64 0, i32 14
  %39 = load %struct.sv** %cop_warnings37, align 8, !tbaa !0
  %sv_any38 = getelementptr inbounds %struct.sv* %39, i64 0, i32 0
  %40 = load i8** %sv_any38, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %40 to i8**
  %41 = load i8** %xpv_pv, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %41, i64 10
  %42 = load i8* %arrayidx, align 1, !tbaa !1
  %and39 = and i8 %42, 4
  %tobool40 = icmp eq i8 %and39, 0
  br i1 %tobool40, label %lor.lhs.false41, label %land.lhs.true49

lor.lhs.false41:                                  ; preds = %lor.lhs.false, %land.lhs.true31, %if.then30
  %43 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings42 = getelementptr inbounds %struct.cop* %43, i64 0, i32 14
  %44 = load %struct.sv** %cop_warnings42, align 8, !tbaa !0
  %cmp43 = icmp eq %struct.sv* %44, null
  br i1 %cmp43, label %land.lhs.true45, label %return

land.lhs.true45:                                  ; preds = %lor.lhs.false41
  %45 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and47 = and i8 %45, 1
  %tobool48 = icmp eq i8 %and47, 0
  %46 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool50 = icmp ne i32 %46, 0
  %or.cond = or i1 %tobool48, %tobool50
  br i1 %or.cond, label %return, label %if.then51

land.lhs.true49:                                  ; preds = %lor.lhs.false, %land.lhs.true34
  %.old = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool50.old = icmp eq i32 %.old, 0
  br i1 %tobool50.old, label %if.then51, label %return

if.then51:                                        ; preds = %land.lhs.true49, %land.lhs.true45
  call void @Perl_report_uninit() #7
  br label %return

if.end55:                                         ; preds = %if.end22, %if.end
  %47 = phi i32 [ %1, %if.end22 ], [ %0, %if.end ]
  %and57 = and i32 %47, 9961472
  %tobool58 = icmp eq i32 %and57, 0
  br i1 %tobool58, label %if.end138, label %if.then59

if.then59:                                        ; preds = %if.end55
  %and61 = and i32 %47, 524288
  %tobool62 = icmp eq i32 %and61, 0
  br i1 %tobool62, label %if.end90, label %if.then63

if.then63:                                        ; preds = %if.then59
  %and65 = and i32 %47, 268435456
  %tobool66 = icmp eq i32 %and65, 0
  br i1 %tobool66, label %if.end87, label %land.lhs.true67

land.lhs.true67:                                  ; preds = %if.then63
  %call68 = call %struct.sv* @Perl_amagic_call(%struct.sv* %sv, %struct.sv* @PL_sv_undef, i32 5, i32 9) #8
  %tobool69 = icmp eq %struct.sv* %call68, null
  br i1 %tobool69, label %if.end87, label %land.lhs.true70

land.lhs.true70:                                  ; preds = %land.lhs.true67
  %sv_flags71 = getelementptr inbounds %struct.sv* %call68, i64 0, i32 2
  %48 = load i32* %sv_flags71, align 4, !tbaa !3
  %and72 = and i32 %48, 524288
  %tobool73 = icmp eq i32 %and72, 0
  br i1 %tobool73, label %if.then80, label %lor.lhs.false74

lor.lhs.false74:                                  ; preds = %land.lhs.true70
  %sv_any75 = getelementptr inbounds %struct.sv* %call68, i64 0, i32 0
  %49 = load i8** %sv_any75, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %49 to %struct.sv**
  %50 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_any76 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %51 = load i8** %sv_any76, align 8, !tbaa !0
  %xrv_rv77 = bitcast i8* %51 to %struct.sv**
  %52 = load %struct.sv** %xrv_rv77, align 8, !tbaa !0
  %cmp78 = icmp eq %struct.sv* %50, %52
  br i1 %cmp78, label %if.end87, label %if.then80

if.then80:                                        ; preds = %lor.lhs.false74, %land.lhs.true70
  %and82 = and i32 %48, 65536
  %tobool83 = icmp eq i32 %and82, 0
  br i1 %tobool83, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then80
  %sv_any84 = getelementptr inbounds %struct.sv* %call68, i64 0, i32 0
  %53 = load i8** %sv_any84, align 8, !tbaa !0
  %xiv_iv85 = getelementptr inbounds i8* %53, i64 24
  %54 = bitcast i8* %xiv_iv85 to i64*
  %55 = load i64* %54, align 8, !tbaa !5
  br label %return

cond.false:                                       ; preds = %if.then80
  %call86 = call i64 @Perl_sv_2iv(%struct.sv* %call68) #7
  br label %return

if.end87:                                         ; preds = %land.lhs.true67, %if.then63, %lor.lhs.false74
  %sv_any88 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %56 = load i8** %sv_any88, align 8, !tbaa !0
  %xrv_rv89 = bitcast i8* %56 to %struct.sv**
  %57 = load %struct.sv** %xrv_rv89, align 8, !tbaa !0
  %58 = ptrtoint %struct.sv* %57 to i64
  br label %return

if.end90:                                         ; preds = %if.then59
  %59 = and i32 %47, 9437184
  %60 = icmp eq i32 %59, 9437184
  br i1 %60, label %if.then98, label %if.end99

if.then98:                                        ; preds = %if.end90
  call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre672 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end99

if.end99:                                         ; preds = %if.end90, %if.then98
  %61 = phi i32 [ %47, %if.end90 ], [ %.pre672, %if.then98 ]
  %62 = and i32 %61, 126812160
  %63 = icmp eq i32 %62, 8388608
  br i1 %63, label %if.then107, label %if.end138

if.then107:                                       ; preds = %if.end99
  %64 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings108 = getelementptr inbounds %struct.cop* %64, i64 0, i32 14
  %65 = load %struct.sv** %cop_warnings108, align 8, !tbaa !0
  %cmp109 = icmp eq %struct.sv* %65, null
  br i1 %cmp109, label %lor.lhs.false127, label %land.lhs.true111

land.lhs.true111:                                 ; preds = %if.then107
  %66 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings112 = getelementptr inbounds %struct.cop* %66, i64 0, i32 14
  %67 = load %struct.sv** %cop_warnings112, align 8, !tbaa !0
  %cmp113 = icmp eq %struct.sv* %67, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp113, label %lor.lhs.false127, label %land.lhs.true115

land.lhs.true115:                                 ; preds = %land.lhs.true111
  %68 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings116 = getelementptr inbounds %struct.cop* %68, i64 0, i32 14
  %69 = load %struct.sv** %cop_warnings116, align 8, !tbaa !0
  %cmp117 = icmp eq %struct.sv* %69, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp117, label %if.then135, label %lor.lhs.false119

lor.lhs.false119:                                 ; preds = %land.lhs.true115
  %70 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings120 = getelementptr inbounds %struct.cop* %70, i64 0, i32 14
  %71 = load %struct.sv** %cop_warnings120, align 8, !tbaa !0
  %sv_any121 = getelementptr inbounds %struct.sv* %71, i64 0, i32 0
  %72 = load i8** %sv_any121, align 8, !tbaa !0
  %xpv_pv122 = bitcast i8* %72 to i8**
  %73 = load i8** %xpv_pv122, align 8, !tbaa !0
  %arrayidx123 = getelementptr inbounds i8* %73, i64 10
  %74 = load i8* %arrayidx123, align 1, !tbaa !1
  %and125 = and i8 %74, 4
  %tobool126 = icmp eq i8 %and125, 0
  br i1 %tobool126, label %lor.lhs.false127, label %if.then135

lor.lhs.false127:                                 ; preds = %lor.lhs.false119, %land.lhs.true111, %if.then107
  %75 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings128 = getelementptr inbounds %struct.cop* %75, i64 0, i32 14
  %76 = load %struct.sv** %cop_warnings128, align 8, !tbaa !0
  %cmp129 = icmp eq %struct.sv* %76, null
  br i1 %cmp129, label %land.lhs.true131, label %return

land.lhs.true131:                                 ; preds = %lor.lhs.false127
  %77 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and133 = and i8 %77, 1
  %tobool134 = icmp eq i8 %and133, 0
  br i1 %tobool134, label %return, label %if.then135

if.then135:                                       ; preds = %lor.lhs.false119, %land.lhs.true131, %land.lhs.true115
  call void @Perl_report_uninit() #7
  br label %return

if.end138:                                        ; preds = %if.end99, %if.end55
  %78 = phi i32 [ %61, %if.end99 ], [ %47, %if.end55 ]
  %and140 = and i32 %78, 16777216
  %tobool141 = icmp eq i32 %and140, 0
  br i1 %tobool141, label %if.end150, label %if.then142

if.then142:                                       ; preds = %if.end138
  %sv_any147 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %79 = load i8** %sv_any147, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %79, i64 24
  %80 = bitcast i8* %xuv_uv to i64*
  %81 = load i64* %80, align 8, !tbaa !5
  br label %return

if.end150:                                        ; preds = %if.end138
  %and152 = and i32 %78, 33554432
  %tobool153 = icmp eq i32 %and152, 0
  br i1 %tobool153, label %if.else248, label %if.then154

if.then154:                                       ; preds = %if.end150
  %and156 = and i32 %78, 255
  %cmp157 = icmp eq i32 %and156, 2
  br i1 %cmp157, label %if.then159, label %if.end161

if.then159:                                       ; preds = %if.then154
  %call160 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  %.pre668 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end161

if.end161:                                        ; preds = %if.then159, %if.then154
  %82 = phi i32 [ %.pre668, %if.then159 ], [ %78, %if.then154 ]
  %and163 = and i32 %82, 2097152
  %tobool164 = icmp eq i32 %and163, 0
  br i1 %tobool164, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end161
  %call165 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre669 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %if.end161, %land.rhs
  %83 = phi i32 [ %.pre669, %land.rhs ], [ %82, %if.end161 ]
  %or = or i32 %83, 16777216
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %sv_any168 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %84 = load i8** %sv_any168, align 8, !tbaa !0
  %xnv_nv169 = getelementptr inbounds i8* %84, i64 32
  %85 = bitcast i8* %xnv_nv169 to double*
  %86 = load double* %85, align 8, !tbaa !6
  %cmp170 = fcmp olt double %86, 0x43E0000000000000
  br i1 %cmp170, label %if.then172, label %if.else213

if.then172:                                       ; preds = %land.end
  %call175 = call i64 @Perl_cast_iv(double %86) #8
  %87 = load i8** %sv_any168, align 8, !tbaa !0
  %xiv_iv177 = getelementptr inbounds i8* %87, i64 24
  %88 = bitcast i8* %xiv_iv177 to i64*
  store i64 %call175, i64* %88, align 8, !tbaa !5
  %xnv_nv179 = getelementptr inbounds i8* %87, i64 32
  %89 = bitcast i8* %xnv_nv179 to double*
  %90 = load double* %89, align 8, !tbaa !6
  %conv182 = sitofp i64 %call175 to double
  %cmp183 = fcmp oeq double %90, %conv182
  br i1 %cmp183, label %land.lhs.true185, label %if.end533

land.lhs.true185:                                 ; preds = %if.then172
  %cmp188 = icmp sgt i64 %call175, 0
  %sub = sub nsw i64 0, %call175
  %cond197 = select i1 %cmp188, i64 %call175, i64 %sub
  %cmp198 = icmp ult i64 %cond197, 4294967296
  br i1 %cmp198, label %if.then200, label %if.end533

if.then200:                                       ; preds = %land.lhs.true185
  %91 = load i32* %sv_flags, align 4, !tbaa !3
  %and202 = and i32 %91, 2097152
  %tobool203 = icmp eq i32 %and202, 0
  br i1 %tobool203, label %land.end207, label %land.rhs204

land.rhs204:                                      ; preds = %if.then200
  %call205 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre670 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end207

land.end207:                                      ; preds = %if.then200, %land.rhs204
  %92 = phi i32 [ %91, %if.then200 ], [ %.pre670, %land.rhs204 ]
  %or210 = or i32 %92, 16842752
  store i32 %or210, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end533

if.else213:                                       ; preds = %land.end
  %call216 = call i64 @Perl_cast_uv(double %86) #8
  %93 = load i8** %sv_any168, align 8, !tbaa !0
  %xuv_uv218 = getelementptr inbounds i8* %93, i64 24
  %94 = bitcast i8* %xuv_uv218 to i64*
  store i64 %call216, i64* %94, align 8, !tbaa !5
  %xnv_nv220 = getelementptr inbounds i8* %93, i64 32
  %95 = bitcast i8* %xnv_nv220 to double*
  %96 = load double* %95, align 8, !tbaa !6
  %conv223 = uitofp i64 %call216 to double
  %cmp224 = fcmp oeq double %96, %conv223
  %cmp229 = icmp ult i64 %call216, 4294967296
  %or.cond659 = and i1 %cmp224, %cmp229
  %97 = load i32* %sv_flags, align 4, !tbaa !3
  br i1 %or.cond659, label %if.then231, label %if.end242

if.then231:                                       ; preds = %if.else213
  %and233 = and i32 %97, 2097152
  %tobool234 = icmp eq i32 %and233, 0
  br i1 %tobool234, label %land.end238, label %land.rhs235

land.rhs235:                                      ; preds = %if.then231
  %call236 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre671 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end238

land.end238:                                      ; preds = %if.then231, %land.rhs235
  %98 = phi i32 [ %97, %if.then231 ], [ %.pre671, %land.rhs235 ]
  %or241 = or i32 %98, 16842752
  store i32 %or241, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end242

if.end242:                                        ; preds = %if.else213, %land.end238
  %99 = phi i32 [ %or241, %land.end238 ], [ %97, %if.else213 ]
  %or244 = or i32 %99, -2147483648
  store i32 %or244, i32* %sv_flags, align 4, !tbaa !3
  br label %ret_iv_max

ret_iv_max:                                       ; preds = %if.else480, %if.end242
  %sv_any245 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %100 = load i8** %sv_any245, align 8, !tbaa !0
  %xuv_uv246 = getelementptr inbounds i8* %100, i64 24
  %101 = bitcast i8* %xuv_uv246 to i64*
  %102 = load i64* %101, align 8, !tbaa !5
  br label %return

if.else248:                                       ; preds = %if.end150
  %and250 = and i32 %78, 67108864
  %tobool251 = icmp eq i32 %and250, 0
  br i1 %tobool251, label %if.else489, label %land.lhs.true252

land.lhs.true252:                                 ; preds = %if.else248
  %sv_any253 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %103 = load i8** %sv_any253, align 8, !tbaa !0
  %xpv_len254 = getelementptr inbounds i8* %103, i64 16
  %104 = bitcast i8* %xpv_len254 to i64*
  %105 = load i64* %104, align 8, !tbaa !5
  %tobool255 = icmp eq i64 %105, 0
  br i1 %tobool255, label %if.else489, label %if.then256

if.then256:                                       ; preds = %land.lhs.true252
  %xpv_pv258 = bitcast i8* %103 to i8**
  %106 = load i8** %xpv_pv258, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %103, i64 8
  %107 = bitcast i8* %xpv_cur to i64*
  %108 = load i64* %107, align 8, !tbaa !5
  %call260 = call i32 @Perl_grok_number(i8* %106, i64 %108, i64* %value) #8
  %and261 = and i32 %call260, 5
  %cmp262 = icmp eq i32 %and261, 1
  %109 = load i32* %sv_flags, align 4, !tbaa !3
  %and266 = and i32 %109, 255
  br i1 %cmp262, label %if.then264, label %if.else282

if.then264:                                       ; preds = %if.then256
  %cmp267 = icmp ult i32 %and266, 5
  br i1 %cmp267, label %if.then269, label %if.end271

if.then269:                                       ; preds = %if.then264
  %call270 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 5) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end271

if.end271:                                        ; preds = %if.then269, %if.then264
  %110 = phi i32 [ %.pre, %if.then269 ], [ %109, %if.then264 ]
  %and273 = and i32 %110, 2097152
  %tobool274 = icmp eq i32 %and273, 0
  br i1 %tobool274, label %land.end278, label %land.rhs275

land.rhs275:                                      ; preds = %if.end271
  %call276 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre660 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end278

land.end278:                                      ; preds = %if.end271, %land.rhs275
  %111 = phi i32 [ %110, %if.end271 ], [ %.pre660, %land.rhs275 ]
  %or281 = or i32 %111, 16842752
  store i32 %or281, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end290

if.else282:                                       ; preds = %if.then256
  %cmp285 = icmp ult i32 %and266, 6
  br i1 %cmp285, label %if.then287, label %if.end290

if.then287:                                       ; preds = %if.else282
  %call288 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  br label %if.end290

if.end290:                                        ; preds = %if.else282, %if.then287, %land.end278
  %and291 = and i32 %call260, 1
  %cmp292 = icmp eq i32 %and291, 0
  br i1 %cmp292, label %if.end356, label %if.then294

if.then294:                                       ; preds = %if.end290
  %112 = load i32* %sv_flags, align 4, !tbaa !3
  %and296 = and i32 %112, 2097152
  %tobool297 = icmp eq i32 %and296, 0
  br i1 %tobool297, label %land.end301, label %land.rhs298

land.rhs298:                                      ; preds = %if.then294
  %call299 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre665 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end301

land.end301:                                      ; preds = %if.then294, %land.rhs298
  %113 = phi i32 [ %112, %if.then294 ], [ %.pre665, %land.rhs298 ]
  %or304 = or i32 %113, 16777216
  store i32 %or304, i32* %sv_flags, align 4, !tbaa !3
  %and305 = and i32 %call260, 8
  %tobool306 = icmp eq i32 %and305, 0
  %114 = load i64* %value, align 8, !tbaa !5
  br i1 %tobool306, label %if.then307, label %if.else319

if.then307:                                       ; preds = %land.end301
  %cmp308 = icmp sgt i64 %114, -1
  %115 = load i8** %sv_any253, align 8, !tbaa !0
  %xiv_iv312 = getelementptr inbounds i8* %115, i64 24
  %116 = bitcast i8* %xiv_iv312 to i64*
  store i64 %114, i64* %116, align 8, !tbaa !5
  br i1 %cmp308, label %if.end356, label %if.else313

if.else313:                                       ; preds = %if.then307
  %or317 = or i32 %113, -2130706432
  store i32 %or317, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end356

if.else319:                                       ; preds = %land.end301
  %cmp320 = icmp ult i64 %114, -9223372036854775807
  br i1 %cmp320, label %if.then322, label %if.else326

if.then322:                                       ; preds = %if.else319
  %sub323 = sub nsw i64 0, %114
  %117 = load i8** %sv_any253, align 8, !tbaa !0
  %xiv_iv325 = getelementptr inbounds i8* %117, i64 24
  %118 = bitcast i8* %xiv_iv325 to i64*
  store i64 %sub323, i64* %118, align 8, !tbaa !5
  br label %if.end356

if.else326:                                       ; preds = %if.else319
  %and328 = and i32 %113, 254
  %cmp329 = icmp ult i32 %and328, 6
  br i1 %cmp329, label %if.then331, label %if.end333

if.then331:                                       ; preds = %if.else326
  %call332 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  %.pre666 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end333

if.end333:                                        ; preds = %if.then331, %if.else326
  %119 = phi i32 [ %.pre666, %if.then331 ], [ %or304, %if.else326 ]
  %or335 = and i32 %119, 2096955391
  %and337 = or i32 %or335, 33685504
  store i32 %and337, i32* %sv_flags, align 4, !tbaa !3
  %and339 = and i32 %119, 2097152
  %tobool340 = icmp eq i32 %and339, 0
  br i1 %tobool340, label %land.end344, label %land.rhs341

land.rhs341:                                      ; preds = %if.end333
  %call342 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre667 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end344

land.end344:                                      ; preds = %if.end333, %land.rhs341
  %120 = phi i32 [ %.pre667, %land.rhs341 ], [ %and337, %if.end333 ]
  %or347 = or i32 %120, 16777216
  store i32 %or347, i32* %sv_flags, align 4, !tbaa !3
  %121 = load i64* %value, align 8, !tbaa !5
  %conv348 = uitofp i64 %121 to double
  %sub349 = fsub double -0.000000e+00, %conv348
  %122 = load i8** %sv_any253, align 8, !tbaa !0
  %xnv_nv351 = getelementptr inbounds i8* %122, i64 32
  %123 = bitcast i8* %xnv_nv351 to double*
  store double %sub349, double* %123, align 8, !tbaa !6
  %xiv_iv353 = getelementptr inbounds i8* %122, i64 24
  %124 = bitcast i8* %xiv_iv353 to i64*
  store i64 -9223372036854775808, i64* %124, align 8, !tbaa !5
  br label %if.end356

if.end356:                                        ; preds = %if.then307, %if.end290, %if.else313, %land.end344, %if.then322
  br i1 %cmp262, label %if.end533, label %if.then360

if.then360:                                       ; preds = %if.end356
  %125 = load i8** %sv_any253, align 8, !tbaa !0
  %xpv_pv362 = bitcast i8* %125 to i8**
  %126 = load i8** %xpv_pv362, align 8, !tbaa !0
  %call363 = call double @Perl_my_atof(i8* %126) #8
  %127 = load i8** %sv_any253, align 8, !tbaa !0
  %xnv_nv365 = getelementptr inbounds i8* %127, i64 32
  %128 = bitcast i8* %xnv_nv365 to double*
  store double %call363, double* %128, align 8, !tbaa !6
  %tobool366 = icmp eq i32 %call260, 0
  br i1 %tobool366, label %land.lhs.true367, label %if.end396

land.lhs.true367:                                 ; preds = %if.then360
  %129 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings368 = getelementptr inbounds %struct.cop* %129, i64 0, i32 14
  %130 = load %struct.sv** %cop_warnings368, align 8, !tbaa !0
  %cmp369 = icmp eq %struct.sv* %130, null
  br i1 %cmp369, label %lor.lhs.false387, label %land.lhs.true371

land.lhs.true371:                                 ; preds = %land.lhs.true367
  %131 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings372 = getelementptr inbounds %struct.cop* %131, i64 0, i32 14
  %132 = load %struct.sv** %cop_warnings372, align 8, !tbaa !0
  %cmp373 = icmp eq %struct.sv* %132, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp373, label %lor.lhs.false387, label %land.lhs.true375

land.lhs.true375:                                 ; preds = %land.lhs.true371
  %133 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings376 = getelementptr inbounds %struct.cop* %133, i64 0, i32 14
  %134 = load %struct.sv** %cop_warnings376, align 8, !tbaa !0
  %cmp377 = icmp eq %struct.sv* %134, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp377, label %if.then395, label %lor.lhs.false379

lor.lhs.false379:                                 ; preds = %land.lhs.true375
  %135 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings380 = getelementptr inbounds %struct.cop* %135, i64 0, i32 14
  %136 = load %struct.sv** %cop_warnings380, align 8, !tbaa !0
  %sv_any381 = getelementptr inbounds %struct.sv* %136, i64 0, i32 0
  %137 = load i8** %sv_any381, align 8, !tbaa !0
  %xpv_pv382 = bitcast i8* %137 to i8**
  %138 = load i8** %xpv_pv382, align 8, !tbaa !0
  %arrayidx383 = getelementptr inbounds i8* %138, i64 3
  %139 = load i8* %arrayidx383, align 1, !tbaa !1
  %and385 = and i8 %139, 4
  %tobool386 = icmp eq i8 %and385, 0
  br i1 %tobool386, label %lor.lhs.false387, label %if.then395

lor.lhs.false387:                                 ; preds = %lor.lhs.false379, %land.lhs.true371, %land.lhs.true367
  %140 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings388 = getelementptr inbounds %struct.cop* %140, i64 0, i32 14
  %141 = load %struct.sv** %cop_warnings388, align 8, !tbaa !0
  %cmp389 = icmp eq %struct.sv* %141, null
  br i1 %cmp389, label %land.lhs.true391, label %if.end396

land.lhs.true391:                                 ; preds = %lor.lhs.false387
  %142 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and393 = and i8 %142, 1
  %tobool394 = icmp eq i8 %and393, 0
  br i1 %tobool394, label %if.end396, label %if.then395

if.then395:                                       ; preds = %lor.lhs.false379, %land.lhs.true391, %land.lhs.true375
  call fastcc void @S_not_a_number(%struct.sv* %sv) #7
  br label %if.end396

if.end396:                                        ; preds = %land.lhs.true391, %if.then360, %if.then395, %lor.lhs.false387
  %cmp398 = icmp eq i32 %and261, 5
  br i1 %cmp398, label %if.then400, label %if.else403

if.then400:                                       ; preds = %if.end396
  %143 = load i32* %sv_flags, align 4, !tbaa !3
  %or402 = or i32 %143, 33685504
  store i32 %or402, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end533

if.else403:                                       ; preds = %if.end396
  %144 = load i8** %sv_any253, align 8, !tbaa !0
  %xnv_nv405 = getelementptr inbounds i8* %144, i64 32
  %145 = bitcast i8* %xnv_nv405 to double*
  %146 = load double* %145, align 8, !tbaa !6
  %cmp406 = fcmp ogt double %146, 0.000000e+00
  br i1 %cmp406, label %cond.end415, label %cond.false411

cond.false411:                                    ; preds = %if.else403
  %sub414 = fsub double -0.000000e+00, %146
  br label %cond.end415

cond.end415:                                      ; preds = %if.else403, %cond.false411
  %cond416 = phi double [ %sub414, %cond.false411 ], [ %146, %if.else403 ]
  %call417 = call i64 @Perl_cast_uv(double %cond416) #8
  %cmp418 = icmp ult i64 %call417, 4294967296
  br i1 %cmp418, label %if.then420, label %if.else480

if.then420:                                       ; preds = %cond.end415
  %147 = load i32* %sv_flags, align 4, !tbaa !3
  %and422 = and i32 %147, 2097152
  %tobool423 = icmp eq i32 %and422, 0
  br i1 %tobool423, label %land.end427, label %land.rhs424

land.rhs424:                                      ; preds = %if.then420
  %call425 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre661 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end427

land.end427:                                      ; preds = %if.then420, %land.rhs424
  %148 = phi i32 [ %147, %if.then420 ], [ %.pre661, %land.rhs424 ]
  %or432 = or i32 %148, 50462720
  store i32 %or432, i32* %sv_flags, align 4, !tbaa !3
  %149 = load i8** %sv_any253, align 8, !tbaa !0
  %xnv_nv434 = getelementptr inbounds i8* %149, i64 32
  %150 = bitcast i8* %xnv_nv434 to double*
  %151 = load double* %150, align 8, !tbaa !6
  %call435 = call i64 @Perl_cast_iv(double %151) #8
  %152 = load i8** %sv_any253, align 8, !tbaa !0
  %xiv_iv437 = getelementptr inbounds i8* %152, i64 24
  %153 = bitcast i8* %xiv_iv437 to i64*
  store i64 %call435, i64* %153, align 8, !tbaa !5
  %conv440 = sitofp i64 %call435 to double
  %xnv_nv442 = getelementptr inbounds i8* %152, i64 32
  %154 = bitcast i8* %xnv_nv442 to double*
  %155 = load double* %154, align 8, !tbaa !6
  %cmp443 = fcmp oeq double %conv440, %155
  br i1 %cmp443, label %if.then445, label %if.end456

if.then445:                                       ; preds = %land.end427
  %156 = load i32* %sv_flags, align 4, !tbaa !3
  %and447 = and i32 %156, 2097152
  %tobool448 = icmp eq i32 %and447, 0
  br i1 %tobool448, label %land.end452, label %land.rhs449

land.rhs449:                                      ; preds = %if.then445
  %call450 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre662 = load i32* %sv_flags, align 4, !tbaa !3
  %.pre663.pre = load i8** %sv_any253, align 8, !tbaa !0
  %xnv_nv458.phi.trans.insert.phi.trans.insert = getelementptr inbounds i8* %.pre663.pre, i64 32
  %.phi.trans.insert.phi.trans.insert = bitcast i8* %xnv_nv458.phi.trans.insert.phi.trans.insert to double*
  %.pre664.pre = load double* %.phi.trans.insert.phi.trans.insert, align 8, !tbaa !6
  br label %land.end452

land.end452:                                      ; preds = %if.then445, %land.rhs449
  %.pre664 = phi double [ %155, %if.then445 ], [ %.pre664.pre, %land.rhs449 ]
  %157 = phi i32 [ %156, %if.then445 ], [ %.pre662, %land.rhs449 ]
  %or455 = or i32 %157, 16842752
  store i32 %or455, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end456

if.end456:                                        ; preds = %land.end452, %land.end427
  %158 = phi double [ %.pre664, %land.end452 ], [ %155, %land.end427 ]
  %cmp459 = fcmp ogt double %158, 0.000000e+00
  br i1 %cmp459, label %cond.end468, label %cond.false464

cond.false464:                                    ; preds = %if.end456
  %sub467 = fsub double -0.000000e+00, %158
  br label %cond.end468

cond.end468:                                      ; preds = %if.end456, %cond.false464
  %cond469 = phi double [ %sub467, %cond.false464 ], [ %158, %if.end456 ]
  %call470 = call i64 @Perl_cast_uv(double %cond469) #8
  %cmp471 = icmp ult i64 %call470, 9223372036854775807
  br i1 %cmp471, label %if.end533, label %if.then473

if.then473:                                       ; preds = %cond.end468
  %159 = load i8** %sv_any253, align 8, !tbaa !0
  %xnv_nv475 = getelementptr inbounds i8* %159, i64 32
  %160 = bitcast i8* %xnv_nv475 to double*
  %161 = load double* %160, align 8, !tbaa !6
  %call478 = call i64 @Perl_cast_uv(double %161) #8
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([107 x i8]* @.str6, i64 0, i64 0), double %161, i64 %call478, i64 9223372036854775807) #8
  br label %if.end533

if.else480:                                       ; preds = %cond.end415
  %call481 = call fastcc i32 @S_sv_2iuv_non_preserve(%struct.sv* %sv) #7
  %cmp482 = icmp sgt i32 %call481, 3
  br i1 %cmp482, label %ret_iv_max, label %if.end533

if.else489:                                       ; preds = %land.lhs.true252, %if.else248
  %162 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings490 = getelementptr inbounds %struct.cop* %162, i64 0, i32 14
  %163 = load %struct.sv** %cop_warnings490, align 8, !tbaa !0
  %cmp491 = icmp eq %struct.sv* %163, null
  br i1 %cmp491, label %lor.lhs.false509, label %land.lhs.true493

land.lhs.true493:                                 ; preds = %if.else489
  %164 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings494 = getelementptr inbounds %struct.cop* %164, i64 0, i32 14
  %165 = load %struct.sv** %cop_warnings494, align 8, !tbaa !0
  %cmp495 = icmp eq %struct.sv* %165, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp495, label %lor.lhs.false509, label %land.lhs.true497

land.lhs.true497:                                 ; preds = %land.lhs.true493
  %166 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings498 = getelementptr inbounds %struct.cop* %166, i64 0, i32 14
  %167 = load %struct.sv** %cop_warnings498, align 8, !tbaa !0
  %cmp499 = icmp eq %struct.sv* %167, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp499, label %land.lhs.true517, label %lor.lhs.false501

lor.lhs.false501:                                 ; preds = %land.lhs.true497
  %168 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings502 = getelementptr inbounds %struct.cop* %168, i64 0, i32 14
  %169 = load %struct.sv** %cop_warnings502, align 8, !tbaa !0
  %sv_any503 = getelementptr inbounds %struct.sv* %169, i64 0, i32 0
  %170 = load i8** %sv_any503, align 8, !tbaa !0
  %xpv_pv504 = bitcast i8* %170 to i8**
  %171 = load i8** %xpv_pv504, align 8, !tbaa !0
  %arrayidx505 = getelementptr inbounds i8* %171, i64 10
  %172 = load i8* %arrayidx505, align 1, !tbaa !1
  %and507 = and i8 %172, 4
  %tobool508 = icmp eq i8 %and507, 0
  br i1 %tobool508, label %lor.lhs.false509, label %land.lhs.true517

lor.lhs.false509:                                 ; preds = %lor.lhs.false501, %land.lhs.true493, %if.else489
  %173 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings510 = getelementptr inbounds %struct.cop* %173, i64 0, i32 14
  %174 = load %struct.sv** %cop_warnings510, align 8, !tbaa !0
  %cmp511 = icmp eq %struct.sv* %174, null
  br i1 %cmp511, label %land.lhs.true513, label %if.end524

land.lhs.true513:                                 ; preds = %lor.lhs.false509
  %175 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and515 = and i8 %175, 1
  %tobool516 = icmp eq i8 %and515, 0
  %176 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool518 = icmp ne i32 %176, 0
  %or.cond546 = or i1 %tobool516, %tobool518
  br i1 %or.cond546, label %if.end524, label %land.lhs.true519

land.lhs.true517:                                 ; preds = %lor.lhs.false501, %land.lhs.true497
  %.old545 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool518.old = icmp eq i32 %.old545, 0
  br i1 %tobool518.old, label %land.lhs.true519, label %if.end524

land.lhs.true519:                                 ; preds = %land.lhs.true517, %land.lhs.true513
  %177 = load i32* %sv_flags, align 4, !tbaa !3
  %and521 = and i32 %177, 512
  %tobool522 = icmp eq i32 %and521, 0
  br i1 %tobool522, label %if.then523, label %if.end524

if.then523:                                       ; preds = %land.lhs.true519
  call void @Perl_report_uninit() #7
  br label %if.end524

if.end524:                                        ; preds = %land.lhs.true517, %land.lhs.true513, %lor.lhs.false509, %land.lhs.true519, %if.then523
  %178 = load i32* %sv_flags, align 4, !tbaa !3
  %and526 = and i32 %178, 255
  %cmp527 = icmp eq i32 %and526, 0
  br i1 %cmp527, label %if.then529, label %return

if.then529:                                       ; preds = %if.end524
  %call530 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 1) #7
  br label %return

if.end533:                                        ; preds = %if.else480, %cond.end468, %if.end356, %if.then400, %if.then473, %if.then172, %land.lhs.true185, %land.end207
  %sv_any538 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %179 = load i8** %sv_any538, align 8, !tbaa !0
  %cond544.in.in = getelementptr inbounds i8* %179, i64 24
  %cond544.in = bitcast i8* %cond544.in.in to i64*
  %cond544 = load i64* %cond544.in, align 8
  br label %return

return:                                           ; preds = %if.end34.i, %if.else.i, %if.then5.i, %if.end524, %if.then529, %if.then142, %lor.lhs.false127, %if.then135, %land.lhs.true131, %cond.true, %cond.false, %land.lhs.true45, %if.then51, %lor.lhs.false41, %if.then26, %land.lhs.true49, %entry, %if.end533, %ret_iv_max, %if.end87, %if.then11, %if.then6
  %retval.0 = phi i64 [ %4, %if.then6 ], [ %call13, %if.then11 ], [ %58, %if.end87 ], [ %cond544, %if.end533 ], [ %102, %ret_iv_max ], [ 0, %entry ], [ 0, %land.lhs.true49 ], [ 0, %if.then26 ], [ 0, %lor.lhs.false41 ], [ 0, %if.then51 ], [ 0, %land.lhs.true45 ], [ %55, %cond.true ], [ %call86, %cond.false ], [ 0, %land.lhs.true131 ], [ 0, %if.then135 ], [ 0, %lor.lhs.false127 ], [ %81, %if.then142 ], [ 0, %if.then529 ], [ 0, %if.end524 ], [ %sub.i, %if.then5.i ], [ %call38.i, %if.end34.i ], [ %15, %if.else.i ]
  ret i64 %retval.0
}

; Function Attrs: optsize
declare i32 @Perl_mg_get(%struct.sv*) #2

; Function Attrs: optsize
declare i64 @Perl_cast_iv(double) #2

; Function Attrs: optsize
declare %struct.sv* @Perl_amagic_call(%struct.sv*, %struct.sv*, i32, i32) #2

; Function Attrs: optsize
declare i64 @Perl_cast_uv(double) #2

; Function Attrs: optsize
declare double @Perl_my_atof(i8*) #2

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @S_not_a_number(%struct.sv* %sv) #0 {
entry:
  %tmpbuf = alloca [64 x i8], align 16
  %0 = getelementptr inbounds [64 x i8]* %tmpbuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 64, i8* %0) #3
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %1, 536870912
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private = getelementptr inbounds %struct.cop* %2, i64 0, i32 7
  %3 = load i8* %op_private, align 1, !tbaa !1
  %and1 = and i8 %3, 8
  %tobool2 = icmp eq i8 %and1, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %call = call %struct.sv* @Perl_newSVpv(i8* getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), i64 0) #7
  %call3 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call) #7
  %call4 = call i8* @Perl_sv_uni_display(%struct.sv* %call3, %struct.sv* %sv, i64 10, i64 0) #8
  br label %if.end95

if.else:                                          ; preds = %land.lhs.true, %entry
  %add.ptr6 = getelementptr inbounds [64 x i8]* %tmpbuf, i64 0, i64 56
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %4 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %4 to i8**
  %5 = load i8** %xpv_pv, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %4, i64 8
  %6 = bitcast i8* %xpv_cur to i64*
  %7 = load i64* %6, align 8, !tbaa !5
  %add.ptr8 = getelementptr inbounds i8* %5, i64 %7
  %cmp153 = icmp sgt i64 %7, 0
  br i1 %cmp153, label %for.body, label %if.end93

for.body:                                         ; preds = %if.else, %for.inc
  %s.0157 = phi i8* [ %incdec.ptr86, %for.inc ], [ %5, %if.else ]
  %d.0156 = phi i8* [ %d.2, %for.inc ], [ %0, %if.else ]
  %8 = load i8* %s.0157, align 1, !tbaa !1
  %conv12151 = zext i8 %8 to i32
  %and14 = and i32 %conv12151, 128
  %tobool15 = icmp eq i32 %and14, 0
  br i1 %tobool15, label %if.end, label %if.then25

if.then25:                                        ; preds = %for.body
  %incdec.ptr = getelementptr inbounds i8* %d.0156, i64 1
  store i8 77, i8* %d.0156, align 1, !tbaa !1
  %incdec.ptr26 = getelementptr inbounds i8* %d.0156, i64 2
  store i8 45, i8* %incdec.ptr, align 1, !tbaa !1
  %and27 = and i32 %conv12151, 127
  br label %if.end

if.end:                                           ; preds = %for.body, %if.then25
  %d.1 = phi i8* [ %incdec.ptr26, %if.then25 ], [ %d.0156, %for.body ]
  %ch.0 = phi i32 [ %and27, %if.then25 ], [ %conv12151, %for.body ]
  switch i32 %ch.0, label %if.else57 [
    i32 10, label %if.then30
    i32 13, label %if.then36
    i32 12, label %if.then42
    i32 92, label %if.then48
    i32 0, label %if.then54
  ]

if.then30:                                        ; preds = %if.end
  %incdec.ptr31 = getelementptr inbounds i8* %d.1, i64 1
  store i8 92, i8* %d.1, align 1, !tbaa !1
  %incdec.ptr32 = getelementptr inbounds i8* %d.1, i64 2
  store i8 110, i8* %incdec.ptr31, align 1, !tbaa !1
  br label %for.inc

if.then36:                                        ; preds = %if.end
  %incdec.ptr37 = getelementptr inbounds i8* %d.1, i64 1
  store i8 92, i8* %d.1, align 1, !tbaa !1
  %incdec.ptr38 = getelementptr inbounds i8* %d.1, i64 2
  store i8 114, i8* %incdec.ptr37, align 1, !tbaa !1
  br label %for.inc

if.then42:                                        ; preds = %if.end
  %incdec.ptr43 = getelementptr inbounds i8* %d.1, i64 1
  store i8 92, i8* %d.1, align 1, !tbaa !1
  %incdec.ptr44 = getelementptr inbounds i8* %d.1, i64 2
  store i8 102, i8* %incdec.ptr43, align 1, !tbaa !1
  br label %for.inc

if.then48:                                        ; preds = %if.end
  %incdec.ptr49 = getelementptr inbounds i8* %d.1, i64 1
  store i8 92, i8* %d.1, align 1, !tbaa !1
  %incdec.ptr50 = getelementptr inbounds i8* %d.1, i64 2
  store i8 92, i8* %incdec.ptr49, align 1, !tbaa !1
  br label %for.inc

if.then54:                                        ; preds = %if.end
  %incdec.ptr55 = getelementptr inbounds i8* %d.1, i64 1
  store i8 92, i8* %d.1, align 1, !tbaa !1
  %incdec.ptr56 = getelementptr inbounds i8* %d.1, i64 2
  store i8 48, i8* %incdec.ptr55, align 1, !tbaa !1
  br label %for.inc

if.else57:                                        ; preds = %if.end
  %and58 = and i32 %ch.0, 128
  %cmp59 = icmp eq i32 %and58, 0
  br i1 %cmp59, label %land.lhs.true61, label %if.else71

land.lhs.true61:                                  ; preds = %if.else57
  %idxprom62152 = zext i32 %ch.0 to i64
  %call63 = call i16** @__ctype_b_loc() #8
  %9 = load i16** %call63, align 8, !tbaa !0
  %arrayidx64 = getelementptr inbounds i16* %9, i64 %idxprom62152
  %10 = load i16* %arrayidx64, align 2, !tbaa !4
  %and66 = and i16 %10, 16384
  %tobool67 = icmp eq i16 %and66, 0
  br i1 %tobool67, label %if.else71, label %if.then68

if.then68:                                        ; preds = %land.lhs.true61
  %conv69 = trunc i32 %ch.0 to i8
  %incdec.ptr70 = getelementptr inbounds i8* %d.1, i64 1
  store i8 %conv69, i8* %d.1, align 1, !tbaa !1
  br label %for.inc

if.else71:                                        ; preds = %land.lhs.true61, %if.else57
  %incdec.ptr72 = getelementptr inbounds i8* %d.1, i64 1
  store i8 94, i8* %d.1, align 1, !tbaa !1
  %ch.0.off = add i32 %ch.0, -97
  %11 = icmp ult i32 %ch.0.off, 26
  %sub = add nsw i32 %ch.0, 224
  %cond = select i1 %11, i32 %sub, i32 %ch.0
  %xor = xor i32 %cond, 64
  %conv78 = trunc i32 %xor to i8
  %incdec.ptr79 = getelementptr inbounds i8* %d.1, i64 2
  store i8 %conv78, i8* %incdec.ptr72, align 1, !tbaa !1
  br label %for.inc

for.inc:                                          ; preds = %if.then30, %if.then42, %if.then54, %if.else71, %if.then68, %if.then48, %if.then36
  %d.2 = phi i8* [ %incdec.ptr32, %if.then30 ], [ %incdec.ptr38, %if.then36 ], [ %incdec.ptr44, %if.then42 ], [ %incdec.ptr50, %if.then48 ], [ %incdec.ptr56, %if.then54 ], [ %incdec.ptr70, %if.then68 ], [ %incdec.ptr79, %if.else71 ]
  %incdec.ptr86 = getelementptr inbounds i8* %s.0157, i64 1
  %cmp = icmp ult i8* %incdec.ptr86, %add.ptr8
  %cmp10 = icmp ult i8* %d.2, %add.ptr6
  %cmp10. = and i1 %cmp, %cmp10
  br i1 %cmp10., label %for.body, label %for.end

for.end:                                          ; preds = %for.inc
  br i1 %cmp, label %if.then89, label %if.end93

if.then89:                                        ; preds = %for.end
  %incdec.ptr90 = getelementptr inbounds i8* %d.2, i64 1
  store i8 46, i8* %d.2, align 1, !tbaa !1
  %incdec.ptr91 = getelementptr inbounds i8* %d.2, i64 2
  store i8 46, i8* %incdec.ptr90, align 1, !tbaa !1
  %incdec.ptr92 = getelementptr inbounds i8* %d.2, i64 3
  store i8 46, i8* %incdec.ptr91, align 1, !tbaa !1
  br label %if.end93

if.end93:                                         ; preds = %if.else, %if.then89, %for.end
  %d.3 = phi i8* [ %incdec.ptr92, %if.then89 ], [ %d.2, %for.end ], [ %0, %if.else ]
  store i8 0, i8* %d.3, align 1, !tbaa !1
  br label %if.end95

if.end95:                                         ; preds = %if.end93, %if.then
  %pv.0 = phi i8* [ %0, %if.end93 ], [ %call4, %if.then ]
  %12 = load %struct.op** @PL_op, align 8, !tbaa !0
  %tobool96 = icmp eq %struct.op* %12, null
  br i1 %tobool96, label %if.else109, label %if.then97

if.then97:                                        ; preds = %if.end95
  %op_type = getelementptr inbounds %struct.op* %12, i64 0, i32 4
  %13 = load i16* %op_type, align 2, !tbaa !4
  %cmp99 = icmp eq i16 %13, 351
  br i1 %cmp99, label %cond.true101, label %cond.false103

cond.true101:                                     ; preds = %if.then97
  %call102 = call i8* @Perl_custom_op_desc(%struct.op* %12) #8
  br label %cond.end107

cond.false103:                                    ; preds = %if.then97
  %idxprom105 = zext i16 %13 to i64
  %arrayidx106 = getelementptr inbounds [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom105
  %14 = load i8** %arrayidx106, align 8, !tbaa !0
  br label %cond.end107

cond.end107:                                      ; preds = %cond.false103, %cond.true101
  %cond108 = phi i8* [ %call102, %cond.true101 ], [ %14, %cond.false103 ]
  call void (i32, i8*, ...)* @Perl_warner(i32 13, i8* getelementptr inbounds ([34 x i8]* @.str73, i64 0, i64 0), i8* %pv.0, i8* %cond108) #8
  br label %if.end110

if.else109:                                       ; preds = %if.end95
  call void (i32, i8*, ...)* @Perl_warner(i32 13, i8* getelementptr inbounds ([28 x i8]* @.str74, i64 0, i64 0), i8* %pv.0) #8
  br label %if.end110

if.end110:                                        ; preds = %if.else109, %cond.end107
  call void @llvm.lifetime.end(i64 64, i8* %0) #3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @S_sv_2iuv_non_preserve(%struct.sv* nocapture %sv) #0 {
entry:
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %0 = load i8** %sv_any, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %0, i64 32
  %1 = bitcast i8* %xnv_nv to double*
  %2 = load double* %1, align 8, !tbaa !6
  %cmp = fcmp olt double %2, 0xC3E0000000000000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %3 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %3, 2097152
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then
  %call = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  %.pre1 = load i8** %sv_any, align 8, !tbaa !0
  br label %land.end

land.end:                                         ; preds = %if.then, %land.rhs
  %4 = phi i8* [ %0, %if.then ], [ %.pre1, %land.rhs ]
  %5 = phi i32 [ %3, %if.then ], [ %.pre, %land.rhs ]
  %or4 = or i32 %5, 50462720
  store i32 %or4, i32* %sv_flags, align 4, !tbaa !3
  %xiv_iv = getelementptr inbounds i8* %4, i64 24
  %6 = bitcast i8* %xiv_iv to i64*
  store i64 -9223372036854775808, i64* %6, align 8, !tbaa !5
  br label %return

if.end:                                           ; preds = %entry
  %cmp8 = fcmp ogt double %2, 0x43F0000000000000
  %sv_flags10 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %7 = load i32* %sv_flags10, align 4, !tbaa !3
  %and11 = and i32 %7, 2097152
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %cmp8, label %if.then9, label %if.end25

if.then9:                                         ; preds = %if.end
  br i1 %tobool12, label %land.rhs13, label %land.end16

land.rhs13:                                       ; preds = %if.then9
  %call14 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre2 = load i32* %sv_flags10, align 4, !tbaa !3
  %.pre3 = load i8** %sv_any, align 8, !tbaa !0
  br label %land.end16

land.end16:                                       ; preds = %land.rhs13, %if.then9
  %8 = phi i8* [ %.pre3, %land.rhs13 ], [ %0, %if.then9 ]
  %9 = phi i32 [ %.pre2, %land.rhs13 ], [ %7, %if.then9 ]
  %or23 = or i32 %9, -2097020928
  store i32 %or23, i32* %sv_flags10, align 4, !tbaa !3
  %xuv_uv = getelementptr inbounds i8* %8, i64 24
  %10 = bitcast i8* %xuv_uv to i64*
  store i64 -1, i64* %10, align 8, !tbaa !5
  br label %return

if.end25:                                         ; preds = %if.end
  br i1 %tobool12, label %land.rhs29, label %land.end32

land.rhs29:                                       ; preds = %if.end25
  %call30 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre4 = load i32* %sv_flags10, align 4, !tbaa !3
  %.pre5 = load i8** %sv_any, align 8, !tbaa !0
  %xnv_nv39.phi.trans.insert = getelementptr inbounds i8* %.pre5, i64 32
  %.phi.trans.insert = bitcast i8* %xnv_nv39.phi.trans.insert to double*
  %.pre6 = load double* %.phi.trans.insert, align 8, !tbaa !6
  br label %land.end32

land.end32:                                       ; preds = %land.rhs29, %if.end25
  %11 = phi double [ %.pre6, %land.rhs29 ], [ %2, %if.end25 ]
  %12 = phi i32 [ %.pre4, %land.rhs29 ], [ %7, %if.end25 ]
  %or37 = or i32 %12, 50462720
  store i32 %or37, i32* %sv_flags10, align 4, !tbaa !3
  %cmp40 = fcmp ugt double %11, 0x43E0000000000000
  br i1 %cmp40, label %if.end69, label %if.then41

if.then41:                                        ; preds = %land.end32
  %call44 = tail call i64 @Perl_cast_iv(double %11) #8
  %13 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv46 = getelementptr inbounds i8* %13, i64 24
  %14 = bitcast i8* %xiv_iv46 to i64*
  store i64 %call44, i64* %14, align 8, !tbaa !5
  %conv = sitofp i64 %call44 to double
  %xnv_nv50 = getelementptr inbounds i8* %13, i64 32
  %15 = bitcast i8* %xnv_nv50 to double*
  %16 = load double* %15, align 8, !tbaa !6
  %cmp51 = fcmp oeq double %conv, %16
  br i1 %cmp51, label %if.then53, label %return

if.then53:                                        ; preds = %if.then41
  %17 = load i32* %sv_flags10, align 4, !tbaa !3
  %and55 = and i32 %17, 2097152
  %tobool56 = icmp eq i32 %and55, 0
  br i1 %tobool56, label %land.end60, label %land.rhs57

land.rhs57:                                       ; preds = %if.then53
  %call58 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre8 = load i32* %sv_flags10, align 4, !tbaa !3
  br label %land.end60

land.end60:                                       ; preds = %if.then53, %land.rhs57
  %18 = phi i32 [ %17, %if.then53 ], [ %.pre8, %land.rhs57 ]
  %or63 = or i32 %18, 16842752
  store i32 %or63, i32* %sv_flags10, align 4, !tbaa !3
  br label %return

if.end69:                                         ; preds = %land.end32
  %or71 = or i32 %12, -2097020928
  store i32 %or71, i32* %sv_flags10, align 4, !tbaa !3
  %call74 = tail call i64 @Perl_cast_uv(double %11) #8
  %19 = load i8** %sv_any, align 8, !tbaa !0
  %xuv_uv76 = getelementptr inbounds i8* %19, i64 24
  %20 = bitcast i8* %xuv_uv76 to i64*
  store i64 %call74, i64* %20, align 8, !tbaa !5
  %conv79 = uitofp i64 %call74 to double
  %xnv_nv81 = getelementptr inbounds i8* %19, i64 32
  %21 = bitcast i8* %xnv_nv81 to double*
  %22 = load double* %21, align 8, !tbaa !6
  %cmp82 = fcmp oeq double %conv79, %22
  br i1 %cmp82, label %if.then84, label %return

if.then84:                                        ; preds = %if.end69
  %cmp87 = icmp eq i64 %call74, -1
  br i1 %cmp87, label %return, label %if.end90

if.end90:                                         ; preds = %if.then84
  %23 = load i32* %sv_flags10, align 4, !tbaa !3
  %and92 = and i32 %23, 2097152
  %tobool93 = icmp eq i32 %and92, 0
  br i1 %tobool93, label %land.end97, label %land.rhs94

land.rhs94:                                       ; preds = %if.end90
  %call95 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre7 = load i32* %sv_flags10, align 4, !tbaa !3
  br label %land.end97

land.end97:                                       ; preds = %if.end90, %land.rhs94
  %24 = phi i32 [ %23, %if.end90 ], [ %.pre7, %land.rhs94 ]
  %or100 = or i32 %24, 16842752
  store i32 %or100, i32* %sv_flags10, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %land.end97, %if.end69, %if.then84, %land.end60, %if.then41, %land.end16, %land.end
  %retval.0 = phi i32 [ 1, %land.end ], [ 5, %land.end16 ], [ 2, %if.then41 ], [ 2, %land.end60 ], [ 5, %if.then84 ], [ 4, %if.end69 ], [ 4, %land.end97 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i64 @Perl_sv_2uv(%struct.sv* %sv) #0 {
entry:
  %value.i = alloca i64, align 8
  %value = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end55, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = call i32 @Perl_mg_get(%struct.sv* %sv) #8
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and4 = and i32 %1, 16777216
  %tobool5 = icmp eq i32 %and4, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then2
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %2 = load i8** %sv_any, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %2, i64 24
  %3 = bitcast i8* %xuv_uv to i64*
  %4 = load i64* %3, align 8, !tbaa !5
  br label %return

if.end7:                                          ; preds = %if.then2
  %and9 = and i32 %1, 33554432
  %tobool10 = icmp eq i32 %and9, 0
  br i1 %tobool10, label %if.end14, label %if.then11

if.then11:                                        ; preds = %if.end7
  %sv_any12 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %5 = load i8** %sv_any12, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %5, i64 32
  %6 = bitcast i8* %xnv_nv to double*
  %7 = load double* %6, align 8, !tbaa !6
  %call13 = call i64 @Perl_cast_uv(double %7) #8
  br label %return

if.end14:                                         ; preds = %if.end7
  %and16 = and i32 %1, 67108864
  %tobool17 = icmp eq i32 %and16, 0
  br i1 %tobool17, label %if.end22, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end14
  %sv_any18 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %8 = load i8** %sv_any18, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %8, i64 16
  %9 = bitcast i8* %xpv_len to i64*
  %10 = load i64* %9, align 8, !tbaa !5
  %tobool19 = icmp eq i64 %10, 0
  br i1 %tobool19, label %if.end22, label %if.then20

if.then20:                                        ; preds = %land.lhs.true
  %11 = bitcast i64* %value.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %11) #3
  %xpv_pv.i = bitcast i8* %8 to i8**
  %12 = load i8** %xpv_pv.i, align 8, !tbaa !0
  %xpv_cur.i = getelementptr inbounds i8* %8, i64 8
  %13 = bitcast i8* %xpv_cur.i to i64*
  %14 = load i64* %13, align 8, !tbaa !5
  %call.i = call i32 @Perl_grok_number(i8* %12, i64 %14, i64* %value.i) #8
  %15 = and i32 %call.i, 13
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %if.then3.i, label %if.end4.i

if.then3.i:                                       ; preds = %if.then20
  %17 = load i64* %value.i, align 8, !tbaa !5
  br label %return

if.end4.i:                                        ; preds = %if.then20
  %tobool5.i = icmp eq i32 %call.i, 0
  br i1 %tobool5.i, label %if.then6.i, label %if.end28.i

if.then6.i:                                       ; preds = %if.end4.i
  %18 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings.i = getelementptr inbounds %struct.cop* %18, i64 0, i32 14
  %19 = load %struct.sv** %cop_warnings.i, align 8, !tbaa !0
  %cmp7.i = icmp eq %struct.sv* %19, null
  br i1 %cmp7.i, label %lor.lhs.false18.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.then6.i
  %20 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings8.i = getelementptr inbounds %struct.cop* %20, i64 0, i32 14
  %21 = load %struct.sv** %cop_warnings8.i, align 8, !tbaa !0
  %cmp9.i = icmp eq %struct.sv* %21, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp9.i, label %lor.lhs.false18.i, label %land.lhs.true10.i

land.lhs.true10.i:                                ; preds = %land.lhs.true.i
  %22 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings11.i = getelementptr inbounds %struct.cop* %22, i64 0, i32 14
  %23 = load %struct.sv** %cop_warnings11.i, align 8, !tbaa !0
  %cmp12.i = icmp eq %struct.sv* %23, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp12.i, label %if.then26.i, label %lor.lhs.false.i

lor.lhs.false.i:                                  ; preds = %land.lhs.true10.i
  %24 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings13.i = getelementptr inbounds %struct.cop* %24, i64 0, i32 14
  %25 = load %struct.sv** %cop_warnings13.i, align 8, !tbaa !0
  %sv_any14.i = getelementptr inbounds %struct.sv* %25, i64 0, i32 0
  %26 = load i8** %sv_any14.i, align 8, !tbaa !0
  %xpv_pv15.i = bitcast i8* %26 to i8**
  %27 = load i8** %xpv_pv15.i, align 8, !tbaa !0
  %arrayidx.i = getelementptr inbounds i8* %27, i64 3
  %28 = load i8* %arrayidx.i, align 1, !tbaa !1
  %and16.i = and i8 %28, 4
  %tobool17.i = icmp eq i8 %and16.i, 0
  br i1 %tobool17.i, label %lor.lhs.false18.i, label %if.then26.i

lor.lhs.false18.i:                                ; preds = %lor.lhs.false.i, %land.lhs.true.i, %if.then6.i
  %29 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings19.i = getelementptr inbounds %struct.cop* %29, i64 0, i32 14
  %30 = load %struct.sv** %cop_warnings19.i, align 8, !tbaa !0
  %cmp20.i = icmp eq %struct.sv* %30, null
  br i1 %cmp20.i, label %land.lhs.true22.i, label %if.end28.i

land.lhs.true22.i:                                ; preds = %lor.lhs.false18.i
  %31 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and24.i = and i8 %31, 1
  %tobool25.i = icmp eq i8 %and24.i, 0
  br i1 %tobool25.i, label %if.end28.i, label %if.then26.i

if.then26.i:                                      ; preds = %land.lhs.true22.i, %lor.lhs.false.i, %land.lhs.true10.i
  call fastcc void @S_not_a_number(%struct.sv* %sv) #8
  br label %if.end28.i

if.end28.i:                                       ; preds = %if.then26.i, %land.lhs.true22.i, %lor.lhs.false18.i, %if.end4.i
  %32 = load i8** %sv_any18, align 8, !tbaa !0
  %xpv_pv30.i = bitcast i8* %32 to i8**
  %33 = load i8** %xpv_pv30.i, align 8, !tbaa !0
  %call31.i = call double @Perl_my_atof(i8* %33) #8
  %call32.i = call i64 @Perl_cast_uv(double %call31.i) #8
  br label %return

if.end22:                                         ; preds = %land.lhs.true, %if.end14
  %and24 = and i32 %1, 524288
  %tobool25 = icmp eq i32 %and24, 0
  br i1 %tobool25, label %if.then26, label %if.end55

if.then26:                                        ; preds = %if.end22
  %and28 = and i32 %1, 512
  %tobool29 = icmp eq i32 %and28, 0
  br i1 %tobool29, label %if.then30, label %return

if.then30:                                        ; preds = %if.then26
  %34 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %34, i64 0, i32 14
  %35 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp = icmp eq %struct.sv* %35, null
  br i1 %cmp, label %lor.lhs.false41, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %if.then30
  %36 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings32 = getelementptr inbounds %struct.cop* %36, i64 0, i32 14
  %37 = load %struct.sv** %cop_warnings32, align 8, !tbaa !0
  %cmp33 = icmp eq %struct.sv* %37, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp33, label %lor.lhs.false41, label %land.lhs.true34

land.lhs.true34:                                  ; preds = %land.lhs.true31
  %38 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings35 = getelementptr inbounds %struct.cop* %38, i64 0, i32 14
  %39 = load %struct.sv** %cop_warnings35, align 8, !tbaa !0
  %cmp36 = icmp eq %struct.sv* %39, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp36, label %land.lhs.true49, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true34
  %40 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings37 = getelementptr inbounds %struct.cop* %40, i64 0, i32 14
  %41 = load %struct.sv** %cop_warnings37, align 8, !tbaa !0
  %sv_any38 = getelementptr inbounds %struct.sv* %41, i64 0, i32 0
  %42 = load i8** %sv_any38, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %42 to i8**
  %43 = load i8** %xpv_pv, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %43, i64 10
  %44 = load i8* %arrayidx, align 1, !tbaa !1
  %and39 = and i8 %44, 4
  %tobool40 = icmp eq i8 %and39, 0
  br i1 %tobool40, label %lor.lhs.false41, label %land.lhs.true49

lor.lhs.false41:                                  ; preds = %lor.lhs.false, %land.lhs.true31, %if.then30
  %45 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings42 = getelementptr inbounds %struct.cop* %45, i64 0, i32 14
  %46 = load %struct.sv** %cop_warnings42, align 8, !tbaa !0
  %cmp43 = icmp eq %struct.sv* %46, null
  br i1 %cmp43, label %land.lhs.true45, label %return

land.lhs.true45:                                  ; preds = %lor.lhs.false41
  %47 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and47 = and i8 %47, 1
  %tobool48 = icmp eq i8 %and47, 0
  %48 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool50 = icmp ne i32 %48, 0
  %or.cond = or i1 %tobool48, %tobool50
  br i1 %or.cond, label %return, label %if.then51

land.lhs.true49:                                  ; preds = %lor.lhs.false, %land.lhs.true34
  %.old = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool50.old = icmp eq i32 %.old, 0
  br i1 %tobool50.old, label %if.then51, label %return

if.then51:                                        ; preds = %land.lhs.true49, %land.lhs.true45
  call void @Perl_report_uninit() #7
  br label %return

if.end55:                                         ; preds = %if.end22, %if.end
  %49 = phi i32 [ %1, %if.end22 ], [ %0, %if.end ]
  %and57 = and i32 %49, 9961472
  %tobool58 = icmp eq i32 %and57, 0
  br i1 %tobool58, label %if.end138, label %if.then59

if.then59:                                        ; preds = %if.end55
  %and61 = and i32 %49, 524288
  %tobool62 = icmp eq i32 %and61, 0
  br i1 %tobool62, label %if.end90, label %if.then63

if.then63:                                        ; preds = %if.then59
  %and65 = and i32 %49, 268435456
  %tobool66 = icmp eq i32 %and65, 0
  br i1 %tobool66, label %if.end87, label %land.lhs.true67

land.lhs.true67:                                  ; preds = %if.then63
  %call68 = call %struct.sv* @Perl_amagic_call(%struct.sv* %sv, %struct.sv* @PL_sv_undef, i32 5, i32 9) #8
  %tobool69 = icmp eq %struct.sv* %call68, null
  br i1 %tobool69, label %if.end87, label %land.lhs.true70

land.lhs.true70:                                  ; preds = %land.lhs.true67
  %sv_flags71 = getelementptr inbounds %struct.sv* %call68, i64 0, i32 2
  %50 = load i32* %sv_flags71, align 4, !tbaa !3
  %and72 = and i32 %50, 524288
  %tobool73 = icmp eq i32 %and72, 0
  br i1 %tobool73, label %if.then80, label %lor.lhs.false74

lor.lhs.false74:                                  ; preds = %land.lhs.true70
  %sv_any75 = getelementptr inbounds %struct.sv* %call68, i64 0, i32 0
  %51 = load i8** %sv_any75, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %51 to %struct.sv**
  %52 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_any76 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %53 = load i8** %sv_any76, align 8, !tbaa !0
  %xrv_rv77 = bitcast i8* %53 to %struct.sv**
  %54 = load %struct.sv** %xrv_rv77, align 8, !tbaa !0
  %cmp78 = icmp eq %struct.sv* %52, %54
  br i1 %cmp78, label %if.end87, label %if.then80

if.then80:                                        ; preds = %lor.lhs.false74, %land.lhs.true70
  %and82 = and i32 %50, 65536
  %tobool83 = icmp eq i32 %and82, 0
  br i1 %tobool83, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then80
  %sv_any84 = getelementptr inbounds %struct.sv* %call68, i64 0, i32 0
  %55 = load i8** %sv_any84, align 8, !tbaa !0
  %xuv_uv85 = getelementptr inbounds i8* %55, i64 24
  %56 = bitcast i8* %xuv_uv85 to i64*
  %57 = load i64* %56, align 8, !tbaa !5
  br label %return

cond.false:                                       ; preds = %if.then80
  %call86 = call i64 @Perl_sv_2uv(%struct.sv* %call68) #7
  br label %return

if.end87:                                         ; preds = %land.lhs.true67, %if.then63, %lor.lhs.false74
  %sv_any88 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %58 = load i8** %sv_any88, align 8, !tbaa !0
  %xrv_rv89 = bitcast i8* %58 to %struct.sv**
  %59 = load %struct.sv** %xrv_rv89, align 8, !tbaa !0
  %60 = ptrtoint %struct.sv* %59 to i64
  br label %return

if.end90:                                         ; preds = %if.then59
  %61 = and i32 %49, 9437184
  %62 = icmp eq i32 %61, 9437184
  br i1 %62, label %if.then98, label %if.end99

if.then98:                                        ; preds = %if.end90
  call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre666 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end99

if.end99:                                         ; preds = %if.end90, %if.then98
  %63 = phi i32 [ %49, %if.end90 ], [ %.pre666, %if.then98 ]
  %64 = and i32 %63, 126812160
  %65 = icmp eq i32 %64, 8388608
  br i1 %65, label %if.then107, label %if.end138

if.then107:                                       ; preds = %if.end99
  %66 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings108 = getelementptr inbounds %struct.cop* %66, i64 0, i32 14
  %67 = load %struct.sv** %cop_warnings108, align 8, !tbaa !0
  %cmp109 = icmp eq %struct.sv* %67, null
  br i1 %cmp109, label %lor.lhs.false127, label %land.lhs.true111

land.lhs.true111:                                 ; preds = %if.then107
  %68 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings112 = getelementptr inbounds %struct.cop* %68, i64 0, i32 14
  %69 = load %struct.sv** %cop_warnings112, align 8, !tbaa !0
  %cmp113 = icmp eq %struct.sv* %69, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp113, label %lor.lhs.false127, label %land.lhs.true115

land.lhs.true115:                                 ; preds = %land.lhs.true111
  %70 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings116 = getelementptr inbounds %struct.cop* %70, i64 0, i32 14
  %71 = load %struct.sv** %cop_warnings116, align 8, !tbaa !0
  %cmp117 = icmp eq %struct.sv* %71, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp117, label %if.then135, label %lor.lhs.false119

lor.lhs.false119:                                 ; preds = %land.lhs.true115
  %72 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings120 = getelementptr inbounds %struct.cop* %72, i64 0, i32 14
  %73 = load %struct.sv** %cop_warnings120, align 8, !tbaa !0
  %sv_any121 = getelementptr inbounds %struct.sv* %73, i64 0, i32 0
  %74 = load i8** %sv_any121, align 8, !tbaa !0
  %xpv_pv122 = bitcast i8* %74 to i8**
  %75 = load i8** %xpv_pv122, align 8, !tbaa !0
  %arrayidx123 = getelementptr inbounds i8* %75, i64 10
  %76 = load i8* %arrayidx123, align 1, !tbaa !1
  %and125 = and i8 %76, 4
  %tobool126 = icmp eq i8 %and125, 0
  br i1 %tobool126, label %lor.lhs.false127, label %if.then135

lor.lhs.false127:                                 ; preds = %lor.lhs.false119, %land.lhs.true111, %if.then107
  %77 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings128 = getelementptr inbounds %struct.cop* %77, i64 0, i32 14
  %78 = load %struct.sv** %cop_warnings128, align 8, !tbaa !0
  %cmp129 = icmp eq %struct.sv* %78, null
  br i1 %cmp129, label %land.lhs.true131, label %return

land.lhs.true131:                                 ; preds = %lor.lhs.false127
  %79 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and133 = and i8 %79, 1
  %tobool134 = icmp eq i8 %and133, 0
  br i1 %tobool134, label %return, label %if.then135

if.then135:                                       ; preds = %lor.lhs.false119, %land.lhs.true131, %land.lhs.true115
  call void @Perl_report_uninit() #7
  br label %return

if.end138:                                        ; preds = %if.end99, %if.end55
  %80 = phi i32 [ %63, %if.end99 ], [ %49, %if.end55 ]
  %and140 = and i32 %80, 16777216
  %tobool141 = icmp eq i32 %and140, 0
  br i1 %tobool141, label %if.end150, label %if.then142

if.then142:                                       ; preds = %if.end138
  %sv_any147 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %81 = load i8** %sv_any147, align 8, !tbaa !0
  %xuv_uv148 = getelementptr inbounds i8* %81, i64 24
  %82 = bitcast i8* %xuv_uv148 to i64*
  %83 = load i64* %82, align 8, !tbaa !5
  br label %return

if.end150:                                        ; preds = %if.end138
  %and152 = and i32 %80, 33554432
  %tobool153 = icmp eq i32 %and152, 0
  br i1 %tobool153, label %if.else246, label %if.then154

if.then154:                                       ; preds = %if.end150
  %and156 = and i32 %80, 255
  %cmp157 = icmp eq i32 %and156, 2
  br i1 %cmp157, label %if.then159, label %if.end161

if.then159:                                       ; preds = %if.then154
  %call160 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  %.pre662 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end161

if.end161:                                        ; preds = %if.then159, %if.then154
  %84 = phi i32 [ %.pre662, %if.then159 ], [ %80, %if.then154 ]
  %and163 = and i32 %84, 2097152
  %tobool164 = icmp eq i32 %and163, 0
  br i1 %tobool164, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end161
  %call165 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre663 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %if.end161, %land.rhs
  %85 = phi i32 [ %.pre663, %land.rhs ], [ %84, %if.end161 ]
  %or = or i32 %85, 16777216
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %sv_any168 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %86 = load i8** %sv_any168, align 8, !tbaa !0
  %xnv_nv169 = getelementptr inbounds i8* %86, i64 32
  %87 = bitcast i8* %xnv_nv169 to double*
  %88 = load double* %87, align 8, !tbaa !6
  %cmp170 = fcmp olt double %88, 0x43E0000000000000
  br i1 %cmp170, label %if.then172, label %if.else213

if.then172:                                       ; preds = %land.end
  %call175 = call i64 @Perl_cast_iv(double %88) #8
  %89 = load i8** %sv_any168, align 8, !tbaa !0
  %xiv_iv177 = getelementptr inbounds i8* %89, i64 24
  %90 = bitcast i8* %xiv_iv177 to i64*
  store i64 %call175, i64* %90, align 8, !tbaa !5
  %xnv_nv179 = getelementptr inbounds i8* %89, i64 32
  %91 = bitcast i8* %xnv_nv179 to double*
  %92 = load double* %91, align 8, !tbaa !6
  %conv182 = sitofp i64 %call175 to double
  %cmp183 = fcmp oeq double %92, %conv182
  br i1 %cmp183, label %land.lhs.true185, label %if.end528

land.lhs.true185:                                 ; preds = %if.then172
  %cmp188 = icmp sgt i64 %call175, 0
  %sub = sub nsw i64 0, %call175
  %cond197 = select i1 %cmp188, i64 %call175, i64 %sub
  %cmp198 = icmp ult i64 %cond197, 4294967296
  br i1 %cmp198, label %if.then200, label %if.end528

if.then200:                                       ; preds = %land.lhs.true185
  %93 = load i32* %sv_flags, align 4, !tbaa !3
  %and202 = and i32 %93, 2097152
  %tobool203 = icmp eq i32 %and202, 0
  br i1 %tobool203, label %land.end207, label %land.rhs204

land.rhs204:                                      ; preds = %if.then200
  %call205 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre664 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end207

land.end207:                                      ; preds = %if.then200, %land.rhs204
  %94 = phi i32 [ %93, %if.then200 ], [ %.pre664, %land.rhs204 ]
  %or210 = or i32 %94, 16842752
  store i32 %or210, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end528

if.else213:                                       ; preds = %land.end
  %call216 = call i64 @Perl_cast_uv(double %88) #8
  %95 = load i8** %sv_any168, align 8, !tbaa !0
  %xuv_uv218 = getelementptr inbounds i8* %95, i64 24
  %96 = bitcast i8* %xuv_uv218 to i64*
  store i64 %call216, i64* %96, align 8, !tbaa !5
  %xnv_nv220 = getelementptr inbounds i8* %95, i64 32
  %97 = bitcast i8* %xnv_nv220 to double*
  %98 = load double* %97, align 8, !tbaa !6
  %conv223 = uitofp i64 %call216 to double
  %cmp224 = fcmp oeq double %98, %conv223
  %cmp229 = icmp ult i64 %call216, 4294967296
  %or.cond653 = and i1 %cmp224, %cmp229
  %99 = load i32* %sv_flags, align 4, !tbaa !3
  br i1 %or.cond653, label %if.then231, label %if.end242

if.then231:                                       ; preds = %if.else213
  %and233 = and i32 %99, 2097152
  %tobool234 = icmp eq i32 %and233, 0
  br i1 %tobool234, label %land.end238, label %land.rhs235

land.rhs235:                                      ; preds = %if.then231
  %call236 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre665 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end238

land.end238:                                      ; preds = %if.then231, %land.rhs235
  %100 = phi i32 [ %99, %if.then231 ], [ %.pre665, %land.rhs235 ]
  %or241 = or i32 %100, 16842752
  store i32 %or241, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end242

if.end242:                                        ; preds = %if.else213, %land.end238
  %101 = phi i32 [ %or241, %land.end238 ], [ %99, %if.else213 ]
  %or244 = or i32 %101, -2147483648
  store i32 %or244, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end528

if.else246:                                       ; preds = %if.end150
  %and248 = and i32 %80, 67108864
  %tobool249 = icmp eq i32 %and248, 0
  br i1 %tobool249, label %if.else483, label %land.lhs.true250

land.lhs.true250:                                 ; preds = %if.else246
  %sv_any251 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %102 = load i8** %sv_any251, align 8, !tbaa !0
  %xpv_len252 = getelementptr inbounds i8* %102, i64 16
  %103 = bitcast i8* %xpv_len252 to i64*
  %104 = load i64* %103, align 8, !tbaa !5
  %tobool253 = icmp eq i64 %104, 0
  br i1 %tobool253, label %if.else483, label %if.then254

if.then254:                                       ; preds = %land.lhs.true250
  %xpv_pv256 = bitcast i8* %102 to i8**
  %105 = load i8** %xpv_pv256, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %102, i64 8
  %106 = bitcast i8* %xpv_cur to i64*
  %107 = load i64* %106, align 8, !tbaa !5
  %call258 = call i32 @Perl_grok_number(i8* %105, i64 %107, i64* %value) #8
  %and259 = and i32 %call258, 5
  %cmp260 = icmp eq i32 %and259, 1
  %108 = load i32* %sv_flags, align 4, !tbaa !3
  %and264 = and i32 %108, 255
  br i1 %cmp260, label %if.then262, label %if.else280

if.then262:                                       ; preds = %if.then254
  %cmp265 = icmp ult i32 %and264, 5
  br i1 %cmp265, label %if.then267, label %if.end269

if.then267:                                       ; preds = %if.then262
  %call268 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 5) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end269

if.end269:                                        ; preds = %if.then267, %if.then262
  %109 = phi i32 [ %.pre, %if.then267 ], [ %108, %if.then262 ]
  %and271 = and i32 %109, 2097152
  %tobool272 = icmp eq i32 %and271, 0
  br i1 %tobool272, label %land.end276, label %land.rhs273

land.rhs273:                                      ; preds = %if.end269
  %call274 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre654 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end276

land.end276:                                      ; preds = %if.end269, %land.rhs273
  %110 = phi i32 [ %109, %if.end269 ], [ %.pre654, %land.rhs273 ]
  %or279 = or i32 %110, 16842752
  store i32 %or279, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end288

if.else280:                                       ; preds = %if.then254
  %cmp283 = icmp ult i32 %and264, 6
  br i1 %cmp283, label %if.then285, label %if.end288

if.then285:                                       ; preds = %if.else280
  %call286 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  br label %if.end288

if.end288:                                        ; preds = %if.else280, %if.then285, %land.end276
  %and289 = and i32 %call258, 1
  %cmp290 = icmp eq i32 %and289, 0
  br i1 %cmp290, label %if.end354, label %if.then292

if.then292:                                       ; preds = %if.end288
  %111 = load i32* %sv_flags, align 4, !tbaa !3
  %and294 = and i32 %111, 2097152
  %tobool295 = icmp eq i32 %and294, 0
  br i1 %tobool295, label %land.end299, label %land.rhs296

land.rhs296:                                      ; preds = %if.then292
  %call297 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre659 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end299

land.end299:                                      ; preds = %if.then292, %land.rhs296
  %112 = phi i32 [ %111, %if.then292 ], [ %.pre659, %land.rhs296 ]
  %or302 = or i32 %112, 16777216
  store i32 %or302, i32* %sv_flags, align 4, !tbaa !3
  %and303 = and i32 %call258, 8
  %tobool304 = icmp eq i32 %and303, 0
  %113 = load i64* %value, align 8, !tbaa !5
  br i1 %tobool304, label %if.then305, label %if.else317

if.then305:                                       ; preds = %land.end299
  %cmp306 = icmp sgt i64 %113, -1
  %114 = load i8** %sv_any251, align 8, !tbaa !0
  %xiv_iv310 = getelementptr inbounds i8* %114, i64 24
  %115 = bitcast i8* %xiv_iv310 to i64*
  store i64 %113, i64* %115, align 8, !tbaa !5
  br i1 %cmp306, label %if.end354, label %if.else311

if.else311:                                       ; preds = %if.then305
  %or315 = or i32 %112, -2130706432
  store i32 %or315, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end354

if.else317:                                       ; preds = %land.end299
  %cmp318 = icmp ult i64 %113, -9223372036854775807
  br i1 %cmp318, label %if.then320, label %if.else324

if.then320:                                       ; preds = %if.else317
  %sub321 = sub nsw i64 0, %113
  %116 = load i8** %sv_any251, align 8, !tbaa !0
  %xiv_iv323 = getelementptr inbounds i8* %116, i64 24
  %117 = bitcast i8* %xiv_iv323 to i64*
  store i64 %sub321, i64* %117, align 8, !tbaa !5
  br label %if.end354

if.else324:                                       ; preds = %if.else317
  %and326 = and i32 %112, 254
  %cmp327 = icmp ult i32 %and326, 6
  br i1 %cmp327, label %if.then329, label %if.end331

if.then329:                                       ; preds = %if.else324
  %call330 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  %.pre660 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end331

if.end331:                                        ; preds = %if.then329, %if.else324
  %118 = phi i32 [ %.pre660, %if.then329 ], [ %or302, %if.else324 ]
  %or333 = and i32 %118, 2096955391
  %and335 = or i32 %or333, 33685504
  store i32 %and335, i32* %sv_flags, align 4, !tbaa !3
  %and337 = and i32 %118, 2097152
  %tobool338 = icmp eq i32 %and337, 0
  br i1 %tobool338, label %land.end342, label %land.rhs339

land.rhs339:                                      ; preds = %if.end331
  %call340 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre661 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end342

land.end342:                                      ; preds = %if.end331, %land.rhs339
  %119 = phi i32 [ %.pre661, %land.rhs339 ], [ %and335, %if.end331 ]
  %or345 = or i32 %119, 16777216
  store i32 %or345, i32* %sv_flags, align 4, !tbaa !3
  %120 = load i64* %value, align 8, !tbaa !5
  %conv346 = uitofp i64 %120 to double
  %sub347 = fsub double -0.000000e+00, %conv346
  %121 = load i8** %sv_any251, align 8, !tbaa !0
  %xnv_nv349 = getelementptr inbounds i8* %121, i64 32
  %122 = bitcast i8* %xnv_nv349 to double*
  store double %sub347, double* %122, align 8, !tbaa !6
  %xiv_iv351 = getelementptr inbounds i8* %121, i64 24
  %123 = bitcast i8* %xiv_iv351 to i64*
  store i64 -9223372036854775808, i64* %123, align 8, !tbaa !5
  br label %if.end354

if.end354:                                        ; preds = %if.then305, %if.end288, %if.else311, %land.end342, %if.then320
  br i1 %cmp260, label %if.end528, label %if.then358

if.then358:                                       ; preds = %if.end354
  %124 = load i8** %sv_any251, align 8, !tbaa !0
  %xpv_pv360 = bitcast i8* %124 to i8**
  %125 = load i8** %xpv_pv360, align 8, !tbaa !0
  %call361 = call double @Perl_my_atof(i8* %125) #8
  %126 = load i8** %sv_any251, align 8, !tbaa !0
  %xnv_nv363 = getelementptr inbounds i8* %126, i64 32
  %127 = bitcast i8* %xnv_nv363 to double*
  store double %call361, double* %127, align 8, !tbaa !6
  %tobool364 = icmp eq i32 %call258, 0
  br i1 %tobool364, label %land.lhs.true365, label %if.end394

land.lhs.true365:                                 ; preds = %if.then358
  %128 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings366 = getelementptr inbounds %struct.cop* %128, i64 0, i32 14
  %129 = load %struct.sv** %cop_warnings366, align 8, !tbaa !0
  %cmp367 = icmp eq %struct.sv* %129, null
  br i1 %cmp367, label %lor.lhs.false385, label %land.lhs.true369

land.lhs.true369:                                 ; preds = %land.lhs.true365
  %130 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings370 = getelementptr inbounds %struct.cop* %130, i64 0, i32 14
  %131 = load %struct.sv** %cop_warnings370, align 8, !tbaa !0
  %cmp371 = icmp eq %struct.sv* %131, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp371, label %lor.lhs.false385, label %land.lhs.true373

land.lhs.true373:                                 ; preds = %land.lhs.true369
  %132 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings374 = getelementptr inbounds %struct.cop* %132, i64 0, i32 14
  %133 = load %struct.sv** %cop_warnings374, align 8, !tbaa !0
  %cmp375 = icmp eq %struct.sv* %133, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp375, label %if.then393, label %lor.lhs.false377

lor.lhs.false377:                                 ; preds = %land.lhs.true373
  %134 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings378 = getelementptr inbounds %struct.cop* %134, i64 0, i32 14
  %135 = load %struct.sv** %cop_warnings378, align 8, !tbaa !0
  %sv_any379 = getelementptr inbounds %struct.sv* %135, i64 0, i32 0
  %136 = load i8** %sv_any379, align 8, !tbaa !0
  %xpv_pv380 = bitcast i8* %136 to i8**
  %137 = load i8** %xpv_pv380, align 8, !tbaa !0
  %arrayidx381 = getelementptr inbounds i8* %137, i64 3
  %138 = load i8* %arrayidx381, align 1, !tbaa !1
  %and383 = and i8 %138, 4
  %tobool384 = icmp eq i8 %and383, 0
  br i1 %tobool384, label %lor.lhs.false385, label %if.then393

lor.lhs.false385:                                 ; preds = %lor.lhs.false377, %land.lhs.true369, %land.lhs.true365
  %139 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings386 = getelementptr inbounds %struct.cop* %139, i64 0, i32 14
  %140 = load %struct.sv** %cop_warnings386, align 8, !tbaa !0
  %cmp387 = icmp eq %struct.sv* %140, null
  br i1 %cmp387, label %land.lhs.true389, label %if.end394

land.lhs.true389:                                 ; preds = %lor.lhs.false385
  %141 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and391 = and i8 %141, 1
  %tobool392 = icmp eq i8 %and391, 0
  br i1 %tobool392, label %if.end394, label %if.then393

if.then393:                                       ; preds = %lor.lhs.false377, %land.lhs.true389, %land.lhs.true373
  call fastcc void @S_not_a_number(%struct.sv* %sv) #7
  br label %if.end394

if.end394:                                        ; preds = %land.lhs.true389, %if.then358, %if.then393, %lor.lhs.false385
  %cmp396 = icmp eq i32 %and259, 5
  br i1 %cmp396, label %if.then398, label %if.else401

if.then398:                                       ; preds = %if.end394
  %142 = load i32* %sv_flags, align 4, !tbaa !3
  %or400 = or i32 %142, 33685504
  store i32 %or400, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end528

if.else401:                                       ; preds = %if.end394
  %143 = load i8** %sv_any251, align 8, !tbaa !0
  %xnv_nv403 = getelementptr inbounds i8* %143, i64 32
  %144 = bitcast i8* %xnv_nv403 to double*
  %145 = load double* %144, align 8, !tbaa !6
  %cmp404 = fcmp ogt double %145, 0.000000e+00
  br i1 %cmp404, label %cond.end413, label %cond.false409

cond.false409:                                    ; preds = %if.else401
  %sub412 = fsub double -0.000000e+00, %145
  br label %cond.end413

cond.end413:                                      ; preds = %if.else401, %cond.false409
  %cond414 = phi double [ %sub412, %cond.false409 ], [ %145, %if.else401 ]
  %call415 = call i64 @Perl_cast_uv(double %cond414) #8
  %cmp416 = icmp ult i64 %call415, 4294967296
  br i1 %cmp416, label %if.then418, label %if.else478

if.then418:                                       ; preds = %cond.end413
  %146 = load i32* %sv_flags, align 4, !tbaa !3
  %and420 = and i32 %146, 2097152
  %tobool421 = icmp eq i32 %and420, 0
  br i1 %tobool421, label %land.end425, label %land.rhs422

land.rhs422:                                      ; preds = %if.then418
  %call423 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre655 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end425

land.end425:                                      ; preds = %if.then418, %land.rhs422
  %147 = phi i32 [ %146, %if.then418 ], [ %.pre655, %land.rhs422 ]
  %or430 = or i32 %147, 50462720
  store i32 %or430, i32* %sv_flags, align 4, !tbaa !3
  %148 = load i8** %sv_any251, align 8, !tbaa !0
  %xnv_nv432 = getelementptr inbounds i8* %148, i64 32
  %149 = bitcast i8* %xnv_nv432 to double*
  %150 = load double* %149, align 8, !tbaa !6
  %call433 = call i64 @Perl_cast_iv(double %150) #8
  %151 = load i8** %sv_any251, align 8, !tbaa !0
  %xiv_iv435 = getelementptr inbounds i8* %151, i64 24
  %152 = bitcast i8* %xiv_iv435 to i64*
  store i64 %call433, i64* %152, align 8, !tbaa !5
  %conv438 = sitofp i64 %call433 to double
  %xnv_nv440 = getelementptr inbounds i8* %151, i64 32
  %153 = bitcast i8* %xnv_nv440 to double*
  %154 = load double* %153, align 8, !tbaa !6
  %cmp441 = fcmp oeq double %conv438, %154
  br i1 %cmp441, label %if.then443, label %if.end454

if.then443:                                       ; preds = %land.end425
  %155 = load i32* %sv_flags, align 4, !tbaa !3
  %and445 = and i32 %155, 2097152
  %tobool446 = icmp eq i32 %and445, 0
  br i1 %tobool446, label %land.end450, label %land.rhs447

land.rhs447:                                      ; preds = %if.then443
  %call448 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre656 = load i32* %sv_flags, align 4, !tbaa !3
  %.pre657.pre = load i8** %sv_any251, align 8, !tbaa !0
  %xnv_nv456.phi.trans.insert.phi.trans.insert = getelementptr inbounds i8* %.pre657.pre, i64 32
  %.phi.trans.insert.phi.trans.insert = bitcast i8* %xnv_nv456.phi.trans.insert.phi.trans.insert to double*
  %.pre658.pre = load double* %.phi.trans.insert.phi.trans.insert, align 8, !tbaa !6
  br label %land.end450

land.end450:                                      ; preds = %if.then443, %land.rhs447
  %.pre658 = phi double [ %154, %if.then443 ], [ %.pre658.pre, %land.rhs447 ]
  %156 = phi i32 [ %155, %if.then443 ], [ %.pre656, %land.rhs447 ]
  %or453 = or i32 %156, 16842752
  store i32 %or453, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end454

if.end454:                                        ; preds = %land.end450, %land.end425
  %157 = phi double [ %.pre658, %land.end450 ], [ %154, %land.end425 ]
  %cmp457 = fcmp ogt double %157, 0.000000e+00
  br i1 %cmp457, label %cond.end466, label %cond.false462

cond.false462:                                    ; preds = %if.end454
  %sub465 = fsub double -0.000000e+00, %157
  br label %cond.end466

cond.end466:                                      ; preds = %if.end454, %cond.false462
  %cond467 = phi double [ %sub465, %cond.false462 ], [ %157, %if.end454 ]
  %call468 = call i64 @Perl_cast_uv(double %cond467) #8
  %cmp469 = icmp ult i64 %call468, 9223372036854775807
  br i1 %cmp469, label %if.end528, label %if.then471

if.then471:                                       ; preds = %cond.end466
  %158 = load i8** %sv_any251, align 8, !tbaa !0
  %xnv_nv473 = getelementptr inbounds i8* %158, i64 32
  %159 = bitcast i8* %xnv_nv473 to double*
  %160 = load double* %159, align 8, !tbaa !6
  %call476 = call i64 @Perl_cast_uv(double %160) #8
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([107 x i8]* @.str7, i64 0, i64 0), double %160, i64 %call476, i64 9223372036854775807) #8
  br label %if.end528

if.else478:                                       ; preds = %cond.end413
  %161 = call fastcc i32 @S_sv_2iuv_non_preserve(%struct.sv* %sv) #7
  br label %if.end528

if.else483:                                       ; preds = %land.lhs.true250, %if.else246
  %and485 = and i32 %80, 512
  %tobool486 = icmp eq i32 %and485, 0
  br i1 %tobool486, label %if.then487, label %if.end519

if.then487:                                       ; preds = %if.else483
  %162 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings488 = getelementptr inbounds %struct.cop* %162, i64 0, i32 14
  %163 = load %struct.sv** %cop_warnings488, align 8, !tbaa !0
  %cmp489 = icmp eq %struct.sv* %163, null
  br i1 %cmp489, label %lor.lhs.false507, label %land.lhs.true491

land.lhs.true491:                                 ; preds = %if.then487
  %164 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings492 = getelementptr inbounds %struct.cop* %164, i64 0, i32 14
  %165 = load %struct.sv** %cop_warnings492, align 8, !tbaa !0
  %cmp493 = icmp eq %struct.sv* %165, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp493, label %lor.lhs.false507, label %land.lhs.true495

land.lhs.true495:                                 ; preds = %land.lhs.true491
  %166 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings496 = getelementptr inbounds %struct.cop* %166, i64 0, i32 14
  %167 = load %struct.sv** %cop_warnings496, align 8, !tbaa !0
  %cmp497 = icmp eq %struct.sv* %167, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp497, label %land.lhs.true515, label %lor.lhs.false499

lor.lhs.false499:                                 ; preds = %land.lhs.true495
  %168 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings500 = getelementptr inbounds %struct.cop* %168, i64 0, i32 14
  %169 = load %struct.sv** %cop_warnings500, align 8, !tbaa !0
  %sv_any501 = getelementptr inbounds %struct.sv* %169, i64 0, i32 0
  %170 = load i8** %sv_any501, align 8, !tbaa !0
  %xpv_pv502 = bitcast i8* %170 to i8**
  %171 = load i8** %xpv_pv502, align 8, !tbaa !0
  %arrayidx503 = getelementptr inbounds i8* %171, i64 10
  %172 = load i8* %arrayidx503, align 1, !tbaa !1
  %and505 = and i8 %172, 4
  %tobool506 = icmp eq i8 %and505, 0
  br i1 %tobool506, label %lor.lhs.false507, label %land.lhs.true515

lor.lhs.false507:                                 ; preds = %lor.lhs.false499, %land.lhs.true491, %if.then487
  %173 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings508 = getelementptr inbounds %struct.cop* %173, i64 0, i32 14
  %174 = load %struct.sv** %cop_warnings508, align 8, !tbaa !0
  %cmp509 = icmp eq %struct.sv* %174, null
  br i1 %cmp509, label %land.lhs.true511, label %if.end519

land.lhs.true511:                                 ; preds = %lor.lhs.false507
  %175 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and513 = and i8 %175, 1
  %tobool514 = icmp eq i8 %and513, 0
  %176 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool516 = icmp ne i32 %176, 0
  %or.cond541 = or i1 %tobool514, %tobool516
  br i1 %or.cond541, label %if.end519, label %if.then517

land.lhs.true515:                                 ; preds = %lor.lhs.false499, %land.lhs.true495
  %.old540 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool516.old = icmp eq i32 %.old540, 0
  br i1 %tobool516.old, label %if.then517, label %if.end519

if.then517:                                       ; preds = %land.lhs.true515, %land.lhs.true511
  call void @Perl_report_uninit() #7
  br label %if.end519

if.end519:                                        ; preds = %land.lhs.true515, %land.lhs.true511, %lor.lhs.false507, %if.else483, %if.then517
  %177 = load i32* %sv_flags, align 4, !tbaa !3
  %and521 = and i32 %177, 255
  %cmp522 = icmp eq i32 %and521, 0
  br i1 %cmp522, label %if.then524, label %return

if.then524:                                       ; preds = %if.end519
  %call525 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 1) #7
  br label %return

if.end528:                                        ; preds = %cond.end466, %if.end354, %if.then398, %if.then471, %if.else478, %if.end242, %if.then172, %land.lhs.true185, %land.end207
  %sv_any533 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %178 = load i8** %sv_any533, align 8, !tbaa !0
  %cond539.in.in = getelementptr inbounds i8* %178, i64 24
  %cond539.in = bitcast i8* %cond539.in.in to i64*
  %cond539 = load i64* %cond539.in, align 8
  br label %return

return:                                           ; preds = %if.end28.i, %if.then3.i, %if.end519, %if.then524, %if.then142, %lor.lhs.false127, %if.then135, %land.lhs.true131, %cond.true, %cond.false, %land.lhs.true45, %if.then51, %lor.lhs.false41, %if.then26, %land.lhs.true49, %entry, %if.end528, %if.end87, %if.then11, %if.then6
  %retval.0 = phi i64 [ %4, %if.then6 ], [ %call13, %if.then11 ], [ %60, %if.end87 ], [ %cond539, %if.end528 ], [ 0, %entry ], [ 0, %land.lhs.true49 ], [ 0, %if.then26 ], [ 0, %lor.lhs.false41 ], [ 0, %if.then51 ], [ 0, %land.lhs.true45 ], [ %57, %cond.true ], [ %call86, %cond.false ], [ 0, %land.lhs.true131 ], [ 0, %if.then135 ], [ 0, %lor.lhs.false127 ], [ %83, %if.then142 ], [ 0, %if.then524 ], [ 0, %if.end519 ], [ %call32.i, %if.end28.i ], [ %17, %if.then3.i ]
  ret i64 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define double @Perl_sv_2nv(%struct.sv* %sv) #0 {
entry:
  %value = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end102, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = call i32 @Perl_mg_get(%struct.sv* %sv) #8
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and4 = and i32 %1, 33554432
  %tobool5 = icmp eq i32 %and4, 0
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.then2
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %2 = load i8** %sv_any, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %2, i64 32
  %3 = bitcast i8* %xnv_nv to double*
  %4 = load double* %3, align 8, !tbaa !6
  br label %return

if.end7:                                          ; preds = %if.then2
  %and9 = and i32 %1, 67108864
  %tobool10 = icmp eq i32 %and9, 0
  br i1 %tobool10, label %if.end47, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end7
  %sv_any11 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %5 = load i8** %sv_any11, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %5, i64 16
  %6 = bitcast i8* %xpv_len to i64*
  %7 = load i64* %6, align 8, !tbaa !5
  %tobool12 = icmp eq i64 %7, 0
  br i1 %tobool12, label %if.end47, label %if.then13

if.then13:                                        ; preds = %land.lhs.true
  %8 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %8, i64 0, i32 14
  %9 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp = icmp eq %struct.sv* %9, null
  br i1 %cmp, label %lor.lhs.false24, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %if.then13
  %10 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings15 = getelementptr inbounds %struct.cop* %10, i64 0, i32 14
  %11 = load %struct.sv** %cop_warnings15, align 8, !tbaa !0
  %cmp16 = icmp eq %struct.sv* %11, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp16, label %lor.lhs.false24, label %land.lhs.true17

land.lhs.true17:                                  ; preds = %land.lhs.true14
  %12 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings18 = getelementptr inbounds %struct.cop* %12, i64 0, i32 14
  %13 = load %struct.sv** %cop_warnings18, align 8, !tbaa !0
  %cmp19 = icmp eq %struct.sv* %13, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp19, label %land.lhs.true32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true17
  %14 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings20 = getelementptr inbounds %struct.cop* %14, i64 0, i32 14
  %15 = load %struct.sv** %cop_warnings20, align 8, !tbaa !0
  %sv_any21 = getelementptr inbounds %struct.sv* %15, i64 0, i32 0
  %16 = load i8** %sv_any21, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %16 to i8**
  %17 = load i8** %xpv_pv, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %17, i64 3
  %18 = load i8* %arrayidx, align 1, !tbaa !1
  %and22 = and i8 %18, 4
  %tobool23 = icmp eq i8 %and22, 0
  br i1 %tobool23, label %lor.lhs.false24, label %land.lhs.true32

lor.lhs.false24:                                  ; preds = %lor.lhs.false, %land.lhs.true14, %if.then13
  %19 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings25 = getelementptr inbounds %struct.cop* %19, i64 0, i32 14
  %20 = load %struct.sv** %cop_warnings25, align 8, !tbaa !0
  %cmp26 = icmp eq %struct.sv* %20, null
  br i1 %cmp26, label %land.lhs.true28, label %if.end43

land.lhs.true28:                                  ; preds = %lor.lhs.false24
  %21 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and30 = and i8 %21, 1
  %tobool31 = icmp eq i8 %and30, 0
  br i1 %tobool31, label %if.end43, label %land.lhs.true32

land.lhs.true32:                                  ; preds = %lor.lhs.false, %land.lhs.true28, %land.lhs.true17
  %22 = load i32* %sv_flags, align 4, !tbaa !3
  %and34 = and i32 %22, 16777216
  %tobool35 = icmp eq i32 %and34, 0
  br i1 %tobool35, label %land.lhs.true36, label %if.end43

land.lhs.true36:                                  ; preds = %land.lhs.true32
  %23 = load i8** %sv_any11, align 8, !tbaa !0
  %xpv_pv38 = bitcast i8* %23 to i8**
  %24 = load i8** %xpv_pv38, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %23, i64 8
  %25 = bitcast i8* %xpv_cur to i64*
  %26 = load i64* %25, align 8, !tbaa !5
  %call40 = call i32 @Perl_grok_number(i8* %24, i64 %26, i64* null) #8
  %tobool41 = icmp eq i32 %call40, 0
  br i1 %tobool41, label %if.then42, label %if.end43

if.then42:                                        ; preds = %land.lhs.true36
  call fastcc void @S_not_a_number(%struct.sv* %sv) #7
  br label %if.end43

if.end43:                                         ; preds = %land.lhs.true36, %land.lhs.true32, %land.lhs.true28, %if.then42, %lor.lhs.false24
  %27 = load i8** %sv_any11, align 8, !tbaa !0
  %xpv_pv45 = bitcast i8* %27 to i8**
  %28 = load i8** %xpv_pv45, align 8, !tbaa !0
  %call46 = call double @Perl_my_atof(i8* %28) #8
  br label %return

if.end47:                                         ; preds = %land.lhs.true, %if.end7
  %and49 = and i32 %1, 16777216
  %tobool50 = icmp eq i32 %and49, 0
  br i1 %tobool50, label %if.end60, label %if.then51

if.then51:                                        ; preds = %if.end47
  %tobool54 = icmp slt i32 %1, 0
  %sv_any56 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %29 = load i8** %sv_any56, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %29, i64 24
  %30 = bitcast i8* %xuv_uv to i64*
  %31 = load i64* %30, align 8, !tbaa !5
  br i1 %tobool54, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.then51
  %conv57 = uitofp i64 %31 to double
  br label %return

if.else:                                          ; preds = %if.then51
  %conv59 = sitofp i64 %31 to double
  br label %return

if.end60:                                         ; preds = %if.end47
  %and62 = and i32 %1, 524288
  %tobool63 = icmp eq i32 %and62, 0
  br i1 %tobool63, label %if.then64, label %if.end102

if.then64:                                        ; preds = %if.end60
  %and66 = and i32 %1, 512
  %tobool67 = icmp eq i32 %and66, 0
  br i1 %tobool67, label %if.then68, label %return

if.then68:                                        ; preds = %if.then64
  %32 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings69 = getelementptr inbounds %struct.cop* %32, i64 0, i32 14
  %33 = load %struct.sv** %cop_warnings69, align 8, !tbaa !0
  %cmp70 = icmp eq %struct.sv* %33, null
  br i1 %cmp70, label %lor.lhs.false88, label %land.lhs.true72

land.lhs.true72:                                  ; preds = %if.then68
  %34 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings73 = getelementptr inbounds %struct.cop* %34, i64 0, i32 14
  %35 = load %struct.sv** %cop_warnings73, align 8, !tbaa !0
  %cmp74 = icmp eq %struct.sv* %35, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp74, label %lor.lhs.false88, label %land.lhs.true76

land.lhs.true76:                                  ; preds = %land.lhs.true72
  %36 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings77 = getelementptr inbounds %struct.cop* %36, i64 0, i32 14
  %37 = load %struct.sv** %cop_warnings77, align 8, !tbaa !0
  %cmp78 = icmp eq %struct.sv* %37, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp78, label %land.lhs.true96, label %lor.lhs.false80

lor.lhs.false80:                                  ; preds = %land.lhs.true76
  %38 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings81 = getelementptr inbounds %struct.cop* %38, i64 0, i32 14
  %39 = load %struct.sv** %cop_warnings81, align 8, !tbaa !0
  %sv_any82 = getelementptr inbounds %struct.sv* %39, i64 0, i32 0
  %40 = load i8** %sv_any82, align 8, !tbaa !0
  %xpv_pv83 = bitcast i8* %40 to i8**
  %41 = load i8** %xpv_pv83, align 8, !tbaa !0
  %arrayidx84 = getelementptr inbounds i8* %41, i64 10
  %42 = load i8* %arrayidx84, align 1, !tbaa !1
  %and86 = and i8 %42, 4
  %tobool87 = icmp eq i8 %and86, 0
  br i1 %tobool87, label %lor.lhs.false88, label %land.lhs.true96

lor.lhs.false88:                                  ; preds = %lor.lhs.false80, %land.lhs.true72, %if.then68
  %43 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings89 = getelementptr inbounds %struct.cop* %43, i64 0, i32 14
  %44 = load %struct.sv** %cop_warnings89, align 8, !tbaa !0
  %cmp90 = icmp eq %struct.sv* %44, null
  br i1 %cmp90, label %land.lhs.true92, label %return

land.lhs.true92:                                  ; preds = %lor.lhs.false88
  %45 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and94 = and i8 %45, 1
  %tobool95 = icmp eq i8 %and94, 0
  %46 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool97 = icmp ne i32 %46, 0
  %or.cond = or i1 %tobool95, %tobool97
  br i1 %or.cond, label %return, label %if.then98

land.lhs.true96:                                  ; preds = %lor.lhs.false80, %land.lhs.true76
  %.old = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool97.old = icmp eq i32 %.old, 0
  br i1 %tobool97.old, label %if.then98, label %return

if.then98:                                        ; preds = %land.lhs.true96, %land.lhs.true92
  call void @Perl_report_uninit() #7
  br label %return

if.end102:                                        ; preds = %if.end60, %if.end
  %47 = phi i32 [ %1, %if.end60 ], [ %0, %if.end ]
  %and104 = and i32 %47, 9961472
  %tobool105 = icmp eq i32 %and104, 0
  br i1 %tobool105, label %if.end186, label %if.then106

if.then106:                                       ; preds = %if.end102
  %and108 = and i32 %47, 524288
  %tobool109 = icmp eq i32 %and108, 0
  br i1 %tobool109, label %if.end138, label %if.then110

if.then110:                                       ; preds = %if.then106
  %and112 = and i32 %47, 268435456
  %tobool113 = icmp eq i32 %and112, 0
  br i1 %tobool113, label %if.end134, label %land.lhs.true114

land.lhs.true114:                                 ; preds = %if.then110
  %call115 = call %struct.sv* @Perl_amagic_call(%struct.sv* %sv, %struct.sv* @PL_sv_undef, i32 5, i32 9) #8
  %tobool116 = icmp eq %struct.sv* %call115, null
  br i1 %tobool116, label %if.end134, label %land.lhs.true117

land.lhs.true117:                                 ; preds = %land.lhs.true114
  %sv_flags118 = getelementptr inbounds %struct.sv* %call115, i64 0, i32 2
  %48 = load i32* %sv_flags118, align 4, !tbaa !3
  %and119 = and i32 %48, 524288
  %tobool120 = icmp eq i32 %and119, 0
  br i1 %tobool120, label %if.then127, label %lor.lhs.false121

lor.lhs.false121:                                 ; preds = %land.lhs.true117
  %sv_any122 = getelementptr inbounds %struct.sv* %call115, i64 0, i32 0
  %49 = load i8** %sv_any122, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %49 to %struct.sv**
  %50 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_any123 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %51 = load i8** %sv_any123, align 8, !tbaa !0
  %xrv_rv124 = bitcast i8* %51 to %struct.sv**
  %52 = load %struct.sv** %xrv_rv124, align 8, !tbaa !0
  %cmp125 = icmp eq %struct.sv* %50, %52
  br i1 %cmp125, label %if.end134, label %if.then127

if.then127:                                       ; preds = %lor.lhs.false121, %land.lhs.true117
  %and129 = and i32 %48, 131072
  %tobool130 = icmp eq i32 %and129, 0
  br i1 %tobool130, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then127
  %sv_any131 = getelementptr inbounds %struct.sv* %call115, i64 0, i32 0
  %53 = load i8** %sv_any131, align 8, !tbaa !0
  %xnv_nv132 = getelementptr inbounds i8* %53, i64 32
  %54 = bitcast i8* %xnv_nv132 to double*
  %55 = load double* %54, align 8, !tbaa !6
  br label %return

cond.false:                                       ; preds = %if.then127
  %call133 = call double @Perl_sv_2nv(%struct.sv* %call115) #7
  br label %return

if.end134:                                        ; preds = %land.lhs.true114, %if.then110, %lor.lhs.false121
  %sv_any135 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %56 = load i8** %sv_any135, align 8, !tbaa !0
  %xrv_rv136 = bitcast i8* %56 to %struct.sv**
  %57 = load %struct.sv** %xrv_rv136, align 8, !tbaa !0
  %58 = ptrtoint %struct.sv* %57 to i64
  %conv137 = uitofp i64 %58 to double
  br label %return

if.end138:                                        ; preds = %if.then106
  %59 = and i32 %47, 9437184
  %60 = icmp eq i32 %59, 9437184
  br i1 %60, label %if.then146, label %if.end147

if.then146:                                       ; preds = %if.end138
  call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre622 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end147

if.end147:                                        ; preds = %if.end138, %if.then146
  %61 = phi i32 [ %47, %if.end138 ], [ %.pre622, %if.then146 ]
  %62 = and i32 %61, 126812160
  %63 = icmp eq i32 %62, 8388608
  br i1 %63, label %if.then155, label %if.end186

if.then155:                                       ; preds = %if.end147
  %64 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings156 = getelementptr inbounds %struct.cop* %64, i64 0, i32 14
  %65 = load %struct.sv** %cop_warnings156, align 8, !tbaa !0
  %cmp157 = icmp eq %struct.sv* %65, null
  br i1 %cmp157, label %lor.lhs.false175, label %land.lhs.true159

land.lhs.true159:                                 ; preds = %if.then155
  %66 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings160 = getelementptr inbounds %struct.cop* %66, i64 0, i32 14
  %67 = load %struct.sv** %cop_warnings160, align 8, !tbaa !0
  %cmp161 = icmp eq %struct.sv* %67, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp161, label %lor.lhs.false175, label %land.lhs.true163

land.lhs.true163:                                 ; preds = %land.lhs.true159
  %68 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings164 = getelementptr inbounds %struct.cop* %68, i64 0, i32 14
  %69 = load %struct.sv** %cop_warnings164, align 8, !tbaa !0
  %cmp165 = icmp eq %struct.sv* %69, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp165, label %if.then183, label %lor.lhs.false167

lor.lhs.false167:                                 ; preds = %land.lhs.true163
  %70 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings168 = getelementptr inbounds %struct.cop* %70, i64 0, i32 14
  %71 = load %struct.sv** %cop_warnings168, align 8, !tbaa !0
  %sv_any169 = getelementptr inbounds %struct.sv* %71, i64 0, i32 0
  %72 = load i8** %sv_any169, align 8, !tbaa !0
  %xpv_pv170 = bitcast i8* %72 to i8**
  %73 = load i8** %xpv_pv170, align 8, !tbaa !0
  %arrayidx171 = getelementptr inbounds i8* %73, i64 10
  %74 = load i8* %arrayidx171, align 1, !tbaa !1
  %and173 = and i8 %74, 4
  %tobool174 = icmp eq i8 %and173, 0
  br i1 %tobool174, label %lor.lhs.false175, label %if.then183

lor.lhs.false175:                                 ; preds = %lor.lhs.false167, %land.lhs.true159, %if.then155
  %75 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings176 = getelementptr inbounds %struct.cop* %75, i64 0, i32 14
  %76 = load %struct.sv** %cop_warnings176, align 8, !tbaa !0
  %cmp177 = icmp eq %struct.sv* %76, null
  br i1 %cmp177, label %land.lhs.true179, label %return

land.lhs.true179:                                 ; preds = %lor.lhs.false175
  %77 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and181 = and i8 %77, 1
  %tobool182 = icmp eq i8 %and181, 0
  br i1 %tobool182, label %return, label %if.then183

if.then183:                                       ; preds = %lor.lhs.false167, %land.lhs.true179, %land.lhs.true163
  call void @Perl_report_uninit() #7
  br label %return

if.end186:                                        ; preds = %if.end147, %if.end102
  %78 = phi i32 [ %61, %if.end147 ], [ %47, %if.end102 ]
  %and188 = and i32 %78, 255
  %cmp189 = icmp ult i32 %and188, 2
  br i1 %cmp189, label %if.then191, label %if.else201

if.then191:                                       ; preds = %if.end186
  %cmp194 = icmp eq i32 %and188, 1
  br i1 %cmp194, label %if.then196, label %if.else198

if.then196:                                       ; preds = %if.then191
  %call197 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  br label %if.end209

if.else198:                                       ; preds = %if.then191
  %call199 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 2) #7
  br label %if.end209

if.else201:                                       ; preds = %if.end186
  %cmp204 = icmp ult i32 %and188, 6
  br i1 %cmp204, label %if.then206, label %if.end209

if.then206:                                       ; preds = %if.else201
  %call207 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  br label %if.end209

if.end209:                                        ; preds = %if.else201, %if.then206, %if.then196, %if.else198
  %79 = load i32* %sv_flags, align 4, !tbaa !3
  %and211 = and i32 %79, 33554432
  %tobool212 = icmp eq i32 %and211, 0
  br i1 %tobool212, label %if.end216, label %if.then213

if.then213:                                       ; preds = %if.end209
  %sv_any214 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %80 = load i8** %sv_any214, align 8, !tbaa !0
  %xnv_nv215 = getelementptr inbounds i8* %80, i64 32
  %81 = bitcast i8* %xnv_nv215 to double*
  %82 = load double* %81, align 8, !tbaa !6
  br label %return

if.end216:                                        ; preds = %if.end209
  %and218 = and i32 %79, 16777216
  %tobool219 = icmp eq i32 %and218, 0
  br i1 %tobool219, label %if.else266, label %if.then220

if.then220:                                       ; preds = %if.end216
  %tobool223 = icmp slt i32 %79, 0
  %sv_any225 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %83 = load i8** %sv_any225, align 8, !tbaa !0
  %xuv_uv226 = getelementptr inbounds i8* %83, i64 24
  %84 = bitcast i8* %xuv_uv226 to i64*
  %85 = load i64* %84, align 8, !tbaa !5
  br i1 %tobool223, label %cond.true239, label %cond.false252

cond.true239:                                     ; preds = %if.then220
  %conv227 = uitofp i64 %85 to double
  %xnv_nv235623 = getelementptr inbounds i8* %83, i64 32
  %86 = bitcast i8* %xnv_nv235623 to double*
  store double %conv227, double* %86, align 8, !tbaa !6
  %cmp242 = icmp eq i64 %85, -1
  br i1 %cmp242, label %if.else262, label %land.lhs.true244

land.lhs.true244:                                 ; preds = %cond.true239
  %call249 = call i64 @Perl_cast_uv(double %conv227) #8
  %cmp250 = icmp eq i64 %85, %call249
  br i1 %cmp250, label %if.then260, label %if.else262

cond.false252:                                    ; preds = %if.then220
  %conv231 = sitofp i64 %85 to double
  %xnv_nv235 = getelementptr inbounds i8* %83, i64 32
  %87 = bitcast i8* %xnv_nv235 to double*
  store double %conv231, double* %87, align 8, !tbaa !6
  %call257 = call i64 @Perl_cast_iv(double %conv231) #8
  %cmp258 = icmp eq i64 %85, %call257
  br i1 %cmp258, label %if.then260, label %if.else262

if.then260:                                       ; preds = %cond.false252, %land.lhs.true244
  %88 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %88, 33685504
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end511

if.else262:                                       ; preds = %cond.false252, %land.lhs.true244, %cond.true239
  %89 = load i32* %sv_flags, align 4, !tbaa !3
  %or264 = or i32 %89, 33554432
  store i32 %or264, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end511

if.else266:                                       ; preds = %if.end216
  %and268 = and i32 %79, 67108864
  %tobool269 = icmp eq i32 %and268, 0
  br i1 %tobool269, label %if.else467, label %land.lhs.true270

land.lhs.true270:                                 ; preds = %if.else266
  %sv_any271 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %90 = load i8** %sv_any271, align 8, !tbaa !0
  %xpv_len272 = getelementptr inbounds i8* %90, i64 16
  %91 = bitcast i8* %xpv_len272 to i64*
  %92 = load i64* %91, align 8, !tbaa !5
  %tobool273 = icmp eq i64 %92, 0
  br i1 %tobool273, label %if.else467, label %if.then274

if.then274:                                       ; preds = %land.lhs.true270
  %xpv_pv276 = bitcast i8* %90 to i8**
  %93 = load i8** %xpv_pv276, align 8, !tbaa !0
  %xpv_cur278 = getelementptr inbounds i8* %90, i64 8
  %94 = bitcast i8* %xpv_cur278 to i64*
  %95 = load i64* %94, align 8, !tbaa !5
  %call279 = call i32 @Perl_grok_number(i8* %93, i64 %95, i64* %value) #8
  %96 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings280 = getelementptr inbounds %struct.cop* %96, i64 0, i32 14
  %97 = load %struct.sv** %cop_warnings280, align 8, !tbaa !0
  %cmp281 = icmp eq %struct.sv* %97, null
  br i1 %cmp281, label %lor.lhs.false299, label %land.lhs.true283

land.lhs.true283:                                 ; preds = %if.then274
  %98 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings284 = getelementptr inbounds %struct.cop* %98, i64 0, i32 14
  %99 = load %struct.sv** %cop_warnings284, align 8, !tbaa !0
  %cmp285 = icmp eq %struct.sv* %99, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp285, label %lor.lhs.false299, label %land.lhs.true287

land.lhs.true287:                                 ; preds = %land.lhs.true283
  %100 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings288 = getelementptr inbounds %struct.cop* %100, i64 0, i32 14
  %101 = load %struct.sv** %cop_warnings288, align 8, !tbaa !0
  %cmp289 = icmp eq %struct.sv* %101, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp289, label %land.lhs.true307, label %lor.lhs.false291

lor.lhs.false291:                                 ; preds = %land.lhs.true287
  %102 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings292 = getelementptr inbounds %struct.cop* %102, i64 0, i32 14
  %103 = load %struct.sv** %cop_warnings292, align 8, !tbaa !0
  %sv_any293 = getelementptr inbounds %struct.sv* %103, i64 0, i32 0
  %104 = load i8** %sv_any293, align 8, !tbaa !0
  %xpv_pv294 = bitcast i8* %104 to i8**
  %105 = load i8** %xpv_pv294, align 8, !tbaa !0
  %arrayidx295 = getelementptr inbounds i8* %105, i64 3
  %106 = load i8* %arrayidx295, align 1, !tbaa !1
  %and297 = and i8 %106, 4
  %tobool298 = icmp eq i8 %and297, 0
  br i1 %tobool298, label %lor.lhs.false299, label %land.lhs.true307

lor.lhs.false299:                                 ; preds = %lor.lhs.false291, %land.lhs.true283, %if.then274
  %107 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings300 = getelementptr inbounds %struct.cop* %107, i64 0, i32 14
  %108 = load %struct.sv** %cop_warnings300, align 8, !tbaa !0
  %cmp301 = icmp eq %struct.sv* %108, null
  br i1 %cmp301, label %land.lhs.true303, label %if.end314

land.lhs.true303:                                 ; preds = %lor.lhs.false299
  %109 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and305 = and i8 %109, 1
  %tobool306 = icmp eq i8 %and305, 0
  br i1 %tobool306, label %if.end314, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false291, %land.lhs.true303, %land.lhs.true287
  %110 = load i32* %sv_flags, align 4, !tbaa !3
  %and309 = and i32 %110, 16777216
  %111 = or i32 %and309, %call279
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %if.then313, label %if.end314

if.then313:                                       ; preds = %land.lhs.true307
  call fastcc void @S_not_a_number(%struct.sv* %sv) #7
  br label %if.end314

if.end314:                                        ; preds = %land.lhs.true307, %land.lhs.true303, %if.then313, %lor.lhs.false299
  %113 = load i8** %sv_any271, align 8, !tbaa !0
  %xpv_pv316 = bitcast i8* %113 to i8**
  %114 = load i8** %xpv_pv316, align 8, !tbaa !0
  %call317 = call double @Perl_my_atof(i8* %114) #8
  %115 = load i8** %sv_any271, align 8, !tbaa !0
  %xnv_nv319 = getelementptr inbounds i8* %115, i64 32
  %116 = bitcast i8* %xnv_nv319 to double*
  store double %call317, double* %116, align 8, !tbaa !6
  %cmp322 = fcmp ogt double %call317, 0.000000e+00
  br i1 %cmp322, label %cond.end330, label %cond.false327

cond.false327:                                    ; preds = %if.end314
  %sub = fsub double -0.000000e+00, %call317
  br label %cond.end330

cond.end330:                                      ; preds = %if.end314, %cond.false327
  %cond331 = phi double [ %sub, %cond.false327 ], [ %call317, %if.end314 ]
  %call332 = call i64 @Perl_cast_uv(double %cond331) #8
  %cmp333 = icmp ult i64 %call332, 4294967296
  br i1 %cmp333, label %if.then335, label %if.else338

if.then335:                                       ; preds = %cond.end330
  %117 = load i32* %sv_flags, align 4, !tbaa !3
  %or337 = or i32 %117, 33685504
  store i32 %or337, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end511

if.else338:                                       ; preds = %cond.end330
  %and339 = and i32 %call279, 1
  %tobool340 = icmp eq i32 %and339, 0
  br i1 %tobool340, label %if.then341, label %if.else344

if.then341:                                       ; preds = %if.else338
  %118 = load i32* %sv_flags, align 4, !tbaa !3
  %or343 = or i32 %118, 33685504
  store i32 %or343, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end511

if.else344:                                       ; preds = %if.else338
  %and345 = and i32 %call279, 8
  %tobool346 = icmp ne i32 %and345, 0
  %119 = load i64* %value, align 8, !tbaa !5
  %cmp348 = icmp ugt i64 %119, -9223372036854775808
  %or.cond616 = and i1 %tobool346, %cmp348
  %120 = load i32* %sv_flags, align 4, !tbaa !3
  br i1 %or.cond616, label %if.then350, label %if.else353

if.then350:                                       ; preds = %if.else344
  %or352 = or i32 %120, 33685504
  store i32 %or352, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end511

if.else353:                                       ; preds = %if.else344
  %or355 = or i32 %120, 33554432
  store i32 %or355, i32* %sv_flags, align 4, !tbaa !3
  %and357 = and i32 %120, 2097152
  %tobool358 = icmp eq i32 %and357, 0
  br i1 %tobool358, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.else353
  %call359 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  %.pre617 = load i64* %value, align 8, !tbaa !5
  br label %land.end

land.end:                                         ; preds = %if.else353, %land.rhs
  %121 = phi i64 [ %119, %if.else353 ], [ %.pre617, %land.rhs ]
  %122 = phi i32 [ %or355, %if.else353 ], [ %.pre, %land.rhs ]
  %or362 = or i32 %122, 16777216
  store i32 %or362, i32* %sv_flags, align 4, !tbaa !3
  br i1 %tobool346, label %if.then365, label %if.else369

if.then365:                                       ; preds = %land.end
  %sub366 = sub nsw i64 0, %121
  %123 = load i8** %sv_any271, align 8, !tbaa !0
  %xiv_iv368 = getelementptr inbounds i8* %123, i64 24
  %124 = bitcast i8* %xiv_iv368 to i64*
  store i64 %sub366, i64* %124, align 8, !tbaa !5
  br label %if.end381

if.else369:                                       ; preds = %land.end
  %cmp370 = icmp sgt i64 %121, -1
  %125 = load i8** %sv_any271, align 8, !tbaa !0
  %xiv_iv374 = getelementptr inbounds i8* %125, i64 24
  %126 = bitcast i8* %xiv_iv374 to i64*
  store i64 %121, i64* %126, align 8, !tbaa !5
  br i1 %cmp370, label %if.end381, label %if.else375

if.else375:                                       ; preds = %if.else369
  %or379 = or i32 %122, -2130706432
  store i32 %or379, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end381

if.end381:                                        ; preds = %if.else369, %if.else375, %if.then365
  %127 = phi i64 [ %121, %if.else369 ], [ %121, %if.else375 ], [ %sub366, %if.then365 ]
  %128 = phi i8* [ %125, %if.else369 ], [ %125, %if.else375 ], [ %123, %if.then365 ]
  %and382 = and i32 %call279, 4
  %tobool383 = icmp eq i32 %and382, 0
  br i1 %tobool383, label %if.else385, label %if.end511

if.else385:                                       ; preds = %if.end381
  %xnv_nv387 = getelementptr inbounds i8* %128, i64 32
  %129 = bitcast i8* %xnv_nv387 to double*
  %130 = load double* %129, align 8, !tbaa !6
  %cmp390 = fcmp olt double %130, 0x43E0000000000000
  br i1 %cmp390, label %if.then392, label %if.else427

if.then392:                                       ; preds = %if.else385
  %call395 = call i64 @Perl_cast_iv(double %130) #8
  %cmp396 = icmp eq i64 %127, %call395
  %131 = load i32* %sv_flags, align 4, !tbaa !3
  br i1 %cmp396, label %if.then398, label %if.else411

if.then398:                                       ; preds = %if.then392
  %or400 = or i32 %131, 33685504
  store i32 %or400, i32* %sv_flags, align 4, !tbaa !3
  %and402 = and i32 %131, 2097152
  %tobool403 = icmp eq i32 %and402, 0
  br i1 %tobool403, label %land.end407, label %land.rhs404

land.rhs404:                                      ; preds = %if.then398
  %call405 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre618 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end407

land.end407:                                      ; preds = %if.then398, %land.rhs404
  %132 = phi i32 [ %or400, %if.then398 ], [ %.pre618, %land.rhs404 ]
  %or410 = or i32 %132, 16842752
  store i32 %or410, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end511

if.else411:                                       ; preds = %if.then392
  %and413 = and i32 %131, 2097152
  %tobool414 = icmp eq i32 %and413, 0
  br i1 %tobool414, label %land.end418, label %land.rhs415

land.rhs415:                                      ; preds = %if.else411
  %call416 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre619 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end418

land.end418:                                      ; preds = %if.else411, %land.rhs415
  %133 = phi i32 [ %131, %if.else411 ], [ %.pre619, %land.rhs415 ]
  %or421 = or i32 %133, 16842752
  store i32 %or421, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end511

if.else427:                                       ; preds = %if.else385
  %call428 = call i64 @Perl_cast_uv(double %130) #8
  %134 = load i64* %value, align 8, !tbaa !5
  %cmp429 = icmp eq i64 %134, %call428
  br i1 %cmp429, label %land.lhs.true431, label %if.else449

land.lhs.true431:                                 ; preds = %if.else427
  %135 = load i8** %sv_any271, align 8, !tbaa !0
  %xuv_uv433 = getelementptr inbounds i8* %135, i64 24
  %136 = bitcast i8* %xuv_uv433 to i64*
  %137 = load i64* %136, align 8, !tbaa !5
  %cmp434 = icmp eq i64 %137, -1
  br i1 %cmp434, label %if.else449, label %if.then436

if.then436:                                       ; preds = %land.lhs.true431
  %138 = load i32* %sv_flags, align 4, !tbaa !3
  %or438 = or i32 %138, 33685504
  store i32 %or438, i32* %sv_flags, align 4, !tbaa !3
  %and440 = and i32 %138, 2097152
  %tobool441 = icmp eq i32 %and440, 0
  br i1 %tobool441, label %land.end445, label %land.rhs442

land.rhs442:                                      ; preds = %if.then436
  %call443 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre620 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end445

land.end445:                                      ; preds = %if.then436, %land.rhs442
  %139 = phi i32 [ %or438, %if.then436 ], [ %.pre620, %land.rhs442 ]
  %or448 = or i32 %139, 16842752
  store i32 %or448, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end511

if.else449:                                       ; preds = %land.lhs.true431, %if.else427
  %140 = load i32* %sv_flags, align 4, !tbaa !3
  %and451 = and i32 %140, 2097152
  %tobool452 = icmp eq i32 %and451, 0
  br i1 %tobool452, label %land.end456, label %land.rhs453

land.rhs453:                                      ; preds = %if.else449
  %call454 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre621 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end456

land.end456:                                      ; preds = %if.else449, %land.rhs453
  %141 = phi i32 [ %140, %if.else449 ], [ %.pre621, %land.rhs453 ]
  %or459 = or i32 %141, 16842752
  store i32 %or459, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end511

if.else467:                                       ; preds = %land.lhs.true270, %if.else266
  %142 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings468 = getelementptr inbounds %struct.cop* %142, i64 0, i32 14
  %143 = load %struct.sv** %cop_warnings468, align 8, !tbaa !0
  %cmp469 = icmp eq %struct.sv* %143, null
  br i1 %cmp469, label %lor.lhs.false487, label %land.lhs.true471

land.lhs.true471:                                 ; preds = %if.else467
  %144 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings472 = getelementptr inbounds %struct.cop* %144, i64 0, i32 14
  %145 = load %struct.sv** %cop_warnings472, align 8, !tbaa !0
  %cmp473 = icmp eq %struct.sv* %145, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp473, label %lor.lhs.false487, label %land.lhs.true475

land.lhs.true475:                                 ; preds = %land.lhs.true471
  %146 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings476 = getelementptr inbounds %struct.cop* %146, i64 0, i32 14
  %147 = load %struct.sv** %cop_warnings476, align 8, !tbaa !0
  %cmp477 = icmp eq %struct.sv* %147, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp477, label %land.lhs.true495, label %lor.lhs.false479

lor.lhs.false479:                                 ; preds = %land.lhs.true475
  %148 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings480 = getelementptr inbounds %struct.cop* %148, i64 0, i32 14
  %149 = load %struct.sv** %cop_warnings480, align 8, !tbaa !0
  %sv_any481 = getelementptr inbounds %struct.sv* %149, i64 0, i32 0
  %150 = load i8** %sv_any481, align 8, !tbaa !0
  %xpv_pv482 = bitcast i8* %150 to i8**
  %151 = load i8** %xpv_pv482, align 8, !tbaa !0
  %arrayidx483 = getelementptr inbounds i8* %151, i64 10
  %152 = load i8* %arrayidx483, align 1, !tbaa !1
  %and485 = and i8 %152, 4
  %tobool486 = icmp eq i8 %and485, 0
  br i1 %tobool486, label %lor.lhs.false487, label %land.lhs.true495

lor.lhs.false487:                                 ; preds = %lor.lhs.false479, %land.lhs.true471, %if.else467
  %153 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings488 = getelementptr inbounds %struct.cop* %153, i64 0, i32 14
  %154 = load %struct.sv** %cop_warnings488, align 8, !tbaa !0
  %cmp489 = icmp eq %struct.sv* %154, null
  br i1 %cmp489, label %land.lhs.true491, label %if.end502

land.lhs.true491:                                 ; preds = %lor.lhs.false487
  %155 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and493 = and i8 %155, 1
  %tobool494 = icmp eq i8 %and493, 0
  %156 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool496 = icmp ne i32 %156, 0
  %or.cond515 = or i1 %tobool494, %tobool496
  br i1 %or.cond515, label %if.end502, label %land.lhs.true497

land.lhs.true495:                                 ; preds = %lor.lhs.false479, %land.lhs.true475
  %.old514 = load i32* @PL_localizing, align 4, !tbaa !3
  %tobool496.old = icmp eq i32 %.old514, 0
  br i1 %tobool496.old, label %land.lhs.true497, label %if.end502

land.lhs.true497:                                 ; preds = %land.lhs.true495, %land.lhs.true491
  %157 = load i32* %sv_flags, align 4, !tbaa !3
  %and499 = and i32 %157, 512
  %tobool500 = icmp eq i32 %and499, 0
  br i1 %tobool500, label %if.then501, label %if.end502

if.then501:                                       ; preds = %land.lhs.true497
  call void @Perl_report_uninit() #7
  br label %if.end502

if.end502:                                        ; preds = %land.lhs.true495, %land.lhs.true491, %lor.lhs.false487, %land.lhs.true497, %if.then501
  %158 = load i32* %sv_flags, align 4, !tbaa !3
  %and504 = and i32 %158, 254
  %cmp505 = icmp ult i32 %and504, 2
  br i1 %cmp505, label %if.then507, label %return

if.then507:                                       ; preds = %if.end502
  %call508 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 2) #7
  br label %return

if.end511:                                        ; preds = %if.end381, %if.then341, %land.end456, %land.end445, %land.end407, %land.end418, %if.then350, %if.then335, %if.then260, %if.else262
  %sv_any512 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %159 = load i8** %sv_any512, align 8, !tbaa !0
  %xnv_nv513 = getelementptr inbounds i8* %159, i64 32
  %160 = bitcast i8* %xnv_nv513 to double*
  %161 = load double* %160, align 8, !tbaa !6
  br label %return

return:                                           ; preds = %if.end502, %if.then507, %lor.lhs.false175, %if.then183, %land.lhs.true179, %cond.true, %cond.false, %land.lhs.true92, %if.then98, %lor.lhs.false88, %if.then64, %land.lhs.true96, %entry, %if.end511, %if.then213, %if.end134, %if.else, %if.then55, %if.end43, %if.then6
  %retval.0 = phi double [ %4, %if.then6 ], [ %call46, %if.end43 ], [ %conv57, %if.then55 ], [ %conv59, %if.else ], [ %conv137, %if.end134 ], [ %82, %if.then213 ], [ %161, %if.end511 ], [ 0.000000e+00, %entry ], [ 0.000000e+00, %land.lhs.true96 ], [ 0.000000e+00, %if.then64 ], [ 0.000000e+00, %lor.lhs.false88 ], [ 0.000000e+00, %if.then98 ], [ 0.000000e+00, %land.lhs.true92 ], [ %55, %cond.true ], [ %call133, %cond.false ], [ 0.000000e+00, %land.lhs.true179 ], [ 0.000000e+00, %if.then183 ], [ 0.000000e+00, %lor.lhs.false175 ], [ 0.000000e+00, %if.then507 ], [ 0.000000e+00, %if.end502 ]
  ret double %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_2pv_nolen(%struct.sv* %sv) #0 {
entry:
  %n_a = alloca i64, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %n_a, i32 2) #7
  ret i8* %call
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_2pv(%struct.sv* %sv, i64* nocapture %lp) #0 {
entry:
  %call = tail call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %lp, i32 2) #7
  ret i8* %call
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #3

; Function Attrs: nounwind optsize
declare i32 @sprintf(i8* nocapture, i8* nocapture, ...) #5

; Function Attrs: optsize
declare i8* @gcvt(double, i32, i8*) #2

; Function Attrs: optsize
declare %struct.magic* @Perl_mg_find(%struct.sv*, i32) #2

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) #3

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSV(i64 %len) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  %tobool2 = icmp eq i64 %len, 0
  br i1 %tobool2, label %if.end9, label %if.then3

if.then3:                                         ; preds = %if.end
  %call4 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv.0, i32 4) #7
  %4 = load i8** %sv_any1, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %4, i64 16
  %5 = bitcast i8* %xpv_len to i64*
  %6 = load i64* %5, align 8, !tbaa !5
  %add = add i64 %len, 1
  %cmp = icmp ult i64 %6, %add
  br i1 %cmp, label %cond.true, label %if.end9

cond.true:                                        ; preds = %if.then3
  %call7 = tail call i8* @Perl_sv_grow(%struct.sv* %sv.0, i64 %add) #7
  br label %if.end9

if.end9:                                          ; preds = %if.then3, %if.end, %cond.true
  ret %struct.sv* %sv.0
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setpvf(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %args to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  call void @Perl_sv_vsetpvf(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #7
  call void @llvm.va_end(i8* %arraydecay1)
  ret void
}

; Function Attrs: nounwind optsize readonly
declare i64 @strlen(i8* nocapture) #6

; Function Attrs: optsize
declare i32* @__errno_location() #2

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSVpv(i8* %s, i64 %len) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  %tobool2 = icmp eq i64 %len, 0
  br i1 %tobool2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i64 @strlen(i8* %s) #8
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then3
  %len.addr.0 = phi i64 [ %len, %if.end ], [ %call4, %if.then3 ]
  tail call void @Perl_sv_setpvn(%struct.sv* %sv.0, i8* %s, i64 %len.addr.0) #7
  ret %struct.sv* %sv.0
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_2mortal(%struct.sv* %sv) #0 {
entry:
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8388608
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end8, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %cmp = icmp eq %struct.sv* %sv, @PL_sv_undef
  %cmp2 = icmp eq %struct.sv* %sv, @PL_sv_yes
  %or.cond = or i1 %cmp, %cmp2
  %cmp4 = icmp eq %struct.sv* %sv, @PL_sv_no
  %or.cond13 = or i1 %or.cond, %cmp4
  %cmp6 = icmp eq %struct.sv* %sv, @PL_sv_placeholder
  %or.cond14 = or i1 %or.cond13, %cmp6
  br i1 %or.cond14, label %return, label %if.end8

if.end8:                                          ; preds = %if.end, %land.lhs.true
  %1 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  %add = add nsw i32 %1, 1
  %2 = load i32* @PL_tmps_max, align 4, !tbaa !3
  %cmp9 = icmp slt i32 %add, %2
  br i1 %cmp9, label %if.end11, label %if.then10

if.then10:                                        ; preds = %if.end8
  tail call void @Perl_tmps_grow(i32 1) #8
  %.pre = load i32* @PL_tmps_ix, align 4, !tbaa !3
  br label %if.end11

if.end11:                                         ; preds = %if.end8, %if.then10
  %3 = phi i32 [ %1, %if.end8 ], [ %.pre, %if.then10 ]
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_tmps_ix, align 4, !tbaa !3
  %idxprom = sext i32 %inc to i64
  %4 = load %struct.sv*** @PL_tmps_stack, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %4, i64 %idxprom
  store %struct.sv* %sv, %struct.sv** %arrayidx, align 8, !tbaa !0
  %5 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %5, 2048
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %land.lhs.true, %entry, %if.end11
  ret %struct.sv* %sv
}

; Function Attrs: nounwind optsize
declare i8* @strcpy(i8*, i8* nocapture) #5

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #3

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_copypv(%struct.sv* %dsv, %struct.sv* %ssv) #0 {
entry:
  %len = alloca i64, align 8
  %sv_flags = getelementptr inbounds %struct.sv* %ssv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %ssv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %len, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %ssv, i64* %len, i32 2) #7
  %.pre = load i64* %len, align 8, !tbaa !5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %5 = phi i64 [ %3, %cond.true ], [ %.pre, %cond.false ]
  %cond = phi i8* [ %4, %cond.true ], [ %call, %cond.false ]
  call void @Perl_sv_setpvn(%struct.sv* %dsv, i8* %cond, i64 %5) #7
  %6 = load i32* %sv_flags, align 4, !tbaa !3
  %and3 = and i32 %6, 536870912
  %tobool = icmp eq i32 %and3, 0
  %sv_flags4 = getelementptr inbounds %struct.sv* %dsv, i64 0, i32 2
  %7 = load i32* %sv_flags4, align 4, !tbaa !3
  %and6 = and i32 %7, -536870913
  %or = or i32 %7, 536870912
  %storemerge = select i1 %tobool, i32 %and6, i32 %or
  store i32 %storemerge, i32* %sv_flags4, align 4, !tbaa !3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setpvn(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9961472
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %tobool1 = icmp eq i8* %ptr, null
  br i1 %tobool1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and4 = and i32 %1, 1223753727
  store i32 %and4, i32* %sv_flags, align 4, !tbaa !3
  %and6 = and i32 %1, 2097152
  %tobool7 = icmp eq i32 %and6, 0
  br i1 %tobool7, label %if.end36, label %land.rhs

land.rhs:                                         ; preds = %if.then2
  %call = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  br label %if.end36

if.else:                                          ; preds = %if.end
  %cmp = icmp slt i64 %len, 0
  br i1 %cmp, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.else
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([45 x i8]* @.str35, i64 0, i64 0)) #8
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then9
  %2 = load i32* %sv_flags, align 4, !tbaa !3
  %and13 = and i32 %2, 252
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end11
  %call15 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 4) #7
  br label %lor.end

lor.end:                                          ; preds = %if.end11, %lor.rhs
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %3, i64 16
  %4 = bitcast i8* %xpv_len to i64*
  %5 = load i64* %4, align 8, !tbaa !5
  %add = add i64 %len, 1
  %cmp17 = icmp ult i64 %5, %add
  br i1 %cmp17, label %cond.true, label %cond.end

cond.true:                                        ; preds = %lor.end
  %call20 = tail call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add) #7
  %.pre = load i8** %sv_any, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %lor.end, %cond.true
  %6 = phi i8* [ %3, %lor.end ], [ %.pre, %cond.true ]
  %xpv_pv23 = bitcast i8* %6 to i8**
  %7 = load i8** %xpv_pv23, align 8, !tbaa !0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %7, i8* %ptr, i64 %len, i32 1, i1 false)
  %arrayidx = getelementptr inbounds i8* %7, i64 %len
  store i8 0, i8* %arrayidx, align 1, !tbaa !1
  %8 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %8, i64 8
  %9 = bitcast i8* %xpv_cur to i64*
  store i64 %len, i64* %9, align 8, !tbaa !5
  %10 = load i32* %sv_flags, align 4, !tbaa !3
  %and26 = and i32 %10, 1760624639
  %or = or i32 %and26, 67371008
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %11 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool28 = icmp ne i8 %11, 0
  %12 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool30 = icmp ne i8 %12, 0
  %or.cond = and i1 %tobool28, %tobool30
  br i1 %or.cond, label %if.then33, label %if.end36

if.then33:                                        ; preds = %cond.end
  tail call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end36

if.end36:                                         ; preds = %land.rhs, %if.then2, %if.then33, %cond.end
  ret void
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_2pvbyte_nolen(%struct.sv* %sv) #0 {
entry:
  %n_a = alloca i64, align 8
  %call = call i8* @Perl_sv_2pvbyte(%struct.sv* %sv, i64* %n_a) #7
  ret i8* %call
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_2pvbyte(%struct.sv* %sv, i64* nocapture %lp) #0 {
entry:
  %call = tail call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %sv, i8 signext 0) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %lp, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = tail call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %lp, i32 2) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ %call2, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind optsize uwtable
define signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %sv, i8 signext %fail_ok) #0 {
entry:
  %len = alloca i64, align 8
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %1 = and i32 %0, 603979776
  %2 = icmp eq i32 %1, 603979776
  br i1 %2, label %if.then, label %if.end41

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %3, i64 8
  %4 = bitcast i8* %xpv_cur to i64*
  %5 = load i64* %4, align 8, !tbaa !5
  %tobool4 = icmp eq i64 %5, 0
  br i1 %tobool4, label %if.end41, label %if.then5

if.then5:                                         ; preds = %if.then
  %6 = and i32 %0, 9437184
  %7 = icmp eq i32 %6, 9437184
  br i1 %7, label %if.then13, label %if.end

if.then13:                                        ; preds = %if.then5
  call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then13
  %8 = phi i32 [ %0, %if.then5 ], [ %.pre, %if.then13 ]
  %and15 = and i32 %8, 262144
  %cmp = icmp eq i32 %and15, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end
  %9 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur17 = getelementptr inbounds i8* %9, i64 8
  %10 = bitcast i8* %xpv_cur17 to i64*
  %11 = load i64* %10, align 8, !tbaa !5
  store i64 %11, i64* %len, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %9 to i8**
  %12 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %len, i32 2) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %12, %cond.true ], [ %call, %cond.false ]
  %call19 = call i8* @Perl_utf8_to_bytes(i8* %cond, i64* %len) #8
  %tobool20 = icmp eq i8* %call19, null
  br i1 %tobool20, label %if.then21, label %if.end37

if.then21:                                        ; preds = %cond.end
  %tobool22 = icmp eq i8 %fail_ok, 0
  br i1 %tobool22, label %if.else, label %return

if.else:                                          ; preds = %if.then21
  %13 = load %struct.op** @PL_op, align 8, !tbaa !0
  %tobool24 = icmp eq %struct.op* %13, null
  br i1 %tobool24, label %if.else34, label %if.then25

if.then25:                                        ; preds = %if.else
  %op_type = getelementptr inbounds %struct.op* %13, i64 0, i32 4
  %14 = load i16* %op_type, align 2, !tbaa !4
  %cmp26 = icmp eq i16 %14, 351
  br i1 %cmp26, label %cond.true28, label %cond.false30

cond.true28:                                      ; preds = %if.then25
  %call29 = call i8* @Perl_custom_op_desc(%struct.op* %13) #8
  br label %cond.end32

cond.false30:                                     ; preds = %if.then25
  %idxprom = zext i16 %14 to i64
  %arrayidx = getelementptr inbounds [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %15 = load i8** %arrayidx, align 8, !tbaa !0
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false30, %cond.true28
  %cond33 = phi i8* [ %call29, %cond.true28 ], [ %15, %cond.false30 ]
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([21 x i8]* @.str27, i64 0, i64 0), i8* %cond33) #8
  br label %if.end37

if.else34:                                        ; preds = %if.else
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([15 x i8]* @.str28, i64 0, i64 0)) #8
  br label %if.end37

if.end37:                                         ; preds = %cond.end, %if.else34, %cond.end32
  %16 = load i64* %len, align 8, !tbaa !5
  %17 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur39 = getelementptr inbounds i8* %17, i64 8
  %18 = bitcast i8* %xpv_cur39 to i64*
  store i64 %16, i64* %18, align 8, !tbaa !5
  %.pre55 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end41

if.end41:                                         ; preds = %entry, %if.then, %if.end37
  %19 = phi i32 [ %0, %entry ], [ %0, %if.then ], [ %.pre55, %if.end37 ]
  %and43 = and i32 %19, -536870913
  store i32 %and43, i32* %sv_flags, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %if.then21, %if.end41
  %retval.0 = phi i8 [ 1, %if.end41 ], [ 0, %if.then21 ]
  ret i8 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_2pvutf8_nolen(%struct.sv* %sv) #0 {
entry:
  %n_a = alloca i64, align 8
  %call = call i8* @Perl_sv_2pvutf8(%struct.sv* %sv, i64* %n_a) #7
  ret i8* %call
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_2pvutf8(%struct.sv* %sv, i64* nocapture %lp) #0 {
entry:
  %call = tail call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 2) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %lp, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = tail call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %lp, i32 2) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ %call2, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind optsize uwtable
define i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %len = alloca i64, align 8
  %len64 = alloca i64, align 8
  %cmp = icmp eq %struct.sv* %sv, @PL_sv_undef
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.then1, label %if.end27

if.then1:                                         ; preds = %if.end
  store i64 0, i64* %len, align 8, !tbaa !5
  %and3 = and i32 %0, 8388608
  %tobool4 = icmp eq i32 %and3, 0
  %1 = and i32 %0, 117440512
  %2 = icmp eq i32 %1, 0
  %or.cond = or i1 %tobool4, %2
  br i1 %or.cond, label %if.else, label %if.then15

if.then15:                                        ; preds = %if.then1
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %len, i32 %flags) #7
  %3 = load i32* %sv_flags, align 4, !tbaa !3
  %and17 = and i32 %3, 536870912
  %tobool18 = icmp eq i32 %and17, 0
  br i1 %tobool18, label %if.end27, label %if.then19

if.then19:                                        ; preds = %if.then15
  %4 = load i64* %len, align 8, !tbaa !5
  br label %return

if.else:                                          ; preds = %if.then1
  %and22 = and i32 %0, 10223616
  %cmp23 = icmp eq i32 %and22, 262144
  br i1 %cmp23, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %5 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %5, i64 8
  %6 = bitcast i8* %xpv_cur to i64*
  %7 = load i64* %6, align 8, !tbaa !5
  store i64 %7, i64* %len, align 8, !tbaa !5
  br label %if.end27

cond.false:                                       ; preds = %if.else
  %call25 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %sv, i64* %len, i32 2) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end27

if.end27:                                         ; preds = %if.then15, %if.end, %cond.false, %cond.true
  %8 = phi i32 [ %3, %if.then15 ], [ %0, %if.end ], [ %.pre, %cond.false ], [ %0, %cond.true ]
  %and29 = and i32 %8, 536870912
  %tobool30 = icmp eq i32 %and29, 0
  br i1 %tobool30, label %if.end34, label %if.then31

if.then31:                                        ; preds = %if.end27
  %sv_any32 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %9 = load i8** %sv_any32, align 8, !tbaa !0
  %xpv_cur33 = getelementptr inbounds i8* %9, i64 8
  %10 = bitcast i8* %xpv_cur33 to i64*
  %11 = load i64* %10, align 8, !tbaa !5
  br label %return

if.end34:                                         ; preds = %if.end27
  %12 = and i32 %8, 9437184
  %13 = icmp eq i32 %12, 9437184
  br i1 %13, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.end34
  call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  br label %if.end43

if.end43:                                         ; preds = %if.end34, %if.then42
  %14 = load %struct.sv** @PL_encoding, align 8, !tbaa !0
  %tobool44 = icmp eq %struct.sv* %14, null
  br i1 %tobool44, label %if.else50, label %land.lhs.true45

land.lhs.true45:                                  ; preds = %if.end43
  %and46 = and i32 %flags, 8
  %tobool47 = icmp eq i32 %and46, 0
  br i1 %tobool47, label %if.then48, label %if.else50

if.then48:                                        ; preds = %land.lhs.true45
  %call49 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %sv, %struct.sv* %14) #7
  %sv_any89.phi.trans.insert = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %.pre130 = load i8** %sv_any89.phi.trans.insert, align 8, !tbaa !0
  br label %if.end88

if.else50:                                        ; preds = %land.lhs.true45, %if.end43
  %sv_any51 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %15 = load i8** %sv_any51, align 8, !tbaa !0
  %xpv_pv52 = bitcast i8* %15 to i8**
  %16 = load i8** %xpv_pv52, align 8, !tbaa !0
  %xpv_cur56 = getelementptr inbounds i8* %15, i64 8
  %17 = bitcast i8* %xpv_cur56 to i64*
  %18 = load i64* %17, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8* %16, i64 %18
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else50
  %t.0 = phi i8* [ %16, %if.else50 ], [ %incdec.ptr, %while.body ]
  %hibit.0 = phi i32 [ 0, %if.else50 ], [ %20, %while.body ]
  %cmp57 = icmp ult i8* %t.0, %add.ptr
  br i1 %cmp57, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %incdec.ptr = getelementptr inbounds i8* %t.0, i64 1
  %19 = load i8* %t.0, align 1, !tbaa !1
  %lnot = icmp slt i8 %19, 0
  %.lobit = lshr i8 %19, 7
  %20 = zext i8 %.lobit to i32
  br i1 %lnot, label %while.end, label %while.cond

while.end:                                        ; preds = %while.body, %while.cond
  %hibit.1 = phi i32 [ %20, %while.body ], [ %hibit.0, %while.cond ]
  %tobool62 = icmp eq i32 %hibit.1, 0
  br i1 %tobool62, label %if.end86, label %if.then63

if.then63:                                        ; preds = %while.end
  %21 = load i32* %sv_flags, align 4, !tbaa !3
  %and66 = and i32 %21, 2097152
  %tobool67 = icmp eq i32 %and66, 0
  br i1 %tobool67, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then63
  %call68 = call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre126 = load i8** %sv_any51, align 8, !tbaa !0
  %xpv_pv71.phi.trans.insert = bitcast i8* %.pre126 to i8**
  %.pre127 = load i8** %xpv_pv71.phi.trans.insert, align 8, !tbaa !0
  %xpv_cur73.phi.trans.insert = getelementptr inbounds i8* %.pre126, i64 8
  %.phi.trans.insert = bitcast i8* %xpv_cur73.phi.trans.insert to i64*
  %.pre128 = load i64* %.phi.trans.insert, align 8, !tbaa !5
  br label %land.end

land.end:                                         ; preds = %if.then63, %land.rhs
  %22 = phi i64 [ %18, %if.then63 ], [ %.pre128, %land.rhs ]
  %23 = phi i8* [ %16, %if.then63 ], [ %.pre127, %land.rhs ]
  %add = add i64 %22, 1
  store i64 %add, i64* %len64, align 8, !tbaa !5
  %call74 = call i8* @Perl_bytes_to_utf8(i8* %23, i64* %len64) #8
  %24 = load i8** %sv_any51, align 8, !tbaa !0
  %xpv_pv76 = bitcast i8* %24 to i8**
  store i8* %call74, i8** %xpv_pv76, align 8, !tbaa !0
  %25 = load i64* %len64, align 8, !tbaa !5
  %sub = add i64 %25, -1
  %26 = load i8** %sv_any51, align 8, !tbaa !0
  %xpv_cur78 = getelementptr inbounds i8* %26, i64 8
  %27 = bitcast i8* %xpv_cur78 to i64*
  store i64 %sub, i64* %27, align 8, !tbaa !5
  %xpv_len = getelementptr inbounds i8* %26, i64 16
  %28 = bitcast i8* %xpv_len to i64*
  %29 = load i64* %28, align 8, !tbaa !5
  %cmp80 = icmp eq i64 %29, 0
  br i1 %cmp80, label %if.end83, label %if.then82

if.then82:                                        ; preds = %land.end
  call void @Perl_safesysfree(i8* %23) #8
  %.pre129 = load i8** %sv_any51, align 8, !tbaa !0
  br label %if.end83

if.end83:                                         ; preds = %land.end, %if.then82
  %30 = phi i8* [ %26, %land.end ], [ %.pre129, %if.then82 ]
  %31 = load i64* %len64, align 8, !tbaa !5
  %xpv_len85 = getelementptr inbounds i8* %30, i64 16
  %32 = bitcast i8* %xpv_len85 to i64*
  store i64 %31, i64* %32, align 8, !tbaa !5
  br label %if.end86

if.end86:                                         ; preds = %while.end, %if.end83
  %33 = phi i8* [ %30, %if.end83 ], [ %15, %while.end ]
  %34 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %34, 536870912
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end88

if.end88:                                         ; preds = %if.end86, %if.then48
  %35 = phi i8* [ %33, %if.end86 ], [ %.pre130, %if.then48 ]
  %xpv_cur90 = getelementptr inbounds i8* %35, i64 8
  %36 = bitcast i8* %xpv_cur90 to i64*
  %37 = load i64* %36, align 8, !tbaa !5
  br label %return

return:                                           ; preds = %entry, %if.end88, %if.then31, %if.then19
  %retval.0 = phi i64 [ %11, %if.then31 ], [ %37, %if.end88 ], [ %4, %if.then19 ], [ 0, %entry ]
  ret i64 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define signext i8 @Perl_sv_2bool(%struct.sv* %sv) #0 {
entry:
  %sv_flags.phi.trans.insert = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %.pre = load i32* %sv_flags.phi.trans.insert, align 4, !tbaa !3
  br label %tailrecurse

tailrecurse:                                      ; preds = %cond.false44, %entry
  %0 = phi i32 [ %.pre, %entry ], [ %2, %cond.false44 ]
  %sv.tr = phi %struct.sv* [ %sv, %entry ], [ %call13, %cond.false44 ]
  %and = and i32 %0, 8192
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %tailrecurse
  %sv_flags = getelementptr inbounds %struct.sv* %sv.tr, i64 0, i32 2
  %call = tail call i32 @Perl_mg_get(%struct.sv* %sv.tr) #8
  %.pre158 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %tailrecurse, %if.then
  %1 = phi i32 [ %0, %tailrecurse ], [ %.pre158, %if.then ]
  %and2 = and i32 %1, 118423552
  %tobool3 = icmp eq i32 %and2, 0
  br i1 %tobool3, label %return, label %if.end5

if.end5:                                          ; preds = %if.end
  %and7 = and i32 %1, 524288
  %tobool8 = icmp eq i32 %and7, 0
  br i1 %tobool8, label %if.end69, label %if.then9

if.then9:                                         ; preds = %if.end5
  %and11 = and i32 %1, 268435456
  %tobool12 = icmp eq i32 %and11, 0
  br i1 %tobool12, label %if.end63, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then9
  %call13 = tail call %struct.sv* @Perl_amagic_call(%struct.sv* %sv.tr, %struct.sv* @PL_sv_undef, i32 2, i32 9) #8
  %tobool14 = icmp eq %struct.sv* %call13, null
  br i1 %tobool14, label %if.end63, label %land.lhs.true15

land.lhs.true15:                                  ; preds = %land.lhs.true
  %sv_flags16 = getelementptr inbounds %struct.sv* %call13, i64 0, i32 2
  %2 = load i32* %sv_flags16, align 4, !tbaa !3
  %and17 = and i32 %2, 524288
  %tobool18 = icmp eq i32 %and17, 0
  br i1 %tobool18, label %cond.false, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true15
  %sv_any = getelementptr inbounds %struct.sv* %call13, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %3 to %struct.sv**
  %4 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_any19 = getelementptr inbounds %struct.sv* %sv.tr, i64 0, i32 0
  %5 = load i8** %sv_any19, align 8, !tbaa !0
  %xrv_rv20 = bitcast i8* %5 to %struct.sv**
  %6 = load %struct.sv** %xrv_rv20, align 8, !tbaa !0
  %cmp = icmp eq %struct.sv* %4, %6
  br i1 %cmp, label %if.end63, label %cond.false

cond.false:                                       ; preds = %lor.lhs.false, %land.lhs.true15
  %and24 = and i32 %2, 262144
  %tobool25 = icmp eq i32 %and24, 0
  br i1 %tobool25, label %cond.false36, label %cond.true26

cond.true26:                                      ; preds = %cond.false
  %sv_any27 = getelementptr inbounds %struct.sv* %call13, i64 0, i32 0
  %7 = load i8** %sv_any27, align 8, !tbaa !0
  %8 = bitcast i8* %7 to %struct.xpv*
  store %struct.xpv* %8, %struct.xpv** @PL_Xpv, align 8, !tbaa !0
  %tobool28 = icmp eq i8* %7, null
  br i1 %tobool28, label %land.end35, label %land.rhs

land.rhs:                                         ; preds = %cond.true26
  %xpv_cur = getelementptr inbounds i8* %7, i64 8
  %9 = bitcast i8* %xpv_cur to i64*
  %10 = load i64* %9, align 8, !tbaa !5
  %cmp29 = icmp ugt i64 %10, 1
  br i1 %cmp29, label %land.end35, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %tobool31 = icmp eq i64 %10, 0
  br i1 %tobool31, label %land.end35, label %land.rhs32

land.rhs32:                                       ; preds = %lor.rhs
  %xpv_pv = bitcast i8* %7 to i8**
  %11 = load i8** %xpv_pv, align 8, !tbaa !0
  %12 = load i8* %11, align 1, !tbaa !1
  %cmp33 = icmp ne i8 %12, 48
  br label %land.end35

land.end35:                                       ; preds = %lor.rhs, %cond.true26, %land.rhs, %land.rhs32
  %13 = phi i1 [ false, %cond.true26 ], [ true, %land.rhs ], [ false, %lor.rhs ], [ %cmp33, %land.rhs32 ]
  %cond = zext i1 %13 to i8
  br label %return

cond.false36:                                     ; preds = %cond.false
  %and38 = and i32 %2, 65536
  %tobool39 = icmp eq i32 %and38, 0
  br i1 %tobool39, label %cond.false44, label %cond.true40

cond.true40:                                      ; preds = %cond.false36
  %sv_any41 = getelementptr inbounds %struct.sv* %call13, i64 0, i32 0
  %14 = load i8** %sv_any41, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %14, i64 24
  %15 = bitcast i8* %xiv_iv to i64*
  %16 = load i64* %15, align 8, !tbaa !5
  %cmp42 = icmp ne i64 %16, 0
  %conv43 = zext i1 %cmp42 to i8
  br label %return

cond.false44:                                     ; preds = %cond.false36
  %and46 = and i32 %2, 131072
  %tobool47 = icmp eq i32 %and46, 0
  br i1 %tobool47, label %tailrecurse, label %cond.true48

cond.true48:                                      ; preds = %cond.false44
  %sv_any49 = getelementptr inbounds %struct.sv* %call13, i64 0, i32 0
  %17 = load i8** %sv_any49, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %17, i64 32
  %18 = bitcast i8* %xnv_nv to double*
  %19 = load double* %18, align 8, !tbaa !6
  %cmp50 = fcmp une double %19, 0.000000e+00
  %conv51 = zext i1 %cmp50 to i8
  br label %return

if.end63:                                         ; preds = %land.lhs.true, %if.then9, %lor.lhs.false
  %sv_any64 = getelementptr inbounds %struct.sv* %sv.tr, i64 0, i32 0
  %20 = load i8** %sv_any64, align 8, !tbaa !0
  %xrv_rv65 = bitcast i8* %20 to %struct.sv**
  %21 = load %struct.sv** %xrv_rv65, align 8, !tbaa !0
  %cmp66 = icmp ne %struct.sv* %21, null
  %conv68 = zext i1 %cmp66 to i8
  br label %return

if.end69:                                         ; preds = %if.end5
  %and71 = and i32 %1, 67108864
  %tobool72 = icmp eq i32 %and71, 0
  br i1 %tobool72, label %if.else94, label %if.then73

if.then73:                                        ; preds = %if.end69
  %sv_any74 = getelementptr inbounds %struct.sv* %sv.tr, i64 0, i32 0
  %22 = load i8** %sv_any74, align 8, !tbaa !0
  %tobool75 = icmp eq i8* %22, null
  br i1 %tobool75, label %if.else, label %land.lhs.true76

land.lhs.true76:                                  ; preds = %if.then73
  %xpv_pv77 = bitcast i8* %22 to i8**
  %23 = load i8** %xpv_pv77, align 8, !tbaa !0
  %24 = load i8* %23, align 1, !tbaa !1
  %cmp79 = icmp sgt i8 %24, 48
  br i1 %cmp79, label %return, label %lor.lhs.false81

lor.lhs.false81:                                  ; preds = %land.lhs.true76
  %xpv_cur82 = getelementptr inbounds i8* %22, i64 8
  %25 = bitcast i8* %xpv_cur82 to i64*
  %26 = load i64* %25, align 8, !tbaa !5
  %cmp83 = icmp ugt i64 %26, 1
  br i1 %cmp83, label %return, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %lor.lhs.false81
  %tobool87 = icmp eq i64 %26, 0
  %cmp91 = icmp eq i8 %24, 48
  %or.cond = or i1 %tobool87, %cmp91
  br i1 %or.cond, label %if.else, label %return

if.else:                                          ; preds = %lor.lhs.false85, %if.then73
  br label %return

if.else94:                                        ; preds = %if.end69
  %and96 = and i32 %1, 16777216
  %tobool97 = icmp eq i32 %and96, 0
  br i1 %tobool97, label %if.else104, label %if.then98

if.then98:                                        ; preds = %if.else94
  %sv_any99 = getelementptr inbounds %struct.sv* %sv.tr, i64 0, i32 0
  %27 = load i8** %sv_any99, align 8, !tbaa !0
  %xiv_iv100 = getelementptr inbounds i8* %27, i64 24
  %28 = bitcast i8* %xiv_iv100 to i64*
  %29 = load i64* %28, align 8, !tbaa !5
  %cmp101 = icmp ne i64 %29, 0
  %conv103 = zext i1 %cmp101 to i8
  br label %return

if.else104:                                       ; preds = %if.else94
  %and106 = and i32 %1, 33554432
  %tobool107 = icmp eq i32 %and106, 0
  br i1 %tobool107, label %return, label %if.then108

if.then108:                                       ; preds = %if.else104
  %sv_any109 = getelementptr inbounds %struct.sv* %sv.tr, i64 0, i32 0
  %30 = load i8** %sv_any109, align 8, !tbaa !0
  %xnv_nv110 = getelementptr inbounds i8* %30, i64 32
  %31 = bitcast i8* %xnv_nv110 to double*
  %32 = load double* %31, align 8, !tbaa !6
  %cmp111 = fcmp une double %32, 0.000000e+00
  %conv113 = zext i1 %cmp111 to i8
  br label %return

return:                                           ; preds = %if.end, %if.else104, %land.lhs.true76, %lor.lhs.false81, %lor.lhs.false85, %cond.true40, %cond.true48, %land.end35, %if.then108, %if.then98, %if.else, %if.end63
  %retval.0 = phi i8 [ %conv68, %if.end63 ], [ 0, %if.else ], [ %conv103, %if.then98 ], [ %conv113, %if.then108 ], [ %cond, %land.end35 ], [ %conv43, %cond.true40 ], [ %conv51, %cond.true48 ], [ 1, %lor.lhs.false85 ], [ 1, %lor.lhs.false81 ], [ 1, %land.lhs.true76 ], [ 0, %if.else104 ], [ 0, %if.end ]
  ret i8 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i64 @Perl_sv_utf8_upgrade(%struct.sv* %sv) #0 {
entry:
  %call = tail call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 2) #7
  ret i64 %call
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvn_force_flags(%struct.sv* %sv, i64* %lp, i32 %flags) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9961472
  %tobool = icmp ne i32 %and, 0
  %and2 = and i32 %0, 524288
  %tobool3 = icmp eq i32 %and2, 0
  %or.cond105 = and i1 %tobool, %tobool3
  br i1 %or.cond105, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %1 = phi i32 [ %0, %entry ], [ %.pre, %if.then ]
  %and5 = and i32 %1, 262144
  %tobool6 = icmp eq i32 %and5, 0
  br i1 %tobool6, label %if.else, label %if.then7

if.then7:                                         ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %2 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %2, i64 8
  %3 = bitcast i8* %xpv_cur to i64*
  %4 = load i64* %3, align 8, !tbaa !5
  store i64 %4, i64* %lp, align 8, !tbaa !5
  br label %if.end73

if.else:                                          ; preds = %if.end
  %and9 = and i32 %1, 255
  %cmp = icmp ult i32 %and9, 10
  %cmp13 = icmp eq i32 %and9, 14
  %or.cond106 = or i1 %cmp, %cmp13
  br i1 %or.cond106, label %if.else19, label %if.then14

if.then14:                                        ; preds = %if.else
  %call = tail call i8* @Perl_sv_reftype(%struct.sv* %sv, i32 0) #7
  %5 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_type = getelementptr inbounds %struct.op* %5, i64 0, i32 4
  %6 = load i16* %op_type, align 2, !tbaa !4
  %cmp15 = icmp eq i16 %6, 351
  br i1 %cmp15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then14
  %call17 = tail call i8* @Perl_custom_op_name(%struct.op* %5) #8
  br label %cond.end

cond.false:                                       ; preds = %if.then14
  %idxprom = zext i16 %6 to i64
  %arrayidx = getelementptr inbounds [0 x i8*]* @PL_op_name, i64 0, i64 %idxprom
  %7 = load i8** %arrayidx, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call17, %cond.true ], [ %7, %cond.false ]
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([32 x i8]* @.str56, i64 0, i64 0), i8* %call, i8* %cond) #8
  br label %if.end21

if.else19:                                        ; preds = %if.else
  %call20 = tail call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %lp, i32 %flags) #7
  br label %if.end21

if.end21:                                         ; preds = %if.else19, %cond.end
  %s.0 = phi i8* [ null, %cond.end ], [ %call20, %if.else19 ]
  %sv_any22 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %8 = load i8** %sv_any22, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %8 to i8**
  %9 = load i8** %xpv_pv, align 8, !tbaa !0
  %cmp23 = icmp eq i8* %s.0, %9
  br i1 %cmp23, label %if.end57, label %if.then25

if.then25:                                        ; preds = %if.end21
  %10 = load i64* %lp, align 8, !tbaa !5
  %11 = load i32* %sv_flags, align 4, !tbaa !3
  %and27 = and i32 %11, 524288
  %tobool28 = icmp eq i32 %and27, 0
  br i1 %tobool28, label %if.end30, label %if.then29

if.then29:                                        ; preds = %if.then25
  tail call void @Perl_sv_unref_flags(%struct.sv* %sv, i32 0) #8
  %.pre107 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end30

if.end30:                                         ; preds = %if.then25, %if.then29
  %12 = phi i32 [ %11, %if.then25 ], [ %.pre107, %if.then29 ]
  %and32 = and i32 %12, 252
  %cmp33 = icmp eq i32 %and32, 0
  br i1 %cmp33, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end30
  %call35 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 4) #7
  br label %lor.end

lor.end:                                          ; preds = %if.end30, %lor.rhs
  %13 = load i8** %sv_any22, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %13, i64 16
  %14 = bitcast i8* %xpv_len to i64*
  %15 = load i64* %14, align 8, !tbaa !5
  %add = add i64 %10, 1
  %cmp39 = icmp ult i64 %15, %add
  br i1 %cmp39, label %cond.true41, label %cond.end47

cond.true41:                                      ; preds = %lor.end
  %call43 = tail call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add) #7
  %.pre108 = load i8** %sv_any22, align 8, !tbaa !0
  br label %cond.end47

cond.end47:                                       ; preds = %lor.end, %cond.true41
  %16 = phi i8* [ %13, %lor.end ], [ %.pre108, %cond.true41 ]
  %xpv_pv50 = bitcast i8* %16 to i8**
  %17 = load i8** %xpv_pv50, align 8, !tbaa !0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %17, i8* %s.0, i64 %10, i32 1, i1 false)
  %18 = load i8** %sv_any22, align 8, !tbaa !0
  %xpv_cur52 = getelementptr inbounds i8* %18, i64 8
  %19 = bitcast i8* %xpv_cur52 to i64*
  store i64 %10, i64* %19, align 8, !tbaa !5
  %xpv_pv54 = bitcast i8* %18 to i8**
  %20 = load i8** %xpv_pv54, align 8, !tbaa !0
  %add.ptr = getelementptr inbounds i8* %20, i64 %10
  store i8 0, i8* %add.ptr, align 1, !tbaa !1
  br label %if.end57

if.end57:                                         ; preds = %if.end21, %cond.end47
  %21 = load i32* %sv_flags, align 4, !tbaa !3
  %and59 = and i32 %21, 262144
  %tobool60 = icmp eq i32 %and59, 0
  br i1 %tobool60, label %if.then61, label %if.end73

if.then61:                                        ; preds = %if.end57
  %or = or i32 %21, 67371008
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %22 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool63 = icmp ne i8 %22, 0
  %23 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool65 = icmp ne i8 %23, 0
  %or.cond = and i1 %tobool63, %tobool65
  br i1 %or.cond, label %if.then68, label %if.end73

if.then68:                                        ; preds = %if.then61
  tail call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end73

if.end73:                                         ; preds = %if.then61, %if.end57, %if.then68, %if.then7
  %sv_any74 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %24 = load i8** %sv_any74, align 8, !tbaa !0
  %xpv_pv75 = bitcast i8* %24 to i8**
  %25 = load i8** %xpv_pv75, align 8, !tbaa !0
  ret i8* %25
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_recode_to_utf8(%struct.sv* %sv, %struct.sv* %encoding) #0 {
entry:
  %len = alloca i64, align 8
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %1 = and i32 %0, 537133056
  %2 = icmp eq i32 %1, 262144
  br i1 %2, label %land.lhs.true4, label %if.end80

land.lhs.true4:                                   ; preds = %entry
  %3 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private = getelementptr inbounds %struct.cop* %3, i64 0, i32 7
  %4 = load i8* %op_private, align 1, !tbaa !1
  %and5 = and i8 %4, 8
  %tobool6 = icmp eq i8 %and5, 0
  br i1 %tobool6, label %land.lhs.true7, label %if.end80

land.lhs.true7:                                   ; preds = %land.lhs.true4
  %sv_flags8 = getelementptr inbounds %struct.sv* %encoding, i64 0, i32 2
  %5 = load i32* %sv_flags8, align 4, !tbaa !3
  %and9 = and i32 %5, 524288
  %tobool10 = icmp eq i32 %and9, 0
  br i1 %tobool10, label %if.end80, label %if.then

if.then:                                          ; preds = %land.lhs.true7
  %6 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  call void @Perl_push_scope() #8
  call void @Perl_save_int(i32* @PL_tmps_floor) #8
  %7 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  store i32 %7, i32* @PL_tmps_floor, align 4, !tbaa !3
  call void @Perl_save_re_context() #8
  %8 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds i32* %8, i64 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8, !tbaa !0
  %9 = load i32** @PL_markstack_max, align 8, !tbaa !0
  %cmp = icmp eq i32* %incdec.ptr, %9
  br i1 %cmp, label %if.then12, label %if.end

if.then12:                                        ; preds = %if.then
  call void @Perl_markstack_grow() #8
  %.pre = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %if.then12, %if.then
  %10 = phi i32* [ %.pre, %if.then12 ], [ %incdec.ptr, %if.then ]
  %11 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div120 = lshr exact i64 %sub.ptr.sub, 3
  %conv13 = trunc i64 %sub.ptr.div120 to i32
  store i32 %conv13, i32* %10, align 4, !tbaa !3
  %12 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast14 = ptrtoint %struct.sv** %12 to i64
  %sub.ptr.sub16 = sub i64 %sub.ptr.lhs.cast14, %sub.ptr.lhs.cast
  %cmp18 = icmp slt i64 %sub.ptr.sub16, 24
  br i1 %cmp18, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %6, %struct.sv** %6, i32 3) #8
  %.pre121 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  br label %if.end21

if.end21:                                         ; preds = %if.then20, %if.end
  %13 = phi %struct.sv** [ %.pre121, %if.then20 ], [ %12, %if.end ]
  %sp.0 = phi %struct.sv** [ %call, %if.then20 ], [ %6, %if.end ]
  %sub.ptr.lhs.cast22 = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.rhs.cast23 = ptrtoint %struct.sv** %sp.0 to i64
  %sub.ptr.sub24 = sub i64 %sub.ptr.lhs.cast22, %sub.ptr.rhs.cast23
  %cmp26 = icmp slt i64 %sub.ptr.sub24, 8
  br i1 %cmp26, label %if.then28, label %if.end30

if.then28:                                        ; preds = %if.end21
  %call29 = call %struct.sv** @Perl_stack_grow(%struct.sv** %sp.0, %struct.sv** %sp.0, i32 1) #8
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %if.end21
  %sp.1 = phi %struct.sv** [ %call29, %if.then28 ], [ %sp.0, %if.end21 ]
  %incdec.ptr31 = getelementptr inbounds %struct.sv** %sp.1, i64 1
  store %struct.sv* %encoding, %struct.sv** %incdec.ptr31, align 8, !tbaa !0
  %14 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast32 = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.rhs.cast33 = ptrtoint %struct.sv** %incdec.ptr31 to i64
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast33
  %cmp36 = icmp slt i64 %sub.ptr.sub34, 8
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.end30
  %call39 = call %struct.sv** @Perl_stack_grow(%struct.sv** %incdec.ptr31, %struct.sv** %incdec.ptr31, i32 1) #8
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.end30
  %sp.2 = phi %struct.sv** [ %call39, %if.then38 ], [ %incdec.ptr31, %if.end30 ]
  %incdec.ptr41 = getelementptr inbounds %struct.sv** %sp.2, i64 1
  store %struct.sv* %sv, %struct.sv** %incdec.ptr41, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr41, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %call42 = call i32 @Perl_call_method(i8* getelementptr inbounds ([7 x i8]* @.str69, i64 0, i64 0), i32 0) #8
  %15 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %incdec.ptr43 = getelementptr inbounds %struct.sv** %15, i64 -1
  %16 = load %struct.sv** %15, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr43, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %sv_flags44 = getelementptr inbounds %struct.sv* %16, i64 0, i32 2
  %17 = load i32* %sv_flags44, align 4, !tbaa !3
  %and45 = and i32 %17, 262144
  %cmp46 = icmp eq i32 %and45, 0
  br i1 %cmp46, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end40
  %sv_any = getelementptr inbounds %struct.sv* %16, i64 0, i32 0
  %18 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %18, i64 8
  %19 = bitcast i8* %xpv_cur to i64*
  %20 = load i64* %19, align 8, !tbaa !5
  store i64 %20, i64* %len, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %18 to i8**
  %21 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.end40
  %call49 = call i8* @Perl_sv_2pv_flags(%struct.sv* %16, i64* %len, i32 2) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %21, %cond.true ], [ %call49, %cond.false ]
  %sv_any50 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %22 = load i8** %sv_any50, align 8, !tbaa !0
  %xpv_pv51 = bitcast i8* %22 to i8**
  %23 = load i8** %xpv_pv51, align 8, !tbaa !0
  %cmp52 = icmp eq i8* %cond, %23
  br i1 %cmp52, label %if.end72, label %if.then54

if.then54:                                        ; preds = %cond.end
  %xpv_len = getelementptr inbounds i8* %22, i64 16
  %24 = bitcast i8* %xpv_len to i64*
  %25 = load i64* %24, align 8, !tbaa !5
  %26 = load i64* %len, align 8, !tbaa !5
  %add = add i64 %26, 1
  %cmp56 = icmp ult i64 %25, %add
  br i1 %cmp56, label %cond.true58, label %cond.end64

cond.true58:                                      ; preds = %if.then54
  %call60 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add) #7
  %.pre122 = load i8** %sv_any50, align 8, !tbaa !0
  %xpv_pv67.phi.trans.insert = bitcast i8* %.pre122 to i8**
  %.pre123 = load i8** %xpv_pv67.phi.trans.insert, align 8, !tbaa !0
  br label %cond.end64

cond.end64:                                       ; preds = %if.then54, %cond.true58
  %27 = phi i8* [ %23, %if.then54 ], [ %.pre123, %cond.true58 ]
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %27, i8* %cond, i64 %26, i32 1, i1 false)
  %28 = load i8** %sv_any50, align 8, !tbaa !0
  %xpv_cur69 = getelementptr inbounds i8* %28, i64 8
  %29 = bitcast i8* %xpv_cur69 to i64*
  store i64 %26, i64* %29, align 8, !tbaa !5
  %xpv_pv71 = bitcast i8* %28 to i8**
  %30 = load i8** %xpv_pv71, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %30, i64 %26
  store i8 0, i8* %arrayidx, align 1, !tbaa !1
  br label %if.end72

if.end72:                                         ; preds = %cond.end, %cond.end64
  %31 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  %32 = load i32* @PL_tmps_floor, align 4, !tbaa !3
  %cmp73 = icmp sgt i32 %31, %32
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %if.end72
  call void @Perl_free_tmps() #8
  br label %if.end76

if.end76:                                         ; preds = %if.then75, %if.end72
  call void @Perl_pop_scope() #8
  %33 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %33, 536870912
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %34 = load i8** %sv_any50, align 8, !tbaa !0
  %xpv_pv79 = bitcast i8* %34 to i8**
  %35 = load i8** %xpv_pv79, align 8, !tbaa !0
  br label %return

if.end80:                                         ; preds = %land.lhs.true7, %land.lhs.true4, %entry
  %36 = load i32* %sv_flags, align 4, !tbaa !3
  %and82 = and i32 %36, 67108864
  %tobool83 = icmp eq i32 %and82, 0
  br i1 %tobool83, label %return, label %cond.true84

cond.true84:                                      ; preds = %if.end80
  %sv_any85 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %37 = load i8** %sv_any85, align 8, !tbaa !0
  %xpv_pv86 = bitcast i8* %37 to i8**
  %38 = load i8** %xpv_pv86, align 8, !tbaa !0
  br label %return

return:                                           ; preds = %cond.true84, %if.end80, %if.end76
  %retval.0 = phi i8* [ %35, %if.end76 ], [ %38, %cond.true84 ], [ null, %if.end80 ]
  ret i8* %retval.0
}

; Function Attrs: optsize
declare i8* @Perl_bytes_to_utf8(i8*, i64*) #2

; Function Attrs: optsize
declare i8* @Perl_utf8_to_bytes(i8*, i64*) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_utf8_encode(%struct.sv* %sv) #0 {
entry:
  %call = tail call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 2) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9437184
  %cmp = icmp eq i32 %and, 9437184
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = phi i32 [ %.pre, %if.then ], [ %0, %entry ]
  %and2 = and i32 %1, 8388608
  %tobool = icmp eq i32 %and2, 0
  br i1 %tobool, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([0 x i8]* @PL_no_modify, i64 0, i64 0)) #8
  %.pre11 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then3
  %2 = phi i32 [ %1, %if.end ], [ %.pre11, %if.then3 ]
  %and6 = and i32 %2, -536870913
  store i32 %and6, i32* %sv_flags, align 4, !tbaa !3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8388608
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end36, label %if.then

if.then:                                          ; preds = %entry
  %and2 = and i32 %0, 1048576
  %tobool3 = icmp eq i32 %and2, 0
  br i1 %tobool3, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.then
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %1 to i8**
  %2 = load i8** %xpv_pv, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %3 = bitcast i8* %xpv_cur to i64*
  %4 = load i64* %3, align 8, !tbaa !5
  %xuv_uv = getelementptr inbounds i8* %1, i64 24
  %5 = bitcast i8* %xuv_uv to i64*
  %6 = load i64* %5, align 8, !tbaa !5
  %conv = trunc i64 %6 to i32
  %and10 = and i32 %0, -9437185
  store i32 %and10, i32* %sv_flags, align 4, !tbaa !3
  %xpv_len = getelementptr inbounds i8* %1, i64 16
  %7 = bitcast i8* %xpv_len to i64*
  %8 = load i64* %7, align 8, !tbaa !5
  %add = add i64 %4, 1
  %cmp = icmp ult i64 %8, %add
  br i1 %cmp, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.then4
  %call = tail call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add) #7
  %.pre72 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv17.phi.trans.insert = bitcast i8* %.pre72 to i8**
  %.pre73 = load i8** %xpv_pv17.phi.trans.insert, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %if.then4, %cond.true
  %9 = phi i8* [ %2, %if.then4 ], [ %.pre73, %cond.true ]
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %9, i8* %2, i64 %4, i32 1, i1 false)
  %10 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv19 = bitcast i8* %10 to i8**
  %11 = load i8** %xpv_pv19, align 8, !tbaa !0
  %xpv_cur21 = getelementptr inbounds i8* %10, i64 8
  %12 = bitcast i8* %xpv_cur21 to i64*
  %13 = load i64* %12, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8* %11, i64 %13
  store i8 0, i8* %add.ptr, align 1, !tbaa !1
  %14 = load i32* %sv_flags, align 4, !tbaa !3
  %and23 = and i32 %14, 536870912
  %tobool24 = icmp eq i32 %and23, 0
  br i1 %tobool24, label %cond.end29, label %cond.true25

cond.true25:                                      ; preds = %cond.end
  %sub = sub i64 0, %4
  %sext = shl i64 %sub, 32
  %conv27 = ashr exact i64 %sext, 32
  br label %cond.end29

cond.end29:                                       ; preds = %cond.end, %cond.true25
  %cond30 = phi i64 [ %conv27, %cond.true25 ], [ %4, %cond.end ]
  %conv31 = trunc i64 %cond30 to i32
  tail call void @Perl_unsharepvn(i8* %2, i32 %conv31, i32 %conv) #8
  br label %if.end36

if.else:                                          ; preds = %if.then
  %15 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cmp32 = icmp eq %struct.cop* %15, @PL_compiling
  br i1 %cmp32, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.else
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([0 x i8]* @PL_no_modify, i64 0, i64 0)) #8
  br label %if.end36

if.end36:                                         ; preds = %if.else, %entry, %cond.end29, %if.then34
  %16 = load i32* %sv_flags, align 4, !tbaa !3
  %and38 = and i32 %16, 524288
  %tobool39 = icmp eq i32 %and38, 0
  br i1 %tobool39, label %if.else41, label %if.then40

if.then40:                                        ; preds = %if.end36
  tail call void @Perl_sv_unref_flags(%struct.sv* %sv, i32 %flags) #7
  br label %if.end51

if.else41:                                        ; preds = %if.end36
  %17 = and i32 %16, 1048831
  %18 = icmp eq i32 %17, 1048589
  br i1 %18, label %if.then49, label %if.end51

if.then49:                                        ; preds = %if.else41
  %and.i = and i32 %16, -1048577
  store i32 %and.i, i32* %sv_flags, align 4, !tbaa !3
  %sv_any.i = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %19 = load i8** %sv_any.i, align 8, !tbaa !0
  %xgv_gp.i = getelementptr inbounds i8* %19, i64 56
  %20 = bitcast i8* %xgv_gp.i to %struct.gp**
  %21 = load %struct.gp** %20, align 8, !tbaa !0
  %tobool.i = icmp eq %struct.gp* %21, null
  br i1 %tobool.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then49
  %22 = bitcast %struct.sv* %sv to %struct.gv*
  tail call void @Perl_gp_free(%struct.gv* %22) #8
  %.pre = load i8** %sv_any.i, align 8, !tbaa !0
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then49
  %23 = phi i8* [ %.pre, %if.then.i ], [ %19, %if.then49 ]
  %xgv_stash.i = getelementptr inbounds i8* %23, i64 80
  %24 = bitcast i8* %xgv_stash.i to %struct.hv**
  %25 = load %struct.hv** %24, align 8, !tbaa !0
  %tobool2.i = icmp eq %struct.hv* %25, null
  br i1 %tobool2.i, label %S_sv_unglob.exit, label %if.then3.i

if.then3.i:                                       ; preds = %if.end.i
  %26 = bitcast %struct.hv* %25 to %struct.sv*
  tail call void @Perl_sv_free(%struct.sv* %26) #8
  %27 = load i8** %sv_any.i, align 8, !tbaa !0
  %xgv_stash7.i = getelementptr inbounds i8* %27, i64 80
  %28 = bitcast i8* %xgv_stash7.i to %struct.hv**
  store %struct.hv* null, %struct.hv** %28, align 8, !tbaa !0
  br label %S_sv_unglob.exit

S_sv_unglob.exit:                                 ; preds = %if.end.i, %if.then3.i
  %call.i = tail call i32 @Perl_sv_unmagic(%struct.sv* %sv, i32 42) #8
  %29 = load i8** %sv_any.i, align 8, !tbaa !0
  %xgv_name.i = getelementptr inbounds i8* %29, i64 64
  %30 = bitcast i8* %xgv_name.i to i8**
  %31 = load i8** %30, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %31) #8
  %32 = load i8** %sv_any.i, align 8, !tbaa !0
  %33 = getelementptr inbounds i8* %32, i64 88
  %34 = load i8* %33, align 1, !tbaa !1
  %and11.i = and i8 %34, -3
  store i8 %and11.i, i8* %33, align 1, !tbaa !1
  %call13.i = tail call fastcc %struct.xpvmg* @S_new_xpvmg() #8
  %35 = bitcast %struct.xpvmg* %call13.i to i8*
  %36 = load i8** %sv_any.i, align 8, !tbaa !0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 56, i32 8, i1 false) #3, !tbaa.struct !7
  %37 = load i8** %sv_any.i, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %37) #8
  store i8* %35, i8** %sv_any.i, align 8, !tbaa !0
  %38 = load i32* %sv_flags, align 4, !tbaa !3
  %and18.i = and i32 %38, -256
  %or.i = or i32 %and18.i, 7
  store i32 %or.i, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end51

if.end51:                                         ; preds = %if.else41, %S_sv_unglob.exit, %if.then40
  ret void
}

; Function Attrs: nounwind optsize uwtable
define signext i8 @Perl_sv_utf8_decode(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 67108864
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %sv, i8 signext 1) #7
  %tobool1 = icmp eq i8 %call, 0
  br i1 %tobool1, label %return, label %if.end

if.end:                                           ; preds = %if.then
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %1 to i8**
  %2 = load i8** %xpv_pv, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %3 = bitcast i8* %xpv_cur to i64*
  %4 = load i64* %3, align 8, !tbaa !5
  %add = add i64 %4, 1
  %call4 = tail call signext i8 @Perl_is_utf8_string(i8* %2, i64 %add) #8
  %tobool5 = icmp eq i8 %call4, 0
  br i1 %tobool5, label %return, label %if.end7

if.end7:                                          ; preds = %if.end
  %5 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv9 = bitcast i8* %5 to i8**
  %6 = load i8** %xpv_pv9, align 8, !tbaa !0
  %xpv_cur11 = getelementptr inbounds i8* %5, i64 8
  %7 = bitcast i8* %xpv_cur11 to i64*
  %8 = load i64* %7, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8* %6, i64 %8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end7
  %c.0 = phi i8* [ %2, %if.end7 ], [ %incdec.ptr, %while.body ]
  %cmp = icmp ult i8* %c.0, %add.ptr
  br i1 %cmp, label %while.body, label %return

while.body:                                       ; preds = %while.cond
  %incdec.ptr = getelementptr inbounds i8* %c.0, i64 1
  %9 = load i8* %c.0, align 1, !tbaa !1
  %cmp12 = icmp sgt i8 %9, -1
  br i1 %cmp12, label %while.cond, label %if.then14

if.then14:                                        ; preds = %while.body
  %10 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %10, 536870912
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %while.cond, %if.then14, %entry, %if.end, %if.then
  %retval.0 = phi i8 [ 0, %if.then ], [ 0, %if.end ], [ 1, %entry ], [ 1, %if.then14 ], [ 1, %while.cond ]
  ret i8 %retval.0
}

; Function Attrs: optsize
declare signext i8 @Perl_is_utf8_string(i8*, i64) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setsv(%struct.sv* %dstr, %struct.sv* %sstr) #0 {
entry:
  tail call void @Perl_sv_setsv_flags(%struct.sv* %dstr, %struct.sv* %sstr, i32 2) #7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setsv_flags(%struct.sv* %dstr, %struct.sv* %sstr, i32 %flags) #0 {
entry:
  %cmp = icmp eq %struct.sv* %sstr, %dstr
  br i1 %cmp, label %if.end1180, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9961472
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %dstr, i32 0) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end2

if.end2:                                          ; preds = %if.end, %if.then1
  %1 = phi i32 [ %0, %if.end ], [ %.pre, %if.then1 ]
  %tobool3 = icmp eq %struct.sv* %sstr, null
  %PL_sv_undef.sstr = select i1 %tobool3, %struct.sv* @PL_sv_undef, %struct.sv* %sstr
  %sv_flags6 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 2
  %2 = load i32* %sv_flags6, align 4, !tbaa !3
  %and7 = and i32 %2, 255
  %and9 = and i32 %1, 255
  %and11 = and i32 %1, -268435457
  store i32 %and11, i32* %sv_flags, align 4, !tbaa !3
  %and13 = and i32 %1, 57344
  %tobool14 = icmp eq i32 %and13, 0
  br i1 %tobool14, label %if.end20, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end2
  %call = tail call %struct.magic* @Perl_mg_find(%struct.sv* %dstr, i32 86) #8
  %tobool15 = icmp eq %struct.magic* %call, null
  br i1 %tobool15, label %if.end20, label %if.then16

if.then16:                                        ; preds = %land.lhs.true
  %call17 = tail call i32 @Perl_mg_free(%struct.sv* %dstr) #8
  %3 = load i32* %sv_flags, align 4, !tbaa !3
  %and19 = and i32 %3, -32769
  store i32 %and19, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end20

if.end20:                                         ; preds = %land.lhs.true, %if.end2, %if.then16
  switch i32 %and7, label %sw.default [
    i32 0, label %undef_sstr
    i32 1, label %sw.bb31
    i32 2, label %sw.bb80
    i32 3, label %sw.bb124
    i32 4, label %sw.bb171
    i32 14, label %sw.bb171
    i32 5, label %sw.bb177
    i32 6, label %sw.bb183
    i32 10, label %sw.bb189
    i32 11, label %sw.bb189
    i32 12, label %sw.bb189
    i32 15, label %sw.bb189
    i32 13, label %sw.bb201
  ]

undef_sstr:                                       ; preds = %sw.bb31, %sw.bb80, %if.end20
  %cmp21 = icmp eq i32 %and9, 13
  br i1 %cmp21, label %sw.epilog355thread-pre-split, label %if.then22

if.then22:                                        ; preds = %undef_sstr
  %4 = load i32* %sv_flags, align 4, !tbaa !3
  %and24 = and i32 %4, 1223753727
  store i32 %and24, i32* %sv_flags, align 4, !tbaa !3
  %and26 = and i32 %4, 2097152
  %tobool27 = icmp eq i32 %and26, 0
  br i1 %tobool27, label %if.end1180, label %land.rhs

land.rhs:                                         ; preds = %if.then22
  %call28 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  br label %if.end1180

sw.bb31:                                          ; preds = %if.end20
  %5 = load i32* %sv_flags6, align 4, !tbaa !3
  %and33 = and i32 %5, 65536
  %tobool34 = icmp eq i32 %and33, 0
  br i1 %tobool34, label %undef_sstr, label %if.then35

if.then35:                                        ; preds = %sw.bb31
  switch i32 %and9, label %sw.epilog [
    i32 0, label %sw.bb36
    i32 2, label %sw.bb38
    i32 3, label %sw.bb40
    i32 4, label %sw.bb40
  ]

sw.bb36:                                          ; preds = %if.then35
  %call37 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 1) #7
  br label %sw.epilog

sw.bb38:                                          ; preds = %if.then35
  %call39 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 6) #7
  br label %sw.epilog

sw.bb40:                                          ; preds = %if.then35, %if.then35
  %call41 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 5) #7
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then35, %sw.bb40, %sw.bb38, %sw.bb36
  %6 = load i32* %sv_flags, align 4, !tbaa !3
  %and43 = and i32 %6, 1223753727
  store i32 %and43, i32* %sv_flags, align 4, !tbaa !3
  %and45 = and i32 %6, 2097152
  %tobool46 = icmp eq i32 %and45, 0
  br i1 %tobool46, label %land.end50, label %land.rhs47

land.rhs47:                                       ; preds = %sw.epilog
  %call48 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1558 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end50

land.end50:                                       ; preds = %sw.epilog, %land.rhs47
  %7 = phi i32 [ %and43, %sw.epilog ], [ %.pre1558, %land.rhs47 ]
  %or = or i32 %7, 16842752
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %sv_any = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %8 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %8, i64 24
  %9 = bitcast i8* %xiv_iv to i64*
  %10 = load i64* %9, align 8, !tbaa !5
  %sv_any53 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %11 = load i8** %sv_any53, align 8, !tbaa !0
  %xiv_iv54 = getelementptr inbounds i8* %11, i64 24
  %12 = bitcast i8* %xiv_iv54 to i64*
  store i64 %10, i64* %12, align 8, !tbaa !5
  %13 = load i32* %sv_flags6, align 4, !tbaa !3
  %tobool57 = icmp slt i32 %13, 0
  br i1 %tobool57, label %if.then58, label %if.end61

if.then58:                                        ; preds = %land.end50
  %or60 = or i32 %7, -2130640896
  store i32 %or60, i32* %sv_flags, align 4, !tbaa !3
  %.pre1559 = load i32* %sv_flags6, align 4, !tbaa !3
  br label %if.end61

if.end61:                                         ; preds = %if.then58, %land.end50
  %14 = phi i32 [ %.pre1559, %if.then58 ], [ %13, %land.end50 ]
  %and63 = and i32 %14, 57344
  %tobool64 = icmp eq i32 %and63, 0
  br i1 %tobool64, label %if.end1180, label %land.lhs.true65

land.lhs.true65:                                  ; preds = %if.end61
  %call66 = tail call signext i8 @Perl_sv_tainted(%struct.sv* %PL_sv_undef.sstr) #7
  %tobool67 = icmp ne i8 %call66, 0
  %15 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool69 = icmp ne i8 %15, 0
  %or.cond = and i1 %tobool67, %tobool69
  %16 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool71 = icmp ne i8 %16, 0
  %or.cond1181 = and i1 %or.cond, %tobool71
  br i1 %or.cond1181, label %if.then74, label %if.end1180

if.then74:                                        ; preds = %land.lhs.true65
  tail call void @Perl_sv_magic(%struct.sv* %dstr, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end1180

sw.bb80:                                          ; preds = %if.end20
  %17 = load i32* %sv_flags6, align 4, !tbaa !3
  %and82 = and i32 %17, 131072
  %tobool83 = icmp eq i32 %and82, 0
  br i1 %tobool83, label %undef_sstr, label %if.then84

if.then84:                                        ; preds = %sw.bb80
  switch i32 %and9, label %sw.epilog89 [
    i32 0, label %sw.bb85
    i32 1, label %sw.bb85
    i32 3, label %sw.bb87
    i32 4, label %sw.bb87
    i32 5, label %sw.bb87
  ]

sw.bb85:                                          ; preds = %if.then84, %if.then84
  %call86 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 2) #7
  br label %sw.epilog89

sw.bb87:                                          ; preds = %if.then84, %if.then84, %if.then84
  %call88 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 6) #7
  br label %sw.epilog89

sw.epilog89:                                      ; preds = %if.then84, %sw.bb87, %sw.bb85
  %sv_any90 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %18 = load i8** %sv_any90, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %18, i64 32
  %19 = bitcast i8* %xnv_nv to double*
  %20 = load double* %19, align 8, !tbaa !6
  %sv_any91 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %21 = load i8** %sv_any91, align 8, !tbaa !0
  %xnv_nv92 = getelementptr inbounds i8* %21, i64 32
  %22 = bitcast i8* %xnv_nv92 to double*
  store double %20, double* %22, align 8, !tbaa !6
  %23 = load i32* %sv_flags, align 4, !tbaa !3
  %and94 = and i32 %23, 1223753727
  store i32 %and94, i32* %sv_flags, align 4, !tbaa !3
  %and96 = and i32 %23, 2097152
  %tobool97 = icmp eq i32 %and96, 0
  br i1 %tobool97, label %land.end101, label %land.rhs98

land.rhs98:                                       ; preds = %sw.epilog89
  %call99 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1560 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end101

land.end101:                                      ; preds = %sw.epilog89, %land.rhs98
  %24 = phi i32 [ %and94, %sw.epilog89 ], [ %.pre1560, %land.rhs98 ]
  %or104 = or i32 %24, 33685504
  store i32 %or104, i32* %sv_flags, align 4, !tbaa !3
  %25 = load i32* %sv_flags6, align 4, !tbaa !3
  %and106 = and i32 %25, 57344
  %tobool107 = icmp eq i32 %and106, 0
  br i1 %tobool107, label %if.end1180, label %land.lhs.true108

land.lhs.true108:                                 ; preds = %land.end101
  %call109 = tail call signext i8 @Perl_sv_tainted(%struct.sv* %PL_sv_undef.sstr) #7
  %tobool111 = icmp ne i8 %call109, 0
  %26 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool113 = icmp ne i8 %26, 0
  %or.cond1183 = and i1 %tobool111, %tobool113
  %27 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool115 = icmp ne i8 %27, 0
  %or.cond1184 = and i1 %or.cond1183, %tobool115
  br i1 %or.cond1184, label %if.then118, label %if.end1180

if.then118:                                       ; preds = %land.lhs.true108
  tail call void @Perl_sv_magic(%struct.sv* %dstr, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end1180

sw.bb124:                                         ; preds = %if.end20
  %cmp125 = icmp ult i32 %and9, 3
  br i1 %cmp125, label %if.then127, label %if.else

if.then127:                                       ; preds = %sw.bb124
  %call128 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 3) #7
  br label %sw.epilog355thread-pre-split

if.else:                                          ; preds = %sw.bb124
  %cmp129 = icmp eq i32 %and9, 13
  br i1 %cmp129, label %land.lhs.true131, label %sw.epilog355thread-pre-split

land.lhs.true131:                                 ; preds = %if.else
  %28 = load i32* %sv_flags6, align 4, !tbaa !3
  %and133 = and i32 %28, 524288
  %tobool134 = icmp eq i32 %and133, 0
  br i1 %tobool134, label %sw.epilog355, label %land.lhs.true135

land.lhs.true135:                                 ; preds = %land.lhs.true131
  %sv_any136 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %29 = load i8** %sv_any136, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %29 to %struct.sv**
  %30 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_flags137 = getelementptr inbounds %struct.sv* %30, i64 0, i32 2
  %31 = load i32* %sv_flags137, align 4, !tbaa !3
  %and138 = and i32 %31, 255
  %cmp139 = icmp eq i32 %and138, 13
  br i1 %cmp139, label %if.then141, label %sw.epilog355thread-pre-split

if.then141:                                       ; preds = %land.lhs.true135
  %cmp144 = icmp eq %struct.sv* %30, %dstr
  br i1 %cmp144, label %if.then146, label %glob_assign

if.then146:                                       ; preds = %if.then141
  %sv_any147 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %32 = load i8** %sv_any147, align 8, !tbaa !0
  %33 = getelementptr inbounds i8* %32, i64 88
  %34 = load i8* %33, align 1, !tbaa !1
  %and149 = and i8 %34, -16
  %cmp150 = icmp eq i8 %and149, -16
  br i1 %cmp150, label %if.end162, label %land.lhs.true152

land.lhs.true152:                                 ; preds = %if.then146
  %35 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_stash = getelementptr inbounds %struct.cop* %35, i64 0, i32 9
  %36 = load %struct.hv** %cop_stash, align 8, !tbaa !0
  %xgv_stash = getelementptr inbounds i8* %32, i64 80
  %37 = bitcast i8* %xgv_stash to %struct.hv**
  %38 = load %struct.hv** %37, align 8, !tbaa !0
  %cmp154 = icmp eq %struct.hv* %36, %38
  br i1 %cmp154, label %if.end162, label %if.then156

if.then156:                                       ; preds = %land.lhs.true152
  %or160 = or i8 %34, -16
  store i8 %or160, i8* %33, align 1, !tbaa !1
  br label %if.end162

if.end162:                                        ; preds = %land.lhs.true152, %if.then146, %if.then156
  %39 = load i8** %sv_any147, align 8, !tbaa !0
  %40 = getelementptr inbounds i8* %39, i64 88
  %41 = load i8* %40, align 1, !tbaa !1
  %or166 = or i8 %41, 2
  store i8 %or166, i8* %40, align 1, !tbaa !1
  br label %if.end1180

sw.bb171:                                         ; preds = %if.end20, %if.end20
  %cmp172 = icmp ult i32 %and9, 4
  br i1 %cmp172, label %if.then174, label %sw.epilog355thread-pre-split

if.then174:                                       ; preds = %sw.bb171
  %call175 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 4) #7
  br label %sw.epilog355thread-pre-split

sw.bb177:                                         ; preds = %if.end20
  %cmp178 = icmp ult i32 %and9, 5
  br i1 %cmp178, label %if.then180, label %sw.epilog355thread-pre-split

if.then180:                                       ; preds = %sw.bb177
  %call181 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 5) #7
  br label %sw.epilog355thread-pre-split

sw.bb183:                                         ; preds = %if.end20
  %cmp184 = icmp ult i32 %and9, 6
  br i1 %cmp184, label %if.then186, label %sw.epilog355thread-pre-split

if.then186:                                       ; preds = %sw.bb183
  %call187 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 6) #7
  br label %sw.epilog355thread-pre-split

sw.bb189:                                         ; preds = %if.end20, %if.end20, %if.end20, %if.end20
  %42 = load %struct.op** @PL_op, align 8, !tbaa !0
  %tobool190 = icmp eq %struct.op* %42, null
  %call192 = tail call i8* @Perl_sv_reftype(%struct.sv* %PL_sv_undef.sstr, i32 0) #7
  br i1 %tobool190, label %if.else198, label %if.then191

if.then191:                                       ; preds = %sw.bb189
  %op_type = getelementptr inbounds %struct.op* %42, i64 0, i32 4
  %43 = load i16* %op_type, align 2, !tbaa !4
  %cmp194 = icmp eq i16 %43, 351
  br i1 %cmp194, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then191
  %call196 = tail call i8* @Perl_custom_op_name(%struct.op* %42) #8
  br label %cond.end

cond.false:                                       ; preds = %if.then191
  %idxprom = zext i16 %43 to i64
  %arrayidx = getelementptr inbounds [0 x i8*]* @PL_op_name, i64 0, i64 %idxprom
  %44 = load i8** %arrayidx, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call196, %cond.true ], [ %44, %cond.false ]
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([25 x i8]* @.str29, i64 0, i64 0), i8* %call192, i8* %cond) #8
  br label %sw.epilog355thread-pre-split

if.else198:                                       ; preds = %sw.bb189
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([19 x i8]* @.str30, i64 0, i64 0), i8* %call192) #8
  br label %sw.epilog355thread-pre-split

sw.bb201:                                         ; preds = %if.end20
  %cmp202 = icmp ult i32 %and9, 14
  br i1 %cmp202, label %glob_assign, label %sw.default

glob_assign:                                      ; preds = %if.then321, %sw.bb201, %if.then141
  %sstr.addr.1 = phi %struct.sv* [ %PL_sv_undef.sstr, %sw.bb201 ], [ %30, %if.then141 ], [ %PL_sv_undef.sstr, %if.then321 ]
  %cmp205 = icmp eq i32 %and9, 13
  br i1 %cmp205, label %if.else228, label %if.then207

if.then207:                                       ; preds = %glob_assign
  %sv_any208 = getelementptr inbounds %struct.sv* %sstr.addr.1, i64 0, i32 0
  %45 = load i8** %sv_any208, align 8, !tbaa !0
  %xgv_name = getelementptr inbounds i8* %45, i64 64
  %46 = bitcast i8* %xgv_name to i8**
  %47 = load i8** %46, align 8, !tbaa !0
  %xgv_namelen = getelementptr inbounds i8* %45, i64 72
  %48 = bitcast i8* %xgv_namelen to i64*
  %49 = load i64* %48, align 8, !tbaa !5
  %call210 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 13) #7
  tail call void @Perl_sv_magic(%struct.sv* %dstr, %struct.sv* %dstr, i32 42, i8* null, i32 0) #7
  %50 = load i8** %sv_any208, align 8, !tbaa !0
  %xgv_stash212 = getelementptr inbounds i8* %50, i64 80
  %51 = bitcast i8* %xgv_stash212 to %struct.hv**
  %52 = load %struct.hv** %51, align 8, !tbaa !0
  %53 = bitcast %struct.hv* %52 to %struct.sv*
  store %struct.sv* %53, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %tobool213 = icmp eq %struct.hv* %52, null
  br i1 %tobool213, label %land.end216, label %land.rhs214

land.rhs214:                                      ; preds = %if.then207
  %54 = getelementptr inbounds %struct.hv* %52, i64 0, i32 1
  %55 = load i32* %54, align 4, !tbaa !3
  %inc = add i32 %55, 1
  store i32 %inc, i32* %54, align 4, !tbaa !3
  br label %land.end216

land.end216:                                      ; preds = %if.then207, %land.rhs214
  %sv_any218 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %56 = load i8** %sv_any218, align 8, !tbaa !0
  %xgv_stash219 = getelementptr inbounds i8* %56, i64 80
  %57 = bitcast i8* %xgv_stash219 to %struct.hv**
  store %struct.hv* %52, %struct.hv** %57, align 8, !tbaa !0
  %conv220 = trunc i64 %49 to i32
  %call221 = tail call i8* @Perl_savepvn(i8* %47, i32 %conv220) #8
  %58 = load i8** %sv_any218, align 8, !tbaa !0
  %xgv_name223 = getelementptr inbounds i8* %58, i64 64
  %59 = bitcast i8* %xgv_name223 to i8**
  store i8* %call221, i8** %59, align 8, !tbaa !0
  %60 = load i8** %sv_any218, align 8, !tbaa !0
  %xgv_namelen225 = getelementptr inbounds i8* %60, i64 72
  %61 = bitcast i8* %xgv_namelen225 to i64*
  store i64 %49, i64* %61, align 8, !tbaa !5
  %62 = load i32* %sv_flags, align 4, !tbaa !3
  %or227 = or i32 %62, 1048576
  store i32 %or227, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end245

if.else228:                                       ; preds = %glob_assign
  %63 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_type = getelementptr inbounds %struct.stackinfo* %63, i64 0, i32 4
  %64 = load i32* %si_type, align 4, !tbaa !3
  %cmp229 = icmp eq i32 %64, 3
  br i1 %cmp229, label %land.lhs.true231, label %if.end245

land.lhs.true231:                                 ; preds = %if.else228
  %sv_any232 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %65 = load i8** %sv_any232, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds i8* %65, i64 56
  %66 = bitcast i8* %xgv_gp to %struct.gp**
  %67 = load %struct.gp** %66, align 8, !tbaa !0
  %gp_cv = getelementptr inbounds %struct.gp* %67, i64 0, i32 7
  %68 = load %struct.cv** %gp_cv, align 8, !tbaa !0
  %tobool233 = icmp eq %struct.cv* %68, null
  br i1 %tobool233, label %if.end245, label %land.lhs.true234

land.lhs.true234:                                 ; preds = %land.lhs.true231
  %69 = load %struct.op** @PL_sortcop, align 8, !tbaa !0
  %sv_any238 = getelementptr inbounds %struct.cv* %68, i64 0, i32 0
  %70 = load %struct.xpvcv** %sv_any238, align 8, !tbaa !0
  %xcv_start = getelementptr inbounds %struct.xpvcv* %70, i64 0, i32 8
  %71 = load %struct.op** %xcv_start, align 8, !tbaa !0
  %cmp239 = icmp eq %struct.op* %69, %71
  br i1 %cmp239, label %if.then241, label %if.end245

if.then241:                                       ; preds = %land.lhs.true234
  %xgv_name243 = getelementptr inbounds i8* %65, i64 64
  %72 = bitcast i8* %xgv_name243 to i8**
  %73 = load i8** %72, align 8, !tbaa !0
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([41 x i8]* @.str31, i64 0, i64 0), i8* %73) #8
  br label %if.end245

if.end245:                                        ; preds = %land.lhs.true234, %land.lhs.true231, %if.else228, %if.then241, %land.end216
  %74 = load i32* %sv_flags, align 4, !tbaa !3
  %and247 = and i32 %74, 1223753727
  store i32 %and247, i32* %sv_flags, align 4, !tbaa !3
  %and249 = and i32 %74, 2097152
  %tobool250 = icmp eq i32 %and249, 0
  br i1 %tobool250, label %land.end254, label %land.rhs251

land.rhs251:                                      ; preds = %if.end245
  %call252 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  br label %land.end254

land.end254:                                      ; preds = %if.end245, %land.rhs251
  %sv_any256 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %75 = load i8** %sv_any256, align 8, !tbaa !0
  %76 = getelementptr inbounds i8* %75, i64 88
  %77 = load i8* %76, align 1, !tbaa !1
  %and259 = and i8 %77, -2
  store i8 %and259, i8* %76, align 1, !tbaa !1
  %78 = bitcast %struct.sv* %dstr to %struct.gv*
  tail call void @Perl_gp_free(%struct.gv* %78) #8
  %sv_any261 = getelementptr inbounds %struct.sv* %sstr.addr.1, i64 0, i32 0
  %79 = load i8** %sv_any261, align 8, !tbaa !0
  %xgv_gp262 = getelementptr inbounds i8* %79, i64 56
  %80 = bitcast i8* %xgv_gp262 to %struct.gp**
  %81 = load %struct.gp** %80, align 8, !tbaa !0
  %call263 = tail call %struct.gp* @Perl_gp_ref(%struct.gp* %81) #8
  %82 = load i8** %sv_any256, align 8, !tbaa !0
  %xgv_gp265 = getelementptr inbounds i8* %82, i64 56
  %83 = bitcast i8* %xgv_gp265 to %struct.gp**
  store %struct.gp* %call263, %struct.gp** %83, align 8, !tbaa !0
  %sv_flags266 = getelementptr inbounds %struct.sv* %sstr.addr.1, i64 0, i32 2
  %84 = load i32* %sv_flags266, align 4, !tbaa !3
  %and267 = and i32 %84, 57344
  %tobool268 = icmp eq i32 %and267, 0
  br i1 %tobool268, label %if.end283, label %land.lhs.true269

land.lhs.true269:                                 ; preds = %land.end254
  %call270 = tail call signext i8 @Perl_sv_tainted(%struct.sv* %sstr.addr.1) #7
  %tobool272 = icmp ne i8 %call270, 0
  %85 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool274 = icmp ne i8 %85, 0
  %or.cond1186 = and i1 %tobool272, %tobool274
  %86 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool276 = icmp ne i8 %86, 0
  %or.cond1187 = and i1 %or.cond1186, %tobool276
  br i1 %or.cond1187, label %if.then279, label %if.end283

if.then279:                                       ; preds = %land.lhs.true269
  tail call void @Perl_sv_magic(%struct.sv* %dstr, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end283

if.end283:                                        ; preds = %land.end254, %if.then279, %land.lhs.true269
  %87 = load i8** %sv_any256, align 8, !tbaa !0
  %88 = getelementptr inbounds i8* %87, i64 88
  %89 = load i8* %88, align 1, !tbaa !1
  %and287 = and i8 %89, -16
  %cmp288 = icmp eq i8 %and287, -16
  br i1 %cmp288, label %if.end302, label %land.lhs.true290

land.lhs.true290:                                 ; preds = %if.end283
  %90 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_stash291 = getelementptr inbounds %struct.cop* %90, i64 0, i32 9
  %91 = load %struct.hv** %cop_stash291, align 8, !tbaa !0
  %xgv_stash293 = getelementptr inbounds i8* %87, i64 80
  %92 = bitcast i8* %xgv_stash293 to %struct.hv**
  %93 = load %struct.hv** %92, align 8, !tbaa !0
  %cmp294 = icmp eq %struct.hv* %91, %93
  br i1 %cmp294, label %if.end302, label %if.then296

if.then296:                                       ; preds = %land.lhs.true290
  %or300 = or i8 %89, -16
  store i8 %or300, i8* %88, align 1, !tbaa !1
  br label %if.end302

if.end302:                                        ; preds = %land.lhs.true290, %if.end283, %if.then296
  %94 = load i8** %sv_any256, align 8, !tbaa !0
  %95 = getelementptr inbounds i8* %94, i64 88
  %96 = load i8* %95, align 1, !tbaa !1
  %or306 = or i8 %96, 2
  store i8 %or306, i8* %95, align 1, !tbaa !1
  br label %if.end1180

sw.default:                                       ; preds = %sw.bb201, %if.end20
  %97 = load i32* %sv_flags6, align 4, !tbaa !3
  %and310 = and i32 %97, 8192
  %tobool311 = icmp eq i32 %and310, 0
  br i1 %tobool311, label %if.end332, label %land.lhs.true312

land.lhs.true312:                                 ; preds = %sw.default
  %and313 = and i32 %flags, 2
  %tobool314 = icmp eq i32 %and313, 0
  br i1 %tobool314, label %if.end332, label %if.then315

if.then315:                                       ; preds = %land.lhs.true312
  %call316 = tail call i32 @Perl_mg_get(%struct.sv* %PL_sv_undef.sstr) #8
  %98 = load i32* %sv_flags6, align 4, !tbaa !3
  %and318 = and i32 %98, 255
  %cmp319 = icmp eq i32 %and318, %and7
  br i1 %cmp319, label %if.end332, label %if.then321

if.then321:                                       ; preds = %if.then315
  %cmp324 = icmp eq i32 %and318, 13
  %cmp327 = icmp ult i32 %and9, 14
  %or.cond1518 = and i1 %cmp324, %cmp327
  br i1 %or.cond1518, label %glob_assign, label %if.end332

if.end332:                                        ; preds = %if.then321, %if.then315, %land.lhs.true312, %sw.default
  %stype.0 = phi i32 [ %and7, %sw.default ], [ %and7, %land.lhs.true312 ], [ %and7, %if.then315 ], [ %and318, %if.then321 ]
  %cmp333 = icmp eq i32 %stype.0, 9
  %99 = load i32* %sv_flags, align 4, !tbaa !3
  %and337 = and i32 %99, 255
  br i1 %cmp333, label %if.then335, label %if.else343

if.then335:                                       ; preds = %if.end332
  %cmp338 = icmp ugt i32 %and337, 5
  br i1 %cmp338, label %sw.epilog355thread-pre-split, label %lor.rhs

lor.rhs:                                          ; preds = %if.then335
  %call340 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 6) #7
  br label %sw.epilog355thread-pre-split

if.else343:                                       ; preds = %if.end332
  %cmp346 = icmp ult i32 %and337, %stype.0
  br i1 %cmp346, label %lor.rhs348, label %sw.epilog355thread-pre-split

lor.rhs348:                                       ; preds = %if.else343
  %call349 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %dstr, i32 %stype.0) #7
  br label %sw.epilog355thread-pre-split

sw.epilog355thread-pre-split:                     ; preds = %sw.bb183, %sw.bb177, %sw.bb171, %if.else, %undef_sstr, %land.lhs.true135, %if.then127, %if.then174, %if.then180, %if.then186, %if.else198, %cond.end, %lor.rhs, %if.then335, %if.else343, %lor.rhs348
  %.pr = load i32* %sv_flags6, align 4, !tbaa !3
  br label %sw.epilog355

sw.epilog355:                                     ; preds = %sw.epilog355thread-pre-split, %land.lhs.true131
  %100 = phi i32 [ %.pr, %sw.epilog355thread-pre-split ], [ %28, %land.lhs.true131 ]
  %and357 = and i32 %100, 524288
  %tobool358 = icmp eq i32 %and357, 0
  br i1 %tobool358, label %if.else825, label %if.then359

if.then359:                                       ; preds = %sw.epilog355
  %cmp360 = icmp ugt i32 %and9, 3
  br i1 %cmp360, label %if.then362, label %if.end748

if.then362:                                       ; preds = %if.then359
  %cmp363 = icmp eq i32 %and9, 13
  br i1 %cmp363, label %if.then365, label %if.end725

if.then365:                                       ; preds = %if.then362
  %sv_any366 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %101 = load i8** %sv_any366, align 8, !tbaa !0
  %xrv_rv367 = bitcast i8* %101 to %struct.sv**
  %102 = load %struct.sv** %xrv_rv367, align 8, !tbaa !0
  store %struct.sv* %102, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %tobool368 = icmp eq %struct.sv* %102, null
  br i1 %tobool368, label %land.end373, label %land.rhs369

land.rhs369:                                      ; preds = %if.then365
  %sv_refcnt370 = getelementptr inbounds %struct.sv* %102, i64 0, i32 1
  %103 = load i32* %sv_refcnt370, align 4, !tbaa !3
  %inc371 = add i32 %103, 1
  store i32 %inc371, i32* %sv_refcnt370, align 4, !tbaa !3
  br label %land.end373

land.end373:                                      ; preds = %if.then365, %land.rhs369
  %sv_any375 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %104 = load i8** %sv_any375, align 8, !tbaa !0
  %105 = getelementptr inbounds i8* %104, i64 88
  %106 = load i8* %105, align 1, !tbaa !1
  %and378 = and i8 %106, 1
  %tobool379 = icmp ne i8 %and378, 0
  br i1 %tobool379, label %if.then380, label %if.end390

if.then380:                                       ; preds = %land.end373
  %and384 = and i8 %106, -2
  store i8 %and384, i8* %105, align 1, !tbaa !1
  %107 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_line = getelementptr inbounds %struct.cop* %107, i64 0, i32 13
  %108 = load i32* %cop_line, align 4, !tbaa !3
  %109 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp387 = getelementptr inbounds i8* %109, i64 56
  %110 = bitcast i8* %xgv_gp387 to %struct.gp**
  %111 = load %struct.gp** %110, align 8, !tbaa !0
  %gp_line = getelementptr inbounds %struct.gp* %111, i64 0, i32 10
  store i32 %108, i32* %gp_line, align 4, !tbaa !3
  %112 = bitcast %struct.sv* %dstr to %struct.gv*
  %gp_egv = getelementptr inbounds %struct.gp* %111, i64 0, i32 6
  store %struct.gv* %112, %struct.gv** %gp_egv, align 8, !tbaa !0
  %.pre1533 = load i8** %sv_any375, align 8, !tbaa !0
  %.phi.trans.insert = getelementptr inbounds i8* %.pre1533, i64 88
  %.pre1534 = load i8* %.phi.trans.insert, align 1, !tbaa !1
  br label %if.end390

if.end390:                                        ; preds = %if.then380, %land.end373
  %113 = phi i8 [ %.pre1534, %if.then380 ], [ %106, %land.end373 ]
  %114 = phi i8* [ %.pre1533, %if.then380 ], [ %104, %land.end373 ]
  %115 = getelementptr inbounds i8* %114, i64 88
  %or394 = or i8 %113, 2
  store i8 %or394, i8* %115, align 1, !tbaa !1
  %sv_flags396 = getelementptr inbounds %struct.sv* %102, i64 0, i32 2
  %116 = load i32* %sv_flags396, align 4, !tbaa !3
  %and397 = and i32 %116, 255
  switch i32 %and397, label %sw.default672 [
    i32 10, label %sw.bb398
    i32 11, label %sw.bb429
    i32 12, label %sw.bb460
    i32 15, label %sw.bb646
    i32 14, label %sw.bb659
  ]

sw.bb398:                                         ; preds = %if.end390
  %117 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp402 = getelementptr inbounds i8* %117, i64 56
  %118 = bitcast i8* %xgv_gp402 to %struct.gp**
  %119 = load %struct.gp** %118, align 8, !tbaa !0
  %gp_av = getelementptr inbounds %struct.gp* %119, i64 0, i32 4
  br i1 %tobool379, label %if.then400, label %if.else403

if.then400:                                       ; preds = %sw.bb398
  %120 = bitcast %struct.av** %gp_av to %struct.sv**
  tail call void @Perl_save_generic_svref(%struct.sv** %120) #8
  %.pre1538 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp409.phi.trans.insert = getelementptr inbounds i8* %.pre1538, i64 56
  %.phi.trans.insert1539 = bitcast i8* %xgv_gp409.phi.trans.insert to %struct.gp**
  %.pre1540 = load %struct.gp** %.phi.trans.insert1539, align 8, !tbaa !0
  br label %if.end407

if.else403:                                       ; preds = %sw.bb398
  %121 = load %struct.av** %gp_av, align 8, !tbaa !0
  %122 = bitcast %struct.av* %121 to %struct.sv*
  br label %if.end407

if.end407:                                        ; preds = %if.else403, %if.then400
  %123 = phi %struct.gp* [ %.pre1540, %if.then400 ], [ %119, %if.else403 ]
  %dref.0 = phi %struct.sv* [ null, %if.then400 ], [ %122, %if.else403 ]
  %124 = bitcast %struct.sv* %102 to %struct.av*
  %gp_av410 = getelementptr inbounds %struct.gp* %123, i64 0, i32 4
  store %struct.av* %124, %struct.av** %gp_av410, align 8, !tbaa !0
  %125 = load i8** %sv_any375, align 8, !tbaa !0
  %126 = getelementptr inbounds i8* %125, i64 88
  %127 = load i8* %126, align 1, !tbaa !1
  %and414 = and i8 %127, 32
  %tobool415 = icmp eq i8 %and414, 0
  br i1 %tobool415, label %land.lhs.true416, label %sw.epilog703

land.lhs.true416:                                 ; preds = %if.end407
  %128 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_stash417 = getelementptr inbounds %struct.cop* %128, i64 0, i32 9
  %129 = load %struct.hv** %cop_stash417, align 8, !tbaa !0
  %xgv_stash419 = getelementptr inbounds i8* %125, i64 80
  %130 = bitcast i8* %xgv_stash419 to %struct.hv**
  %131 = load %struct.hv** %130, align 8, !tbaa !0
  %cmp420 = icmp eq %struct.hv* %129, %131
  br i1 %cmp420, label %sw.epilog703, label %if.then422

if.then422:                                       ; preds = %land.lhs.true416
  %or426 = or i8 %127, 32
  store i8 %or426, i8* %126, align 1, !tbaa !1
  br label %sw.epilog703

sw.bb429:                                         ; preds = %if.end390
  %132 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp433 = getelementptr inbounds i8* %132, i64 56
  %133 = bitcast i8* %xgv_gp433 to %struct.gp**
  %134 = load %struct.gp** %133, align 8, !tbaa !0
  %gp_hv = getelementptr inbounds %struct.gp* %134, i64 0, i32 5
  br i1 %tobool379, label %if.then431, label %if.else434

if.then431:                                       ; preds = %sw.bb429
  %135 = bitcast %struct.hv** %gp_hv to %struct.sv**
  tail call void @Perl_save_generic_svref(%struct.sv** %135) #8
  %.pre1541 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp440.phi.trans.insert = getelementptr inbounds i8* %.pre1541, i64 56
  %.phi.trans.insert1542 = bitcast i8* %xgv_gp440.phi.trans.insert to %struct.gp**
  %.pre1543 = load %struct.gp** %.phi.trans.insert1542, align 8, !tbaa !0
  br label %if.end438

if.else434:                                       ; preds = %sw.bb429
  %136 = load %struct.hv** %gp_hv, align 8, !tbaa !0
  %137 = bitcast %struct.hv* %136 to %struct.sv*
  br label %if.end438

if.end438:                                        ; preds = %if.else434, %if.then431
  %138 = phi %struct.gp* [ %.pre1543, %if.then431 ], [ %134, %if.else434 ]
  %dref.1 = phi %struct.sv* [ null, %if.then431 ], [ %137, %if.else434 ]
  %139 = bitcast %struct.sv* %102 to %struct.hv*
  %gp_hv441 = getelementptr inbounds %struct.gp* %138, i64 0, i32 5
  store %struct.hv* %139, %struct.hv** %gp_hv441, align 8, !tbaa !0
  %140 = load i8** %sv_any375, align 8, !tbaa !0
  %141 = getelementptr inbounds i8* %140, i64 88
  %142 = load i8* %141, align 1, !tbaa !1
  %and445 = and i8 %142, 64
  %tobool446 = icmp eq i8 %and445, 0
  br i1 %tobool446, label %land.lhs.true447, label %sw.epilog703

land.lhs.true447:                                 ; preds = %if.end438
  %143 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_stash448 = getelementptr inbounds %struct.cop* %143, i64 0, i32 9
  %144 = load %struct.hv** %cop_stash448, align 8, !tbaa !0
  %xgv_stash450 = getelementptr inbounds i8* %140, i64 80
  %145 = bitcast i8* %xgv_stash450 to %struct.hv**
  %146 = load %struct.hv** %145, align 8, !tbaa !0
  %cmp451 = icmp eq %struct.hv* %144, %146
  br i1 %cmp451, label %sw.epilog703, label %if.then453

if.then453:                                       ; preds = %land.lhs.true447
  %or457 = or i8 %142, 64
  store i8 %or457, i8* %141, align 1, !tbaa !1
  br label %sw.epilog703

sw.bb460:                                         ; preds = %if.end390
  %147 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp464 = getelementptr inbounds i8* %147, i64 56
  %148 = bitcast i8* %xgv_gp464 to %struct.gp**
  %149 = load %struct.gp** %148, align 8, !tbaa !0
  br i1 %tobool379, label %if.then462, label %if.else487

if.then462:                                       ; preds = %sw.bb460
  %gp_cvgen = getelementptr inbounds %struct.gp* %149, i64 0, i32 8
  %150 = load i32* %gp_cvgen, align 4, !tbaa !3
  %tobool465 = icmp eq i32 %150, 0
  br i1 %tobool465, label %if.end483, label %land.lhs.true466

land.lhs.true466:                                 ; preds = %if.then462
  %gp_cv469 = getelementptr inbounds %struct.gp* %149, i64 0, i32 7
  %151 = load %struct.cv** %gp_cv469, align 8, !tbaa !0
  %152 = bitcast %struct.sv* %102 to %struct.cv*
  %cmp470 = icmp eq %struct.cv* %151, %152
  br i1 %cmp470, label %if.end483, label %if.then472

if.then472:                                       ; preds = %land.lhs.true466
  %153 = bitcast %struct.cv* %151 to %struct.sv*
  tail call void @Perl_sv_free(%struct.sv* %153) #7
  %154 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp477 = getelementptr inbounds i8* %154, i64 56
  %155 = bitcast i8* %xgv_gp477 to %struct.gp**
  %156 = load %struct.gp** %155, align 8, !tbaa !0
  %gp_cv478 = getelementptr inbounds %struct.gp* %156, i64 0, i32 7
  store %struct.cv* null, %struct.cv** %gp_cv478, align 8, !tbaa !0
  %157 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp480 = getelementptr inbounds i8* %157, i64 56
  %158 = bitcast i8* %xgv_gp480 to %struct.gp**
  %159 = load %struct.gp** %158, align 8, !tbaa !0
  %gp_cvgen481 = getelementptr inbounds %struct.gp* %159, i64 0, i32 8
  store i32 0, i32* %gp_cvgen481, align 4, !tbaa !3
  %160 = load i32* @PL_sub_generation, align 4, !tbaa !3
  %inc482 = add i32 %160, 1
  store i32 %inc482, i32* @PL_sub_generation, align 4, !tbaa !3
  br label %if.end483

if.end483:                                        ; preds = %land.lhs.true466, %if.then462, %if.then472
  %161 = phi %struct.gp* [ %149, %land.lhs.true466 ], [ %149, %if.then462 ], [ %159, %if.then472 ]
  %gp_cv486 = getelementptr inbounds %struct.gp* %161, i64 0, i32 7
  %162 = bitcast %struct.cv** %gp_cv486 to %struct.sv**
  tail call void @Perl_save_generic_svref(%struct.sv** %162) #8
  %.pre1544 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp493.phi.trans.insert = getelementptr inbounds i8* %.pre1544, i64 56
  %.phi.trans.insert1545 = bitcast i8* %xgv_gp493.phi.trans.insert to %struct.gp**
  %.pre1546 = load %struct.gp** %.phi.trans.insert1545, align 8, !tbaa !0
  %gp_cv494.phi.trans.insert = getelementptr inbounds %struct.gp* %.pre1546, i64 0, i32 7
  %.pre1547 = load %struct.cv** %gp_cv494.phi.trans.insert, align 8, !tbaa !0
  br label %if.end491

if.else487:                                       ; preds = %sw.bb460
  %gp_cv490 = getelementptr inbounds %struct.gp* %149, i64 0, i32 7
  %163 = load %struct.cv** %gp_cv490, align 8, !tbaa !0
  %164 = bitcast %struct.cv* %163 to %struct.sv*
  br label %if.end491

if.end491:                                        ; preds = %if.else487, %if.end483
  %.in = phi i8* [ %.pre1544, %if.end483 ], [ %147, %if.else487 ]
  %165 = phi %struct.cv* [ %.pre1547, %if.end483 ], [ %163, %if.else487 ]
  %166 = phi i8* [ %.pre1544, %if.end483 ], [ %147, %if.else487 ]
  %dref.2 = phi %struct.sv* [ null, %if.end483 ], [ %164, %if.else487 ]
  %167 = bitcast %struct.sv* %102 to %struct.cv*
  %cmp495 = icmp eq %struct.cv* %165, %167
  br i1 %cmp495, label %if.end627, label %if.then497

if.then497:                                       ; preds = %if.end491
  %tobool501 = icmp eq %struct.cv* %165, null
  br i1 %tobool501, label %if.end614, label %if.then502

if.then502:                                       ; preds = %if.then497
  %168 = bitcast %struct.sv* %dstr to %struct.gv*
  %sv_any503 = bitcast %struct.sv* %dstr to %struct.xpvgv**
  %xgv_gp504 = getelementptr inbounds i8* %.in, i64 56
  %169 = bitcast i8* %xgv_gp504 to %struct.gp**
  %170 = load %struct.gp** %169, align 8, !tbaa !0
  %gp_cvgen505 = getelementptr inbounds %struct.gp* %170, i64 0, i32 8
  %171 = load i32* %gp_cvgen505, align 4, !tbaa !3
  %tobool506 = icmp eq i32 %171, 0
  br i1 %tobool506, label %land.lhs.true507, label %if.end601

land.lhs.true507:                                 ; preds = %if.then502
  %sv_any508 = getelementptr inbounds %struct.cv* %165, i64 0, i32 0
  %172 = load %struct.xpvcv** %sv_any508, align 8, !tbaa !0
  %xcv_root = getelementptr inbounds %struct.xpvcv* %172, i64 0, i32 9
  %173 = load %struct.op** %xcv_root, align 8, !tbaa !0
  %tobool509 = icmp eq %struct.op* %173, null
  br i1 %tobool509, label %lor.lhs.false, label %if.then512

lor.lhs.false:                                    ; preds = %land.lhs.true507
  %xcv_xsub = getelementptr inbounds %struct.xpvcv* %172, i64 0, i32 10
  %174 = load void (%struct.cv*)** %xcv_xsub, align 8, !tbaa !0
  %tobool511 = icmp eq void (%struct.cv*)* %174, null
  br i1 %tobool511, label %if.end601, label %if.then512

if.then512:                                       ; preds = %lor.lhs.false, %land.lhs.true507
  %175 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_type513 = getelementptr inbounds %struct.stackinfo* %175, i64 0, i32 4
  %176 = load i32* %si_type513, align 4, !tbaa !3
  %cmp514 = icmp eq i32 %176, 3
  br i1 %cmp514, label %land.lhs.true516, label %if.end535

land.lhs.true516:                                 ; preds = %if.then512
  %177 = load %struct.op** @PL_sortcop, align 8, !tbaa !0
  %xcv_start518 = getelementptr inbounds %struct.xpvcv* %172, i64 0, i32 8
  %178 = load %struct.op** %xcv_start518, align 8, !tbaa !0
  %cmp519 = icmp eq %struct.op* %177, %178
  br i1 %cmp519, label %if.then521, label %if.end535

if.then521:                                       ; preds = %land.lhs.true516
  %xgv_gp523 = getelementptr inbounds i8* %.in, i64 56
  %179 = bitcast i8* %xgv_gp523 to %struct.gp**
  %180 = load %struct.gp** %179, align 8, !tbaa !0
  %gp_egv524 = getelementptr inbounds %struct.gp* %180, i64 0, i32 6
  %181 = load %struct.gv** %gp_egv524, align 8, !tbaa !0
  %tobool525 = icmp eq %struct.gv* %181, null
  %. = select i1 %tobool525, %struct.gv* %168, %struct.gv* %181
  %sv_any533 = getelementptr inbounds %struct.gv* %., i64 0, i32 0
  %182 = load %struct.xpvgv** %sv_any533, align 8, !tbaa !0
  %xgv_name534 = getelementptr inbounds %struct.xpvgv* %182, i64 0, i32 8
  %183 = load i8** %xgv_name534, align 8, !tbaa !0
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([41 x i8]* @.str31, i64 0, i64 0), i8* %183) #8
  br label %if.end535

if.end535:                                        ; preds = %if.then521, %land.lhs.true516, %if.then512
  %184 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %184, i64 0, i32 14
  %185 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp536 = icmp eq %struct.sv* %185, null
  br i1 %cmp536, label %lor.lhs.false553, label %land.lhs.true538

land.lhs.true538:                                 ; preds = %if.end535
  %186 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings539 = getelementptr inbounds %struct.cop* %186, i64 0, i32 14
  %187 = load %struct.sv** %cop_warnings539, align 8, !tbaa !0
  %cmp540 = icmp eq %struct.sv* %187, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp540, label %lor.lhs.false553, label %land.lhs.true542

land.lhs.true542:                                 ; preds = %land.lhs.true538
  %188 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings543 = getelementptr inbounds %struct.cop* %188, i64 0, i32 14
  %189 = load %struct.sv** %cop_warnings543, align 8, !tbaa !0
  %cmp544 = icmp eq %struct.sv* %189, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp544, label %if.then577, label %lor.lhs.false546

lor.lhs.false546:                                 ; preds = %land.lhs.true542
  %190 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings547 = getelementptr inbounds %struct.cop* %190, i64 0, i32 14
  %191 = load %struct.sv** %cop_warnings547, align 8, !tbaa !0
  %sv_any548 = getelementptr inbounds %struct.sv* %191, i64 0, i32 0
  %192 = load i8** %sv_any548, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %192 to i8**
  %193 = load i8** %xpv_pv, align 8, !tbaa !0
  %arrayidx549 = getelementptr inbounds i8* %193, i64 4
  %194 = load i8* %arrayidx549, align 1, !tbaa !1
  %and551 = and i8 %194, 64
  %tobool552 = icmp eq i8 %and551, 0
  br i1 %tobool552, label %lor.lhs.false553, label %if.then577

lor.lhs.false553:                                 ; preds = %lor.lhs.false546, %land.lhs.true538, %if.end535
  %195 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings554 = getelementptr inbounds %struct.cop* %195, i64 0, i32 14
  %196 = load %struct.sv** %cop_warnings554, align 8, !tbaa !0
  %cmp555 = icmp eq %struct.sv* %196, null
  br i1 %cmp555, label %land.lhs.true557, label %lor.lhs.false561

land.lhs.true557:                                 ; preds = %lor.lhs.false553
  %197 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and559 = and i8 %197, 1
  %tobool560 = icmp eq i8 %and559, 0
  br i1 %tobool560, label %lor.lhs.false561, label %if.then577

lor.lhs.false561:                                 ; preds = %land.lhs.true557, %lor.lhs.false553
  %198 = load %struct.xpvcv** %sv_any508, align 8, !tbaa !0
  %xcv_flags = getelementptr inbounds %struct.xpvcv* %198, i64 0, i32 17
  %199 = load i16* %xcv_flags, align 2, !tbaa !4
  %and564 = and i16 %199, 512
  %tobool565 = icmp eq i16 %and564, 0
  br i1 %tobool565, label %if.end601, label %land.lhs.true566

land.lhs.true566:                                 ; preds = %lor.lhs.false561
  %sv_any567 = bitcast %struct.sv* %102 to %struct.xpvcv**
  %200 = load %struct.xpvcv** %sv_any567, align 8, !tbaa !0
  %xcv_flags568 = getelementptr inbounds %struct.xpvcv* %200, i64 0, i32 17
  %201 = load i16* %xcv_flags568, align 2, !tbaa !4
  %and570 = and i16 %201, 512
  %tobool571 = icmp eq i16 %and570, 0
  br i1 %tobool571, label %if.then577, label %lor.lhs.false572

lor.lhs.false572:                                 ; preds = %land.lhs.true566
  %call573 = tail call %struct.sv* @Perl_cv_const_sv(%struct.cv* %165) #8
  %call574 = tail call %struct.sv* @Perl_cv_const_sv(%struct.cv* %167) #8
  %call575 = tail call i32 @Perl_sv_cmp(%struct.sv* %call573, %struct.sv* %call574) #7
  %tobool576 = icmp eq i32 %call575, 0
  br i1 %tobool576, label %if.end601, label %if.then577

if.then577:                                       ; preds = %lor.lhs.false572, %land.lhs.true557, %lor.lhs.false546, %land.lhs.true542, %land.lhs.true566
  %202 = load %struct.xpvcv** %sv_any508, align 8, !tbaa !0
  %xcv_flags579 = getelementptr inbounds %struct.xpvcv* %202, i64 0, i32 17
  %203 = load i16* %xcv_flags579, align 2, !tbaa !4
  %and581 = and i16 %203, 512
  %tobool582 = icmp ne i16 %and581, 0
  %cond583 = select i1 %tobool582, i8* getelementptr inbounds ([37 x i8]* @.str32, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8]* @.str33, i64 0, i64 0)
  %204 = load %struct.xpvgv** %sv_any503, align 8, !tbaa !0
  %xgv_stash585 = getelementptr inbounds %struct.xpvgv* %204, i64 0, i32 10
  %205 = load %struct.hv** %xgv_stash585, align 8, !tbaa !0
  %sv_any586 = getelementptr inbounds %struct.hv* %205, i64 0, i32 0
  %206 = load %struct.xpvhv** %sv_any586, align 8, !tbaa !0
  %xhv_name = getelementptr inbounds %struct.xpvhv* %206, i64 0, i32 10
  %207 = load i8** %xhv_name, align 8, !tbaa !0
  %xgv_gp588 = getelementptr inbounds %struct.xpvgv* %204, i64 0, i32 7
  %208 = load %struct.gp** %xgv_gp588, align 8, !tbaa !0
  %gp_egv589 = getelementptr inbounds %struct.gp* %208, i64 0, i32 6
  %209 = load %struct.gv** %gp_egv589, align 8, !tbaa !0
  %tobool590 = icmp eq %struct.gv* %209, null
  %.1519 = select i1 %tobool590, %struct.gv* %168, %struct.gv* %209
  %sv_any598 = getelementptr inbounds %struct.gv* %.1519, i64 0, i32 0
  %210 = load %struct.xpvgv** %sv_any598, align 8, !tbaa !0
  %xgv_name599 = getelementptr inbounds %struct.xpvgv* %210, i64 0, i32 8
  %211 = load i8** %xgv_name599, align 8, !tbaa !0
  tail call void (i32, i8*, ...)* @Perl_warner(i32 19, i8* %cond583, i8* %207, i8* %211) #8
  br label %if.end601

if.end601:                                        ; preds = %lor.lhs.false572, %lor.lhs.false561, %lor.lhs.false, %if.then502, %if.then577
  br i1 %tobool379, label %if.end614, label %if.then603

if.then603:                                       ; preds = %if.end601
  %212 = load i32* %sv_flags396, align 4, !tbaa !3
  %and605 = and i32 %212, 262144
  %tobool606 = icmp eq i32 %and605, 0
  br i1 %tobool606, label %cond.end611, label %cond.true607

cond.true607:                                     ; preds = %if.then603
  %sv_any608 = getelementptr inbounds %struct.sv* %102, i64 0, i32 0
  %213 = load i8** %sv_any608, align 8, !tbaa !0
  %xpv_pv609 = bitcast i8* %213 to i8**
  %214 = load i8** %xpv_pv609, align 8, !tbaa !0
  br label %cond.end611

cond.end611:                                      ; preds = %if.then603, %cond.true607
  %cond612 = phi i8* [ %214, %cond.true607 ], [ null, %if.then603 ]
  tail call void @Perl_cv_ckproto(%struct.cv* %165, %struct.gv* %168, i8* %cond612) #8
  br label %if.end614

if.end614:                                        ; preds = %if.end601, %if.then497, %cond.end611
  %215 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp616 = getelementptr inbounds i8* %215, i64 56
  %216 = bitcast i8* %xgv_gp616 to %struct.gp**
  %217 = load %struct.gp** %216, align 8, !tbaa !0
  %gp_cv617 = getelementptr inbounds %struct.gp* %217, i64 0, i32 7
  store %struct.cv* %167, %struct.cv** %gp_cv617, align 8, !tbaa !0
  %218 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp619 = getelementptr inbounds i8* %218, i64 56
  %219 = bitcast i8* %xgv_gp619 to %struct.gp**
  %220 = load %struct.gp** %219, align 8, !tbaa !0
  %gp_cvgen620 = getelementptr inbounds %struct.gp* %220, i64 0, i32 8
  store i32 0, i32* %gp_cvgen620, align 4, !tbaa !3
  %221 = getelementptr inbounds i8* %218, i64 88
  %222 = load i8* %221, align 1, !tbaa !1
  %or624 = or i8 %222, 4
  store i8 %or624, i8* %221, align 1, !tbaa !1
  %223 = load i32* @PL_sub_generation, align 4, !tbaa !3
  %inc626 = add i32 %223, 1
  store i32 %inc626, i32* @PL_sub_generation, align 4, !tbaa !3
  %.pre1548 = load i8** %sv_any375, align 8, !tbaa !0
  br label %if.end627

if.end627:                                        ; preds = %if.end491, %if.end614
  %224 = phi i8* [ %166, %if.end491 ], [ %.pre1548, %if.end614 ]
  %225 = getelementptr inbounds i8* %224, i64 88
  %226 = load i8* %225, align 1, !tbaa !1
  %tobool632 = icmp sgt i8 %226, -1
  br i1 %tobool632, label %land.lhs.true633, label %sw.epilog703

land.lhs.true633:                                 ; preds = %if.end627
  %227 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_stash634 = getelementptr inbounds %struct.cop* %227, i64 0, i32 9
  %228 = load %struct.hv** %cop_stash634, align 8, !tbaa !0
  %xgv_stash636 = getelementptr inbounds i8* %224, i64 80
  %229 = bitcast i8* %xgv_stash636 to %struct.hv**
  %230 = load %struct.hv** %229, align 8, !tbaa !0
  %cmp637 = icmp eq %struct.hv* %228, %230
  br i1 %cmp637, label %sw.epilog703, label %if.then639

if.then639:                                       ; preds = %land.lhs.true633
  %or643 = or i8 %226, -128
  store i8 %or643, i8* %225, align 1, !tbaa !1
  br label %sw.epilog703

sw.bb646:                                         ; preds = %if.end390
  %231 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp650 = getelementptr inbounds i8* %231, i64 56
  %232 = bitcast i8* %xgv_gp650 to %struct.gp**
  %233 = load %struct.gp** %232, align 8, !tbaa !0
  %gp_io = getelementptr inbounds %struct.gp* %233, i64 0, i32 2
  br i1 %tobool379, label %if.then648, label %if.else651

if.then648:                                       ; preds = %sw.bb646
  %234 = bitcast %struct.io** %gp_io to %struct.sv**
  tail call void @Perl_save_generic_svref(%struct.sv** %234) #8
  %.pre1549 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp657.phi.trans.insert = getelementptr inbounds i8* %.pre1549, i64 56
  %.phi.trans.insert1550 = bitcast i8* %xgv_gp657.phi.trans.insert to %struct.gp**
  %.pre1551 = load %struct.gp** %.phi.trans.insert1550, align 8, !tbaa !0
  br label %if.end655

if.else651:                                       ; preds = %sw.bb646
  %235 = load %struct.io** %gp_io, align 8, !tbaa !0
  %236 = bitcast %struct.io* %235 to %struct.sv*
  br label %if.end655

if.end655:                                        ; preds = %if.else651, %if.then648
  %237 = phi %struct.gp* [ %.pre1551, %if.then648 ], [ %233, %if.else651 ]
  %dref.3 = phi %struct.sv* [ null, %if.then648 ], [ %236, %if.else651 ]
  %238 = bitcast %struct.sv* %102 to %struct.io*
  %gp_io658 = getelementptr inbounds %struct.gp* %237, i64 0, i32 2
  store %struct.io* %238, %struct.io** %gp_io658, align 8, !tbaa !0
  br label %sw.epilog703

sw.bb659:                                         ; preds = %if.end390
  %239 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp663 = getelementptr inbounds i8* %239, i64 56
  %240 = bitcast i8* %xgv_gp663 to %struct.gp**
  %241 = load %struct.gp** %240, align 8, !tbaa !0
  %gp_form = getelementptr inbounds %struct.gp* %241, i64 0, i32 3
  br i1 %tobool379, label %if.then661, label %if.else664

if.then661:                                       ; preds = %sw.bb659
  %242 = bitcast %struct.cv** %gp_form to %struct.sv**
  tail call void @Perl_save_generic_svref(%struct.sv** %242) #8
  %.pre1552 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp670.phi.trans.insert = getelementptr inbounds i8* %.pre1552, i64 56
  %.phi.trans.insert1553 = bitcast i8* %xgv_gp670.phi.trans.insert to %struct.gp**
  %.pre1554 = load %struct.gp** %.phi.trans.insert1553, align 8, !tbaa !0
  br label %if.end668

if.else664:                                       ; preds = %sw.bb659
  %243 = load %struct.cv** %gp_form, align 8, !tbaa !0
  %244 = bitcast %struct.cv* %243 to %struct.sv*
  br label %if.end668

if.end668:                                        ; preds = %if.else664, %if.then661
  %245 = phi %struct.gp* [ %.pre1554, %if.then661 ], [ %241, %if.else664 ]
  %dref.4 = phi %struct.sv* [ null, %if.then661 ], [ %244, %if.else664 ]
  %246 = bitcast %struct.sv* %102 to %struct.cv*
  %gp_form671 = getelementptr inbounds %struct.gp* %245, i64 0, i32 3
  store %struct.cv* %246, %struct.cv** %gp_form671, align 8, !tbaa !0
  br label %sw.epilog703

sw.default672:                                    ; preds = %if.end390
  %247 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp676 = getelementptr inbounds i8* %247, i64 56
  %248 = bitcast i8* %xgv_gp676 to %struct.gp**
  %249 = load %struct.gp** %248, align 8, !tbaa !0
  %gp_sv = getelementptr inbounds %struct.gp* %249, i64 0, i32 0
  br i1 %tobool379, label %if.then674, label %if.else677

if.then674:                                       ; preds = %sw.default672
  tail call void @Perl_save_generic_svref(%struct.sv** %gp_sv) #8
  %.pre1535 = load i8** %sv_any375, align 8, !tbaa !0
  %xgv_gp683.phi.trans.insert = getelementptr inbounds i8* %.pre1535, i64 56
  %.phi.trans.insert1536 = bitcast i8* %xgv_gp683.phi.trans.insert to %struct.gp**
  %.pre1537 = load %struct.gp** %.phi.trans.insert1536, align 8, !tbaa !0
  br label %if.end681

if.else677:                                       ; preds = %sw.default672
  %250 = load %struct.sv** %gp_sv, align 8, !tbaa !0
  br label %if.end681

if.end681:                                        ; preds = %if.else677, %if.then674
  %251 = phi %struct.gp* [ %.pre1537, %if.then674 ], [ %249, %if.else677 ]
  %dref.5 = phi %struct.sv* [ null, %if.then674 ], [ %250, %if.else677 ]
  %gp_sv684 = getelementptr inbounds %struct.gp* %251, i64 0, i32 0
  store %struct.sv* %102, %struct.sv** %gp_sv684, align 8, !tbaa !0
  %252 = load i8** %sv_any375, align 8, !tbaa !0
  %253 = getelementptr inbounds i8* %252, i64 88
  %254 = load i8* %253, align 1, !tbaa !1
  %and688 = and i8 %254, 16
  %tobool689 = icmp eq i8 %and688, 0
  br i1 %tobool689, label %land.lhs.true690, label %sw.epilog703

land.lhs.true690:                                 ; preds = %if.end681
  %255 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_stash691 = getelementptr inbounds %struct.cop* %255, i64 0, i32 9
  %256 = load %struct.hv** %cop_stash691, align 8, !tbaa !0
  %xgv_stash693 = getelementptr inbounds i8* %252, i64 80
  %257 = bitcast i8* %xgv_stash693 to %struct.hv**
  %258 = load %struct.hv** %257, align 8, !tbaa !0
  %cmp694 = icmp eq %struct.hv* %256, %258
  br i1 %cmp694, label %sw.epilog703, label %if.then696

if.then696:                                       ; preds = %land.lhs.true690
  %or700 = or i8 %254, 16
  store i8 %or700, i8* %253, align 1, !tbaa !1
  br label %sw.epilog703

sw.epilog703:                                     ; preds = %if.end681, %if.end407, %if.end438, %if.end627, %land.lhs.true690, %if.then696, %land.lhs.true633, %if.then639, %land.lhs.true447, %if.then453, %land.lhs.true416, %if.then422, %if.end668, %if.end655
  %dref.6 = phi %struct.sv* [ %dref.5, %if.end681 ], [ %dref.5, %land.lhs.true690 ], [ %dref.5, %if.then696 ], [ %dref.4, %if.end668 ], [ %dref.3, %if.end655 ], [ %dref.2, %if.end627 ], [ %dref.2, %land.lhs.true633 ], [ %dref.2, %if.then639 ], [ %dref.1, %if.end438 ], [ %dref.1, %land.lhs.true447 ], [ %dref.1, %if.then453 ], [ %dref.0, %if.end407 ], [ %dref.0, %land.lhs.true416 ], [ %dref.0, %if.then422 ]
  %tobool704 = icmp eq %struct.sv* %dref.6, null
  br i1 %tobool704, label %if.end706, label %if.then705

if.then705:                                       ; preds = %sw.epilog703
  tail call void @Perl_sv_free(%struct.sv* %dref.6) #7
  br label %if.end706

if.end706:                                        ; preds = %sw.epilog703, %if.then705
  %259 = load i32* %sv_flags6, align 4, !tbaa !3
  %and708 = and i32 %259, 57344
  %tobool709 = icmp eq i32 %and708, 0
  br i1 %tobool709, label %if.end1180, label %land.lhs.true710

land.lhs.true710:                                 ; preds = %if.end706
  %call711 = tail call signext i8 @Perl_sv_tainted(%struct.sv* %PL_sv_undef.sstr) #7
  %tobool713 = icmp ne i8 %call711, 0
  %260 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool715 = icmp ne i8 %260, 0
  %or.cond1189 = and i1 %tobool713, %tobool715
  %261 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool717 = icmp ne i8 %261, 0
  %or.cond1190 = and i1 %or.cond1189, %tobool717
  br i1 %or.cond1190, label %if.then720, label %if.end1180

if.then720:                                       ; preds = %land.lhs.true710
  tail call void @Perl_sv_magic(%struct.sv* %dstr, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end1180

if.end725:                                        ; preds = %if.then362
  %sv_any726 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %262 = load i8** %sv_any726, align 8, !tbaa !0
  %xpv_pv727 = bitcast i8* %262 to i8**
  %263 = load i8** %xpv_pv727, align 8, !tbaa !0
  %tobool728 = icmp eq i8* %263, null
  br i1 %tobool728, label %if.end748, label %if.then729

if.then729:                                       ; preds = %if.end725
  %264 = load i32* %sv_flags, align 4, !tbaa !3
  %and731 = and i32 %264, 2097152
  %tobool732 = icmp eq i32 %and731, 0
  br i1 %tobool732, label %land.end736, label %land.rhs733

land.rhs733:                                      ; preds = %if.then729
  %call734 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1555 = load i8** %sv_any726, align 8, !tbaa !0
  br label %land.end736

land.end736:                                      ; preds = %if.then729, %land.rhs733
  %265 = phi i8* [ %262, %if.then729 ], [ %.pre1555, %land.rhs733 ]
  %xpv_len = getelementptr inbounds i8* %265, i64 16
  %266 = bitcast i8* %xpv_len to i64*
  %267 = load i64* %266, align 8, !tbaa !5
  %tobool739 = icmp eq i64 %267, 0
  br i1 %tobool739, label %if.end743, label %if.then740

if.then740:                                       ; preds = %land.end736
  %xpv_pv742 = bitcast i8* %265 to i8**
  %268 = load i8** %xpv_pv742, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %268) #8
  %.pre1556 = load i8** %sv_any726, align 8, !tbaa !0
  br label %if.end743

if.end743:                                        ; preds = %land.end736, %if.then740
  %269 = phi i8* [ %265, %land.end736 ], [ %.pre1556, %if.then740 ]
  %xpv_cur = getelementptr inbounds i8* %269, i64 8
  call void @llvm.memset.p0i8.i64(i8* %xpv_cur, i8 0, i64 16, i32 8, i1 false)
  br label %if.end748

if.end748:                                        ; preds = %if.end725, %if.then359, %if.end743
  %270 = load i32* %sv_flags, align 4, !tbaa !3
  %and750 = and i32 %270, 1223753727
  store i32 %and750, i32* %sv_flags, align 4, !tbaa !3
  %and752 = and i32 %270, 2097152
  %tobool753 = icmp eq i32 %and752, 0
  br i1 %tobool753, label %land.end757, label %land.rhs754

land.rhs754:                                      ; preds = %if.end748
  %call755 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  br label %land.end757

land.end757:                                      ; preds = %if.end748, %land.rhs754
  %sv_any759 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %271 = load i8** %sv_any759, align 8, !tbaa !0
  %xrv_rv760 = bitcast i8* %271 to %struct.sv**
  %272 = load %struct.sv** %xrv_rv760, align 8, !tbaa !0
  store %struct.sv* %272, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %tobool761 = icmp eq %struct.sv* %272, null
  br i1 %tobool761, label %land.end766, label %land.rhs762

land.rhs762:                                      ; preds = %land.end757
  %sv_refcnt763 = getelementptr inbounds %struct.sv* %272, i64 0, i32 1
  %273 = load i32* %sv_refcnt763, align 4, !tbaa !3
  %inc764 = add i32 %273, 1
  store i32 %inc764, i32* %sv_refcnt763, align 4, !tbaa !3
  br label %land.end766

land.end766:                                      ; preds = %land.end757, %land.rhs762
  %sv_any768 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %274 = load i8** %sv_any768, align 8, !tbaa !0
  %xrv_rv769 = bitcast i8* %274 to %struct.sv**
  store %struct.sv* %272, %struct.sv** %xrv_rv769, align 8, !tbaa !0
  %275 = load i32* %sv_flags, align 4, !tbaa !3
  %or771 = or i32 %275, 524288
  store i32 %or771, i32* %sv_flags, align 4, !tbaa !3
  %and772 = and i32 %100, 33554432
  %tobool773 = icmp eq i32 %and772, 0
  br i1 %tobool773, label %if.end787, label %if.then774

if.then774:                                       ; preds = %land.end766
  %and777 = and i32 %100, 131072
  %276 = or i32 %and777, %275
  %or776.or781 = or i32 %276, 34078720
  store i32 %or776.or781, i32* %sv_flags, align 4, !tbaa !3
  %277 = load i8** %sv_any759, align 8, !tbaa !0
  %xnv_nv784 = getelementptr inbounds i8* %277, i64 32
  %278 = bitcast i8* %xnv_nv784 to double*
  %279 = load double* %278, align 8, !tbaa !6
  %280 = load i8** %sv_any768, align 8, !tbaa !0
  %xnv_nv786 = getelementptr inbounds i8* %280, i64 32
  %281 = bitcast i8* %xnv_nv786 to double*
  store double %279, double* %281, align 8, !tbaa !6
  br label %if.end787

if.end787:                                        ; preds = %land.end766, %if.then774
  %282 = phi i32 [ %or771, %land.end766 ], [ %or776.or781, %if.then774 ]
  %and788 = and i32 %100, 16777216
  %tobool789 = icmp eq i32 %and788, 0
  br i1 %tobool789, label %if.end817, label %if.then790

if.then790:                                       ; preds = %if.end787
  %and792 = and i32 %282, 2097152
  %tobool793 = icmp eq i32 %and792, 0
  br i1 %tobool793, label %land.end797, label %land.rhs794

land.rhs794:                                      ; preds = %if.then790
  %call795 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1557 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end797

land.end797:                                      ; preds = %if.then790, %land.rhs794
  %283 = phi i32 [ %.pre1557, %land.rhs794 ], [ %282, %if.then790 ]
  %and801 = and i32 %100, 65536
  %284 = or i32 %and801, %283
  %285 = and i32 %100, -2147483648
  %286 = or i32 %285, 16777216
  %or811.or800.or805 = or i32 %284, %286
  store i32 %or811.or800.or805, i32* %sv_flags, align 4, !tbaa !3
  %287 = load i8** %sv_any759, align 8, !tbaa !0
  %xiv_iv814 = getelementptr inbounds i8* %287, i64 24
  %288 = bitcast i8* %xiv_iv814 to i64*
  %289 = load i64* %288, align 8, !tbaa !5
  %290 = load i8** %sv_any768, align 8, !tbaa !0
  %xiv_iv816 = getelementptr inbounds i8* %290, i64 24
  %291 = bitcast i8* %xiv_iv816 to i64*
  store i64 %289, i64* %291, align 8, !tbaa !5
  br label %if.end817

if.end817:                                        ; preds = %if.end787, %land.end797
  %292 = phi i32 [ %282, %if.end787 ], [ %or811.or800.or805, %land.end797 ]
  %293 = load i32* %sv_flags6, align 4, !tbaa !3
  %and819 = and i32 %293, 268435456
  %tobool820 = icmp eq i32 %and819, 0
  br i1 %tobool820, label %if.end1162, label %if.then821

if.then821:                                       ; preds = %if.end817
  %or823 = or i32 %292, 268435456
  store i32 %or823, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end1162

if.else825:                                       ; preds = %sw.epilog355
  %and826 = and i32 %100, 67108864
  %tobool827 = icmp eq i32 %and826, 0
  br i1 %tobool827, label %if.else1009, label %if.then828

if.then828:                                       ; preds = %if.else825
  %and830 = and i32 %100, 2048
  %tobool831 = icmp eq i32 %and830, 0
  br i1 %tobool831, label %if.else914, label %land.lhs.true832

land.lhs.true832:                                 ; preds = %if.then828
  %sv_refcnt833 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 1
  %294 = load i32* %sv_refcnt833, align 4, !tbaa !3
  %cmp834 = icmp eq i32 %294, 1
  br i1 %cmp834, label %land.lhs.true836, label %if.else914

land.lhs.true836:                                 ; preds = %land.lhs.true832
  %and837 = and i32 %flags, 16
  %tobool838 = icmp eq i32 %and837, 0
  br i1 %tobool838, label %land.lhs.true839, label %if.else914

land.lhs.true839:                                 ; preds = %land.lhs.true836
  %and840 = and i32 %100, 2097152
  %tobool841 = icmp eq i32 %and840, 0
  br i1 %tobool841, label %land.lhs.true842, label %if.else914

land.lhs.true842:                                 ; preds = %land.lhs.true839
  %sv_any843 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %295 = load i8** %sv_any843, align 8, !tbaa !0
  %xpv_len844 = getelementptr inbounds i8* %295, i64 16
  %296 = bitcast i8* %xpv_len844 to i64*
  %297 = load i64* %296, align 8, !tbaa !5
  %tobool845 = icmp eq i64 %297, 0
  br i1 %tobool845, label %if.else914, label %land.lhs.true846

land.lhs.true846:                                 ; preds = %land.lhs.true842
  %298 = load %struct.op** @PL_op, align 8, !tbaa !0
  %tobool847 = icmp eq %struct.op* %298, null
  br i1 %tobool847, label %if.then853, label %land.lhs.true848

land.lhs.true848:                                 ; preds = %land.lhs.true846
  %op_type849 = getelementptr inbounds %struct.op* %298, i64 0, i32 4
  %299 = load i16* %op_type849, align 2, !tbaa !4
  %cmp851 = icmp eq i16 %299, 37
  br i1 %cmp851, label %if.else914, label %if.then853

if.then853:                                       ; preds = %land.lhs.true846, %land.lhs.true848
  %sv_any854 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %300 = load i8** %sv_any854, align 8, !tbaa !0
  %xpv_pv855 = bitcast i8* %300 to i8**
  %301 = load i8** %xpv_pv855, align 8, !tbaa !0
  %tobool856 = icmp eq i8* %301, null
  br i1 %tobool856, label %if.end877, label %if.then857

if.then857:                                       ; preds = %if.then853
  %302 = load i32* %sv_flags, align 4, !tbaa !3
  %and859 = and i32 %302, 2097152
  %tobool860 = icmp eq i32 %and859, 0
  br i1 %tobool860, label %if.else868, label %if.then861

if.then861:                                       ; preds = %if.then857
  %and863 = and i32 %302, -2097153
  store i32 %and863, i32* %sv_flags, align 4, !tbaa !3
  %xiv_iv867 = getelementptr inbounds i8* %300, i64 24
  %303 = bitcast i8* %xiv_iv867 to i64*
  %304 = load i64* %303, align 8, !tbaa !5
  %idx.neg = sub i64 0, %304
  %add.ptr = getelementptr inbounds i8* %301, i64 %idx.neg
  tail call void @Perl_safesysfree(i8* %add.ptr) #8
  br label %if.end877

if.else868:                                       ; preds = %if.then857
  %xpv_len870 = getelementptr inbounds i8* %300, i64 16
  %305 = bitcast i8* %xpv_len870 to i64*
  %306 = load i64* %305, align 8, !tbaa !5
  %tobool871 = icmp eq i64 %306, 0
  br i1 %tobool871, label %if.end877, label %if.then872

if.then872:                                       ; preds = %if.else868
  tail call void @Perl_safesysfree(i8* %301) #8
  br label %if.end877

if.end877:                                        ; preds = %if.then853, %if.else868, %if.then861, %if.then872
  %307 = load i32* %sv_flags, align 4, !tbaa !3
  %308 = load i8** %sv_any843, align 8, !tbaa !0
  %xpv_pv883 = bitcast i8* %308 to i8**
  %309 = load i8** %xpv_pv883, align 8, !tbaa !0
  %310 = load i8** %sv_any854, align 8, !tbaa !0
  %xpv_pv885 = bitcast i8* %310 to i8**
  store i8* %309, i8** %xpv_pv885, align 8, !tbaa !0
  %311 = load i8** %sv_any843, align 8, !tbaa !0
  %xpv_len887 = getelementptr inbounds i8* %311, i64 16
  %312 = bitcast i8* %xpv_len887 to i64*
  %313 = load i64* %312, align 8, !tbaa !5
  %314 = load i8** %sv_any854, align 8, !tbaa !0
  %xpv_len889 = getelementptr inbounds i8* %314, i64 16
  %315 = bitcast i8* %xpv_len889 to i64*
  store i64 %313, i64* %315, align 8, !tbaa !5
  %xpv_cur891 = getelementptr inbounds i8* %311, i64 8
  %316 = bitcast i8* %xpv_cur891 to i64*
  %317 = load i64* %316, align 8, !tbaa !5
  %xpv_cur893 = getelementptr inbounds i8* %314, i64 8
  %318 = bitcast i8* %xpv_cur893 to i64*
  store i64 %317, i64* %318, align 8, !tbaa !5
  %or881 = and i32 %307, 1223751679
  %and895 = or i32 %or881, 67371008
  store i32 %and895, i32* %sv_flags, align 4, !tbaa !3
  %319 = load i32* %sv_flags6, align 4, !tbaa !3
  %and897 = and i32 %319, 1223753727
  store i32 %and897, i32* %sv_flags6, align 4, !tbaa !3
  %and899 = and i32 %319, 2097152
  %tobool900 = icmp eq i32 %and899, 0
  br i1 %tobool900, label %land.end904, label %land.rhs901

land.rhs901:                                      ; preds = %if.end877
  %call902 = tail call i32 @Perl_sv_backoff(%struct.sv* %PL_sv_undef.sstr) #7
  %.pre1531 = load i8** %sv_any843, align 8, !tbaa !0
  %.pre1532 = load i32* %sv_flags6, align 4, !tbaa !3
  br label %land.end904

land.end904:                                      ; preds = %if.end877, %land.rhs901
  %320 = phi i32 [ %and897, %if.end877 ], [ %.pre1532, %land.rhs901 ]
  %321 = phi i8* [ %311, %if.end877 ], [ %.pre1531, %land.rhs901 ]
  %xpv_pv907 = bitcast i8* %321 to i8**
  store i8* null, i8** %xpv_pv907, align 8, !tbaa !0
  %322 = load i8** %sv_any843, align 8, !tbaa !0
  %xpv_cur911 = getelementptr inbounds i8* %322, i64 8
  %and913 = and i32 %320, -2049
  call void @llvm.memset.p0i8.i64(i8* %xpv_cur911, i8 0, i64 16, i32 8, i1 false)
  store i32 %and913, i32* %sv_flags6, align 4, !tbaa !3
  br label %if.end945

if.else914:                                       ; preds = %land.lhs.true839, %land.lhs.true836, %land.lhs.true832, %if.then828, %land.lhs.true842, %land.lhs.true848
  %sv_any916 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %323 = load i8** %sv_any916, align 8, !tbaa !0
  %xpv_cur917 = getelementptr inbounds i8* %323, i64 8
  %324 = bitcast i8* %xpv_cur917 to i64*
  %325 = load i64* %324, align 8, !tbaa !5
  %sv_any918 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %326 = load i8** %sv_any918, align 8, !tbaa !0
  %xpv_len919 = getelementptr inbounds i8* %326, i64 16
  %327 = bitcast i8* %xpv_len919 to i64*
  %328 = load i64* %327, align 8, !tbaa !5
  %add = add i64 %325, 1
  %cmp920 = icmp ult i64 %328, %add
  br i1 %cmp920, label %cond.true922, label %cond.end928

cond.true922:                                     ; preds = %if.else914
  %call924 = tail call i8* @Perl_sv_grow(%struct.sv* %dstr, i64 %add) #7
  %.pre1528 = load i8** %sv_any918, align 8, !tbaa !0
  %.pre1529 = load i8** %sv_any916, align 8, !tbaa !0
  br label %cond.end928

cond.end928:                                      ; preds = %if.else914, %cond.true922
  %329 = phi i8* [ %323, %if.else914 ], [ %.pre1529, %cond.true922 ]
  %330 = phi i8* [ %326, %if.else914 ], [ %.pre1528, %cond.true922 ]
  %xpv_pv931 = bitcast i8* %330 to i8**
  %331 = load i8** %xpv_pv931, align 8, !tbaa !0
  %xpv_pv933 = bitcast i8* %329 to i8**
  %332 = load i8** %xpv_pv933, align 8, !tbaa !0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %331, i8* %332, i64 %325, i32 1, i1 false)
  %333 = load i8** %sv_any918, align 8, !tbaa !0
  %xpv_cur935 = getelementptr inbounds i8* %333, i64 8
  %334 = bitcast i8* %xpv_cur935 to i64*
  store i64 %325, i64* %334, align 8, !tbaa !5
  %xpv_pv937 = bitcast i8* %333 to i8**
  %335 = load i8** %xpv_pv937, align 8, !tbaa !0
  %add.ptr940 = getelementptr inbounds i8* %335, i64 %325
  store i8 0, i8* %add.ptr940, align 1, !tbaa !1
  %336 = load i32* %sv_flags, align 4, !tbaa !3
  %and942 = and i32 %336, 1223753727
  %or944 = or i32 %and942, 67371008
  store i32 %or944, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end945

if.end945:                                        ; preds = %cond.end928, %land.end904
  %and946 = and i32 %100, 536870912
  %tobool947 = icmp eq i32 %and946, 0
  br i1 %tobool947, label %if.end951, label %if.then948

if.then948:                                       ; preds = %if.end945
  %337 = load i32* %sv_flags, align 4, !tbaa !3
  %or950 = or i32 %337, 536870912
  store i32 %or950, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end951

if.end951:                                        ; preds = %if.end945, %if.then948
  %and952 = and i32 %100, 33554432
  %tobool953 = icmp eq i32 %and952, 0
  br i1 %tobool953, label %if.end967, label %if.then954

if.then954:                                       ; preds = %if.end951
  %338 = load i32* %sv_flags, align 4, !tbaa !3
  %and957 = and i32 %100, 131072
  %339 = or i32 %and957, %338
  %or956.or961 = or i32 %339, 33554432
  store i32 %or956.or961, i32* %sv_flags, align 4, !tbaa !3
  %sv_any963 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %340 = load i8** %sv_any963, align 8, !tbaa !0
  %xnv_nv964 = getelementptr inbounds i8* %340, i64 32
  %341 = bitcast i8* %xnv_nv964 to double*
  %342 = load double* %341, align 8, !tbaa !6
  %sv_any965 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %343 = load i8** %sv_any965, align 8, !tbaa !0
  %xnv_nv966 = getelementptr inbounds i8* %343, i64 32
  %344 = bitcast i8* %xnv_nv966 to double*
  store double %342, double* %344, align 8, !tbaa !6
  br label %if.end967

if.end967:                                        ; preds = %if.end951, %if.then954
  %and968 = and i32 %100, 16777216
  %tobool969 = icmp eq i32 %and968, 0
  br i1 %tobool969, label %if.end997, label %if.then970

if.then970:                                       ; preds = %if.end967
  %345 = load i32* %sv_flags, align 4, !tbaa !3
  %and972 = and i32 %345, 2097152
  %tobool973 = icmp eq i32 %and972, 0
  br i1 %tobool973, label %land.end977, label %land.rhs974

land.rhs974:                                      ; preds = %if.then970
  %call975 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1530 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end977

land.end977:                                      ; preds = %if.then970, %land.rhs974
  %346 = phi i32 [ %.pre1530, %land.rhs974 ], [ %345, %if.then970 ]
  %and981 = and i32 %100, 65536
  %347 = or i32 %and981, %346
  %348 = and i32 %100, -2147483648
  %349 = or i32 %348, 16777216
  %or991.or980.or985 = or i32 %347, %349
  store i32 %or991.or980.or985, i32* %sv_flags, align 4, !tbaa !3
  %sv_any993 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %350 = load i8** %sv_any993, align 8, !tbaa !0
  %xiv_iv994 = getelementptr inbounds i8* %350, i64 24
  %351 = bitcast i8* %xiv_iv994 to i64*
  %352 = load i64* %351, align 8, !tbaa !5
  %sv_any995 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %353 = load i8** %sv_any995, align 8, !tbaa !0
  %xiv_iv996 = getelementptr inbounds i8* %353, i64 24
  %354 = bitcast i8* %xiv_iv996 to i64*
  store i64 %352, i64* %354, align 8, !tbaa !5
  br label %if.end997

if.end997:                                        ; preds = %if.end967, %land.end977
  %355 = load i32* %sv_flags6, align 4, !tbaa !3
  %and999 = and i32 %355, 57344
  %tobool1000 = icmp eq i32 %and999, 0
  br i1 %tobool1000, label %if.end1162, label %land.lhs.true1001

land.lhs.true1001:                                ; preds = %if.end997
  %call1002 = tail call %struct.magic* @Perl_mg_find(%struct.sv* %PL_sv_undef.sstr, i32 86) #8
  %tobool1003 = icmp eq %struct.magic* %call1002, null
  br i1 %tobool1003, label %if.end1162, label %if.then1004

if.then1004:                                      ; preds = %land.lhs.true1001
  %call1005 = tail call %struct.magic* @Perl_mg_find(%struct.sv* %PL_sv_undef.sstr, i32 86) #8
  %mg_ptr = getelementptr inbounds %struct.magic* %call1005, i64 0, i32 6
  %356 = load i8** %mg_ptr, align 8, !tbaa !0
  %mg_len = getelementptr inbounds %struct.magic* %call1005, i64 0, i32 7
  %357 = load i32* %mg_len, align 4, !tbaa !3
  tail call void @Perl_sv_magic(%struct.sv* %dstr, %struct.sv* null, i32 86, i8* %356, i32 %357) #7
  %358 = load i32* %sv_flags, align 4, !tbaa !3
  %or1007 = or i32 %358, 32768
  store i32 %or1007, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end1162

if.else1009:                                      ; preds = %if.else825
  %and1010 = and i32 %100, 16777216
  %tobool1011 = icmp eq i32 %and1010, 0
  br i1 %tobool1011, label %if.else1077, label %if.then1012

if.then1012:                                      ; preds = %if.else1009
  %and1013 = and i32 %100, 65536
  %tobool1014 = icmp eq i32 %and1013, 0
  %359 = load i32* %sv_flags, align 4, !tbaa !3
  %and1017 = and i32 %359, 1223753727
  store i32 %and1017, i32* %sv_flags, align 4, !tbaa !3
  %and1019 = and i32 %359, 2097152
  %tobool1020 = icmp ne i32 %and1019, 0
  br i1 %tobool1014, label %if.else1028, label %if.then1015

if.then1015:                                      ; preds = %if.then1012
  br i1 %tobool1020, label %land.rhs1021, label %land.end1024

land.rhs1021:                                     ; preds = %if.then1015
  %call1022 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1527 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end1024

land.end1024:                                     ; preds = %land.rhs1021, %if.then1015
  %360 = phi i32 [ %.pre1527, %land.rhs1021 ], [ %and1017, %if.then1015 ]
  %or1027 = or i32 %360, 16842752
  br label %if.end1049

if.else1028:                                      ; preds = %if.then1012
  br i1 %tobool1020, label %land.rhs1034, label %land.end1037

land.rhs1034:                                     ; preds = %if.else1028
  %call1035 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1525 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end1037

land.end1037:                                     ; preds = %land.rhs1034, %if.else1028
  %361 = phi i32 [ %.pre1525, %land.rhs1034 ], [ %and1017, %if.else1028 ]
  %and1040 = and i32 %361, 2097152
  %tobool1041 = icmp eq i32 %and1040, 0
  br i1 %tobool1041, label %land.end1045, label %land.rhs1042

land.rhs1042:                                     ; preds = %land.end1037
  %call1043 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1526 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end1045

land.end1045:                                     ; preds = %land.end1037, %land.rhs1042
  %362 = phi i32 [ %361, %land.end1037 ], [ %.pre1526, %land.rhs1042 ]
  %or1048 = or i32 %362, 16777216
  br label %if.end1049

if.end1049:                                       ; preds = %land.end1045, %land.end1024
  %storemerge1511 = phi i32 [ %or1048, %land.end1045 ], [ %or1027, %land.end1024 ]
  %tobool1051 = icmp slt i32 %100, 0
  %or1054 = or i32 %storemerge1511, -2147483648
  %or1054.storemerge1511 = select i1 %tobool1051, i32 %or1054, i32 %storemerge1511
  store i32 %or1054.storemerge1511, i32* %sv_flags, align 4, !tbaa !3
  %sv_any1056 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %363 = load i8** %sv_any1056, align 8, !tbaa !0
  %xiv_iv1057 = getelementptr inbounds i8* %363, i64 24
  %364 = bitcast i8* %xiv_iv1057 to i64*
  %365 = load i64* %364, align 8, !tbaa !5
  %sv_any1058 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %366 = load i8** %sv_any1058, align 8, !tbaa !0
  %xiv_iv1059 = getelementptr inbounds i8* %366, i64 24
  %367 = bitcast i8* %xiv_iv1059 to i64*
  store i64 %365, i64* %367, align 8, !tbaa !5
  %and1060 = and i32 %100, 33554432
  %tobool1061 = icmp eq i32 %and1060, 0
  br i1 %tobool1061, label %if.end1162, label %if.then1062

if.then1062:                                      ; preds = %if.end1049
  %and1063 = and i32 %100, 131072
  %368 = or i32 %and1063, %or1054.storemerge1511
  %storemerge1512 = or i32 %368, 33554432
  store i32 %storemerge1512, i32* %sv_flags, align 4, !tbaa !3
  %xnv_nv1073 = getelementptr inbounds i8* %363, i64 32
  %369 = bitcast i8* %xnv_nv1073 to double*
  %370 = load double* %369, align 8, !tbaa !6
  %xnv_nv1075 = getelementptr inbounds i8* %366, i64 32
  %371 = bitcast i8* %xnv_nv1075 to double*
  store double %370, double* %371, align 8, !tbaa !6
  br label %if.end1162

if.else1077:                                      ; preds = %if.else1009
  %and1078 = and i32 %100, 33554432
  %tobool1079 = icmp eq i32 %and1078, 0
  br i1 %tobool1079, label %if.else1114, label %if.then1080

if.then1080:                                      ; preds = %if.else1077
  %and1081 = and i32 %100, 131072
  %tobool1082 = icmp eq i32 %and1081, 0
  %372 = load i32* %sv_flags, align 4, !tbaa !3
  %and1085 = and i32 %372, 1223753727
  store i32 %and1085, i32* %sv_flags, align 4, !tbaa !3
  %and1087 = and i32 %372, 2097152
  %tobool1088 = icmp ne i32 %and1087, 0
  br i1 %tobool1082, label %if.else1096, label %if.then1083

if.then1083:                                      ; preds = %if.then1080
  br i1 %tobool1088, label %land.rhs1089, label %land.end1092

land.rhs1089:                                     ; preds = %if.then1083
  %call1090 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1524 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end1092

land.end1092:                                     ; preds = %land.rhs1089, %if.then1083
  %373 = phi i32 [ %.pre1524, %land.rhs1089 ], [ %and1085, %if.then1083 ]
  %or1095 = or i32 %373, 33685504
  br label %if.end1109

if.else1096:                                      ; preds = %if.then1080
  br i1 %tobool1088, label %land.rhs1102, label %land.end1105

land.rhs1102:                                     ; preds = %if.else1096
  %call1103 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  %.pre1523 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end1105

land.end1105:                                     ; preds = %land.rhs1102, %if.else1096
  %374 = phi i32 [ %.pre1523, %land.rhs1102 ], [ %and1085, %if.else1096 ]
  %or1108 = or i32 %374, 33554432
  br label %if.end1109

if.end1109:                                       ; preds = %land.end1105, %land.end1092
  %storemerge = phi i32 [ %or1108, %land.end1105 ], [ %or1095, %land.end1092 ]
  store i32 %storemerge, i32* %sv_flags, align 4, !tbaa !3
  %sv_any1110 = getelementptr inbounds %struct.sv* %PL_sv_undef.sstr, i64 0, i32 0
  %375 = load i8** %sv_any1110, align 8, !tbaa !0
  %xnv_nv1111 = getelementptr inbounds i8* %375, i64 32
  %376 = bitcast i8* %xnv_nv1111 to double*
  %377 = load double* %376, align 8, !tbaa !6
  %sv_any1112 = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 0
  %378 = load i8** %sv_any1112, align 8, !tbaa !0
  %xnv_nv1113 = getelementptr inbounds i8* %378, i64 32
  %379 = bitcast i8* %xnv_nv1113 to double*
  store double %377, double* %379, align 8, !tbaa !6
  br label %if.end1162

if.else1114:                                      ; preds = %if.else1077
  %cmp1115 = icmp eq i32 %and9, 13
  br i1 %cmp1115, label %if.then1117, label %if.else1147

if.then1117:                                      ; preds = %if.else1114
  %380 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1118 = getelementptr inbounds %struct.cop* %380, i64 0, i32 14
  %381 = load %struct.sv** %cop_warnings1118, align 8, !tbaa !0
  %cmp1119 = icmp eq %struct.sv* %381, null
  br i1 %cmp1119, label %lor.lhs.false1137, label %land.lhs.true1121

land.lhs.true1121:                                ; preds = %if.then1117
  %382 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1122 = getelementptr inbounds %struct.cop* %382, i64 0, i32 14
  %383 = load %struct.sv** %cop_warnings1122, align 8, !tbaa !0
  %cmp1123 = icmp eq %struct.sv* %383, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp1123, label %lor.lhs.false1137, label %land.lhs.true1125

land.lhs.true1125:                                ; preds = %land.lhs.true1121
  %384 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1126 = getelementptr inbounds %struct.cop* %384, i64 0, i32 14
  %385 = load %struct.sv** %cop_warnings1126, align 8, !tbaa !0
  %cmp1127 = icmp eq %struct.sv* %385, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp1127, label %if.then1145, label %lor.lhs.false1129

lor.lhs.false1129:                                ; preds = %land.lhs.true1125
  %386 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1130 = getelementptr inbounds %struct.cop* %386, i64 0, i32 14
  %387 = load %struct.sv** %cop_warnings1130, align 8, !tbaa !0
  %sv_any1131 = getelementptr inbounds %struct.sv* %387, i64 0, i32 0
  %388 = load i8** %sv_any1131, align 8, !tbaa !0
  %xpv_pv1132 = bitcast i8* %388 to i8**
  %389 = load i8** %xpv_pv1132, align 8, !tbaa !0
  %arrayidx1133 = getelementptr inbounds i8* %389, i64 3
  %390 = load i8* %arrayidx1133, align 1, !tbaa !1
  %and1135 = and i8 %390, 1
  %tobool1136 = icmp eq i8 %and1135, 0
  br i1 %tobool1136, label %lor.lhs.false1137, label %if.then1145

lor.lhs.false1137:                                ; preds = %lor.lhs.false1129, %land.lhs.true1121, %if.then1117
  %391 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1138 = getelementptr inbounds %struct.cop* %391, i64 0, i32 14
  %392 = load %struct.sv** %cop_warnings1138, align 8, !tbaa !0
  %cmp1139 = icmp eq %struct.sv* %392, null
  br i1 %cmp1139, label %land.lhs.true1141, label %if.end1162

land.lhs.true1141:                                ; preds = %lor.lhs.false1137
  %393 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and1143 = and i8 %393, 1
  %tobool1144 = icmp eq i8 %and1143, 0
  br i1 %tobool1144, label %if.end1162, label %if.then1145

if.then1145:                                      ; preds = %lor.lhs.false1129, %land.lhs.true1141, %land.lhs.true1125
  tail call void (i32, i8*, ...)* @Perl_warner(i32 12, i8* getelementptr inbounds ([37 x i8]* @.str34, i64 0, i64 0)) #8
  br label %if.end1162

if.else1147:                                      ; preds = %if.else1114
  %394 = load i32* %sv_flags, align 4, !tbaa !3
  %and1149 = and i32 %394, 1223753727
  store i32 %and1149, i32* %sv_flags, align 4, !tbaa !3
  %and1151 = and i32 %394, 2097152
  %tobool1152 = icmp eq i32 %and1151, 0
  br i1 %tobool1152, label %if.end1162, label %land.rhs1153

land.rhs1153:                                     ; preds = %if.else1147
  %call1154 = tail call i32 @Perl_sv_backoff(%struct.sv* %dstr) #7
  br label %if.end1162

if.end1162:                                       ; preds = %if.else1147, %land.lhs.true1141, %lor.lhs.false1137, %if.end1049, %land.lhs.true1001, %land.rhs1153, %if.end817, %if.end997, %if.then1004, %if.end1109, %if.then1145, %if.then1062, %if.then821
  %395 = load i32* %sv_flags6, align 4, !tbaa !3
  %and1164 = and i32 %395, 57344
  %tobool1165 = icmp eq i32 %and1164, 0
  br i1 %tobool1165, label %if.end1180, label %land.lhs.true1166

land.lhs.true1166:                                ; preds = %if.end1162
  %call1167 = tail call signext i8 @Perl_sv_tainted(%struct.sv* %PL_sv_undef.sstr) #7
  %tobool1169 = icmp ne i8 %call1167, 0
  %396 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool1171 = icmp ne i8 %396, 0
  %or.cond1192 = and i1 %tobool1169, %tobool1171
  %397 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool1173 = icmp ne i8 %397, 0
  %or.cond1193 = and i1 %or.cond1192, %tobool1173
  br i1 %or.cond1193, label %if.then1176, label %if.end1180

if.then1176:                                      ; preds = %land.lhs.true1166
  tail call void @Perl_sv_magic(%struct.sv* %dstr, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end1180

if.end1180:                                       ; preds = %land.rhs, %if.then22, %if.end61, %land.end101, %if.end706, %if.end1162, %if.then1176, %land.lhs.true710, %if.then720, %land.lhs.true108, %if.then118, %land.lhs.true65, %if.then74, %entry, %if.end162, %if.end302, %land.lhs.true1166
  ret void
}

; Function Attrs: optsize
declare i32 @Perl_mg_free(%struct.sv*) #2

; Function Attrs: nounwind optsize uwtable
define signext i8 @Perl_sv_tainted(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 255
  %cmp = icmp ugt i32 %and, 6
  br i1 %cmp, label %land.lhs.true, label %if.end11

land.lhs.true:                                    ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xmg_magic = getelementptr inbounds i8* %1, i64 40
  %2 = bitcast i8* %xmg_magic to %struct.magic**
  %3 = load %struct.magic** %2, align 8, !tbaa !0
  %tobool = icmp eq %struct.magic* %3, null
  br i1 %tobool, label %if.end11, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = tail call %struct.magic* @Perl_mg_find(%struct.sv* %sv, i32 116) #8
  %tobool1 = icmp eq %struct.magic* %call, null
  br i1 %tobool1, label %if.end11, label %land.lhs.true2

land.lhs.true2:                                   ; preds = %if.then
  %mg_len = getelementptr inbounds %struct.magic* %call, i64 0, i32 7
  %4 = load i32* %mg_len, align 4, !tbaa !3
  %and3 = and i32 %4, 1
  %tobool4 = icmp eq i32 %and3, 0
  br i1 %tobool4, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %land.lhs.true2
  %and6 = and i32 %4, 2
  %tobool7 = icmp eq i32 %and6, 0
  br i1 %tobool7, label %if.end11, label %land.lhs.true8

land.lhs.true8:                                   ; preds = %lor.lhs.false
  %mg_obj = getelementptr inbounds %struct.magic* %call, i64 0, i32 5
  %5 = load %struct.sv** %mg_obj, align 8, !tbaa !0
  %cmp9 = icmp eq %struct.sv* %5, %sv
  br i1 %cmp9, label %return, label %if.end11

if.end11:                                         ; preds = %lor.lhs.false, %if.then, %land.lhs.true, %land.lhs.true8, %entry
  br label %return

return:                                           ; preds = %land.lhs.true8, %land.lhs.true2, %if.end11
  %retval.0 = phi i8 [ 0, %if.end11 ], [ 1, %land.lhs.true2 ], [ 1, %land.lhs.true8 ]
  ret i8 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* %obj, i32 %how, i8* %name, i32 %namlen) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8388608
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end11, label %if.then

if.then:                                          ; preds = %entry
  %1 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cmp = icmp eq %struct.cop* %1, @PL_compiling
  br i1 %cmp, label %if.end11, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  switch i32 %how, label %if.then10 [
    i32 103, label %if.end11
    i32 102, label %if.end11
    i32 66, label %if.end11
    i32 60, label %if.end11
    i32 0, label %if.end11
  ]

if.then10:                                        ; preds = %land.lhs.true
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([0 x i8]* @PL_no_modify, i64 0, i64 0)) #8
  br label %if.end11

if.end11:                                         ; preds = %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %land.lhs.true, %if.then, %entry, %if.then10
  %2 = load i32* %sv_flags, align 4, !tbaa !3
  %and13 = and i32 %2, 57344
  %tobool14 = icmp eq i32 %and13, 0
  br i1 %tobool14, label %lor.lhs.false, label %if.then20

lor.lhs.false:                                    ; preds = %if.end11
  switch i32 %how, label %sw.default [
    i32 116, label %land.lhs.true16
    i32 0, label %sw.epilog.thread
    i32 65, label %sw.bb30
    i32 97, label %sw.bb31
    i32 99, label %sw.bb32
    i32 66, label %sw.bb33
    i32 68, label %sw.bb34
    i32 100, label %sw.bb35
    i32 69, label %sw.bb36
    i32 102, label %sw.bb37
    i32 101, label %sw.bb38
    i32 103, label %sw.bb39
    i32 73, label %sw.bb40
    i32 105, label %sw.bb41
    i32 107, label %sw.bb42
    i32 76, label %sw.epilog
    i32 108, label %sw.bb44
    i32 80, label %sw.bb45
    i32 112, label %sw.bb46
    i32 113, label %sw.bb46
    i32 114, label %sw.bb47
    i32 83, label %sw.bb48
    i32 115, label %sw.bb49
    i32 85, label %sw.bb51
    i32 118, label %sw.bb52
    i32 86, label %sw.epilog
    i32 119, label %sw.bb54
    i32 120, label %sw.bb55
    i32 121, label %sw.bb56
    i32 42, label %sw.bb57
    i32 35, label %sw.bb58
    i32 46, label %sw.bb59
    i32 60, label %sw.bb60
    i32 126, label %sw.epilog
  ]

land.lhs.true16:                                  ; preds = %lor.lhs.false
  %and18 = and i32 %2, 255
  %cmp19 = icmp ugt i32 %and18, 6
  br i1 %cmp19, label %if.then20, label %sw.epilog.thread90

if.then20:                                        ; preds = %if.end11, %land.lhs.true16
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !0
  %xmg_magic = getelementptr inbounds i8* %3, i64 40
  %4 = bitcast i8* %xmg_magic to %struct.magic**
  %5 = load %struct.magic** %4, align 8, !tbaa !0
  %tobool21 = icmp eq %struct.magic* %5, null
  br i1 %tobool21, label %if.end29, label %land.lhs.true22

land.lhs.true22:                                  ; preds = %if.then20
  %call = tail call %struct.magic* @Perl_mg_find(%struct.sv* %sv, i32 %how) #8
  %tobool23 = icmp eq %struct.magic* %call, null
  br i1 %tobool23, label %if.end29, label %if.then24

if.then24:                                        ; preds = %land.lhs.true22
  %cmp25 = icmp eq i32 %how, 116
  br i1 %cmp25, label %if.then26, label %sw.epilog67

if.then26:                                        ; preds = %if.then24
  %mg_len = getelementptr inbounds %struct.magic* %call, i64 0, i32 7
  %6 = load i32* %mg_len, align 4, !tbaa !3
  %or = or i32 %6, 1
  store i32 %or, i32* %mg_len, align 4, !tbaa !3
  br label %sw.epilog67

if.end29:                                         ; preds = %land.lhs.true22, %if.then20
  switch i32 %how, label %sw.default [
    i32 0, label %sw.epilog.thread
    i32 65, label %sw.bb30
    i32 97, label %sw.bb31
    i32 99, label %sw.bb32
    i32 66, label %sw.bb33
    i32 68, label %sw.bb34
    i32 100, label %sw.bb35
    i32 69, label %sw.bb36
    i32 102, label %sw.bb37
    i32 101, label %sw.bb38
    i32 103, label %sw.bb39
    i32 73, label %sw.bb40
    i32 105, label %sw.bb41
    i32 107, label %sw.bb42
    i32 76, label %sw.epilog
    i32 108, label %sw.bb44
    i32 80, label %sw.bb45
    i32 112, label %sw.bb46
    i32 113, label %sw.bb46
    i32 114, label %sw.bb47
    i32 83, label %sw.bb48
    i32 115, label %sw.bb49
    i32 116, label %sw.epilog.thread90
    i32 85, label %sw.bb51
    i32 118, label %sw.bb52
    i32 86, label %sw.epilog
    i32 119, label %sw.bb54
    i32 120, label %sw.bb55
    i32 121, label %sw.bb56
    i32 42, label %sw.bb57
    i32 35, label %sw.bb58
    i32 46, label %sw.bb59
    i32 60, label %sw.bb60
    i32 126, label %sw.epilog
  ]

sw.bb30:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb31:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb32:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb33:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb34:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb35:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb36:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb37:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb38:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb39:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb40:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb41:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb42:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb44:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb45:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb46:                                          ; preds = %lor.lhs.false, %lor.lhs.false, %if.end29, %if.end29
  br label %sw.epilog

sw.bb47:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb48:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb49:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.epilog.thread90:                               ; preds = %if.end29, %land.lhs.true16
  %call6191 = tail call %struct.magic* @Perl_sv_magicext(%struct.sv* %sv, %struct.sv* %obj, i32 %how, %struct.mgvtbl* @PL_vtbl_taint, i8* %name, i32 %namlen) #7
  br label %sw.bb62

sw.bb51:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb52:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb54:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb55:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb56:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb57:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb58:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb59:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.bb60:                                          ; preds = %lor.lhs.false, %if.end29
  br label %sw.epilog.thread

sw.default:                                       ; preds = %lor.lhs.false, %if.end29
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([43 x i8]* @.str36, i64 0, i64 0), i32 %how) #8
  br label %sw.epilog

sw.epilog.thread:                                 ; preds = %lor.lhs.false, %sw.bb60, %sw.bb59, %sw.bb58, %sw.bb57, %sw.bb56, %sw.bb55, %sw.bb54, %sw.bb52, %sw.bb51, %sw.bb49, %sw.bb48, %sw.bb47, %sw.bb45, %sw.bb44, %sw.bb42, %sw.bb41, %sw.bb40, %sw.bb39, %sw.bb38, %sw.bb37, %sw.bb36, %sw.bb35, %sw.bb34, %sw.bb33, %sw.bb32, %sw.bb31, %sw.bb30, %if.end29
  %vtable.0.ph = phi %struct.mgvtbl* [ @PL_vtbl_backref, %sw.bb60 ], [ @PL_vtbl_pos, %sw.bb59 ], [ @PL_vtbl_arylen, %sw.bb58 ], [ @PL_vtbl_glob, %sw.bb57 ], [ @PL_vtbl_defelem, %sw.bb56 ], [ @PL_vtbl_substr, %sw.bb55 ], [ @PL_vtbl_utf8, %sw.bb54 ], [ @PL_vtbl_vec, %sw.bb52 ], [ @PL_vtbl_uvar, %sw.bb51 ], [ @PL_vtbl_sigelem, %sw.bb49 ], [ @PL_vtbl_sig, %sw.bb48 ], [ @PL_vtbl_regexp, %sw.bb47 ], [ @PL_vtbl_pack, %sw.bb45 ], [ @PL_vtbl_dbline, %sw.bb44 ], [ @PL_vtbl_nkeys, %sw.bb42 ], [ @PL_vtbl_isaelem, %sw.bb41 ], [ @PL_vtbl_isa, %sw.bb40 ], [ @PL_vtbl_mglob, %sw.bb39 ], [ @PL_vtbl_envelem, %sw.bb38 ], [ @PL_vtbl_fm, %sw.bb37 ], [ @PL_vtbl_env, %sw.bb36 ], [ @PL_vtbl_regdatum, %sw.bb35 ], [ @PL_vtbl_regdata, %sw.bb34 ], [ @PL_vtbl_bm, %sw.bb33 ], [ @PL_vtbl_ovrld, %sw.bb32 ], [ @PL_vtbl_amagicelem, %sw.bb31 ], [ @PL_vtbl_amagic, %sw.bb30 ], [ @PL_vtbl_sv, %if.end29 ], [ @PL_vtbl_sv, %lor.lhs.false ]
  %call6189 = tail call %struct.magic* @Perl_sv_magicext(%struct.sv* %sv, %struct.sv* %obj, i32 %how, %struct.mgvtbl* %vtable.0.ph, i8* %name, i32 %namlen) #7
  br label %sw.epilog67

sw.epilog:                                        ; preds = %lor.lhs.false, %lor.lhs.false, %lor.lhs.false, %if.end29, %if.end29, %sw.default, %if.end29, %sw.bb46
  %vtable.0 = phi %struct.mgvtbl* [ null, %sw.default ], [ null, %if.end29 ], [ @PL_vtbl_packelem, %sw.bb46 ], [ null, %if.end29 ], [ null, %if.end29 ], [ null, %lor.lhs.false ], [ null, %lor.lhs.false ], [ null, %lor.lhs.false ]
  %call61 = tail call %struct.magic* @Perl_sv_magicext(%struct.sv* %sv, %struct.sv* %obj, i32 %how, %struct.mgvtbl* %vtable.0, i8* %name, i32 %namlen) #7
  switch i32 %how, label %sw.epilog67 [
    i32 116, label %sw.bb62
    i32 126, label %sw.bb64
    i32 76, label %sw.bb64
  ]

sw.bb62:                                          ; preds = %sw.epilog.thread90, %sw.epilog
  %call6192 = phi %struct.magic* [ %call6191, %sw.epilog.thread90 ], [ %call61, %sw.epilog ]
  %mg_len63 = getelementptr inbounds %struct.magic* %call6192, i64 0, i32 7
  store i32 1, i32* %mg_len63, align 4, !tbaa !3
  br label %sw.epilog67

sw.bb64:                                          ; preds = %sw.epilog, %sw.epilog
  %7 = load i32* %sv_flags, align 4, !tbaa !3
  %or66 = or i32 %7, 32768
  store i32 %or66, i32* %sv_flags, align 4, !tbaa !3
  br label %sw.epilog67

sw.epilog67:                                      ; preds = %sw.epilog.thread, %if.then24, %if.then26, %sw.epilog, %sw.bb64, %sw.bb62
  ret void
}

; Function Attrs: optsize
declare i8* @Perl_savepvn(i8*, i32) #2

; Function Attrs: optsize
declare void @Perl_gp_free(%struct.gv*) #2

; Function Attrs: optsize
declare %struct.gp* @Perl_gp_ref(%struct.gp*) #2

; Function Attrs: optsize
declare void @Perl_save_generic_svref(%struct.sv**) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_free(%struct.sv* %sv) #0 {
entry:
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %if.end64, label %if.end

if.end:                                           ; preds = %entry
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv, i64 0, i32 1
  %0 = load i32* %sv_refcnt, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then1, label %if.end33

if.then1:                                         ; preds = %if.end
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %1, 4194304
  %tobool2 = icmp ne i32 %and, 0
  %2 = load i8* @PL_in_clean_all, align 1, !tbaa !1
  %tobool5 = icmp ne i8 %2, 0
  %or.cond70 = or i1 %tobool2, %tobool5
  br i1 %or.cond70, label %if.end64, label %if.end7

if.end7:                                          ; preds = %if.then1
  %and9 = and i32 %1, 8388608
  %tobool10 = icmp eq i32 %and9, 0
  br i1 %tobool10, label %if.end19, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end7
  %cmp11 = icmp eq %struct.sv* %sv, @PL_sv_undef
  %cmp12 = icmp eq %struct.sv* %sv, @PL_sv_yes
  %or.cond = or i1 %cmp11, %cmp12
  %cmp14 = icmp eq %struct.sv* %sv, @PL_sv_no
  %or.cond65 = or i1 %or.cond, %cmp14
  %cmp16 = icmp eq %struct.sv* %sv, @PL_sv_placeholder
  %or.cond66 = or i1 %or.cond65, %cmp16
  br i1 %or.cond66, label %if.then17, label %if.end19

if.then17:                                        ; preds = %land.lhs.true
  store i32 2147483647, i32* %sv_refcnt, align 4, !tbaa !3
  br label %if.end64

if.end19:                                         ; preds = %if.end7, %land.lhs.true
  %3 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %3, i64 0, i32 14
  %4 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp20 = icmp eq %struct.sv* %4, null
  br i1 %cmp20, label %if.then31, label %lor.lhs.false21

lor.lhs.false21:                                  ; preds = %if.end19
  %5 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings22 = getelementptr inbounds %struct.cop* %5, i64 0, i32 14
  %6 = load %struct.sv** %cop_warnings22, align 8, !tbaa !0
  %cmp23 = icmp eq %struct.sv* %6, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp23, label %if.then31, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %lor.lhs.false21
  %7 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings25 = getelementptr inbounds %struct.cop* %7, i64 0, i32 14
  %8 = load %struct.sv** %cop_warnings25, align 8, !tbaa !0
  %cmp26 = icmp eq %struct.sv* %8, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp26, label %if.end64, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %lor.lhs.false24
  %9 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings28 = getelementptr inbounds %struct.cop* %9, i64 0, i32 14
  %10 = load %struct.sv** %cop_warnings28, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.sv* %10, i64 0, i32 0
  %11 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %11 to i8**
  %12 = load i8** %xpv_pv, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %12, i64 6
  %13 = load i8* %arrayidx, align 1, !tbaa !1
  %and29 = and i8 %13, 1
  %tobool30 = icmp eq i8 %and29, 0
  br i1 %tobool30, label %if.end64, label %if.then31

if.then31:                                        ; preds = %land.lhs.true27, %lor.lhs.false21, %if.end19
  %14 = ptrtoint %struct.sv* %sv to i64
  tail call void (i32, i8*, ...)* @Perl_warner(i32 24, i8* getelementptr inbounds ([46 x i8]* @.str44, i64 0, i64 0), i64 %14) #8
  br label %if.end64

if.end33:                                         ; preds = %if.end
  %dec = add i32 %0, -1
  store i32 %dec, i32* %sv_refcnt, align 4, !tbaa !3
  %cmp35 = icmp eq i32 %dec, 0
  br i1 %cmp35, label %if.end39, label %if.end64

if.end39:                                         ; preds = %if.end33
  %sv_flags40 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %15 = load i32* %sv_flags40, align 4, !tbaa !3
  %and41 = and i32 %15, 8388608
  %tobool42 = icmp eq i32 %and41, 0
  br i1 %tobool42, label %if.end57, label %land.lhs.true43

land.lhs.true43:                                  ; preds = %if.end39
  %cmp44 = icmp eq %struct.sv* %sv, @PL_sv_undef
  %cmp47 = icmp eq %struct.sv* %sv, @PL_sv_yes
  %or.cond67 = or i1 %cmp44, %cmp47
  %cmp50 = icmp eq %struct.sv* %sv, @PL_sv_no
  %or.cond68 = or i1 %or.cond67, %cmp50
  %cmp53 = icmp eq %struct.sv* %sv, @PL_sv_placeholder
  %or.cond69 = or i1 %or.cond68, %cmp53
  br i1 %or.cond69, label %if.then55, label %if.end57

if.then55:                                        ; preds = %land.lhs.true43
  store i32 2147483647, i32* %sv_refcnt, align 4, !tbaa !3
  br label %if.end64

if.end57:                                         ; preds = %if.end39, %land.lhs.true43
  tail call void @Perl_sv_clear(%struct.sv* %sv) #7
  %16 = load i32* %sv_refcnt, align 4, !tbaa !3
  %tobool59 = icmp eq i32 %16, 0
  br i1 %tobool59, label %if.then60, label %if.end64

if.then60:                                        ; preds = %if.end57
  %17 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %18 = bitcast %struct.sv* %17 to i8*
  %sv_any61 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  store i8* %18, i8** %sv_any61, align 8, !tbaa !0
  store i32 255, i32* %sv_flags40, align 4, !tbaa !3
  store %struct.sv* %sv, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %19 = load i32* @PL_sv_count, align 4, !tbaa !3
  %dec63 = add nsw i32 %19, -1
  store i32 %dec63, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end64

if.end64:                                         ; preds = %land.lhs.true27, %lor.lhs.false24, %if.end57, %entry, %if.end33, %if.then31, %if.then1, %if.then17, %if.then55, %if.then60
  ret void
}

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_sv_cmp(%struct.sv* %sv1, %struct.sv* %sv2) #0 {
entry:
  %cur1 = alloca i64, align 8
  %cur2 = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %sv1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 0, i64* %cur1, align 8, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv1, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp1 = icmp eq i32 %and, 0
  br i1 %cmp1, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.else
  %sv_any = getelementptr inbounds %struct.sv* %sv1, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %cur1, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %if.end

cond.false:                                       ; preds = %if.else
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv1, i64* %cur1, i32 2) #7
  br label %if.end

if.end:                                           ; preds = %cond.true, %cond.false, %if.then
  %pv1.0 = phi i8* [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.then ], [ %4, %cond.true ], [ %call, %cond.false ]
  %tobool3 = icmp eq %struct.sv* %sv2, null
  br i1 %tobool3, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.end
  store i64 0, i64* %cur2, align 8, !tbaa !5
  br label %if.end18

if.else5:                                         ; preds = %if.end
  %sv_flags6 = getelementptr inbounds %struct.sv* %sv2, i64 0, i32 2
  %5 = load i32* %sv_flags6, align 4, !tbaa !3
  %and7 = and i32 %5, 262144
  %cmp8 = icmp eq i32 %and7, 0
  br i1 %cmp8, label %cond.false14, label %cond.true9

cond.true9:                                       ; preds = %if.else5
  %sv_any10 = getelementptr inbounds %struct.sv* %sv2, i64 0, i32 0
  %6 = load i8** %sv_any10, align 8, !tbaa !0
  %xpv_cur11 = getelementptr inbounds i8* %6, i64 8
  %7 = bitcast i8* %xpv_cur11 to i64*
  %8 = load i64* %7, align 8, !tbaa !5
  store i64 %8, i64* %cur2, align 8, !tbaa !5
  %xpv_pv13 = bitcast i8* %6 to i8**
  %9 = load i8** %xpv_pv13, align 8, !tbaa !0
  br label %if.end18

cond.false14:                                     ; preds = %if.else5
  %call15 = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv2, i64* %cur2, i32 2) #7
  %.pre = load i64* %cur2, align 8, !tbaa !5
  br label %if.end18

if.end18:                                         ; preds = %cond.true9, %cond.false14, %if.then4
  %10 = phi i64 [ 0, %if.then4 ], [ %8, %cond.true9 ], [ %.pre, %cond.false14 ]
  %pv2.0 = phi i8* [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.then4 ], [ %9, %cond.true9 ], [ %call15, %cond.false14 ]
  %11 = load i64* %cur1, align 8, !tbaa !5
  %tobool19 = icmp eq i64 %11, 0
  br i1 %tobool19, label %if.end77.thread, label %land.lhs.true

if.end77.thread:                                  ; preds = %if.end18
  %tobool83140 = icmp ne i64 %10, 0
  br label %if.then79

land.lhs.true:                                    ; preds = %if.end18
  %tobool20 = icmp eq i64 %10, 0
  br i1 %tobool20, label %if.end77thread-pre-split, label %land.lhs.true21

land.lhs.true21:                                  ; preds = %land.lhs.true
  %sv_flags22 = getelementptr inbounds %struct.sv* %sv1, i64 0, i32 2
  %12 = load i32* %sv_flags22, align 4, !tbaa !3
  %and23 = and i32 %12, 536870912
  %sv_flags24 = getelementptr inbounds %struct.sv* %sv2, i64 0, i32 2
  %13 = load i32* %sv_flags24, align 4, !tbaa !3
  %and25 = and i32 %13, 536870912
  %cmp26 = icmp eq i32 %and23, %and25
  br i1 %cmp26, label %if.end77thread-pre-split, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %land.lhs.true21
  %14 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private = getelementptr inbounds %struct.cop* %14, i64 0, i32 7
  %15 = load i8* %op_private, align 1, !tbaa !1
  %and28 = and i8 %15, 8
  %tobool29 = icmp eq i8 %and28, 0
  br i1 %tobool29, label %if.then30, label %if.end77thread-pre-split

if.then30:                                        ; preds = %land.lhs.true27
  %tobool33 = icmp eq i32 %and23, 0
  %16 = load %struct.sv** @PL_encoding, align 8, !tbaa !0
  %tobool35 = icmp ne %struct.sv* %16, null
  br i1 %tobool33, label %if.else55, label %if.then34

if.then34:                                        ; preds = %if.then30
  br i1 %tobool35, label %if.then36, label %if.else52

if.then36:                                        ; preds = %if.then34
  %call37 = call %struct.sv* @Perl_newSVpvn(i8* %pv2.0, i64 %10) #7
  %17 = load %struct.sv** @PL_encoding, align 8, !tbaa !0
  %call38 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %call37, %struct.sv* %17) #7
  %sv_flags39 = getelementptr inbounds %struct.sv* %call37, i64 0, i32 2
  %18 = load i32* %sv_flags39, align 4, !tbaa !3
  %and40 = and i32 %18, 262144
  %cmp41 = icmp eq i32 %and40, 0
  br i1 %cmp41, label %cond.false48, label %cond.true43

cond.true43:                                      ; preds = %if.then36
  %sv_any44 = getelementptr inbounds %struct.sv* %call37, i64 0, i32 0
  %19 = load i8** %sv_any44, align 8, !tbaa !0
  %xpv_cur45 = getelementptr inbounds i8* %19, i64 8
  %20 = bitcast i8* %xpv_cur45 to i64*
  %21 = load i64* %20, align 8, !tbaa !5
  store i64 %21, i64* %cur2, align 8, !tbaa !5
  %xpv_pv47 = bitcast i8* %19 to i8**
  %22 = load i8** %xpv_pv47, align 8, !tbaa !0
  br label %if.end77thread-pre-split

cond.false48:                                     ; preds = %if.then36
  %call49 = call i8* @Perl_sv_2pv_flags(%struct.sv* %call37, i64* %cur2, i32 2) #7
  br label %if.end77thread-pre-split

if.else52:                                        ; preds = %if.then34
  %call53 = call i8* @Perl_bytes_to_utf8(i8* %pv2.0, i64* %cur2) #8
  br label %if.end77thread-pre-split

if.else55:                                        ; preds = %if.then30
  br i1 %tobool35, label %if.then57, label %if.else73

if.then57:                                        ; preds = %if.else55
  %call58 = call %struct.sv* @Perl_newSVpvn(i8* %pv1.0, i64 %11) #7
  %23 = load %struct.sv** @PL_encoding, align 8, !tbaa !0
  %call59 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %call58, %struct.sv* %23) #7
  %sv_flags60 = getelementptr inbounds %struct.sv* %call58, i64 0, i32 2
  %24 = load i32* %sv_flags60, align 4, !tbaa !3
  %and61 = and i32 %24, 262144
  %cmp62 = icmp eq i32 %and61, 0
  br i1 %cmp62, label %cond.false69, label %cond.true64

cond.true64:                                      ; preds = %if.then57
  %sv_any65 = getelementptr inbounds %struct.sv* %call58, i64 0, i32 0
  %25 = load i8** %sv_any65, align 8, !tbaa !0
  %xpv_cur66 = getelementptr inbounds i8* %25, i64 8
  %26 = bitcast i8* %xpv_cur66 to i64*
  %27 = load i64* %26, align 8, !tbaa !5
  store i64 %27, i64* %cur1, align 8, !tbaa !5
  %xpv_pv68 = bitcast i8* %25 to i8**
  %28 = load i8** %xpv_pv68, align 8, !tbaa !0
  br label %if.end77

cond.false69:                                     ; preds = %if.then57
  %call70 = call i8* @Perl_sv_2pv_flags(%struct.sv* %call58, i64* %cur1, i32 2) #7
  br label %if.end77thread-pre-split

if.else73:                                        ; preds = %if.else55
  %call74 = call i8* @Perl_bytes_to_utf8(i8* %pv1.0, i64* %cur1) #8
  br label %if.end77thread-pre-split

if.end77thread-pre-split:                         ; preds = %land.lhs.true27, %if.else73, %if.else52, %land.lhs.true, %land.lhs.true21, %cond.false48, %cond.true43, %cond.false69
  %pv2.1.ph = phi i8* [ %pv2.0, %cond.false69 ], [ %22, %cond.true43 ], [ %call49, %cond.false48 ], [ %pv2.0, %land.lhs.true21 ], [ %pv2.0, %land.lhs.true ], [ %call53, %if.else52 ], [ %pv2.0, %if.else73 ], [ %pv2.0, %land.lhs.true27 ]
  %tpv.0.ph = phi i8* [ null, %cond.false69 ], [ null, %cond.true43 ], [ null, %cond.false48 ], [ null, %land.lhs.true21 ], [ null, %land.lhs.true ], [ %call53, %if.else52 ], [ %call74, %if.else73 ], [ null, %land.lhs.true27 ]
  %svrecode.0.ph = phi %struct.sv* [ %call58, %cond.false69 ], [ %call37, %cond.true43 ], [ %call37, %cond.false48 ], [ null, %land.lhs.true21 ], [ null, %land.lhs.true ], [ null, %if.else52 ], [ null, %if.else73 ], [ null, %land.lhs.true27 ]
  %pv1.1.ph = phi i8* [ %call70, %cond.false69 ], [ %pv1.0, %cond.true43 ], [ %pv1.0, %cond.false48 ], [ %pv1.0, %land.lhs.true21 ], [ %pv1.0, %land.lhs.true ], [ %pv1.0, %if.else52 ], [ %call74, %if.else73 ], [ %pv1.0, %land.lhs.true27 ]
  %.pr = load i64* %cur1, align 8, !tbaa !5
  br label %if.end77

if.end77:                                         ; preds = %if.end77thread-pre-split, %cond.true64
  %29 = phi i64 [ %.pr, %if.end77thread-pre-split ], [ %27, %cond.true64 ]
  %pv2.1 = phi i8* [ %pv2.1.ph, %if.end77thread-pre-split ], [ %pv2.0, %cond.true64 ]
  %tpv.0 = phi i8* [ %tpv.0.ph, %if.end77thread-pre-split ], [ null, %cond.true64 ]
  %svrecode.0 = phi %struct.sv* [ %svrecode.0.ph, %if.end77thread-pre-split ], [ %call58, %cond.true64 ]
  %pv1.1 = phi i8* [ %pv1.1.ph, %if.end77thread-pre-split ], [ %28, %cond.true64 ]
  %tobool78 = icmp eq i64 %29, 0
  %30 = load i64* %cur2, align 8, !tbaa !5
  %tobool83 = icmp ne i64 %30, 0
  br i1 %tobool78, label %if.then79, label %if.else82

if.then79:                                        ; preds = %if.end77.thread, %if.end77
  %tobool83145 = phi i1 [ %tobool83140, %if.end77.thread ], [ %tobool83, %if.end77 ]
  %svrecode.0144 = phi %struct.sv* [ null, %if.end77.thread ], [ %svrecode.0, %if.end77 ]
  %tpv.0142 = phi i8* [ null, %if.end77.thread ], [ %tpv.0, %if.end77 ]
  %cond81 = sext i1 %tobool83145 to i32
  br label %if.end110

if.else82:                                        ; preds = %if.end77
  br i1 %tobool83, label %if.else85, label %if.end110

if.else85:                                        ; preds = %if.else82
  %cmp87 = icmp ult i64 %29, %30
  %cond92 = select i1 %cmp87, i64 %29, i64 %30
  %call93 = call i32 @memcmp(i8* %pv1.1, i8* %pv2.1, i64 %cond92) #8
  %tobool94 = icmp eq i32 %call93, 0
  br i1 %tobool94, label %if.else99, label %if.then95

if.then95:                                        ; preds = %if.else85
  %31 = ashr i32 %call93, 31
  %32 = or i32 %31, 1
  br label %if.end110

if.else99:                                        ; preds = %if.else85
  %cmp100 = icmp eq i64 %29, %30
  br i1 %cmp100, label %if.end110, label %if.else103

if.else103:                                       ; preds = %if.else99
  %cond106 = select i1 %cmp87, i32 -1, i32 1
  br label %if.end110

if.end110:                                        ; preds = %if.else99, %if.else82, %if.else103, %if.then95, %if.then79
  %svrecode.0143 = phi %struct.sv* [ %svrecode.0, %if.then95 ], [ %svrecode.0, %if.else103 ], [ %svrecode.0144, %if.then79 ], [ %svrecode.0, %if.else82 ], [ %svrecode.0, %if.else99 ]
  %tpv.0141 = phi i8* [ %tpv.0, %if.then95 ], [ %tpv.0, %if.else103 ], [ %tpv.0142, %if.then79 ], [ %tpv.0, %if.else82 ], [ %tpv.0, %if.else99 ]
  %cmp.0 = phi i32 [ %32, %if.then95 ], [ %cond106, %if.else103 ], [ %cond81, %if.then79 ], [ 1, %if.else82 ], [ 0, %if.else99 ]
  %tobool111 = icmp eq %struct.sv* %svrecode.0143, null
  br i1 %tobool111, label %if.end113, label %if.then112

if.then112:                                       ; preds = %if.end110
  call void @Perl_sv_free(%struct.sv* %svrecode.0143) #7
  br label %if.end113

if.end113:                                        ; preds = %if.end110, %if.then112
  %tobool114 = icmp eq i8* %tpv.0141, null
  br i1 %tobool114, label %if.end116, label %if.then115

if.then115:                                       ; preds = %if.end113
  call void @Perl_safesysfree(i8* %tpv.0141) #8
  br label %if.end116

if.end116:                                        ; preds = %if.end113, %if.then115
  ret i32 %cmp.0
}

; Function Attrs: optsize
declare %struct.sv* @Perl_cv_const_sv(%struct.cv*) #2

; Function Attrs: optsize
declare void @Perl_cv_ckproto(%struct.cv*, %struct.gv*, i8*) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setsv_mg(%struct.sv* %dstr, %struct.sv* %sstr) #0 {
entry:
  tail call void @Perl_sv_setsv_flags(%struct.sv* %dstr, %struct.sv* %sstr, i32 2) #7
  %sv_flags = getelementptr inbounds %struct.sv* %dstr, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @Perl_mg_set(%struct.sv* %dstr) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setpvn_mg(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  tail call void @Perl_sv_setpvn(%struct.sv* %sv, i8* %ptr, i64 %len) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setpv(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9961472
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %tobool1 = icmp eq i8* %ptr, null
  br i1 %tobool1, label %if.then2, label %if.end9

if.then2:                                         ; preds = %if.end
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and4 = and i32 %1, 1223753727
  store i32 %and4, i32* %sv_flags, align 4, !tbaa !3
  %and6 = and i32 %1, 2097152
  %tobool7 = icmp eq i32 %and6, 0
  br i1 %tobool7, label %if.end35, label %land.rhs

land.rhs:                                         ; preds = %if.then2
  %call = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  br label %if.end35

if.end9:                                          ; preds = %if.end
  %call10 = tail call i64 @strlen(i8* %ptr) #8
  %2 = load i32* %sv_flags, align 4, !tbaa !3
  %and12 = and i32 %2, 252
  %cmp = icmp eq i32 %and12, 0
  br i1 %cmp, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end9
  %call13 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 4) #7
  br label %lor.end

lor.end:                                          ; preds = %if.end9, %lor.rhs
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %3, i64 16
  %4 = bitcast i8* %xpv_len to i64*
  %5 = load i64* %4, align 8, !tbaa !5
  %add = add i64 %call10, 1
  %cmp15 = icmp ult i64 %5, %add
  br i1 %cmp15, label %cond.true, label %cond.end

cond.true:                                        ; preds = %lor.end
  %call18 = tail call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add) #7
  %.pre = load i8** %sv_any, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %lor.end, %cond.true
  %6 = phi i8* [ %3, %lor.end ], [ %.pre, %cond.true ]
  %xpv_pv21 = bitcast i8* %6 to i8**
  %7 = load i8** %xpv_pv21, align 8, !tbaa !0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %7, i8* %ptr, i64 %add, i32 1, i1 false)
  %8 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %8, i64 8
  %9 = bitcast i8* %xpv_cur to i64*
  store i64 %call10, i64* %9, align 8, !tbaa !5
  %10 = load i32* %sv_flags, align 4, !tbaa !3
  %and25 = and i32 %10, 1760624639
  %or = or i32 %and25, 67371008
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %11 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool27 = icmp ne i8 %11, 0
  %12 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool29 = icmp ne i8 %12, 0
  %or.cond = and i1 %tobool27, %tobool29
  br i1 %or.cond, label %if.then32, label %if.end35

if.then32:                                        ; preds = %cond.end
  tail call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end35

if.end35:                                         ; preds = %land.rhs, %if.then2, %if.then32, %cond.end
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setpv_mg(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  tail call void @Perl_sv_setpv(%struct.sv* %sv, i8* %ptr) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_usepvn(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9961472
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %1 = phi i32 [ %0, %entry ], [ %.pre, %if.then ]
  %and2 = and i32 %1, 252
  %cmp = icmp eq i32 %and2, 0
  br i1 %cmp, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end
  %call = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 4) #7
  %.pre75 = load i32* %sv_flags, align 4, !tbaa !3
  br label %lor.end

lor.end:                                          ; preds = %if.end, %lor.rhs
  %2 = phi i32 [ %1, %if.end ], [ %.pre75, %lor.rhs ]
  %tobool4 = icmp eq i8* %ptr, null
  br i1 %tobool4, label %if.then5, label %if.end13

if.then5:                                         ; preds = %lor.end
  %and7 = and i32 %2, 1223753727
  store i32 %and7, i32* %sv_flags, align 4, !tbaa !3
  %and9 = and i32 %2, 2097152
  %tobool10 = icmp eq i32 %and9, 0
  br i1 %tobool10, label %if.end51, label %land.rhs

land.rhs:                                         ; preds = %if.then5
  %call11 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  br label %if.end51

if.end13:                                         ; preds = %lor.end
  %and15 = and i32 %2, 2097152
  %tobool16 = icmp eq i32 %and15, 0
  br i1 %tobool16, label %land.end20, label %land.rhs17

land.rhs17:                                       ; preds = %if.end13
  %call18 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  br label %land.end20

land.end20:                                       ; preds = %if.end13, %land.rhs17
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %3 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  %tobool22 = icmp eq i8* %4, null
  br i1 %tobool22, label %if.end28, label %land.lhs.true

land.lhs.true:                                    ; preds = %land.end20
  %xpv_len = getelementptr inbounds i8* %3, i64 16
  %5 = bitcast i8* %xpv_len to i64*
  %6 = load i64* %5, align 8, !tbaa !5
  %tobool24 = icmp eq i64 %6, 0
  br i1 %tobool24, label %if.end28, label %if.then25

if.then25:                                        ; preds = %land.lhs.true
  tail call void @Perl_safesysfree(i8* %4) #8
  br label %if.end28

if.end28:                                         ; preds = %land.lhs.true, %land.end20, %if.then25
  %add = add i64 %len, 1
  %call29 = tail call i8* @Perl_safesysrealloc(i8* %ptr, i64 %add) #8
  %7 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv31 = bitcast i8* %7 to i8**
  store i8* %call29, i8** %xpv_pv31, align 8, !tbaa !0
  %8 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %8, i64 8
  %9 = bitcast i8* %xpv_cur to i64*
  store i64 %len, i64* %9, align 8, !tbaa !5
  %xpv_len35 = getelementptr inbounds i8* %8, i64 16
  %10 = bitcast i8* %xpv_len35 to i64*
  store i64 %add, i64* %10, align 8, !tbaa !5
  %xpv_pv37 = bitcast i8* %8 to i8**
  %11 = load i8** %xpv_pv37, align 8, !tbaa !0
  %add.ptr = getelementptr inbounds i8* %11, i64 %len
  store i8 0, i8* %add.ptr, align 1, !tbaa !1
  %12 = load i32* %sv_flags, align 4, !tbaa !3
  %and41 = and i32 %12, 1760624639
  %or = or i32 %and41, 67371008
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %13 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool43 = icmp ne i8 %13, 0
  %14 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool45 = icmp ne i8 %14, 0
  %or.cond = and i1 %tobool43, %tobool45
  br i1 %or.cond, label %if.then48, label %if.end51

if.then48:                                        ; preds = %if.end28
  tail call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end51

if.end51:                                         ; preds = %land.rhs, %if.then5, %if.then48, %if.end28
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_usepvn_mg(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  tail call void @Perl_sv_usepvn(%struct.sv* %sv, i8* %ptr, i64 %len) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: optsize
declare void @Perl_unsharepvn(i8*, i32, i32) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_unref_flags(%struct.sv* %sv, i32 %flags) #0 {
entry:
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %0 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %0 to %struct.sv**
  %1 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %2 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %2, -2146959360
  %cmp = icmp eq i32 %and, -2146959360
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call fastcc void @S_sv_del_backref(%struct.sv* %sv) #7
  %3 = load i32* %sv_flags, align 4, !tbaa !3
  %and2 = and i32 %3, 2146959359
  store i32 %and2, i32* %sv_flags, align 4, !tbaa !3
  %4 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv4 = bitcast i8* %4 to %struct.sv**
  store %struct.sv* null, %struct.sv** %xrv_rv4, align 8, !tbaa !0
  br label %if.end12

if.end:                                           ; preds = %entry
  store %struct.sv* null, %struct.sv** %xrv_rv, align 8, !tbaa !0
  %and8 = and i32 %2, -268959745
  store i32 %and8, i32* %sv_flags, align 4, !tbaa !3
  %sv_refcnt = getelementptr inbounds %struct.sv* %1, i64 0, i32 1
  %5 = load i32* %sv_refcnt, align 4, !tbaa !3
  %cmp9 = icmp eq i32 %5, 1
  br i1 %cmp9, label %lor.lhs.false, label %if.then11

lor.lhs.false:                                    ; preds = %if.end
  %and10 = and i32 %flags, 1
  %tobool = icmp eq i32 %and10, 0
  br i1 %tobool, label %if.else, label %if.then11

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  tail call void @Perl_sv_free(%struct.sv* %1) #7
  br label %if.end12

if.else:                                          ; preds = %lor.lhs.false
  %call = tail call %struct.sv* @Perl_sv_2mortal(%struct.sv* %1) #7
  br label %if.end12

if.end12:                                         ; preds = %if.then, %if.else, %if.then11
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_chop(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %tobool = icmp eq i8* %ptr, null
  br i1 %tobool, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 67108864
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %1 to i8**
  %2 = load i8** %xpv_pv, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint i8* %ptr to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %and3 = and i32 %0, 9961472
  %tobool4 = icmp eq i32 %and3, 0
  br i1 %tobool4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then5
  %3 = phi i32 [ %0, %if.end ], [ %.pre, %if.then5 ]
  %and8 = and i32 %3, 255
  %cmp = icmp ult i32 %and8, 5
  br i1 %cmp, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  %call = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 5) #7
  %.pre78 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end6
  %4 = phi i32 [ %.pre78, %if.then9 ], [ %3, %if.end6 ]
  %and12 = and i32 %4, 2097152
  %tobool13 = icmp eq i32 %and12, 0
  %5 = load i8** %sv_any, align 8, !tbaa !0
  br i1 %tobool13, label %if.then14, label %if.end37

if.then14:                                        ; preds = %if.end10
  %xpv_len = getelementptr inbounds i8* %5, i64 16
  %6 = bitcast i8* %xpv_len to i64*
  %7 = load i64* %6, align 8, !tbaa !5
  %tobool16 = icmp eq i64 %7, 0
  br i1 %tobool16, label %if.then17, label %if.end34

if.then17:                                        ; preds = %if.then14
  %xpv_pv19 = bitcast i8* %5 to i8**
  %8 = load i8** %xpv_pv19, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %5, i64 8
  %9 = bitcast i8* %xpv_cur to i64*
  %10 = load i64* %9, align 8, !tbaa !5
  %add = add i64 %10, 1
  %cmp23 = icmp eq i64 %add, 0
  br i1 %cmp23, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then17
  %call25 = tail call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add) #7
  %.pre79 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv29.phi.trans.insert = bitcast i8* %.pre79 to i8**
  %.pre80 = load i8** %xpv_pv29.phi.trans.insert, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %if.then17, %cond.true
  %11 = phi i8* [ %8, %if.then17 ], [ %.pre80, %cond.true ]
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %11, i8* %8, i64 %10, i32 1, i1 false)
  %12 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv31 = bitcast i8* %12 to i8**
  %13 = load i8** %xpv_pv31, align 8, !tbaa !0
  %xpv_cur33 = getelementptr inbounds i8* %12, i64 8
  %14 = bitcast i8* %xpv_cur33 to i64*
  %15 = load i64* %14, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8* %13, i64 %15
  store i8 0, i8* %add.ptr, align 1, !tbaa !1
  %.pre81 = load i8** %sv_any, align 8, !tbaa !0
  %.pre82 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end34

if.end34:                                         ; preds = %if.then14, %cond.end
  %16 = phi i32 [ %4, %if.then14 ], [ %.pre82, %cond.end ]
  %17 = phi i8* [ %5, %if.then14 ], [ %.pre81, %cond.end ]
  %xiv_iv = getelementptr inbounds i8* %17, i64 24
  %18 = bitcast i8* %xiv_iv to i64*
  store i64 0, i64* %18, align 8, !tbaa !5
  %or = or i32 %16, 2097152
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end37

if.end37:                                         ; preds = %if.end10, %if.end34
  %19 = phi i8* [ %17, %if.end34 ], [ %5, %if.end10 ]
  %20 = phi i32 [ %or, %if.end34 ], [ %4, %if.end10 ]
  %and39 = and i32 %20, 2096955391
  store i32 %and39, i32* %sv_flags, align 4, !tbaa !3
  %xpv_len41 = getelementptr inbounds i8* %19, i64 16
  %21 = bitcast i8* %xpv_len41 to i64*
  %22 = load i64* %21, align 8, !tbaa !5
  %sub = sub i64 %22, %sub.ptr.sub
  store i64 %sub, i64* %21, align 8, !tbaa !5
  %xpv_cur43 = getelementptr inbounds i8* %19, i64 8
  %23 = bitcast i8* %xpv_cur43 to i64*
  %24 = load i64* %23, align 8, !tbaa !5
  %sub44 = sub i64 %24, %sub.ptr.sub
  store i64 %sub44, i64* %23, align 8, !tbaa !5
  %xpv_pv46 = bitcast i8* %19 to i8**
  %25 = load i8** %xpv_pv46, align 8, !tbaa !0
  %add.ptr47 = getelementptr inbounds i8* %25, i64 %sub.ptr.sub
  store i8* %add.ptr47, i8** %xpv_pv46, align 8, !tbaa !0
  %26 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv49 = getelementptr inbounds i8* %26, i64 24
  %27 = bitcast i8* %xiv_iv49 to i64*
  %28 = load i64* %27, align 8, !tbaa !5
  %add50 = add i64 %28, %sub.ptr.sub
  store i64 %add50, i64* %27, align 8, !tbaa !5
  br label %return

return:                                           ; preds = %lor.lhs.false, %entry, %if.end37
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catpvn(%struct.sv* %dsv, i8* %sstr, i64 %slen) #0 {
entry:
  tail call void @Perl_sv_catpvn_flags(%struct.sv* %dsv, i8* %sstr, i64 %slen, i32 2) #7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catpvn_flags(%struct.sv* %dsv, i8* %sstr, i64 %slen, i32 %flags) #0 {
entry:
  %dlen = alloca i64, align 8
  %sv_flags = getelementptr inbounds %struct.sv* %dsv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 10223616
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %dsv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %dlen, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %dsv, i64* %dlen, i32 %flags) #7
  %sv_any2.phi.trans.insert = getelementptr inbounds %struct.sv* %dsv, i64 0, i32 0
  %.pre = load i8** %sv_any2.phi.trans.insert, align 8, !tbaa !0
  %.pre55 = load i64* %dlen, align 8, !tbaa !5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %5 = phi i64 [ %3, %cond.true ], [ %.pre55, %cond.false ]
  %6 = phi i8* [ %1, %cond.true ], [ %.pre, %cond.false ]
  %cond = phi i8* [ %4, %cond.true ], [ %call, %cond.false ]
  %sv_any2 = getelementptr inbounds %struct.sv* %dsv, i64 0, i32 0
  %xpv_len = getelementptr inbounds i8* %6, i64 16
  %7 = bitcast i8* %xpv_len to i64*
  %8 = load i64* %7, align 8, !tbaa !5
  %add = add i64 %slen, 1
  %add3 = add i64 %add, %5
  %cmp4 = icmp ult i64 %8, %add3
  br i1 %cmp4, label %cond.true5, label %cond.end12

cond.true5:                                       ; preds = %cond.end
  %call8 = call i8* @Perl_sv_grow(%struct.sv* %dsv, i64 %add3) #7
  br label %cond.end12

cond.end12:                                       ; preds = %cond.end, %cond.true5
  %cmp14 = icmp eq i8* %cond, %sstr
  %9 = load i8** %sv_any2, align 8, !tbaa !0
  %xpv_pv16 = bitcast i8* %9 to i8**
  %10 = load i8** %xpv_pv16, align 8, !tbaa !0
  %.sstr = select i1 %cmp14, i8* %10, i8* %sstr
  %11 = load i64* %dlen, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8* %10, i64 %11
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr, i8* %.sstr, i64 %slen, i32 1, i1 false)
  %12 = load i8** %sv_any2, align 8, !tbaa !0
  %xpv_cur20 = getelementptr inbounds i8* %12, i64 8
  %13 = bitcast i8* %xpv_cur20 to i64*
  %14 = load i64* %13, align 8, !tbaa !5
  %add21 = add i64 %14, %slen
  store i64 %add21, i64* %13, align 8, !tbaa !5
  %xpv_pv23 = bitcast i8* %12 to i8**
  %15 = load i8** %xpv_pv23, align 8, !tbaa !0
  %add.ptr26 = getelementptr inbounds i8* %15, i64 %add21
  store i8 0, i8* %add.ptr26, align 1, !tbaa !1
  %16 = load i32* %sv_flags, align 4, !tbaa !3
  %and28 = and i32 %16, 1760624639
  %or = or i32 %and28, 67371008
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %17 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool = icmp ne i8 %17, 0
  %18 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool31 = icmp ne i8 %18, 0
  %or.cond = and i1 %tobool, %tobool31
  br i1 %or.cond, label %if.then34, label %if.end37

if.then34:                                        ; preds = %cond.end12
  call void @Perl_sv_magic(%struct.sv* %dsv, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end37

if.end37:                                         ; preds = %if.then34, %cond.end12
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catpvn_mg(%struct.sv* %sv, i8* %ptr, i64 %len) #0 {
entry:
  tail call void @Perl_sv_catpvn_flags(%struct.sv* %sv, i8* %ptr, i64 %len, i32 2) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catsv(%struct.sv* %dstr, %struct.sv* %sstr) #0 {
entry:
  tail call void @Perl_sv_catsv_flags(%struct.sv* %dstr, %struct.sv* %sstr, i32 2) #7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catsv_flags(%struct.sv* %dsv, %struct.sv* %ssv, i32 %flags) #0 {
entry:
  %slen = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %ssv, null
  br i1 %tobool, label %if.end52, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %ssv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %ssv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %slen, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %ssv, i64* %slen, i32 2) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %4, %cond.true ], [ %call, %cond.false ]
  %tobool2 = icmp eq i8* %cond, null
  br i1 %tobool2, label %if.end52, label %if.then3

if.then3:                                         ; preds = %cond.end
  %5 = load i32* %sv_flags, align 4, !tbaa !3
  %and5 = and i32 %5, 536870912
  %tobool6 = icmp eq i32 %and5, 0
  br i1 %tobool6, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then3
  %6 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private = getelementptr inbounds %struct.cop* %6, i64 0, i32 7
  %7 = load i8* %op_private, align 1, !tbaa !1
  %and7 = and i8 %7, 8
  %lnot = icmp eq i8 %and7, 0
  br label %land.end

land.end:                                         ; preds = %if.then3, %land.rhs
  %8 = phi i1 [ false, %if.then3 ], [ %lnot, %land.rhs ]
  %sv_flags9 = getelementptr inbounds %struct.sv* %dsv, i64 0, i32 2
  %9 = load i32* %sv_flags9, align 4, !tbaa !3
  %and10 = and i32 %9, 8192
  %tobool11 = icmp eq i32 %and10, 0
  br i1 %tobool11, label %if.end16, label %land.lhs.true

land.lhs.true:                                    ; preds = %land.end
  %and12 = and i32 %flags, 2
  %tobool13 = icmp eq i32 %and12, 0
  br i1 %tobool13, label %if.end16, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  %call15 = call i32 @Perl_mg_get(%struct.sv* %dsv) #8
  %.pre = load i32* %sv_flags9, align 4, !tbaa !3
  br label %if.end16

if.end16:                                         ; preds = %land.lhs.true, %land.end, %if.then14
  %10 = phi i32 [ %9, %land.lhs.true ], [ %9, %land.end ], [ %.pre, %if.then14 ]
  %and18 = and i32 %10, 536870912
  %tobool19 = icmp eq i32 %and18, 0
  br i1 %tobool19, label %if.end16.land.end26_crit_edge, label %land.end26

if.end16.land.end26_crit_edge:                    ; preds = %if.end16
  br i1 %8, label %if.else, label %if.end51

land.end26:                                       ; preds = %if.end16
  %11 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private21 = getelementptr inbounds %struct.cop* %11, i64 0, i32 7
  %12 = load i8* %op_private21, align 1, !tbaa !1
  %and23 = and i8 %12, 8
  %lnot25 = icmp eq i8 %and23, 0
  %cmp28 = xor i1 %lnot25, %8
  br i1 %cmp28, label %if.then30, label %if.end51

if.then30:                                        ; preds = %land.end26
  br i1 %lnot25, label %if.then32, label %if.else

if.then32:                                        ; preds = %if.then30
  %13 = load i64* %slen, align 8, !tbaa !5
  %call33 = call %struct.sv* @Perl_newSVpvn(i8* %cond, i64 %13) #7
  %call34 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call33) #7
  %call35 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %call34, i32 2) #7
  %sv_flags36 = getelementptr inbounds %struct.sv* %call34, i64 0, i32 2
  %14 = load i32* %sv_flags36, align 4, !tbaa !3
  %and37 = and i32 %14, 262144
  %cmp38 = icmp eq i32 %and37, 0
  br i1 %cmp38, label %cond.false45, label %cond.true40

cond.true40:                                      ; preds = %if.then32
  %sv_any41 = getelementptr inbounds %struct.sv* %call34, i64 0, i32 0
  %15 = load i8** %sv_any41, align 8, !tbaa !0
  %xpv_cur42 = getelementptr inbounds i8* %15, i64 8
  %16 = bitcast i8* %xpv_cur42 to i64*
  %17 = load i64* %16, align 8, !tbaa !5
  store i64 %17, i64* %slen, align 8, !tbaa !5
  %xpv_pv44 = bitcast i8* %15 to i8**
  %18 = load i8** %xpv_pv44, align 8, !tbaa !0
  br label %if.end51

cond.false45:                                     ; preds = %if.then32
  %call46 = call i8* @Perl_sv_2pv_flags(%struct.sv* %call34, i64* %slen, i32 2) #7
  br label %if.end51

if.else:                                          ; preds = %if.end16.land.end26_crit_edge, %if.then30
  %call49 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %dsv, i32 0) #7
  br label %if.end51

if.end51:                                         ; preds = %land.end26, %if.end16.land.end26_crit_edge, %cond.true40, %cond.false45, %if.else
  %spv.0 = phi i8* [ %cond, %if.else ], [ %18, %cond.true40 ], [ %call46, %cond.false45 ], [ %cond, %if.end16.land.end26_crit_edge ], [ %cond, %land.end26 ]
  %19 = load i64* %slen, align 8, !tbaa !5
  call void @Perl_sv_catpvn_flags(%struct.sv* %dsv, i8* %spv.0, i64 %19, i32 0) #7
  br label %if.end52

if.end52:                                         ; preds = %cond.end, %entry, %if.end51
  ret void
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSVpvn(i8* %s, i64 %len) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  tail call void @Perl_sv_setpvn(%struct.sv* %sv.0, i8* %s, i64 %len) #7
  ret %struct.sv* %sv.0
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catsv_mg(%struct.sv* %dsv, %struct.sv* %ssv) #0 {
entry:
  tail call void @Perl_sv_catsv_flags(%struct.sv* %dsv, %struct.sv* %ssv, i32 2) #7
  %sv_flags = getelementptr inbounds %struct.sv* %dsv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @Perl_mg_set(%struct.sv* %dsv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catpv(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  %tlen = alloca i64, align 8
  %tobool = icmp eq i8* %ptr, null
  br i1 %tobool, label %if.end37, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 10223616
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %tlen, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %sv, i64* %tlen, i32 2) #7
  %sv_any3.phi.trans.insert = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %.pre = load i8** %sv_any3.phi.trans.insert, align 8, !tbaa !0
  %.pre55 = load i64* %tlen, align 8, !tbaa !5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %5 = phi i64 [ %3, %cond.true ], [ %.pre55, %cond.false ]
  %6 = phi i8* [ %1, %cond.true ], [ %.pre, %cond.false ]
  %cond = phi i8* [ %4, %cond.true ], [ %call, %cond.false ]
  %call2 = call i64 @strlen(i8* %ptr) #8
  %sv_any3 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %xpv_len = getelementptr inbounds i8* %6, i64 16
  %7 = bitcast i8* %xpv_len to i64*
  %8 = load i64* %7, align 8, !tbaa !5
  %add = add i64 %call2, 1
  %add4 = add i64 %add, %5
  %cmp5 = icmp ult i64 %8, %add4
  br i1 %cmp5, label %cond.true6, label %cond.end13

cond.true6:                                       ; preds = %cond.end
  %call9 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add4) #7
  br label %cond.end13

cond.end13:                                       ; preds = %cond.end, %cond.true6
  %cmp15 = icmp eq i8* %cond, %ptr
  %9 = load i8** %sv_any3, align 8, !tbaa !0
  %xpv_pv18 = bitcast i8* %9 to i8**
  %10 = load i8** %xpv_pv18, align 8, !tbaa !0
  %.ptr = select i1 %cmp15, i8* %10, i8* %ptr
  %11 = load i64* %tlen, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8* %10, i64 %11
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr, i8* %.ptr, i64 %add, i32 1, i1 false)
  %12 = load i8** %sv_any3, align 8, !tbaa !0
  %xpv_cur24 = getelementptr inbounds i8* %12, i64 8
  %13 = bitcast i8* %xpv_cur24 to i64*
  %14 = load i64* %13, align 8, !tbaa !5
  %add25 = add i64 %14, %call2
  store i64 %add25, i64* %13, align 8, !tbaa !5
  %15 = load i32* %sv_flags, align 4, !tbaa !3
  %and27 = and i32 %15, 1760624639
  %or = or i32 %and27, 67371008
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %16 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool29 = icmp ne i8 %16, 0
  %17 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool31 = icmp ne i8 %17, 0
  %or.cond = and i1 %tobool29, %tobool31
  br i1 %or.cond, label %if.then34, label %if.end37

if.then34:                                        ; preds = %cond.end13
  call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end37

if.end37:                                         ; preds = %entry, %if.then34, %cond.end13
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catpv_mg(%struct.sv* %sv, i8* %ptr) #0 {
entry:
  tail call void @Perl_sv_catpv(%struct.sv* %sv, i8* %ptr) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc %struct.sv* @S_more_sv() #0 {
entry:
  %0 = load i8** @PL_nice_chunk, align 8, !tbaa !0
  %tobool = icmp eq i8* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %1 = load i32* @PL_nice_chunk_size, align 4, !tbaa !3
  tail call void @Perl_sv_add_arena(i8* %0, i32 %1, i32 0) #7
  store i8* null, i8** @PL_nice_chunk, align 8, !tbaa !0
  store i32 0, i32* @PL_nice_chunk_size, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call i8* @Perl_safesysmalloc(i64 4080) #8
  %2 = bitcast i8* %call to %struct.sv*
  %3 = load %struct.sv** @PL_sv_arenaroot, align 8, !tbaa !0
  %4 = bitcast %struct.sv* %3 to i8*
  %sv_any.i = bitcast i8* %call to i8**
  store i8* %4, i8** %sv_any.i, align 8, !tbaa !0
  %sv_refcnt.i = getelementptr inbounds i8* %call, i64 8
  %5 = bitcast i8* %sv_refcnt.i to i32*
  store i32 255, i32* %5, align 4, !tbaa !3
  %sv_flags.i = getelementptr inbounds i8* %call, i64 12
  %6 = bitcast i8* %sv_flags.i to i32*
  store i32 0, i32* %6, align 4, !tbaa !3
  store %struct.sv* %2, %struct.sv** @PL_sv_arenaroot, align 8, !tbaa !0
  %add.ptr.i = getelementptr inbounds i8* %call, i64 16
  %7 = bitcast i8* %add.ptr.i to %struct.sv*
  store %struct.sv* %7, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %arrayidx.i = getelementptr inbounds i8* %call, i64 4064
  %8 = bitcast i8* %arrayidx.i to %struct.sv*
  br label %while.body.i

while.body.i:                                     ; preds = %while.body.i, %if.else
  %sv.025.i = phi %struct.sv* [ %add.ptr5.i, %while.body.i ], [ %7, %if.else ]
  %add.ptr5.i = getelementptr inbounds %struct.sv* %sv.025.i, i64 1
  %9 = bitcast %struct.sv* %add.ptr5.i to i8*
  %sv_any6.i = getelementptr inbounds %struct.sv* %sv.025.i, i64 0, i32 0
  store i8* %9, i8** %sv_any6.i, align 8, !tbaa !0
  %sv_refcnt7.i = getelementptr inbounds %struct.sv* %sv.025.i, i64 0, i32 1
  store i32 0, i32* %sv_refcnt7.i, align 4, !tbaa !3
  %sv_flags8.i = getelementptr inbounds %struct.sv* %sv.025.i, i64 0, i32 2
  store i32 255, i32* %sv_flags8.i, align 4, !tbaa !3
  %cmp.i = icmp ult %struct.sv* %add.ptr5.i, %8
  br i1 %cmp.i, label %while.body.i, label %Perl_sv_add_arena.exit

Perl_sv_add_arena.exit:                           ; preds = %while.body.i
  %sv_any9.i = getelementptr inbounds %struct.sv* %add.ptr5.i, i64 0, i32 0
  store i8* null, i8** %sv_any9.i, align 8, !tbaa !0
  %sv_flags10.i = getelementptr inbounds %struct.sv* %sv.025.i, i64 1, i32 2
  store i32 255, i32* %sv_flags10.i, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %Perl_sv_add_arena.exit, %if.then
  %10 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.sv* %10, i64 0, i32 0
  %11 = load i8** %sv_any, align 8, !tbaa !0
  %12 = bitcast i8* %11 to %struct.sv*
  store %struct.sv* %12, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %13 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %13, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  ret %struct.sv* %10
}

; Function Attrs: nounwind optsize uwtable
define %struct.magic* @Perl_sv_magicext(%struct.sv* %sv, %struct.sv* %obj, i32 %how, %struct.mgvtbl* %vtable, i8* %name, i32 %namlen) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 255
  %1 = icmp ugt i32 %and, 6
  br i1 %1, label %if.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %call = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 7) #7
  br label %if.end

if.end:                                           ; preds = %entry, %lor.rhs
  %call4 = tail call i8* @Perl_safesysmalloc(i64 48) #8
  %2 = bitcast i8* %call4 to %struct.magic*
  tail call void @llvm.memset.p0i8.i64(i8* %call4, i8 0, i64 48, i32 1, i1 false)
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !0
  %xmg_magic = getelementptr inbounds i8* %3, i64 40
  %4 = bitcast i8* %xmg_magic to %struct.magic**
  %5 = load %struct.magic** %4, align 8, !tbaa !0
  %mg_moremagic = bitcast i8* %call4 to %struct.magic**
  store %struct.magic* %5, %struct.magic** %mg_moremagic, align 8, !tbaa !0
  %6 = load i8** %sv_any, align 8, !tbaa !0
  %xmg_magic6 = getelementptr inbounds i8* %6, i64 40
  %7 = bitcast i8* %xmg_magic6 to %struct.magic**
  store %struct.magic* %2, %struct.magic** %7, align 8, !tbaa !0
  %tobool7 = icmp ne %struct.sv* %obj, null
  %tobool7.not = xor i1 %tobool7, true
  %cmp8 = icmp eq %struct.sv* %obj, %sv
  %or.cond179 = or i1 %cmp8, %tobool7.not
  br i1 %or.cond179, label %if.then49, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %if.end
  switch i32 %how, label %lor.lhs.false16 [
    i32 114, label %if.then49
    i32 35, label %if.then49
  ]

lor.lhs.false16:                                  ; preds = %lor.lhs.false10
  %sv_flags17 = getelementptr inbounds %struct.sv* %obj, i64 0, i32 2
  %8 = load i32* %sv_flags17, align 4, !tbaa !3
  %and18 = and i32 %8, 255
  %cmp19 = icmp eq i32 %and18, 13
  br i1 %cmp19, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false16
  %sv_any21 = getelementptr inbounds %struct.sv* %obj, i64 0, i32 0
  %9 = load i8** %sv_any21, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds i8* %9, i64 56
  %10 = bitcast i8* %xgv_gp to %struct.gp**
  %11 = load %struct.gp** %10, align 8, !tbaa !0
  %gp_sv = getelementptr inbounds %struct.gp* %11, i64 0, i32 0
  %12 = load %struct.sv** %gp_sv, align 8, !tbaa !0
  %cmp22 = icmp eq %struct.sv* %12, %sv
  br i1 %cmp22, label %if.then49, label %lor.lhs.false24

lor.lhs.false24:                                  ; preds = %land.lhs.true
  %gp_hv = getelementptr inbounds %struct.gp* %11, i64 0, i32 5
  %13 = load %struct.hv** %gp_hv, align 8, !tbaa !0
  %14 = bitcast %struct.sv* %sv to %struct.hv*
  %cmp27 = icmp eq %struct.hv* %13, %14
  br i1 %cmp27, label %if.then49, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %lor.lhs.false24
  %gp_av = getelementptr inbounds %struct.gp* %11, i64 0, i32 4
  %15 = load %struct.av** %gp_av, align 8, !tbaa !0
  %16 = bitcast %struct.sv* %sv to %struct.av*
  %cmp32 = icmp eq %struct.av* %15, %16
  br i1 %cmp32, label %if.then49, label %lor.lhs.false34

lor.lhs.false34:                                  ; preds = %lor.lhs.false29
  %gp_cv = getelementptr inbounds %struct.gp* %11, i64 0, i32 7
  %17 = load %struct.cv** %gp_cv, align 8, !tbaa !0
  %18 = bitcast %struct.sv* %sv to %struct.cv*
  %cmp37 = icmp eq %struct.cv* %17, %18
  br i1 %cmp37, label %if.then49, label %lor.lhs.false39

lor.lhs.false39:                                  ; preds = %lor.lhs.false34
  %gp_io = getelementptr inbounds %struct.gp* %11, i64 0, i32 2
  %19 = load %struct.io** %gp_io, align 8, !tbaa !0
  %20 = bitcast %struct.sv* %sv to %struct.io*
  %cmp42 = icmp eq %struct.io* %19, %20
  br i1 %cmp42, label %if.then49, label %lor.lhs.false44

lor.lhs.false44:                                  ; preds = %lor.lhs.false39
  %gp_form = getelementptr inbounds %struct.gp* %11, i64 0, i32 3
  %21 = load %struct.cv** %gp_form, align 8, !tbaa !0
  %cmp47 = icmp eq %struct.cv* %21, %18
  br i1 %cmp47, label %if.then49, label %if.else

if.then49:                                        ; preds = %lor.lhs.false10, %lor.lhs.false10, %if.end, %lor.lhs.false44, %lor.lhs.false39, %lor.lhs.false34, %lor.lhs.false29, %lor.lhs.false24, %land.lhs.true
  %mg_obj = getelementptr inbounds i8* %call4, i64 24
  %22 = bitcast i8* %mg_obj to %struct.sv**
  store %struct.sv* %obj, %struct.sv** %22, align 8, !tbaa !0
  br label %if.end55

if.else:                                          ; preds = %lor.lhs.false44, %lor.lhs.false16
  store %struct.sv* %obj, %struct.sv** @PL_Sv, align 8, !tbaa !0
  br i1 %tobool7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.else
  %sv_refcnt = getelementptr inbounds %struct.sv* %obj, i64 0, i32 1
  %23 = load i32* %sv_refcnt, align 4, !tbaa !3
  %inc = add i32 %23, 1
  store i32 %inc, i32* %sv_refcnt, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.else
  %mg_obj52 = getelementptr inbounds i8* %call4, i64 24
  %24 = bitcast i8* %mg_obj52 to %struct.sv**
  store %struct.sv* %obj, %struct.sv** %24, align 8, !tbaa !0
  %25 = getelementptr inbounds i8* %call4, i64 19
  %26 = load i8* %25, align 1, !tbaa !1
  %or = or i8 %26, 2
  store i8 %or, i8* %25, align 1, !tbaa !1
  br label %if.end55

if.end55:                                         ; preds = %land.end, %if.then49
  %cmp56 = icmp eq i32 %how, 113
  br i1 %cmp56, label %land.lhs.true58, label %if.end94

land.lhs.true58:                                  ; preds = %if.end55
  %27 = load i32* %sv_flags, align 4, !tbaa !3
  %and60 = and i32 %27, 255
  %cmp61.not = icmp ne i32 %and60, 15
  %brmerge = or i1 %cmp61.not, %tobool7.not
  br i1 %brmerge, label %if.end94, label %land.lhs.true65

land.lhs.true65:                                  ; preds = %land.lhs.true58
  %sv_flags66 = getelementptr inbounds %struct.sv* %obj, i64 0, i32 2
  %28 = load i32* %sv_flags66, align 4, !tbaa !3
  %and67 = and i32 %28, 524288
  %tobool68 = icmp eq i32 %and67, 0
  br i1 %tobool68, label %if.end94, label %land.lhs.true69

land.lhs.true69:                                  ; preds = %land.lhs.true65
  %sv_any70 = getelementptr inbounds %struct.sv* %obj, i64 0, i32 0
  %29 = load i8** %sv_any70, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %29 to %struct.sv**
  %30 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %tobool71 = icmp eq %struct.sv* %30, null
  br i1 %tobool71, label %cond.end, label %land.lhs.true72

land.lhs.true72:                                  ; preds = %land.lhs.true69
  %sv_flags75 = getelementptr inbounds %struct.sv* %30, i64 0, i32 2
  %31 = load i32* %sv_flags75, align 4, !tbaa !3
  %and76 = and i32 %31, 255
  %cmp77 = icmp eq i32 %and76, 13
  br i1 %cmp77, label %land.lhs.true79, label %cond.end

land.lhs.true79:                                  ; preds = %land.lhs.true72
  %sv_any82 = getelementptr inbounds %struct.sv* %30, i64 0, i32 0
  %32 = load i8** %sv_any82, align 8, !tbaa !0
  %xgv_gp83 = getelementptr inbounds i8* %32, i64 56
  %33 = bitcast i8* %xgv_gp83 to %struct.gp**
  %34 = load %struct.gp** %33, align 8, !tbaa !0
  %tobool84 = icmp eq %struct.gp* %34, null
  br i1 %tobool84, label %cond.end, label %cond.true

cond.true:                                        ; preds = %land.lhs.true79
  %gp_io89 = getelementptr inbounds %struct.gp* %34, i64 0, i32 2
  %35 = load %struct.io** %gp_io89, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %land.lhs.true79, %land.lhs.true69, %land.lhs.true72, %cond.true
  %cond = phi %struct.io* [ %35, %cond.true ], [ null, %land.lhs.true79 ], [ null, %land.lhs.true72 ], [ null, %land.lhs.true69 ]
  %36 = bitcast %struct.sv* %sv to %struct.io*
  %cmp90 = icmp eq %struct.io* %cond, %36
  br i1 %cmp90, label %if.then92, label %if.end94

if.then92:                                        ; preds = %cond.end
  %call93 = tail call %struct.sv* @Perl_sv_rvweaken(%struct.sv* %obj) #7
  br label %if.end94

if.end94:                                         ; preds = %land.lhs.true58, %land.lhs.true65, %if.then92, %cond.end, %if.end55
  %conv95 = trunc i32 %how to i8
  %37 = getelementptr inbounds i8* %call4, i64 18
  store i8 %conv95, i8* %37, align 1, !tbaa !1
  %mg_len = getelementptr inbounds i8* %call4, i64 40
  %38 = bitcast i8* %mg_len to i32*
  store i32 %namlen, i32* %38, align 4, !tbaa !3
  %tobool96 = icmp eq i8* %name, null
  br i1 %tobool96, label %if.end118, label %if.then97

if.then97:                                        ; preds = %if.end94
  %cmp98 = icmp sgt i32 %namlen, 0
  br i1 %cmp98, label %if.then100, label %if.else102

if.then100:                                       ; preds = %if.then97
  %call101 = tail call i8* @Perl_savepvn(i8* %name, i32 %namlen) #8
  %mg_ptr = getelementptr inbounds i8* %call4, i64 32
  %39 = bitcast i8* %mg_ptr to i8**
  store i8* %call101, i8** %39, align 8, !tbaa !0
  br label %if.end118

if.else102:                                       ; preds = %if.then97
  %cmp103 = icmp eq i32 %namlen, -2
  br i1 %cmp103, label %land.end111, label %if.else114

land.end111:                                      ; preds = %if.else102
  %40 = bitcast i8* %name to %struct.sv*
  store %struct.sv* %40, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_refcnt108 = getelementptr inbounds i8* %name, i64 8
  %41 = bitcast i8* %sv_refcnt108 to i32*
  %42 = load i32* %41, align 4, !tbaa !3
  %inc109 = add i32 %42, 1
  store i32 %inc109, i32* %41, align 4, !tbaa !3
  %mg_ptr113 = getelementptr inbounds i8* %call4, i64 32
  %43 = bitcast i8* %mg_ptr113 to i8**
  store i8* %name, i8** %43, align 8, !tbaa !0
  br label %if.end118

if.else114:                                       ; preds = %if.else102
  %mg_ptr115 = getelementptr inbounds i8* %call4, i64 32
  %44 = bitcast i8* %mg_ptr115 to i8**
  store i8* %name, i8** %44, align 8, !tbaa !0
  br label %if.end118

if.end118:                                        ; preds = %if.end94, %if.then100, %if.else114, %land.end111
  %mg_virtual = getelementptr inbounds i8* %call4, i64 8
  %45 = bitcast i8* %mg_virtual to %struct.mgvtbl**
  store %struct.mgvtbl* %vtable, %struct.mgvtbl** %45, align 8, !tbaa !0
  tail call void @Perl_mg_magical(%struct.sv* %sv) #8
  %46 = load i32* %sv_flags, align 4, !tbaa !3
  %and120 = and i32 %46, 8192
  %tobool121 = icmp eq i32 %and120, 0
  br i1 %tobool121, label %if.end125, label %if.then122

if.then122:                                       ; preds = %if.end118
  %and124 = and i32 %46, -458753
  store i32 %and124, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end125

if.end125:                                        ; preds = %if.end118, %if.then122
  ret %struct.magic* %2
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_rvweaken(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 118423552
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %and2 = and i32 %0, 524288
  %tobool3 = icmp eq i32 %and2, 0
  br i1 %tobool3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([28 x i8]* @.str37, i64 0, i64 0)) #8
  br label %if.end28

if.else:                                          ; preds = %if.end
  %and6 = and i32 %0, -2146959360
  %cmp = icmp eq i32 %and6, -2146959360
  br i1 %cmp, label %if.then7, label %if.end28

if.then7:                                         ; preds = %if.else
  %1 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %1, i64 0, i32 14
  %2 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp8 = icmp eq %struct.sv* %2, null
  br i1 %cmp8, label %lor.lhs.false17, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then7
  %3 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings9 = getelementptr inbounds %struct.cop* %3, i64 0, i32 14
  %4 = load %struct.sv** %cop_warnings9, align 8, !tbaa !0
  %cmp10 = icmp eq %struct.sv* %4, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp10, label %lor.lhs.false17, label %land.lhs.true11

land.lhs.true11:                                  ; preds = %land.lhs.true
  %5 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings12 = getelementptr inbounds %struct.cop* %5, i64 0, i32 14
  %6 = load %struct.sv** %cop_warnings12, align 8, !tbaa !0
  %cmp13 = icmp eq %struct.sv* %6, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp13, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true11
  %7 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings14 = getelementptr inbounds %struct.cop* %7, i64 0, i32 14
  %8 = load %struct.sv** %cop_warnings14, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.sv* %8, i64 0, i32 0
  %9 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %9 to i8**
  %10 = load i8** %xpv_pv, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %10, i64 3
  %11 = load i8* %arrayidx, align 1, !tbaa !1
  %and15 = and i8 %11, 1
  %tobool16 = icmp eq i8 %and15, 0
  br i1 %tobool16, label %lor.lhs.false17, label %if.then25

lor.lhs.false17:                                  ; preds = %lor.lhs.false, %land.lhs.true, %if.then7
  %12 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings18 = getelementptr inbounds %struct.cop* %12, i64 0, i32 14
  %13 = load %struct.sv** %cop_warnings18, align 8, !tbaa !0
  %cmp19 = icmp eq %struct.sv* %13, null
  br i1 %cmp19, label %land.lhs.true21, label %return

land.lhs.true21:                                  ; preds = %lor.lhs.false17
  %14 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and23 = and i8 %14, 1
  %tobool24 = icmp eq i8 %and23, 0
  br i1 %tobool24, label %return, label %if.then25

if.then25:                                        ; preds = %lor.lhs.false, %land.lhs.true21, %land.lhs.true11
  tail call void (i32, i8*, ...)* @Perl_warner(i32 12, i8* getelementptr inbounds ([26 x i8]* @.str38, i64 0, i64 0)) #8
  br label %return

if.end28:                                         ; preds = %if.else, %if.then4
  %sv_any29 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %15 = load i8** %sv_any29, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %15 to %struct.sv**
  %16 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_flags.i = getelementptr inbounds %struct.sv* %16, i64 0, i32 2
  %17 = load i32* %sv_flags.i, align 4, !tbaa !3
  %and.i = and i32 %17, 57344
  %tobool.i = icmp eq i32 %and.i, 0
  br i1 %tobool.i, label %if.else.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.end28
  %call.i = tail call %struct.magic* @Perl_mg_find(%struct.sv* %16, i32 60) #8
  %tobool1.i = icmp eq %struct.magic* %call.i, null
  br i1 %tobool1.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %land.lhs.true.i
  %mg_obj.i = getelementptr inbounds %struct.magic* %call.i, i64 0, i32 5
  %18 = load %struct.sv** %mg_obj.i, align 8, !tbaa !0
  %19 = bitcast %struct.sv* %18 to %struct.av*
  br label %if.end.i

if.else.i:                                        ; preds = %land.lhs.true.i, %if.end28
  %call2.i = tail call %struct.av* @Perl_newAV() #8
  %20 = bitcast %struct.av* %call2.i to %struct.sv*
  tail call void @Perl_sv_magic(%struct.sv* %16, %struct.sv* %20, i32 60, i8* null, i32 0) #8
  br label %if.end.i

if.end.i:                                         ; preds = %if.else.i, %if.then.i
  %av.0.i = phi %struct.av* [ %19, %if.then.i ], [ %call2.i, %if.else.i ]
  %sv_any.i = getelementptr inbounds %struct.av* %av.0.i, i64 0, i32 0
  %21 = load %struct.xpvav** %sv_any.i, align 8, !tbaa !0
  %xav_fill.i = getelementptr inbounds %struct.xpvav* %21, i64 0, i32 1
  %22 = load i64* %xav_fill.i, align 8, !tbaa !5
  %xav_max.i = getelementptr inbounds %struct.xpvav* %21, i64 0, i32 2
  %23 = load i64* %xav_max.i, align 8, !tbaa !5
  %cmp.i = icmp slt i64 %22, %23
  br i1 %cmp.i, label %if.end18.i, label %if.then4.i

if.then4.i:                                       ; preds = %if.end.i
  %xav_array.i = getelementptr inbounds %struct.xpvav* %21, i64 0, i32 0
  %24 = load i8** %xav_array.i, align 8, !tbaa !0
  %25 = bitcast i8* %24 to %struct.sv**
  %conv.i = trunc i64 %22 to i32
  %cmp8.i40 = icmp sgt i32 %conv.i, -1
  br i1 %cmp8.i40, label %for.body.i.lr.ph, label %for.end.i

for.body.i.lr.ph:                                 ; preds = %if.then4.i
  %sext = shl i64 %22, 32
  %26 = ashr exact i64 %sext, 32
  br label %for.body.i

for.cond.i:                                       ; preds = %for.body.i
  %indvars.iv.next = add i64 %indvars.iv, -1
  %27 = trunc i64 %indvars.iv to i32
  %cmp8.i = icmp sgt i32 %27, 0
  br i1 %cmp8.i, label %for.body.i, label %for.end.i

for.body.i:                                       ; preds = %for.body.i.lr.ph, %for.cond.i
  %indvars.iv = phi i64 [ %26, %for.body.i.lr.ph ], [ %indvars.iv.next, %for.cond.i ]
  %arrayidx.i = getelementptr inbounds %struct.sv** %25, i64 %indvars.iv
  %28 = load %struct.sv** %arrayidx.i, align 8, !tbaa !0
  %tobool10.i = icmp eq %struct.sv* %28, null
  br i1 %tobool10.i, label %if.then11.i, label %for.cond.i

if.then11.i:                                      ; preds = %for.body.i
  store %struct.sv* %sv, %struct.sv** %arrayidx.i, align 8, !tbaa !0
  br label %S_sv_add_backref.exit

for.end.i:                                        ; preds = %for.cond.i, %if.then4.i
  %add.i = add nsw i64 %22, 1
  %conv17.i = trunc i64 %add.i to i32
  tail call void @Perl_av_extend(%struct.av* %av.0.i, i32 %conv17.i) #8
  %.pre = load %struct.xpvav** %sv_any.i, align 8, !tbaa !0
  %xav_fill20.i.phi.trans.insert = getelementptr inbounds %struct.xpvav* %.pre, i64 0, i32 1
  %.pre43 = load i64* %xav_fill20.i.phi.trans.insert, align 8, !tbaa !5
  br label %if.end18.i

if.end18.i:                                       ; preds = %for.end.i, %if.end.i
  %29 = phi i64 [ %.pre43, %for.end.i ], [ %22, %if.end.i ]
  %30 = phi %struct.xpvav* [ %.pre, %for.end.i ], [ %21, %if.end.i ]
  %xav_fill20.i = getelementptr inbounds %struct.xpvav* %30, i64 0, i32 1
  %inc.i = add nsw i64 %29, 1
  store i64 %inc.i, i64* %xav_fill20.i, align 8, !tbaa !5
  %xav_array22.i = getelementptr inbounds %struct.xpvav* %30, i64 0, i32 0
  %31 = load i8** %xav_array22.i, align 8, !tbaa !0
  %32 = bitcast i8* %31 to %struct.sv**
  %arrayidx23.i = getelementptr inbounds %struct.sv** %32, i64 %inc.i
  store %struct.sv* %sv, %struct.sv** %arrayidx23.i, align 8, !tbaa !0
  br label %S_sv_add_backref.exit

S_sv_add_backref.exit:                            ; preds = %if.then11.i, %if.end18.i
  %33 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %33, -2146959360
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  tail call void @Perl_sv_free(%struct.sv* %16) #7
  br label %return

return:                                           ; preds = %lor.lhs.false17, %if.then25, %land.lhs.true21, %entry, %S_sv_add_backref.exit
  ret %struct.sv* %sv
}

; Function Attrs: optsize
declare void @Perl_mg_magical(%struct.sv*) #2

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_sv_unmagic(%struct.sv* %sv, i32 %type) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 255
  %cmp = icmp ult i32 %and, 7
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xmg_magic = getelementptr inbounds i8* %1, i64 40
  %2 = bitcast i8* %xmg_magic to %struct.magic**
  %3 = load %struct.magic** %2, align 8, !tbaa !0
  %tobool = icmp eq %struct.magic* %3, null
  br i1 %tobool, label %return, label %for.body

for.body:                                         ; preds = %lor.lhs.false, %for.inc
  %mgp.087 = phi %struct.magic** [ %mgp.1, %for.inc ], [ %2, %lor.lhs.false ]
  %mg.086 = phi %struct.magic* [ %15, %for.inc ], [ %3, %lor.lhs.false ]
  %mg_type = getelementptr inbounds %struct.magic* %mg.086, i64 0, i32 3
  %4 = load i8* %mg_type, align 1, !tbaa !1
  %conv = sext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv, %type
  br i1 %cmp4, label %if.then6, label %if.else47

if.then6:                                         ; preds = %for.body
  %mg_virtual = getelementptr inbounds %struct.magic* %mg.086, i64 0, i32 1
  %5 = load %struct.mgvtbl** %mg_virtual, align 8, !tbaa !0
  %mg_moremagic = getelementptr inbounds %struct.magic* %mg.086, i64 0, i32 0
  %6 = load %struct.magic** %mg_moremagic, align 8, !tbaa !0
  store %struct.magic* %6, %struct.magic** %mgp.087, align 8, !tbaa !0
  %tobool7 = icmp eq %struct.mgvtbl* %5, null
  br i1 %tobool7, label %if.end11, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then6
  %svt_free = getelementptr inbounds %struct.mgvtbl* %5, i64 0, i32 4
  %7 = load i32 (%struct.sv*, %struct.magic*)** %svt_free, align 8, !tbaa !0
  %tobool8 = icmp eq i32 (%struct.sv*, %struct.magic*)* %7, null
  br i1 %tobool8, label %if.end11, label %if.then9

if.then9:                                         ; preds = %land.lhs.true
  %call = tail call i32 %7(%struct.sv* %sv, %struct.magic* %mg.086) #8
  br label %if.end11

if.end11:                                         ; preds = %land.lhs.true, %if.then6, %if.then9
  %mg_ptr = getelementptr inbounds %struct.magic* %mg.086, i64 0, i32 6
  %8 = load i8** %mg_ptr, align 8, !tbaa !0
  %tobool12 = icmp eq i8* %8, null
  br i1 %tobool12, label %if.end41, label %land.lhs.true13

land.lhs.true13:                                  ; preds = %if.end11
  %9 = load i8* %mg_type, align 1, !tbaa !1
  %cmp16 = icmp eq i8 %9, 103
  br i1 %cmp16, label %if.end41, label %if.then18

if.then18:                                        ; preds = %land.lhs.true13
  %mg_len = getelementptr inbounds %struct.magic* %mg.086, i64 0, i32 7
  %10 = load i32* %mg_len, align 4, !tbaa !3
  %cmp19 = icmp sgt i32 %10, 0
  br i1 %cmp19, label %if.then21, label %if.else

if.then21:                                        ; preds = %if.then18
  tail call void @Perl_safesysfree(i8* %8) #8
  br label %if.end41

if.else:                                          ; preds = %if.then18
  %cmp24 = icmp eq i32 %10, -2
  br i1 %cmp24, label %if.then26, label %if.else28

if.then26:                                        ; preds = %if.else
  %11 = bitcast i8* %8 to %struct.sv*
  tail call void @Perl_sv_free(%struct.sv* %11) #7
  br label %if.end41

if.else28:                                        ; preds = %if.else
  %cmp31.not = icmp eq i8 %9, 119
  br i1 %cmp31.not, label %if.then36, label %if.end41

if.then36:                                        ; preds = %if.else28
  tail call void @Perl_safesysfree(i8* %8) #8
  br label %if.end41

if.end41:                                         ; preds = %if.else28, %if.end11, %land.lhs.true13, %if.then21, %if.then36, %if.then26
  %mg_flags = getelementptr inbounds %struct.magic* %mg.086, i64 0, i32 4
  %12 = load i8* %mg_flags, align 1, !tbaa !1
  %and43 = and i8 %12, 2
  %tobool44 = icmp eq i8 %and43, 0
  br i1 %tobool44, label %if.end46, label %if.then45

if.then45:                                        ; preds = %if.end41
  %mg_obj = getelementptr inbounds %struct.magic* %mg.086, i64 0, i32 5
  %13 = load %struct.sv** %mg_obj, align 8, !tbaa !0
  tail call void @Perl_sv_free(%struct.sv* %13) #7
  br label %if.end46

if.end46:                                         ; preds = %if.end41, %if.then45
  %14 = bitcast %struct.magic* %mg.086 to i8*
  tail call void @Perl_safesysfree(i8* %14) #8
  br label %for.inc

if.else47:                                        ; preds = %for.body
  %mg_moremagic48 = getelementptr inbounds %struct.magic* %mg.086, i64 0, i32 0
  br label %for.inc

for.inc:                                          ; preds = %if.end46, %if.else47
  %mgp.1 = phi %struct.magic** [ %mgp.087, %if.end46 ], [ %mg_moremagic48, %if.else47 ]
  %15 = load %struct.magic** %mgp.1, align 8, !tbaa !0
  %tobool3 = icmp eq %struct.magic* %15, null
  br i1 %tobool3, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  %.pre = load i8** %sv_any, align 8, !tbaa !0
  %xmg_magic51.phi.trans.insert = getelementptr inbounds i8* %.pre, i64 40
  %.phi.trans.insert = bitcast i8* %xmg_magic51.phi.trans.insert to %struct.magic**
  %.pre88 = load %struct.magic** %.phi.trans.insert, align 8, !tbaa !0
  %tobool52 = icmp eq %struct.magic* %.pre88, null
  br i1 %tobool52, label %if.then53, label %return

if.then53:                                        ; preds = %for.end
  %16 = load i32* %sv_flags, align 4, !tbaa !3
  %and55 = and i32 %16, -57345
  %and57 = lshr i32 %16, 8
  %shr = and i32 %and57, 393216
  %or = or i32 %shr, %and55
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %if.then53, %for.end, %entry, %lor.lhs.false
  ret i32 0
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_insert(%struct.sv* %bigstr, i64 %offset, i64 %len, i8* nocapture %little, i64 %littlelen) #0 {
entry:
  %curlen = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %bigstr, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([36 x i8]* @.str39, i64 0, i64 0)) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %sv_flags = getelementptr inbounds %struct.sv* %bigstr, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 10223616
  %cmp = icmp eq i32 %and, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %bigstr, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %curlen, align 8, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %bigstr, i64* %curlen, i32 2) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  %.pre292 = load i64* %curlen, align 8, !tbaa !5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %4 = phi i64 [ %.pre292, %cond.false ], [ %3, %cond.true ]
  %5 = phi i32 [ %.pre, %cond.false ], [ %0, %cond.true ]
  %and3 = and i32 %5, 1760624639
  %or = or i32 %and3, 67371008
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %add = add i64 %len, %offset
  %cmp5 = icmp ugt i64 %add, %4
  br i1 %cmp5, label %if.then6, label %if.end26

if.then6:                                         ; preds = %cond.end
  %sv_any7 = getelementptr inbounds %struct.sv* %bigstr, i64 0, i32 0
  %6 = load i8** %sv_any7, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %6, i64 16
  %7 = bitcast i8* %xpv_len to i64*
  %8 = load i64* %7, align 8, !tbaa !5
  %add9 = add i64 %add, 1
  %cmp10 = icmp ult i64 %8, %add9
  br i1 %cmp10, label %cond.true11, label %cond.end18

cond.true11:                                      ; preds = %if.then6
  %call14 = call i8* @Perl_sv_grow(%struct.sv* %bigstr, i64 %add9) #7
  %.pre293 = load i8** %sv_any7, align 8, !tbaa !0
  %.pre294 = load i64* %curlen, align 8, !tbaa !5
  br label %cond.end18

cond.end18:                                       ; preds = %if.then6, %cond.true11
  %9 = phi i64 [ %4, %if.then6 ], [ %.pre294, %cond.true11 ]
  %10 = phi i8* [ %6, %if.then6 ], [ %.pre293, %cond.true11 ]
  %xpv_pv21 = bitcast i8* %10 to i8**
  %11 = load i8** %xpv_pv21, align 8, !tbaa !0
  %add.ptr = getelementptr inbounds i8* %11, i64 %9
  %sub = sub i64 %add, %9
  call void @llvm.memset.p0i8.i64(i8* %add.ptr, i8 0, i64 %sub, i32 1, i1 false)
  %12 = load i8** %sv_any7, align 8, !tbaa !0
  %xpv_cur25 = getelementptr inbounds i8* %12, i64 8
  %13 = bitcast i8* %xpv_cur25 to i64*
  store i64 %add, i64* %13, align 8, !tbaa !5
  br label %if.end26

if.end26:                                         ; preds = %cond.end18, %cond.end
  %14 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool27 = icmp ne i8 %14, 0
  %15 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool29 = icmp ne i8 %15, 0
  %or.cond = and i1 %tobool27, %tobool29
  br i1 %or.cond, label %if.then32, label %if.end35

if.then32:                                        ; preds = %if.end26
  call void @Perl_sv_magic(%struct.sv* %bigstr, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %if.end26
  %sub36 = sub i64 %littlelen, %len
  %conv = trunc i64 %sub36 to i32
  %cmp37 = icmp sgt i32 %conv, 0
  br i1 %cmp37, label %if.then39, label %if.else

if.then39:                                        ; preds = %if.end35
  %sv_any40 = getelementptr inbounds %struct.sv* %bigstr, i64 0, i32 0
  %16 = load i8** %sv_any40, align 8, !tbaa !0
  %xpv_len41 = getelementptr inbounds i8* %16, i64 16
  %17 = bitcast i8* %xpv_len41 to i64*
  %18 = load i64* %17, align 8, !tbaa !5
  %xpv_cur43 = getelementptr inbounds i8* %16, i64 8
  %19 = bitcast i8* %xpv_cur43 to i64*
  %20 = load i64* %19, align 8, !tbaa !5
  %sext284 = shl i64 %sub36, 32
  %conv44 = ashr exact i64 %sext284, 32
  %add45 = add i64 %conv44, 1
  %add46 = add i64 %add45, %20
  %cmp47 = icmp ult i64 %18, %add46
  br i1 %cmp47, label %cond.true49, label %cond.false56

cond.true49:                                      ; preds = %if.then39
  %call55 = call i8* @Perl_sv_grow(%struct.sv* %bigstr, i64 %add46) #7
  %.pre295 = load i8** %sv_any40, align 8, !tbaa !0
  %xpv_cur64.phi.trans.insert = getelementptr inbounds i8* %.pre295, i64 8
  %.phi.trans.insert = bitcast i8* %xpv_cur64.phi.trans.insert to i64*
  %.pre296 = load i64* %.phi.trans.insert, align 8, !tbaa !5
  br label %cond.end59

cond.false56:                                     ; preds = %if.then39
  %xpv_pv58 = bitcast i8* %16 to i8**
  %21 = load i8** %xpv_pv58, align 8, !tbaa !0
  br label %cond.end59

cond.end59:                                       ; preds = %cond.false56, %cond.true49
  %22 = phi i64 [ %.pre296, %cond.true49 ], [ %20, %cond.false56 ]
  %cond60 = phi i8* [ %call55, %cond.true49 ], [ %21, %cond.false56 ]
  %add.ptr61 = getelementptr inbounds i8* %cond60, i64 %offset
  %add.ptr62 = getelementptr inbounds i8* %cond60, i64 %add
  %add.ptr65.sum = add i64 %22, %conv44
  %add.ptr66 = getelementptr inbounds i8* %cond60, i64 %add.ptr65.sum
  store i8 0, i8* %add.ptr66, align 1, !tbaa !1
  %cmp67285 = icmp sgt i64 %22, %add
  br i1 %cmp67285, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %cond.end59
  %add.ptr65 = getelementptr inbounds i8* %cond60, i64 %22
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %bigend.0287 = phi i8* [ %add.ptr66, %while.body.lr.ph ], [ %incdec.ptr69, %while.body ]
  %midend.0286 = phi i8* [ %add.ptr65, %while.body.lr.ph ], [ %incdec.ptr, %while.body ]
  %incdec.ptr = getelementptr inbounds i8* %midend.0286, i64 -1
  %23 = load i8* %incdec.ptr, align 1, !tbaa !1
  %incdec.ptr69 = getelementptr inbounds i8* %bigend.0287, i64 -1
  store i8 %23, i8* %incdec.ptr69, align 1, !tbaa !1
  %cmp67 = icmp ugt i8* %incdec.ptr, %add.ptr62
  br i1 %cmp67, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %cond.end59
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr61, i8* %little, i64 %littlelen, i32 1, i1 false)
  %24 = load i8** %sv_any40, align 8, !tbaa !0
  %xpv_cur74 = getelementptr inbounds i8* %24, i64 8
  %25 = bitcast i8* %xpv_cur74 to i64*
  %26 = load i64* %25, align 8, !tbaa !5
  %add75 = add i64 %26, %conv44
  store i64 %add75, i64* %25, align 8, !tbaa !5
  %27 = load i32* %sv_flags, align 4, !tbaa !3
  %and77 = and i32 %27, 16384
  %tobool78 = icmp eq i32 %and77, 0
  br i1 %tobool78, label %if.end174, label %if.then79

if.then79:                                        ; preds = %while.end
  %call80 = call i32 @Perl_mg_set(%struct.sv* %bigstr) #8
  br label %if.end174

if.else:                                          ; preds = %if.end35
  %cmp82 = icmp eq i32 %conv, 0
  %sv_any85 = getelementptr inbounds %struct.sv* %bigstr, i64 0, i32 0
  %28 = load i8** %sv_any85, align 8, !tbaa !0
  %xpv_pv86 = bitcast i8* %28 to i8**
  %29 = load i8** %xpv_pv86, align 8, !tbaa !0
  %add.ptr87 = getelementptr inbounds i8* %29, i64 %offset
  br i1 %cmp82, label %if.then84, label %if.end96

if.then84:                                        ; preds = %if.else
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr87, i8* %little, i64 %len, i32 1, i1 false)
  %30 = load i32* %sv_flags, align 4, !tbaa !3
  %and90 = and i32 %30, 16384
  %tobool91 = icmp eq i32 %and90, 0
  br i1 %tobool91, label %if.end174, label %if.then92

if.then92:                                        ; preds = %if.then84
  %call93 = call i32 @Perl_mg_set(%struct.sv* %bigstr) #8
  br label %if.end174

if.end96:                                         ; preds = %if.else
  %add.ptr100 = getelementptr inbounds i8* %29, i64 %add
  %xpv_cur102 = getelementptr inbounds i8* %28, i64 8
  %31 = bitcast i8* %xpv_cur102 to i64*
  %32 = load i64* %31, align 8, !tbaa !5
  %cmp104 = icmp sgt i64 %add, %32
  br i1 %cmp104, label %if.then106, label %if.end107

if.then106:                                       ; preds = %if.end96
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([17 x i8]* @.str40, i64 0, i64 0)) #8
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end96
  %sub.ptr.rhs.cast = ptrtoint i8* %29 to i64
  %33 = sub i64 %32, %add
  %cmp111 = icmp slt i64 %33, %offset
  br i1 %cmp111, label %if.then113, label %if.else136

if.then113:                                       ; preds = %if.end107
  %tobool114 = icmp eq i64 %littlelen, 0
  br i1 %tobool114, label %if.end118, label %if.then115

if.then115:                                       ; preds = %if.then113
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr87, i8* %little, i64 %littlelen, i32 1, i1 false)
  %add.ptr99.sum283 = add i64 %littlelen, %offset
  %add.ptr117 = getelementptr inbounds i8* %29, i64 %add.ptr99.sum283
  br label %if.end118

if.end118:                                        ; preds = %if.then113, %if.then115
  %mid.0 = phi i8* [ %add.ptr117, %if.then115 ], [ %add.ptr87, %if.then113 ]
  %conv122 = trunc i64 %33 to i32
  %cmp123 = icmp sgt i32 %conv122, 0
  br i1 %cmp123, label %if.then125, label %if.end130

if.then125:                                       ; preds = %if.end118
  %sext282 = shl i64 %33, 32
  %conv126 = ashr exact i64 %sext282, 32
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %mid.0, i8* %add.ptr100, i64 %conv126, i32 1, i1 false)
  %add.ptr129 = getelementptr inbounds i8* %mid.0, i64 %conv126
  br label %if.end130

if.end130:                                        ; preds = %if.then125, %if.end118
  %mid.1 = phi i8* [ %add.ptr129, %if.then125 ], [ %mid.0, %if.end118 ]
  store i8 0, i8* %mid.1, align 1, !tbaa !1
  %sub.ptr.lhs.cast131 = ptrtoint i8* %mid.1 to i64
  %sub.ptr.sub133 = sub i64 %sub.ptr.lhs.cast131, %sub.ptr.rhs.cast
  %34 = load i8** %sv_any85, align 8, !tbaa !0
  %xpv_cur135 = getelementptr inbounds i8* %34, i64 8
  %35 = bitcast i8* %xpv_cur135 to i64*
  store i64 %sub.ptr.sub133, i64* %35, align 8, !tbaa !5
  br label %if.end168

if.else136:                                       ; preds = %if.end107
  %conv140 = trunc i64 %offset to i32
  %tobool141 = icmp eq i32 %conv140, 0
  br i1 %tobool141, label %if.else159, label %while.body151.lr.ph

while.body151.lr.ph:                              ; preds = %if.else136
  %add.ptr100.sum281 = sub i64 %add, %littlelen
  %add.ptr143 = getelementptr inbounds i8* %29, i64 %add.ptr100.sum281
  %sext = shl i64 %offset, 32
  %idx.ext144 = ashr exact i64 %sext, 32
  %add.ptr143.sum = sub i64 %add.ptr100.sum281, %idx.ext144
  %add.ptr146 = getelementptr inbounds i8* %29, i64 %add.ptr143.sum
  call void @Perl_sv_chop(%struct.sv* %bigstr, i8* %add.ptr146) #7
  %add.ptr148 = getelementptr inbounds i8* %29, i64 %idx.ext144
  br label %while.body151

while.body151:                                    ; preds = %while.body151.lr.ph, %while.body151
  %i.0291 = phi i32 [ %conv140, %while.body151.lr.ph ], [ %dec, %while.body151 ]
  %midend.1290 = phi i8* [ %add.ptr143, %while.body151.lr.ph ], [ %incdec.ptr153, %while.body151 ]
  %big.0289 = phi i8* [ %add.ptr148, %while.body151.lr.ph ], [ %incdec.ptr152, %while.body151 ]
  %dec = add nsw i32 %i.0291, -1
  %incdec.ptr152 = getelementptr inbounds i8* %big.0289, i64 -1
  %36 = load i8* %incdec.ptr152, align 1, !tbaa !1
  %incdec.ptr153 = getelementptr inbounds i8* %midend.1290, i64 -1
  store i8 %36, i8* %incdec.ptr153, align 1, !tbaa !1
  %tobool150 = icmp eq i32 %dec, 0
  br i1 %tobool150, label %while.end154, label %while.body151

while.end154:                                     ; preds = %while.body151
  %tobool155 = icmp eq i64 %littlelen, 0
  br i1 %tobool155, label %if.end168, label %if.then156

if.then156:                                       ; preds = %while.end154
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr143, i8* %little, i64 %littlelen, i32 1, i1 false)
  br label %if.end168

if.else159:                                       ; preds = %if.else136
  %tobool160 = icmp eq i64 %littlelen, 0
  br i1 %tobool160, label %if.else165, label %if.then161

if.then161:                                       ; preds = %if.else159
  %add.ptr100.sum = sub i64 %add, %littlelen
  %add.ptr163 = getelementptr inbounds i8* %29, i64 %add.ptr100.sum
  call void @Perl_sv_chop(%struct.sv* %bigstr, i8* %add.ptr163) #7
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %add.ptr163, i8* %little, i64 %littlelen, i32 1, i1 false)
  br label %if.end168

if.else165:                                       ; preds = %if.else159
  call void @Perl_sv_chop(%struct.sv* %bigstr, i8* %add.ptr100) #7
  br label %if.end168

if.end168:                                        ; preds = %while.end154, %if.then156, %if.else165, %if.then161, %if.end130
  %37 = load i32* %sv_flags, align 4, !tbaa !3
  %and170 = and i32 %37, 16384
  %tobool171 = icmp eq i32 %and170, 0
  br i1 %tobool171, label %if.end174, label %if.then172

if.then172:                                       ; preds = %if.end168
  %call173 = call i32 @Perl_mg_set(%struct.sv* %bigstr) #8
  br label %if.end174

if.end174:                                        ; preds = %while.end, %if.then84, %if.end168, %if.then92, %if.then79, %if.then172
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_replace(%struct.sv* %sv, %struct.sv* %nsv) #0 {
entry:
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv, i64 0, i32 1
  %0 = load i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %1, 9961472
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %sv_refcnt1 = getelementptr inbounds %struct.sv* %nsv, i64 0, i32 1
  %2 = load i32* %sv_refcnt1, align 4, !tbaa !3
  %cmp = icmp eq i32 %2, 1
  br i1 %cmp, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %3 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %3, i64 0, i32 14
  %4 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp2 = icmp eq %struct.sv* %4, null
  br i1 %cmp2, label %if.then12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %5 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings3 = getelementptr inbounds %struct.cop* %5, i64 0, i32 14
  %6 = load %struct.sv** %cop_warnings3, align 8, !tbaa !0
  %cmp4 = icmp eq %struct.sv* %6, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp4, label %if.then12, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %7 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings6 = getelementptr inbounds %struct.cop* %7, i64 0, i32 14
  %8 = load %struct.sv** %cop_warnings6, align 8, !tbaa !0
  %cmp7 = icmp eq %struct.sv* %8, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp7, label %if.end13, label %land.lhs.true8

land.lhs.true8:                                   ; preds = %lor.lhs.false5
  %9 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings9 = getelementptr inbounds %struct.cop* %9, i64 0, i32 14
  %10 = load %struct.sv** %cop_warnings9, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.sv* %10, i64 0, i32 0
  %11 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %11 to i8**
  %12 = load i8** %xpv_pv, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %12, i64 6
  %13 = load i8* %arrayidx, align 1, !tbaa !1
  %and10 = and i8 %13, 1
  %tobool11 = icmp eq i8 %and10, 0
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %land.lhs.true8, %lor.lhs.false, %land.lhs.true
  tail call void (i32, i8*, ...)* @Perl_warner(i32 24, i8* getelementptr inbounds ([35 x i8]* @.str41, i64 0, i64 0)) #8
  br label %if.end13

if.end13:                                         ; preds = %land.lhs.true8, %lor.lhs.false5, %if.end, %if.then12
  %14 = load i32* %sv_flags, align 4, !tbaa !3
  %and15 = and i32 %14, 57344
  %tobool16 = icmp eq i32 %and15, 0
  %sv_flags37.pre = getelementptr inbounds %struct.sv* %nsv, i64 0, i32 2
  br i1 %tobool16, label %if.end13.if.end34_crit_edge, label %if.then17

if.end13.if.end34_crit_edge:                      ; preds = %if.end13
  %sv_any40.pre = getelementptr inbounds %struct.sv* %nsv, i64 0, i32 0
  br label %if.end34

if.then17:                                        ; preds = %if.end13
  %15 = load i32* %sv_flags37.pre, align 4, !tbaa !3
  %and19 = and i32 %15, 57344
  %tobool20 = icmp eq i32 %and19, 0
  br i1 %tobool20, label %if.else, label %if.then21

if.then21:                                        ; preds = %if.then17
  %call = tail call i32 @Perl_mg_free(%struct.sv* %nsv) #8
  br label %if.end23

if.else:                                          ; preds = %if.then17
  %call22 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %nsv, i32 7) #7
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then21
  %sv_any24 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %16 = load i8** %sv_any24, align 8, !tbaa !0
  %xmg_magic = getelementptr inbounds i8* %16, i64 40
  %17 = bitcast i8* %xmg_magic to %struct.magic**
  %18 = load %struct.magic** %17, align 8, !tbaa !0
  %sv_any25 = getelementptr inbounds %struct.sv* %nsv, i64 0, i32 0
  %19 = load i8** %sv_any25, align 8, !tbaa !0
  %xmg_magic26 = getelementptr inbounds i8* %19, i64 40
  %20 = bitcast i8* %xmg_magic26 to %struct.magic**
  store %struct.magic* %18, %struct.magic** %20, align 8, !tbaa !0
  %21 = load i32* %sv_flags, align 4, !tbaa !3
  %and28 = and i32 %21, 57344
  %22 = load i32* %sv_flags37.pre, align 4, !tbaa !3
  %or = or i32 %22, %and28
  store i32 %or, i32* %sv_flags37.pre, align 4, !tbaa !3
  %23 = load i32* %sv_flags, align 4, !tbaa !3
  %and31 = and i32 %23, -57345
  store i32 %and31, i32* %sv_flags, align 4, !tbaa !3
  %24 = load i8** %sv_any24, align 8, !tbaa !0
  %xmg_magic33 = getelementptr inbounds i8* %24, i64 40
  %25 = bitcast i8* %xmg_magic33 to %struct.magic**
  store %struct.magic* null, %struct.magic** %25, align 8, !tbaa !0
  br label %if.end34

if.end34:                                         ; preds = %if.end13.if.end34_crit_edge, %if.end23
  %sv_any40.pre-phi = phi i8** [ %sv_any40.pre, %if.end13.if.end34_crit_edge ], [ %sv_any25, %if.end23 ]
  store i32 0, i32* %sv_refcnt, align 4, !tbaa !3
  tail call void @Perl_sv_clear(%struct.sv* %sv) #7
  %26 = bitcast %struct.sv* %sv to i8*
  %27 = bitcast %struct.sv* %nsv to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false), !tbaa.struct !8
  store i32 %0, i32* %sv_refcnt, align 4, !tbaa !3
  store i32 0, i32* %sv_refcnt1, align 4, !tbaa !3
  %28 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %29 = bitcast %struct.sv* %28 to i8*
  store i8* %29, i8** %sv_any40.pre-phi, align 8, !tbaa !0
  store i32 255, i32* %sv_flags37.pre, align 4, !tbaa !3
  store %struct.sv* %nsv, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %30 = load i32* @PL_sv_count, align 4, !tbaa !3
  %dec = add nsw i32 %30, -1
  store i32 %dec, i32* @PL_sv_count, align 4, !tbaa !3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_clear(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 4096
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end124, label %if.then

if.then:                                          ; preds = %entry
  %1 = load %struct.hv** @PL_defstash, align 8, !tbaa !0
  %tobool1 = icmp eq %struct.hv* %1, null
  br i1 %tobool1, label %if.end107, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %tobool.i = icmp eq %struct.sv* %sv, null
  %sv_refcnt86 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 1
  %.pre443 = load i8** %sv_any, align 8, !tbaa !0
  %xmg_stash.phi.trans.insert = getelementptr inbounds i8* %.pre443, i64 48
  %.phi.trans.insert = bitcast i8* %xmg_stash.phi.trans.insert to %struct.hv**
  %.pre444 = load %struct.hv** %.phi.trans.insert, align 8, !tbaa !0
  br label %do.body

do.body:                                          ; preds = %land.rhs, %if.then2
  %3 = phi %struct.hv* [ %.pre444, %if.then2 ], [ %60, %land.rhs ]
  %sp.0 = phi %struct.sv** [ %2, %if.then2 ], [ %sp.2, %land.rhs ]
  %call = tail call %struct.cv* @Perl_gv_handler(%struct.hv* %3, i32 65) #8
  %tobool3 = icmp eq %struct.cv* %call, null
  br i1 %tobool3, label %do.cond, label %if.then4

if.then4:                                         ; preds = %do.body
  store %struct.sv* %sv, %struct.sv** @PL_Sv, align 8, !tbaa !0
  br i1 %tobool.i, label %Perl_newRV.exit, label %land.rhs.i

land.rhs.i:                                       ; preds = %if.then4
  %4 = load i32* %sv_refcnt86, align 4, !tbaa !3
  %inc.i = add i32 %4, 1
  store i32 %inc.i, i32* %sv_refcnt86, align 4, !tbaa !3
  br label %Perl_newRV.exit

Perl_newRV.exit:                                  ; preds = %if.then4, %land.rhs.i
  %call.i = tail call %struct.sv* @Perl_newRV_noinc(%struct.sv* %sv) #8
  %sv_flags6 = getelementptr inbounds %struct.sv* %call.i, i64 0, i32 2
  %5 = load i32* %sv_flags6, align 4, !tbaa !3
  %or = or i32 %5, 8388608
  store i32 %or, i32* %sv_flags6, align 4, !tbaa !3
  tail call void @Perl_push_scope() #8
  %6 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_next = getelementptr inbounds %struct.stackinfo* %6, i64 0, i32 6
  %7 = load %struct.stackinfo** %si_next, align 8, !tbaa !0
  %tobool7 = icmp eq %struct.stackinfo* %7, null
  br i1 %tobool7, label %if.then8, label %if.end

if.then8:                                         ; preds = %Perl_newRV.exit
  %call9 = tail call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 13) #8
  %8 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_prev = getelementptr inbounds %struct.stackinfo* %call9, i64 0, i32 5
  store %struct.stackinfo* %8, %struct.stackinfo** %si_prev, align 8, !tbaa !0
  %9 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_next10 = getelementptr inbounds %struct.stackinfo* %9, i64 0, i32 6
  store %struct.stackinfo* %call9, %struct.stackinfo** %si_next10, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %Perl_newRV.exit, %if.then8
  %next.0 = phi %struct.stackinfo* [ %7, %Perl_newRV.exit ], [ %call9, %if.then8 ]
  %si_type = getelementptr inbounds %struct.stackinfo* %next.0, i64 0, i32 4
  store i32 6, i32* %si_type, align 4, !tbaa !3
  %si_cxix = getelementptr inbounds %struct.stackinfo* %next.0, i64 0, i32 2
  store i32 -1, i32* %si_cxix, align 4, !tbaa !3
  %si_stack = getelementptr inbounds %struct.stackinfo* %next.0, i64 0, i32 0
  %10 = load %struct.av** %si_stack, align 8, !tbaa !0
  %sv_any11 = getelementptr inbounds %struct.av* %10, i64 0, i32 0
  %11 = load %struct.xpvav** %sv_any11, align 8, !tbaa !0
  %xav_fill = getelementptr inbounds %struct.xpvav* %11, i64 0, i32 1
  store i64 0, i64* %xav_fill, align 8, !tbaa !5
  %12 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %sp.0 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 3
  %13 = load %struct.av** @PL_curstack, align 8, !tbaa !0
  %sv_any12 = getelementptr inbounds %struct.av* %13, i64 0, i32 0
  %14 = load %struct.xpvav** %sv_any12, align 8, !tbaa !0
  %xav_fill13 = getelementptr inbounds %struct.xpvav* %14, i64 0, i32 1
  store i64 %sub.ptr.div, i64* %xav_fill13, align 8, !tbaa !5
  %xav_array = getelementptr inbounds %struct.xpvav* %11, i64 0, i32 0
  %15 = load i8** %xav_array, align 8, !tbaa !0
  %16 = bitcast i8* %15 to %struct.sv**
  store %struct.sv** %16, %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %17 = load %struct.av** %si_stack, align 8, !tbaa !0
  %sv_any17 = getelementptr inbounds %struct.av* %17, i64 0, i32 0
  %18 = load %struct.xpvav** %sv_any17, align 8, !tbaa !0
  %xav_max = getelementptr inbounds %struct.xpvav* %18, i64 0, i32 2
  %19 = load i64* %xav_max, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds %struct.sv** %16, i64 %19
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %20 = load %struct.av** %si_stack, align 8, !tbaa !0
  %sv_any19 = getelementptr inbounds %struct.av* %20, i64 0, i32 0
  %21 = load %struct.xpvav** %sv_any19, align 8, !tbaa !0
  %xav_fill20 = getelementptr inbounds %struct.xpvav* %21, i64 0, i32 1
  %22 = load i64* %xav_fill20, align 8, !tbaa !5
  %add.ptr21 = getelementptr inbounds %struct.sv** %16, i64 %22
  store %struct.sv** %add.ptr21, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %23 = load %struct.av** %si_stack, align 8, !tbaa !0
  store %struct.av* %23, %struct.av** @PL_curstack, align 8, !tbaa !0
  store %struct.stackinfo* %next.0, %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %sub.ptr.lhs.cast23 = ptrtoint %struct.sv** %add.ptr to i64
  %sub.ptr.rhs.cast24 = ptrtoint %struct.sv** %add.ptr21 to i64
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24
  %cmp = icmp slt i64 %sub.ptr.sub25, 16
  br i1 %cmp, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end
  %call28 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %add.ptr21, %struct.sv** %add.ptr21, i32 2) #8
  br label %if.end29

if.end29:                                         ; preds = %if.then27, %if.end
  %sp.1 = phi %struct.sv** [ %call28, %if.then27 ], [ %add.ptr21, %if.end ]
  %24 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds i32* %24, i64 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8, !tbaa !0
  %25 = load i32** @PL_markstack_max, align 8, !tbaa !0
  %cmp30 = icmp eq i32* %incdec.ptr, %25
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end29
  tail call void @Perl_markstack_grow() #8
  %.pre445 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  br label %if.end32

if.end32:                                         ; preds = %if.end29, %if.then31
  %26 = phi i32* [ %.pre445, %if.then31 ], [ %incdec.ptr, %if.end29 ]
  %27 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast33 = ptrtoint %struct.sv** %sp.1 to i64
  %sub.ptr.rhs.cast34 = ptrtoint %struct.sv** %27 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %sub.ptr.div36431 = lshr exact i64 %sub.ptr.sub35, 3
  %conv = trunc i64 %sub.ptr.div36431 to i32
  store i32 %conv, i32* %26, align 4, !tbaa !3
  %incdec.ptr37 = getelementptr inbounds %struct.sv** %sp.1, i64 1
  store %struct.sv* %call.i, %struct.sv** %incdec.ptr37, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr37, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %28 = bitcast %struct.cv* %call to %struct.sv*
  %call38 = tail call i32 @Perl_call_sv(%struct.sv* %28, i32 150) #8
  %29 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %30 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_prev40 = getelementptr inbounds %struct.stackinfo* %30, i64 0, i32 5
  %31 = load %struct.stackinfo** %si_prev40, align 8, !tbaa !0
  %tobool41 = icmp eq %struct.stackinfo* %31, null
  br i1 %tobool41, label %if.then42, label %if.end64

if.then42:                                        ; preds = %if.end32
  %32 = load %struct.gv** @PL_stderrgv, align 8, !tbaa !0
  %tobool43 = icmp eq %struct.gv* %32, null
  br i1 %tobool43, label %cond.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then42
  %sv_flags44 = getelementptr inbounds %struct.gv* %32, i64 0, i32 2
  %33 = load i32* %sv_flags44, align 4, !tbaa !3
  %and45 = and i32 %33, 255
  %cmp46 = icmp eq i32 %and45, 13
  br i1 %cmp46, label %land.lhs.true48, label %cond.false

land.lhs.true48:                                  ; preds = %land.lhs.true
  %sv_any49 = getelementptr inbounds %struct.gv* %32, i64 0, i32 0
  %34 = load %struct.xpvgv** %sv_any49, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %34, i64 0, i32 7
  %35 = load %struct.gp** %xgv_gp, align 8, !tbaa !0
  %gp_io = getelementptr inbounds %struct.gp* %35, i64 0, i32 2
  %36 = load %struct.io** %gp_io, align 8, !tbaa !0
  %tobool50 = icmp eq %struct.io* %36, null
  br i1 %tobool50, label %cond.false, label %land.lhs.true51

land.lhs.true51:                                  ; preds = %land.lhs.true48
  %sv_any55 = getelementptr inbounds %struct.io* %36, i64 0, i32 0
  %37 = load %struct.xpvio** %sv_any55, align 8, !tbaa !0
  %xio_ofp = getelementptr inbounds %struct.xpvio* %37, i64 0, i32 8
  %38 = load %struct._PerlIO*** %xio_ofp, align 8, !tbaa !0
  %tobool56 = icmp eq %struct._PerlIO** %38, null
  br i1 %tobool56, label %cond.false, label %cond.end

cond.false:                                       ; preds = %land.lhs.true51, %land.lhs.true48, %if.then42, %land.lhs.true
  %call62 = tail call %struct._PerlIO** @Perl_PerlIO_stderr() #8
  br label %cond.end

cond.end:                                         ; preds = %land.lhs.true51, %cond.false
  %cond = phi %struct._PerlIO** [ %call62, %cond.false ], [ %38, %land.lhs.true51 ]
  %call63 = tail call i32 (%struct._PerlIO**, i8*, ...)* @PerlIO_printf(%struct._PerlIO** %cond, i8* getelementptr inbounds ([17 x i8]* @.str42, i64 0, i64 0)) #8
  tail call void @Perl_my_exit(i32 1) #8
  br label %if.end64

if.end64:                                         ; preds = %if.end32, %cond.end
  %39 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast65 = ptrtoint %struct.sv** %29 to i64
  %sub.ptr.rhs.cast66 = ptrtoint %struct.sv** %39 to i64
  %sub.ptr.sub67 = sub i64 %sub.ptr.lhs.cast65, %sub.ptr.rhs.cast66
  %sub.ptr.div68 = ashr exact i64 %sub.ptr.sub67, 3
  %40 = load %struct.av** @PL_curstack, align 8, !tbaa !0
  %sv_any69 = getelementptr inbounds %struct.av* %40, i64 0, i32 0
  %41 = load %struct.xpvav** %sv_any69, align 8, !tbaa !0
  %xav_fill70 = getelementptr inbounds %struct.xpvav* %41, i64 0, i32 1
  store i64 %sub.ptr.div68, i64* %xav_fill70, align 8, !tbaa !5
  %si_stack71 = getelementptr inbounds %struct.stackinfo* %31, i64 0, i32 0
  %42 = load %struct.av** %si_stack71, align 8, !tbaa !0
  %sv_any72 = getelementptr inbounds %struct.av* %42, i64 0, i32 0
  %43 = load %struct.xpvav** %sv_any72, align 8, !tbaa !0
  %xav_array73 = getelementptr inbounds %struct.xpvav* %43, i64 0, i32 0
  %44 = load i8** %xav_array73, align 8, !tbaa !0
  %45 = bitcast i8* %44 to %struct.sv**
  store %struct.sv** %45, %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %46 = load %struct.av** %si_stack71, align 8, !tbaa !0
  %sv_any75 = getelementptr inbounds %struct.av* %46, i64 0, i32 0
  %47 = load %struct.xpvav** %sv_any75, align 8, !tbaa !0
  %xav_max76 = getelementptr inbounds %struct.xpvav* %47, i64 0, i32 2
  %48 = load i64* %xav_max76, align 8, !tbaa !5
  %add.ptr77 = getelementptr inbounds %struct.sv** %45, i64 %48
  store %struct.sv** %add.ptr77, %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %49 = load %struct.av** %si_stack71, align 8, !tbaa !0
  %sv_any79 = getelementptr inbounds %struct.av* %49, i64 0, i32 0
  %50 = load %struct.xpvav** %sv_any79, align 8, !tbaa !0
  %xav_fill80 = getelementptr inbounds %struct.xpvav* %50, i64 0, i32 1
  %51 = load i64* %xav_fill80, align 8, !tbaa !5
  %add.ptr81 = getelementptr inbounds %struct.sv** %45, i64 %51
  store %struct.sv** %add.ptr81, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %52 = load %struct.av** %si_stack71, align 8, !tbaa !0
  store %struct.av* %52, %struct.av** @PL_curstack, align 8, !tbaa !0
  store %struct.stackinfo* %31, %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  tail call void @Perl_pop_scope() #8
  %sv_refcnt = getelementptr inbounds %struct.sv* %call.i, i64 0, i32 1
  %53 = load i32* %sv_refcnt, align 4, !tbaa !3
  %cmp83 = icmp ult i32 %53, 2
  br i1 %cmp83, label %if.then85, label %if.end90

if.then85:                                        ; preds = %if.end64
  %54 = load i32* %sv_refcnt86, align 4, !tbaa !3
  %dec = add i32 %54, -1
  store i32 %dec, i32* %sv_refcnt86, align 4, !tbaa !3
  %sv_any87 = getelementptr inbounds %struct.sv* %call.i, i64 0, i32 0
  %55 = load i8** %sv_any87, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %55 to %struct.sv**
  store %struct.sv* null, %struct.sv** %xrv_rv, align 8, !tbaa !0
  %56 = load i32* %sv_flags6, align 4, !tbaa !3
  %and89 = and i32 %56, -268959745
  store i32 %and89, i32* %sv_flags6, align 4, !tbaa !3
  br label %if.end90

if.end90:                                         ; preds = %if.then85, %if.end64
  tail call void @Perl_sv_free(%struct.sv* %call.i) #7
  br label %do.cond

do.cond:                                          ; preds = %do.body, %if.end90
  %sp.2 = phi %struct.sv** [ %add.ptr81, %if.end90 ], [ %sp.0, %do.body ]
  %57 = load i32* %sv_flags, align 4, !tbaa !3
  %and93 = and i32 %57, 4096
  %tobool94 = icmp eq i32 %and93, 0
  br i1 %tobool94, label %do.end, label %land.rhs

land.rhs:                                         ; preds = %do.cond
  %58 = load i8** %sv_any, align 8, !tbaa !0
  %xmg_stash96 = getelementptr inbounds i8* %58, i64 48
  %59 = bitcast i8* %xmg_stash96 to %struct.hv**
  %60 = load %struct.hv** %59, align 8, !tbaa !0
  %cmp97 = icmp eq %struct.hv* %60, %3
  br i1 %cmp97, label %do.end, label %do.body

do.end:                                           ; preds = %land.rhs, %do.cond
  %61 = load i32* %sv_refcnt86, align 4, !tbaa !3
  %tobool100 = icmp eq i32 %61, 0
  br i1 %tobool100, label %if.end107, label %if.then101

if.then101:                                       ; preds = %do.end
  %62 = load i8* @PL_in_clean_objs, align 1, !tbaa !1
  %tobool102 = icmp eq i8 %62, 0
  br i1 %tobool102, label %return, label %if.then103

if.then103:                                       ; preds = %if.then101
  %sv_any104 = getelementptr inbounds %struct.hv* %3, i64 0, i32 0
  %63 = load %struct.xpvhv** %sv_any104, align 8, !tbaa !0
  %xhv_name = getelementptr inbounds %struct.xpvhv* %63, i64 0, i32 10
  %64 = load i8** %xhv_name, align 8, !tbaa !0
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([50 x i8]* @.str43, i64 0, i64 0), i8* %64) #8
  br label %return

if.end107:                                        ; preds = %do.end, %if.then
  %65 = phi i32 [ %57, %do.end ], [ %0, %if.then ]
  %and109 = and i32 %65, 4096
  %tobool110 = icmp eq i32 %and109, 0
  br i1 %tobool110, label %if.end124, label %if.then111

if.then111:                                       ; preds = %if.end107
  %sv_any112 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %66 = load i8** %sv_any112, align 8, !tbaa !0
  %xmg_stash113 = getelementptr inbounds i8* %66, i64 48
  %67 = bitcast i8* %xmg_stash113 to %struct.hv**
  %68 = load %struct.hv** %67, align 8, !tbaa !0
  %69 = bitcast %struct.hv* %68 to %struct.sv*
  tail call void @Perl_sv_free(%struct.sv* %69) #7
  %70 = load i32* %sv_flags, align 4, !tbaa !3
  %and115 = and i32 %70, -4097
  store i32 %and115, i32* %sv_flags, align 4, !tbaa !3
  %and117 = and i32 %70, 255
  %cmp118 = icmp eq i32 %and117, 15
  br i1 %cmp118, label %if.end124, label %if.then120

if.then120:                                       ; preds = %if.then111
  %71 = load i32* @PL_sv_objcount, align 4, !tbaa !3
  %dec121 = add nsw i32 %71, -1
  store i32 %dec121, i32* @PL_sv_objcount, align 4, !tbaa !3
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end124

if.end124:                                        ; preds = %if.then111, %if.end107, %entry, %if.then120
  %72 = phi i32 [ %and115, %if.then111 ], [ %65, %if.end107 ], [ %0, %entry ], [ %.pre, %if.then120 ]
  %and126 = and i32 %72, 255
  %cmp127 = icmp ugt i32 %and126, 6
  br i1 %cmp127, label %if.then129, label %if.end142

if.then129:                                       ; preds = %if.end124
  %sv_any130 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %73 = load i8** %sv_any130, align 8, !tbaa !0
  %xmg_magic = getelementptr inbounds i8* %73, i64 40
  %74 = bitcast i8* %xmg_magic to %struct.magic**
  %75 = load %struct.magic** %74, align 8, !tbaa !0
  %tobool131 = icmp eq %struct.magic* %75, null
  br i1 %tobool131, label %if.end134, label %if.then132

if.then132:                                       ; preds = %if.then129
  %call133 = tail call i32 @Perl_mg_free(%struct.sv* %sv) #8
  %.pre439 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end134

if.end134:                                        ; preds = %if.then129, %if.then132
  %76 = phi i32 [ %72, %if.then129 ], [ %.pre439, %if.then132 ]
  %and136 = and i32 %76, 1073741824
  %tobool137 = icmp eq i32 %and136, 0
  br i1 %tobool137, label %if.end142, label %if.then138

if.then138:                                       ; preds = %if.end134
  %77 = load i8** %sv_any130, align 8, !tbaa !0
  %xmg_stash140 = getelementptr inbounds i8* %77, i64 48
  %78 = bitcast i8* %xmg_stash140 to %struct.hv**
  %79 = load %struct.hv** %78, align 8, !tbaa !0
  %80 = bitcast %struct.hv* %79 to %struct.sv*
  tail call void @Perl_sv_free(%struct.sv* %80) #7
  %.pre440 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end142

if.end142:                                        ; preds = %if.end134, %if.then138, %if.end124
  %81 = phi i32 [ %76, %if.end134 ], [ %.pre440, %if.then138 ], [ %72, %if.end124 ]
  %and144 = and i32 %81, 255
  switch i32 %and144, label %sw.epilog [
    i32 15, label %sw.bb
    i32 8, label %freescalar
    i32 12, label %sw.bb188
    i32 14, label %sw.bb188
    i32 11, label %sw.bb189
    i32 10, label %sw.bb190
    i32 9, label %sw.bb191
    i32 13, label %sw.bb212
    i32 7, label %freescalar
    i32 6, label %freescalar
    i32 5, label %freescalar
    i32 4, label %sw.bb223
    i32 3, label %sw.bb223
  ]

sw.bb:                                            ; preds = %if.end142
  %sv_any145 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %82 = load i8** %sv_any145, align 8, !tbaa !0
  %xio_ifp = getelementptr inbounds i8* %82, i64 56
  %83 = bitcast i8* %xio_ifp to %struct._PerlIO***
  %84 = load %struct._PerlIO*** %83, align 8, !tbaa !0
  %tobool146 = icmp eq %struct._PerlIO** %84, null
  br i1 %tobool146, label %if.end167, label %land.lhs.true147

land.lhs.true147:                                 ; preds = %sw.bb
  %call150 = tail call %struct._PerlIO** @Perl_PerlIO_stdin() #8
  %cmp151 = icmp eq %struct._PerlIO** %84, %call150
  br i1 %cmp151, label %if.end167, label %land.lhs.true153

land.lhs.true153:                                 ; preds = %land.lhs.true147
  %85 = load i8** %sv_any145, align 8, !tbaa !0
  %xio_ifp155 = getelementptr inbounds i8* %85, i64 56
  %86 = bitcast i8* %xio_ifp155 to %struct._PerlIO***
  %87 = load %struct._PerlIO*** %86, align 8, !tbaa !0
  %call156 = tail call %struct._PerlIO** @Perl_PerlIO_stdout() #8
  %cmp157 = icmp eq %struct._PerlIO** %87, %call156
  br i1 %cmp157, label %if.end167, label %land.lhs.true159

land.lhs.true159:                                 ; preds = %land.lhs.true153
  %88 = load i8** %sv_any145, align 8, !tbaa !0
  %xio_ifp161 = getelementptr inbounds i8* %88, i64 56
  %89 = bitcast i8* %xio_ifp161 to %struct._PerlIO***
  %90 = load %struct._PerlIO*** %89, align 8, !tbaa !0
  %call162 = tail call %struct._PerlIO** @Perl_PerlIO_stderr() #8
  %cmp163 = icmp eq %struct._PerlIO** %90, %call162
  br i1 %cmp163, label %if.end167, label %if.then165

if.then165:                                       ; preds = %land.lhs.true159
  %91 = bitcast %struct.sv* %sv to %struct.io*
  %call166 = tail call signext i8 @Perl_io_close(%struct.io* %91, i8 signext 0) #8
  br label %if.end167

if.end167:                                        ; preds = %land.lhs.true159, %land.lhs.true153, %land.lhs.true147, %sw.bb, %if.then165
  %92 = load i8** %sv_any145, align 8, !tbaa !0
  %xio_dirpu = getelementptr inbounds i8* %92, i64 72
  %xiou_dirp = bitcast i8* %xio_dirpu to %struct.__dirstream**
  %93 = load %struct.__dirstream** %xiou_dirp, align 8, !tbaa !0
  %tobool169 = icmp eq %struct.__dirstream* %93, null
  br i1 %tobool169, label %if.end180, label %land.lhs.true170

land.lhs.true170:                                 ; preds = %if.end167
  %94 = getelementptr inbounds i8* %92, i64 163
  %95 = load i8* %94, align 1, !tbaa !1
  %and173 = and i8 %95, 64
  %tobool174 = icmp eq i8 %and173, 0
  br i1 %tobool174, label %if.then175, label %if.end180

if.then175:                                       ; preds = %land.lhs.true170
  %call179 = tail call i32 @closedir(%struct.__dirstream* %93) #8
  %.pre441 = load i8** %sv_any145, align 8, !tbaa !0
  br label %if.end180

if.end180:                                        ; preds = %land.lhs.true170, %if.end167, %if.then175
  %96 = phi i8* [ %92, %land.lhs.true170 ], [ %92, %if.end167 ], [ %.pre441, %if.then175 ]
  %xio_dirpu182 = getelementptr inbounds i8* %96, i64 72
  %xiou_dirp183 = bitcast i8* %xio_dirpu182 to %struct.__dirstream**
  store %struct.__dirstream* null, %struct.__dirstream** %xiou_dirp183, align 8, !tbaa !0
  %97 = load i8** %sv_any145, align 8, !tbaa !0
  %xio_top_name = getelementptr inbounds i8* %97, i64 112
  %98 = bitcast i8* %xio_top_name to i8**
  %99 = load i8** %98, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %99) #8
  %100 = load i8** %sv_any145, align 8, !tbaa !0
  %xio_fmt_name = getelementptr inbounds i8* %100, i64 128
  %101 = bitcast i8* %xio_fmt_name to i8**
  %102 = load i8** %101, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %102) #8
  %103 = load i8** %sv_any145, align 8, !tbaa !0
  %xio_bottom_name = getelementptr inbounds i8* %103, i64 144
  %104 = bitcast i8* %xio_bottom_name to i8**
  %105 = load i8** %104, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %105) #8
  br label %freescalar

sw.bb188:                                         ; preds = %if.end142, %if.end142
  %106 = bitcast %struct.sv* %sv to %struct.cv*
  tail call void @Perl_cv_undef(%struct.cv* %106) #8
  br label %freescalar

sw.bb189:                                         ; preds = %if.end142
  %107 = bitcast %struct.sv* %sv to %struct.hv*
  tail call void @Perl_hv_undef(%struct.hv* %107) #8
  br label %sw.epilog

sw.bb190:                                         ; preds = %if.end142
  %108 = bitcast %struct.sv* %sv to %struct.av*
  tail call void @Perl_av_undef(%struct.av* %108) #8
  br label %sw.epilog

sw.bb191:                                         ; preds = %if.end142
  %sv_any192 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %109 = load i8** %sv_any192, align 8, !tbaa !0
  %110 = getelementptr inbounds i8* %109, i64 80
  %111 = load i8* %110, align 1, !tbaa !1
  switch i8 %111, label %if.then207 [
    i8 84, label %if.then196
    i8 116, label %freescalar
  ]

if.then196:                                       ; preds = %sw.bb191
  %xlv_targ = getelementptr inbounds i8* %109, i64 72
  %112 = bitcast i8* %xlv_targ to %struct.sv**
  %113 = load %struct.sv** %112, align 8, !tbaa !0
  %hent_hek = getelementptr inbounds %struct.sv* %113, i64 0, i32 1
  %114 = bitcast i32* %hent_hek to %struct.hek**
  %115 = load %struct.hek** %114, align 8, !tbaa !0
  %arraydecay = getelementptr inbounds %struct.hek* %115, i64 0, i32 2, i64 0
  %116 = bitcast i8* %arraydecay to %struct.sv**
  %117 = load %struct.sv** %116, align 8, !tbaa !0
  tail call void @Perl_sv_free(%struct.sv* %117) #7
  %118 = load %struct.he** @PL_hv_fetch_ent_mh, align 8, !tbaa !0
  %119 = load i8** %sv_any192, align 8, !tbaa !0
  %xlv_targ199 = getelementptr inbounds i8* %119, i64 72
  %120 = bitcast i8* %xlv_targ199 to %struct.sv**
  %121 = load %struct.sv** %120, align 8, !tbaa !0
  %122 = getelementptr inbounds %struct.sv* %121, i64 0, i32 0
  %.c = bitcast %struct.he* %118 to i8*
  store i8* %.c, i8** %122, align 8, !tbaa !0
  %123 = load i8** %sv_any192, align 8, !tbaa !0
  %xlv_targ201 = getelementptr inbounds i8* %123, i64 72
  %124 = bitcast i8* %xlv_targ201 to %struct.sv**
  %125 = load %struct.sv** %124, align 8, !tbaa !0
  %126 = bitcast %struct.sv* %125 to %struct.he*
  store %struct.he* %126, %struct.he** @PL_hv_fetch_ent_mh, align 8, !tbaa !0
  br label %freescalar

if.then207:                                       ; preds = %sw.bb191
  %xlv_targ209 = getelementptr inbounds i8* %109, i64 72
  %127 = bitcast i8* %xlv_targ209 to %struct.sv**
  %128 = load %struct.sv** %127, align 8, !tbaa !0
  tail call void @Perl_sv_free(%struct.sv* %128) #7
  br label %freescalar

sw.bb212:                                         ; preds = %if.end142
  %129 = bitcast %struct.sv* %sv to %struct.gv*
  tail call void @Perl_gp_free(%struct.gv* %129) #8
  %sv_any213 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %130 = load i8** %sv_any213, align 8, !tbaa !0
  %xgv_name = getelementptr inbounds i8* %130, i64 64
  %131 = bitcast i8* %xgv_name to i8**
  %132 = load i8** %131, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %132) #8
  %133 = load i8** %sv_any213, align 8, !tbaa !0
  %xgv_stash = getelementptr inbounds i8* %133, i64 80
  %134 = bitcast i8* %xgv_stash to %struct.hv**
  %135 = load %struct.hv** %134, align 8, !tbaa !0
  br label %freescalar

freescalar:                                       ; preds = %sw.bb191, %sw.bb212, %if.end142, %if.end142, %if.end142, %if.then196, %if.then207, %if.end180, %if.end142, %sw.bb188
  %stash.0 = phi %struct.hv* [ %135, %sw.bb212 ], [ null, %if.then196 ], [ null, %if.then207 ], [ null, %sw.bb188 ], [ null, %if.end142 ], [ null, %if.end142 ], [ null, %if.end142 ], [ null, %if.end142 ], [ null, %if.end180 ], [ null, %sw.bb191 ]
  %136 = load i32* %sv_flags, align 4, !tbaa !3
  %and217 = and i32 %136, 2097152
  %tobool218 = icmp eq i32 %and217, 0
  br i1 %tobool218, label %sw.bb223, label %land.rhs219

land.rhs219:                                      ; preds = %freescalar
  %call220 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre442 = load i32* %sv_flags, align 4, !tbaa !3
  br label %sw.bb223

sw.bb223:                                         ; preds = %land.rhs219, %freescalar, %if.end142, %if.end142
  %137 = phi i32 [ %81, %if.end142 ], [ %81, %if.end142 ], [ %136, %freescalar ], [ %.pre442, %land.rhs219 ]
  %stash.1 = phi %struct.hv* [ null, %if.end142 ], [ null, %if.end142 ], [ %stash.0, %freescalar ], [ %stash.0, %land.rhs219 ]
  %and225 = and i32 %137, 524288
  %tobool226 = icmp eq i32 %and225, 0
  br i1 %tobool226, label %if.else237, label %if.then227

if.then227:                                       ; preds = %sw.bb223
  %and229 = and i32 %137, -2146959360
  %cmp230 = icmp eq i32 %and229, -2146959360
  br i1 %cmp230, label %if.then232, label %if.else233

if.then232:                                       ; preds = %if.then227
  tail call fastcc void @S_sv_del_backref(%struct.sv* %sv) #7
  br label %sw.epilog

if.else233:                                       ; preds = %if.then227
  %sv_any234 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %138 = load i8** %sv_any234, align 8, !tbaa !0
  %xrv_rv235 = bitcast i8* %138 to %struct.sv**
  %139 = load %struct.sv** %xrv_rv235, align 8, !tbaa !0
  tail call void @Perl_sv_free(%struct.sv* %139) #7
  br label %sw.epilog

if.else237:                                       ; preds = %sw.bb223
  %sv_any238 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %140 = load i8** %sv_any238, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %140 to i8**
  %141 = load i8** %xpv_pv, align 8, !tbaa !0
  %tobool239 = icmp eq i8* %141, null
  br i1 %tobool239, label %sw.epilog, label %land.lhs.true240

land.lhs.true240:                                 ; preds = %if.else237
  %xpv_len = getelementptr inbounds i8* %140, i64 16
  %142 = bitcast i8* %xpv_len to i64*
  %143 = load i64* %142, align 8, !tbaa !5
  %tobool242 = icmp eq i64 %143, 0
  br i1 %tobool242, label %land.lhs.true250, label %if.then243

if.then243:                                       ; preds = %land.lhs.true240
  tail call void @Perl_safesysfree(i8* %141) #8
  br label %sw.epilog

land.lhs.true250:                                 ; preds = %land.lhs.true240
  %144 = and i32 %137, 9437184
  %145 = icmp eq i32 %144, 9437184
  br i1 %145, label %if.then258, label %sw.epilog

if.then258:                                       ; preds = %land.lhs.true250
  %and262 = and i32 %137, 536870912
  %tobool263 = icmp eq i32 %and262, 0
  %xpv_cur = getelementptr inbounds i8* %140, i64 8
  %146 = bitcast i8* %xpv_cur to i64*
  %147 = load i64* %146, align 8, !tbaa !5
  br i1 %tobool263, label %cond.end271, label %cond.true264

cond.true264:                                     ; preds = %if.then258
  %sub = sub i64 0, %147
  %sext = shl i64 %sub, 32
  %conv267 = ashr exact i64 %sext, 32
  br label %cond.end271

cond.end271:                                      ; preds = %if.then258, %cond.true264
  %cond272 = phi i64 [ %conv267, %cond.true264 ], [ %147, %if.then258 ]
  %conv273 = trunc i64 %cond272 to i32
  %xuv_uv = getelementptr inbounds i8* %140, i64 24
  %148 = bitcast i8* %xuv_uv to i64*
  %149 = load i64* %148, align 8, !tbaa !5
  %conv275 = trunc i64 %149 to i32
  tail call void @Perl_unsharepvn(i8* %141, i32 %conv273, i32 %conv275) #8
  %150 = load i32* %sv_flags, align 4, !tbaa !3
  %and277 = and i32 %150, -1048577
  store i32 %and277, i32* %sv_flags, align 4, !tbaa !3
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.else237, %land.lhs.true250, %if.else233, %if.then232, %cond.end271, %if.then243, %if.end142, %sw.bb190, %sw.bb189
  %stash.2 = phi %struct.hv* [ null, %if.end142 ], [ %stash.1, %if.then232 ], [ %stash.1, %if.else233 ], [ %stash.1, %if.then243 ], [ %stash.1, %cond.end271 ], [ %stash.1, %land.lhs.true250 ], [ null, %sw.bb190 ], [ null, %sw.bb189 ], [ %stash.1, %if.else237 ]
  %151 = load i32* %sv_flags, align 4, !tbaa !3
  %and282 = and i32 %151, 255
  switch i32 %and282, label %sw.epilog320 [
    i32 15, label %sw.bb318
    i32 1, label %sw.bb283
    i32 2, label %sw.bb285
    i32 3, label %sw.bb287
    i32 4, label %sw.bb289
    i32 5, label %sw.bb291
    i32 6, label %sw.bb293
    i32 7, label %sw.bb295
    i32 9, label %sw.bb297
    i32 10, label %sw.bb299
    i32 11, label %sw.bb301
    i32 12, label %sw.bb303
    i32 13, label %sw.bb305
    i32 8, label %sw.bb314
    i32 14, label %sw.bb316
  ]

sw.bb283:                                         ; preds = %sw.epilog
  %sv_any284 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %152 = load i8** %sv_any284, align 8, !tbaa !0
  %add.ptr.i438 = getelementptr inbounds i8* %152, i64 24
  %153 = bitcast i8* %add.ptr.i438 to i64*
  %154 = load i64** @PL_xiv_root, align 8, !tbaa !0
  %.c.i = ptrtoint i64* %154 to i64
  store i64 %.c.i, i64* %153, align 8, !tbaa !0
  store i64* %153, i64** @PL_xiv_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb285:                                         ; preds = %sw.epilog
  %sv_any286 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %155 = load i8** %sv_any286, align 8, !tbaa !0
  %add.ptr.i = getelementptr inbounds i8* %155, i64 32
  %156 = bitcast i8* %add.ptr.i to double*
  %157 = load double** @PL_xnv_root, align 8, !tbaa !0
  %158 = bitcast i8* %add.ptr.i to double**
  store double* %157, double** %158, align 8, !tbaa !0
  store double* %156, double** @PL_xnv_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb287:                                         ; preds = %sw.epilog
  %sv_any288 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %159 = load i8** %sv_any288, align 8, !tbaa !0
  %160 = bitcast i8* %159 to %struct.xrv*
  %161 = load %struct.xrv** @PL_xrv_root, align 8, !tbaa !0
  %162 = bitcast %struct.xrv* %161 to %struct.sv*
  %xrv_rv.i = bitcast i8* %159 to %struct.sv**
  store %struct.sv* %162, %struct.sv** %xrv_rv.i, align 8, !tbaa !0
  store %struct.xrv* %160, %struct.xrv** @PL_xrv_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb289:                                         ; preds = %sw.epilog
  %sv_any290 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %163 = load i8** %sv_any290, align 8, !tbaa !0
  %164 = bitcast i8* %163 to %struct.xpv*
  %165 = load %struct.xpv** @PL_xpv_root, align 8, !tbaa !0
  %166 = bitcast %struct.xpv* %165 to i8*
  %xpv_pv.i437 = bitcast i8* %163 to i8**
  store i8* %166, i8** %xpv_pv.i437, align 8, !tbaa !0
  store %struct.xpv* %164, %struct.xpv** @PL_xpv_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb291:                                         ; preds = %sw.epilog
  %sv_any292 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %167 = load i8** %sv_any292, align 8, !tbaa !0
  %168 = bitcast i8* %167 to %struct.xpviv*
  %169 = load %struct.xpviv** @PL_xpviv_root, align 8, !tbaa !0
  %170 = bitcast %struct.xpviv* %169 to i8*
  %xpv_pv.i436 = bitcast i8* %167 to i8**
  store i8* %170, i8** %xpv_pv.i436, align 8, !tbaa !0
  store %struct.xpviv* %168, %struct.xpviv** @PL_xpviv_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb293:                                         ; preds = %sw.epilog
  %sv_any294 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %171 = load i8** %sv_any294, align 8, !tbaa !0
  %172 = bitcast i8* %171 to %struct.xpvnv*
  %173 = load %struct.xpvnv** @PL_xpvnv_root, align 8, !tbaa !0
  %174 = bitcast %struct.xpvnv* %173 to i8*
  %xpv_pv.i435 = bitcast i8* %171 to i8**
  store i8* %174, i8** %xpv_pv.i435, align 8, !tbaa !0
  store %struct.xpvnv* %172, %struct.xpvnv** @PL_xpvnv_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb295:                                         ; preds = %sw.epilog
  %sv_any296 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %175 = load i8** %sv_any296, align 8, !tbaa !0
  %176 = bitcast i8* %175 to %struct.xpvmg*
  %177 = load %struct.xpvmg** @PL_xpvmg_root, align 8, !tbaa !0
  %178 = bitcast %struct.xpvmg* %177 to i8*
  %xpv_pv.i434 = bitcast i8* %175 to i8**
  store i8* %178, i8** %xpv_pv.i434, align 8, !tbaa !0
  store %struct.xpvmg* %176, %struct.xpvmg** @PL_xpvmg_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb297:                                         ; preds = %sw.epilog
  %sv_any298 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %179 = load i8** %sv_any298, align 8, !tbaa !0
  %180 = bitcast i8* %179 to %struct.xpvlv*
  %181 = load %struct.xpvlv** @PL_xpvlv_root, align 8, !tbaa !0
  %182 = bitcast %struct.xpvlv* %181 to i8*
  %xpv_pv.i433 = bitcast i8* %179 to i8**
  store i8* %182, i8** %xpv_pv.i433, align 8, !tbaa !0
  store %struct.xpvlv* %180, %struct.xpvlv** @PL_xpvlv_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb299:                                         ; preds = %sw.epilog
  %sv_any300 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %183 = load i8** %sv_any300, align 8, !tbaa !0
  %184 = bitcast i8* %183 to %struct.xpvav*
  %185 = load %struct.xpvav** @PL_xpvav_root, align 8, !tbaa !0
  %186 = bitcast %struct.xpvav* %185 to i8*
  %xav_array.i = bitcast i8* %183 to i8**
  store i8* %186, i8** %xav_array.i, align 8, !tbaa !0
  store %struct.xpvav* %184, %struct.xpvav** @PL_xpvav_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb301:                                         ; preds = %sw.epilog
  %sv_any302 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %187 = load i8** %sv_any302, align 8, !tbaa !0
  %188 = bitcast i8* %187 to %struct.xpvhv*
  %189 = load %struct.xpvhv** @PL_xpvhv_root, align 8, !tbaa !0
  %190 = bitcast %struct.xpvhv* %189 to i8*
  %xhv_array.i = bitcast i8* %187 to i8**
  store i8* %190, i8** %xhv_array.i, align 8, !tbaa !0
  store %struct.xpvhv* %188, %struct.xpvhv** @PL_xpvhv_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb303:                                         ; preds = %sw.epilog
  %sv_any304 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %191 = load i8** %sv_any304, align 8, !tbaa !0
  %192 = bitcast i8* %191 to %struct.xpvcv*
  %193 = load %struct.xpvcv** @PL_xpvcv_root, align 8, !tbaa !0
  %194 = bitcast %struct.xpvcv* %193 to i8*
  %xpv_pv.i432 = bitcast i8* %191 to i8**
  store i8* %194, i8** %xpv_pv.i432, align 8, !tbaa !0
  store %struct.xpvcv* %192, %struct.xpvcv** @PL_xpvcv_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb305:                                         ; preds = %sw.epilog
  %sv_any306 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %195 = load i8** %sv_any306, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %195) #8
  %196 = load i32* %sv_flags, align 4, !tbaa !3
  %and308 = and i32 %196, 4194304
  %or310 = or i32 %and308, 255
  store i32 %or310, i32* %sv_flags, align 4, !tbaa !3
  %tobool311 = icmp eq %struct.hv* %stash.2, null
  br i1 %tobool311, label %return, label %if.then312

if.then312:                                       ; preds = %sw.bb305
  %197 = bitcast %struct.hv* %stash.2 to %struct.sv*
  tail call void @Perl_sv_free(%struct.sv* %197) #7
  br label %return

sw.bb314:                                         ; preds = %sw.epilog
  %sv_any315 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %198 = load i8** %sv_any315, align 8, !tbaa !0
  %199 = bitcast i8* %198 to %struct.xpvbm*
  %200 = load %struct.xpvbm** @PL_xpvbm_root, align 8, !tbaa !0
  %201 = bitcast %struct.xpvbm* %200 to i8*
  %xpv_pv.i = bitcast i8* %198 to i8**
  store i8* %201, i8** %xpv_pv.i, align 8, !tbaa !0
  store %struct.xpvbm* %199, %struct.xpvbm** @PL_xpvbm_root, align 8, !tbaa !0
  br label %sw.epilog320

sw.bb316:                                         ; preds = %sw.epilog
  %sv_any317 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %202 = load i8** %sv_any317, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %202) #8
  br label %sw.epilog320

sw.bb318:                                         ; preds = %sw.epilog
  %sv_any319 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %203 = load i8** %sv_any319, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %203) #8
  br label %sw.epilog320

sw.epilog320:                                     ; preds = %sw.epilog, %sw.bb318, %sw.bb316, %sw.bb314, %sw.bb303, %sw.bb301, %sw.bb299, %sw.bb297, %sw.bb295, %sw.bb293, %sw.bb291, %sw.bb289, %sw.bb287, %sw.bb285, %sw.bb283
  %204 = load i32* %sv_flags, align 4, !tbaa !3
  %and322 = and i32 %204, 4194304
  %or324 = or i32 %and322, 255
  store i32 %or324, i32* %sv_flags, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %if.then101, %sw.bb305, %if.then312, %if.then103, %sw.epilog320
  ret void
}

; Function Attrs: optsize
declare %struct.cv* @Perl_gv_handler(%struct.hv*, i32) #2

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newRV(%struct.sv* %tmpRef) #0 {
entry:
  store %struct.sv* %tmpRef, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %tmpRef, null
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %sv_refcnt = getelementptr inbounds %struct.sv* %tmpRef, i64 0, i32 1
  %0 = load i32* %sv_refcnt, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* %sv_refcnt, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %call = tail call %struct.sv* @Perl_newRV_noinc(%struct.sv* %tmpRef) #7
  ret %struct.sv* %call
}

; Function Attrs: optsize
declare void @Perl_push_scope() #2

; Function Attrs: optsize
declare %struct.stackinfo* @Perl_new_stackinfo(i32, i32) #2

; Function Attrs: optsize
declare %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i32) #2

; Function Attrs: optsize
declare void @Perl_markstack_grow() #2

; Function Attrs: optsize
declare i32 @Perl_call_sv(%struct.sv*, i32) #2

; Function Attrs: optsize
declare i32 @PerlIO_printf(%struct._PerlIO**, i8*, ...) #2

; Function Attrs: optsize
declare %struct._PerlIO** @Perl_PerlIO_stderr() #2

; Function Attrs: optsize
declare void @Perl_my_exit(i32) #2

; Function Attrs: optsize
declare void @Perl_pop_scope() #2

; Function Attrs: optsize
declare %struct._PerlIO** @Perl_PerlIO_stdin() #2

; Function Attrs: optsize
declare %struct._PerlIO** @Perl_PerlIO_stdout() #2

; Function Attrs: optsize
declare signext i8 @Perl_io_close(%struct.io*, i8 signext) #2

; Function Attrs: nounwind optsize
declare i32 @closedir(%struct.__dirstream* nocapture) #5

; Function Attrs: optsize
declare void @Perl_cv_undef(%struct.cv*) #2

; Function Attrs: optsize
declare void @Perl_hv_undef(%struct.hv*) #2

; Function Attrs: optsize
declare void @Perl_av_undef(%struct.av*) #2

; Function Attrs: nounwind optsize uwtable
define internal fastcc void @S_sv_del_backref(%struct.sv* %sv) #0 {
entry:
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %0 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %0 to %struct.sv**
  %1 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %1, i64 0, i32 2
  %2 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %2, 57344
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %call = tail call %struct.magic* @Perl_mg_find(%struct.sv* %1, i32 60) #8
  %tobool1 = icmp eq %struct.magic* %call, null
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([19 x i8]* @.str72, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %mg_obj = getelementptr inbounds %struct.magic* %call, i64 0, i32 5
  %3 = load %struct.sv** %mg_obj, align 8, !tbaa !0
  %sv_any2 = bitcast %struct.sv* %3 to %struct.xpvav**
  %4 = load %struct.xpvav** %sv_any2, align 8, !tbaa !0
  %xav_array = getelementptr inbounds %struct.xpvav* %4, i64 0, i32 0
  %5 = load i8** %xav_array, align 8, !tbaa !0
  %6 = bitcast i8* %5 to %struct.sv**
  %xav_fill = getelementptr inbounds %struct.xpvav* %4, i64 0, i32 1
  %7 = load i64* %xav_fill, align 8, !tbaa !5
  %conv = trunc i64 %7 to i32
  %cmp18 = icmp sgt i32 %conv, -1
  br i1 %cmp18, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end
  %sext = shl i64 %7, 32
  %8 = ashr exact i64 %sext, 32
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %indvars.iv = phi i64 [ %8, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds %struct.sv** %6, i64 %indvars.iv
  %9 = load %struct.sv** %arrayidx, align 8, !tbaa !0
  %cmp5 = icmp eq %struct.sv* %9, %sv
  br i1 %cmp5, label %if.then7, label %for.inc

if.then7:                                         ; preds = %for.body
  store %struct.sv* null, %struct.sv** %arrayidx, align 8, !tbaa !0
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then7
  %indvars.iv.next = add i64 %indvars.iv, -1
  %10 = trunc i64 %indvars.iv to i32
  %cmp = icmp sgt i32 %10, 0
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %if.end
  ret void
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_newref(%struct.sv* %sv) #0 {
entry:
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv, i64 0, i32 1
  %0 = load i32* %sv_refcnt, align 4, !tbaa !3
  %inc = add i32 %0, 1
  store i32 %inc, i32* %sv_refcnt, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret %struct.sv* %sv
}

; Function Attrs: nounwind optsize uwtable
define i64 @Perl_sv_len(%struct.sv* %sv) #0 {
entry:
  %len = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.else, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = call i32 @Perl_mg_length(%struct.sv* %sv) #8
  %conv = zext i32 %call to i64
  store i64 %conv, i64* %len, align 8, !tbaa !5
  br label %return

if.else:                                          ; preds = %if.end
  %and4 = and i32 %0, 262144
  %cmp = icmp eq i32 %and4, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.else
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %len, align 8, !tbaa !5
  br label %return

cond.false:                                       ; preds = %if.else
  %call7 = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %len, i32 2) #7
  %.pre = load i64* %len, align 8, !tbaa !5
  br label %return

return:                                           ; preds = %if.then2, %cond.false, %cond.true, %entry
  %retval.0 = phi i64 [ 0, %entry ], [ %3, %cond.true ], [ %.pre, %cond.false ], [ %conv, %if.then2 ]
  ret i64 %retval.0
}

; Function Attrs: optsize
declare i32 @Perl_mg_length(%struct.sv*) #2

; Function Attrs: nounwind optsize uwtable
define i64 @Perl_sv_len_utf8(%struct.sv* %sv) #0 {
entry:
  %len = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.else, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = call i32 @Perl_mg_length(%struct.sv* %sv) #8
  %conv = zext i32 %call to i64
  br label %return

if.else:                                          ; preds = %if.end
  %and4 = and i32 %0, 262144
  %cmp = icmp eq i32 %and4, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.else
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %len, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call7 = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %len, i32 2) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %5 = phi i32 [ %0, %cond.true ], [ %.pre, %cond.false ]
  %cond = phi i8* [ %4, %cond.true ], [ %call7, %cond.false ]
  %and9 = and i32 %5, 57344
  %tobool10 = icmp eq i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true31, label %cond.end14

cond.end14:                                       ; preds = %cond.end
  %call12 = call %struct.magic* @Perl_mg_find(%struct.sv* %sv, i32 119) #8
  %tobool16 = icmp eq %struct.magic* %call12, null
  br i1 %tobool16, label %land.lhs.true31, label %land.lhs.true

land.lhs.true:                                    ; preds = %cond.end14
  %mg_len = getelementptr inbounds %struct.magic* %call12, i64 0, i32 7
  %6 = load i32* %mg_len, align 4, !tbaa !3
  %cmp17 = icmp eq i32 %6, -1
  br i1 %cmp17, label %if.end37.thread, label %land.lhs.true19

if.end37.thread:                                  ; preds = %land.lhs.true
  %7 = load i64* %len, align 8, !tbaa !5
  %add.ptr70 = getelementptr inbounds i8* %cond, i64 %7
  %call2971 = call i64 @Perl_utf8_length(i8* %cond, i8* %add.ptr70) #8
  br label %if.then39

land.lhs.true19:                                  ; preds = %land.lhs.true
  %cmp21 = icmp sgt i32 %6, 0
  br i1 %cmp21, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true19
  %8 = load i64* %len, align 8, !tbaa !5
  %cmp23 = icmp eq i64 %8, 0
  br i1 %cmp23, label %if.then25, label %if.else28

if.then25:                                        ; preds = %lor.lhs.false, %land.lhs.true19
  %conv27 = sext i32 %6 to i64
  br label %return

if.else28:                                        ; preds = %lor.lhs.false
  %add.ptr = getelementptr inbounds i8* %cond, i64 %8
  %call29 = call i64 @Perl_utf8_length(i8* %cond, i8* %add.ptr) #8
  br label %if.end37

land.lhs.true31:                                  ; preds = %cond.end, %cond.end14
  %9 = load i64* %len, align 8, !tbaa !5
  %add.ptr64 = getelementptr inbounds i8* %cond, i64 %9
  %call2965 = call i64 @Perl_utf8_length(i8* %cond, i8* %add.ptr64) #8
  %10 = load i32* %sv_flags, align 4, !tbaa !3
  %and33 = and i32 %10, 8388608
  %tobool34 = icmp eq i32 %and33, 0
  br i1 %tobool34, label %if.then35, label %return

if.then35:                                        ; preds = %land.lhs.true31
  call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 119, i8* null, i32 0) #7
  %call36 = call %struct.magic* @Perl_mg_find(%struct.sv* %sv, i32 119) #8
  br label %if.end37

if.end37:                                         ; preds = %if.else28, %if.then35
  %call2968 = phi i64 [ %call29, %if.else28 ], [ %call2965, %if.then35 ]
  %mg.0 = phi %struct.magic* [ %call12, %if.else28 ], [ %call36, %if.then35 ]
  %tobool38 = icmp eq %struct.magic* %mg.0, null
  br i1 %tobool38, label %return, label %if.then39

if.then39:                                        ; preds = %if.end37.thread, %if.end37
  %mg.074 = phi %struct.magic* [ %call12, %if.end37.thread ], [ %mg.0, %if.end37 ]
  %call296873 = phi i64 [ %call2971, %if.end37.thread ], [ %call2968, %if.end37 ]
  %conv40 = trunc i64 %call296873 to i32
  %mg_len41 = getelementptr inbounds %struct.magic* %mg.074, i64 0, i32 7
  store i32 %conv40, i32* %mg_len41, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %land.lhs.true31, %if.then25, %if.then39, %if.end37, %entry, %if.then2
  %retval.0 = phi i64 [ %conv, %if.then2 ], [ 0, %entry ], [ %conv27, %if.then25 ], [ %call296873, %if.then39 ], [ %call2968, %if.end37 ], [ %call2965, %land.lhs.true31 ]
  ret i64 %retval.0
}

; Function Attrs: optsize
declare i64 @Perl_utf8_length(i8*, i8*) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_pos_u2b(%struct.sv* %sv, i32* nocapture %offsetp, i32* %lenp) #0 {
entry:
  %s = alloca i8*, align 8
  %len = alloca i64, align 8
  %cache = alloca i64*, align 8
  %mg = alloca %struct.magic*, align 8
  store i64* null, i64** %cache, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %len, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %len, i32 2) #7
  %.pr = load i64* %len, align 8, !tbaa !5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %5 = phi i64 [ %.pr, %cond.false ], [ %3, %cond.true ]
  %cond = phi i8* [ %call, %cond.false ], [ %4, %cond.true ]
  store i8* %cond, i8** %s, align 8, !tbaa !0
  %tobool2 = icmp eq i64 %5, 0
  br i1 %tobool2, label %if.else, label %if.then3

if.then3:                                         ; preds = %cond.end
  %6 = load i32* %offsetp, align 4, !tbaa !3
  %add.ptr = getelementptr inbounds i8* %cond, i64 %5
  store %struct.magic* null, %struct.magic** %mg, align 8, !tbaa !0
  %call4 = call fastcc signext i8 @S_utf8_mg_pos(%struct.sv* %sv, %struct.magic** %mg, i64** %cache, i32 0, i32* %offsetp, i32 %6, i8** %s, i8* %cond, i8* %add.ptr) #7
  %..not = icmp eq i8 %call4, 0
  %cmp9 = icmp sgt i32 %6, 0
  %or.cond = and i1 %..not, %cmp9
  br i1 %or.cond, label %while.cond.preheader, label %if.end24

while.cond.preheader:                             ; preds = %if.then3
  %7 = load i8** %s, align 8, !tbaa !0
  %cmp11113 = icmp ult i8* %7, %add.ptr
  br i1 %cmp11113, label %land.end, label %while.end

land.end:                                         ; preds = %while.cond.preheader, %while.body
  %8 = phi i8* [ %add.ptr13, %while.body ], [ %7, %while.cond.preheader ]
  %uoffset.0114 = phi i32 [ %dec, %while.body ], [ %6, %while.cond.preheader ]
  %tobool12 = icmp eq i32 %uoffset.0114, 0
  br i1 %tobool12, label %while.end, label %while.body

while.body:                                       ; preds = %land.end
  %dec = add nsw i32 %uoffset.0114, -1
  %9 = load i8* %8, align 1, !tbaa !1
  %idxprom = zext i8 %9 to i64
  %arrayidx = getelementptr inbounds [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %10 = load i8* %arrayidx, align 1, !tbaa !1
  %idx.ext = zext i8 %10 to i64
  %add.ptr13 = getelementptr inbounds i8* %8, i64 %idx.ext
  store i8* %add.ptr13, i8** %s, align 8, !tbaa !0
  %cmp11 = icmp ult i8* %add.ptr13, %add.ptr
  br i1 %cmp11, label %land.end, label %while.end

while.end:                                        ; preds = %land.end, %while.cond.preheader, %while.body
  %11 = phi i8* [ %7, %while.cond.preheader ], [ %add.ptr13, %while.body ], [ %8, %land.end ]
  %cmp14 = icmp ult i8* %11, %add.ptr
  br i1 %cmp14, label %if.end17, label %if.then16

if.then16:                                        ; preds = %while.end
  store i8* %add.ptr, i8** %s, align 8, !tbaa !0
  br label %if.end17

if.end17:                                         ; preds = %while.end, %if.then16
  %12 = phi i8* [ %11, %while.end ], [ %add.ptr, %if.then16 ]
  %call18 = call fastcc signext i8 @S_utf8_mg_pos_init(%struct.sv* %sv, %struct.magic** %mg, i64** %cache, i32 0, i32* %offsetp, i8* %12, i8* %cond) #7
  %tobool19 = icmp eq i8 %call18, 0
  br i1 %tobool19, label %if.end22, label %if.then20

if.then20:                                        ; preds = %if.end17
  %13 = load i64** %cache, align 8, !tbaa !0
  %arrayidx21 = getelementptr inbounds i64* %13, i64 1
  %14 = load i64* %arrayidx21, align 8, !tbaa !5
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.then20
  %boffset.0 = phi i64 [ %14, %if.then20 ], [ 0, %if.end17 ]
  %sub.ptr.lhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %cond to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv23 = trunc i64 %sub.ptr.sub to i32
  store i32 %conv23, i32* %offsetp, align 4, !tbaa !3
  br label %if.end24

if.end24:                                         ; preds = %if.then3, %if.end22
  %boffset.1 = phi i64 [ 0, %if.then3 ], [ %boffset.0, %if.end22 ]
  %tobool25 = icmp eq i32* %lenp, null
  br i1 %tobool25, label %return, label %if.then26

if.then26:                                        ; preds = %if.end24
  %15 = load i8** %s, align 8, !tbaa !0
  %16 = load i32* %lenp, align 4, !tbaa !3
  %call27 = call fastcc signext i8 @S_utf8_mg_pos(%struct.sv* %sv, %struct.magic** %mg, i64** %cache, i32 2, i32* %lenp, i32 %16, i8** %s, i8* %15, i8* %add.ptr) #7
  %tobool28 = icmp eq i8 %call27, 0
  %17 = load i32* %lenp, align 4, !tbaa !3
  br i1 %tobool28, label %land.lhs.true34, label %if.then29

if.then29:                                        ; preds = %if.then26
  %conv30106 = zext i32 %17 to i64
  %sub = sub i64 %conv30106, %boffset.1
  %conv31 = trunc i64 %sub to i32
  store i32 %conv31, i32* %lenp, align 4, !tbaa !3
  br label %if.end61

land.lhs.true34:                                  ; preds = %if.then26
  %cmp35 = icmp sgt i32 %17, 0
  br i1 %cmp35, label %while.cond41.preheader, label %if.end61

while.cond41.preheader:                           ; preds = %land.lhs.true34
  %18 = load i8** %s, align 8, !tbaa !0
  %cmp42108 = icmp ult i8* %18, %add.ptr
  br i1 %cmp42108, label %while.body48, label %if.end55

while.body48:                                     ; preds = %while.cond41.preheader, %while.body48
  %19 = phi i8* [ %add.ptr53, %while.body48 ], [ %18, %while.cond41.preheader ]
  %ulen.0111 = phi i32 [ %dec45, %while.body48 ], [ %17, %while.cond41.preheader ]
  %dec45 = add nsw i32 %ulen.0111, -1
  %20 = load i8* %19, align 1, !tbaa !1
  %idxprom49 = zext i8 %20 to i64
  %arrayidx50 = getelementptr inbounds [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom49
  %21 = load i8* %arrayidx50, align 1, !tbaa !1
  %idx.ext52 = zext i8 %21 to i64
  %add.ptr53 = getelementptr inbounds i8* %19, i64 %idx.ext52
  %cmp42 = icmp uge i8* %add.ptr53, %add.ptr
  %tobool46 = icmp eq i32 %dec45, 0
  %or.cond107 = or i1 %cmp42, %tobool46
  br i1 %or.cond107, label %while.cond41.if.end55_crit_edge, label %while.body48

while.cond41.if.end55_crit_edge:                  ; preds = %while.body48
  store i8* %add.ptr53, i8** %s, align 8, !tbaa !0
  br label %if.end55

if.end55:                                         ; preds = %while.cond41.preheader, %while.cond41.if.end55_crit_edge
  %.lcssa = phi i8* [ %add.ptr53, %while.cond41.if.end55_crit_edge ], [ %18, %while.cond41.preheader ]
  %cmp56 = icmp ult i8* %.lcssa, %add.ptr
  br i1 %cmp56, label %if.end59, label %if.then58

if.then58:                                        ; preds = %if.end55
  store i8* %add.ptr, i8** %s, align 8, !tbaa !0
  br label %if.end59

if.end59:                                         ; preds = %if.end55, %if.then58
  %22 = phi i8* [ %.lcssa, %if.end55 ], [ %add.ptr, %if.then58 ]
  %call60 = call fastcc signext i8 @S_utf8_mg_pos_init(%struct.sv* %sv, %struct.magic** %mg, i64** %cache, i32 2, i32* %lenp, i8* %22, i8* %15) #7
  br label %if.end61

if.end61:                                         ; preds = %land.lhs.true34, %if.then29, %if.end59
  %23 = load i8** %s, align 8, !tbaa !0
  %sub.ptr.lhs.cast62 = ptrtoint i8* %23 to i64
  %sub.ptr.rhs.cast63 = ptrtoint i8* %15 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %conv65 = trunc i64 %sub.ptr.sub64 to i32
  store i32 %conv65, i32* %lenp, align 4, !tbaa !3
  br label %return

if.else:                                          ; preds = %cond.end
  store i32 0, i32* %offsetp, align 4, !tbaa !3
  %tobool67 = icmp eq i32* %lenp, null
  br i1 %tobool67, label %return, label %if.then68

if.then68:                                        ; preds = %if.else
  store i32 0, i32* %lenp, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %if.end24, %if.else, %entry, %if.end61, %if.then68
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc signext i8 @S_utf8_mg_pos(%struct.sv* %sv, %struct.magic** nocapture %mgp, i64** nocapture %cachep, i32 %i, i32* nocapture %offsetp, i32 %uoff, i8** nocapture %sp, i8* %start, i8* %send) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 57344
  %tobool = icmp ne i32 %and, 0
  %and2 = and i32 %0, 8388608
  %tobool3 = icmp eq i32 %and2, 0
  %or.cond = and i1 %tobool, %tobool3
  br i1 %or.cond, label %if.then, label %if.end123

if.then:                                          ; preds = %entry
  %1 = load %struct.magic** %mgp, align 8, !tbaa !0
  %tobool4 = icmp eq %struct.magic* %1, null
  br i1 %tobool4, label %if.end, label %land.lhs.true7

if.end:                                           ; preds = %if.then
  %call = tail call %struct.magic* @Perl_mg_find(%struct.sv* %sv, i32 119) #8
  store %struct.magic* %call, %struct.magic** %mgp, align 8, !tbaa !0
  %tobool6 = icmp eq %struct.magic* %call, null
  br i1 %tobool6, label %if.end123, label %land.lhs.true7

land.lhs.true7:                                   ; preds = %if.then, %if.end
  %2 = phi %struct.magic* [ %call, %if.end ], [ %1, %if.then ]
  %mg_ptr = getelementptr inbounds %struct.magic* %2, i64 0, i32 6
  %3 = load i8** %mg_ptr, align 8, !tbaa !0
  %tobool8 = icmp eq i8* %3, null
  br i1 %tobool8, label %if.end123, label %if.then9

if.then9:                                         ; preds = %land.lhs.true7
  %4 = bitcast i8* %3 to i64*
  store i64* %4, i64** %cachep, align 8, !tbaa !0
  %idxprom = sext i32 %i to i64
  %arrayidx = getelementptr inbounds i64* %4, i64 %idxprom
  %5 = load i64* %arrayidx, align 8, !tbaa !5
  %conv = sext i32 %uoff to i64
  %cmp = icmp eq i64 %5, %conv
  br i1 %cmp, label %if.then9.if.then101_crit_edge, label %if.else

if.then9.if.then101_crit_edge:                    ; preds = %if.then9
  %add102.pre = add nsw i32 %i, 1
  %idxprom103.pre = sext i32 %add102.pre to i64
  br label %if.then101

if.else:                                          ; preds = %if.then9
  %cmp16 = icmp ugt i64 %5, %conv
  br i1 %cmp16, label %if.then18, label %if.else30

if.then18:                                        ; preds = %if.else
  %sub = sub i64 %5, %conv
  %mul = shl i64 %sub, 1
  %cmp23 = icmp ult i64 %conv, %mul
  br i1 %cmp23, label %if.end57, label %if.else26

if.else26:                                        ; preds = %if.then18
  %add = add nsw i32 %i, 1
  %idxprom27 = sext i32 %add to i64
  %arrayidx28 = getelementptr inbounds i64* %4, i64 %idxprom27
  %6 = load i64* %arrayidx28, align 8, !tbaa !5
  %add.ptr = getelementptr inbounds i8* %start, i64 %6
  br label %if.end57

if.else30:                                        ; preds = %if.else
  %cmp31 = icmp eq i32 %i, 0
  br i1 %cmp31, label %if.then33, label %if.end123

if.then33:                                        ; preds = %if.else30
  %call34 = tail call i64 @Perl_sv_len_utf8(%struct.sv* %sv) #7
  %cmp36 = icmp ult i64 %conv, %call34
  br i1 %cmp36, label %if.then38, label %if.end123

if.then38:                                        ; preds = %if.then33
  %7 = load i64** %cachep, align 8, !tbaa !0
  %arrayidx41 = getelementptr inbounds i64* %7, i64 %idxprom
  %8 = load i64* %arrayidx41, align 8, !tbaa !5
  %sub42 = sub i64 %conv, %8
  %sub44 = sub i64 %call34, %conv
  %mul45 = shl i64 %sub44, 1
  %cmp46 = icmp ult i64 %sub42, %mul45
  br i1 %cmp46, label %if.then48, label %if.end57

if.then48:                                        ; preds = %if.then38
  %arrayidx51 = getelementptr inbounds i64* %7, i64 1
  %9 = load i64* %arrayidx51, align 8, !tbaa !5
  %add.ptr52 = getelementptr inbounds i8* %start, i64 %9
  br label %if.end57

if.end57:                                         ; preds = %if.then38, %if.then18, %if.then48, %if.else26
  %10 = phi i64* [ %4, %if.else26 ], [ %7, %if.then48 ], [ %4, %if.then18 ], [ %7, %if.then38 ]
  %forw.0 = phi i64 [ %conv, %if.else26 ], [ %sub42, %if.then48 ], [ %conv, %if.then18 ], [ %sub42, %if.then38 ]
  %backw.0 = phi i64 [ %sub, %if.else26 ], [ %sub44, %if.then48 ], [ %sub, %if.then18 ], [ %sub44, %if.then38 ]
  %p.0 = phi i8* [ %add.ptr, %if.else26 ], [ %add.ptr52, %if.then48 ], [ %start, %if.then18 ], [ %send, %if.then38 ]
  %tobool58 = icmp eq i8* %p.0, null
  br i1 %tobool58, label %if.end123, label %if.then59

if.then59:                                        ; preds = %if.end57
  %mul60 = shl i64 %backw.0, 1
  %cmp61 = icmp ult i64 %forw.0, %mul60
  br i1 %cmp61, label %while.cond.preheader, label %while.cond70.preheader

while.cond70.preheader:                           ; preds = %if.then59
  %tobool72203 = icmp eq i64 %backw.0, 0
  br i1 %tobool72203, label %if.end85, label %while.cond74.preheader

while.cond.preheader:                             ; preds = %if.then59
  %tobool64198 = icmp eq i64 %forw.0, 0
  br i1 %tobool64198, label %if.end85, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %p.1200 = phi i8* [ %add.ptr68, %while.body ], [ %p.0, %while.cond.preheader ]
  %forw.1199 = phi i64 [ %dec, %while.body ], [ %forw.0, %while.cond.preheader ]
  %dec = add i64 %forw.1199, -1
  %11 = load i8* %p.1200, align 1, !tbaa !1
  %idxprom65 = zext i8 %11 to i64
  %arrayidx66 = getelementptr inbounds [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom65
  %12 = load i8* %arrayidx66, align 1, !tbaa !1
  %idx.ext = zext i8 %12 to i64
  %add.ptr68 = getelementptr inbounds i8* %p.1200, i64 %idx.ext
  %tobool64 = icmp eq i64 %dec, 0
  br i1 %tobool64, label %if.end85, label %while.body

while.cond70.loopexit:                            ; preds = %while.cond74
  %dec71205 = add i64 %dec71205.in, -1
  %tobool72 = icmp eq i64 %dec71205, 0
  br i1 %tobool72, label %if.end85, label %while.cond74.preheader

while.cond74.preheader:                           ; preds = %while.cond70.preheader, %while.cond70.loopexit
  %dec71205.in = phi i64 [ %dec71205, %while.cond70.loopexit ], [ %backw.0, %while.cond70.preheader ]
  %p.2204 = phi i8* [ %p.3, %while.cond70.loopexit ], [ %p.0, %while.cond70.preheader ]
  br label %while.cond74

while.cond74:                                     ; preds = %while.cond74.preheader, %while.cond74
  %p.2.pn = phi i8* [ %p.3, %while.cond74 ], [ %p.2204, %while.cond74.preheader ]
  %p.3 = getelementptr inbounds i8* %p.2.pn, i64 -1
  %13 = load i8* %p.3, align 1, !tbaa !1
  %cmp76 = icmp slt i8 %13, 0
  %cmp79 = icmp ult i8 %13, -64
  %or.cond190 = and i1 %cmp76, %cmp79
  br i1 %or.cond190, label %while.cond74, label %while.cond70.loopexit

if.end85:                                         ; preds = %while.cond70.preheader, %while.cond70.loopexit, %while.cond.preheader, %while.body
  %p.4 = phi i8* [ %p.0, %while.cond.preheader ], [ %add.ptr68, %while.body ], [ %p.0, %while.cond70.preheader ], [ %p.3, %while.cond70.loopexit ]
  %arrayidx88 = getelementptr inbounds i64* %10, i64 %idxprom
  store i64 %conv, i64* %arrayidx88, align 8, !tbaa !5
  %sub.ptr.lhs.cast = ptrtoint i8* %p.4 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %start to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add89 = add nsw i32 %i, 1
  %idxprom90 = sext i32 %add89 to i64
  %arrayidx91 = getelementptr inbounds i64* %10, i64 %idxprom90
  store i64 %sub.ptr.sub, i64* %arrayidx91, align 8, !tbaa !5
  %cmp92 = icmp eq i32 %i, 0
  br i1 %cmp92, label %if.then94, label %if.then101

if.then94:                                        ; preds = %if.end85
  %arrayidx95 = getelementptr inbounds i64* %10, i64 2
  %14 = bitcast i64* %arrayidx95 to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 16, i32 8, i1 false)
  br label %if.then101

if.then101:                                       ; preds = %if.then9.if.then101_crit_edge, %if.then94, %if.end85
  %idxprom103.pre-phi = phi i64 [ %idxprom103.pre, %if.then9.if.then101_crit_edge ], [ %idxprom90, %if.then94 ], [ %idxprom90, %if.end85 ]
  %15 = phi i64* [ %4, %if.then9.if.then101_crit_edge ], [ %10, %if.then94 ], [ %10, %if.end85 ]
  %arrayidx104 = getelementptr inbounds i64* %15, i64 %idxprom103.pre-phi
  %16 = load i64* %arrayidx104, align 8, !tbaa !5
  %conv105 = trunc i64 %16 to i32
  store i32 %conv105, i32* %offsetp, align 4, !tbaa !3
  %sext = shl i64 %16, 32
  %idx.ext106 = ashr exact i64 %sext, 32
  %add.ptr107 = getelementptr inbounds i8* %start, i64 %idx.ext106
  store i8* %add.ptr107, i8** %sp, align 8, !tbaa !0
  %cmp108 = icmp ult i8* %add.ptr107, %send
  br i1 %cmp108, label %if.else115, label %if.then110

if.then110:                                       ; preds = %if.then101
  store i8* %send, i8** %sp, align 8, !tbaa !0
  %sub.ptr.lhs.cast111 = ptrtoint i8* %send to i64
  %sub.ptr.rhs.cast112 = ptrtoint i8* %start to i64
  %sub.ptr.sub113 = sub i64 %sub.ptr.lhs.cast111, %sub.ptr.rhs.cast112
  %conv114 = trunc i64 %sub.ptr.sub113 to i32
  store i32 %conv114, i32* %offsetp, align 4, !tbaa !3
  br label %if.end123

if.else115:                                       ; preds = %if.then101
  %cmp116 = icmp slt i64 %sext, 0
  br i1 %cmp116, label %if.then118, label %if.end123

if.then118:                                       ; preds = %if.else115
  store i8* %start, i8** %sp, align 8, !tbaa !0
  store i32 0, i32* %offsetp, align 4, !tbaa !3
  br label %if.end123

if.end123:                                        ; preds = %if.else30, %if.then33, %if.end57, %entry, %land.lhs.true7, %if.end, %if.then110, %if.then118, %if.else115
  %found.1 = phi i8 [ 1, %if.then110 ], [ 1, %if.then118 ], [ 1, %if.else115 ], [ 0, %land.lhs.true7 ], [ 0, %if.end ], [ 0, %entry ], [ 0, %if.end57 ], [ 0, %if.then33 ], [ 0, %if.else30 ]
  ret i8 %found.1
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc signext i8 @S_utf8_mg_pos_init(%struct.sv* %sv, %struct.magic** nocapture %mgp, i64** nocapture %cachep, i32 %i, i32* nocapture %offsetp, i8* %s, i8* %start) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 57344
  %tobool = icmp ne i32 %and, 0
  %and2 = and i32 %0, 8388608
  %tobool3 = icmp eq i32 %and2, 0
  %or.cond = and i1 %tobool, %tobool3
  br i1 %or.cond, label %if.then, label %if.end14

if.then:                                          ; preds = %entry
  %1 = load %struct.magic** %mgp, align 8, !tbaa !0
  %tobool4 = icmp eq %struct.magic* %1, null
  br i1 %tobool4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.then
  %call = tail call %struct.magic* @Perl_sv_magicext(%struct.sv* %sv, %struct.sv* null, i32 119, %struct.mgvtbl* @PL_vtbl_utf8, i8* null, i32 0) #7
  store %struct.magic* %call, %struct.magic** %mgp, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %if.then, %if.then5
  %2 = phi %struct.magic* [ %1, %if.then ], [ %call, %if.then5 ]
  %mg_ptr = getelementptr inbounds %struct.magic* %2, i64 0, i32 6
  %3 = load i8** %mg_ptr, align 8, !tbaa !0
  %tobool6 = icmp eq i8* %3, null
  br i1 %tobool6, label %if.else, label %if.then7

if.then7:                                         ; preds = %if.end
  %4 = bitcast i8* %3 to i64*
  store i64* %4, i64** %cachep, align 8, !tbaa !0
  br label %if.end11

if.else:                                          ; preds = %if.end
  %call9 = tail call i8* @Perl_safesysmalloc(i64 32) #8
  %5 = bitcast i8* %call9 to i64*
  store i64* %5, i64** %cachep, align 8, !tbaa !0
  tail call void @llvm.memset.p0i8.i64(i8* %call9, i8 0, i64 32, i32 1, i1 false)
  %6 = load i64** %cachep, align 8, !tbaa !0
  %7 = bitcast i64* %6 to i8*
  %8 = load %struct.magic** %mgp, align 8, !tbaa !0
  %mg_ptr10 = getelementptr inbounds %struct.magic* %8, i64 0, i32 6
  store i8* %7, i8** %mg_ptr10, align 8, !tbaa !0
  %.pre = load i64** %cachep, align 8, !tbaa !0
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7
  %9 = phi i64* [ %.pre, %if.else ], [ %4, %if.then7 ]
  %10 = load i32* %offsetp, align 4, !tbaa !3
  %conv = sext i32 %10 to i64
  %idxprom = sext i32 %i to i64
  %arrayidx = getelementptr inbounds i64* %9, i64 %idxprom
  store i64 %conv, i64* %arrayidx, align 8, !tbaa !5
  %sub.ptr.lhs.cast = ptrtoint i8* %s to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %start to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %add = add nsw i32 %i, 1
  %idxprom12 = sext i32 %add to i64
  %arrayidx13 = getelementptr inbounds i64* %9, i64 %idxprom12
  store i64 %sub.ptr.sub, i64* %arrayidx13, align 8, !tbaa !5
  br label %if.end14

if.end14:                                         ; preds = %entry, %if.end11
  %found.0 = phi i8 [ 1, %if.end11 ], [ 0, %entry ]
  ret i8 %found.0
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_pos_b2u(%struct.sv* %sv, i32* nocapture %offsetp) #0 {
entry:
  %len = alloca i64, align 8
  %n = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %len, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %len, i32 2) #7
  %.pre = load i64* %len, align 8, !tbaa !5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %5 = phi i64 [ %3, %cond.true ], [ %.pre, %cond.false ]
  %cond = phi i8* [ %4, %cond.true ], [ %call, %cond.false ]
  %conv = trunc i64 %5 to i32
  %6 = load i32* %offsetp, align 4, !tbaa !3
  %cmp2 = icmp slt i32 %conv, %6
  br i1 %cmp2, label %if.then4, label %if.else

if.then4:                                         ; preds = %cond.end
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([35 x i8]* @.str45, i64 0, i64 0)) #8
  br label %return

if.else:                                          ; preds = %cond.end
  %idx.ext = sext i32 %6 to i64
  %add.ptr = getelementptr inbounds i8* %cond, i64 %idx.ext
  store i64 0, i64* %len, align 8, !tbaa !5
  %7 = load i32* %sv_flags, align 4, !tbaa !3
  %and6 = and i32 %7, 57344
  %tobool7 = icmp ne i32 %and6, 0
  %and9 = and i32 %7, 8388608
  %tobool10 = icmp eq i32 %and9, 0
  %or.cond = and i1 %tobool7, %tobool10
  br i1 %or.cond, label %if.then11, label %while.cond67.preheader

while.cond67.preheader:                           ; preds = %if.then29, %if.else33, %if.then11, %land.lhs.true14, %if.else
  %8 = phi i64 [ 0, %if.else ], [ 0, %land.lhs.true14 ], [ 0, %if.then11 ], [ 0, %if.else33 ], [ %15, %if.then29 ]
  %mg.0.ph = phi %struct.magic* [ null, %if.else ], [ %call12, %land.lhs.true14 ], [ null, %if.then11 ], [ %call12, %if.else33 ], [ %call12, %if.then29 ]
  %cache.0.ph = phi i64* [ null, %if.else ], [ null, %land.lhs.true14 ], [ null, %if.then11 ], [ %10, %if.else33 ], [ %10, %if.then29 ]
  %s.0.ph = phi i8* [ %cond, %if.else ], [ %cond, %land.lhs.true14 ], [ %cond, %if.then11 ], [ %cond, %if.else33 ], [ %add.ptr32, %if.then29 ]
  %cmp68164 = icmp ult i8* %s.0.ph, %add.ptr
  br i1 %cmp68164, label %while.body70, label %while.end86

if.then11:                                        ; preds = %if.else
  %call12 = call %struct.magic* @Perl_mg_find(%struct.sv* %sv, i32 119) #8
  %tobool13 = icmp eq %struct.magic* %call12, null
  br i1 %tobool13, label %while.cond67.preheader, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %if.then11
  %mg_ptr = getelementptr inbounds %struct.magic* %call12, i64 0, i32 6
  %9 = load i8** %mg_ptr, align 8, !tbaa !0
  %tobool15 = icmp eq i8* %9, null
  br i1 %tobool15, label %while.cond67.preheader, label %if.then16

if.then16:                                        ; preds = %land.lhs.true14
  %10 = bitcast i8* %9 to i64*
  %arrayidx = getelementptr inbounds i8* %9, i64 8
  %11 = bitcast i8* %arrayidx to i64*
  %12 = load i64* %11, align 8, !tbaa !5
  %13 = load i32* %offsetp, align 4, !tbaa !3
  %conv18 = sext i32 %13 to i64
  %cmp19 = icmp eq i64 %12, %conv18
  br i1 %cmp19, label %if.then21, label %if.else24

if.then21:                                        ; preds = %if.then16
  %14 = load i64* %10, align 8, !tbaa !5
  %conv23 = trunc i64 %14 to i32
  store i32 %conv23, i32* %offsetp, align 4, !tbaa !3
  br label %return

if.else24:                                        ; preds = %if.then16
  %cmp27 = icmp ult i64 %12, %conv18
  br i1 %cmp27, label %if.then29, label %if.else33

if.then29:                                        ; preds = %if.else24
  %15 = load i64* %10, align 8, !tbaa !5
  store i64 %15, i64* %len, align 8, !tbaa !5
  %add.ptr32 = getelementptr inbounds i8* %cond, i64 %12
  br label %while.cond67.preheader

if.else33:                                        ; preds = %if.else24
  %sub = sub i64 %12, %conv18
  %mul = shl i64 %sub, 1
  %cmp37 = icmp ult i64 %conv18, %mul
  br i1 %cmp37, label %while.cond67.preheader, label %while.cond45.preheader.lr.ph

while.cond45.preheader.lr.ph:                     ; preds = %if.else33
  store i64 %conv18, i64* %11, align 8, !tbaa !5
  %add.ptr41 = getelementptr inbounds i8* %cond, i64 %12
  br label %while.cond45.preheader

while.cond45.preheader:                           ; preds = %while.cond45.preheader.lr.ph, %while.end
  %ubackw.0169 = phi i64 [ 0, %while.cond45.preheader.lr.ph ], [ %inc, %while.end ]
  %p.0168 = phi i8* [ %add.ptr41, %while.cond45.preheader.lr.ph ], [ %p.1, %while.end ]
  %backw.0167 = phi i64 [ %sub, %while.cond45.preheader.lr.ph ], [ %backw.1, %while.end ]
  br label %while.cond45

while.cond45:                                     ; preds = %while.cond45.preheader, %while.cond45
  %backw.1.in = phi i64 [ %backw.1, %while.cond45 ], [ %backw.0167, %while.cond45.preheader ]
  %p.0.pn = phi i8* [ %p.1, %while.cond45 ], [ %p.0168, %while.cond45.preheader ]
  %p.1 = getelementptr inbounds i8* %p.0.pn, i64 -1
  %backw.1 = add i64 %backw.1.in, -1
  %16 = load i8* %p.1, align 1, !tbaa !1
  %cmp47 = icmp slt i8 %16, 0
  %cmp50 = icmp ult i8 %16, -64
  %or.cond162 = and i1 %cmp47, %cmp50
  br i1 %or.cond162, label %while.cond45, label %while.end

while.end:                                        ; preds = %while.cond45
  %inc = add i64 %ubackw.0169, 1
  %tobool44 = icmp eq i64 %backw.1, 0
  br i1 %tobool44, label %while.end55, label %while.cond45.preheader

while.end55:                                      ; preds = %while.end
  %17 = load i64* %10, align 8, !tbaa !5
  %sub57 = sub i64 %17, %inc
  store i64 %sub57, i64* %10, align 8, !tbaa !5
  %conv59 = trunc i64 %sub57 to i32
  store i32 %conv59, i32* %offsetp, align 4, !tbaa !3
  %arrayidx60 = getelementptr inbounds i8* %9, i64 16
  call void @llvm.memset.p0i8.i64(i8* %arrayidx60, i8 0, i64 16, i32 8, i1 false)
  br label %return

while.body70:                                     ; preds = %while.cond67.preheader, %if.then81
  %18 = phi i64 [ %inc83, %if.then81 ], [ %8, %while.cond67.preheader ]
  %s.0165 = phi i8* [ %add.ptr82, %if.then81 ], [ %s.0.ph, %while.cond67.preheader ]
  store i64 1, i64* %n, align 8, !tbaa !5
  %19 = load i8* %s.0165, align 1, !tbaa !1
  %cmp72 = icmp sgt i8 %19, -1
  br i1 %cmp72, label %if.then81, label %if.end78

if.end78:                                         ; preds = %while.body70
  %conv71 = zext i8 %19 to i64
  %arrayidx75 = getelementptr inbounds [0 x i8]* @PL_utf8skip, i64 0, i64 %conv71
  %20 = load i8* %arrayidx75, align 1, !tbaa !1
  %conv76 = zext i8 %20 to i64
  %call77 = call i64 @Perl_utf8n_to_uvuni(i8* %s.0165, i64 %conv76, i64* %n, i32 0) #8
  %.pr = load i64* %n, align 8, !tbaa !5
  %cmp79 = icmp eq i64 %.pr, 0
  br i1 %cmp79, label %while.end86, label %if.then81

if.then81:                                        ; preds = %while.body70, %if.end78
  %21 = phi i64 [ %.pr, %if.end78 ], [ 1, %while.body70 ]
  %add.ptr82 = getelementptr inbounds i8* %s.0165, i64 %21
  %inc83 = add i64 %18, 1
  store i64 %inc83, i64* %len, align 8, !tbaa !5
  %cmp68 = icmp ult i8* %add.ptr82, %add.ptr
  br i1 %cmp68, label %while.body70, label %while.end86

while.end86:                                      ; preds = %if.then81, %if.end78, %while.cond67.preheader
  %22 = phi i64 [ %8, %while.cond67.preheader ], [ %18, %if.end78 ], [ %inc83, %if.then81 ]
  %23 = load i32* %sv_flags, align 4, !tbaa !3
  %and88 = and i32 %23, 8388608
  %tobool89 = icmp eq i32 %and88, 0
  br i1 %tobool89, label %if.then90, label %if.end106

if.then90:                                        ; preds = %while.end86
  %tobool91 = icmp eq %struct.magic* %mg.0.ph, null
  br i1 %tobool91, label %if.then92, label %if.end94

if.then92:                                        ; preds = %if.then90
  call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 119, i8* null, i32 0) #7
  %call93 = call %struct.magic* @Perl_mg_find(%struct.sv* %sv, i32 119) #8
  br label %if.end94

if.end94:                                         ; preds = %if.then90, %if.then92
  %mg.1 = phi %struct.magic* [ %mg.0.ph, %if.then90 ], [ %call93, %if.then92 ]
  %mg_ptr95 = getelementptr inbounds %struct.magic* %mg.1, i64 0, i32 6
  %24 = load i8** %mg_ptr95, align 8, !tbaa !0
  %tobool96 = icmp eq i8* %24, null
  br i1 %tobool96, label %if.then97, label %if.end100

if.then97:                                        ; preds = %if.end94
  %call98 = call i8* @Perl_safesysmalloc(i64 32) #8
  %25 = bitcast i8* %call98 to i64*
  call void @llvm.memset.p0i8.i64(i8* %call98, i8 0, i64 32, i32 1, i1 false)
  store i8* %call98, i8** %mg_ptr95, align 8, !tbaa !0
  br label %if.end100

if.end100:                                        ; preds = %if.end94, %if.then97
  %cache.1 = phi i64* [ %25, %if.then97 ], [ %cache.0.ph, %if.end94 ]
  store i64 %22, i64* %cache.1, align 8, !tbaa !5
  %26 = load i32* %offsetp, align 4, !tbaa !3
  %conv102 = sext i32 %26 to i64
  %arrayidx103 = getelementptr inbounds i64* %cache.1, i64 1
  store i64 %conv102, i64* %arrayidx103, align 8, !tbaa !5
  %arrayidx104 = getelementptr inbounds i64* %cache.1, i64 2
  %27 = bitcast i64* %arrayidx104 to i8*
  call void @llvm.memset.p0i8.i64(i8* %27, i8 0, i64 16, i32 8, i1 false)
  %.pre170 = load i64* %len, align 8, !tbaa !5
  br label %if.end106

if.end106:                                        ; preds = %while.end86, %if.end100
  %28 = phi i64 [ %22, %while.end86 ], [ %.pre170, %if.end100 ]
  %conv107 = trunc i64 %28 to i32
  store i32 %conv107, i32* %offsetp, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %entry, %if.then4, %if.end106, %while.end55, %if.then21
  ret void
}

; Function Attrs: optsize
declare i64 @Perl_utf8n_to_uvuni(i8*, i64, i64*, i32) #2

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_sv_eq(%struct.sv* %sv1, %struct.sv* %sv2) #0 {
entry:
  %cur1 = alloca i64, align 8
  %cur2 = alloca i64, align 8
  %is_utf8 = alloca i8, align 1
  %tobool = icmp eq %struct.sv* %sv1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 0, i64* %cur1, align 8, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv1, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.else
  %sv_any = getelementptr inbounds %struct.sv* %sv1, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %cur1, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %if.end

cond.false:                                       ; preds = %if.else
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv1, i64* %cur1, i32 2) #7
  br label %if.end

if.end:                                           ; preds = %cond.true, %cond.false, %if.then
  %pv1.0 = phi i8* [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.then ], [ %4, %cond.true ], [ %call, %cond.false ]
  %tobool2 = icmp eq %struct.sv* %sv2, null
  br i1 %tobool2, label %if.then3, label %if.else4

if.then3:                                         ; preds = %if.end
  store i64 0, i64* %cur2, align 8, !tbaa !5
  br label %if.end17

if.else4:                                         ; preds = %if.end
  %sv_flags5 = getelementptr inbounds %struct.sv* %sv2, i64 0, i32 2
  %5 = load i32* %sv_flags5, align 4, !tbaa !3
  %and6 = and i32 %5, 262144
  %cmp7 = icmp eq i32 %and6, 0
  br i1 %cmp7, label %cond.false13, label %cond.true8

cond.true8:                                       ; preds = %if.else4
  %sv_any9 = getelementptr inbounds %struct.sv* %sv2, i64 0, i32 0
  %6 = load i8** %sv_any9, align 8, !tbaa !0
  %xpv_cur10 = getelementptr inbounds i8* %6, i64 8
  %7 = bitcast i8* %xpv_cur10 to i64*
  %8 = load i64* %7, align 8, !tbaa !5
  store i64 %8, i64* %cur2, align 8, !tbaa !5
  %xpv_pv12 = bitcast i8* %6 to i8**
  %9 = load i8** %xpv_pv12, align 8, !tbaa !0
  br label %if.end17

cond.false13:                                     ; preds = %if.else4
  %call14 = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv2, i64* %cur2, i32 2) #7
  br label %if.end17

if.end17:                                         ; preds = %cond.true8, %cond.false13, %if.then3
  %pv2.0 = phi i8* [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.then3 ], [ %9, %cond.true8 ], [ %call14, %cond.false13 ]
  %10 = load i64* %cur1, align 8, !tbaa !5
  %tobool18 = icmp eq i64 %10, 0
  br i1 %tobool18, label %if.end94, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end17
  %11 = load i64* %cur2, align 8, !tbaa !5
  %tobool19 = icmp eq i64 %11, 0
  br i1 %tobool19, label %if.end94, label %land.lhs.true20

land.lhs.true20:                                  ; preds = %land.lhs.true
  %sv_flags21 = getelementptr inbounds %struct.sv* %sv1, i64 0, i32 2
  %12 = load i32* %sv_flags21, align 4, !tbaa !3
  %and22 = and i32 %12, 536870912
  %sv_flags23 = getelementptr inbounds %struct.sv* %sv2, i64 0, i32 2
  %13 = load i32* %sv_flags23, align 4, !tbaa !3
  %and24 = and i32 %13, 536870912
  %cmp25 = icmp eq i32 %and22, %and24
  br i1 %cmp25, label %if.end94, label %land.lhs.true26

land.lhs.true26:                                  ; preds = %land.lhs.true20
  %14 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private = getelementptr inbounds %struct.cop* %14, i64 0, i32 7
  %15 = load i8* %op_private, align 1, !tbaa !1
  %and27 = and i8 %15, 8
  %tobool28 = icmp eq i8 %and27, 0
  br i1 %tobool28, label %if.then29, label %if.end94

if.then29:                                        ; preds = %land.lhs.true26
  %16 = load %struct.sv** @PL_encoding, align 8, !tbaa !0
  %tobool30 = icmp eq %struct.sv* %16, null
  br i1 %tobool30, label %if.else72, label %if.then31

if.then31:                                        ; preds = %if.then29
  %tobool34 = icmp eq i32 %and22, 0
  br i1 %tobool34, label %if.else51, label %if.then35

if.then35:                                        ; preds = %if.then31
  %call36 = call %struct.sv* @Perl_newSVpvn(i8* %pv2.0, i64 %11) #7
  %17 = load %struct.sv** @PL_encoding, align 8, !tbaa !0
  %call37 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %call36, %struct.sv* %17) #7
  %sv_flags38 = getelementptr inbounds %struct.sv* %call36, i64 0, i32 2
  %18 = load i32* %sv_flags38, align 4, !tbaa !3
  %and39 = and i32 %18, 262144
  %cmp40 = icmp eq i32 %and39, 0
  br i1 %cmp40, label %cond.false47, label %cond.true42

cond.true42:                                      ; preds = %if.then35
  %sv_any43 = getelementptr inbounds %struct.sv* %call36, i64 0, i32 0
  %19 = load i8** %sv_any43, align 8, !tbaa !0
  %xpv_cur44 = getelementptr inbounds i8* %19, i64 8
  %20 = bitcast i8* %xpv_cur44 to i64*
  %21 = load i64* %20, align 8, !tbaa !5
  store i64 %21, i64* %cur2, align 8, !tbaa !5
  %xpv_pv46 = bitcast i8* %19 to i8**
  %22 = load i8** %xpv_pv46, align 8, !tbaa !0
  br label %if.end67

cond.false47:                                     ; preds = %if.then35
  %call48 = call i8* @Perl_sv_2pv_flags(%struct.sv* %call36, i64* %cur2, i32 2) #7
  br label %if.end67

if.else51:                                        ; preds = %if.then31
  %call52 = call %struct.sv* @Perl_newSVpvn(i8* %pv1.0, i64 %10) #7
  %23 = load %struct.sv** @PL_encoding, align 8, !tbaa !0
  %call53 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %call52, %struct.sv* %23) #7
  %sv_flags54 = getelementptr inbounds %struct.sv* %call52, i64 0, i32 2
  %24 = load i32* %sv_flags54, align 4, !tbaa !3
  %and55 = and i32 %24, 262144
  %cmp56 = icmp eq i32 %and55, 0
  br i1 %cmp56, label %cond.false63, label %cond.true58

cond.true58:                                      ; preds = %if.else51
  %sv_any59 = getelementptr inbounds %struct.sv* %call52, i64 0, i32 0
  %25 = load i8** %sv_any59, align 8, !tbaa !0
  %xpv_cur60 = getelementptr inbounds i8* %25, i64 8
  %26 = bitcast i8* %xpv_cur60 to i64*
  %27 = load i64* %26, align 8, !tbaa !5
  store i64 %27, i64* %cur1, align 8, !tbaa !5
  %xpv_pv62 = bitcast i8* %25 to i8**
  %28 = load i8** %xpv_pv62, align 8, !tbaa !0
  br label %if.end67

cond.false63:                                     ; preds = %if.else51
  %call64 = call i8* @Perl_sv_2pv_flags(%struct.sv* %call52, i64* %cur1, i32 2) #7
  br label %if.end67

if.end67:                                         ; preds = %cond.true58, %cond.false63, %cond.true42, %cond.false47
  %pv2.1 = phi i8* [ %22, %cond.true42 ], [ %call48, %cond.false47 ], [ %pv2.0, %cond.false63 ], [ %pv2.0, %cond.true58 ]
  %svrecode.0 = phi %struct.sv* [ %call36, %cond.true42 ], [ %call36, %cond.false47 ], [ %call52, %cond.false63 ], [ %call52, %cond.true58 ]
  %pv1.1 = phi i8* [ %pv1.0, %cond.true42 ], [ %pv1.0, %cond.false47 ], [ %call64, %cond.false63 ], [ %28, %cond.true58 ]
  %29 = load i64* %cur1, align 8, !tbaa !5
  %30 = load i64* %cur2, align 8, !tbaa !5
  %cmp68 = icmp eq i64 %29, %30
  br i1 %cmp68, label %if.end94, label %if.then70

if.then70:                                        ; preds = %if.end67
  call void @Perl_sv_free(%struct.sv* %svrecode.0) #7
  br label %return

if.else72:                                        ; preds = %if.then29
  store i8 1, i8* %is_utf8, align 1, !tbaa !1
  %31 = load i32* %sv_flags21, align 4, !tbaa !3
  %and74 = and i32 %31, 536870912
  %tobool75 = icmp eq i32 %and74, 0
  br i1 %tobool75, label %if.else82, label %if.then76

if.then76:                                        ; preds = %if.else72
  %call77 = call i8* @Perl_bytes_from_utf8(i8* %pv1.0, i64* %cur1, i8* %is_utf8) #8
  %cmp78 = icmp eq i8* %call77, %pv1.0
  %.call77 = select i1 %cmp78, i8* null, i8* %call77
  br label %if.end89

if.else82:                                        ; preds = %if.else72
  %call84 = call i8* @Perl_bytes_from_utf8(i8* %pv2.0, i64* %cur2, i8* %is_utf8) #8
  %cmp85 = icmp eq i8* %call84, %pv2.0
  %.call84 = select i1 %cmp85, i8* null, i8* %call84
  br label %if.end89

if.end89:                                         ; preds = %if.else82, %if.then76
  %pv2.2 = phi i8* [ %pv2.0, %if.then76 ], [ %call84, %if.else82 ]
  %tpv.0 = phi i8* [ %.call77, %if.then76 ], [ %.call84, %if.else82 ]
  %pv1.2 = phi i8* [ %call77, %if.then76 ], [ %pv1.0, %if.else82 ]
  %32 = load i8* %is_utf8, align 1, !tbaa !1
  %tobool90 = icmp eq i8 %32, 0
  br i1 %tobool90, label %if.end94, label %return

if.end94:                                         ; preds = %if.end89, %land.lhs.true26, %if.end17, %if.end67, %land.lhs.true20, %land.lhs.true
  %pv2.3 = phi i8* [ %pv2.1, %if.end67 ], [ %pv2.0, %land.lhs.true20 ], [ %pv2.0, %land.lhs.true ], [ %pv2.0, %if.end17 ], [ %pv2.0, %land.lhs.true26 ], [ %pv2.2, %if.end89 ]
  %tpv.1 = phi i8* [ null, %if.end67 ], [ null, %land.lhs.true20 ], [ null, %land.lhs.true ], [ null, %if.end17 ], [ null, %land.lhs.true26 ], [ %tpv.0, %if.end89 ]
  %svrecode.1 = phi %struct.sv* [ %svrecode.0, %if.end67 ], [ null, %land.lhs.true20 ], [ null, %land.lhs.true ], [ null, %if.end17 ], [ null, %land.lhs.true26 ], [ null, %if.end89 ]
  %pv1.3 = phi i8* [ %pv1.1, %if.end67 ], [ %pv1.0, %land.lhs.true20 ], [ %pv1.0, %land.lhs.true ], [ %pv1.0, %if.end17 ], [ %pv1.0, %land.lhs.true26 ], [ %pv1.2, %if.end89 ]
  %33 = load i64* %cur1, align 8, !tbaa !5
  %34 = load i64* %cur2, align 8, !tbaa !5
  %cmp95 = icmp eq i64 %33, %34
  br i1 %cmp95, label %if.then97, label %if.end100

if.then97:                                        ; preds = %if.end94
  %call98 = call i32 @memcmp(i8* %pv1.3, i8* %pv2.3, i64 %33) #8
  %lnot = icmp eq i32 %call98, 0
  %lnot.ext = zext i1 %lnot to i32
  br label %if.end100

if.end100:                                        ; preds = %if.then97, %if.end94
  %eq.0 = phi i32 [ %lnot.ext, %if.then97 ], [ 0, %if.end94 ]
  %tobool101 = icmp eq %struct.sv* %svrecode.1, null
  br i1 %tobool101, label %if.end103, label %if.then102

if.then102:                                       ; preds = %if.end100
  call void @Perl_sv_free(%struct.sv* %svrecode.1) #7
  br label %if.end103

if.end103:                                        ; preds = %if.end100, %if.then102
  %tobool104 = icmp eq i8* %tpv.1, null
  br i1 %tobool104, label %return, label %if.then105

if.then105:                                       ; preds = %if.end103
  call void @Perl_safesysfree(i8* %tpv.1) #8
  br label %return

return:                                           ; preds = %if.then105, %if.end103, %if.end89, %if.then70
  %retval.0 = phi i32 [ 0, %if.then70 ], [ 0, %if.end89 ], [ %eq.0, %if.end103 ], [ %eq.0, %if.then105 ]
  ret i32 %retval.0
}

; Function Attrs: optsize
declare i8* @Perl_bytes_from_utf8(i8*, i64*, i8*) #2

; Function Attrs: nounwind optsize readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) #6

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_sv_cmp_locale(%struct.sv* %sv1, %struct.sv* %sv2) #0 {
entry:
  %call = tail call i32 @Perl_sv_cmp(%struct.sv* %sv1, %struct.sv* %sv2) #7
  ret i32 %call
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_gets(%struct.sv* %sv, %struct._PerlIO** %fp, i32 %append) #0 {
entry:
  %append.addr = alloca i32, align 4
  %rslen = alloca i64, align 8
  %st = alloca %struct.stat, align 8
  %buf = alloca [8192 x i8], align 16
  store i32 %append, i32* %append.addr, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9961472
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %tobool1 = icmp ne i32 %append, 0
  %cond = select i1 %tobool1, i32 0, i32 4
  call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 %cond) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %1 = phi i32 [ %0, %entry ], [ %.pre, %if.then ]
  %and3 = and i32 %1, 252
  %cmp = icmp eq i32 %and3, 0
  br i1 %cmp, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.end
  %call = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 4) #7
  %.pre717 = load i32* %sv_flags, align 4, !tbaa !3
  br label %lor.end

lor.end:                                          ; preds = %if.end, %lor.rhs
  %2 = phi i32 [ %1, %if.end ], [ %.pre717, %lor.rhs ]
  %and6 = and i32 %2, -134217729
  store i32 %and6, i32* %sv_flags, align 4, !tbaa !3
  %tobool7 = icmp eq i32 %append, 0
  br i1 %tobool7, label %if.end28, label %if.then8

if.then8:                                         ; preds = %lor.end
  %call9 = call i32 @PerlIO_isutf8(%struct._PerlIO** %fp) #8
  %tobool10 = icmp eq i32 %call9, 0
  %3 = load i32* %sv_flags, align 4, !tbaa !3
  %and13 = and i32 %3, 536870912
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool10, label %if.else, label %if.then11

if.then11:                                        ; preds = %if.then8
  br i1 %tobool14, label %if.end28, label %if.then15

if.then15:                                        ; preds = %if.then11
  %call16 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 0) #7
  call void @Perl_sv_pos_u2b(%struct.sv* %sv, i32* %append.addr, i32* null) #7
  %.pre718 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end28

if.else:                                          ; preds = %if.then8
  br i1 %tobool14, label %if.then21, label %if.end28

if.then21:                                        ; preds = %if.else
  %call22 = call %struct.sv* @Perl_newSV(i64 0) #7
  %call23 = call i8* @Perl_sv_gets(%struct.sv* %call22, %struct._PerlIO** %fp, i32 0) #7
  %call24 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %call22, i32 0) #7
  %conv25 = sext i32 %append to i64
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %4 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %4, i64 8
  %5 = bitcast i8* %xpv_cur to i64*
  store i64 %conv25, i64* %5, align 8, !tbaa !5
  call void @Perl_sv_catsv_flags(%struct.sv* %sv, %struct.sv* %call22, i32 2) #7
  call void @Perl_sv_free(%struct.sv* %call22) #7
  br label %return_string_or_null

if.end28:                                         ; preds = %lor.end, %if.then15, %if.then11, %if.else
  %6 = phi i32 [ %and6, %lor.end ], [ %.pre718, %if.then15 ], [ %3, %if.then11 ], [ %3, %if.else ]
  %and30 = and i32 %6, 1223753727
  %or = or i32 %and30, 67371008
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %call32 = call i32 @PerlIO_isutf8(%struct._PerlIO** %fp) #8
  %tobool33 = icmp eq i32 %call32, 0
  br i1 %tobool33, label %if.end37, label %if.then34

if.then34:                                        ; preds = %if.end28
  %7 = load i32* %sv_flags, align 4, !tbaa !3
  %or36 = or i32 %7, 536870912
  store i32 %or36, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end37

if.end37:                                         ; preds = %if.end28, %if.then34
  %8 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cmp38 = icmp eq %struct.cop* %8, @PL_compiling
  br i1 %cmp38, label %cond.end205, label %if.else41

if.else41:                                        ; preds = %if.end37
  %9 = load %struct.sv** @PL_rs, align 8, !tbaa !0
  %sv_flags42 = getelementptr inbounds %struct.sv* %9, i64 0, i32 2
  %10 = load i32* %sv_flags42, align 4, !tbaa !3
  %and43 = and i32 %10, 118423552
  %tobool44 = icmp eq i32 %and43, 0
  br i1 %tobool44, label %if.then45, label %if.else78

if.then45:                                        ; preds = %if.else41
  %11 = bitcast %struct.stat* %st to i8*
  call void @llvm.lifetime.start(i64 144, i8* %11) #3
  %call46 = call i32 @Perl_PerlIO_fileno(%struct._PerlIO** %fp) #8
  %call47 = call i32 @fstat(i32 %call46, %struct.stat* %st) #8
  %tobool48 = icmp eq i32 %call47, 0
  br i1 %tobool48, label %land.lhs.true, label %if.end77

land.lhs.true:                                    ; preds = %if.then45
  %st_mode = getelementptr inbounds %struct.stat* %st, i64 0, i32 3
  %12 = load i32* %st_mode, align 8, !tbaa !3
  %and49 = and i32 %12, 61440
  %cmp50 = icmp eq i32 %and49, 32768
  br i1 %cmp50, label %if.then52, label %if.end77

if.then52:                                        ; preds = %land.lhs.true
  %call53 = call i64 @Perl_PerlIO_tell(%struct._PerlIO** %fp) #8
  %cmp54 = icmp eq i64 %call53, -1
  br i1 %cmp54, label %if.end77, label %land.lhs.true56

land.lhs.true56:                                  ; preds = %if.then52
  %st_size = getelementptr inbounds %struct.stat* %st, i64 0, i32 8
  %13 = load i64* %st_size, align 8, !tbaa !5
  %14 = load i32* %append.addr, align 4, !tbaa !3
  %conv57 = sext i32 %14 to i64
  %add = add nsw i64 %conv57, %13
  %cmp58 = icmp sgt i64 %add, %call53
  br i1 %cmp58, label %if.then60, label %if.end77

if.then60:                                        ; preds = %land.lhs.true56
  %sv_any61 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %15 = load i8** %sv_any61, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %15, i64 16
  %16 = bitcast i8* %xpv_len to i64*
  %17 = load i64* %16, align 8, !tbaa !5
  %sub = sub i64 1, %call53
  %add64 = add i64 %sub, %13
  %add65 = add i64 %add64, %conv57
  %cmp66 = icmp ult i64 %17, %add65
  br i1 %cmp66, label %cond.true, label %if.end77

cond.true:                                        ; preds = %if.then60
  %call73 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add65) #7
  br label %if.end77

if.end77:                                         ; preds = %if.then60, %if.then52, %if.then45, %land.lhs.true56, %cond.true, %land.lhs.true
  store i64 0, i64* %rslen, align 8, !tbaa !5
  call void @llvm.lifetime.end(i64 144, i8* %11) #3
  br label %if.end198thread-pre-split

if.else78:                                        ; preds = %if.else41
  %and80 = and i32 %10, 524288
  %tobool81 = icmp eq i32 %and80, 0
  br i1 %tobool81, label %if.else145, label %land.lhs.true82

land.lhs.true82:                                  ; preds = %if.else78
  %sv_any83 = getelementptr inbounds %struct.sv* %9, i64 0, i32 0
  %18 = load i8** %sv_any83, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %18 to %struct.sv**
  %19 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_flags84 = getelementptr inbounds %struct.sv* %19, i64 0, i32 2
  %20 = load i32* %sv_flags84, align 4, !tbaa !3
  %and85 = and i32 %20, 65536
  %tobool86 = icmp eq i32 %and85, 0
  br i1 %tobool86, label %cond.false91, label %cond.true87

cond.true87:                                      ; preds = %land.lhs.true82
  %sv_any90 = getelementptr inbounds %struct.sv* %19, i64 0, i32 0
  %21 = load i8** %sv_any90, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %21, i64 24
  %22 = bitcast i8* %xiv_iv to i64*
  %23 = load i64* %22, align 8, !tbaa !5
  br label %cond.end95

cond.false91:                                     ; preds = %land.lhs.true82
  %call94 = call i64 @Perl_sv_2iv(%struct.sv* %19) #7
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false91, %cond.true87
  %cond96 = phi i64 [ %23, %cond.true87 ], [ %call94, %cond.false91 ]
  %cmp97 = icmp sgt i64 %cond96, 0
  %24 = load %struct.sv** @PL_rs, align 8, !tbaa !0
  br i1 %cmp97, label %if.then99, label %cond.end95.if.else145_crit_edge

cond.end95.if.else145_crit_edge:                  ; preds = %cond.end95
  %sv_flags146.phi.trans.insert = getelementptr inbounds %struct.sv* %24, i64 0, i32 2
  %.pre726 = load i32* %sv_flags146.phi.trans.insert, align 4, !tbaa !3
  br label %if.else145

if.then99:                                        ; preds = %cond.end95
  %sv_any100 = getelementptr inbounds %struct.sv* %24, i64 0, i32 0
  %25 = load i8** %sv_any100, align 8, !tbaa !0
  %xrv_rv101 = bitcast i8* %25 to %struct.sv**
  %26 = load %struct.sv** %xrv_rv101, align 8, !tbaa !0
  %sv_flags102 = getelementptr inbounds %struct.sv* %26, i64 0, i32 2
  %27 = load i32* %sv_flags102, align 4, !tbaa !3
  %and103 = and i32 %27, 65536
  %tobool104 = icmp eq i32 %and103, 0
  br i1 %tobool104, label %cond.false110, label %cond.true105

cond.true105:                                     ; preds = %if.then99
  %sv_any108 = getelementptr inbounds %struct.sv* %26, i64 0, i32 0
  %28 = load i8** %sv_any108, align 8, !tbaa !0
  %xiv_iv109 = getelementptr inbounds i8* %28, i64 24
  %29 = bitcast i8* %xiv_iv109 to i64*
  %30 = load i64* %29, align 8, !tbaa !5
  br label %cond.end114

cond.false110:                                    ; preds = %if.then99
  %call113 = call i64 @Perl_sv_2iv(%struct.sv* %26) #7
  br label %cond.end114

cond.end114:                                      ; preds = %cond.false110, %cond.true105
  %cond115 = phi i64 [ %30, %cond.true105 ], [ %call113, %cond.false110 ]
  %conv116 = trunc i64 %cond115 to i32
  %sv_any117 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %31 = load i8** %sv_any117, align 8, !tbaa !0
  %xpv_len118 = getelementptr inbounds i8* %31, i64 16
  %32 = bitcast i8* %xpv_len118 to i64*
  %33 = load i64* %32, align 8, !tbaa !5
  %34 = load i32* %append.addr, align 4, !tbaa !3
  %add119 = add i32 %conv116, 1
  %add120 = add i32 %add119, %34
  %conv121 = sext i32 %add120 to i64
  %cmp122 = icmp ult i64 %33, %conv121
  br i1 %cmp122, label %cond.true124, label %cond.false129

cond.true124:                                     ; preds = %cond.end114
  %call128 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %conv121) #7
  br label %cond.end132

cond.false129:                                    ; preds = %cond.end114
  %xpv_pv131 = bitcast i8* %31 to i8**
  %35 = load i8** %xpv_pv131, align 8, !tbaa !0
  br label %cond.end132

cond.end132:                                      ; preds = %cond.false129, %cond.true124
  %cond133 = phi i8* [ %call128, %cond.true124 ], [ %35, %cond.false129 ]
  %idx.ext = sext i32 %34 to i64
  %add.ptr = getelementptr inbounds i8* %cond133, i64 %idx.ext
  %sext678 = shl i64 %cond115, 32
  %conv134 = ashr exact i64 %sext678, 32
  %call135 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %fp, i8* %add.ptr, i64 %conv134) #8
  %conv136 = trunc i64 %call135 to i32
  %cmp137 = icmp slt i32 %conv136, 0
  %.conv136 = select i1 %cmp137, i32 0, i32 %conv136
  %add141 = add nsw i32 %.conv136, %34
  %conv142 = sext i32 %add141 to i64
  %36 = load i8** %sv_any117, align 8, !tbaa !0
  %xpv_cur144 = getelementptr inbounds i8* %36, i64 8
  %37 = bitcast i8* %xpv_cur144 to i64*
  store i64 %conv142, i64* %37, align 8, !tbaa !5
  %add.ptr.sum = add i64 %conv142, %idx.ext
  %arrayidx = getelementptr inbounds i8* %cond133, i64 %add.ptr.sum
  store i8 0, i8* %arrayidx, align 1, !tbaa !1
  br label %return_string_or_null

if.else145:                                       ; preds = %cond.end95.if.else145_crit_edge, %if.else78
  %38 = phi i32 [ %.pre726, %cond.end95.if.else145_crit_edge ], [ %10, %if.else78 ]
  %39 = phi %struct.sv* [ %24, %cond.end95.if.else145_crit_edge ], [ %9, %if.else78 ]
  %and147 = and i32 %38, 262144
  %tobool148 = icmp eq i32 %and147, 0
  br i1 %tobool148, label %if.else154, label %land.lhs.true149

land.lhs.true149:                                 ; preds = %if.else145
  %sv_any150 = getelementptr inbounds %struct.sv* %39, i64 0, i32 0
  %40 = load i8** %sv_any150, align 8, !tbaa !0
  %xpv_cur151 = getelementptr inbounds i8* %40, i64 8
  %41 = bitcast i8* %xpv_cur151 to i64*
  %42 = load i64* %41, align 8, !tbaa !5
  %tobool152 = icmp eq i64 %42, 0
  br i1 %tobool152, label %cond.end205.thread696, label %if.else154

cond.end205.thread696:                            ; preds = %land.lhs.true149
  store i64 2, i64* %rslen, align 8, !tbaa !5
  br label %do.body

if.else154:                                       ; preds = %land.lhs.true149, %if.else145
  %call155 = call i32 @PerlIO_isutf8(%struct._PerlIO** %fp) #8
  %tobool156 = icmp eq i32 %call155, 0
  %43 = load %struct.sv** @PL_rs, align 8, !tbaa !0
  %sv_flags158 = getelementptr inbounds %struct.sv* %43, i64 0, i32 2
  %44 = load i32* %sv_flags158, align 4, !tbaa !3
  br i1 %tobool156, label %if.else171, label %if.then157

if.then157:                                       ; preds = %if.else154
  %and159 = and i32 %44, 537133056
  %cmp160 = icmp eq i32 %and159, 537133056
  br i1 %cmp160, label %cond.true162, label %cond.false167

cond.true162:                                     ; preds = %if.then157
  %sv_any163 = getelementptr inbounds %struct.sv* %43, i64 0, i32 0
  %45 = load i8** %sv_any163, align 8, !tbaa !0
  %xpv_cur164 = getelementptr inbounds i8* %45, i64 8
  %46 = bitcast i8* %xpv_cur164 to i64*
  %47 = load i64* %46, align 8, !tbaa !5
  store i64 %47, i64* %rslen, align 8, !tbaa !5
  %xpv_pv166 = bitcast i8* %45 to i8**
  %48 = load i8** %xpv_pv166, align 8, !tbaa !0
  br label %if.end198

cond.false167:                                    ; preds = %if.then157
  %call168 = call i8* @Perl_sv_2pvutf8(%struct.sv* %43, i64* %rslen) #7
  br label %if.end198thread-pre-split

if.else171:                                       ; preds = %if.else154
  %and173 = and i32 %44, 536870912
  %tobool174 = icmp eq i32 %and173, 0
  br i1 %tobool174, label %if.end180, label %if.then175

if.then175:                                       ; preds = %if.else171
  %call176 = call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %43, i8 signext 1) #7
  %tobool177 = icmp eq i8 %call176, 0
  br i1 %tobool177, label %if.then178, label %if.end180

if.then178:                                       ; preds = %if.then175
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([21 x i8]* @.str48, i64 0, i64 0)) #8
  br label %if.end180

if.end180:                                        ; preds = %if.then175, %if.else171, %if.then178
  %49 = load %struct.sv** @PL_rs, align 8, !tbaa !0
  %sv_flags181 = getelementptr inbounds %struct.sv* %49, i64 0, i32 2
  %50 = load i32* %sv_flags181, align 4, !tbaa !3
  %and182 = and i32 %50, 262144
  %cmp183 = icmp eq i32 %and182, 0
  br i1 %cmp183, label %cond.false190, label %cond.true185

cond.true185:                                     ; preds = %if.end180
  %sv_any186 = getelementptr inbounds %struct.sv* %49, i64 0, i32 0
  %51 = load i8** %sv_any186, align 8, !tbaa !0
  %xpv_cur187 = getelementptr inbounds i8* %51, i64 8
  %52 = bitcast i8* %xpv_cur187 to i64*
  %53 = load i64* %52, align 8, !tbaa !5
  store i64 %53, i64* %rslen, align 8, !tbaa !5
  %xpv_pv189 = bitcast i8* %51 to i8**
  %54 = load i8** %xpv_pv189, align 8, !tbaa !0
  br label %if.end198

cond.false190:                                    ; preds = %if.end180
  %call191 = call i8* @Perl_sv_2pv_flags(%struct.sv* %49, i64* %rslen, i32 2) #7
  br label %if.end198thread-pre-split

if.end198thread-pre-split:                        ; preds = %if.end77, %cond.false167, %cond.false190
  %rsptr.0.ph.ph = phi i8* [ %call191, %cond.false190 ], [ %call168, %cond.false167 ], [ null, %if.end77 ]
  %.pr.pr = load i64* %rslen, align 8, !tbaa !5
  br label %if.end198

if.end198:                                        ; preds = %if.end198thread-pre-split, %cond.true185, %cond.true162
  %.pr = phi i64 [ %.pr.pr, %if.end198thread-pre-split ], [ %53, %cond.true185 ], [ %47, %cond.true162 ]
  %rsptr.0.ph = phi i8* [ %rsptr.0.ph.ph, %if.end198thread-pre-split ], [ %54, %cond.true185 ], [ %48, %cond.true162 ]
  %tobool199 = icmp eq i64 %.pr, 0
  br i1 %tobool199, label %if.end226, label %cond.end205.thread691

cond.end205.thread691:                            ; preds = %if.end198
  %sub201692 = add i64 %.pr, -1
  %arrayidx202693 = getelementptr inbounds i8* %rsptr.0.ph, i64 %sub201692
  %55 = load i8* %arrayidx202693, align 1, !tbaa !1
  %phitmp694 = sext i8 %55 to i32
  br label %if.end226

cond.end205:                                      ; preds = %if.end37
  store i64 1, i64* %rslen, align 8, !tbaa !5
  br label %if.end226

do.body:                                          ; preds = %if.end213, %cond.end205.thread696
  %call210 = call i32 @Perl_PerlIO_eof(%struct._PerlIO** %fp) #8
  %tobool211 = icmp eq i32 %call210, 0
  br i1 %tobool211, label %if.end213, label %return

if.end213:                                        ; preds = %do.body
  %call214 = call i32 @PerlIO_getc(%struct._PerlIO** %fp) #8
  switch i32 %call214, label %if.end221 [
    i32 10, label %do.body
    i32 -1, label %return
  ]

if.end221:                                        ; preds = %if.end213
  %call222 = call i32 @PerlIO_ungetc(%struct._PerlIO** %fp, i32 %call214) #8
  br label %if.end226

if.end226:                                        ; preds = %if.end198, %cond.end205, %cond.end205.thread691, %if.end221
  %56 = phi i64 [ 2, %if.end221 ], [ 1, %cond.end205 ], [ %.pr, %cond.end205.thread691 ], [ 0, %if.end198 ]
  %tobool208690 = phi i1 [ true, %if.end221 ], [ false, %cond.end205 ], [ false, %cond.end205.thread691 ], [ false, %if.end198 ]
  %cond206689 = phi i32 [ 10, %if.end221 ], [ 10, %cond.end205 ], [ %phitmp694, %cond.end205.thread691 ], [ 0, %if.end198 ]
  %rsptr.0686688 = phi i8* [ getelementptr inbounds ([3 x i8]* @.str47, i64 0, i64 0), %if.end221 ], [ getelementptr inbounds ([2 x i8]* @.str46, i64 0, i64 0), %cond.end205 ], [ %rsptr.0.ph, %cond.end205.thread691 ], [ %rsptr.0.ph, %if.end198 ]
  %i.0 = phi i32 [ %call214, %if.end221 ], [ 0, %cond.end205 ], [ 0, %cond.end205.thread691 ], [ 0, %if.end198 ]
  %call227 = call i32 @PerlIO_fast_gets(%struct._PerlIO** %fp) #8
  %tobool228 = icmp eq i32 %call227, 0
  br i1 %tobool228, label %if.else426, label %if.then229

if.then229:                                       ; preds = %if.end226
  %call230 = call i32 @Perl_PerlIO_get_cnt(%struct._PerlIO** %fp) #8
  %sv_any231 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %57 = load i8** %sv_any231, align 8, !tbaa !0
  %xpv_len232 = getelementptr inbounds i8* %57, i64 16
  %58 = bitcast i8* %xpv_len232 to i64*
  %59 = load i64* %58, align 8, !tbaa !5
  %60 = load i32* %append.addr, align 4, !tbaa !3
  %conv233 = sext i32 %60 to i64
  %sub234 = sub i64 %59, %conv233
  %conv235 = trunc i64 %sub234 to i32
  %add236 = add nsw i32 %call230, 1
  %cmp237 = icmp sgt i32 %conv235, %add236
  br i1 %cmp237, label %if.end292, label %if.then239

if.then239:                                       ; preds = %if.then229
  %tobool240 = icmp ne i64 %56, 0
  %cmp242 = icmp sgt i32 %call230, 80
  %or.cond = and i1 %tobool240, %cmp242
  br i1 %or.cond, label %land.lhs.true244, label %if.else260

land.lhs.true244:                                 ; preds = %if.then239
  %conv247 = trunc i64 %59 to i32
  %cmp248 = icmp sgt i32 %conv247, %60
  br i1 %cmp248, label %if.then250, label %if.else260

if.then250:                                       ; preds = %land.lhs.true244
  %conv251677 = zext i32 %call230 to i64
  %sub254 = add i64 %conv251677, 1
  %add256 = sub i64 %sub254, %59
  %add257 = add i64 %add256, %conv233
  %conv258 = trunc i64 %add257 to i32
  %sub259 = sub nsw i32 %call230, %conv258
  br label %if.end292

if.else260:                                       ; preds = %if.then239, %land.lhs.true244
  %cmp263 = icmp slt i32 %call230, 1
  %.add236 = select i1 %cmp263, i32 2, i32 %add236
  %add270 = add nsw i32 %60, %.add236
  %conv271 = sext i32 %add270 to i64
  %cmp272 = icmp ult i64 %59, %conv271
  br i1 %cmp272, label %cond.true274, label %if.end292

cond.true274:                                     ; preds = %if.else260
  %call284 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %conv271) #7
  %.pre719 = load i8** %sv_any231, align 8, !tbaa !0
  br label %if.end292

if.end292:                                        ; preds = %if.then229, %if.else260, %if.then250, %cond.true274
  %61 = phi i8* [ %57, %if.then250 ], [ %.pre719, %cond.true274 ], [ %57, %if.else260 ], [ %57, %if.then229 ]
  %cnt.0 = phi i32 [ %sub259, %if.then250 ], [ %call230, %cond.true274 ], [ %call230, %if.else260 ], [ %call230, %if.then229 ]
  %shortbuffered.0 = phi i32 [ %conv258, %if.then250 ], [ 0, %cond.true274 ], [ 0, %if.else260 ], [ 0, %if.then229 ]
  %xpv_pv294 = bitcast i8* %61 to i8**
  %62 = load i8** %xpv_pv294, align 8, !tbaa !0
  %add.ptr296 = getelementptr inbounds i8* %62, i64 %conv233
  %call297 = call i8* @Perl_PerlIO_get_ptr(%struct._PerlIO** %fp) #8
  br label %screamer.outer

screamer.outer:                                   ; preds = %cond.end384, %land.lhs.true392, %lor.lhs.false, %land.lhs.true402, %if.end292
  %i.1.ph = phi i32 [ %i.0, %if.end292 ], [ %i.2, %land.lhs.true402 ], [ %i.2, %lor.lhs.false ], [ %call355, %land.lhs.true392 ], [ %call355, %cond.end384 ]
  %cnt.1.ph = phi i32 [ %cnt.0, %if.end292 ], [ %cnt.4, %land.lhs.true402 ], [ %cnt.4, %lor.lhs.false ], [ %call356, %land.lhs.true392 ], [ %call356, %cond.end384 ]
  %bp.0.ph = phi i8* [ %add.ptr296, %if.end292 ], [ %bp.3, %land.lhs.true402 ], [ %bp.3, %lor.lhs.false ], [ %incdec.ptr390, %land.lhs.true392 ], [ %incdec.ptr390, %cond.end384 ]
  %ptr.0.ph = phi i8* [ %call297, %if.end292 ], [ %ptr.3, %land.lhs.true402 ], [ %ptr.3, %lor.lhs.false ], [ %call357, %land.lhs.true392 ], [ %call357, %cond.end384 ]
  %shortbuffered.1.ph = phi i32 [ %shortbuffered.0, %if.end292 ], [ %shortbuffered.1714, %land.lhs.true402 ], [ %shortbuffered.1714, %lor.lhs.false ], [ 0, %land.lhs.true392 ], [ 0, %cond.end384 ]
  br label %screamer

screamer:                                         ; preds = %screamer.outer, %cond.end349
  %cnt.1 = phi i32 [ %shortbuffered.1, %cond.end349 ], [ %cnt.1.ph, %screamer.outer ]
  %bp.0 = phi i8* [ %add.ptr353, %cond.end349 ], [ %bp.0.ph, %screamer.outer ]
  %ptr.0 = phi i8* [ %ptr.2, %cond.end349 ], [ %ptr.0.ph, %screamer.outer ]
  %shortbuffered.1 = phi i32 [ 0, %cond.end349 ], [ %shortbuffered.1.ph, %screamer.outer ]
  %cmp298 = icmp sgt i32 %cnt.1, 0
  br i1 %cmp298, label %if.then300, label %if.end319

if.then300:                                       ; preds = %screamer
  %63 = load i64* %rslen, align 8, !tbaa !5
  %tobool301 = icmp eq i64 %63, 0
  br i1 %tobool301, label %if.else312, label %while.cond

while.cond:                                       ; preds = %if.then300, %while.body
  %cnt.2 = phi i32 [ %dec, %while.body ], [ %cnt.1, %if.then300 ]
  %bp.1 = phi i8* [ %incdec.ptr305, %while.body ], [ %bp.0, %if.then300 ]
  %ptr.1 = phi i8* [ %incdec.ptr, %while.body ], [ %ptr.0, %if.then300 ]
  %cmp303 = icmp sgt i32 %cnt.2, 0
  br i1 %cmp303, label %while.body, label %if.end319

while.body:                                       ; preds = %while.cond
  %dec = add nsw i32 %cnt.2, -1
  %incdec.ptr = getelementptr inbounds i8* %ptr.1, i64 1
  %64 = load i8* %ptr.1, align 1, !tbaa !1
  %incdec.ptr305 = getelementptr inbounds i8* %bp.1, i64 1
  store i8 %64, i8* %bp.1, align 1, !tbaa !1
  %conv306 = sext i8 %64 to i32
  %cmp308 = icmp eq i32 %conv306, %cond206689
  br i1 %cmp308, label %thats_all_folks.loopexit, label %while.cond

if.else312:                                       ; preds = %if.then300
  %conv313 = sext i32 %cnt.1 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %bp.0, i8* %ptr.0, i64 %conv313, i32 1, i1 false)
  %add.ptr315 = getelementptr inbounds i8* %bp.0, i64 %conv313
  %add.ptr317 = getelementptr inbounds i8* %ptr.0, i64 %conv313
  br label %if.end319

if.end319:                                        ; preds = %while.cond, %if.else312, %screamer
  %cnt.3 = phi i32 [ 0, %if.else312 ], [ %cnt.1, %screamer ], [ %cnt.2, %while.cond ]
  %bp.2 = phi i8* [ %add.ptr315, %if.else312 ], [ %bp.0, %screamer ], [ %bp.1, %while.cond ]
  %ptr.2 = phi i8* [ %add.ptr317, %if.else312 ], [ %ptr.0, %screamer ], [ %ptr.1, %while.cond ]
  %tobool320 = icmp eq i32 %shortbuffered.1, 0
  br i1 %tobool320, label %if.end354, label %if.then321

if.then321:                                       ; preds = %if.end319
  %65 = load i8** %sv_any231, align 8, !tbaa !0
  %xpv_pv323 = bitcast i8* %65 to i8**
  %66 = load i8** %xpv_pv323, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint i8* %bp.2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %66 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %xpv_cur325 = getelementptr inbounds i8* %65, i64 8
  %67 = bitcast i8* %xpv_cur325 to i64*
  store i64 %sub.ptr.sub, i64* %67, align 8, !tbaa !5
  %xpv_len327 = getelementptr inbounds i8* %65, i64 16
  %68 = bitcast i8* %xpv_len327 to i64*
  %69 = load i64* %68, align 8, !tbaa !5
  %70 = load i32* %append.addr, align 4, !tbaa !3
  %conv330 = sext i32 %70 to i64
  %conv332 = sext i32 %shortbuffered.1 to i64
  %add331 = add i64 %conv332, 2
  %add333 = add i64 %add331, %69
  %add334 = add i64 %add333, %conv330
  %cmp335 = icmp ult i64 %69, %add334
  br i1 %cmp335, label %cond.true337, label %cond.end349

cond.true337:                                     ; preds = %if.then321
  %call345 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add334) #7
  %.pre722 = load i8** %sv_any231, align 8, !tbaa !0
  %xpv_pv352.phi.trans.insert = bitcast i8* %.pre722 to i8**
  %.pre723 = load i8** %xpv_pv352.phi.trans.insert, align 8, !tbaa !0
  br label %cond.end349

cond.end349:                                      ; preds = %if.then321, %cond.true337
  %71 = phi i8* [ %66, %if.then321 ], [ %.pre723, %cond.true337 ]
  %add.ptr353 = getelementptr inbounds i8* %71, i64 %sub.ptr.sub
  br label %screamer

if.end354:                                        ; preds = %if.end319
  call void @Perl_PerlIO_set_ptrcnt(%struct._PerlIO** %fp, i8* %ptr.2, i32 %cnt.3) #8
  %call355 = call i32 @PerlIO_getc(%struct._PerlIO** %fp) #8
  %call356 = call i32 @Perl_PerlIO_get_cnt(%struct._PerlIO** %fp) #8
  %call357 = call i8* @Perl_PerlIO_get_ptr(%struct._PerlIO** %fp) #8
  %cmp358 = icmp eq i32 %call355, -1
  br i1 %cmp358, label %thats_really_all_folks, label %if.end361

if.end361:                                        ; preds = %if.end354
  %72 = load i8** %sv_any231, align 8, !tbaa !0
  %xpv_pv363 = bitcast i8* %72 to i8**
  %73 = load i8** %xpv_pv363, align 8, !tbaa !0
  %sub.ptr.lhs.cast364 = ptrtoint i8* %bp.2 to i64
  %sub.ptr.rhs.cast365 = ptrtoint i8* %73 to i64
  %sub.ptr.sub366 = sub i64 %sub.ptr.lhs.cast364, %sub.ptr.rhs.cast365
  %xpv_cur368 = getelementptr inbounds i8* %72, i64 8
  %74 = bitcast i8* %xpv_cur368 to i64*
  store i64 %sub.ptr.sub366, i64* %74, align 8, !tbaa !5
  %xpv_len370 = getelementptr inbounds i8* %72, i64 16
  %75 = bitcast i8* %xpv_len370 to i64*
  %76 = load i64* %75, align 8, !tbaa !5
  %conv371 = sext i32 %call356 to i64
  %add372 = add i64 %conv371, 2
  %add373 = add i64 %add372, %sub.ptr.sub366
  %cmp374 = icmp ult i64 %76, %add373
  br i1 %cmp374, label %cond.true376, label %cond.end384

cond.true376:                                     ; preds = %if.end361
  %call380 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add373) #7
  %.pre720 = load i8** %sv_any231, align 8, !tbaa !0
  %xpv_pv387.phi.trans.insert = bitcast i8* %.pre720 to i8**
  %.pre721 = load i8** %xpv_pv387.phi.trans.insert, align 8, !tbaa !0
  br label %cond.end384

cond.end384:                                      ; preds = %if.end361, %cond.true376
  %77 = phi i8* [ %.pre721, %cond.true376 ], [ %73, %if.end361 ]
  %add.ptr388 = getelementptr inbounds i8* %77, i64 %sub.ptr.sub366
  %conv389 = trunc i32 %call355 to i8
  %add.ptr388.sum = add i64 %sub.ptr.sub366, 1
  %incdec.ptr390 = getelementptr inbounds i8* %77, i64 %add.ptr388.sum
  store i8 %conv389, i8* %add.ptr388, align 1, !tbaa !1
  %78 = load i64* %rslen, align 8, !tbaa !5
  %tobool391 = icmp eq i64 %78, 0
  br i1 %tobool391, label %screamer.outer, label %land.lhs.true392

land.lhs.true392:                                 ; preds = %cond.end384
  %sext676 = shl i32 %call355, 24
  %conv394 = ashr exact i32 %sext676, 24
  %cmp396 = icmp eq i32 %conv394, %cond206689
  br i1 %cmp396, label %thats_all_folks, label %screamer.outer

thats_all_folks.loopexit:                         ; preds = %while.body
  %.pre724 = load i64* %rslen, align 8, !tbaa !5
  br label %thats_all_folks

thats_all_folks:                                  ; preds = %thats_all_folks.loopexit, %land.lhs.true392
  %79 = phi i64 [ %78, %land.lhs.true392 ], [ %.pre724, %thats_all_folks.loopexit ]
  %shortbuffered.1714 = phi i32 [ 0, %land.lhs.true392 ], [ %shortbuffered.1, %thats_all_folks.loopexit ]
  %i.2 = phi i32 [ %call355, %land.lhs.true392 ], [ %i.1.ph, %thats_all_folks.loopexit ]
  %cnt.4 = phi i32 [ %call356, %land.lhs.true392 ], [ %dec, %thats_all_folks.loopexit ]
  %bp.3 = phi i8* [ %incdec.ptr390, %land.lhs.true392 ], [ %incdec.ptr305, %thats_all_folks.loopexit ]
  %ptr.3 = phi i8* [ %call357, %land.lhs.true392 ], [ %incdec.ptr, %thats_all_folks.loopexit ]
  %cmp400 = icmp ugt i64 %79, 1
  br i1 %cmp400, label %land.lhs.true402, label %lor.lhs.false

land.lhs.true402:                                 ; preds = %thats_all_folks
  %80 = load i8** %sv_any231, align 8, !tbaa !0
  %xpv_pv404 = bitcast i8* %80 to i8**
  %81 = load i8** %xpv_pv404, align 8, !tbaa !0
  %sub.ptr.lhs.cast405 = ptrtoint i8* %bp.3 to i64
  %sub.ptr.rhs.cast406 = ptrtoint i8* %81 to i64
  %sub.ptr.sub407 = sub i64 %sub.ptr.lhs.cast405, %sub.ptr.rhs.cast406
  %cmp408 = icmp ult i64 %sub.ptr.sub407, %79
  br i1 %cmp408, label %screamer.outer, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true402, %thats_all_folks
  %idx.neg = sub i64 0, %79
  %add.ptr410 = getelementptr inbounds i8* %bp.3, i64 %idx.neg
  %call411 = call i32 @memcmp(i8* %add.ptr410, i8* %rsptr.0686688, i64 %79) #8
  %tobool412 = icmp eq i32 %call411, 0
  br i1 %tobool412, label %thats_really_all_folks, label %screamer.outer

thats_really_all_folks:                           ; preds = %lor.lhs.false, %if.end354
  %shortbuffered.1716 = phi i32 [ %shortbuffered.1714, %lor.lhs.false ], [ 0, %if.end354 ]
  %i.3 = phi i32 [ %i.2, %lor.lhs.false ], [ -1, %if.end354 ]
  %cnt.5 = phi i32 [ %cnt.4, %lor.lhs.false ], [ %call356, %if.end354 ]
  %bp.4 = phi i8* [ %bp.3, %lor.lhs.false ], [ %bp.2, %if.end354 ]
  %ptr.4 = phi i8* [ %ptr.3, %lor.lhs.false ], [ %call357, %if.end354 ]
  %add417 = add nsw i32 %cnt.5, %shortbuffered.1716
  call void @Perl_PerlIO_set_ptrcnt(%struct._PerlIO** %fp, i8* %ptr.4, i32 %add417) #8
  store i8 0, i8* %bp.4, align 1, !tbaa !1
  %82 = load i8** %sv_any231, align 8, !tbaa !0
  %xpv_pv420 = bitcast i8* %82 to i8**
  %83 = load i8** %xpv_pv420, align 8, !tbaa !0
  %sub.ptr.lhs.cast421 = ptrtoint i8* %bp.4 to i64
  %sub.ptr.rhs.cast422 = ptrtoint i8* %83 to i64
  %sub.ptr.sub423 = sub i64 %sub.ptr.lhs.cast421, %sub.ptr.rhs.cast422
  %xpv_cur425 = getelementptr inbounds i8* %82, i64 8
  %84 = bitcast i8* %xpv_cur425 to i64*
  store i64 %sub.ptr.sub423, i64* %84, align 8, !tbaa !5
  br label %if.end506

if.else426:                                       ; preds = %if.end226
  %85 = getelementptr inbounds [8192 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 8192, i8* %85) #3
  %sv_any482 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %add.ptr429 = getelementptr inbounds [8192 x i8]* %buf, i64 0, i64 8192
  %sub.ptr.rhs.cast448 = ptrtoint [8192 x i8]* %buf to i64
  br label %screamer2

screamer2:                                        ; preds = %land.lhs.true500, %if.then496, %if.else426
  %86 = phi i64 [ %56, %if.else426 ], [ %89, %if.then496 ], [ %89, %land.lhs.true500 ]
  %tobool427 = icmp eq i64 %86, 0
  br i1 %tobool427, label %if.else451, label %while.cond431

while.cond431:                                    ; preds = %screamer2, %land.lhs.true435
  %bp.5 = phi i8* [ %incdec.ptr437, %land.lhs.true435 ], [ %85, %screamer2 ]
  %call432 = call i32 @PerlIO_getc(%struct._PerlIO** %fp) #8
  %cmp433 = icmp eq i32 %call432, -1
  br i1 %cmp433, label %while.end445, label %land.lhs.true435

land.lhs.true435:                                 ; preds = %while.cond431
  %conv436 = trunc i32 %call432 to i8
  %incdec.ptr437 = getelementptr inbounds i8* %bp.5, i64 1
  store i8 %conv436, i8* %bp.5, align 1, !tbaa !1
  %sext675 = shl i32 %call432, 24
  %conv438 = ashr exact i32 %sext675, 24
  %cmp440 = icmp ne i32 %conv438, %cond206689
  %cmp442 = icmp ult i8* %incdec.ptr437, %add.ptr429
  %or.cond680 = and i1 %cmp440, %cmp442
  br i1 %or.cond680, label %while.cond431, label %while.end445

while.end445:                                     ; preds = %land.lhs.true435, %while.cond431
  %call432.lcssa = phi i32 [ %call432, %land.lhs.true435 ], [ -1, %while.cond431 ]
  %bp.6 = phi i8* [ %incdec.ptr437, %land.lhs.true435 ], [ %bp.5, %while.cond431 ]
  %sub.ptr.lhs.cast447 = ptrtoint i8* %bp.6 to i64
  %sub.ptr.sub449 = sub i64 %sub.ptr.lhs.cast447, %sub.ptr.rhs.cast448
  %conv450 = trunc i64 %sub.ptr.sub449 to i32
  br label %if.end464

if.else451:                                       ; preds = %screamer2
  %call453 = call i64 @Perl_PerlIO_read(%struct._PerlIO** %fp, i8* %85, i64 8192) #8
  %conv454 = trunc i64 %call453 to i32
  %cmp455 = icmp sgt i32 %conv454, 0
  br i1 %cmp455, label %if.then457, label %if.end464

if.then457:                                       ; preds = %if.else451
  %sub458 = shl i64 %call453, 32
  %sext = add i64 %sub458, -4294967296
  %idxprom459 = ashr exact i64 %sext, 32
  %arrayidx460 = getelementptr inbounds [8192 x i8]* %buf, i64 0, i64 %idxprom459
  %87 = load i8* %arrayidx460, align 1, !tbaa !1
  %conv461 = zext i8 %87 to i32
  br label %if.end464

if.end464:                                        ; preds = %if.else451, %if.then457, %while.end445
  %i.4 = phi i32 [ %call432.lcssa, %while.end445 ], [ %conv461, %if.then457 ], [ -1, %if.else451 ]
  %cnt.7 = phi i32 [ %conv450, %while.end445 ], [ %conv454, %if.then457 ], [ %conv454, %if.else451 ]
  %cmp465 = icmp slt i32 %cnt.7, 0
  %.cnt.7 = select i1 %cmp465, i32 0, i32 %cnt.7
  %88 = load i32* %append.addr, align 4, !tbaa !3
  %tobool469 = icmp eq i32 %88, 0
  %conv472 = sext i32 %.cnt.7 to i64
  br i1 %tobool469, label %if.else473, label %if.then470

if.then470:                                       ; preds = %if.end464
  call void @Perl_sv_catpvn_flags(%struct.sv* %sv, i8* %85, i64 %conv472, i32 2) #7
  br label %if.end476

if.else473:                                       ; preds = %if.end464
  call void @Perl_sv_setpvn(%struct.sv* %sv, i8* %85, i64 %conv472) #7
  br label %if.end476

if.end476:                                        ; preds = %if.else473, %if.then470
  %cmp477 = icmp eq i32 %i.4, -1
  br i1 %cmp477, label %if.end506, label %land.lhs.true479

land.lhs.true479:                                 ; preds = %if.end476
  %89 = load i64* %rslen, align 8, !tbaa !5
  %tobool480 = icmp eq i64 %89, 0
  br i1 %tobool480, label %if.then496, label %lor.lhs.false481

lor.lhs.false481:                                 ; preds = %land.lhs.true479
  %90 = load i8** %sv_any482, align 8, !tbaa !0
  %xpv_cur483 = getelementptr inbounds i8* %90, i64 8
  %91 = bitcast i8* %xpv_cur483 to i64*
  %92 = load i64* %91, align 8, !tbaa !5
  %cmp484 = icmp ult i64 %92, %89
  br i1 %cmp484, label %if.then496, label %lor.lhs.false486

lor.lhs.false486:                                 ; preds = %lor.lhs.false481
  %xpv_pv488 = bitcast i8* %90 to i8**
  %93 = load i8** %xpv_pv488, align 8, !tbaa !0
  %add.ptr491.sum = sub i64 %92, %89
  %add.ptr493 = getelementptr inbounds i8* %93, i64 %add.ptr491.sum
  %call494 = call i32 @memcmp(i8* %add.ptr493, i8* %rsptr.0686688, i64 %89) #8
  %tobool495 = icmp eq i32 %call494, 0
  br i1 %tobool495, label %if.end506, label %if.then496

if.then496:                                       ; preds = %lor.lhs.false486, %land.lhs.true479, %lor.lhs.false481
  store i32 -1, i32* %append.addr, align 4, !tbaa !3
  %cmp498 = icmp ult i32 %.cnt.7, 8192
  br i1 %cmp498, label %land.lhs.true500, label %screamer2

land.lhs.true500:                                 ; preds = %if.then496
  %call501 = call i32 @Perl_PerlIO_eof(%struct._PerlIO** %fp) #8
  %tobool502 = icmp eq i32 %call501, 0
  br i1 %tobool502, label %screamer2, label %if.end506

if.end506:                                        ; preds = %if.end476, %land.lhs.true500, %lor.lhs.false486, %thats_really_all_folks
  %i.5 = phi i32 [ %i.3, %thats_really_all_folks ], [ -1, %if.end476 ], [ %i.4, %land.lhs.true500 ], [ %i.4, %lor.lhs.false486 ]
  br i1 %tobool208690, label %while.cond509, label %return_string_or_null

while.cond509:                                    ; preds = %if.end506, %while.body512
  %i.6 = phi i32 [ 10, %while.body512 ], [ %i.5, %if.end506 ]
  %cmp510 = icmp eq i32 %i.6, -1
  br i1 %cmp510, label %return_string_or_null, label %while.body512

while.body512:                                    ; preds = %while.cond509
  %call513 = call i32 @PerlIO_getc(%struct._PerlIO** %fp) #8
  %cmp514 = icmp eq i32 %call513, 10
  br i1 %cmp514, label %while.cond509, label %if.then516

if.then516:                                       ; preds = %while.body512
  %call517 = call i32 @PerlIO_ungetc(%struct._PerlIO** %fp, i32 %call513) #8
  br label %return_string_or_null

return_string_or_null:                            ; preds = %while.cond509, %if.end506, %if.then516, %cond.end132, %if.then21
  %sv_any521 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %94 = load i8** %sv_any521, align 8, !tbaa !0
  %xpv_cur522 = getelementptr inbounds i8* %94, i64 8
  %95 = bitcast i8* %xpv_cur522 to i64*
  %96 = load i64* %95, align 8, !tbaa !5
  %97 = load i32* %append.addr, align 4, !tbaa !3
  %conv523 = sext i32 %97 to i64
  %tobool525 = icmp eq i64 %96, %conv523
  br i1 %tobool525, label %return, label %cond.true526

cond.true526:                                     ; preds = %return_string_or_null
  %xpv_pv528 = bitcast i8* %94 to i8**
  %98 = load i8** %xpv_pv528, align 8, !tbaa !0
  br label %return

return:                                           ; preds = %if.end213, %do.body, %cond.true526, %return_string_or_null
  %retval.0 = phi i8* [ %98, %cond.true526 ], [ null, %return_string_or_null ], [ null, %do.body ], [ null, %if.end213 ]
  ret i8* %retval.0
}

; Function Attrs: optsize
declare i32 @PerlIO_isutf8(%struct._PerlIO**) #2

; Function Attrs: nounwind optsize
declare i32 @fstat(i32, %struct.stat* nocapture) #5

; Function Attrs: optsize
declare i32 @Perl_PerlIO_fileno(%struct._PerlIO**) #2

; Function Attrs: optsize
declare i64 @Perl_PerlIO_tell(%struct._PerlIO**) #2

; Function Attrs: optsize
declare i64 @Perl_PerlIO_read(%struct._PerlIO**, i8*, i64) #2

; Function Attrs: optsize
declare i32 @Perl_PerlIO_eof(%struct._PerlIO**) #2

; Function Attrs: optsize
declare i32 @PerlIO_getc(%struct._PerlIO**) #2

; Function Attrs: optsize
declare i32 @PerlIO_ungetc(%struct._PerlIO**, i32) #2

; Function Attrs: optsize
declare i32 @PerlIO_fast_gets(%struct._PerlIO**) #2

; Function Attrs: optsize
declare i32 @Perl_PerlIO_get_cnt(%struct._PerlIO**) #2

; Function Attrs: optsize
declare i8* @Perl_PerlIO_get_ptr(%struct._PerlIO**) #2

; Function Attrs: optsize
declare void @Perl_PerlIO_set_ptrcnt(%struct._PerlIO**, i8*, i32) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_inc(%struct.sv* %sv) #0 {
entry:
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %if.end296, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @Perl_mg_get(%struct.sv* %sv) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then2
  %1 = phi i32 [ %0, %if.end ], [ %.pre, %if.then2 ]
  %and5 = and i32 %1, 9961472
  %tobool6 = icmp eq i32 %and5, 0
  br i1 %tobool6, label %if.end36, label %if.then7

if.then7:                                         ; preds = %if.end3
  %2 = and i32 %1, 9437184
  %3 = icmp eq i32 %2, 9437184
  br i1 %3, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then7
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre432 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end15

if.end15:                                         ; preds = %if.then7, %if.then14
  %4 = phi i32 [ %1, %if.then7 ], [ %.pre432, %if.then14 ]
  %and17 = and i32 %4, 8388608
  %tobool18 = icmp eq i32 %and17, 0
  br i1 %tobool18, label %if.end22, label %if.then19

if.then19:                                        ; preds = %if.end15
  %5 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cmp = icmp eq %struct.cop* %5, @PL_compiling
  br i1 %cmp, label %if.end22, label %if.then20

if.then20:                                        ; preds = %if.then19
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([0 x i8]* @PL_no_modify, i64 0, i64 0)) #8
  br label %if.end22

if.end22:                                         ; preds = %if.then19, %if.end15, %if.then20
  %6 = load i32* %sv_flags, align 4, !tbaa !3
  %and24 = and i32 %6, 524288
  %tobool25 = icmp eq i32 %and24, 0
  br i1 %tobool25, label %if.end36, label %if.then26

if.then26:                                        ; preds = %if.end22
  %and28 = and i32 %6, 268435456
  %tobool29 = icmp eq i32 %and28, 0
  br i1 %tobool29, label %if.end34, label %land.lhs.true30

land.lhs.true30:                                  ; preds = %if.then26
  %call31 = tail call %struct.sv* @Perl_amagic_call(%struct.sv* %sv, %struct.sv* @PL_sv_undef, i32 44, i32 9) #8
  %tobool32 = icmp eq %struct.sv* %call31, null
  br i1 %tobool32, label %if.end34, label %if.end296

if.end34:                                         ; preds = %land.lhs.true30, %if.then26
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %7 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %7 to %struct.sv**
  %8 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %9 = ptrtoint %struct.sv* %8 to i64
  tail call void @Perl_sv_unref_flags(%struct.sv* %sv, i32 0) #8
  tail call void @Perl_sv_setiv(%struct.sv* %sv, i64 %9) #7
  %.pre421 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end36

if.end36:                                         ; preds = %if.end22, %if.end3, %if.end34
  %10 = phi i32 [ %6, %if.end22 ], [ %1, %if.end3 ], [ %.pre421, %if.end34 ]
  %11 = and i32 %10, 50397184
  %12 = icmp eq i32 %11, 33554432
  br i1 %12, label %cond.false, label %if.end47

cond.false:                                       ; preds = %if.end36
  %call45 = tail call i64 @Perl_sv_2iv(%struct.sv* %sv) #7
  %.pre422 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end47

if.end47:                                         ; preds = %cond.false, %if.end36
  %13 = phi i32 [ %10, %if.end36 ], [ %.pre422, %cond.false ]
  %and48 = and i32 %13, 65536
  %tobool49 = icmp ne i32 %and48, 0
  %and50 = and i32 %13, 50331648
  %cmp51 = icmp eq i32 %and50, 16777216
  %or.cond394 = or i1 %tobool49, %cmp51
  br i1 %or.cond394, label %oops_its_intthread-pre-split, label %if.end94

oops_its_intthread-pre-split:                     ; preds = %if.end47
  %sv_any57.pre = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  br label %oops_its_int

oops_its_int:                                     ; preds = %oops_its_intthread-pre-split, %if.then178
  %sv_any57.pre-phi = phi i8** [ %sv_any57.pre, %oops_its_intthread-pre-split ], [ %sv_any115, %if.then178 ]
  %14 = phi i32 [ %13, %oops_its_intthread-pre-split ], [ %47, %if.then178 ]
  %tobool55 = icmp slt i32 %14, 0
  %15 = load i8** %sv_any57.pre-phi, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %15, i64 24
  %16 = bitcast i8* %xuv_uv to i64*
  %17 = load i64* %16, align 8, !tbaa !5
  br i1 %tobool55, label %if.then56, label %if.else71

if.then56:                                        ; preds = %oops_its_int
  %cmp58 = icmp eq i64 %17, -1
  br i1 %cmp58, label %if.then59, label %if.else

if.then59:                                        ; preds = %if.then56
  tail call void @Perl_sv_setnv(%struct.sv* %sv, double 0x43F0000000000000) #7
  br label %if.end68

if.else:                                          ; preds = %if.then56
  %and61 = and i32 %14, -923729921
  store i32 %and61, i32* %sv_flags, align 4, !tbaa !3
  %and63 = and i32 %14, 2097152
  %tobool64 = icmp eq i32 %and63, 0
  br i1 %tobool64, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.else
  %call65 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre423 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %if.else, %land.rhs
  %18 = phi i32 [ %and61, %if.else ], [ %.pre423, %land.rhs ]
  %or = or i32 %18, 16842752
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end68

if.end68:                                         ; preds = %land.end, %if.then59
  %19 = load i8** %sv_any57.pre-phi, align 8, !tbaa !0
  %xuv_uv70 = getelementptr inbounds i8* %19, i64 24
  %20 = bitcast i8* %xuv_uv70 to i64*
  %21 = load i64* %20, align 8, !tbaa !5
  %inc = add i64 %21, 1
  store i64 %inc, i64* %20, align 8, !tbaa !5
  br label %if.end296

if.else71:                                        ; preds = %oops_its_int
  %cmp74 = icmp eq i64 %17, 9223372036854775807
  br i1 %cmp74, label %if.then75, label %if.else76

if.then75:                                        ; preds = %if.else71
  tail call void @Perl_sv_setiv(%struct.sv* %sv, i64 0) #8
  %22 = load i32* %sv_flags, align 4, !tbaa !3
  %or.i = or i32 %22, -2147483648
  store i32 %or.i, i32* %sv_flags, align 4, !tbaa !3
  %23 = load i8** %sv_any57.pre-phi, align 8, !tbaa !0
  %xuv_uv.i = getelementptr inbounds i8* %23, i64 24
  %24 = bitcast i8* %xuv_uv.i to i64*
  store i64 -9223372036854775808, i64* %24, align 8, !tbaa !5
  br label %if.end296

if.else76:                                        ; preds = %if.else71
  %and78 = and i32 %14, 1223753727
  store i32 %and78, i32* %sv_flags, align 4, !tbaa !3
  %and80 = and i32 %14, 2097152
  %tobool81 = icmp eq i32 %and80, 0
  br i1 %tobool81, label %land.end85, label %land.rhs82

land.rhs82:                                       ; preds = %if.else76
  %call83 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre424 = load i32* %sv_flags, align 4, !tbaa !3
  %.pre425 = load i8** %sv_any57.pre-phi, align 8, !tbaa !0
  %xiv_iv90.phi.trans.insert = getelementptr inbounds i8* %.pre425, i64 24
  %.phi.trans.insert = bitcast i8* %xiv_iv90.phi.trans.insert to i64*
  %.pre426 = load i64* %.phi.trans.insert, align 8, !tbaa !5
  br label %land.end85

land.end85:                                       ; preds = %if.else76, %land.rhs82
  %25 = phi i64 [ %17, %if.else76 ], [ %.pre426, %land.rhs82 ]
  %26 = phi i8* [ %15, %if.else76 ], [ %.pre425, %land.rhs82 ]
  %27 = phi i32 [ %and78, %if.else76 ], [ %.pre424, %land.rhs82 ]
  %or88 = or i32 %27, 16842752
  store i32 %or88, i32* %sv_flags, align 4, !tbaa !3
  %xiv_iv90 = getelementptr inbounds i8* %26, i64 24
  %28 = bitcast i8* %xiv_iv90 to i64*
  %inc91 = add nsw i64 %25, 1
  store i64 %inc91, i64* %28, align 8, !tbaa !5
  br label %if.end296

if.end94:                                         ; preds = %if.end47
  %and95 = and i32 %13, 33554432
  %tobool96 = icmp eq i32 %and95, 0
  br i1 %tobool96, label %if.end111, label %if.then97

if.then97:                                        ; preds = %if.end94
  %and99 = and i32 %13, 1223753727
  store i32 %and99, i32* %sv_flags, align 4, !tbaa !3
  %and101 = and i32 %13, 2097152
  %tobool102 = icmp eq i32 %and101, 0
  br i1 %tobool102, label %land.end106, label %land.rhs103

land.rhs103:                                      ; preds = %if.then97
  %call104 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre427 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end106

land.end106:                                      ; preds = %if.then97, %land.rhs103
  %29 = phi i32 [ %and99, %if.then97 ], [ %.pre427, %land.rhs103 ]
  %or109 = or i32 %29, 33685504
  store i32 %or109, i32* %sv_flags, align 4, !tbaa !3
  %sv_any110 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %30 = load i8** %sv_any110, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %30, i64 32
  %31 = bitcast i8* %xnv_nv to double*
  %32 = load double* %31, align 8, !tbaa !6
  %add = fadd double %32, 1.000000e+00
  store double %add, double* %31, align 8, !tbaa !6
  br label %if.end296

if.end111:                                        ; preds = %if.end94
  %and112 = and i32 %13, 67108864
  %tobool113 = icmp eq i32 %and112, 0
  br i1 %tobool113, label %if.then117, label %lor.lhs.false114

lor.lhs.false114:                                 ; preds = %if.end111
  %sv_any115 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %33 = load i8** %sv_any115, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %33 to i8**
  %34 = load i8** %xpv_pv, align 8, !tbaa !0
  %35 = load i8* %34, align 1, !tbaa !1
  %tobool116 = icmp eq i8 %35, 0
  br i1 %tobool116, label %if.then117, label %while.cond

if.then117:                                       ; preds = %lor.lhs.false114, %if.end111
  %and118 = and i32 %13, 255
  %cmp119 = icmp ult i32 %and118, 5
  br i1 %cmp119, label %if.then120, label %if.end122

if.then120:                                       ; preds = %if.then117
  %call121 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 1) #7
  %.pre428 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end122

if.end122:                                        ; preds = %if.then120, %if.then117
  %36 = phi i32 [ %.pre428, %if.then120 ], [ %13, %if.then117 ]
  %and124 = and i32 %36, 1223753727
  store i32 %and124, i32* %sv_flags, align 4, !tbaa !3
  %and126 = and i32 %36, 2097152
  %tobool127 = icmp eq i32 %and126, 0
  br i1 %tobool127, label %land.end131, label %land.rhs128

land.rhs128:                                      ; preds = %if.end122
  %call129 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre429 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end131

land.end131:                                      ; preds = %if.end122, %land.rhs128
  %37 = phi i32 [ %.pre429, %land.rhs128 ], [ %and124, %if.end122 ]
  %or134 = or i32 %37, 16842752
  store i32 %or134, i32* %sv_flags, align 4, !tbaa !3
  %sv_any135 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %38 = load i8** %sv_any135, align 8, !tbaa !0
  %xiv_iv136 = getelementptr inbounds i8* %38, i64 24
  %39 = bitcast i8* %xiv_iv136 to i64*
  store i64 1, i64* %39, align 8, !tbaa !5
  br label %if.end296

while.cond:                                       ; preds = %lor.lhs.false114, %while.cond.while.cond_crit_edge
  %40 = phi i8 [ %.pre433, %while.cond.while.cond_crit_edge ], [ %35, %lor.lhs.false114 ]
  %d.0 = phi i8* [ %incdec.ptr, %while.cond.while.cond_crit_edge ], [ %34, %lor.lhs.false114 ]
  %.off = add i8 %40, -65
  %41 = icmp ult i8 %.off, 26
  %.off402 = add i8 %40, -97
  %42 = icmp ult i8 %.off402, 26
  %or.cond = or i1 %41, %42
  %incdec.ptr = getelementptr inbounds i8* %d.0, i64 1
  br i1 %or.cond, label %while.cond.while.cond_crit_edge, label %while.cond155

while.cond.while.cond_crit_edge:                  ; preds = %while.cond
  %.pre433 = load i8* %incdec.ptr, align 1, !tbaa !1
  br label %while.cond

while.cond155:                                    ; preds = %while.cond, %while.cond155.while.cond155_crit_edge
  %43 = phi i8 [ %.pre434, %while.cond155.while.cond155_crit_edge ], [ %40, %while.cond ]
  %d.1 = phi i8* [ %incdec.ptr166, %while.cond155.while.cond155_crit_edge ], [ %d.0, %while.cond ]
  %.off403 = add i8 %43, -48
  %44 = icmp ult i8 %.off403, 10
  %incdec.ptr166 = getelementptr inbounds i8* %d.1, i64 1
  br i1 %44, label %while.cond155.while.cond155_crit_edge, label %while.end167

while.cond155.while.cond155_crit_edge:            ; preds = %while.cond155
  %.pre434 = load i8* %incdec.ptr166, align 1, !tbaa !1
  br label %while.cond155

while.end167:                                     ; preds = %while.cond155
  %tobool168 = icmp eq i8 %43, 0
  br i1 %tobool168, label %if.end209, label %if.then169

if.then169:                                       ; preds = %while.end167
  %xpv_cur = getelementptr inbounds i8* %33, i64 8
  %45 = bitcast i8* %xpv_cur to i64*
  %46 = load i64* %45, align 8, !tbaa !5
  %call173 = tail call i32 @Perl_grok_number(i8* %34, i64 %46, i64* null) #8
  %tobool174 = icmp ne i32 %call173, 0
  %and176 = and i32 %call173, 16
  %tobool177 = icmp eq i32 %and176, 0
  %or.cond397 = and i1 %tobool174, %tobool177
  br i1 %or.cond397, label %if.then178, label %if.end204

if.then178:                                       ; preds = %if.then169
  %call179 = tail call i64 @Perl_sv_2iv(%struct.sv* %sv) #7
  %47 = load i32* %sv_flags, align 4, !tbaa !3
  %and181 = and i32 %47, 65536
  %tobool182 = icmp eq i32 %and181, 0
  br i1 %tobool182, label %if.end204, label %oops_its_int

if.end204:                                        ; preds = %if.then178, %if.then169
  %48 = load i8** %sv_any115, align 8, !tbaa !0
  %xpv_pv206 = bitcast i8* %48 to i8**
  %49 = load i8** %xpv_pv206, align 8, !tbaa !0
  %call207 = tail call double @Perl_my_atof(i8* %49) #8
  %add208 = fadd double %call207, 1.000000e+00
  tail call void @Perl_sv_setnv(%struct.sv* %sv, double %add208) #7
  br label %if.end296

if.end209:                                        ; preds = %while.end167
  %incdec.ptr210 = getelementptr inbounds i8* %d.1, i64 -1
  %cmp214415 = icmp ult i8* %incdec.ptr210, %34
  br i1 %cmp214415, label %while.end255, label %while.body216

while.body216:                                    ; preds = %if.end209, %while.cond211.backedge
  %d.2416 = phi i8* [ %d.2.be, %while.cond211.backedge ], [ %incdec.ptr210, %if.end209 ]
  %50 = load i8* %d.2416, align 1, !tbaa !1
  %.off404 = add i8 %50, -48
  %51 = icmp ult i8 %.off404, 10
  %inc225 = add i8 %50, 1
  store i8 %inc225, i8* %d.2416, align 1, !tbaa !1
  br i1 %51, label %if.then224, label %if.else232

if.then224:                                       ; preds = %while.body216
  %cmp227 = icmp slt i8 %inc225, 58
  br i1 %cmp227, label %if.end296, label %while.cond211.backedge

if.else232:                                       ; preds = %while.body216
  %inc225.off = add i8 %50, -64
  %52 = icmp ult i8 %inc225.off, 26
  %inc225.off405 = add i8 %50, -96
  %53 = icmp ult i8 %inc225.off405, 26
  %or.cond409 = or i1 %52, %53
  br i1 %or.cond409, label %if.end296, label %if.end250

if.end250:                                        ; preds = %if.else232
  %sub = add i8 %50, -25
  br label %while.cond211.backedge

while.cond211.backedge:                           ; preds = %if.then224, %if.end250
  %storemerge = phi i8 [ %sub, %if.end250 ], [ 48, %if.then224 ]
  %d.2.be = getelementptr inbounds i8* %d.2416, i64 -1
  store i8 %storemerge, i8* %d.2416, align 1, !tbaa !1
  %54 = load i8** %sv_any115, align 8, !tbaa !0
  %xpv_pv213 = bitcast i8* %54 to i8**
  %55 = load i8** %xpv_pv213, align 8, !tbaa !0
  %cmp214 = icmp ult i8* %d.2.be, %55
  br i1 %cmp214, label %while.end255, label %while.body216

while.end255:                                     ; preds = %while.cond211.backedge, %if.end209
  %56 = phi i8* [ %33, %if.end209 ], [ %54, %while.cond211.backedge ]
  %xpv_len = getelementptr inbounds i8* %56, i64 16
  %57 = bitcast i8* %xpv_len to i64*
  %58 = load i64* %57, align 8, !tbaa !5
  %xpv_cur258 = getelementptr inbounds i8* %56, i64 8
  %59 = bitcast i8* %xpv_cur258 to i64*
  %60 = load i64* %59, align 8, !tbaa !5
  %add259 = add i64 %60, 2
  %cmp260 = icmp ult i64 %58, %add259
  br i1 %cmp260, label %cond.true262, label %cond.end270

cond.true262:                                     ; preds = %while.end255
  %call266 = tail call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add259) #7
  %.pre430 = load i8** %sv_any115, align 8, !tbaa !0
  br label %cond.end270

cond.end270:                                      ; preds = %while.end255, %cond.true262
  %61 = phi i8* [ %56, %while.end255 ], [ %.pre430, %cond.true262 ]
  %xpv_cur273 = getelementptr inbounds i8* %61, i64 8
  %62 = bitcast i8* %xpv_cur273 to i64*
  %63 = load i64* %62, align 8, !tbaa !5
  %inc274 = add i64 %63, 1
  store i64 %inc274, i64* %62, align 8, !tbaa !5
  %xpv_pv276 = bitcast i8* %61 to i8**
  %64 = load i8** %xpv_pv276, align 8, !tbaa !0
  %add.ptr = getelementptr inbounds i8* %64, i64 %inc274
  %cmp281411 = icmp sgt i64 %inc274, 0
  br i1 %cmp281411, label %for.body, label %for.end

for.body:                                         ; preds = %cond.end270, %for.body
  %d.3412 = phi i8* [ %arrayidx, %for.body ], [ %add.ptr, %cond.end270 ]
  %arrayidx = getelementptr inbounds i8* %d.3412, i64 -1
  %65 = load i8* %arrayidx, align 1, !tbaa !1
  store i8 %65, i8* %d.3412, align 1, !tbaa !1
  %66 = load i8** %sv_any115, align 8, !tbaa !0
  %xpv_pv280 = bitcast i8* %66 to i8**
  %67 = load i8** %xpv_pv280, align 8, !tbaa !0
  %cmp281 = icmp ugt i8* %arrayidx, %67
  br i1 %cmp281, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %cond.end270
  %d.3.lcssa = phi i8* [ %add.ptr, %cond.end270 ], [ %arrayidx, %for.body ]
  %arrayidx284 = getelementptr inbounds i8* %d.3.lcssa, i64 1
  %68 = load i8* %arrayidx284, align 1, !tbaa !1
  %.off406 = add i8 %68, -48
  %69 = icmp ult i8 %.off406, 10
  br i1 %69, label %if.then293, label %if.else294

if.then293:                                       ; preds = %for.end
  store i8 49, i8* %d.3.lcssa, align 1, !tbaa !1
  br label %if.end296

if.else294:                                       ; preds = %for.end
  store i8 %68, i8* %d.3.lcssa, align 1, !tbaa !1
  br label %if.end296

if.end296:                                        ; preds = %if.else232, %if.then224, %land.lhs.true30, %entry, %if.end68, %land.end85, %if.then75, %land.end106, %land.end131, %if.end204, %if.else294, %if.then293
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_dec(%struct.sv* %sv) #0 {
entry:
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @Perl_mg_get(%struct.sv* %sv) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then2
  %1 = phi i32 [ %0, %if.end ], [ %.pre, %if.then2 ]
  %and5 = and i32 %1, 9961472
  %tobool6 = icmp eq i32 %and5, 0
  br i1 %tobool6, label %if.end36, label %if.then7

if.then7:                                         ; preds = %if.end3
  %2 = and i32 %1, 9437184
  %3 = icmp eq i32 %2, 9437184
  br i1 %3, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then7
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre250 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end15

if.end15:                                         ; preds = %if.then7, %if.then14
  %4 = phi i32 [ %1, %if.then7 ], [ %.pre250, %if.then14 ]
  %and17 = and i32 %4, 8388608
  %tobool18 = icmp eq i32 %and17, 0
  br i1 %tobool18, label %if.end22, label %if.then19

if.then19:                                        ; preds = %if.end15
  %5 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cmp = icmp eq %struct.cop* %5, @PL_compiling
  br i1 %cmp, label %if.end22, label %if.then20

if.then20:                                        ; preds = %if.then19
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([0 x i8]* @PL_no_modify, i64 0, i64 0)) #8
  br label %if.end22

if.end22:                                         ; preds = %if.then19, %if.end15, %if.then20
  %6 = load i32* %sv_flags, align 4, !tbaa !3
  %and24 = and i32 %6, 524288
  %tobool25 = icmp eq i32 %and24, 0
  br i1 %tobool25, label %if.end36, label %if.then26

if.then26:                                        ; preds = %if.end22
  %and28 = and i32 %6, 268435456
  %tobool29 = icmp eq i32 %and28, 0
  br i1 %tobool29, label %if.end34, label %land.lhs.true30

land.lhs.true30:                                  ; preds = %if.then26
  %call31 = tail call %struct.sv* @Perl_amagic_call(%struct.sv* %sv, %struct.sv* @PL_sv_undef, i32 45, i32 9) #8
  %tobool32 = icmp eq %struct.sv* %call31, null
  br i1 %tobool32, label %if.end34, label %return

if.end34:                                         ; preds = %land.lhs.true30, %if.then26
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %7 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %7 to %struct.sv**
  %8 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %9 = ptrtoint %struct.sv* %8 to i64
  tail call void @Perl_sv_unref_flags(%struct.sv* %sv, i32 0) #8
  tail call void @Perl_sv_setiv(%struct.sv* %sv, i64 %9) #7
  %.pre236 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end36

if.end36:                                         ; preds = %if.end22, %if.end3, %if.end34
  %10 = phi i32 [ %6, %if.end22 ], [ %1, %if.end3 ], [ %.pre236, %if.end34 ]
  %and38 = and i32 %10, 65536
  %tobool39 = icmp ne i32 %and38, 0
  %and40 = and i32 %10, 50331648
  %cmp41 = icmp eq i32 %and40, 16777216
  %or.cond234 = or i1 %tobool39, %cmp41
  br i1 %or.cond234, label %oops_its_intthread-pre-split, label %if.end97

oops_its_intthread-pre-split:                     ; preds = %if.end36
  %sv_any47.pre = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  br label %oops_its_int

oops_its_int:                                     ; preds = %oops_its_intthread-pre-split, %if.then145
  %sv_any47.pre-phi = phi i8** [ %sv_any47.pre, %oops_its_intthread-pre-split ], [ %sv_any138, %if.then145 ]
  %11 = phi i32 [ %10, %oops_its_intthread-pre-split ], [ %38, %if.then145 ]
  %tobool45 = icmp slt i32 %11, 0
  %12 = load i8** %sv_any47.pre-phi, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %12, i64 24
  %13 = bitcast i8* %xuv_uv to i64*
  %14 = load i64* %13, align 8, !tbaa !5
  br i1 %tobool45, label %if.then46, label %if.else74

if.then46:                                        ; preds = %oops_its_int
  %cmp48 = icmp eq i64 %14, 0
  br i1 %cmp48, label %if.then49, label %if.else

if.then49:                                        ; preds = %if.then46
  %and51 = and i32 %11, 1223753727
  store i32 %and51, i32* %sv_flags, align 4, !tbaa !3
  %and53 = and i32 %11, 2097152
  %tobool54 = icmp eq i32 %and53, 0
  br i1 %tobool54, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then49
  %call55 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre237 = load i32* %sv_flags, align 4, !tbaa !3
  %.pre238 = load i8** %sv_any47.pre-phi, align 8, !tbaa !0
  br label %land.end

land.end:                                         ; preds = %if.then49, %land.rhs
  %15 = phi i8* [ %12, %if.then49 ], [ %.pre238, %land.rhs ]
  %16 = phi i32 [ %and51, %if.then49 ], [ %.pre237, %land.rhs ]
  %or = or i32 %16, 16842752
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %xiv_iv = getelementptr inbounds i8* %15, i64 24
  %17 = bitcast i8* %xiv_iv to i64*
  store i64 -1, i64* %17, align 8, !tbaa !5
  br label %return

if.else:                                          ; preds = %if.then46
  %and60 = and i32 %11, -923729921
  store i32 %and60, i32* %sv_flags, align 4, !tbaa !3
  %and62 = and i32 %11, 2097152
  %tobool63 = icmp eq i32 %and62, 0
  br i1 %tobool63, label %land.end67, label %land.rhs64

land.rhs64:                                       ; preds = %if.else
  %call65 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre239 = load i32* %sv_flags, align 4, !tbaa !3
  %.pre240 = load i8** %sv_any47.pre-phi, align 8, !tbaa !0
  %xuv_uv72.phi.trans.insert = getelementptr inbounds i8* %.pre240, i64 24
  %.phi.trans.insert = bitcast i8* %xuv_uv72.phi.trans.insert to i64*
  %.pre241 = load i64* %.phi.trans.insert, align 8, !tbaa !5
  br label %land.end67

land.end67:                                       ; preds = %if.else, %land.rhs64
  %18 = phi i64 [ %14, %if.else ], [ %.pre241, %land.rhs64 ]
  %19 = phi i8* [ %12, %if.else ], [ %.pre240, %land.rhs64 ]
  %20 = phi i32 [ %and60, %if.else ], [ %.pre239, %land.rhs64 ]
  %or70 = or i32 %20, 16842752
  store i32 %or70, i32* %sv_flags, align 4, !tbaa !3
  %xuv_uv72 = getelementptr inbounds i8* %19, i64 24
  %21 = bitcast i8* %xuv_uv72 to i64*
  %dec = add i64 %18, -1
  store i64 %dec, i64* %21, align 8, !tbaa !5
  br label %return

if.else74:                                        ; preds = %oops_its_int
  %cmp77 = icmp eq i64 %14, -9223372036854775808
  br i1 %cmp77, label %if.then78, label %if.else79

if.then78:                                        ; preds = %if.else74
  tail call void @Perl_sv_setnv(%struct.sv* %sv, double 0xC3E0000000000000) #7
  br label %return

if.else79:                                        ; preds = %if.else74
  %and81 = and i32 %11, 1223753727
  store i32 %and81, i32* %sv_flags, align 4, !tbaa !3
  %and83 = and i32 %11, 2097152
  %tobool84 = icmp eq i32 %and83, 0
  br i1 %tobool84, label %land.end88, label %land.rhs85

land.rhs85:                                       ; preds = %if.else79
  %call86 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre242 = load i32* %sv_flags, align 4, !tbaa !3
  %.pre243 = load i8** %sv_any47.pre-phi, align 8, !tbaa !0
  %xiv_iv93.phi.trans.insert = getelementptr inbounds i8* %.pre243, i64 24
  %.phi.trans.insert244 = bitcast i8* %xiv_iv93.phi.trans.insert to i64*
  %.pre245 = load i64* %.phi.trans.insert244, align 8, !tbaa !5
  br label %land.end88

land.end88:                                       ; preds = %if.else79, %land.rhs85
  %22 = phi i64 [ %14, %if.else79 ], [ %.pre245, %land.rhs85 ]
  %23 = phi i8* [ %12, %if.else79 ], [ %.pre243, %land.rhs85 ]
  %24 = phi i32 [ %and81, %if.else79 ], [ %.pre242, %land.rhs85 ]
  %or91 = or i32 %24, 16842752
  store i32 %or91, i32* %sv_flags, align 4, !tbaa !3
  %xiv_iv93 = getelementptr inbounds i8* %23, i64 24
  %25 = bitcast i8* %xiv_iv93 to i64*
  %dec94 = add nsw i64 %22, -1
  store i64 %dec94, i64* %25, align 8, !tbaa !5
  br label %return

if.end97:                                         ; preds = %if.end36
  %and98 = and i32 %10, 33554432
  %tobool99 = icmp eq i32 %and98, 0
  br i1 %tobool99, label %if.end114, label %if.then100

if.then100:                                       ; preds = %if.end97
  %sv_any101 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %26 = load i8** %sv_any101, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %26, i64 32
  %27 = bitcast i8* %xnv_nv to double*
  %28 = load double* %27, align 8, !tbaa !6
  %sub = fadd double %28, -1.000000e+00
  store double %sub, double* %27, align 8, !tbaa !6
  %and103 = and i32 %10, 1223753727
  store i32 %and103, i32* %sv_flags, align 4, !tbaa !3
  %and105 = and i32 %10, 2097152
  %tobool106 = icmp eq i32 %and105, 0
  br i1 %tobool106, label %land.end110, label %land.rhs107

land.rhs107:                                      ; preds = %if.then100
  %call108 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre246 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end110

land.end110:                                      ; preds = %if.then100, %land.rhs107
  %29 = phi i32 [ %and103, %if.then100 ], [ %.pre246, %land.rhs107 ]
  %or113 = or i32 %29, 33685504
  store i32 %or113, i32* %sv_flags, align 4, !tbaa !3
  br label %return

if.end114:                                        ; preds = %if.end97
  %and115 = and i32 %10, 67108864
  %tobool116 = icmp eq i32 %and115, 0
  br i1 %tobool116, label %if.then117, label %if.end137

if.then117:                                       ; preds = %if.end114
  %and118 = and i32 %10, 254
  %cmp119 = icmp ult i32 %and118, 6
  br i1 %cmp119, label %if.then120, label %if.end122

if.then120:                                       ; preds = %if.then117
  %call121 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 2) #7
  %.pre247 = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end122

if.end122:                                        ; preds = %if.then120, %if.then117
  %30 = phi i32 [ %.pre247, %if.then120 ], [ %10, %if.then117 ]
  %sv_any123 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %31 = load i8** %sv_any123, align 8, !tbaa !0
  %xnv_nv124 = getelementptr inbounds i8* %31, i64 32
  %32 = bitcast i8* %xnv_nv124 to double*
  store double -1.000000e+00, double* %32, align 8, !tbaa !6
  %and126 = and i32 %30, 1223753727
  store i32 %and126, i32* %sv_flags, align 4, !tbaa !3
  %and128 = and i32 %30, 2097152
  %tobool129 = icmp eq i32 %and128, 0
  br i1 %tobool129, label %land.end133, label %land.rhs130

land.rhs130:                                      ; preds = %if.end122
  %call131 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre248 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end133

land.end133:                                      ; preds = %if.end122, %land.rhs130
  %33 = phi i32 [ %and126, %if.end122 ], [ %.pre248, %land.rhs130 ]
  %or136 = or i32 %33, 33685504
  store i32 %or136, i32* %sv_flags, align 4, !tbaa !3
  br label %return

if.end137:                                        ; preds = %if.end114
  %sv_any138 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %34 = load i8** %sv_any138, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %34 to i8**
  %35 = load i8** %xpv_pv, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %34, i64 8
  %36 = bitcast i8* %xpv_cur to i64*
  %37 = load i64* %36, align 8, !tbaa !5
  %call140 = tail call i32 @Perl_grok_number(i8* %35, i64 %37, i64* null) #8
  %tobool141 = icmp ne i32 %call140, 0
  %and143 = and i32 %call140, 16
  %tobool144 = icmp eq i32 %and143, 0
  %or.cond235 = and i1 %tobool141, %tobool144
  br i1 %or.cond235, label %if.then145, label %if.end171

if.then145:                                       ; preds = %if.end137
  %call146 = tail call i64 @Perl_sv_2iv(%struct.sv* %sv) #7
  %38 = load i32* %sv_flags, align 4, !tbaa !3
  %and148 = and i32 %38, 65536
  %tobool149 = icmp eq i32 %and148, 0
  br i1 %tobool149, label %if.end171, label %oops_its_int

if.end171:                                        ; preds = %if.then145, %if.end137
  %39 = load i8** %sv_any138, align 8, !tbaa !0
  %xpv_pv173 = bitcast i8* %39 to i8**
  %40 = load i8** %xpv_pv173, align 8, !tbaa !0
  %call174 = tail call double @Perl_my_atof(i8* %40) #8
  %sub175 = fadd double %call174, -1.000000e+00
  tail call void @Perl_sv_setnv(%struct.sv* %sv, double %sub175) #7
  br label %return

return:                                           ; preds = %land.lhs.true30, %entry, %land.end67, %land.end, %land.end88, %if.then78, %if.end171, %land.end133, %land.end110
  ret void
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %oldstr) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  tail call void @Perl_sv_setsv_flags(%struct.sv* %sv.0, %struct.sv* %oldstr, i32 2) #7
  %4 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  %add = add nsw i32 %4, 1
  %5 = load i32* @PL_tmps_max, align 4, !tbaa !3
  %cmp = icmp slt i32 %add, %5
  br i1 %cmp, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @Perl_tmps_grow(i32 1) #8
  %.pre = load i32* @PL_tmps_ix, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then2
  %6 = phi i32 [ %4, %if.end ], [ %.pre, %if.then2 ]
  %inc4 = add nsw i32 %6, 1
  store i32 %inc4, i32* @PL_tmps_ix, align 4, !tbaa !3
  %idxprom = sext i32 %inc4 to i64
  %7 = load %struct.sv*** @PL_tmps_stack, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %7, i64 %idxprom
  store %struct.sv* %sv.0, %struct.sv** %arrayidx, align 8, !tbaa !0
  %8 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %8, 2048
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  ret %struct.sv* %sv.0
}

; Function Attrs: optsize
declare void @Perl_tmps_grow(i32) #2

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_newmortal() #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 2048, i32* %sv_flags, align 4, !tbaa !3
  %4 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  %add = add nsw i32 %4, 1
  %5 = load i32* @PL_tmps_max, align 4, !tbaa !3
  %cmp = icmp slt i32 %add, %5
  br i1 %cmp, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @Perl_tmps_grow(i32 1) #8
  %.pre = load i32* @PL_tmps_ix, align 4, !tbaa !3
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then3
  %6 = phi i32 [ %4, %if.end ], [ %.pre, %if.then3 ]
  %inc5 = add nsw i32 %6, 1
  store i32 %inc5, i32* @PL_tmps_ix, align 4, !tbaa !3
  %idxprom = sext i32 %inc5 to i64
  %7 = load %struct.sv*** @PL_tmps_stack, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %7, i64 %idxprom
  store %struct.sv* %sv.0, %struct.sv** %arrayidx, align 8, !tbaa !0
  ret %struct.sv* %sv.0
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSVpvn_share(i8* %src, i32 %len, i32 %hash) #0 {
entry:
  %is_utf8 = alloca i8, align 1
  %tmplen = alloca i64, align 8
  store i8 0, i8* %is_utf8, align 1, !tbaa !1
  %cmp = icmp slt i32 %len, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub = sub nsw i32 0, %len
  %conv = sext i32 %sub to i64
  store i64 %conv, i64* %tmplen, align 8, !tbaa !5
  store i8 1, i8* %is_utf8, align 1, !tbaa !1
  %call = call i8* @Perl_bytes_from_utf8(i8* %src, i64* %tmplen, i8* %is_utf8) #8
  %0 = load i64* %tmplen, align 8, !tbaa !5
  %conv1 = trunc i64 %0 to i32
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %len.addr.0 = phi i32 [ %conv1, %if.then ], [ %len, %entry ]
  %src.addr.0 = phi i8* [ %call, %if.then ], [ %src, %entry ]
  %tobool = icmp eq i32 %hash, 0
  br i1 %tobool, label %while.cond.preheader, label %if.end12

while.cond.preheader:                             ; preds = %if.end
  %tobool370 = icmp eq i32 %len.addr.0, 0
  br i1 %tobool370, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %hash_PeRlHaSh.073 = phi i32 [ %xor, %while.body ], [ 0, %while.cond.preheader ]
  %i_PeRlHaSh.072 = phi i32 [ %dec, %while.body ], [ %len.addr.0, %while.cond.preheader ]
  %s_PeRlHaSh.071 = phi i8* [ %incdec.ptr, %while.body ], [ %src.addr.0, %while.cond.preheader ]
  %dec = add nsw i32 %i_PeRlHaSh.072, -1
  %incdec.ptr = getelementptr inbounds i8* %s_PeRlHaSh.071, i64 1
  %1 = load i8* %s_PeRlHaSh.071, align 1, !tbaa !1
  %conv4 = zext i8 %1 to i32
  %add = add i32 %conv4, %hash_PeRlHaSh.073
  %add5 = mul i32 %add, 1025
  %shr = lshr i32 %add5, 6
  %xor = xor i32 %shr, %add5
  %tobool3 = icmp eq i32 %dec, 0
  br i1 %tobool3, label %while.cond.while.end_crit_edge, label %while.body

while.cond.while.end_crit_edge:                   ; preds = %while.body
  %phitmp = mul i32 %xor, 9
  br label %while.end

while.end:                                        ; preds = %while.cond.while.end_crit_edge, %while.cond.preheader
  %hash_PeRlHaSh.0.lcssa = phi i32 [ %phitmp, %while.cond.while.end_crit_edge ], [ 0, %while.cond.preheader ]
  %shr8 = lshr i32 %hash_PeRlHaSh.0.lcssa, 11
  %xor9 = xor i32 %shr8, %hash_PeRlHaSh.0.lcssa
  %add11 = mul i32 %xor9, 32769
  br label %if.end12

if.end12:                                         ; preds = %if.end, %while.end
  %hash.addr.0 = phi i32 [ %hash, %if.end ], [ %add11, %while.end ]
  %2 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool13 = icmp eq %struct.sv* %2, null
  br i1 %tobool13, label %if.else, label %if.then14

if.then14:                                        ; preds = %if.end12
  %sv_any = getelementptr inbounds %struct.sv* %2, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !0
  %4 = bitcast i8* %3 to %struct.sv*
  store %struct.sv* %4, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %5 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end16

if.else:                                          ; preds = %if.end12
  %call15 = call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then14
  %sv.0 = phi %struct.sv* [ %2, %if.then14 ], [ %call15, %if.else ]
  %sv_any17 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any17, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  %call18 = call signext i8 @Perl_sv_upgrade(%struct.sv* %sv.0, i32 5) #7
  %6 = load i8* %is_utf8, align 1, !tbaa !1
  %tobool20 = icmp ne i8 %6, 0
  %sub21 = sub nsw i32 0, %len.addr.0
  %cond = select i1 %tobool20, i32 %sub21, i32 %len.addr.0
  %call22 = call %struct.hek* @Perl_share_hek(i8* %src.addr.0, i32 %cond, i32 %hash.addr.0) #8
  %arraydecay = getelementptr inbounds %struct.hek* %call22, i64 0, i32 2, i64 0
  %7 = load i8** %sv_any17, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %7 to i8**
  store i8* %arraydecay, i8** %xpv_pv, align 8, !tbaa !0
  %conv24 = sext i32 %len.addr.0 to i64
  %8 = load i8** %sv_any17, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %8, i64 8
  %9 = bitcast i8* %xpv_cur to i64*
  store i64 %conv24, i64* %9, align 8, !tbaa !5
  %conv26 = zext i32 %hash.addr.0 to i64
  %xuv_uv = getelementptr inbounds i8* %8, i64 24
  %10 = bitcast i8* %xuv_uv to i64*
  store i64 %conv26, i64* %10, align 8, !tbaa !5
  %xpv_len = getelementptr inbounds i8* %8, i64 16
  %11 = bitcast i8* %xpv_len to i64*
  store i64 0, i64* %11, align 8, !tbaa !5
  %12 = load i32* %sv_flags, align 4, !tbaa !3
  %or33 = or i32 %12, 76808192
  store i32 %or33, i32* %sv_flags, align 4, !tbaa !3
  %13 = load i8* %is_utf8, align 1, !tbaa !1
  %tobool34 = icmp eq i8 %13, 0
  br i1 %tobool34, label %if.end38, label %if.then35

if.then35:                                        ; preds = %if.end16
  %or37 = or i32 %12, 613679104
  store i32 %or37, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end38

if.end38:                                         ; preds = %if.end16, %if.then35
  ret %struct.sv* %sv.0
}

; Function Attrs: optsize
declare %struct.hek* @Perl_share_hek(i8*, i32, i32) #2

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSVpvf(i8* %pat, ...) #0 {
entry:
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %args to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %call = call %struct.sv* @Perl_vnewSVpvf(i8* %pat, [1 x %struct.__va_list_tag]* %args) #7
  call void @llvm.va_end(i8* %arraydecay1)
  ret %struct.sv* %call
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #3

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_vnewSVpvf(i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  %call2 = tail call i64 @strlen(i8* %pat) #8
  tail call void @Perl_sv_setpvn(%struct.sv* %sv.0, i8* getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), i64 0) #8
  tail call void @Perl_sv_vcatpvfn(%struct.sv* %sv.0, i8* %pat, i64 %call2, [1 x %struct.__va_list_tag]* %args, %struct.sv** null, i32 0, i8* undef) #8
  ret %struct.sv* %sv.0
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #3

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_vsetpvfn(%struct.sv* %sv, i8* %pat, i64 %patlen, [1 x %struct.__va_list_tag]* %args, %struct.sv** nocapture %svargs, i32 %svmax, i8* nocapture %maybe_tainted) #0 {
entry:
  tail call void @Perl_sv_setpvn(%struct.sv* %sv, i8* getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), i64 0) #7
  tail call void @Perl_sv_vcatpvfn(%struct.sv* %sv, i8* %pat, i64 %patlen, [1 x %struct.__va_list_tag]* %args, %struct.sv** %svargs, i32 %svmax, i8* undef) #7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSVnv(double %n) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  tail call void @Perl_sv_setnv(%struct.sv* %sv.0, double %n) #7
  ret %struct.sv* %sv.0
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSViv(i64 %i) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  tail call void @Perl_sv_setiv(%struct.sv* %sv.0, i64 %i) #7
  ret %struct.sv* %sv.0
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSVuv(i64 %u) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  tail call void @Perl_sv_setuv(%struct.sv* %sv.0, i64 %u) #7
  ret %struct.sv* %sv.0
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newRV_noinc(%struct.sv* %tmpRef) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  %call2 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv.0, i32 3) #7
  %sv_flags3 = getelementptr inbounds %struct.sv* %tmpRef, i64 0, i32 2
  %4 = load i32* %sv_flags3, align 4, !tbaa !3
  %and = and i32 %4, -2049
  store i32 %and, i32* %sv_flags3, align 4, !tbaa !3
  %5 = load i8** %sv_any1, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %5 to %struct.sv**
  store %struct.sv* %tmpRef, %struct.sv** %xrv_rv, align 8, !tbaa !0
  %6 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %6, 524288
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  ret %struct.sv* %sv.0
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSVsv(%struct.sv* %old) #0 {
entry:
  %tobool = icmp eq %struct.sv* %old, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %old, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 255
  %cmp = icmp eq i32 %and, 255
  br i1 %cmp, label %if.then1, label %if.end13

if.then1:                                         ; preds = %if.end
  %1 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %1, i64 0, i32 14
  %2 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp2 = icmp eq %struct.sv* %2, null
  br i1 %cmp2, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then1
  %3 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings3 = getelementptr inbounds %struct.cop* %3, i64 0, i32 14
  %4 = load %struct.sv** %cop_warnings3, align 8, !tbaa !0
  %cmp4 = icmp eq %struct.sv* %4, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp4, label %if.then11, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %5 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings6 = getelementptr inbounds %struct.cop* %5, i64 0, i32 14
  %6 = load %struct.sv** %cop_warnings6, align 8, !tbaa !0
  %cmp7 = icmp eq %struct.sv* %6, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp7, label %return, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false5
  %7 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings8 = getelementptr inbounds %struct.cop* %7, i64 0, i32 14
  %8 = load %struct.sv** %cop_warnings8, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.sv* %8, i64 0, i32 0
  %9 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %9 to i8**
  %10 = load i8** %xpv_pv, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %10, i64 6
  %11 = load i8* %arrayidx, align 1, !tbaa !1
  %and9 = and i8 %11, 1
  %tobool10 = icmp eq i8 %and9, 0
  br i1 %tobool10, label %return, label %if.then11

if.then11:                                        ; preds = %land.lhs.true, %lor.lhs.false, %if.then1
  tail call void (i32, i8*, ...)* @Perl_warner(i32 24, i8* getelementptr inbounds ([40 x i8]* @.str49, i64 0, i64 0)) #8
  br label %return

if.end13:                                         ; preds = %if.end
  %12 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool14 = icmp eq %struct.sv* %12, null
  br i1 %tobool14, label %if.else, label %if.then15

if.then15:                                        ; preds = %if.end13
  %sv_any16 = getelementptr inbounds %struct.sv* %12, i64 0, i32 0
  %13 = load i8** %sv_any16, align 8, !tbaa !0
  %14 = bitcast i8* %13 to %struct.sv*
  store %struct.sv* %14, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %15 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end17

if.else:                                          ; preds = %if.end13
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then15
  %sv.0 = phi %struct.sv* [ %12, %if.then15 ], [ %call, %if.else ]
  %sv_any18 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any18, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags19 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags19, align 4, !tbaa !3
  tail call void @Perl_sv_setsv_flags(%struct.sv* %sv.0, %struct.sv* %old, i32 18) #7
  br label %return

return:                                           ; preds = %if.then11, %lor.lhs.false5, %land.lhs.true, %entry, %if.end17
  %retval.0 = phi %struct.sv* [ %sv.0, %if.end17 ], [ null, %entry ], [ null, %land.lhs.true ], [ null, %lor.lhs.false5 ], [ null, %if.then11 ]
  ret %struct.sv* %retval.0
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_reset(i8* nocapture %s, %struct.hv* %stash) #0 {
entry:
  %todo = alloca [256 x i8], align 16
  %0 = getelementptr inbounds [256 x i8]* %todo, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %0) #3
  %tobool = icmp eq %struct.hv* %stash, null
  br i1 %tobool, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %1 = load i8* %s, align 1, !tbaa !1
  %tobool2 = icmp eq i8 %1, 0
  %sv_any7 = getelementptr inbounds %struct.hv* %stash, i64 0, i32 0
  %2 = load %struct.xpvhv** %sv_any7, align 8, !tbaa !0
  br i1 %tobool2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.end
  %xhv_pmroot = getelementptr inbounds %struct.xpvhv* %2, i64 0, i32 9
  %pm.0154 = load %struct.pmop** %xhv_pmroot, align 8
  %tobool4155 = icmp eq %struct.pmop* %pm.0154, null
  br i1 %tobool4155, label %cleanup, label %for.body

for.body:                                         ; preds = %if.then3, %for.body
  %pm.0156 = phi %struct.pmop* [ %pm.0, %for.body ], [ %pm.0154, %if.then3 ]
  %op_pmdynflags = getelementptr inbounds %struct.pmop* %pm.0156, i64 0, i32 16
  %3 = load i8* %op_pmdynflags, align 1, !tbaa !1
  %and = and i8 %3, -2
  store i8 %and, i8* %op_pmdynflags, align 1, !tbaa !1
  %op_pmnext = getelementptr inbounds %struct.pmop* %pm.0156, i64 0, i32 12
  %pm.0 = load %struct.pmop** %op_pmnext, align 8
  %tobool4 = icmp eq %struct.pmop* %pm.0, null
  br i1 %tobool4, label %cleanup, label %for.body

if.end6:                                          ; preds = %if.end
  %4 = bitcast %struct.xpvhv* %2 to %struct.he***
  %5 = load %struct.he*** %4, align 8, !tbaa !0
  %tobool8 = icmp eq %struct.he** %5, null
  br i1 %tobool8, label %cleanup, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end6
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 256, i32 16, i1 false)
  br label %while.body

while.cond.loopexit:                              ; preds = %for.inc115, %for.cond25.loopexit
  %6 = phi %struct.xpvhv* [ %8, %for.cond25.loopexit ], [ %48, %for.inc115 ]
  %7 = load i8* %incdec.ptr, align 1, !tbaa !1
  %tobool11 = icmp eq i8 %7, 0
  br i1 %tobool11, label %cleanup, label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.loopexit
  %8 = phi %struct.xpvhv* [ %2, %while.body.lr.ph ], [ %6, %while.cond.loopexit ]
  %9 = phi i8 [ %1, %while.body.lr.ph ], [ %7, %while.cond.loopexit ]
  %s.addr.0168 = phi i8* [ %s, %while.body.lr.ph ], [ %incdec.ptr, %while.cond.loopexit ]
  %arrayidx = getelementptr inbounds i8* %s.addr.0168, i64 1
  %10 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp = icmp eq i8 %10, 45
  %add.ptr = getelementptr inbounds i8* %s.addr.0168, i64 2
  %add.ptr.s.addr.0 = select i1 %cmp, i8* %add.ptr, i8* %s.addr.0168
  %incdec.ptr = getelementptr inbounds i8* %add.ptr.s.addr.0, i64 1
  %11 = load i8* %add.ptr.s.addr.0, align 1, !tbaa !1
  %conv17 = zext i8 %11 to i32
  %cmp19157 = icmp ugt i8 %9, %11
  br i1 %cmp19157, label %for.cond25.loopexit, label %for.body21.lr.ph

for.body21.lr.ph:                                 ; preds = %while.body
  %12 = zext i8 %9 to i64
  %scevgep = getelementptr [256 x i8]* %todo, i64 0, i64 %12
  %13 = zext i8 %9 to i32
  %14 = icmp ugt i32 %13, %conv17
  %smax = select i1 %14, i32 %13, i32 %conv17
  %15 = sub i32 %smax, %13
  %16 = zext i32 %15 to i64
  %17 = add i64 %16, 1
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 1, i64 %17, i32 1, i1 false)
  br label %for.cond25.loopexit

for.cond25.loopexit:                              ; preds = %for.body21.lr.ph, %while.body
  %xhv_max162 = getelementptr inbounds %struct.xpvhv* %8, i64 0, i32 2
  %18 = load i64* %xhv_max162, align 8, !tbaa !5
  %conv27163 = trunc i64 %18 to i32
  %cmp28164 = icmp slt i32 %conv27163, 0
  br i1 %cmp28164, label %while.cond.loopexit, label %for.body30

for.body30:                                       ; preds = %for.cond25.loopexit, %for.inc115
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc115 ], [ 0, %for.cond25.loopexit ]
  %19 = phi %struct.xpvhv* [ %48, %for.inc115 ], [ %8, %for.cond25.loopexit ]
  %20 = bitcast %struct.xpvhv* %19 to %struct.he***
  %21 = load %struct.he*** %20, align 8, !tbaa !0
  %arrayidx34 = getelementptr inbounds %struct.he** %21, i64 %indvars.iv
  %entry1.0159 = load %struct.he** %arrayidx34, align 8
  %tobool36160 = icmp eq %struct.he* %entry1.0159, null
  br i1 %tobool36160, label %for.inc115, label %for.body37

for.body37:                                       ; preds = %for.body30, %for.inc113
  %entry1.0161 = phi %struct.he* [ %entry1.0, %for.inc113 ], [ %entry1.0159, %for.body30 ]
  %hent_hek = getelementptr inbounds %struct.he* %entry1.0161, i64 0, i32 1
  %22 = load %struct.hek** %hent_hek, align 8, !tbaa !0
  %arraydecay38 = getelementptr inbounds %struct.hek* %22, i64 0, i32 2, i64 0
  %23 = load i8* %arraydecay38, align 1, !tbaa !1
  %idxprom39 = zext i8 %23 to i64
  %arrayidx40 = getelementptr inbounds [256 x i8]* %todo, i64 0, i64 %idxprom39
  %24 = load i8* %arrayidx40, align 1, !tbaa !1
  %tobool41 = icmp eq i8 %24, 0
  br i1 %tobool41, label %for.inc113, label %if.end43

if.end43:                                         ; preds = %for.body37
  %hent_val = getelementptr inbounds %struct.he* %entry1.0161, i64 0, i32 2
  %25 = load %struct.sv** %hent_val, align 8, !tbaa !0
  %26 = bitcast %struct.sv* %25 to %struct.gv*
  %sv_any44 = bitcast %struct.sv* %25 to %struct.xpvgv**
  %27 = load %struct.xpvgv** %sv_any44, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %27, i64 0, i32 7
  %28 = load %struct.gp** %xgv_gp, align 8, !tbaa !0
  %gp_sv = getelementptr inbounds %struct.gp* %28, i64 0, i32 0
  %29 = load %struct.sv** %gp_sv, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %29, i64 0, i32 2
  %30 = load i32* %sv_flags, align 4, !tbaa !3
  %and45 = and i32 %30, 9961472
  %tobool46 = icmp eq i32 %and45, 0
  br i1 %tobool46, label %if.end56, label %if.then47

if.then47:                                        ; preds = %if.end43
  %31 = and i32 %30, 8912896
  %32 = icmp eq i32 %31, 524288
  br i1 %32, label %if.then54, label %for.inc113

if.then54:                                        ; preds = %if.then47
  call void @Perl_sv_unref_flags(%struct.sv* %29, i32 0) #8
  br label %for.inc113

if.end56:                                         ; preds = %if.end43
  %and58 = and i32 %30, 1223753727
  store i32 %and58, i32* %sv_flags, align 4, !tbaa !3
  %and60 = and i32 %30, 2097152
  %tobool61 = icmp eq i32 %and60, 0
  br i1 %tobool61, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end56
  %call = call i32 @Perl_sv_backoff(%struct.sv* %29) #7
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %if.end56, %land.rhs
  %33 = phi i32 [ %and58, %if.end56 ], [ %.pre, %land.rhs ]
  %and64 = and i32 %33, 252
  %cmp65 = icmp eq i32 %and64, 0
  br i1 %cmp65, label %if.end85, label %if.then67

if.then67:                                        ; preds = %land.end
  %sv_any68 = getelementptr inbounds %struct.sv* %29, i64 0, i32 0
  %34 = load i8** %sv_any68, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %34, i64 8
  %35 = bitcast i8* %xpv_cur to i64*
  store i64 0, i64* %35, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %34 to i8**
  %36 = load i8** %xpv_pv, align 8, !tbaa !0
  %cmp70 = icmp eq i8* %36, null
  br i1 %cmp70, label %if.end75, label %if.then72

if.then72:                                        ; preds = %if.then67
  store i8 0, i8* %36, align 1, !tbaa !1
  br label %if.end75

if.end75:                                         ; preds = %if.then67, %if.then72
  %37 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool76 = icmp ne i8 %37, 0
  %38 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool78 = icmp ne i8 %38, 0
  %or.cond = and i1 %tobool76, %tobool78
  br i1 %or.cond, label %if.then81, label %if.end85

if.then81:                                        ; preds = %if.end75
  call void @Perl_sv_magic(%struct.sv* %29, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end85

if.end85:                                         ; preds = %if.end75, %land.end, %if.then81
  %39 = load %struct.xpvgv** %sv_any44, align 8, !tbaa !0
  %xgv_gp87 = getelementptr inbounds %struct.xpvgv* %39, i64 0, i32 7
  %40 = load %struct.gp** %xgv_gp87, align 8, !tbaa !0
  %gp_av = getelementptr inbounds %struct.gp* %40, i64 0, i32 4
  %41 = load %struct.av** %gp_av, align 8, !tbaa !0
  %tobool88 = icmp eq %struct.av* %41, null
  br i1 %tobool88, label %if.end93, label %if.then89

if.then89:                                        ; preds = %if.end85
  call void @Perl_av_clear(%struct.av* %41) #8
  %.pre170 = load %struct.xpvgv** %sv_any44, align 8, !tbaa !0
  %xgv_gp95.phi.trans.insert = getelementptr inbounds %struct.xpvgv* %.pre170, i64 0, i32 7
  %.pre171 = load %struct.gp** %xgv_gp95.phi.trans.insert, align 8, !tbaa !0
  br label %if.end93

if.end93:                                         ; preds = %if.end85, %if.then89
  %42 = phi %struct.gp* [ %40, %if.end85 ], [ %.pre171, %if.then89 ]
  %gp_hv = getelementptr inbounds %struct.gp* %42, i64 0, i32 5
  %43 = load %struct.hv** %gp_hv, align 8, !tbaa !0
  %tobool96 = icmp eq %struct.hv* %43, null
  br i1 %tobool96, label %for.inc113, label %land.lhs.true97

land.lhs.true97:                                  ; preds = %if.end93
  %sv_any101 = getelementptr inbounds %struct.hv* %43, i64 0, i32 0
  %44 = load %struct.xpvhv** %sv_any101, align 8, !tbaa !0
  %xhv_name = getelementptr inbounds %struct.xpvhv* %44, i64 0, i32 10
  %45 = load i8** %xhv_name, align 8, !tbaa !0
  %tobool102 = icmp eq i8* %45, null
  br i1 %tobool102, label %if.then103, label %for.inc113

if.then103:                                       ; preds = %land.lhs.true97
  call void @Perl_hv_clear(%struct.hv* %43) #8
  %46 = load %struct.gv** @PL_envgv, align 8, !tbaa !0
  %cmp107 = icmp eq %struct.gv* %26, %46
  br i1 %cmp107, label %if.then109, label %for.inc113

if.then109:                                       ; preds = %if.then103
  %47 = load i8*** @environ, align 8, !tbaa !0
  store i8* null, i8** %47, align 8, !tbaa !0
  br label %for.inc113

for.inc113:                                       ; preds = %if.then47, %land.lhs.true97, %if.end93, %for.body37, %if.then109, %if.then103, %if.then54
  %hent_next = getelementptr inbounds %struct.he* %entry1.0161, i64 0, i32 0
  %entry1.0 = load %struct.he** %hent_next, align 8
  %tobool36 = icmp eq %struct.he* %entry1.0, null
  br i1 %tobool36, label %for.cond35.for.inc115_crit_edge, label %for.body37

for.cond35.for.inc115_crit_edge:                  ; preds = %for.inc113
  %.pre172 = load %struct.xpvhv** %sv_any7, align 8, !tbaa !0
  br label %for.inc115

for.inc115:                                       ; preds = %for.body30, %for.cond35.for.inc115_crit_edge
  %48 = phi %struct.xpvhv* [ %.pre172, %for.cond35.for.inc115_crit_edge ], [ %19, %for.body30 ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %xhv_max = getelementptr inbounds %struct.xpvhv* %48, i64 0, i32 2
  %49 = load i64* %xhv_max, align 8, !tbaa !5
  %conv27 = trunc i64 %49 to i32
  %50 = trunc i64 %indvars.iv to i32
  %cmp28 = icmp slt i32 %50, %conv27
  br i1 %cmp28, label %for.body30, label %while.cond.loopexit

cleanup:                                          ; preds = %while.cond.loopexit, %if.then3, %for.body, %if.end6, %entry
  call void @llvm.lifetime.end(i64 256, i8* %0) #3
  ret void
}

; Function Attrs: optsize
declare void @Perl_av_clear(%struct.av*) #2

; Function Attrs: optsize
declare void @Perl_hv_clear(%struct.hv*) #2

; Function Attrs: nounwind optsize uwtable
define %struct.io* @Perl_sv_2io(%struct.sv* %sv) #0 {
entry:
  %n_a = alloca i64, align 8
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 255
  switch i32 %and, label %sw.default [
    i32 15, label %sw.bb
    i32 13, label %land.lhs.true4
  ]

sw.bb:                                            ; preds = %entry
  %1 = bitcast %struct.sv* %sv to %struct.io*
  br label %return

land.lhs.true4:                                   ; preds = %entry
  %sv_any = bitcast %struct.sv* %sv to %struct.xpvgv**
  %2 = load %struct.xpvgv** %sv_any, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %2, i64 0, i32 7
  %3 = load %struct.gp** %xgv_gp, align 8, !tbaa !0
  %tobool5 = icmp eq %struct.gp* %3, null
  br i1 %tobool5, label %if.then, label %cond.end

cond.end:                                         ; preds = %land.lhs.true4
  %gp_io = getelementptr inbounds %struct.gp* %3, i64 0, i32 2
  %4 = load %struct.io** %gp_io, align 8, !tbaa !0
  %tobool8 = icmp eq %struct.io* %4, null
  br i1 %tobool8, label %if.then, label %return

if.then:                                          ; preds = %land.lhs.true4, %cond.end
  %xgv_name = getelementptr inbounds %struct.xpvgv* %2, i64 0, i32 8
  %5 = load i8** %xgv_name, align 8, !tbaa !0
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([19 x i8]* @.str50, i64 0, i64 0), i8* %5) #8
  br label %return

sw.default:                                       ; preds = %entry
  %and11 = and i32 %0, 118423552
  %tobool12 = icmp eq i32 %and11, 0
  br i1 %tobool12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %sw.default
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([0 x i8]* @PL_no_usym, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @.str51, i64 0, i64 0)) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end14

if.end14:                                         ; preds = %sw.default, %if.then13
  %6 = phi i32 [ %0, %sw.default ], [ %.pre, %if.then13 ]
  %and16 = and i32 %6, 524288
  %tobool17 = icmp eq i32 %and16, 0
  br i1 %tobool17, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end14
  %sv_any19 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %7 = load i8** %sv_any19, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %7 to %struct.sv**
  %8 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %call = call %struct.io* @Perl_sv_2io(%struct.sv* %8) #7
  br label %return

if.end20:                                         ; preds = %if.end14
  %and22 = and i32 %6, 262144
  %cmp23 = icmp eq i32 %and22, 0
  br i1 %cmp23, label %cond.false27, label %cond.true24

cond.true24:                                      ; preds = %if.end20
  %sv_any25 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %9 = load i8** %sv_any25, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %9, i64 8
  %10 = bitcast i8* %xpv_cur to i64*
  %11 = load i64* %10, align 8, !tbaa !5
  store i64 %11, i64* %n_a, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %9 to i8**
  %12 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end29

cond.false27:                                     ; preds = %if.end20
  %call28 = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %n_a, i32 2) #7
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false27, %cond.true24
  %cond30 = phi i8* [ %12, %cond.true24 ], [ %call28, %cond.false27 ]
  %call31 = call %struct.gv* @Perl_gv_fetchpv(i8* %cond30, i32 0, i32 15) #8
  %tobool32 = icmp eq %struct.gv* %call31, null
  br i1 %tobool32, label %if.then52, label %land.lhs.true35

land.lhs.true35:                                  ; preds = %cond.end29
  %13 = getelementptr inbounds %struct.gv* %call31, i64 0, i32 2
  %14 = load i32* %13, align 4, !tbaa !3
  %and37 = and i32 %14, 255
  %cmp38 = icmp eq i32 %and37, 13
  br i1 %cmp38, label %land.lhs.true39, label %if.then52

land.lhs.true39:                                  ; preds = %land.lhs.true35
  %sv_any40 = getelementptr inbounds %struct.gv* %call31, i64 0, i32 0
  %15 = load %struct.xpvgv** %sv_any40, align 8, !tbaa !0
  %xgv_gp41 = getelementptr inbounds %struct.xpvgv* %15, i64 0, i32 7
  %16 = load %struct.gp** %xgv_gp41, align 8, !tbaa !0
  %tobool42 = icmp eq %struct.gp* %16, null
  br i1 %tobool42, label %if.then52, label %if.end50

if.end50:                                         ; preds = %land.lhs.true39
  %gp_io46 = getelementptr inbounds %struct.gp* %16, i64 0, i32 2
  %17 = load %struct.io** %gp_io46, align 8, !tbaa !0
  %tobool51 = icmp eq %struct.io* %17, null
  br i1 %tobool51, label %if.then52, label %return

if.then52:                                        ; preds = %cond.end29, %land.lhs.true35, %land.lhs.true39, %if.end50
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([19 x i8]* @.str52, i64 0, i64 0), %struct.sv* %sv) #8
  br label %return

return:                                           ; preds = %sw.bb, %if.then, %if.then52, %cond.end, %if.end50, %if.then18
  %retval.0 = phi %struct.io* [ %call, %if.then18 ], [ %17, %if.end50 ], [ null, %if.then52 ], [ %4, %cond.end ], [ null, %if.then ], [ %1, %sw.bb ]
  ret %struct.io* %retval.0
}

; Function Attrs: optsize
declare %struct.gv* @Perl_gv_fetchpv(i8*, i32, i32) #2

; Function Attrs: nounwind optsize uwtable
define %struct.cv* @Perl_sv_2cv(%struct.sv* %sv, %struct.hv** nocapture %st, %struct.gv** nocapture %gvp, i32 %lref) #0 {
entry:
  %n_a = alloca i64, align 8
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.gv* null, %struct.gv** %gvp, align 8, !tbaa !0
  br label %return

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 255
  switch i32 %and, label %sw.default [
    i32 12, label %sw.bb
    i32 11, label %sw.bb1
    i32 10, label %sw.bb1
    i32 13, label %sw.bb2
  ]

sw.bb:                                            ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xcv_stash = getelementptr inbounds i8* %1, i64 56
  %2 = bitcast i8* %xcv_stash to %struct.hv**
  %3 = load %struct.hv** %2, align 8, !tbaa !0
  store %struct.hv* %3, %struct.hv** %st, align 8, !tbaa !0
  store %struct.gv* null, %struct.gv** %gvp, align 8, !tbaa !0
  %4 = bitcast %struct.sv* %sv to %struct.cv*
  br label %return

sw.bb1:                                           ; preds = %if.end, %if.end
  store %struct.gv* null, %struct.gv** %gvp, align 8, !tbaa !0
  br label %return

sw.bb2:                                           ; preds = %if.end
  %5 = bitcast %struct.sv* %sv to %struct.gv*
  store %struct.gv* %5, %struct.gv** %gvp, align 8, !tbaa !0
  %sv_any3 = bitcast %struct.sv* %sv to %struct.xpvgv**
  %6 = load %struct.xpvgv** %sv_any3, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %6, i64 0, i32 7
  %7 = load %struct.gp** %xgv_gp, align 8, !tbaa !0
  %gp_egv = getelementptr inbounds %struct.gp* %7, i64 0, i32 6
  %8 = load %struct.gv** %gp_egv, align 8, !tbaa !0
  %tobool4 = icmp eq %struct.gv* %8, null
  %. = select i1 %tobool4, %struct.gv* %5, %struct.gv* %8
  br label %fix_gv

sw.default:                                       ; preds = %if.end
  %and10 = and i32 %0, 8192
  %tobool11 = icmp eq i32 %and10, 0
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.default
  %call = call i32 @Perl_mg_get(%struct.sv* %sv) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end13

if.end13:                                         ; preds = %sw.default, %if.then12
  %9 = phi i32 [ %0, %sw.default ], [ %.pre, %if.then12 ]
  %and15 = and i32 %9, 524288
  %tobool16 = icmp eq i32 %and15, 0
  br i1 %tobool16, label %if.else55, label %if.then17

if.then17:                                        ; preds = %if.end13
  %10 = load i64* @PL_amagic_generation, align 8, !tbaa !5
  %tobool18 = icmp eq i64 %10, 0
  br i1 %tobool18, label %if.end39, label %am_again

am_again:                                         ; preds = %if.then17, %land.lhs.true31.am_again_crit_edge
  %11 = phi i32 [ %.pre179, %land.lhs.true31.am_again_crit_edge ], [ %9, %if.then17 ]
  %sv.addr.0 = phi %struct.sv* [ %call23, %land.lhs.true31.am_again_crit_edge ], [ %sv, %if.then17 ]
  %and21 = and i32 %11, 268435456
  %tobool22 = icmp eq i32 %and21, 0
  br i1 %tobool22, label %if.end39, label %land.lhs.true

land.lhs.true:                                    ; preds = %am_again
  %call23 = call %struct.sv* @Perl_amagic_call(%struct.sv* %sv.addr.0, %struct.sv* @PL_sv_undef, i32 62, i32 9) #8
  %tobool24 = icmp eq %struct.sv* %call23, null
  br i1 %tobool24, label %if.end39, label %if.then25

if.then25:                                        ; preds = %land.lhs.true
  %sv_flags26 = getelementptr inbounds %struct.sv* %call23, i64 0, i32 2
  %12 = load i32* %sv_flags26, align 4, !tbaa !3
  %and27 = and i32 %12, 524288
  %tobool28 = icmp eq i32 %and27, 0
  br i1 %tobool28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.then25
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([50 x i8]* @.str53, i64 0, i64 0)) #8
  br label %if.end30

if.end30:                                         ; preds = %if.then25, %if.then29
  %cmp = icmp eq %struct.sv* %call23, %sv.addr.0
  br i1 %cmp, label %if.end39, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %if.end30
  %sv_any32 = getelementptr inbounds %struct.sv* %call23, i64 0, i32 0
  %13 = load i8** %sv_any32, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %13 to %struct.sv**
  %14 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_any33 = getelementptr inbounds %struct.sv* %sv.addr.0, i64 0, i32 0
  %15 = load i8** %sv_any33, align 8, !tbaa !0
  %xrv_rv34 = bitcast i8* %15 to %struct.sv**
  %16 = load %struct.sv** %xrv_rv34, align 8, !tbaa !0
  %cmp35 = icmp eq %struct.sv* %14, %16
  br i1 %cmp35, label %if.end39, label %land.lhs.true31.am_again_crit_edge

land.lhs.true31.am_again_crit_edge:               ; preds = %land.lhs.true31
  %.pre179 = load i32* %sv_flags26, align 4, !tbaa !3
  br label %am_again

if.end39:                                         ; preds = %land.lhs.true31, %if.end30, %land.lhs.true, %am_again, %if.then17
  %sv.addr.1 = phi %struct.sv* [ %sv, %if.then17 ], [ %call23, %land.lhs.true31 ], [ %sv.addr.0, %if.end30 ], [ %sv.addr.0, %land.lhs.true ], [ %sv.addr.0, %am_again ]
  %sv_any40 = getelementptr inbounds %struct.sv* %sv.addr.1, i64 0, i32 0
  %17 = load i8** %sv_any40, align 8, !tbaa !0
  %xrv_rv41 = bitcast i8* %17 to %struct.sv**
  %18 = load %struct.sv** %xrv_rv41, align 8, !tbaa !0
  %sv_flags42 = getelementptr inbounds %struct.sv* %18, i64 0, i32 2
  %19 = load i32* %sv_flags42, align 4, !tbaa !3
  %and43 = and i32 %19, 255
  switch i32 %and43, label %if.end73.thread [
    i32 12, label %if.then45
    i32 13, label %if.then51
  ]

if.then45:                                        ; preds = %if.end39
  %20 = bitcast %struct.sv* %18 to %struct.cv*
  store %struct.gv* null, %struct.gv** %gvp, align 8, !tbaa !0
  %sv_any46 = bitcast %struct.sv* %18 to %struct.xpvcv**
  %21 = load %struct.xpvcv** %sv_any46, align 8, !tbaa !0
  %xcv_stash47 = getelementptr inbounds %struct.xpvcv* %21, i64 0, i32 7
  %22 = load %struct.hv** %xcv_stash47, align 8, !tbaa !0
  store %struct.hv* %22, %struct.hv** %st, align 8, !tbaa !0
  br label %return

if.then51:                                        ; preds = %if.end39
  %23 = bitcast %struct.sv* %18 to %struct.gv*
  br label %if.end73

if.end73.thread:                                  ; preds = %if.end39
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([27 x i8]* @.str54, i64 0, i64 0)) #8
  store %struct.gv* null, %struct.gv** %gvp, align 8, !tbaa !0
  br label %return

if.else55:                                        ; preds = %if.end13
  %and57 = and i32 %9, 255
  %cmp58 = icmp eq i32 %and57, 13
  br i1 %cmp58, label %if.then59, label %if.else60

if.then59:                                        ; preds = %if.else55
  %24 = bitcast %struct.sv* %sv to %struct.gv*
  br label %if.end73

if.else60:                                        ; preds = %if.else55
  %and62 = and i32 %9, 262144
  %cmp63 = icmp eq i32 %and62, 0
  br i1 %cmp63, label %cond.false67, label %cond.true64

cond.true64:                                      ; preds = %if.else60
  %sv_any65 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %25 = load i8** %sv_any65, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %25, i64 8
  %26 = bitcast i8* %xpv_cur to i64*
  %27 = load i64* %26, align 8, !tbaa !5
  store i64 %27, i64* %n_a, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %25 to i8**
  %28 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end69

cond.false67:                                     ; preds = %if.else60
  %call68 = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %n_a, i32 2) #7
  br label %cond.end69

cond.end69:                                       ; preds = %cond.false67, %cond.true64
  %cond70 = phi i8* [ %28, %cond.true64 ], [ %call68, %cond.false67 ]
  %call71 = call %struct.gv* @Perl_gv_fetchpv(i8* %cond70, i32 %lref, i32 12) #8
  br label %if.end73

if.end73:                                         ; preds = %if.then59, %cond.end69, %if.then51
  %sv.addr.2 = phi %struct.sv* [ %18, %if.then51 ], [ %sv, %if.then59 ], [ %sv, %cond.end69 ]
  %gv.0 = phi %struct.gv* [ %23, %if.then51 ], [ %24, %if.then59 ], [ %call71, %cond.end69 ]
  store %struct.gv* %gv.0, %struct.gv** %gvp, align 8, !tbaa !0
  %tobool74 = icmp eq %struct.gv* %gv.0, null
  br i1 %tobool74, label %return, label %if.end76

if.end76:                                         ; preds = %if.end73
  %sv_any77 = getelementptr inbounds %struct.gv* %gv.0, i64 0, i32 0
  %29 = load %struct.xpvgv** %sv_any77, align 8, !tbaa !0
  %xgv_gp78 = getelementptr inbounds %struct.xpvgv* %29, i64 0, i32 7
  %30 = load %struct.gp** %xgv_gp78, align 8, !tbaa !0
  %gp_egv79 = getelementptr inbounds %struct.gp* %30, i64 0, i32 6
  %31 = load %struct.gv** %gp_egv79, align 8, !tbaa !0
  %tobool80 = icmp eq %struct.gv* %31, null
  %gv.0. = select i1 %tobool80, %struct.gv* %gv.0, %struct.gv* %31
  br label %fix_gv

fix_gv:                                           ; preds = %if.end76, %sw.bb2
  %cond.pn = phi %struct.gv* [ %., %sw.bb2 ], [ %gv.0., %if.end76 ]
  %sv.addr.3 = phi %struct.sv* [ %sv, %sw.bb2 ], [ %sv.addr.2, %if.end76 ]
  %gv.1 = phi %struct.gv* [ %5, %sw.bb2 ], [ %gv.0, %if.end76 ]
  %.pn.in = getelementptr inbounds %struct.gv* %cond.pn, i64 0, i32 0
  %.pn = load %struct.xpvgv** %.pn.in, align 8
  %storemerge.in = getelementptr inbounds %struct.xpvgv* %.pn, i64 0, i32 10
  %storemerge = load %struct.hv** %storemerge.in, align 8
  store %struct.hv* %storemerge, %struct.hv** %st, align 8, !tbaa !0
  %tobool90 = icmp eq i32 %lref, 0
  %sv_any119.pre = getelementptr inbounds %struct.gv* %gv.1, i64 0, i32 0
  br i1 %tobool90, label %if.end118, label %land.lhs.true91

land.lhs.true91:                                  ; preds = %fix_gv
  %32 = load %struct.xpvgv** %sv_any119.pre, align 8, !tbaa !0
  %xgv_gp93 = getelementptr inbounds %struct.xpvgv* %32, i64 0, i32 7
  %33 = load %struct.gp** %xgv_gp93, align 8, !tbaa !0
  %gp_cvgen = getelementptr inbounds %struct.gp* %33, i64 0, i32 8
  %34 = load i32* %gp_cvgen, align 4, !tbaa !3
  %tobool94 = icmp eq i32 %34, 0
  br i1 %tobool94, label %cond.false96, label %if.then100

cond.false96:                                     ; preds = %land.lhs.true91
  %gp_cv = getelementptr inbounds %struct.gp* %33, i64 0, i32 7
  %35 = load %struct.cv** %gp_cv, align 8, !tbaa !0
  %tobool99 = icmp eq %struct.cv* %35, null
  br i1 %tobool99, label %if.then100, label %if.end118

if.then100:                                       ; preds = %cond.false96, %land.lhs.true91
  call void @Perl_push_scope() #8
  %call102 = call %struct.sv* @Perl_newSV(i64 0) #7
  call void @Perl_gv_efullname4(%struct.sv* %call102, %struct.gv* %gv.1, i8* null, i8 signext 1) #8
  %call103 = call i32 @Perl_start_subparse(i32 0, i32 0) #8
  %call104 = call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %call102) #8
  %call105 = call %struct.cv* @Perl_newSUB(i32 %call103, %struct.op* %call104, %struct.op* null, %struct.op* null) #8
  call void @Perl_pop_scope() #8
  %36 = load %struct.xpvgv** %sv_any119.pre, align 8, !tbaa !0
  %xgv_gp107 = getelementptr inbounds %struct.xpvgv* %36, i64 0, i32 7
  %37 = load %struct.gp** %xgv_gp107, align 8, !tbaa !0
  %gp_cvgen108 = getelementptr inbounds %struct.gp* %37, i64 0, i32 8
  %38 = load i32* %gp_cvgen108, align 4, !tbaa !3
  %tobool109 = icmp eq i32 %38, 0
  br i1 %tobool109, label %cond.false111, label %if.then116

cond.false111:                                    ; preds = %if.then100
  %gp_cv114 = getelementptr inbounds %struct.gp* %37, i64 0, i32 7
  %39 = load %struct.cv** %gp_cv114, align 8, !tbaa !0
  %tobool115 = icmp eq %struct.cv* %39, null
  br i1 %tobool115, label %if.then116, label %if.end118

if.then116:                                       ; preds = %cond.false111, %if.then100
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([32 x i8]* @.str55, i64 0, i64 0), %struct.sv* %sv.addr.3) #8
  br label %if.end118

if.end118:                                        ; preds = %fix_gv, %cond.false111, %cond.false96, %if.then116
  %40 = load %struct.xpvgv** %sv_any119.pre, align 8, !tbaa !0
  %xgv_gp120 = getelementptr inbounds %struct.xpvgv* %40, i64 0, i32 7
  %41 = load %struct.gp** %xgv_gp120, align 8, !tbaa !0
  %gp_cvgen121 = getelementptr inbounds %struct.gp* %41, i64 0, i32 8
  %42 = load i32* %gp_cvgen121, align 4, !tbaa !3
  %tobool122 = icmp eq i32 %42, 0
  br i1 %tobool122, label %cond.false124, label %return

cond.false124:                                    ; preds = %if.end118
  %gp_cv127 = getelementptr inbounds %struct.gp* %41, i64 0, i32 7
  %43 = load %struct.cv** %gp_cv127, align 8, !tbaa !0
  br label %return

return:                                           ; preds = %if.end73.thread, %cond.false124, %if.end118, %if.end73, %if.then45, %sw.bb1, %sw.bb, %if.then
  %retval.0 = phi %struct.cv* [ %20, %if.then45 ], [ null, %sw.bb1 ], [ %4, %sw.bb ], [ null, %if.then ], [ null, %if.end73 ], [ %43, %cond.false124 ], [ null, %if.end118 ], [ null, %if.end73.thread ]
  ret %struct.cv* %retval.0
}

; Function Attrs: optsize
declare void @Perl_gv_efullname4(%struct.sv*, %struct.gv*, i8*, i8 signext) #2

; Function Attrs: optsize
declare %struct.cv* @Perl_newSUB(i32, %struct.op*, %struct.op*, %struct.op*) #2

; Function Attrs: optsize
declare i32 @Perl_start_subparse(i32, i32) #2

; Function Attrs: optsize
declare %struct.op* @Perl_newSVOP(i32, i32, %struct.sv*) #2

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_sv_true(%struct.sv* %sv) #0 {
entry:
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.else10, label %if.then2

if.then2:                                         ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %tobool3 = icmp eq i8* %1, null
  br i1 %tobool3, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then2
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  %cmp = icmp ugt i64 %3, 1
  br i1 %cmp, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %tobool5 = icmp eq i64 %3, 0
  br i1 %tobool5, label %if.else, label %land.lhs.true6

land.lhs.true6:                                   ; preds = %lor.lhs.false
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  %5 = load i8* %4, align 1, !tbaa !1
  %cmp7 = icmp eq i8 %5, 48
  br i1 %cmp7, label %if.else, label %return

if.else:                                          ; preds = %land.lhs.true6, %lor.lhs.false, %if.then2
  br label %return

if.else10:                                        ; preds = %if.end
  %and12 = and i32 %0, 65536
  %tobool13 = icmp eq i32 %and12, 0
  br i1 %tobool13, label %if.else18, label %if.then14

if.then14:                                        ; preds = %if.else10
  %sv_any15 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %6 = load i8** %sv_any15, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %6, i64 24
  %7 = bitcast i8* %xiv_iv to i64*
  %8 = load i64* %7, align 8, !tbaa !5
  %cmp16 = icmp ne i64 %8, 0
  %conv17 = zext i1 %cmp16 to i32
  br label %return

if.else18:                                        ; preds = %if.else10
  %and20 = and i32 %0, 131072
  %tobool21 = icmp eq i32 %and20, 0
  br i1 %tobool21, label %if.else26, label %if.then22

if.then22:                                        ; preds = %if.else18
  %sv_any23 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %9 = load i8** %sv_any23, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %9, i64 32
  %10 = bitcast i8* %xnv_nv to double*
  %11 = load double* %10, align 8, !tbaa !6
  %cmp24 = fcmp une double %11, 0.000000e+00
  %conv25 = zext i1 %cmp24 to i32
  br label %return

if.else26:                                        ; preds = %if.else18
  %call = tail call signext i8 @Perl_sv_2bool(%struct.sv* %sv) #7
  %conv27 = sext i8 %call to i32
  br label %return

return:                                           ; preds = %land.lhs.true, %land.lhs.true6, %entry, %if.else26, %if.then22, %if.then14, %if.else
  %retval.0 = phi i32 [ 0, %if.else ], [ %conv17, %if.then14 ], [ %conv25, %if.then22 ], [ %conv27, %if.else26 ], [ 0, %entry ], [ 1, %land.lhs.true6 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i64 @Perl_sv_iv(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 65536
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %1, i64 24
  %2 = bitcast i8* %xuv_uv to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  br label %return

if.end6:                                          ; preds = %entry
  %call = tail call i64 @Perl_sv_2iv(%struct.sv* %sv) #7
  br label %return

return:                                           ; preds = %if.then, %if.end6
  %retval.0 = phi i64 [ %call, %if.end6 ], [ %3, %if.then ]
  ret i64 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i64 @Perl_sv_uv(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 65536
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end6, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %1, i64 24
  %2 = bitcast i8* %xuv_uv to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  br label %return

if.end6:                                          ; preds = %entry
  %call = tail call i64 @Perl_sv_2uv(%struct.sv* %sv) #7
  br label %return

return:                                           ; preds = %if.then, %if.end6
  %retval.0 = phi i64 [ %call, %if.end6 ], [ %3, %if.then ]
  ret i64 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define double @Perl_sv_nv(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 131072
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %1, i64 32
  %2 = bitcast i8* %xnv_nv to double*
  %3 = load double* %2, align 8, !tbaa !6
  br label %return

if.end:                                           ; preds = %entry
  %call = tail call double @Perl_sv_2nv(%struct.sv* %sv) #7
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi double [ %3, %if.then ], [ %call, %if.end ]
  ret double %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pv(%struct.sv* %sv) #0 {
entry:
  %n_a = alloca i64, align 8
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %1 to i8**
  %2 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %return

if.end:                                           ; preds = %entry
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %n_a, i32 2) #7
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i8* [ %2, %if.then ], [ %call, %if.end ]
  ret i8* %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvn(%struct.sv* %sv, i64* nocapture %lp) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %lp, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %return

if.end:                                           ; preds = %entry
  %call = tail call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %lp, i32 2) #7
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i8* [ %4, %if.then ], [ %call, %if.end ]
  ret i8* %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvn_nomg(%struct.sv* %sv, i64* nocapture %lp) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %2 = bitcast i8* %xpv_cur to i64*
  %3 = load i64* %2, align 8, !tbaa !5
  store i64 %3, i64* %lp, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %1 to i8**
  %4 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %return

if.end:                                           ; preds = %entry
  %call = tail call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %lp, i32 0) #7
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i8* [ %4, %if.then ], [ %call, %if.end ]
  ret i8* %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvn_force(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %call = tail call i8* @Perl_sv_pvn_force_flags(%struct.sv* %sv, i64* %lp, i32 2) #7
  ret i8* %call
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvbyte(%struct.sv* %sv) #0 {
entry:
  %n_a.i = alloca i64, align 8
  %call = call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %sv, i8 signext 0) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %1 to i8**
  %2 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = bitcast i64* %n_a.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #3
  %call.i = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %n_a.i, i32 2) #8
  call void @llvm.lifetime.end(i64 8, i8* %3) #3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ %call.i, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvbyten(%struct.sv* %sv, i64* nocapture %lp) #0 {
entry:
  %call = tail call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %sv, i8 signext 0) #7
  %call1 = tail call i8* @Perl_sv_pvn(%struct.sv* %sv, i64* %lp) #7
  ret i8* %call1
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvbyten_force(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %call = tail call i8* @Perl_sv_pvn_force_flags(%struct.sv* %sv, i64* %lp, i32 2) #7
  %call1 = tail call signext i8 @Perl_sv_utf8_downgrade(%struct.sv* %sv, i8 signext 0) #7
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %0 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %0, i64 8
  %1 = bitcast i8* %xpv_cur to i64*
  %2 = load i64* %1, align 8, !tbaa !5
  store i64 %2, i64* %lp, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %0 to i8**
  %3 = load i8** %xpv_pv, align 8, !tbaa !0
  ret i8* %3
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvutf8(%struct.sv* %sv) #0 {
entry:
  %n_a.i = alloca i64, align 8
  %call = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 2) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %1 to i8**
  %2 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = bitcast i64* %n_a.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %3) #3
  %call.i = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %n_a.i, i32 2) #8
  call void @llvm.lifetime.end(i64 8, i8* %3) #3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ %call.i, %cond.false ]
  ret i8* %cond
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvutf8n(%struct.sv* %sv, i64* nocapture %lp) #0 {
entry:
  %call = tail call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 2) #7
  %call1 = tail call i8* @Perl_sv_pvn(%struct.sv* %sv, i64* %lp) #7
  ret i8* %call1
}

; Function Attrs: nounwind optsize uwtable
define i8* @Perl_sv_pvutf8n_force(%struct.sv* %sv, i64* %lp) #0 {
entry:
  %call = tail call i8* @Perl_sv_pvn_force_flags(%struct.sv* %sv, i64* %lp, i32 2) #7
  %call1 = tail call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 2) #7
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %0 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %0, i64 8
  %1 = bitcast i8* %xpv_cur to i64*
  %2 = load i64* %1, align 8, !tbaa !5
  store i64 %2, i64* %lp, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %0 to i8**
  %3 = load i8** %xpv_pv, align 8, !tbaa !0
  ret i8* %3
}

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_sv_isobject(%struct.sv* %sv) #0 {
entry:
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @Perl_mg_get(%struct.sv* %sv) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then2
  %1 = phi i32 [ %0, %if.end ], [ %.pre, %if.then2 ]
  %and5 = and i32 %1, 524288
  %tobool6 = icmp eq i32 %and5, 0
  br i1 %tobool6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end3
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %2 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %2 to %struct.sv**
  %3 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_flags9 = getelementptr inbounds %struct.sv* %3, i64 0, i32 2
  %4 = load i32* %sv_flags9, align 4, !tbaa !3
  %and10 = lshr i32 %4, 12
  %and10.lobit = and i32 %and10, 1
  br label %return

return:                                           ; preds = %if.end8, %if.end3, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %if.end3 ], [ %and10.lobit, %if.end8 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind optsize uwtable
define i32 @Perl_sv_isa(%struct.sv* %sv, i8* nocapture %name) #0 {
entry:
  %tobool = icmp eq %struct.sv* %sv, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 8192
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @Perl_mg_get(%struct.sv* %sv) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end3

if.end3:                                          ; preds = %if.end, %if.then2
  %1 = phi i32 [ %0, %if.end ], [ %.pre, %if.then2 ]
  %and5 = and i32 %1, 524288
  %tobool6 = icmp eq i32 %and5, 0
  br i1 %tobool6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end3
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %2 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %2 to %struct.sv**
  %3 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_flags9 = getelementptr inbounds %struct.sv* %3, i64 0, i32 2
  %4 = load i32* %sv_flags9, align 4, !tbaa !3
  %and10 = and i32 %4, 4096
  %tobool11 = icmp eq i32 %and10, 0
  br i1 %tobool11, label %return, label %if.end13

if.end13:                                         ; preds = %if.end8
  %sv_any14 = getelementptr inbounds %struct.sv* %3, i64 0, i32 0
  %5 = load i8** %sv_any14, align 8, !tbaa !0
  %xmg_stash = getelementptr inbounds i8* %5, i64 48
  %6 = bitcast i8* %xmg_stash to %struct.hv**
  %7 = load %struct.hv** %6, align 8, !tbaa !0
  %sv_any15 = getelementptr inbounds %struct.hv* %7, i64 0, i32 0
  %8 = load %struct.xpvhv** %sv_any15, align 8, !tbaa !0
  %xhv_name = getelementptr inbounds %struct.xpvhv* %8, i64 0, i32 10
  %9 = load i8** %xhv_name, align 8, !tbaa !0
  %tobool16 = icmp eq i8* %9, null
  br i1 %tobool16, label %return, label %if.end18

if.end18:                                         ; preds = %if.end13
  %call23 = tail call i32 @strcmp(i8* %9, i8* %name) #8
  %lnot = icmp eq i32 %call23, 0
  %lnot.ext = zext i1 %lnot to i32
  br label %return

return:                                           ; preds = %if.end13, %if.end8, %if.end3, %entry, %if.end18
  %retval.0 = phi i32 [ %lnot.ext, %if.end18 ], [ 0, %entry ], [ 0, %if.end3 ], [ 0, %if.end8 ], [ 0, %if.end13 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind optsize readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #6

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_newSVrv(%struct.sv* %rv, i8* %classname) #0 {
entry:
  %0 = load %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %0, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %2 = bitcast i8* %1 to %struct.sv*
  store %struct.sv* %2, %struct.sv** @PL_sv_root, align 8, !tbaa !0
  %3 = load i32* @PL_sv_count, align 4, !tbaa !3
  %inc = add nsw i32 %3, 1
  store i32 %inc, i32* @PL_sv_count, align 4, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call = tail call fastcc %struct.sv* @S_more_sv() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %sv.0 = phi %struct.sv* [ %0, %if.then ], [ %call, %if.else ]
  %sv_any1 = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 0
  store i8* null, i8** %sv_any1, align 8, !tbaa !0
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 1
  store i32 1, i32* %sv_refcnt, align 4, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %sv.0, i64 0, i32 2
  store i32 0, i32* %sv_flags, align 4, !tbaa !3
  %sv_flags2 = getelementptr inbounds %struct.sv* %rv, i64 0, i32 2
  %4 = load i32* %sv_flags2, align 4, !tbaa !3
  %and = and i32 %4, 9961472
  %tobool3 = icmp eq i32 %and, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %rv, i32 0) #8
  %.pre = load i32* %sv_flags2, align 4, !tbaa !3
  br label %if.end5

if.end5:                                          ; preds = %if.end, %if.then4
  %5 = phi i32 [ %4, %if.end ], [ %.pre, %if.then4 ]
  %and7 = and i32 %5, -268435457
  store i32 %and7, i32* %sv_flags2, align 4, !tbaa !3
  %and9 = and i32 %5, 255
  %cmp = icmp ugt i32 %and9, 6
  br i1 %cmp, label %if.end15.thread, label %if.end15

if.end15.thread:                                  ; preds = %if.end5
  %sv_refcnt11 = getelementptr inbounds %struct.sv* %rv, i64 0, i32 1
  %6 = load i32* %sv_refcnt11, align 4, !tbaa !3
  store i32 0, i32* %sv_refcnt11, align 4, !tbaa !3
  tail call void @Perl_sv_clear(%struct.sv* %rv) #7
  store i32 0, i32* %sv_flags2, align 4, !tbaa !3
  store i32 %6, i32* %sv_refcnt11, align 4, !tbaa !3
  br label %if.then19

if.end15:                                         ; preds = %if.end5
  %and17 = and i32 %5, 255
  %cmp18 = icmp ult i32 %and17, 3
  br i1 %cmp18, label %if.then19, label %if.else21

if.then19:                                        ; preds = %if.end15.thread, %if.end15
  %call20 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %rv, i32 3) #7
  br label %if.end43

if.else21:                                        ; preds = %if.end15
  %cmp24 = icmp ugt i32 %and17, 3
  br i1 %cmp24, label %if.then25, label %if.end43

if.then25:                                        ; preds = %if.else21
  %and27 = and i32 %5, 2097152
  %tobool28 = icmp eq i32 %and27, 0
  br i1 %tobool28, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then25
  %call29 = tail call i32 @Perl_sv_backoff(%struct.sv* %rv) #7
  br label %land.end

land.end:                                         ; preds = %if.then25, %land.rhs
  %sv_any31 = getelementptr inbounds %struct.sv* %rv, i64 0, i32 0
  %7 = load i8** %sv_any31, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %7 to i8**
  %8 = load i8** %xpv_pv, align 8, !tbaa !0
  %tobool32 = icmp eq i8* %8, null
  br i1 %tobool32, label %if.end38, label %land.lhs.true

land.lhs.true:                                    ; preds = %land.end
  %xpv_len = getelementptr inbounds i8* %7, i64 16
  %9 = bitcast i8* %xpv_len to i64*
  %10 = load i64* %9, align 8, !tbaa !5
  %tobool34 = icmp eq i64 %10, 0
  br i1 %tobool34, label %if.end38, label %if.then35

if.then35:                                        ; preds = %land.lhs.true
  tail call void @Perl_safesysfree(i8* %8) #8
  %.pre91 = load i8** %sv_any31, align 8, !tbaa !0
  br label %if.end38

if.end38:                                         ; preds = %land.lhs.true, %land.end, %if.then35
  %11 = phi i8* [ %7, %land.lhs.true ], [ %7, %land.end ], [ %.pre91, %if.then35 ]
  %xpv_cur = getelementptr inbounds i8* %11, i64 8
  call void @llvm.memset.p0i8.i64(i8* %xpv_cur, i8 0, i64 16, i32 8, i1 false)
  br label %if.end43

if.end43:                                         ; preds = %if.else21, %if.end38, %if.then19
  %12 = load i32* %sv_flags2, align 4, !tbaa !3
  %and45 = and i32 %12, 1223753727
  store i32 %and45, i32* %sv_flags2, align 4, !tbaa !3
  %and47 = and i32 %12, 2097152
  %tobool48 = icmp eq i32 %and47, 0
  br i1 %tobool48, label %land.end52, label %land.rhs49

land.rhs49:                                       ; preds = %if.end43
  %call50 = tail call i32 @Perl_sv_backoff(%struct.sv* %rv) #7
  %.pre90 = load i32* %sv_flags2, align 4, !tbaa !3
  br label %land.end52

land.end52:                                       ; preds = %if.end43, %land.rhs49
  %13 = phi i32 [ %.pre90, %land.rhs49 ], [ %and45, %if.end43 ]
  %sv_any54 = getelementptr inbounds %struct.sv* %rv, i64 0, i32 0
  %14 = load i8** %sv_any54, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %14 to %struct.sv**
  store %struct.sv* %sv.0, %struct.sv** %xrv_rv, align 8, !tbaa !0
  %or = or i32 %13, 524288
  store i32 %or, i32* %sv_flags2, align 4, !tbaa !3
  %tobool56 = icmp eq i8* %classname, null
  br i1 %tobool56, label %if.end60, label %if.then57

if.then57:                                        ; preds = %land.end52
  %call58 = tail call %struct.hv* @Perl_gv_stashpv(i8* %classname, i32 1) #8
  %call59 = tail call %struct.sv* @Perl_sv_bless(%struct.sv* %rv, %struct.hv* %call58) #7
  br label %if.end60

if.end60:                                         ; preds = %land.end52, %if.then57
  ret %struct.sv* %sv.0
}

; Function Attrs: optsize
declare %struct.hv* @Perl_gv_stashpv(i8*, i32) #2

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_bless(%struct.sv* %sv, %struct.hv* %stash) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 524288
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([32 x i8]* @.str57, i64 0, i64 0)) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %1 to %struct.sv**
  %2 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_flags1 = getelementptr inbounds %struct.sv* %2, i64 0, i32 2
  %3 = load i32* %sv_flags1, align 4, !tbaa !3
  %and2 = and i32 %3, 8392704
  %tobool3 = icmp eq i32 %and2, 0
  br i1 %tobool3, label %if.end20, label %if.then4

if.then4:                                         ; preds = %if.end
  %and6 = and i32 %3, 8388608
  %tobool7 = icmp eq i32 %and6, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.then4
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([0 x i8]* @PL_no_modify, i64 0, i64 0)) #8
  %.pre77 = load i32* %sv_flags1, align 4, !tbaa !3
  br label %if.end9

if.end9:                                          ; preds = %if.then4, %if.then8
  %4 = phi i32 [ %3, %if.then4 ], [ %.pre77, %if.then8 ]
  %and11 = and i32 %4, 4096
  %tobool12 = icmp eq i32 %and11, 0
  br i1 %tobool12, label %if.end20, label %if.then13

if.then13:                                        ; preds = %if.end9
  %and15 = and i32 %4, 255
  %cmp = icmp eq i32 %and15, 15
  br i1 %cmp, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.then13
  %5 = load i32* @PL_sv_objcount, align 4, !tbaa !3
  %dec = add nsw i32 %5, -1
  store i32 %dec, i32* @PL_sv_objcount, align 4, !tbaa !3
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.then16
  %sv_any18 = getelementptr inbounds %struct.sv* %2, i64 0, i32 0
  %6 = load i8** %sv_any18, align 8, !tbaa !0
  %xmg_stash = getelementptr inbounds i8* %6, i64 48
  %7 = bitcast i8* %xmg_stash to %struct.hv**
  %8 = load %struct.hv** %7, align 8, !tbaa !0
  %9 = bitcast %struct.hv* %8 to %struct.sv*
  tail call void @Perl_sv_free(%struct.sv* %9) #7
  %.pre = load i32* %sv_flags1, align 4, !tbaa !3
  br label %if.end20

if.end20:                                         ; preds = %if.end9, %if.end, %if.end17
  %10 = phi i32 [ %4, %if.end9 ], [ %3, %if.end ], [ %.pre, %if.end17 ]
  %or = or i32 %10, 4096
  store i32 %or, i32* %sv_flags1, align 4, !tbaa !3
  %and23 = and i32 %10, 255
  %cmp24 = icmp eq i32 %and23, 15
  br i1 %cmp24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %if.end20
  %11 = load i32* @PL_sv_objcount, align 4, !tbaa !3
  %inc = add nsw i32 %11, 1
  store i32 %inc, i32* @PL_sv_objcount, align 4, !tbaa !3
  %.pre76 = load i32* %sv_flags1, align 4, !tbaa !3
  br label %if.end26

if.end26:                                         ; preds = %if.end20, %if.then25
  %12 = phi i32 [ %or, %if.end20 ], [ %.pre76, %if.then25 ]
  %and28 = and i32 %12, 255
  %cmp29 = icmp ugt i32 %and28, 6
  br i1 %cmp29, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end26
  %call = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %2, i32 7) #7
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end26
  %13 = bitcast %struct.hv* %stash to %struct.sv*
  store %struct.sv* %13, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %tobool31 = icmp eq %struct.hv* %stash, null
  br i1 %tobool31, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %lor.end
  %14 = getelementptr inbounds %struct.hv* %stash, i64 0, i32 1
  %15 = load i32* %14, align 4, !tbaa !3
  %inc32 = add i32 %15, 1
  store i32 %inc32, i32* %14, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %lor.end, %land.rhs
  %sv_any34 = getelementptr inbounds %struct.sv* %2, i64 0, i32 0
  %16 = load i8** %sv_any34, align 8, !tbaa !0
  %xmg_stash35 = getelementptr inbounds i8* %16, i64 48
  %17 = bitcast i8* %xmg_stash35 to %struct.hv**
  store %struct.hv* %stash, %struct.hv** %17, align 8, !tbaa !0
  %18 = load i64* @PL_amagic_generation, align 8, !tbaa !5
  %tobool36 = icmp eq i64 %18, 0
  br i1 %tobool36, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %land.end
  %call37 = tail call signext i8 @Perl_Gv_AMupdate(%struct.hv* %stash) #8
  %tobool39 = icmp eq i8 %call37, 0
  br i1 %tobool39, label %if.else, label %if.then40

if.then40:                                        ; preds = %land.lhs.true
  %19 = load i32* %sv_flags, align 4, !tbaa !3
  %or42 = or i32 %19, 268435456
  br label %if.end45

if.else:                                          ; preds = %land.lhs.true, %land.end
  %20 = load i32* %sv_flags, align 4, !tbaa !3
  %and44 = and i32 %20, -268435457
  br label %if.end45

if.end45:                                         ; preds = %if.else, %if.then40
  %storemerge = phi i32 [ %and44, %if.else ], [ %or42, %if.then40 ]
  store i32 %storemerge, i32* %sv_flags, align 4, !tbaa !3
  %21 = load i32* %sv_flags1, align 4, !tbaa !3
  %and47 = and i32 %21, 16384
  %tobool48 = icmp eq i32 %and47, 0
  br i1 %tobool48, label %if.end57, label %if.then49

if.then49:                                        ; preds = %if.end45
  %call50 = tail call %struct.magic* @Perl_mg_find(%struct.sv* %2, i32 126) #8
  %tobool51 = icmp eq %struct.magic* %call50, null
  br i1 %tobool51, label %lor.lhs.false, label %if.then54

lor.lhs.false:                                    ; preds = %if.then49
  %call52 = tail call %struct.magic* @Perl_mg_find(%struct.sv* %2, i32 85) #8
  %tobool53 = icmp eq %struct.magic* %call52, null
  br i1 %tobool53, label %if.end57, label %if.then54

if.then54:                                        ; preds = %lor.lhs.false, %if.then49
  %call55 = tail call i32 @Perl_mg_set(%struct.sv* %2) #8
  br label %if.end57

if.end57:                                         ; preds = %lor.lhs.false, %if.end45, %if.then54
  ret %struct.sv* %sv
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_setref_pv(%struct.sv* %rv, i8* %classname, i8* %pv) #0 {
entry:
  %tobool = icmp eq i8* %pv, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_setsv_flags(%struct.sv* %rv, %struct.sv* @PL_sv_undef, i32 2) #7
  %sv_flags = getelementptr inbounds %struct.sv* %rv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %if.end4, label %if.then2

if.then2:                                         ; preds = %if.then
  %call = tail call i32 @Perl_mg_set(%struct.sv* %rv) #8
  br label %if.end4

if.else:                                          ; preds = %entry
  %call3 = tail call %struct.sv* @Perl_newSVrv(%struct.sv* %rv, i8* %classname) #7
  %1 = ptrtoint i8* %pv to i64
  tail call void @Perl_sv_setiv(%struct.sv* %call3, i64 %1) #7
  br label %if.end4

if.end4:                                          ; preds = %if.then, %if.then2, %if.else
  ret %struct.sv* %rv
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_setref_iv(%struct.sv* %rv, i8* %classname, i64 %iv) #0 {
entry:
  %call = tail call %struct.sv* @Perl_newSVrv(%struct.sv* %rv, i8* %classname) #7
  tail call void @Perl_sv_setiv(%struct.sv* %call, i64 %iv) #7
  ret %struct.sv* %rv
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_setref_uv(%struct.sv* %rv, i8* %classname, i64 %uv) #0 {
entry:
  %call = tail call %struct.sv* @Perl_newSVrv(%struct.sv* %rv, i8* %classname) #7
  tail call void @Perl_sv_setuv(%struct.sv* %call, i64 %uv) #7
  ret %struct.sv* %rv
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_setref_nv(%struct.sv* %rv, i8* %classname, double %nv) #0 {
entry:
  %call = tail call %struct.sv* @Perl_newSVrv(%struct.sv* %rv, i8* %classname) #7
  tail call void @Perl_sv_setnv(%struct.sv* %call, double %nv) #7
  ret %struct.sv* %rv
}

; Function Attrs: nounwind optsize uwtable
define %struct.sv* @Perl_sv_setref_pvn(%struct.sv* %rv, i8* %classname, i8* %pv, i64 %n) #0 {
entry:
  %call = tail call %struct.sv* @Perl_newSVrv(%struct.sv* %rv, i8* %classname) #7
  tail call void @Perl_sv_setpvn(%struct.sv* %call, i8* %pv, i64 %n) #7
  ret %struct.sv* %rv
}

; Function Attrs: optsize
declare signext i8 @Perl_Gv_AMupdate(%struct.hv*) #2

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_untaint(%struct.sv* %sv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 255
  %cmp = icmp ugt i32 %and, 6
  br i1 %cmp, label %land.lhs.true, label %if.end4

land.lhs.true:                                    ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xmg_magic = getelementptr inbounds i8* %1, i64 40
  %2 = bitcast i8* %xmg_magic to %struct.magic**
  %3 = load %struct.magic** %2, align 8, !tbaa !0
  %tobool = icmp eq %struct.magic* %3, null
  br i1 %tobool, label %if.end4, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call = tail call %struct.magic* @Perl_mg_find(%struct.sv* %sv, i32 116) #8
  %tobool1 = icmp eq %struct.magic* %call, null
  br i1 %tobool1, label %if.end4, label %if.then2

if.then2:                                         ; preds = %if.then
  %mg_len = getelementptr inbounds %struct.magic* %call, i64 0, i32 7
  %4 = load i32* %mg_len, align 4, !tbaa !3
  %and3 = and i32 %4, -2
  store i32 %and3, i32* %mg_len, align 4, !tbaa !3
  br label %if.end4

if.end4:                                          ; preds = %if.then, %land.lhs.true, %if.then2, %entry
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setpviv(%struct.sv* %sv, i64 %iv) #0 {
entry:
  %buf = alloca [22 x i8], align 16
  %add.ptr.i = getelementptr inbounds [22 x i8]* %buf, i64 0, i64 22
  %cmp.i = icmp sgt i64 %iv, -1
  %sub.i = sub nsw i64 0, %iv
  %iv.sub.i = select i1 %cmp.i, i64 %iv, i64 %sub.i
  br label %do.body.i

do.body.i:                                        ; preds = %do.body.i, %entry
  %ptr.0.i = phi i8* [ %incdec.ptr.i, %do.body.i ], [ %add.ptr.i, %entry ]
  %uv.addr.0.i = phi i64 [ %div.i, %do.body.i ], [ %iv.sub.i, %entry ]
  %rem.i = urem i64 %uv.addr.0.i, 10
  %conv.i = trunc i64 %rem.i to i8
  %add17.i = or i8 %conv.i, 48
  %incdec.ptr.i = getelementptr inbounds i8* %ptr.0.i, i64 -1
  store i8 %add17.i, i8* %incdec.ptr.i, align 1, !tbaa !1
  %div.i = udiv i64 %uv.addr.0.i, 10
  %0 = icmp ugt i64 %uv.addr.0.i, 9
  br i1 %0, label %do.body.i, label %do.end.i

do.end.i:                                         ; preds = %do.body.i
  br i1 %cmp.i, label %uiv_2buf.exit, label %if.then8.i

if.then8.i:                                       ; preds = %do.end.i
  %incdec.ptr9.i = getelementptr inbounds i8* %ptr.0.i, i64 -2
  store i8 45, i8* %incdec.ptr9.i, align 1, !tbaa !1
  br label %uiv_2buf.exit

uiv_2buf.exit:                                    ; preds = %do.end.i, %if.then8.i
  %ptr.1.i = phi i8* [ %incdec.ptr9.i, %if.then8.i ], [ %incdec.ptr.i, %do.end.i ]
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr.i to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %ptr.1.i to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @Perl_sv_setpvn(%struct.sv* %sv, i8* %ptr.1.i, i64 %sub.ptr.sub) #7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setpviv_mg(%struct.sv* %sv, i64 %iv) #0 {
entry:
  %buf = alloca [22 x i8], align 16
  %add.ptr.i = getelementptr inbounds [22 x i8]* %buf, i64 0, i64 22
  %cmp.i = icmp sgt i64 %iv, -1
  %sub.i = sub nsw i64 0, %iv
  %iv.sub.i = select i1 %cmp.i, i64 %iv, i64 %sub.i
  br label %do.body.i

do.body.i:                                        ; preds = %do.body.i, %entry
  %ptr.0.i = phi i8* [ %incdec.ptr.i, %do.body.i ], [ %add.ptr.i, %entry ]
  %uv.addr.0.i = phi i64 [ %div.i, %do.body.i ], [ %iv.sub.i, %entry ]
  %rem.i = urem i64 %uv.addr.0.i, 10
  %conv.i = trunc i64 %rem.i to i8
  %add17.i = or i8 %conv.i, 48
  %incdec.ptr.i = getelementptr inbounds i8* %ptr.0.i, i64 -1
  store i8 %add17.i, i8* %incdec.ptr.i, align 1, !tbaa !1
  %div.i = udiv i64 %uv.addr.0.i, 10
  %0 = icmp ugt i64 %uv.addr.0.i, 9
  br i1 %0, label %do.body.i, label %do.end.i

do.end.i:                                         ; preds = %do.body.i
  br i1 %cmp.i, label %uiv_2buf.exit, label %if.then8.i

if.then8.i:                                       ; preds = %do.end.i
  %incdec.ptr9.i = getelementptr inbounds i8* %ptr.0.i, i64 -2
  store i8 45, i8* %incdec.ptr9.i, align 1, !tbaa !1
  br label %uiv_2buf.exit

uiv_2buf.exit:                                    ; preds = %do.end.i, %if.then8.i
  %ptr.1.i = phi i8* [ %incdec.ptr9.i, %if.then8.i ], [ %incdec.ptr.i, %do.end.i ]
  %sub.ptr.lhs.cast = ptrtoint i8* %add.ptr.i to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %ptr.1.i to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @Perl_sv_setpvn(%struct.sv* %sv, i8* %ptr.1.i, i64 %sub.ptr.sub) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %1, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %uiv_2buf.exit
  %call1 = call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %uiv_2buf.exit, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_vsetpvf(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %call = tail call i64 @strlen(i8* %pat) #8
  tail call void @Perl_sv_setpvn(%struct.sv* %sv, i8* getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), i64 0) #8
  tail call void @Perl_sv_vcatpvfn(%struct.sv* %sv, i8* %pat, i64 %call, [1 x %struct.__va_list_tag]* %args, %struct.sv** null, i32 0, i8* undef) #8
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_setpvf_mg(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %args to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  call void @Perl_sv_vsetpvf_mg(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #7
  call void @llvm.va_end(i8* %arraydecay1)
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_vsetpvf_mg(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %call = tail call i64 @strlen(i8* %pat) #8
  tail call void @Perl_sv_setpvn(%struct.sv* %sv, i8* getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), i64 0) #8
  tail call void @Perl_sv_vcatpvfn(%struct.sv* %sv, i8* %pat, i64 %call, [1 x %struct.__va_list_tag]* %args, %struct.sv** null, i32 0, i8* undef) #8
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catpvf(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %args to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %call.i = call i64 @strlen(i8* %pat) #8
  call void @Perl_sv_vcatpvfn(%struct.sv* %sv, i8* %pat, i64 %call.i, [1 x %struct.__va_list_tag]* %args, %struct.sv** null, i32 0, i8* undef) #8
  call void @llvm.va_end(i8* %arraydecay1)
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_vcatpvf(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %call = tail call i64 @strlen(i8* %pat) #8
  tail call void @Perl_sv_vcatpvfn(%struct.sv* %sv, i8* %pat, i64 %call, [1 x %struct.__va_list_tag]* %args, %struct.sv** null, i32 0, i8* undef) #7
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_vcatpvfn(%struct.sv* %sv, i8* %pat, i64 %patlen, [1 x %struct.__va_list_tag]* %args, %struct.sv** nocapture %svargs, i32 %svmax, i8* nocapture %maybe_tainted) #0 {
entry:
  %q = alloca i8*, align 8
  %origlen = alloca i64, align 8
  %ebuf = alloca [127 x i8], align 16
  %l = alloca i64, align 8
  %esignbuf = alloca [4 x i8], align 1
  %utf8buf = alloca [14 x i8], align 1
  %elen = alloca i64, align 8
  %veclen = alloca i64, align 8
  %c = alloca i8, align 1
  %i = alloca i32, align 4
  %dotstrlen = alloca i64, align 8
  %p760 = alloca i32, align 4
  %ulen = alloca i64, align 8
  %ulen985 = alloca i64, align 8
  %0 = getelementptr inbounds [127 x i8]* %ebuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 127, i8* %0) #3
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %1, 536870912
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %entry
  %2 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private = getelementptr inbounds %struct.cop* %2, i64 0, i32 7
  %3 = load i8* %op_private, align 1, !tbaa !1
  %and1 = and i8 %3, 8
  %lnot = icmp eq i8 %and1, 0
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %4 = phi i32 [ %1, %entry ], [ %.pre, %land.rhs ]
  %5 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %conv3 = zext i1 %5 to i8
  %and5 = and i32 %4, 10223616
  %cmp = icmp eq i32 %and5, 262144
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.end
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %6 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %6, i64 8
  %7 = bitcast i8* %xpv_cur to i64*
  %8 = load i64* %7, align 8, !tbaa !5
  store i64 %8, i64* %origlen, align 8, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %land.end
  %call = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %sv, i64* %origlen, i32 2) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  switch i64 %patlen, label %if.end69 [
    i64 0, label %cleanup
    i64 2, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %cond.end
  %9 = load i8* %pat, align 1, !tbaa !1
  %cmp13 = icmp eq i8 %9, 37
  br i1 %cmp13, label %if.then15, label %if.end167

if.then15:                                        ; preds = %land.lhs.true
  %arrayidx16 = getelementptr inbounds i8* %pat, i64 1
  %10 = load i8* %arrayidx16, align 1, !tbaa !1
  %conv17 = sext i8 %10 to i32
  switch i32 %conv17, label %if.end69 [
    i32 115, label %sw.bb
    i32 95, label %sw.bb41
  ]

sw.bb:                                            ; preds = %if.then15
  %tobool18 = icmp eq [1 x %struct.__va_list_tag]* %args, null
  br i1 %tobool18, label %if.else, label %if.then19

if.then19:                                        ; preds = %sw.bb
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 0
  %gp_offset = load i32* %gp_offset_p, align 4
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %if.then19
  %11 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 3
  %reg_save_area = load i8** %11, align 8
  %12 = sext i32 %gp_offset to i64
  %13 = getelementptr i8* %reg_save_area, i64 %12
  %14 = add i32 %gp_offset, 8
  store i32 %14, i32* %gp_offset_p, align 4
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %if.then19
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 2
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %13, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to i8**
  %15 = load i8** %vaarg.addr, align 8
  %tobool20 = icmp ne i8* %15, null
  %cond24 = select i1 %tobool20, i8* %15, i8* getelementptr inbounds ([7 x i8]* @Perl_sv_vcatpvfn.nullstr, i64 0, i64 0)
  call void @Perl_sv_catpv(%struct.sv* %sv, i8* %cond24) #7
  br label %cleanup

if.else:                                          ; preds = %sw.bb
  %cmp25 = icmp sgt i32 %svmax, 0
  br i1 %cmp25, label %if.then27, label %cleanup

if.then27:                                        ; preds = %if.else
  %16 = load %struct.sv** %svargs, align 8, !tbaa !0
  call void @Perl_sv_catsv_flags(%struct.sv* %sv, %struct.sv* %16, i32 2) #7
  %17 = load %struct.sv** %svargs, align 8, !tbaa !0
  %sv_flags28 = getelementptr inbounds %struct.sv* %17, i64 0, i32 2
  %18 = load i32* %sv_flags28, align 4, !tbaa !3
  %and29 = and i32 %18, 536870912
  %tobool30 = icmp eq i32 %and29, 0
  br i1 %tobool30, label %cleanup, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %if.then27
  %19 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private32 = getelementptr inbounds %struct.cop* %19, i64 0, i32 7
  %20 = load i8* %op_private32, align 1, !tbaa !1
  %and34 = and i8 %20, 8
  %tobool35 = icmp eq i8 %and34, 0
  br i1 %tobool35, label %if.then36, label %cleanup

if.then36:                                        ; preds = %land.lhs.true31
  %21 = load i32* %sv_flags, align 4, !tbaa !3
  %or = or i32 %21, 536870912
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  br label %cleanup

sw.bb41:                                          ; preds = %if.then15
  %tobool42 = icmp eq [1 x %struct.__va_list_tag]* %args, null
  br i1 %tobool42, label %if.end69, label %if.then43

if.then43:                                        ; preds = %sw.bb41
  %gp_offset_p45 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 0
  %gp_offset46 = load i32* %gp_offset_p45, align 4
  %fits_in_gp47 = icmp ult i32 %gp_offset46, 41
  br i1 %fits_in_gp47, label %vaarg.in_reg48, label %vaarg.in_mem50

vaarg.in_reg48:                                   ; preds = %if.then43
  %22 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 3
  %reg_save_area49 = load i8** %22, align 8
  %23 = sext i32 %gp_offset46 to i64
  %24 = getelementptr i8* %reg_save_area49, i64 %23
  %25 = add i32 %gp_offset46, 8
  store i32 %25, i32* %gp_offset_p45, align 4
  br label %vaarg.end54

vaarg.in_mem50:                                   ; preds = %if.then43
  %overflow_arg_area_p51 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 2
  %overflow_arg_area52 = load i8** %overflow_arg_area_p51, align 8
  %overflow_arg_area.next53 = getelementptr i8* %overflow_arg_area52, i64 8
  store i8* %overflow_arg_area.next53, i8** %overflow_arg_area_p51, align 8
  br label %vaarg.end54

vaarg.end54:                                      ; preds = %vaarg.in_mem50, %vaarg.in_reg48
  %vaarg.addr55.in = phi i8* [ %24, %vaarg.in_reg48 ], [ %overflow_arg_area52, %vaarg.in_mem50 ]
  %vaarg.addr55 = bitcast i8* %vaarg.addr55.in to %struct.sv**
  %26 = load %struct.sv** %vaarg.addr55, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %sv, %struct.sv* %26, i32 2) #7
  %sv_flags56 = getelementptr inbounds %struct.sv* %26, i64 0, i32 2
  %27 = load i32* %sv_flags56, align 4, !tbaa !3
  %and57 = and i32 %27, 536870912
  %tobool58 = icmp eq i32 %and57, 0
  br i1 %tobool58, label %cleanup, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %vaarg.end54
  %28 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private60 = getelementptr inbounds %struct.cop* %28, i64 0, i32 7
  %29 = load i8* %op_private60, align 1, !tbaa !1
  %and62 = and i8 %29, 8
  %tobool63 = icmp eq i8 %and62, 0
  br i1 %tobool63, label %if.then64, label %cleanup

if.then64:                                        ; preds = %land.lhs.true59
  %30 = load i32* %sv_flags, align 4, !tbaa !3
  %or66 = or i32 %30, 536870912
  store i32 %or66, i32* %sv_flags, align 4, !tbaa !3
  br label %cleanup

if.end69:                                         ; preds = %cond.end, %sw.bb41, %if.then15
  %cmp70 = icmp ult i64 %patlen, 6
  br i1 %cmp70, label %land.lhs.true72, label %if.end167

land.lhs.true72:                                  ; preds = %if.end69
  %.pr2307 = load i8* %pat, align 1, !tbaa !1
  %cmp75 = icmp eq i8 %.pr2307, 37
  br i1 %cmp75, label %land.lhs.true77, label %if.end167

land.lhs.true77:                                  ; preds = %land.lhs.true72
  %arrayidx78 = getelementptr inbounds i8* %pat, i64 1
  %31 = load i8* %arrayidx78, align 1, !tbaa !1
  %cmp80 = icmp eq i8 %31, 46
  br i1 %cmp80, label %land.lhs.true82, label %if.end167

land.lhs.true82:                                  ; preds = %land.lhs.true77
  %sub = add i64 %patlen, -1
  %arrayidx83 = getelementptr inbounds i8* %pat, i64 %sub
  %32 = load i8* %arrayidx83, align 1, !tbaa !1
  %.off = add i8 %32, -102
  %switch = icmp ult i8 %.off, 2
  br i1 %switch, label %if.then92, label %if.end167

if.then92:                                        ; preds = %land.lhs.true82
  %add.ptr = getelementptr inbounds i8* %pat, i64 2
  %33 = load i8* %add.ptr, align 1, !tbaa !1
  %.off23122434 = add i8 %33, -48
  %34 = icmp ult i8 %.off23122434, 10
  br i1 %34, label %while.body, label %while.end

while.body:                                       ; preds = %if.then92, %while.body
  %35 = phi i8 [ %36, %while.body ], [ %33, %if.then92 ]
  %digits.02436 = phi i32 [ %add, %while.body ], [ 0, %if.then92 ]
  %pp.02435 = phi i8* [ %incdec.ptr, %while.body ], [ %add.ptr, %if.then92 ]
  %conv93 = sext i8 %35 to i32
  %mul = mul i32 %digits.02436, 10
  %incdec.ptr = getelementptr inbounds i8* %pp.02435, i64 1
  %sub103 = add i32 %mul, -48
  %add = add i32 %sub103, %conv93
  %36 = load i8* %incdec.ptr, align 1, !tbaa !1
  %.off2312 = add i8 %36, -48
  %37 = icmp ult i8 %.off2312, 10
  br i1 %37, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %if.then92
  %digits.0.lcssa = phi i32 [ 0, %if.then92 ], [ %add, %while.body ]
  %pp.0.lcssa = phi i8* [ %add.ptr, %if.then92 ], [ %incdec.ptr, %while.body ]
  %sub.ptr.lhs.cast = ptrtoint i8* %pp.0.lcssa to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %pat to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub105 = shl i64 %patlen, 32
  %sext2232 = add i64 %sub105, -4294967296
  %conv106 = ashr exact i64 %sext2232, 32
  %cmp107 = icmp eq i64 %sub.ptr.sub, %conv106
  br i1 %cmp107, label %if.then109, label %if.end167

if.then109:                                       ; preds = %while.end
  %tobool110 = icmp eq [1 x %struct.__va_list_tag]* %args, null
  br i1 %tobool110, label %if.else121, label %if.then111

if.then111:                                       ; preds = %if.then109
  %fp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 1
  %fp_offset = load i32* %fp_offset_p, align 4
  %fits_in_fp = icmp ult i32 %fp_offset, 161
  br i1 %fits_in_fp, label %vaarg.in_reg113, label %vaarg.in_mem115

vaarg.in_reg113:                                  ; preds = %if.then111
  %38 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 3
  %reg_save_area114 = load i8** %38, align 8
  %39 = sext i32 %fp_offset to i64
  %40 = getelementptr i8* %reg_save_area114, i64 %39
  %41 = add i32 %fp_offset, 16
  store i32 %41, i32* %fp_offset_p, align 4
  br label %vaarg.end119

vaarg.in_mem115:                                  ; preds = %if.then111
  %overflow_arg_area_p116 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 2
  %overflow_arg_area117 = load i8** %overflow_arg_area_p116, align 8
  %overflow_arg_area.next118 = getelementptr i8* %overflow_arg_area117, i64 8
  store i8* %overflow_arg_area.next118, i8** %overflow_arg_area_p116, align 8
  br label %vaarg.end119

vaarg.end119:                                     ; preds = %vaarg.in_mem115, %vaarg.in_reg113
  %vaarg.addr120.in = phi i8* [ %40, %vaarg.in_reg113 ], [ %overflow_arg_area117, %vaarg.in_mem115 ]
  %vaarg.addr120 = bitcast i8* %vaarg.addr120.in to double*
  %42 = load double* %vaarg.addr120, align 8
  br label %if.end136

if.else121:                                       ; preds = %if.then109
  %cmp122 = icmp sgt i32 %svmax, 0
  br i1 %cmp122, label %if.then124, label %cleanup

if.then124:                                       ; preds = %if.else121
  %43 = load %struct.sv** %svargs, align 8, !tbaa !0
  %sv_flags125 = getelementptr inbounds %struct.sv* %43, i64 0, i32 2
  %44 = load i32* %sv_flags125, align 4, !tbaa !3
  %and126 = and i32 %44, 131072
  %tobool127 = icmp eq i32 %and126, 0
  br i1 %tobool127, label %cond.false130, label %cond.true128

cond.true128:                                     ; preds = %if.then124
  %sv_any129 = getelementptr inbounds %struct.sv* %43, i64 0, i32 0
  %45 = load i8** %sv_any129, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %45, i64 32
  %46 = bitcast i8* %xnv_nv to double*
  %47 = load double* %46, align 8, !tbaa !6
  br label %if.end136

cond.false130:                                    ; preds = %if.then124
  %call131 = call double @Perl_sv_2nv(%struct.sv* %43) #7
  br label %if.end136

if.end136:                                        ; preds = %cond.true128, %cond.false130, %vaarg.end119
  %nv.0 = phi double [ %42, %vaarg.end119 ], [ %47, %cond.true128 ], [ %call131, %cond.false130 ]
  %48 = load i8* %pp.0.lcssa, align 1, !tbaa !1
  %cmp138 = icmp eq i8 %48, 103
  %tobool141 = icmp ne i32 %digits.0.lcssa, 0
  br i1 %cmp138, label %if.then140, label %if.else155

if.then140:                                       ; preds = %if.end136
  %cmp144 = icmp ult i32 %digits.0.lcssa, 102
  %or.cond2233 = and i1 %tobool141, %cmp144
  br i1 %or.cond2233, label %if.then146, label %if.end167

if.then146:                                       ; preds = %if.then140
  %call148 = call i8* @gcvt(double %nv.0, i32 %digits.0.lcssa, i8* %0) #8
  call void @Perl_sv_catpv(%struct.sv* %sv, i8* %0) #7
  %49 = load i8* %0, align 16, !tbaa !1
  %tobool151 = icmp eq i8 %49, 0
  br i1 %tobool151, label %if.end167, label %cleanup

if.else155:                                       ; preds = %if.end136
  br i1 %tobool141, label %if.end167, label %if.then157

if.then157:                                       ; preds = %if.else155
  %add.ptr159 = getelementptr inbounds [127 x i8]* %ebuf, i64 0, i64 127
  %call160 = call fastcc i8* @F0convert(double %nv.0, i8* %add.ptr159, i64* %l) #7
  %tobool161 = icmp eq i8* %call160, null
  br i1 %tobool161, label %if.end167, label %if.then162

if.then162:                                       ; preds = %if.then157
  %50 = load i64* %l, align 8, !tbaa !5
  call void @Perl_sv_catpvn_flags(%struct.sv* %sv, i8* %call160, i64 %50, i32 2) #7
  br label %cleanup

if.end167:                                        ; preds = %land.lhs.true, %land.lhs.true82, %if.then146, %if.then157, %while.end, %if.else155, %if.then140, %land.lhs.true77, %land.lhs.true72, %if.end69
  %tobool168 = icmp ne [1 x %struct.__va_list_tag]* %args, null
  %tobool168.not = xor i1 %tobool168, true
  %cmp170 = icmp sgt i32 %svmax, 0
  %or.cond2234 = and i1 %cmp170, %tobool168.not
  br i1 %or.cond2234, label %land.lhs.true172, label %if.end182

land.lhs.true172:                                 ; preds = %if.end167
  %51 = load %struct.sv** %svargs, align 8, !tbaa !0
  %sv_flags173 = getelementptr inbounds %struct.sv* %51, i64 0, i32 2
  %52 = load i32* %sv_flags173, align 4, !tbaa !3
  %and174 = and i32 %52, 536870912
  %tobool175 = icmp eq i32 %and174, 0
  br i1 %tobool175, label %if.end182, label %land.lhs.true176

land.lhs.true176:                                 ; preds = %land.lhs.true172
  %53 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private177 = getelementptr inbounds %struct.cop* %53, i64 0, i32 7
  %54 = load i8* %op_private177, align 1, !tbaa !1
  %and179 = and i8 %54, 8
  %tobool180 = icmp eq i8 %and179, 0
  %.conv3 = select i1 %tobool180, i8 1, i8 %conv3
  br label %if.end182

if.end182:                                        ; preds = %land.lhs.true176, %if.end167, %land.lhs.true172
  %has_utf8.0 = phi i8 [ %conv3, %if.end167 ], [ %conv3, %land.lhs.true172 ], [ %.conv3, %land.lhs.true176 ]
  %add.ptr183 = getelementptr inbounds i8* %pat, i64 %patlen
  %cmp1842418 = icmp sgt i64 %patlen, 0
  br i1 %cmp1842418, label %for.body.lr.ph, label %cleanup

for.body.lr.ph:                                   ; preds = %if.end182
  %sv_any1566 = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %gp_offset_p533 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 0
  %55 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 3
  %overflow_arg_area_p539 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 2
  %add.ptr1092 = getelementptr inbounds [127 x i8]* %ebuf, i64 0, i64 127
  %arrayidx1148 = getelementptr inbounds [4 x i8]* %esignbuf, i64 0, i64 0
  %arrayidx1150 = getelementptr inbounds [4 x i8]* %esignbuf, i64 0, i64 1
  %arraydecay700 = getelementptr inbounds [14 x i8]* %utf8buf, i64 0, i64 0
  %sub.ptr.rhs.cast704 = ptrtoint [14 x i8]* %utf8buf to i64
  %incdec.ptr1335 = getelementptr inbounds [127 x i8]* %ebuf, i64 0, i64 126
  %incdec.ptr1336 = getelementptr inbounds [127 x i8]* %ebuf, i64 0, i64 125
  %fp_offset_p1210 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i64 0, i64 0, i32 1
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc1824
  %p.02433 = phi i8* [ %pat, %for.body.lr.ph ], [ %415, %for.inc1824 ]
  %svix.02426 = phi i32 [ 0, %for.body.lr.ph ], [ %svix.23, %for.inc1824 ]
  %argsv.02424 = phi %struct.sv* [ null, %for.body.lr.ph ], [ %argsv.7, %for.inc1824 ]
  %has_utf8.12420 = phi i8 [ %has_utf8.0, %for.body.lr.ph ], [ %has_utf8.6, %for.inc1824 ]
  %nsv.02419 = phi %struct.sv* [ null, %for.body.lr.ph ], [ %nsv.3, %for.inc1824 ]
  store i64 0, i64* %elen, align 8, !tbaa !5
  store i64 0, i64* %veclen, align 8, !tbaa !5
  store i8 0, i8* %c, align 1, !tbaa !1
  store i64 1, i64* %dotstrlen, align 8, !tbaa !5
  store i8* %p.02433, i8** %q, align 8, !tbaa !0
  %cmp1882313 = icmp ult i8* %p.02433, %add.ptr183
  br i1 %cmp1882313, label %land.rhs190, label %if.end226

for.cond187:                                      ; preds = %land.rhs190
  store i8* %incdec.ptr197, i8** %q, align 8, !tbaa !0
  %cmp188 = icmp ult i8* %incdec.ptr197, %add.ptr183
  br i1 %cmp188, label %land.rhs190, label %for.end

land.rhs190:                                      ; preds = %for.body, %for.cond187
  %storemerge2314 = phi i8* [ %incdec.ptr197, %for.cond187 ], [ %p.02433, %for.body ]
  %56 = load i8* %storemerge2314, align 1, !tbaa !1
  %cmp192 = icmp eq i8 %56, 37
  %incdec.ptr197 = getelementptr inbounds i8* %storemerge2314, i64 1
  br i1 %cmp192, label %for.end, label %for.cond187

for.end:                                          ; preds = %for.cond187, %land.rhs190
  %57 = phi i8* [ %storemerge2314, %land.rhs190 ], [ %incdec.ptr197, %for.cond187 ]
  %cmp198 = icmp ugt i8* %57, %p.02433
  br i1 %cmp198, label %if.then200, label %if.end226

if.then200:                                       ; preds = %for.end
  %tobool202 = icmp eq i8 %has_utf8.12420, 0
  %brmerge = or i1 %tobool202, %5
  br i1 %brmerge, label %if.else221, label %if.then205

if.then205:                                       ; preds = %if.then200
  %tobool206 = icmp eq %struct.sv* %nsv.02419, null
  %sub.ptr.lhs.cast208 = ptrtoint i8* %57 to i64
  %sub.ptr.rhs.cast209 = ptrtoint i8* %p.02433 to i64
  %sub.ptr.sub210 = sub i64 %sub.ptr.lhs.cast208, %sub.ptr.rhs.cast209
  br i1 %tobool206, label %if.then207, label %if.else213

if.then207:                                       ; preds = %if.then205
  %call211 = call %struct.sv* @Perl_newSVpvn(i8* %p.02433, i64 %sub.ptr.sub210) #7
  %call212 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call211) #7
  br label %if.end217

if.else213:                                       ; preds = %if.then205
  call void @Perl_sv_setpvn(%struct.sv* %nsv.02419, i8* %p.02433, i64 %sub.ptr.sub210) #7
  br label %if.end217

if.end217:                                        ; preds = %if.else213, %if.then207
  %nsv.1 = phi %struct.sv* [ %nsv.02419, %if.else213 ], [ %call212, %if.then207 ]
  %sv_flags218 = getelementptr inbounds %struct.sv* %nsv.1, i64 0, i32 2
  %58 = load i32* %sv_flags218, align 4, !tbaa !3
  %and219 = and i32 %58, -536870913
  store i32 %and219, i32* %sv_flags218, align 4, !tbaa !3
  %call220 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %nsv.1, i32 2) #7
  call void @Perl_sv_catsv_flags(%struct.sv* %sv, %struct.sv* %nsv.1, i32 2) #7
  br label %if.end225

if.else221:                                       ; preds = %if.then200
  %sub.ptr.lhs.cast222 = ptrtoint i8* %57 to i64
  %sub.ptr.rhs.cast223 = ptrtoint i8* %p.02433 to i64
  %sub.ptr.sub224 = sub i64 %sub.ptr.lhs.cast222, %sub.ptr.rhs.cast223
  call void @Perl_sv_catpvn_flags(%struct.sv* %sv, i8* %p.02433, i64 %sub.ptr.sub224, i32 2) #7
  br label %if.end225

if.end225:                                        ; preds = %if.else221, %if.end217
  %nsv.2 = phi %struct.sv* [ %nsv.02419, %if.else221 ], [ %nsv.1, %if.end217 ]
  %59 = load i8** %q, align 8, !tbaa !0
  br label %if.end226

if.end226:                                        ; preds = %for.body, %if.end225, %for.end
  %60 = phi i8* [ %59, %if.end225 ], [ %57, %for.end ], [ %p.02433, %for.body ]
  %nsv.3 = phi %struct.sv* [ %nsv.2, %if.end225 ], [ %nsv.02419, %for.end ], [ %nsv.02419, %for.body ]
  %p.1 = phi i8* [ %59, %if.end225 ], [ %p.02433, %for.end ], [ %p.02433, %for.body ]
  %incdec.ptr227 = getelementptr inbounds i8* %60, i64 1
  store i8* %incdec.ptr227, i8** %q, align 8, !tbaa !0
  %cmp228 = icmp ult i8* %60, %add.ptr183
  br i1 %cmp228, label %if.end231, label %cleanup

if.end231:                                        ; preds = %if.end226
  %call232 = call fastcc i32 @S_expect_number(i8** %q) #7
  %tobool234 = icmp eq i32 %call232, 0
  %.pre2489 = load i8** %q, align 8, !tbaa !0
  br i1 %tobool234, label %while.cond245.preheader, label %if.then235

if.then235:                                       ; preds = %if.end231
  %61 = load i8* %.pre2489, align 1, !tbaa !1
  %cmp237 = icmp eq i8 %61, 36
  br i1 %cmp237, label %if.then239, label %gotwidth

if.then239:                                       ; preds = %if.then235
  %incdec.ptr240 = getelementptr inbounds i8* %.pre2489, i64 1
  store i8* %incdec.ptr240, i8** %q, align 8, !tbaa !0
  br label %while.cond245.preheader

while.cond245.preheader:                          ; preds = %if.end231, %if.then239
  %62 = phi i8* [ %incdec.ptr240, %if.then239 ], [ %.pre2489, %if.end231 ]
  %efix.0.ph = phi i32 [ %call232, %if.then239 ], [ 0, %if.end231 ]
  %63 = load i8* %62, align 1, !tbaa !1
  %tobool2462331236423832409 = icmp eq i8 %63, 0
  br i1 %tobool2462331236423832409, label %tryasterisk.loopexit, label %while.body247.lr.ph.lr.ph.lr.ph

while.body247.lr.ph.lr.ph.lr.ph:                  ; preds = %while.cond245.preheader, %sw.bb255
  %64 = phi i8 [ %77, %sw.bb255 ], [ %63, %while.cond245.preheader ]
  %65 = phi i8* [ %incdec.ptr256, %sw.bb255 ], [ %62, %while.cond245.preheader ]
  %plus.0.ph2413 = phi i8 [ %plus.02332, %sw.bb255 ], [ 0, %while.cond245.preheader ]
  %fill.0.ph2412 = phi i8 [ %fill.0.ph23222365, %sw.bb255 ], [ 32, %while.cond245.preheader ]
  %left.0.ph2411 = phi i8 [ %left.0.ph23172384, %sw.bb255 ], [ 0, %while.cond245.preheader ]
  %alt.0.ph2410 = phi i8 [ 1, %sw.bb255 ], [ 0, %while.cond245.preheader ]
  br label %while.body247.lr.ph.lr.ph

while.body247.lr.ph.lr.ph:                        ; preds = %while.body247.lr.ph.lr.ph.lr.ph, %sw.bb251
  %66 = phi i8 [ %64, %while.body247.lr.ph.lr.ph.lr.ph ], [ %74, %sw.bb251 ]
  %67 = phi i8* [ %65, %while.body247.lr.ph.lr.ph.lr.ph ], [ %incdec.ptr252, %sw.bb251 ]
  %plus.0.ph23192386 = phi i8 [ %plus.0.ph2413, %while.body247.lr.ph.lr.ph.lr.ph ], [ %plus.02332, %sw.bb251 ]
  %fill.0.ph23182385 = phi i8 [ %fill.0.ph2412, %while.body247.lr.ph.lr.ph.lr.ph ], [ %fill.0.ph23222365, %sw.bb251 ]
  %left.0.ph23172384 = phi i8 [ %left.0.ph2411, %while.body247.lr.ph.lr.ph.lr.ph ], [ 1, %sw.bb251 ]
  br label %while.body247.lr.ph

while.body247.lr.ph:                              ; preds = %while.body247.lr.ph.lr.ph, %sw.bb253
  %68 = phi i8 [ %66, %while.body247.lr.ph.lr.ph ], [ %76, %sw.bb253 ]
  %69 = phi i8* [ %67, %while.body247.lr.ph.lr.ph ], [ %incdec.ptr254, %sw.bb253 ]
  %plus.0.ph23232366 = phi i8 [ %plus.0.ph23192386, %while.body247.lr.ph.lr.ph ], [ %plus.02332, %sw.bb253 ]
  %fill.0.ph23222365 = phi i8 [ %fill.0.ph23182385, %while.body247.lr.ph.lr.ph ], [ %75, %sw.bb253 ]
  br label %while.body247

while.body247:                                    ; preds = %while.body247.lr.ph, %sw.bb249
  %70 = phi i8 [ %68, %while.body247.lr.ph ], [ %73, %sw.bb249 ]
  %71 = phi i8* [ %69, %while.body247.lr.ph ], [ %incdec.ptr250, %sw.bb249 ]
  %plus.02332 = phi i8 [ %plus.0.ph23232366, %while.body247.lr.ph ], [ %72, %sw.bb249 ]
  %conv248 = sext i8 %70 to i32
  switch i32 %conv248, label %tryasterisk.loopexit [
    i32 32, label %sw.bb249
    i32 43, label %sw.bb249
    i32 45, label %sw.bb251
    i32 48, label %sw.bb253
    i32 35, label %sw.bb255
  ]

sw.bb249:                                         ; preds = %while.body247, %while.body247
  %incdec.ptr250 = getelementptr inbounds i8* %71, i64 1
  store i8* %incdec.ptr250, i8** %q, align 8, !tbaa !0
  %72 = load i8* %71, align 1, !tbaa !1
  %73 = load i8* %incdec.ptr250, align 1, !tbaa !1
  %tobool246 = icmp eq i8 %73, 0
  br i1 %tobool246, label %tryasterisk.loopexit, label %while.body247

sw.bb251:                                         ; preds = %while.body247
  %incdec.ptr252 = getelementptr inbounds i8* %71, i64 1
  store i8* %incdec.ptr252, i8** %q, align 8, !tbaa !0
  %74 = load i8* %incdec.ptr252, align 1, !tbaa !1
  %tobool24623312364 = icmp eq i8 %74, 0
  br i1 %tobool24623312364, label %tryasterisk.loopexit, label %while.body247.lr.ph.lr.ph

sw.bb253:                                         ; preds = %while.body247
  %incdec.ptr254 = getelementptr inbounds i8* %71, i64 1
  store i8* %incdec.ptr254, i8** %q, align 8, !tbaa !0
  %75 = load i8* %71, align 1, !tbaa !1
  %76 = load i8* %incdec.ptr254, align 1, !tbaa !1
  %tobool2462331 = icmp eq i8 %76, 0
  br i1 %tobool2462331, label %tryasterisk.loopexit, label %while.body247.lr.ph

sw.bb255:                                         ; preds = %while.body247
  %incdec.ptr256 = getelementptr inbounds i8* %71, i64 1
  store i8* %incdec.ptr256, i8** %q, align 8, !tbaa !0
  %77 = load i8* %incdec.ptr256, align 1, !tbaa !1
  %tobool246233123642383 = icmp eq i8 %77, 0
  br i1 %tobool246233123642383, label %tryasterisk.loopexit, label %while.body247.lr.ph.lr.ph.lr.ph

tryasterisk.loopexit:                             ; preds = %sw.bb253, %while.cond245.preheader, %sw.bb255, %sw.bb251, %sw.bb249, %while.body247
  %78 = phi i8 [ %70, %while.body247 ], [ 0, %sw.bb249 ], [ 0, %sw.bb251 ], [ 0, %sw.bb255 ], [ 0, %while.cond245.preheader ], [ 0, %sw.bb253 ]
  %79 = phi i8* [ %71, %while.body247 ], [ %incdec.ptr250, %sw.bb249 ], [ %incdec.ptr252, %sw.bb251 ], [ %incdec.ptr256, %sw.bb255 ], [ %62, %while.cond245.preheader ], [ %incdec.ptr254, %sw.bb253 ]
  %alt.0.ph2394 = phi i8 [ %alt.0.ph2410, %while.body247 ], [ %alt.0.ph2410, %sw.bb249 ], [ %alt.0.ph2410, %sw.bb251 ], [ 1, %sw.bb255 ], [ 0, %while.cond245.preheader ], [ %alt.0.ph2410, %sw.bb253 ]
  %left.0.ph23172373 = phi i8 [ %left.0.ph23172384, %while.body247 ], [ %left.0.ph23172384, %sw.bb249 ], [ 1, %sw.bb251 ], [ %left.0.ph23172384, %sw.bb255 ], [ 0, %while.cond245.preheader ], [ %left.0.ph23172384, %sw.bb253 ]
  %fill.0.ph23222359 = phi i8 [ %fill.0.ph23222365, %while.body247 ], [ %fill.0.ph23222365, %sw.bb249 ], [ %fill.0.ph23222365, %sw.bb251 ], [ %fill.0.ph23222365, %sw.bb255 ], [ 32, %while.cond245.preheader ], [ %75, %sw.bb253 ]
  %plus.0.lcssa = phi i8 [ %plus.02332, %while.body247 ], [ %72, %sw.bb249 ], [ %plus.02332, %sw.bb251 ], [ %plus.02332, %sw.bb255 ], [ 0, %while.cond245.preheader ], [ %plus.02332, %sw.bb253 ]
  br label %tryasterisk

tryasterisk:                                      ; preds = %tryasterisk.loopexit, %if.end282
  %80 = phi i8 [ %.pre2482, %if.end282 ], [ %78, %tryasterisk.loopexit ]
  %81 = phi i8* [ %incdec.ptr279, %if.end282 ], [ %79, %tryasterisk.loopexit ]
  %vectorize.0 = phi i8 [ 1, %if.end282 ], [ 0, %tryasterisk.loopexit ]
  %vectorarg.0 = phi i8 [ %asterisk.1, %if.end282 ], [ 0, %tryasterisk.loopexit ]
  %ewix.0 = phi i32 [ %ewix.1., %if.end282 ], [ 0, %tryasterisk.loopexit ]
  %evix.0 = phi i32 [ %evix.0.ewix.1, %if.end282 ], [ 0, %tryasterisk.loopexit ]
  %cmp260 = icmp eq i8 %80, 42
  br i1 %cmp260, label %if.then262, label %if.end274

if.then262:                                       ; preds = %tryasterisk
  %incdec.ptr263 = getelementptr inbounds i8* %81, i64 1
  store i8* %incdec.ptr263, i8** %q, align 8, !tbaa !0
  %call264 = call fastcc i32 @S_expect_number(i8** %q) #7
  %tobool265 = icmp eq i32 %call264, 0
  %.pre2490 = load i8** %q, align 8, !tbaa !0
  br i1 %tobool265, label %if.end274, label %if.then266

if.then266:                                       ; preds = %if.then262
  %incdec.ptr267 = getelementptr inbounds i8* %.pre2490, i64 1
  store i8* %incdec.ptr267, i8** %q, align 8, !tbaa !0
  %82 = load i8* %.pre2490, align 1, !tbaa !1
  %cmp269 = icmp eq i8 %82, 36
  br i1 %cmp269, label %if.end274, label %unknown

if.end274:                                        ; preds = %if.then262, %if.then266, %tryasterisk
  %83 = phi i8* [ %81, %tryasterisk ], [ %incdec.ptr267, %if.then266 ], [ %.pre2490, %if.then262 ]
  %ewix.1 = phi i32 [ %ewix.0, %tryasterisk ], [ %call264, %if.then266 ], [ 0, %if.then262 ]
  %asterisk.1 = phi i8 [ 0, %tryasterisk ], [ 1, %if.then266 ], [ 1, %if.then262 ]
  %84 = load i8* %83, align 1, !tbaa !1
  %cmp276 = icmp eq i8 %84, 118
  br i1 %cmp276, label %if.then278, label %if.end286

if.then278:                                       ; preds = %if.end274
  %incdec.ptr279 = getelementptr inbounds i8* %83, i64 1
  store i8* %incdec.ptr279, i8** %q, align 8, !tbaa !0
  %tobool280 = icmp eq i8 %vectorize.0, 0
  br i1 %tobool280, label %if.end282, label %unknown

if.end282:                                        ; preds = %if.then278
  %tobool283 = icmp eq i8 %asterisk.1, 0
  %ewix.1. = select i1 %tobool283, i32 %ewix.1, i32 0
  %evix.0.ewix.1 = select i1 %tobool283, i32 %evix.0, i32 %ewix.1
  %.pre2482 = load i8* %incdec.ptr279, align 1, !tbaa !1
  br label %tryasterisk

if.end286:                                        ; preds = %if.end274
  %tobool287 = icmp ne i8 %asterisk.1, 0
  %tobool287.not = xor i1 %tobool287, true
  %cmp290 = icmp eq i8 %84, 48
  %or.cond2235 = and i1 %cmp290, %tobool287.not
  br i1 %or.cond2235, label %if.then292, label %if.end295

if.then292:                                       ; preds = %if.end286
  %incdec.ptr293 = getelementptr inbounds i8* %83, i64 1
  store i8* %incdec.ptr293, i8** %q, align 8, !tbaa !0
  %85 = load i8* %83, align 1, !tbaa !1
  br label %if.end295

if.end295:                                        ; preds = %if.end286, %if.then292
  %fill.1 = phi i8 [ %fill.0.ph23222359, %if.end286 ], [ %85, %if.then292 ]
  %call296 = call fastcc i32 @S_expect_number(i8** %q) #7
  %tobool298 = icmp eq i8 %vectorize.0, 0
  br i1 %tobool298, label %if.end445, label %if.then299

if.then299:                                       ; preds = %if.end295
  %tobool300 = icmp eq i8 %vectorarg.0, 0
  br i1 %tobool300, label %if.end359, label %if.then301

if.then301:                                       ; preds = %if.then299
  br i1 %tobool168, label %if.then303, label %if.else316

if.then303:                                       ; preds = %if.then301
  %gp_offset306 = load i32* %gp_offset_p533, align 4
  %fits_in_gp307 = icmp ult i32 %gp_offset306, 41
  br i1 %fits_in_gp307, label %vaarg.in_reg308, label %vaarg.in_mem310

vaarg.in_reg308:                                  ; preds = %if.then303
  %reg_save_area309 = load i8** %55, align 8
  %86 = sext i32 %gp_offset306 to i64
  %87 = getelementptr i8* %reg_save_area309, i64 %86
  %88 = add i32 %gp_offset306, 8
  store i32 %88, i32* %gp_offset_p533, align 4
  br label %vaarg.end314

vaarg.in_mem310:                                  ; preds = %if.then303
  %overflow_arg_area312 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next313 = getelementptr i8* %overflow_arg_area312, i64 8
  store i8* %overflow_arg_area.next313, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end314

vaarg.end314:                                     ; preds = %vaarg.in_mem310, %vaarg.in_reg308
  %vaarg.addr315.in = phi i8* [ %87, %vaarg.in_reg308 ], [ %overflow_arg_area312, %vaarg.in_mem310 ]
  %vaarg.addr315 = bitcast i8* %vaarg.addr315.in to %struct.sv**
  %89 = load %struct.sv** %vaarg.addr315, align 8
  br label %if.end335

if.else316:                                       ; preds = %if.then301
  %tobool317 = icmp ne i32 %evix.0, 0
  br i1 %tobool317, label %cond.true318, label %cond.false321

cond.true318:                                     ; preds = %if.else316
  %cmp319 = icmp sgt i32 %evix.0, %svmax
  br i1 %cmp319, label %if.end335, label %cond.true324

cond.false321:                                    ; preds = %if.else316
  %cmp322 = icmp slt i32 %svix.02426, %svmax
  br i1 %cmp322, label %cond.true324, label %if.end335

cond.true324:                                     ; preds = %cond.true318, %cond.false321
  %sub327 = add nsw i32 %evix.0, -1
  %90 = zext i1 %tobool317 to i32
  %inc = xor i32 %90, 1
  %svix.1 = add nsw i32 %inc, %svix.02426
  %cond330 = select i1 %tobool317, i32 %sub327, i32 %svix.02426
  %idxprom = sext i32 %cond330 to i64
  %arrayidx331 = getelementptr inbounds %struct.sv** %svargs, i64 %idxprom
  %91 = load %struct.sv** %arrayidx331, align 8, !tbaa !0
  br label %if.end335

if.end335:                                        ; preds = %cond.true324, %cond.false321, %cond.true318, %vaarg.end314
  %92 = phi %struct.sv* [ %89, %vaarg.end314 ], [ %91, %cond.true324 ], [ @PL_sv_undef, %cond.true318 ], [ @PL_sv_undef, %cond.false321 ]
  %svix.3 = phi i32 [ %svix.02426, %vaarg.end314 ], [ %svix.1, %cond.true324 ], [ %svix.02426, %cond.true318 ], [ %svix.02426, %cond.false321 ]
  store %struct.sv* %92, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags336 = getelementptr inbounds %struct.sv* %92, i64 0, i32 2
  %93 = load i32* %sv_flags336, align 4, !tbaa !3
  %and337 = and i32 %93, 262144
  %cmp338 = icmp eq i32 %and337, 0
  br i1 %cmp338, label %cond.false345, label %cond.true340

cond.true340:                                     ; preds = %if.end335
  %sv_any341 = getelementptr inbounds %struct.sv* %92, i64 0, i32 0
  %94 = load i8** %sv_any341, align 8, !tbaa !0
  %xpv_cur342 = getelementptr inbounds i8* %94, i64 8
  %95 = bitcast i8* %xpv_cur342 to i64*
  %96 = load i64* %95, align 8, !tbaa !5
  store i64 %96, i64* %dotstrlen, align 8, !tbaa !5
  %xpv_pv344 = bitcast i8* %94 to i8**
  %97 = load i8** %xpv_pv344, align 8, !tbaa !0
  br label %cond.end347

cond.false345:                                    ; preds = %if.end335
  %call346 = call i8* @Perl_sv_2pv_flags(%struct.sv* %92, i64* %dotstrlen, i32 2) #7
  %.pre2485 = load i32* %sv_flags336, align 4, !tbaa !3
  br label %cond.end347

cond.end347:                                      ; preds = %cond.false345, %cond.true340
  %98 = phi i32 [ %93, %cond.true340 ], [ %.pre2485, %cond.false345 ]
  %cond348 = phi i8* [ %97, %cond.true340 ], [ %call346, %cond.false345 ]
  %and350 = and i32 %98, 536870912
  %tobool351 = icmp eq i32 %and350, 0
  br i1 %tobool351, label %if.end359, label %land.lhs.true352

land.lhs.true352:                                 ; preds = %cond.end347
  %99 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private353 = getelementptr inbounds %struct.cop* %99, i64 0, i32 7
  %100 = load i8* %op_private353, align 1, !tbaa !1
  %and355 = lshr i8 %100, 3
  %and355.lobit = and i8 %and355, 1
  %101 = xor i8 %and355.lobit, 1
  br label %if.end359

if.end359:                                        ; preds = %land.lhs.true352, %cond.end347, %if.then299
  %is_utf8.0 = phi i8 [ 0, %cond.end347 ], [ 0, %if.then299 ], [ %101, %land.lhs.true352 ]
  %vecsv.1 = phi %struct.sv* [ %92, %cond.end347 ], [ null, %if.then299 ], [ %92, %land.lhs.true352 ]
  %dotstr.0 = phi i8* [ %cond348, %cond.end347 ], [ getelementptr inbounds ([2 x i8]* @.str58, i64 0, i64 0), %if.then299 ], [ %cond348, %land.lhs.true352 ]
  %svix.4 = phi i32 [ %svix.3, %cond.end347 ], [ %svix.02426, %if.then299 ], [ %svix.3, %land.lhs.true352 ]
  br i1 %tobool168, label %if.then361, label %if.else399

if.then361:                                       ; preds = %if.end359
  %gp_offset364 = load i32* %gp_offset_p533, align 4
  %fits_in_gp365 = icmp ult i32 %gp_offset364, 41
  br i1 %fits_in_gp365, label %vaarg.in_reg366, label %vaarg.in_mem368

vaarg.in_reg366:                                  ; preds = %if.then361
  %reg_save_area367 = load i8** %55, align 8
  %102 = sext i32 %gp_offset364 to i64
  %103 = getelementptr i8* %reg_save_area367, i64 %102
  %104 = add i32 %gp_offset364, 8
  store i32 %104, i32* %gp_offset_p533, align 4
  br label %vaarg.end372

vaarg.in_mem368:                                  ; preds = %if.then361
  %overflow_arg_area370 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next371 = getelementptr i8* %overflow_arg_area370, i64 8
  store i8* %overflow_arg_area.next371, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end372

vaarg.end372:                                     ; preds = %vaarg.in_mem368, %vaarg.in_reg366
  %vaarg.addr373.in = phi i8* [ %103, %vaarg.in_reg366 ], [ %overflow_arg_area370, %vaarg.in_mem368 ]
  %vaarg.addr373 = bitcast i8* %vaarg.addr373.in to %struct.sv**
  %105 = load %struct.sv** %vaarg.addr373, align 8
  store %struct.sv* %105, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags374 = getelementptr inbounds %struct.sv* %105, i64 0, i32 2
  %106 = load i32* %sv_flags374, align 4, !tbaa !3
  %and375 = and i32 %106, 262144
  %cmp376 = icmp eq i32 %and375, 0
  br i1 %cmp376, label %cond.false383, label %cond.true378

cond.true378:                                     ; preds = %vaarg.end372
  %sv_any379 = getelementptr inbounds %struct.sv* %105, i64 0, i32 0
  %107 = load i8** %sv_any379, align 8, !tbaa !0
  %xpv_cur380 = getelementptr inbounds i8* %107, i64 8
  %108 = bitcast i8* %xpv_cur380 to i64*
  %109 = load i64* %108, align 8, !tbaa !5
  store i64 %109, i64* %veclen, align 8, !tbaa !5
  %xpv_pv382 = bitcast i8* %107 to i8**
  %110 = load i8** %xpv_pv382, align 8, !tbaa !0
  br label %cond.end385

cond.false383:                                    ; preds = %vaarg.end372
  %call384 = call i8* @Perl_sv_2pv_flags(%struct.sv* %105, i64* %veclen, i32 2) #7
  %.pre2483 = load i32* %sv_flags374, align 4, !tbaa !3
  br label %cond.end385

cond.end385:                                      ; preds = %cond.false383, %cond.true378
  %111 = phi i32 [ %106, %cond.true378 ], [ %.pre2483, %cond.false383 ]
  %cond386 = phi i8* [ %110, %cond.true378 ], [ %call384, %cond.false383 ]
  %and388 = and i32 %111, 536870912
  %tobool389 = icmp eq i32 %and388, 0
  br i1 %tobool389, label %land.end396, label %land.rhs390

land.rhs390:                                      ; preds = %cond.end385
  %112 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private391 = getelementptr inbounds %struct.cop* %112, i64 0, i32 7
  %113 = load i8* %op_private391, align 1, !tbaa !1
  %and393 = and i8 %113, 8
  %lnot395 = icmp eq i8 %and393, 0
  br label %land.end396

land.end396:                                      ; preds = %cond.end385, %land.rhs390
  %114 = phi i1 [ false, %cond.end385 ], [ %lnot395, %land.rhs390 ]
  %conv398 = zext i1 %114 to i8
  br label %if.end445

if.else399:                                       ; preds = %if.end359
  %tobool400 = icmp ne i32 %efix.0.ph, 0
  br i1 %tobool400, label %cond.true401, label %cond.false404

cond.true401:                                     ; preds = %if.else399
  %cmp402 = icmp sgt i32 %efix.0.ph, %svmax
  br i1 %cmp402, label %if.else442, label %if.then407

cond.false404:                                    ; preds = %if.else399
  %cmp405 = icmp slt i32 %svix.4, %svmax
  br i1 %cmp405, label %if.then407, label %if.else442

if.then407:                                       ; preds = %cond.true401, %cond.false404
  %sub410 = add nsw i32 %efix.0.ph, -1
  %115 = zext i1 %tobool400 to i32
  %inc412 = xor i32 %115, 1
  %svix.5 = add nsw i32 %svix.4, %inc412
  %cond414 = select i1 %tobool400, i32 %sub410, i32 %svix.4
  %idxprom415 = sext i32 %cond414 to i64
  %arrayidx416 = getelementptr inbounds %struct.sv** %svargs, i64 %idxprom415
  %116 = load %struct.sv** %arrayidx416, align 8, !tbaa !0
  store %struct.sv* %116, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags417 = getelementptr inbounds %struct.sv* %116, i64 0, i32 2
  %117 = load i32* %sv_flags417, align 4, !tbaa !3
  %and418 = and i32 %117, 262144
  %cmp419 = icmp eq i32 %and418, 0
  br i1 %cmp419, label %cond.false426, label %cond.true421

cond.true421:                                     ; preds = %if.then407
  %sv_any422 = getelementptr inbounds %struct.sv* %116, i64 0, i32 0
  %118 = load i8** %sv_any422, align 8, !tbaa !0
  %xpv_cur423 = getelementptr inbounds i8* %118, i64 8
  %119 = bitcast i8* %xpv_cur423 to i64*
  %120 = load i64* %119, align 8, !tbaa !5
  store i64 %120, i64* %veclen, align 8, !tbaa !5
  %xpv_pv425 = bitcast i8* %118 to i8**
  %121 = load i8** %xpv_pv425, align 8, !tbaa !0
  br label %cond.end428

cond.false426:                                    ; preds = %if.then407
  %call427 = call i8* @Perl_sv_2pv_flags(%struct.sv* %116, i64* %veclen, i32 2) #7
  %.pre2484 = load i32* %sv_flags417, align 4, !tbaa !3
  br label %cond.end428

cond.end428:                                      ; preds = %cond.false426, %cond.true421
  %122 = phi i32 [ %117, %cond.true421 ], [ %.pre2484, %cond.false426 ]
  %cond429 = phi i8* [ %121, %cond.true421 ], [ %call427, %cond.false426 ]
  %and431 = and i32 %122, 536870912
  %tobool432 = icmp eq i32 %and431, 0
  br i1 %tobool432, label %land.end439, label %land.rhs433

land.rhs433:                                      ; preds = %cond.end428
  %123 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private434 = getelementptr inbounds %struct.cop* %123, i64 0, i32 7
  %124 = load i8* %op_private434, align 1, !tbaa !1
  %and436 = and i8 %124, 8
  %lnot438 = icmp eq i8 %and436, 0
  br label %land.end439

land.end439:                                      ; preds = %cond.end428, %land.rhs433
  %125 = phi i1 [ false, %cond.end428 ], [ %lnot438, %land.rhs433 ]
  %conv441 = zext i1 %125 to i8
  br label %if.end445

if.else442:                                       ; preds = %cond.true401, %cond.false404
  store i64 0, i64* %veclen, align 8, !tbaa !5
  br label %if.end445

if.end445:                                        ; preds = %if.end295, %land.end396, %if.else442, %land.end439
  %vec_utf8.0 = phi i8 [ %conv398, %land.end396 ], [ %conv441, %land.end439 ], [ 0, %if.else442 ], [ 0, %if.end295 ]
  %is_utf8.1 = phi i8 [ %is_utf8.0, %land.end396 ], [ %is_utf8.0, %land.end439 ], [ %is_utf8.0, %if.else442 ], [ 0, %if.end295 ]
  %vecsv.2 = phi %struct.sv* [ %105, %land.end396 ], [ %116, %land.end439 ], [ %vecsv.1, %if.else442 ], [ null, %if.end295 ]
  %vecstr.0 = phi i8* [ %cond386, %land.end396 ], [ %cond429, %land.end439 ], [ getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), %if.else442 ], [ null, %if.end295 ]
  %dotstr.1 = phi i8* [ %dotstr.0, %land.end396 ], [ %dotstr.0, %land.end439 ], [ %dotstr.0, %if.else442 ], [ getelementptr inbounds ([2 x i8]* @.str58, i64 0, i64 0), %if.end295 ]
  %svix.6 = phi i32 [ %svix.4, %land.end396 ], [ %svix.5, %land.end439 ], [ %svix.4, %if.else442 ], [ %svix.02426, %if.end295 ]
  br i1 %tobool287, label %if.then447, label %gotwidth

if.then447:                                       ; preds = %if.end445
  br i1 %tobool168, label %if.then449, label %if.else462

if.then449:                                       ; preds = %if.then447
  %gp_offset452 = load i32* %gp_offset_p533, align 4
  %fits_in_gp453 = icmp ult i32 %gp_offset452, 41
  br i1 %fits_in_gp453, label %vaarg.in_reg454, label %vaarg.in_mem456

vaarg.in_reg454:                                  ; preds = %if.then449
  %reg_save_area455 = load i8** %55, align 8
  %126 = sext i32 %gp_offset452 to i64
  %127 = getelementptr i8* %reg_save_area455, i64 %126
  %128 = add i32 %gp_offset452, 8
  store i32 %128, i32* %gp_offset_p533, align 4
  br label %vaarg.end460

vaarg.in_mem456:                                  ; preds = %if.then449
  %overflow_arg_area458 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next459 = getelementptr i8* %overflow_arg_area458, i64 8
  store i8* %overflow_arg_area.next459, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end460

vaarg.end460:                                     ; preds = %vaarg.in_mem456, %vaarg.in_reg454
  %vaarg.addr461.in = phi i8* [ %127, %vaarg.in_reg454 ], [ %overflow_arg_area458, %vaarg.in_mem456 ]
  %vaarg.addr461 = bitcast i8* %vaarg.addr461.in to i32*
  %129 = load i32* %vaarg.addr461, align 4
  br label %if.end493

if.else462:                                       ; preds = %if.then447
  %tobool463 = icmp ne i32 %ewix.1, 0
  br i1 %tobool463, label %cond.true464, label %cond.false467

cond.true464:                                     ; preds = %if.else462
  %cmp465 = icmp sgt i32 %ewix.1, %svmax
  br i1 %cmp465, label %cond.end490, label %cond.true470

cond.false467:                                    ; preds = %if.else462
  %cmp468 = icmp slt i32 %svix.6, %svmax
  br i1 %cmp468, label %cond.true470, label %cond.end490

cond.true470:                                     ; preds = %cond.true464, %cond.false467
  %sub473 = add nsw i32 %ewix.1, -1
  %130 = zext i1 %tobool463 to i32
  %inc475 = xor i32 %130, 1
  %svix.7 = add nsw i32 %svix.6, %inc475
  %cond477 = select i1 %tobool463, i32 %sub473, i32 %svix.6
  %idxprom478 = sext i32 %cond477 to i64
  %arrayidx479 = getelementptr inbounds %struct.sv** %svargs, i64 %idxprom478
  %131 = load %struct.sv** %arrayidx479, align 8, !tbaa !0
  store %struct.sv* %131, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags480 = getelementptr inbounds %struct.sv* %131, i64 0, i32 2
  %132 = load i32* %sv_flags480, align 4, !tbaa !3
  %and481 = and i32 %132, 65536
  %tobool482 = icmp eq i32 %and481, 0
  br i1 %tobool482, label %cond.false485, label %cond.true483

cond.true483:                                     ; preds = %cond.true470
  %sv_any484 = getelementptr inbounds %struct.sv* %131, i64 0, i32 0
  %133 = load i8** %sv_any484, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %133, i64 24
  %134 = bitcast i8* %xiv_iv to i64*
  %135 = load i64* %134, align 8, !tbaa !5
  br label %cond.end490

cond.false485:                                    ; preds = %cond.true470
  %call486 = call i64 @Perl_sv_2iv(%struct.sv* %131) #7
  br label %cond.end490

cond.end490:                                      ; preds = %cond.true464, %cond.false467, %cond.true483, %cond.false485
  %svix.8 = phi i32 [ %svix.7, %cond.true483 ], [ %svix.7, %cond.false485 ], [ %svix.6, %cond.true464 ], [ %svix.6, %cond.false467 ]
  %cond491 = phi i64 [ %135, %cond.true483 ], [ %call486, %cond.false485 ], [ 0, %cond.true464 ], [ 0, %cond.false467 ]
  %conv492 = trunc i64 %cond491 to i32
  br label %if.end493

if.end493:                                        ; preds = %cond.end490, %vaarg.end460
  %storemerge2230 = phi i32 [ %conv492, %cond.end490 ], [ %129, %vaarg.end460 ]
  %svix.9 = phi i32 [ %svix.8, %cond.end490 ], [ %svix.6, %vaarg.end460 ]
  store i32 %storemerge2230, i32* %i, align 4, !tbaa !3
  %cmp494 = icmp slt i32 %storemerge2230, 0
  %storemerge2230.lobit = lshr i32 %storemerge2230, 31
  %conv4962231 = zext i8 %left.0.ph23172373 to i32
  %or497 = or i32 %storemerge2230.lobit, %conv4962231
  %conv498 = trunc i32 %or497 to i8
  %sub502 = sub nsw i32 0, %storemerge2230
  %cond505 = select i1 %cmp494, i32 %sub502, i32 %storemerge2230
  br label %gotwidth

gotwidth:                                         ; preds = %if.end445, %if.end493, %if.then235
  %alt.1 = phi i8 [ %alt.0.ph2394, %if.end493 ], [ 0, %if.then235 ], [ %alt.0.ph2394, %if.end445 ]
  %left.1 = phi i8 [ %conv498, %if.end493 ], [ 0, %if.then235 ], [ %left.0.ph23172373, %if.end445 ]
  %vectorize.1 = phi i8 [ %vectorize.0, %if.end493 ], [ 0, %if.then235 ], [ %vectorize.0, %if.end445 ]
  %vec_utf8.1 = phi i8 [ %vec_utf8.0, %if.end493 ], [ 0, %if.then235 ], [ %vec_utf8.0, %if.end445 ]
  %fill.2 = phi i8 [ %fill.1, %if.end493 ], [ 32, %if.then235 ], [ %fill.1, %if.end445 ]
  %plus.1 = phi i8 [ %plus.0.lcssa, %if.end493 ], [ 0, %if.then235 ], [ %plus.0.lcssa, %if.end445 ]
  %width.0.in = phi i32 [ %cond505, %if.end493 ], [ %call232, %if.then235 ], [ %call296, %if.end445 ]
  %is_utf8.2 = phi i8 [ %is_utf8.1, %if.end493 ], [ 0, %if.then235 ], [ %is_utf8.1, %if.end445 ]
  %vecsv.3 = phi %struct.sv* [ %vecsv.2, %if.end493 ], [ null, %if.then235 ], [ %vecsv.2, %if.end445 ]
  %vecstr.1 = phi i8* [ %vecstr.0, %if.end493 ], [ null, %if.then235 ], [ %vecstr.0, %if.end445 ]
  %dotstr.2 = phi i8* [ %dotstr.1, %if.end493 ], [ getelementptr inbounds ([2 x i8]* @.str58, i64 0, i64 0), %if.then235 ], [ %dotstr.1, %if.end445 ]
  %efix.1 = phi i32 [ %efix.0.ph, %if.end493 ], [ 0, %if.then235 ], [ %efix.0.ph, %if.end445 ]
  %ewix.3 = phi i32 [ %ewix.1, %if.end493 ], [ 0, %if.then235 ], [ %ewix.1, %if.end445 ]
  %svix.10 = phi i32 [ %svix.9, %if.end493 ], [ %svix.02426, %if.then235 ], [ %svix.6, %if.end445 ]
  %width.0 = sext i32 %width.0.in to i64
  %136 = load i8** %q, align 8, !tbaa !0
  %137 = load i8* %136, align 1, !tbaa !1
  %cmp509 = icmp eq i8 %137, 46
  br i1 %cmp509, label %if.then511, label %if.end604

if.then511:                                       ; preds = %gotwidth
  %incdec.ptr512 = getelementptr inbounds i8* %136, i64 1
  store i8* %incdec.ptr512, i8** %q, align 8, !tbaa !0
  %138 = load i8* %incdec.ptr512, align 1, !tbaa !1
  %cmp514 = icmp eq i8 %138, 42
  br i1 %cmp514, label %if.then516, label %while.cond585.preheader

while.cond585.preheader:                          ; preds = %if.then511
  %.off23112339 = add i8 %138, -48
  %139 = icmp ult i8 %.off23112339, 10
  br i1 %139, label %while.body595, label %if.end604

if.then516:                                       ; preds = %if.then511
  %incdec.ptr517 = getelementptr inbounds i8* %136, i64 2
  store i8* %incdec.ptr517, i8** %q, align 8, !tbaa !0
  %call518 = call fastcc i32 @S_expect_number(i8** %q) #7
  %tobool519 = icmp eq i32 %call518, 0
  br i1 %tobool519, label %if.end529, label %land.lhs.true520

land.lhs.true520:                                 ; preds = %if.then516
  %140 = load i8** %q, align 8, !tbaa !0
  %incdec.ptr521 = getelementptr inbounds i8* %140, i64 1
  store i8* %incdec.ptr521, i8** %q, align 8, !tbaa !0
  br label %unknown

if.end529:                                        ; preds = %if.then516
  br i1 %tobool168, label %if.then531, label %if.else544

if.then531:                                       ; preds = %if.end529
  %gp_offset534 = load i32* %gp_offset_p533, align 4
  %fits_in_gp535 = icmp ult i32 %gp_offset534, 41
  br i1 %fits_in_gp535, label %vaarg.in_reg536, label %vaarg.in_mem538

vaarg.in_reg536:                                  ; preds = %if.then531
  %reg_save_area537 = load i8** %55, align 8
  %141 = sext i32 %gp_offset534 to i64
  %142 = getelementptr i8* %reg_save_area537, i64 %141
  %143 = add i32 %gp_offset534, 8
  store i32 %143, i32* %gp_offset_p533, align 4
  br label %vaarg.end542

vaarg.in_mem538:                                  ; preds = %if.then531
  %overflow_arg_area540 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next541 = getelementptr i8* %overflow_arg_area540, i64 8
  store i8* %overflow_arg_area.next541, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end542

vaarg.end542:                                     ; preds = %vaarg.in_mem538, %vaarg.in_reg536
  %vaarg.addr543.in = phi i8* [ %142, %vaarg.in_reg536 ], [ %overflow_arg_area540, %vaarg.in_mem538 ]
  %vaarg.addr543 = bitcast i8* %vaarg.addr543.in to i32*
  %144 = load i32* %vaarg.addr543, align 4
  br label %if.end576

if.else544:                                       ; preds = %if.end529
  %tobool545 = icmp ne i32 %ewix.3, 0
  br i1 %tobool545, label %cond.true546, label %cond.false549

cond.true546:                                     ; preds = %if.else544
  %cmp547 = icmp sgt i32 %ewix.3, %svmax
  br i1 %cmp547, label %cond.end573, label %cond.true552

cond.false549:                                    ; preds = %if.else544
  %cmp550 = icmp slt i32 %svix.10, %svmax
  br i1 %cmp550, label %cond.true552, label %cond.end573

cond.true552:                                     ; preds = %cond.true546, %cond.false549
  %sub555 = add nsw i32 %ewix.3, -1
  %145 = zext i1 %tobool545 to i32
  %inc557 = xor i32 %145, 1
  %svix.11 = add nsw i32 %inc557, %svix.10
  %cond559 = select i1 %tobool545, i32 %sub555, i32 %svix.10
  %idxprom560 = sext i32 %cond559 to i64
  %arrayidx561 = getelementptr inbounds %struct.sv** %svargs, i64 %idxprom560
  %146 = load %struct.sv** %arrayidx561, align 8, !tbaa !0
  store %struct.sv* %146, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags562 = getelementptr inbounds %struct.sv* %146, i64 0, i32 2
  %147 = load i32* %sv_flags562, align 4, !tbaa !3
  %and563 = and i32 %147, 65536
  %tobool564 = icmp eq i32 %and563, 0
  br i1 %tobool564, label %cond.false568, label %cond.true565

cond.true565:                                     ; preds = %cond.true552
  %sv_any566 = getelementptr inbounds %struct.sv* %146, i64 0, i32 0
  %148 = load i8** %sv_any566, align 8, !tbaa !0
  %xiv_iv567 = getelementptr inbounds i8* %148, i64 24
  %149 = bitcast i8* %xiv_iv567 to i64*
  %150 = load i64* %149, align 8, !tbaa !5
  br label %cond.end573

cond.false568:                                    ; preds = %cond.true552
  %call569 = call i64 @Perl_sv_2iv(%struct.sv* %146) #7
  br label %cond.end573

cond.end573:                                      ; preds = %cond.true546, %cond.false549, %cond.true565, %cond.false568
  %svix.12 = phi i32 [ %svix.11, %cond.true565 ], [ %svix.11, %cond.false568 ], [ %svix.10, %cond.true546 ], [ %svix.10, %cond.false549 ]
  %cond574 = phi i64 [ %150, %cond.true565 ], [ %call569, %cond.false568 ], [ 0, %cond.true546 ], [ 0, %cond.false549 ]
  %conv575 = trunc i64 %cond574 to i32
  br label %if.end576

if.end576:                                        ; preds = %cond.end573, %vaarg.end542
  %storemerge2229 = phi i32 [ %conv575, %cond.end573 ], [ %144, %vaarg.end542 ]
  %svix.13 = phi i32 [ %svix.12, %cond.end573 ], [ %svix.10, %vaarg.end542 ]
  store i32 %storemerge2229, i32* %i, align 4, !tbaa !3
  %cmp577 = icmp slt i32 %storemerge2229, 0
  %151 = sext i32 %storemerge2229 to i64
  %conv583 = select i1 %cmp577, i64 0, i64 %151
  %.pre2468 = load i8** %q, align 8, !tbaa !0
  %.pre2469 = load i8* %.pre2468, align 1, !tbaa !1
  br label %if.end604

while.body595:                                    ; preds = %while.cond585.preheader, %while.body595
  %152 = phi i8* [ %incdec.ptr597, %while.body595 ], [ %incdec.ptr512, %while.cond585.preheader ]
  %precis.02340 = phi i64 [ %add601, %while.body595 ], [ 0, %while.cond585.preheader ]
  %mul596 = mul i64 %precis.02340, 10
  %incdec.ptr597 = getelementptr inbounds i8* %152, i64 1
  store i8* %incdec.ptr597, i8** %q, align 8, !tbaa !0
  %153 = load i8* %152, align 1, !tbaa !1
  %conv598 = sext i8 %153 to i64
  %sub599 = add i64 %mul596, -48
  %add601 = add i64 %sub599, %conv598
  %154 = load i8* %incdec.ptr597, align 1, !tbaa !1
  %.off2311 = add i8 %154, -48
  %155 = icmp ult i8 %.off2311, 10
  br i1 %155, label %while.body595, label %if.end604

if.end604:                                        ; preds = %while.cond585.preheader, %while.body595, %if.end576, %gotwidth
  %156 = phi i8 [ %137, %gotwidth ], [ %.pre2469, %if.end576 ], [ %138, %while.cond585.preheader ], [ %154, %while.body595 ]
  %157 = phi i8* [ %136, %gotwidth ], [ %.pre2468, %if.end576 ], [ %incdec.ptr512, %while.cond585.preheader ], [ %incdec.ptr597, %while.body595 ]
  %has_precis.0 = phi i8 [ 0, %gotwidth ], [ 1, %if.end576 ], [ 1, %while.cond585.preheader ], [ 1, %while.body595 ]
  %precis.2 = phi i64 [ 0, %gotwidth ], [ %conv583, %if.end576 ], [ 0, %while.cond585.preheader ], [ %add601, %while.body595 ]
  %svix.15 = phi i32 [ %svix.10, %gotwidth ], [ %svix.13, %if.end576 ], [ %svix.10, %while.cond585.preheader ], [ %svix.10, %while.body595 ]
  %conv605 = sext i8 %156 to i32
  switch i32 %conv605, label %sw.epilog618 [
    i32 76, label %sw.bb606
    i32 113, label %sw.bb606
    i32 108, label %sw.bb608
    i32 104, label %sw.bb616
    i32 86, label %sw.bb616
  ]

sw.bb606:                                         ; preds = %if.end604, %if.end604
  %incdec.ptr607 = getelementptr inbounds i8* %157, i64 1
  store i8* %incdec.ptr607, i8** %q, align 8, !tbaa !0
  br label %sw.epilog618

sw.bb608:                                         ; preds = %if.end604
  %add.ptr609 = getelementptr inbounds i8* %157, i64 1
  %158 = load i8* %add.ptr609, align 1, !tbaa !1
  %cmp611 = icmp eq i8 %158, 108
  br i1 %cmp611, label %if.then613, label %sw.bb616

if.then613:                                       ; preds = %sw.bb608
  %add.ptr614 = getelementptr inbounds i8* %157, i64 2
  store i8* %add.ptr614, i8** %q, align 8, !tbaa !0
  br label %sw.epilog618

sw.bb616:                                         ; preds = %sw.bb608, %if.end604, %if.end604
  %incdec.ptr617 = getelementptr inbounds i8* %157, i64 1
  store i8* %incdec.ptr617, i8** %q, align 8, !tbaa !0
  %159 = load i8* %157, align 1, !tbaa !1
  br label %sw.epilog618

sw.epilog618:                                     ; preds = %if.end604, %sw.bb616, %if.then613, %sw.bb606
  %160 = phi i8* [ %157, %if.end604 ], [ %incdec.ptr617, %sw.bb616 ], [ %add.ptr614, %if.then613 ], [ %incdec.ptr607, %sw.bb606 ]
  %intsize.0 = phi i8 [ 0, %if.end604 ], [ %159, %sw.bb616 ], [ 113, %if.then613 ], [ 113, %sw.bb606 ]
  %161 = load i8* %160, align 1, !tbaa !1
  %cmp620 = icmp eq i8 %161, 37
  br i1 %cmp620, label %if.then622, label %if.end624

if.then622:                                       ; preds = %sw.epilog618
  %incdec.ptr623 = getelementptr inbounds i8* %160, i64 1
  store i8* %incdec.ptr623, i8** %q, align 8, !tbaa !0
  store i64 1, i64* %elen, align 8, !tbaa !5
  br label %string

if.end624:                                        ; preds = %sw.epilog618
  %tobool625 = icmp ne i8 %vectorize.1, 0
  %brmerge2238 = or i1 %tobool625, %tobool168
  %vecsv.3.mux = select i1 %tobool625, %struct.sv* %vecsv.3, %struct.sv* %argsv.02424
  br i1 %brmerge2238, label %if.end651, label %if.then629

if.then629:                                       ; preds = %if.end624
  %tobool630 = icmp ne i32 %efix.1, 0
  br i1 %tobool630, label %cond.true631, label %cond.false634

cond.true631:                                     ; preds = %if.then629
  %cmp632 = icmp sgt i32 %efix.1, %svmax
  br i1 %cmp632, label %if.end651, label %cond.true637

cond.false634:                                    ; preds = %if.then629
  %cmp635 = icmp slt i32 %svix.15, %svmax
  br i1 %cmp635, label %cond.true637, label %if.end651

cond.true637:                                     ; preds = %cond.true631, %cond.false634
  %sub640 = add nsw i32 %efix.1, -1
  %162 = zext i1 %tobool630 to i32
  %inc642 = xor i32 %162, 1
  %svix.16 = add nsw i32 %svix.15, %inc642
  %cond644 = select i1 %tobool630, i32 %sub640, i32 %svix.15
  %idxprom645 = sext i32 %cond644 to i64
  %arrayidx646 = getelementptr inbounds %struct.sv** %svargs, i64 %idxprom645
  %163 = load %struct.sv** %arrayidx646, align 8, !tbaa !0
  br label %if.end651

if.end651:                                        ; preds = %cond.true637, %cond.false634, %cond.true631, %if.end624
  %164 = phi %struct.sv* [ %vecsv.3.mux, %if.end624 ], [ %163, %cond.true637 ], [ @PL_sv_undef, %cond.true631 ], [ @PL_sv_undef, %cond.false634 ]
  %svix.18 = phi i32 [ %svix.15, %if.end624 ], [ %svix.16, %cond.true637 ], [ %svix.15, %cond.true631 ], [ %svix.15, %cond.false634 ]
  %incdec.ptr652 = getelementptr inbounds i8* %160, i64 1
  store i8* %incdec.ptr652, i8** %q, align 8, !tbaa !0
  %165 = load i8* %160, align 1, !tbaa !1
  store i8 %165, i8* %c, align 1, !tbaa !1
  %conv653 = sext i8 %165 to i32
  switch i32 %conv653, label %unknown [
    i32 99, label %sw.bb654
    i32 115, label %sw.bb709
    i32 95, label %sw.bb772
    i32 112, label %sw.bb821
    i32 68, label %sw.bb846
    i32 100, label %sw.bb847
    i32 105, label %sw.bb847
    i32 85, label %sw.bb977
    i32 117, label %uns_integer
    i32 98, label %sw.bb979
    i32 79, label %sw.bb980
    i32 111, label %sw.bb981
    i32 88, label %sw.bb982
    i32 120, label %sw.bb982
    i32 70, label %sw.bb1189
    i32 101, label %sw.bb1190
    i32 69, label %sw.bb1190
    i32 102, label %sw.bb1190
    i32 103, label %sw.bb1190
    i32 71, label %sw.bb1190
    i32 110, label %sw.bb1406
  ]

sw.bb654:                                         ; preds = %if.end651
  %brmerge2240 = or i1 %tobool625, %tobool168.not
  br i1 %brmerge2240, label %cond.false672, label %cond.true658

cond.true658:                                     ; preds = %sw.bb654
  %gp_offset661 = load i32* %gp_offset_p533, align 4
  %fits_in_gp662 = icmp ult i32 %gp_offset661, 41
  br i1 %fits_in_gp662, label %vaarg.in_reg663, label %vaarg.in_mem665

vaarg.in_reg663:                                  ; preds = %cond.true658
  %reg_save_area664 = load i8** %55, align 8
  %166 = sext i32 %gp_offset661 to i64
  %167 = getelementptr i8* %reg_save_area664, i64 %166
  %168 = add i32 %gp_offset661, 8
  store i32 %168, i32* %gp_offset_p533, align 4
  br label %vaarg.end669

vaarg.in_mem665:                                  ; preds = %cond.true658
  %overflow_arg_area667 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next668 = getelementptr i8* %overflow_arg_area667, i64 8
  store i8* %overflow_arg_area.next668, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end669

vaarg.end669:                                     ; preds = %vaarg.in_mem665, %vaarg.in_reg663
  %vaarg.addr670.in = phi i8* [ %167, %vaarg.in_reg663 ], [ %overflow_arg_area667, %vaarg.in_mem665 ]
  %vaarg.addr670 = bitcast i8* %vaarg.addr670.in to i32*
  %169 = load i32* %vaarg.addr670, align 4
  %conv671 = sext i32 %169 to i64
  br label %cond.end683

cond.false672:                                    ; preds = %sw.bb654
  store %struct.sv* %164, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags673 = getelementptr inbounds %struct.sv* %164, i64 0, i32 2
  %170 = load i32* %sv_flags673, align 4, !tbaa !3
  %and674 = and i32 %170, 65536
  %tobool675 = icmp eq i32 %and674, 0
  br i1 %tobool675, label %cond.false679, label %cond.true676

cond.true676:                                     ; preds = %cond.false672
  %sv_any677 = getelementptr inbounds %struct.sv* %164, i64 0, i32 0
  %171 = load i8** %sv_any677, align 8, !tbaa !0
  %xiv_iv678 = getelementptr inbounds i8* %171, i64 24
  %172 = bitcast i8* %xiv_iv678 to i64*
  %173 = load i64* %172, align 8, !tbaa !5
  br label %cond.end683

cond.false679:                                    ; preds = %cond.false672
  %call680 = call i64 @Perl_sv_2iv(%struct.sv* %164) #7
  br label %cond.end683

cond.end683:                                      ; preds = %cond.true676, %cond.false679, %vaarg.end669
  %cond684 = phi i64 [ %conv671, %vaarg.end669 ], [ %173, %cond.true676 ], [ %call680, %cond.false679 ]
  %cmp685 = icmp ugt i64 %cond684, 255
  br i1 %cmp685, label %land.lhs.true694, label %lor.lhs.false687

lor.lhs.false687:                                 ; preds = %cond.end683
  %cmp688 = icmp ult i64 %cond684, 128
  br i1 %cmp688, label %if.else706, label %land.lhs.true690

land.lhs.true690:                                 ; preds = %lor.lhs.false687
  %174 = load i32* %sv_flags, align 4, !tbaa !3
  %and692 = and i32 %174, 536870912
  %tobool693 = icmp eq i32 %and692, 0
  br i1 %tobool693, label %if.else706, label %land.lhs.true694

land.lhs.true694:                                 ; preds = %land.lhs.true690, %cond.end683
  %175 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private695 = getelementptr inbounds %struct.cop* %175, i64 0, i32 7
  %176 = load i8* %op_private695, align 1, !tbaa !1
  %and697 = and i8 %176, 8
  %tobool698 = icmp eq i8 %and697, 0
  br i1 %tobool698, label %if.then699, label %if.else706

if.then699:                                       ; preds = %land.lhs.true694
  %call701 = call i8* @Perl_uvuni_to_utf8(i8* %arraydecay700, i64 %cond684) #8
  %sub.ptr.lhs.cast703 = ptrtoint i8* %call701 to i64
  %sub.ptr.sub705 = sub i64 %sub.ptr.lhs.cast703, %sub.ptr.rhs.cast704
  store i64 %sub.ptr.sub705, i64* %elen, align 8, !tbaa !5
  br label %string

if.else706:                                       ; preds = %land.lhs.true694, %land.lhs.true690, %lor.lhs.false687
  %conv707 = trunc i64 %cond684 to i8
  store i8 %conv707, i8* %c, align 1, !tbaa !1
  store i64 1, i64* %elen, align 8, !tbaa !5
  br label %string

sw.bb709:                                         ; preds = %if.end651
  %brmerge2242 = or i1 %tobool625, %tobool168.not
  br i1 %brmerge2242, label %if.else731, label %if.then713

if.then713:                                       ; preds = %sw.bb709
  %gp_offset716 = load i32* %gp_offset_p533, align 4
  %fits_in_gp717 = icmp ult i32 %gp_offset716, 41
  br i1 %fits_in_gp717, label %vaarg.in_reg718, label %vaarg.in_mem720

vaarg.in_reg718:                                  ; preds = %if.then713
  %reg_save_area719 = load i8** %55, align 8
  %177 = sext i32 %gp_offset716 to i64
  %178 = getelementptr i8* %reg_save_area719, i64 %177
  %179 = add i32 %gp_offset716, 8
  store i32 %179, i32* %gp_offset_p533, align 4
  br label %vaarg.end724

vaarg.in_mem720:                                  ; preds = %if.then713
  %overflow_arg_area722 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next723 = getelementptr i8* %overflow_arg_area722, i64 8
  store i8* %overflow_arg_area.next723, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end724

vaarg.end724:                                     ; preds = %vaarg.in_mem720, %vaarg.in_reg718
  %vaarg.addr725.in = phi i8* [ %178, %vaarg.in_reg718 ], [ %overflow_arg_area722, %vaarg.in_mem720 ]
  %vaarg.addr725 = bitcast i8* %vaarg.addr725.in to i8**
  %180 = load i8** %vaarg.addr725, align 8
  %tobool726 = icmp eq i8* %180, null
  br i1 %tobool726, label %if.else729, label %if.then727

if.then727:                                       ; preds = %vaarg.end724
  %call728 = call i64 @strlen(i8* %180) #8
  store i64 %call728, i64* %elen, align 8, !tbaa !5
  br label %string

if.else729:                                       ; preds = %vaarg.end724
  store i64 6, i64* %elen, align 8, !tbaa !5
  br label %string

if.else731:                                       ; preds = %sw.bb709
  store %struct.sv* %164, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags732 = getelementptr inbounds %struct.sv* %164, i64 0, i32 2
  %181 = load i32* %sv_flags732, align 4, !tbaa !3
  %and733 = and i32 %181, 262144
  %cmp734 = icmp eq i32 %and733, 0
  br i1 %cmp734, label %cond.false741, label %cond.true736

cond.true736:                                     ; preds = %if.else731
  %sv_any737 = getelementptr inbounds %struct.sv* %164, i64 0, i32 0
  %182 = load i8** %sv_any737, align 8, !tbaa !0
  %xpv_cur738 = getelementptr inbounds i8* %182, i64 8
  %183 = bitcast i8* %xpv_cur738 to i64*
  %184 = load i64* %183, align 8, !tbaa !5
  store i64 %184, i64* %elen, align 8, !tbaa !5
  %xpv_pv740 = bitcast i8* %182 to i8**
  %185 = load i8** %xpv_pv740, align 8, !tbaa !0
  br label %cond.end743

cond.false741:                                    ; preds = %if.else731
  %call742 = call i8* @Perl_sv_2pv_flags(%struct.sv* %164, i64* %elen, i32 2) #7
  %.pre2478 = load i32* %sv_flags732, align 4, !tbaa !3
  br label %cond.end743

cond.end743:                                      ; preds = %cond.false741, %cond.true736
  %186 = phi i32 [ %181, %cond.true736 ], [ %.pre2478, %cond.false741 ]
  %cond744 = phi i8* [ %185, %cond.true736 ], [ %call742, %cond.false741 ]
  %and746 = and i32 %186, 536870912
  %tobool747 = icmp eq i32 %and746, 0
  br i1 %tobool747, label %string, label %land.lhs.true748

land.lhs.true748:                                 ; preds = %cond.end743
  %187 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private749 = getelementptr inbounds %struct.cop* %187, i64 0, i32 7
  %188 = load i8* %op_private749, align 1, !tbaa !1
  %and751 = and i8 %188, 8
  %tobool752 = icmp eq i8 %and751, 0
  br i1 %tobool752, label %if.then753, label %string

if.then753:                                       ; preds = %land.lhs.true748
  %tobool755 = icmp eq i8 %has_precis.0, 0
  br i1 %tobool755, label %if.end763, label %land.lhs.true756

land.lhs.true756:                                 ; preds = %if.then753
  %189 = load i64* %elen, align 8, !tbaa !5
  %cmp757 = icmp ult i64 %precis.2, %189
  br i1 %cmp757, label %if.then759, label %if.end763

if.then759:                                       ; preds = %land.lhs.true756
  %conv761 = trunc i64 %precis.2 to i32
  store i32 %conv761, i32* %p760, align 4, !tbaa !3
  call void @Perl_sv_pos_u2b(%struct.sv* %164, i32* %p760, i32* null) #7
  %190 = load i32* %p760, align 4, !tbaa !3
  %conv762 = sext i32 %190 to i64
  br label %if.end763

if.end763:                                        ; preds = %if.then753, %if.then759, %land.lhs.true756
  %precis.3 = phi i64 [ %conv762, %if.then759 ], [ %precis.2, %land.lhs.true756 ], [ %precis.2, %if.then753 ]
  %tobool764 = icmp eq i32 %width.0.in, 0
  br i1 %tobool764, label %string, label %if.then765

if.then765:                                       ; preds = %if.end763
  %191 = load i64* %elen, align 8, !tbaa !5
  %call766 = call i64 @Perl_sv_len_utf8(%struct.sv* %164) #7
  %sub767 = add i64 %191, %width.0
  %add768 = sub i64 %sub767, %call766
  br label %string

sw.bb772:                                         ; preds = %if.end651
  %tobool776 = icmp eq i8 %vectorize.1, 0
  %or.cond2243 = and i1 %tobool168, %tobool776
  br i1 %or.cond2243, label %if.end778, label %unknown

if.end778:                                        ; preds = %sw.bb772
  %gp_offset781 = load i32* %gp_offset_p533, align 4
  %fits_in_gp782 = icmp ult i32 %gp_offset781, 41
  br i1 %fits_in_gp782, label %vaarg.in_reg783, label %vaarg.in_mem785

vaarg.in_reg783:                                  ; preds = %if.end778
  %reg_save_area784 = load i8** %55, align 8
  %192 = sext i32 %gp_offset781 to i64
  %193 = getelementptr i8* %reg_save_area784, i64 %192
  %194 = add i32 %gp_offset781, 8
  store i32 %194, i32* %gp_offset_p533, align 4
  br label %vaarg.end789

vaarg.in_mem785:                                  ; preds = %if.end778
  %overflow_arg_area787 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next788 = getelementptr i8* %overflow_arg_area787, i64 8
  store i8* %overflow_arg_area.next788, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end789

vaarg.end789:                                     ; preds = %vaarg.in_mem785, %vaarg.in_reg783
  %vaarg.addr790.in = phi i8* [ %193, %vaarg.in_reg783 ], [ %overflow_arg_area787, %vaarg.in_mem785 ]
  %vaarg.addr790 = bitcast i8* %vaarg.addr790.in to %struct.sv**
  %195 = load %struct.sv** %vaarg.addr790, align 8
  store %struct.sv* %195, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags791 = getelementptr inbounds %struct.sv* %195, i64 0, i32 2
  %196 = load i32* %sv_flags791, align 4, !tbaa !3
  %and792 = and i32 %196, 262144
  %cmp793 = icmp eq i32 %and792, 0
  br i1 %cmp793, label %cond.false800, label %cond.true795

cond.true795:                                     ; preds = %vaarg.end789
  %sv_any796 = getelementptr inbounds %struct.sv* %195, i64 0, i32 0
  %197 = load i8** %sv_any796, align 8, !tbaa !0
  %xpv_cur797 = getelementptr inbounds i8* %197, i64 8
  %198 = bitcast i8* %xpv_cur797 to i64*
  %199 = load i64* %198, align 8, !tbaa !5
  store i64 %199, i64* %elen, align 8, !tbaa !5
  %xpv_pv799 = bitcast i8* %197 to i8**
  %200 = load i8** %xpv_pv799, align 8, !tbaa !0
  br label %cond.end802

cond.false800:                                    ; preds = %vaarg.end789
  %call801 = call i8* @Perl_sv_2pv_flags(%struct.sv* %195, i64* %elen, i32 2) #7
  %.pre2479 = load i32* %sv_flags791, align 4, !tbaa !3
  br label %cond.end802

cond.end802:                                      ; preds = %cond.false800, %cond.true795
  %201 = phi i32 [ %196, %cond.true795 ], [ %.pre2479, %cond.false800 ]
  %cond803 = phi i8* [ %200, %cond.true795 ], [ %call801, %cond.false800 ]
  %and805 = and i32 %201, 536870912
  %tobool806 = icmp eq i32 %and805, 0
  br i1 %tobool806, label %string, label %land.lhs.true807

land.lhs.true807:                                 ; preds = %cond.end802
  %202 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %op_private808 = getelementptr inbounds %struct.cop* %202, i64 0, i32 7
  %203 = load i8* %op_private808, align 1, !tbaa !1
  %and810 = and i8 %203, 8
  %tobool811 = icmp eq i8 %and810, 0
  %.is_utf8.2 = select i1 %tobool811, i8 1, i8 %is_utf8.2
  br label %string

string:                                           ; preds = %land.lhs.true807, %if.then765, %if.end763, %land.lhs.true748, %cond.end743, %cond.end802, %if.else729, %if.then727, %if.then699, %if.else706, %if.then622
  %width.2 = phi i64 [ %width.0, %if.then622 ], [ %width.0, %cond.end802 ], [ %width.0, %land.lhs.true748 ], [ %width.0, %cond.end743 ], [ %width.0, %if.then727 ], [ %width.0, %if.else729 ], [ %width.0, %if.else706 ], [ %width.0, %if.then699 ], [ %add768, %if.then765 ], [ %width.0, %if.end763 ], [ %width.0, %land.lhs.true807 ]
  %precis.4 = phi i64 [ %precis.2, %if.then622 ], [ %precis.2, %cond.end802 ], [ %precis.2, %land.lhs.true748 ], [ %precis.2, %cond.end743 ], [ %precis.2, %if.then727 ], [ %precis.2, %if.else729 ], [ %precis.2, %if.else706 ], [ %precis.2, %if.then699 ], [ %precis.3, %if.then765 ], [ %precis.3, %if.end763 ], [ %precis.2, %land.lhs.true807 ]
  %is_utf8.3 = phi i8 [ %is_utf8.2, %if.then622 ], [ %is_utf8.2, %cond.end802 ], [ %is_utf8.2, %land.lhs.true748 ], [ %is_utf8.2, %cond.end743 ], [ %is_utf8.2, %if.then727 ], [ %is_utf8.2, %if.else729 ], [ %is_utf8.2, %if.else706 ], [ 1, %if.then699 ], [ 1, %if.then765 ], [ 1, %if.end763 ], [ %.is_utf8.2, %land.lhs.true807 ]
  %eptr.0 = phi i8* [ %160, %if.then622 ], [ %cond803, %cond.end802 ], [ %cond744, %land.lhs.true748 ], [ %cond744, %cond.end743 ], [ %180, %if.then727 ], [ getelementptr inbounds ([7 x i8]* @Perl_sv_vcatpvfn.nullstr, i64 0, i64 0), %if.else729 ], [ %c, %if.else706 ], [ %arraydecay700, %if.then699 ], [ %cond744, %if.then765 ], [ %cond744, %if.end763 ], [ %cond803, %land.lhs.true807 ]
  %argsv.2 = phi %struct.sv* [ %argsv.02424, %if.then622 ], [ %195, %cond.end802 ], [ %164, %land.lhs.true748 ], [ %164, %cond.end743 ], [ %164, %if.then727 ], [ %164, %if.else729 ], [ %164, %if.else706 ], [ %164, %if.then699 ], [ %164, %if.then765 ], [ %164, %if.end763 ], [ %195, %land.lhs.true807 ]
  %svix.19 = phi i32 [ %svix.15, %if.then622 ], [ %svix.18, %cond.end802 ], [ %svix.18, %land.lhs.true748 ], [ %svix.18, %cond.end743 ], [ %svix.18, %if.then727 ], [ %svix.18, %if.else729 ], [ %svix.18, %if.else706 ], [ %svix.18, %if.then699 ], [ %svix.18, %if.then765 ], [ %svix.18, %if.end763 ], [ %svix.18, %land.lhs.true807 ]
  %tobool815 = icmp eq i8 %has_precis.0, 0
  br i1 %tobool815, label %sw.epilog1598, label %land.lhs.true816

land.lhs.true816:                                 ; preds = %string
  %204 = load i64* %elen, align 8, !tbaa !5
  %cmp817 = icmp ugt i64 %204, %precis.4
  br i1 %cmp817, label %if.then819, label %sw.epilog1598

if.then819:                                       ; preds = %land.lhs.true816
  store i64 %precis.4, i64* %elen, align 8, !tbaa !5
  br label %sw.epilog1598

sw.bb821:                                         ; preds = %if.end651
  %205 = or i8 %vectorize.1, %alt.1
  %206 = icmp eq i8 %205, 0
  br i1 %206, label %if.end828, label %unknown

if.end828:                                        ; preds = %sw.bb821
  br i1 %tobool168, label %cond.true830, label %cond.false843

cond.true830:                                     ; preds = %if.end828
  %gp_offset833 = load i32* %gp_offset_p533, align 4
  %fits_in_gp834 = icmp ult i32 %gp_offset833, 41
  br i1 %fits_in_gp834, label %vaarg.in_reg835, label %vaarg.in_mem837

vaarg.in_reg835:                                  ; preds = %cond.true830
  %reg_save_area836 = load i8** %55, align 8
  %207 = sext i32 %gp_offset833 to i64
  %208 = getelementptr i8* %reg_save_area836, i64 %207
  %209 = add i32 %gp_offset833, 8
  store i32 %209, i32* %gp_offset_p533, align 4
  br label %vaarg.end841

vaarg.in_mem837:                                  ; preds = %cond.true830
  %overflow_arg_area839 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next840 = getelementptr i8* %overflow_arg_area839, i64 8
  store i8* %overflow_arg_area.next840, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end841

vaarg.end841:                                     ; preds = %vaarg.in_mem837, %vaarg.in_reg835
  %vaarg.addr842.in = phi i8* [ %208, %vaarg.in_reg835 ], [ %overflow_arg_area839, %vaarg.in_mem837 ]
  %vaarg.addr842 = bitcast i8* %vaarg.addr842.in to i8**
  %210 = load i8** %vaarg.addr842, align 8
  br label %integer.thread2291

cond.false843:                                    ; preds = %if.end828
  %211 = bitcast %struct.sv* %164 to i8*
  br label %integer.thread2291

integer.thread2291:                               ; preds = %vaarg.end841, %cond.false843
  %cond845 = phi i8* [ %210, %vaarg.end841 ], [ %211, %cond.false843 ]
  %212 = ptrtoint i8* %cond845 to i64
  br label %sw.bb1093

sw.bb846:                                         ; preds = %if.end651
  br label %sw.bb847

sw.bb847:                                         ; preds = %if.end651, %if.end651, %sw.bb846
  %intsize.1 = phi i8 [ %intsize.0, %if.end651 ], [ %intsize.0, %if.end651 ], [ 113, %sw.bb846 ]
  br i1 %tobool625, label %if.then849, label %if.else866

if.then849:                                       ; preds = %sw.bb847
  %213 = load i64* %veclen, align 8, !tbaa !5
  %tobool850 = icmp eq i64 %213, 0
  br i1 %tobool850, label %for.inc1824, label %if.end852

if.end852:                                        ; preds = %if.then849
  %tobool853 = icmp eq i8 %vec_utf8.1, 0
  br i1 %tobool853, label %if.else856, label %if.then854

if.then854:                                       ; preds = %if.end852
  %call855 = call i64 @Perl_utf8n_to_uvuni(i8* %vecstr.1, i64 %213, i64* %ulen, i32 105) #8
  %.pre2480 = load i64* %ulen, align 8, !tbaa !5
  br label %if.end858

if.else856:                                       ; preds = %if.end852
  %214 = load i8* %vecstr.1, align 1, !tbaa !1
  %conv857 = zext i8 %214 to i64
  store i64 1, i64* %ulen, align 8, !tbaa !5
  br label %if.end858

if.end858:                                        ; preds = %if.else856, %if.then854
  %215 = phi i64 [ %.pre2480, %if.then854 ], [ 1, %if.else856 ]
  %uv.0 = phi i64 [ %call855, %if.then854 ], [ %conv857, %if.else856 ]
  %add.ptr859 = getelementptr inbounds i8* %vecstr.1, i64 %215
  %sub860 = sub i64 %213, %215
  store i64 %sub860, i64* %veclen, align 8, !tbaa !5
  %tobool861 = icmp eq i8 %plus.1, 0
  br i1 %tobool861, label %if.end960, label %if.then862

if.then862:                                       ; preds = %if.end858
  store i8 %plus.1, i8* %arrayidx1148, align 1, !tbaa !1
  br label %if.end960

if.else866:                                       ; preds = %sw.bb847
  br i1 %tobool168, label %if.then868, label %if.else939

if.then868:                                       ; preds = %if.else866
  %conv869 = sext i8 %intsize.1 to i32
  switch i32 %conv869, label %sw.default911 [
    i32 104, label %sw.bb870
    i32 108, label %sw.bb885
    i32 86, label %sw.bb898
    i32 113, label %sw.bb925
  ]

sw.bb870:                                         ; preds = %if.then868
  %gp_offset873 = load i32* %gp_offset_p533, align 4
  %fits_in_gp874 = icmp ult i32 %gp_offset873, 41
  br i1 %fits_in_gp874, label %vaarg.in_reg875, label %vaarg.in_mem877

vaarg.in_reg875:                                  ; preds = %sw.bb870
  %reg_save_area876 = load i8** %55, align 8
  %216 = sext i32 %gp_offset873 to i64
  %217 = getelementptr i8* %reg_save_area876, i64 %216
  %218 = add i32 %gp_offset873, 8
  store i32 %218, i32* %gp_offset_p533, align 4
  br label %vaarg.end881

vaarg.in_mem877:                                  ; preds = %sw.bb870
  %overflow_arg_area879 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next880 = getelementptr i8* %overflow_arg_area879, i64 8
  store i8* %overflow_arg_area.next880, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end881

vaarg.end881:                                     ; preds = %vaarg.in_mem877, %vaarg.in_reg875
  %vaarg.addr882.in = phi i8* [ %217, %vaarg.in_reg875 ], [ %overflow_arg_area879, %vaarg.in_mem877 ]
  %vaarg.addr882 = bitcast i8* %vaarg.addr882.in to i32*
  %219 = load i32* %vaarg.addr882, align 4
  %conv883 = zext i32 %219 to i64
  %sext2226 = shl i64 %conv883, 48
  %conv884 = ashr exact i64 %sext2226, 48
  br label %if.end960

sw.bb885:                                         ; preds = %if.then868
  %gp_offset888 = load i32* %gp_offset_p533, align 4
  %fits_in_gp889 = icmp ult i32 %gp_offset888, 41
  br i1 %fits_in_gp889, label %vaarg.in_reg890, label %vaarg.in_mem892

vaarg.in_reg890:                                  ; preds = %sw.bb885
  %reg_save_area891 = load i8** %55, align 8
  %220 = sext i32 %gp_offset888 to i64
  %221 = getelementptr i8* %reg_save_area891, i64 %220
  %222 = add i32 %gp_offset888, 8
  store i32 %222, i32* %gp_offset_p533, align 4
  br label %vaarg.end896

vaarg.in_mem892:                                  ; preds = %sw.bb885
  %overflow_arg_area894 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next895 = getelementptr i8* %overflow_arg_area894, i64 8
  store i8* %overflow_arg_area.next895, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end896

vaarg.end896:                                     ; preds = %vaarg.in_mem892, %vaarg.in_reg890
  %vaarg.addr897.in = phi i8* [ %221, %vaarg.in_reg890 ], [ %overflow_arg_area894, %vaarg.in_mem892 ]
  %vaarg.addr897 = bitcast i8* %vaarg.addr897.in to i64*
  %223 = load i64* %vaarg.addr897, align 8
  br label %if.end960

sw.bb898:                                         ; preds = %if.then868
  %gp_offset901 = load i32* %gp_offset_p533, align 4
  %fits_in_gp902 = icmp ult i32 %gp_offset901, 41
  br i1 %fits_in_gp902, label %vaarg.in_reg903, label %vaarg.in_mem905

vaarg.in_reg903:                                  ; preds = %sw.bb898
  %reg_save_area904 = load i8** %55, align 8
  %224 = sext i32 %gp_offset901 to i64
  %225 = getelementptr i8* %reg_save_area904, i64 %224
  %226 = add i32 %gp_offset901, 8
  store i32 %226, i32* %gp_offset_p533, align 4
  br label %vaarg.end909

vaarg.in_mem905:                                  ; preds = %sw.bb898
  %overflow_arg_area907 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next908 = getelementptr i8* %overflow_arg_area907, i64 8
  store i8* %overflow_arg_area.next908, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end909

vaarg.end909:                                     ; preds = %vaarg.in_mem905, %vaarg.in_reg903
  %vaarg.addr910.in = phi i8* [ %225, %vaarg.in_reg903 ], [ %overflow_arg_area907, %vaarg.in_mem905 ]
  %vaarg.addr910 = bitcast i8* %vaarg.addr910.in to i64*
  %227 = load i64* %vaarg.addr910, align 8
  br label %if.end960

sw.default911:                                    ; preds = %if.then868
  %gp_offset914 = load i32* %gp_offset_p533, align 4
  %fits_in_gp915 = icmp ult i32 %gp_offset914, 41
  br i1 %fits_in_gp915, label %vaarg.in_reg916, label %vaarg.in_mem918

vaarg.in_reg916:                                  ; preds = %sw.default911
  %reg_save_area917 = load i8** %55, align 8
  %228 = sext i32 %gp_offset914 to i64
  %229 = getelementptr i8* %reg_save_area917, i64 %228
  %230 = add i32 %gp_offset914, 8
  store i32 %230, i32* %gp_offset_p533, align 4
  br label %vaarg.end922

vaarg.in_mem918:                                  ; preds = %sw.default911
  %overflow_arg_area920 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next921 = getelementptr i8* %overflow_arg_area920, i64 8
  store i8* %overflow_arg_area.next921, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end922

vaarg.end922:                                     ; preds = %vaarg.in_mem918, %vaarg.in_reg916
  %vaarg.addr923.in = phi i8* [ %229, %vaarg.in_reg916 ], [ %overflow_arg_area920, %vaarg.in_mem918 ]
  %vaarg.addr923 = bitcast i8* %vaarg.addr923.in to i32*
  %231 = load i32* %vaarg.addr923, align 4
  %conv924 = sext i32 %231 to i64
  br label %if.end960

sw.bb925:                                         ; preds = %if.then868
  %gp_offset928 = load i32* %gp_offset_p533, align 4
  %fits_in_gp929 = icmp ult i32 %gp_offset928, 41
  br i1 %fits_in_gp929, label %vaarg.in_reg930, label %vaarg.in_mem932

vaarg.in_reg930:                                  ; preds = %sw.bb925
  %reg_save_area931 = load i8** %55, align 8
  %232 = sext i32 %gp_offset928 to i64
  %233 = getelementptr i8* %reg_save_area931, i64 %232
  %234 = add i32 %gp_offset928, 8
  store i32 %234, i32* %gp_offset_p533, align 4
  br label %vaarg.end936

vaarg.in_mem932:                                  ; preds = %sw.bb925
  %overflow_arg_area934 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next935 = getelementptr i8* %overflow_arg_area934, i64 8
  store i8* %overflow_arg_area.next935, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end936

vaarg.end936:                                     ; preds = %vaarg.in_mem932, %vaarg.in_reg930
  %vaarg.addr937.in = phi i8* [ %233, %vaarg.in_reg930 ], [ %overflow_arg_area934, %vaarg.in_mem932 ]
  %vaarg.addr937 = bitcast i8* %vaarg.addr937.in to i64*
  %235 = load i64* %vaarg.addr937, align 8
  br label %if.end960

if.else939:                                       ; preds = %if.else866
  store %struct.sv* %164, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags940 = getelementptr inbounds %struct.sv* %164, i64 0, i32 2
  %236 = load i32* %sv_flags940, align 4, !tbaa !3
  %and941 = and i32 %236, 65536
  %tobool942 = icmp eq i32 %and941, 0
  br i1 %tobool942, label %cond.false946, label %cond.true943

cond.true943:                                     ; preds = %if.else939
  %sv_any944 = getelementptr inbounds %struct.sv* %164, i64 0, i32 0
  %237 = load i8** %sv_any944, align 8, !tbaa !0
  %xiv_iv945 = getelementptr inbounds i8* %237, i64 24
  %238 = bitcast i8* %xiv_iv945 to i64*
  %239 = load i64* %238, align 8, !tbaa !5
  br label %cond.end948

cond.false946:                                    ; preds = %if.else939
  %call947 = call i64 @Perl_sv_2iv(%struct.sv* %164) #7
  br label %cond.end948

cond.end948:                                      ; preds = %cond.false946, %cond.true943
  %cond949 = phi i64 [ %239, %cond.true943 ], [ %call947, %cond.false946 ]
  %cond = icmp eq i8 %intsize.1, 104
  br i1 %cond, label %sw.bb951, label %if.end960

sw.bb951:                                         ; preds = %cond.end948
  %sext2225 = shl i64 %cond949, 48
  %conv953 = ashr exact i64 %sext2225, 48
  br label %if.end960

if.end960:                                        ; preds = %cond.end948, %if.end858, %vaarg.end936, %vaarg.end922, %vaarg.end909, %vaarg.end896, %vaarg.end881, %sw.bb951, %if.then862
  %esignlen.0 = phi i64 [ 1, %if.then862 ], [ 0, %if.end858 ], [ 0, %vaarg.end922 ], [ 0, %vaarg.end936 ], [ 0, %vaarg.end909 ], [ 0, %vaarg.end896 ], [ 0, %vaarg.end881 ], [ 0, %sw.bb951 ], [ 0, %cond.end948 ]
  %vecstr.2 = phi i8* [ %add.ptr859, %if.then862 ], [ %add.ptr859, %if.end858 ], [ %vecstr.1, %vaarg.end922 ], [ %vecstr.1, %vaarg.end936 ], [ %vecstr.1, %vaarg.end909 ], [ %vecstr.1, %vaarg.end896 ], [ %vecstr.1, %vaarg.end881 ], [ %vecstr.1, %sw.bb951 ], [ %vecstr.1, %cond.end948 ]
  %iv.0 = phi i64 [ 0, %if.then862 ], [ 0, %if.end858 ], [ %conv924, %vaarg.end922 ], [ %235, %vaarg.end936 ], [ %227, %vaarg.end909 ], [ %223, %vaarg.end896 ], [ %conv884, %vaarg.end881 ], [ %conv953, %sw.bb951 ], [ %cond949, %cond.end948 ]
  %uv.1 = phi i64 [ %uv.0, %if.then862 ], [ %uv.0, %if.end858 ], [ 0, %vaarg.end922 ], [ 0, %vaarg.end936 ], [ 0, %vaarg.end909 ], [ 0, %vaarg.end896 ], [ 0, %vaarg.end881 ], [ 0, %sw.bb951 ], [ 0, %cond.end948 ]
  br i1 %tobool625, label %do.body1153.preheader, label %if.then962

if.then962:                                       ; preds = %if.end960
  %cmp963 = icmp sgt i64 %iv.0, -1
  br i1 %cmp963, label %if.then965, label %if.else971

if.then965:                                       ; preds = %if.then962
  %tobool966 = icmp eq i8 %plus.1, 0
  br i1 %tobool966, label %do.body1153.preheader, label %if.then967

if.then967:                                       ; preds = %if.then965
  %inc968 = add i64 %esignlen.0, 1
  %arrayidx969 = getelementptr inbounds [4 x i8]* %esignbuf, i64 0, i64 %esignlen.0
  store i8 %plus.1, i8* %arrayidx969, align 1, !tbaa !1
  br label %do.body1153.preheader

if.else971:                                       ; preds = %if.then962
  %sub972 = sub nsw i64 0, %iv.0
  %inc973 = add i64 %esignlen.0, 1
  %arrayidx974 = getelementptr inbounds [4 x i8]* %esignbuf, i64 0, i64 %esignlen.0
  store i8 45, i8* %arrayidx974, align 1, !tbaa !1
  br label %do.body1153.preheader

sw.bb977:                                         ; preds = %if.end651
  br label %uns_integer

sw.bb979:                                         ; preds = %if.end651
  br label %uns_integer

sw.bb980:                                         ; preds = %if.end651
  br label %sw.bb981

sw.bb981:                                         ; preds = %if.end651, %sw.bb980
  %intsize.3 = phi i8 [ %intsize.0, %if.end651 ], [ 113, %sw.bb980 ]
  br label %uns_integer

sw.bb982:                                         ; preds = %if.end651, %if.end651
  br label %uns_integer

uns_integer:                                      ; preds = %sw.bb977, %if.end651, %sw.bb982, %sw.bb981, %sw.bb979
  %intsize.4 = phi i8 [ %intsize.0, %sw.bb982 ], [ %intsize.3, %sw.bb981 ], [ %intsize.0, %sw.bb979 ], [ %intsize.0, %if.end651 ], [ 113, %sw.bb977 ]
  %base.0 = phi i32 [ 16, %sw.bb982 ], [ 8, %sw.bb981 ], [ 2, %sw.bb979 ], [ 10, %if.end651 ], [ 10, %sw.bb977 ]
  br i1 %tobool625, label %vector, label %if.else997

vector:                                           ; preds = %if.end1813, %uns_integer
  %alt.2 = phi i8 [ %alt.1, %uns_integer ], [ %alt.6, %if.end1813 ]
  %vectorize.2 = phi i8 [ %vectorize.1, %uns_integer ], [ %vectorize.5, %if.end1813 ]
  %width.3 = phi i64 [ %width.0, %uns_integer ], [ %width.5, %if.end1813 ]
  %zeros.0 = phi i64 [ 0, %uns_integer ], [ %zeros.2, %if.end1813 ]
  %precis.5 = phi i64 [ %precis.2, %uns_integer ], [ %precis.7, %if.end1813 ]
  %is_utf8.4 = phi i8 [ %is_utf8.2, %uns_integer ], [ %is_utf8.6, %if.end1813 ]
  %vecstr.3 = phi i8* [ %vecstr.1, %uns_integer ], [ %vecstr.5, %if.end1813 ]
  %base.1 = phi i32 [ %base.0, %uns_integer ], [ %base.8, %if.end1813 ]
  %has_utf8.2 = phi i8 [ %has_utf8.12420, %uns_integer ], [ %has_utf8.4., %if.end1813 ]
  %argsv.3 = phi %struct.sv* [ %164, %uns_integer ], [ %argsv.6, %if.end1813 ]
  %svix.20 = phi i32 [ %svix.18, %uns_integer ], [ %svix.22, %if.end1813 ]
  %240 = load i64* %veclen, align 8, !tbaa !5
  %tobool986 = icmp eq i64 %240, 0
  br i1 %tobool986, label %for.inc1824, label %if.end988

if.end988:                                        ; preds = %vector
  %tobool989 = icmp eq i8 %vec_utf8.1, 0
  br i1 %tobool989, label %if.else992, label %if.then990

if.then990:                                       ; preds = %if.end988
  %call991 = call i64 @Perl_utf8n_to_uvuni(i8* %vecstr.3, i64 %240, i64* %ulen985, i32 105) #8
  %.pre2477 = load i64* %ulen985, align 8, !tbaa !5
  br label %if.end994

if.else992:                                       ; preds = %if.end988
  %241 = load i8* %vecstr.3, align 1, !tbaa !1
  %conv993 = zext i8 %241 to i64
  store i64 1, i64* %ulen985, align 8, !tbaa !5
  br label %if.end994

if.end994:                                        ; preds = %if.else992, %if.then990
  %242 = phi i64 [ %.pre2477, %if.then990 ], [ 1, %if.else992 ]
  %uv.3 = phi i64 [ %call991, %if.then990 ], [ %conv993, %if.else992 ]
  %add.ptr995 = getelementptr inbounds i8* %vecstr.3, i64 %242
  %sub996 = sub i64 %240, %242
  store i64 %sub996, i64* %veclen, align 8, !tbaa !5
  br label %integer

if.else997:                                       ; preds = %uns_integer
  br i1 %tobool168, label %if.then999, label %if.else1070

if.then999:                                       ; preds = %if.else997
  %conv1000 = sext i8 %intsize.4 to i32
  switch i32 %conv1000, label %sw.default1042 [
    i32 104, label %sw.bb1001
    i32 108, label %sw.bb1016
    i32 86, label %sw.bb1029
    i32 113, label %sw.bb1056
  ]

sw.bb1001:                                        ; preds = %if.then999
  %gp_offset1004 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1005 = icmp ult i32 %gp_offset1004, 41
  br i1 %fits_in_gp1005, label %vaarg.in_reg1006, label %vaarg.in_mem1008

vaarg.in_reg1006:                                 ; preds = %sw.bb1001
  %reg_save_area1007 = load i8** %55, align 8
  %243 = sext i32 %gp_offset1004 to i64
  %244 = getelementptr i8* %reg_save_area1007, i64 %243
  %245 = add i32 %gp_offset1004, 8
  store i32 %245, i32* %gp_offset_p533, align 4
  br label %vaarg.end1012

vaarg.in_mem1008:                                 ; preds = %sw.bb1001
  %overflow_arg_area1010 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1011 = getelementptr i8* %overflow_arg_area1010, i64 8
  store i8* %overflow_arg_area.next1011, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1012

vaarg.end1012:                                    ; preds = %vaarg.in_mem1008, %vaarg.in_reg1006
  %vaarg.addr1013.in = phi i8* [ %244, %vaarg.in_reg1006 ], [ %overflow_arg_area1010, %vaarg.in_mem1008 ]
  %vaarg.addr1013 = bitcast i8* %vaarg.addr1013.in to i32*
  %246 = load i32* %vaarg.addr1013, align 4
  %conv1014 = zext i32 %246 to i64
  %conv1015 = and i64 %conv1014, 65535
  br label %integer

sw.bb1016:                                        ; preds = %if.then999
  %gp_offset1019 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1020 = icmp ult i32 %gp_offset1019, 41
  br i1 %fits_in_gp1020, label %vaarg.in_reg1021, label %vaarg.in_mem1023

vaarg.in_reg1021:                                 ; preds = %sw.bb1016
  %reg_save_area1022 = load i8** %55, align 8
  %247 = sext i32 %gp_offset1019 to i64
  %248 = getelementptr i8* %reg_save_area1022, i64 %247
  %249 = add i32 %gp_offset1019, 8
  store i32 %249, i32* %gp_offset_p533, align 4
  br label %vaarg.end1027

vaarg.in_mem1023:                                 ; preds = %sw.bb1016
  %overflow_arg_area1025 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1026 = getelementptr i8* %overflow_arg_area1025, i64 8
  store i8* %overflow_arg_area.next1026, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1027

vaarg.end1027:                                    ; preds = %vaarg.in_mem1023, %vaarg.in_reg1021
  %vaarg.addr1028.in = phi i8* [ %248, %vaarg.in_reg1021 ], [ %overflow_arg_area1025, %vaarg.in_mem1023 ]
  %vaarg.addr1028 = bitcast i8* %vaarg.addr1028.in to i64*
  %250 = load i64* %vaarg.addr1028, align 8
  br label %integer

sw.bb1029:                                        ; preds = %if.then999
  %gp_offset1032 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1033 = icmp ult i32 %gp_offset1032, 41
  br i1 %fits_in_gp1033, label %vaarg.in_reg1034, label %vaarg.in_mem1036

vaarg.in_reg1034:                                 ; preds = %sw.bb1029
  %reg_save_area1035 = load i8** %55, align 8
  %251 = sext i32 %gp_offset1032 to i64
  %252 = getelementptr i8* %reg_save_area1035, i64 %251
  %253 = add i32 %gp_offset1032, 8
  store i32 %253, i32* %gp_offset_p533, align 4
  br label %vaarg.end1040

vaarg.in_mem1036:                                 ; preds = %sw.bb1029
  %overflow_arg_area1038 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1039 = getelementptr i8* %overflow_arg_area1038, i64 8
  store i8* %overflow_arg_area.next1039, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1040

vaarg.end1040:                                    ; preds = %vaarg.in_mem1036, %vaarg.in_reg1034
  %vaarg.addr1041.in = phi i8* [ %252, %vaarg.in_reg1034 ], [ %overflow_arg_area1038, %vaarg.in_mem1036 ]
  %vaarg.addr1041 = bitcast i8* %vaarg.addr1041.in to i64*
  %254 = load i64* %vaarg.addr1041, align 8
  br label %integer

sw.default1042:                                   ; preds = %if.then999
  %gp_offset1045 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1046 = icmp ult i32 %gp_offset1045, 41
  br i1 %fits_in_gp1046, label %vaarg.in_reg1047, label %vaarg.in_mem1049

vaarg.in_reg1047:                                 ; preds = %sw.default1042
  %reg_save_area1048 = load i8** %55, align 8
  %255 = sext i32 %gp_offset1045 to i64
  %256 = getelementptr i8* %reg_save_area1048, i64 %255
  %257 = add i32 %gp_offset1045, 8
  store i32 %257, i32* %gp_offset_p533, align 4
  br label %vaarg.end1053

vaarg.in_mem1049:                                 ; preds = %sw.default1042
  %overflow_arg_area1051 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1052 = getelementptr i8* %overflow_arg_area1051, i64 8
  store i8* %overflow_arg_area.next1052, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1053

vaarg.end1053:                                    ; preds = %vaarg.in_mem1049, %vaarg.in_reg1047
  %vaarg.addr1054.in = phi i8* [ %256, %vaarg.in_reg1047 ], [ %overflow_arg_area1051, %vaarg.in_mem1049 ]
  %vaarg.addr1054 = bitcast i8* %vaarg.addr1054.in to i32*
  %258 = load i32* %vaarg.addr1054, align 4
  %conv1055 = zext i32 %258 to i64
  br label %integer

sw.bb1056:                                        ; preds = %if.then999
  %gp_offset1059 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1060 = icmp ult i32 %gp_offset1059, 41
  br i1 %fits_in_gp1060, label %vaarg.in_reg1061, label %vaarg.in_mem1063

vaarg.in_reg1061:                                 ; preds = %sw.bb1056
  %reg_save_area1062 = load i8** %55, align 8
  %259 = sext i32 %gp_offset1059 to i64
  %260 = getelementptr i8* %reg_save_area1062, i64 %259
  %261 = add i32 %gp_offset1059, 8
  store i32 %261, i32* %gp_offset_p533, align 4
  br label %vaarg.end1067

vaarg.in_mem1063:                                 ; preds = %sw.bb1056
  %overflow_arg_area1065 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1066 = getelementptr i8* %overflow_arg_area1065, i64 8
  store i8* %overflow_arg_area.next1066, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1067

vaarg.end1067:                                    ; preds = %vaarg.in_mem1063, %vaarg.in_reg1061
  %vaarg.addr1068.in = phi i8* [ %260, %vaarg.in_reg1061 ], [ %overflow_arg_area1065, %vaarg.in_mem1063 ]
  %vaarg.addr1068 = bitcast i8* %vaarg.addr1068.in to i64*
  %262 = load i64* %vaarg.addr1068, align 8
  br label %integer

if.else1070:                                      ; preds = %if.else997
  store %struct.sv* %164, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags1071 = getelementptr inbounds %struct.sv* %164, i64 0, i32 2
  %263 = load i32* %sv_flags1071, align 4, !tbaa !3
  %and1072 = and i32 %263, 65536
  %tobool1073 = icmp eq i32 %and1072, 0
  br i1 %tobool1073, label %cond.false1076, label %cond.true1074

cond.true1074:                                    ; preds = %if.else1070
  %sv_any1075 = getelementptr inbounds %struct.sv* %164, i64 0, i32 0
  %264 = load i8** %sv_any1075, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %264, i64 24
  %265 = bitcast i8* %xuv_uv to i64*
  %266 = load i64* %265, align 8, !tbaa !5
  br label %cond.end1078

cond.false1076:                                   ; preds = %if.else1070
  %call1077 = call i64 @Perl_sv_2uv(%struct.sv* %164) #7
  br label %cond.end1078

cond.end1078:                                     ; preds = %cond.false1076, %cond.true1074
  %cond1079 = phi i64 [ %266, %cond.true1074 ], [ %call1077, %cond.false1076 ]
  %cond2264 = icmp eq i8 %intsize.4, 104
  %conv1083 = and i64 %cond1079, 65535
  %conv1083.cond1079 = select i1 %cond2264, i64 %conv1083, i64 %cond1079
  br label %integer

do.body1153.preheader:                            ; preds = %if.end960, %if.then967, %if.else971, %if.then965, %integer
  %svix.212288.ph = phi i32 [ %svix.21, %integer ], [ %svix.18, %if.then965 ], [ %svix.18, %if.else971 ], [ %svix.18, %if.then967 ], [ %svix.18, %if.end960 ]
  %argsv.42286.ph = phi %struct.sv* [ %argsv.4, %integer ], [ %164, %if.then965 ], [ %164, %if.else971 ], [ %164, %if.then967 ], [ %164, %if.end960 ]
  %has_utf8.32284.ph = phi i8 [ %has_utf8.3, %integer ], [ %has_utf8.12420, %if.then965 ], [ %has_utf8.12420, %if.else971 ], [ %has_utf8.12420, %if.then967 ], [ %has_utf8.12420, %if.end960 ]
  %base.22281.ph = phi i32 [ %base.2, %integer ], [ 10, %if.then965 ], [ 10, %if.else971 ], [ 10, %if.then967 ], [ 10, %if.end960 ]
  %vecstr.42280.ph = phi i8* [ %vecstr.4, %integer ], [ %vecstr.2, %if.then965 ], [ %vecstr.2, %if.else971 ], [ %vecstr.2, %if.then967 ], [ %vecstr.2, %if.end960 ]
  %esignlen.32278.ph = phi i64 [ 0, %integer ], [ %esignlen.0, %if.then965 ], [ %inc973, %if.else971 ], [ %inc968, %if.then967 ], [ %esignlen.0, %if.end960 ]
  %is_utf8.52277.ph = phi i8 [ %is_utf8.5, %integer ], [ %is_utf8.2, %if.then965 ], [ %is_utf8.2, %if.else971 ], [ %is_utf8.2, %if.then967 ], [ %is_utf8.2, %if.end960 ]
  %precis.62275.ph = phi i64 [ %precis.6, %integer ], [ %precis.2, %if.then965 ], [ %precis.2, %if.else971 ], [ %precis.2, %if.then967 ], [ %precis.2, %if.end960 ]
  %zeros.12273.ph = phi i64 [ %zeros.1, %integer ], [ 0, %if.then965 ], [ 0, %if.else971 ], [ 0, %if.then967 ], [ 0, %if.end960 ]
  %width.42271.ph = phi i64 [ %width.4, %integer ], [ %width.0, %if.then965 ], [ %width.0, %if.else971 ], [ %width.0, %if.then967 ], [ %width.0, %if.end960 ]
  %vectorize.32269.ph = phi i8 [ %vectorize.3, %integer ], [ %vectorize.1, %if.then965 ], [ 0, %if.else971 ], [ %vectorize.1, %if.then967 ], [ %vectorize.1, %if.end960 ]
  %alt.32267.ph = phi i8 [ %alt.3, %integer ], [ %alt.1, %if.then965 ], [ %alt.1, %if.else971 ], [ %alt.1, %if.then967 ], [ %alt.1, %if.end960 ]
  %uv.8.ph = phi i64 [ %uv.4, %integer ], [ %iv.0, %if.then965 ], [ %sub972, %if.else971 ], [ %iv.0, %if.then967 ], [ %uv.1, %if.end960 ]
  %conv1154 = zext i32 %base.22281.ph to i64
  br label %do.body1153

integer:                                          ; preds = %cond.end1078, %if.end994, %vaarg.end1012, %vaarg.end1027, %vaarg.end1040, %vaarg.end1053, %vaarg.end1067
  %alt.3 = phi i8 [ %alt.2, %if.end994 ], [ %alt.1, %vaarg.end1053 ], [ %alt.1, %vaarg.end1067 ], [ %alt.1, %vaarg.end1040 ], [ %alt.1, %vaarg.end1027 ], [ %alt.1, %vaarg.end1012 ], [ %alt.1, %cond.end1078 ]
  %vectorize.3 = phi i8 [ %vectorize.2, %if.end994 ], [ 0, %vaarg.end1053 ], [ 0, %vaarg.end1067 ], [ 0, %vaarg.end1040 ], [ 0, %vaarg.end1027 ], [ 0, %vaarg.end1012 ], [ 0, %cond.end1078 ]
  %width.4 = phi i64 [ %width.3, %if.end994 ], [ %width.0, %vaarg.end1053 ], [ %width.0, %vaarg.end1067 ], [ %width.0, %vaarg.end1040 ], [ %width.0, %vaarg.end1027 ], [ %width.0, %vaarg.end1012 ], [ %width.0, %cond.end1078 ]
  %zeros.1 = phi i64 [ %zeros.0, %if.end994 ], [ 0, %vaarg.end1053 ], [ 0, %vaarg.end1067 ], [ 0, %vaarg.end1040 ], [ 0, %vaarg.end1027 ], [ 0, %vaarg.end1012 ], [ 0, %cond.end1078 ]
  %precis.6 = phi i64 [ %precis.5, %if.end994 ], [ %precis.2, %vaarg.end1053 ], [ %precis.2, %vaarg.end1067 ], [ %precis.2, %vaarg.end1040 ], [ %precis.2, %vaarg.end1027 ], [ %precis.2, %vaarg.end1012 ], [ %precis.2, %cond.end1078 ]
  %is_utf8.5 = phi i8 [ %is_utf8.4, %if.end994 ], [ %is_utf8.2, %vaarg.end1053 ], [ %is_utf8.2, %vaarg.end1067 ], [ %is_utf8.2, %vaarg.end1040 ], [ %is_utf8.2, %vaarg.end1027 ], [ %is_utf8.2, %vaarg.end1012 ], [ %is_utf8.2, %cond.end1078 ]
  %vecstr.4 = phi i8* [ %add.ptr995, %if.end994 ], [ %vecstr.1, %vaarg.end1053 ], [ %vecstr.1, %vaarg.end1067 ], [ %vecstr.1, %vaarg.end1040 ], [ %vecstr.1, %vaarg.end1027 ], [ %vecstr.1, %vaarg.end1012 ], [ %vecstr.1, %cond.end1078 ]
  %base.2 = phi i32 [ %base.1, %if.end994 ], [ %base.0, %vaarg.end1053 ], [ %base.0, %vaarg.end1067 ], [ %base.0, %vaarg.end1040 ], [ %base.0, %vaarg.end1027 ], [ %base.0, %vaarg.end1012 ], [ %base.0, %cond.end1078 ]
  %uv.4 = phi i64 [ %uv.3, %if.end994 ], [ %conv1055, %vaarg.end1053 ], [ %262, %vaarg.end1067 ], [ %254, %vaarg.end1040 ], [ %250, %vaarg.end1027 ], [ %conv1015, %vaarg.end1012 ], [ %conv1083.cond1079, %cond.end1078 ]
  %has_utf8.3 = phi i8 [ %has_utf8.2, %if.end994 ], [ %has_utf8.12420, %vaarg.end1053 ], [ %has_utf8.12420, %vaarg.end1067 ], [ %has_utf8.12420, %vaarg.end1040 ], [ %has_utf8.12420, %vaarg.end1027 ], [ %has_utf8.12420, %vaarg.end1012 ], [ %has_utf8.12420, %cond.end1078 ]
  %argsv.4 = phi %struct.sv* [ %argsv.3, %if.end994 ], [ %164, %vaarg.end1053 ], [ %164, %vaarg.end1067 ], [ %164, %vaarg.end1040 ], [ %164, %vaarg.end1027 ], [ %164, %vaarg.end1012 ], [ %164, %cond.end1078 ]
  %svix.21 = phi i32 [ %svix.20, %if.end994 ], [ %svix.18, %vaarg.end1053 ], [ %svix.18, %vaarg.end1067 ], [ %svix.18, %vaarg.end1040 ], [ %svix.18, %vaarg.end1027 ], [ %svix.18, %vaarg.end1012 ], [ %svix.18, %cond.end1078 ]
  switch i32 %base.2, label %do.body1153.preheader [
    i32 16, label %integer.sw.bb1093_crit_edge
    i32 8, label %do.body1115
    i32 2, label %do.body1135
  ]

integer.sw.bb1093_crit_edge:                      ; preds = %integer
  %.pre2487 = load i8* %c, align 1, !tbaa !1
  br label %sw.bb1093

sw.bb1093:                                        ; preds = %integer.sw.bb1093_crit_edge, %integer.thread2291
  %267 = phi i8 [ %165, %integer.thread2291 ], [ %.pre2487, %integer.sw.bb1093_crit_edge ]
  %svix.212305 = phi i32 [ %svix.18, %integer.thread2291 ], [ %svix.21, %integer.sw.bb1093_crit_edge ]
  %argsv.42304 = phi %struct.sv* [ %164, %integer.thread2291 ], [ %argsv.4, %integer.sw.bb1093_crit_edge ]
  %has_utf8.32303 = phi i8 [ %has_utf8.12420, %integer.thread2291 ], [ %has_utf8.3, %integer.sw.bb1093_crit_edge ]
  %uv.42302 = phi i64 [ %212, %integer.thread2291 ], [ %uv.4, %integer.sw.bb1093_crit_edge ]
  %vecstr.42300 = phi i8* [ %vecstr.1, %integer.thread2291 ], [ %vecstr.4, %integer.sw.bb1093_crit_edge ]
  %is_utf8.52298 = phi i8 [ %is_utf8.2, %integer.thread2291 ], [ %is_utf8.5, %integer.sw.bb1093_crit_edge ]
  %precis.62297 = phi i64 [ %precis.2, %integer.thread2291 ], [ %precis.6, %integer.sw.bb1093_crit_edge ]
  %zeros.12296 = phi i64 [ 0, %integer.thread2291 ], [ %zeros.1, %integer.sw.bb1093_crit_edge ]
  %width.42295 = phi i64 [ %width.0, %integer.thread2291 ], [ %width.4, %integer.sw.bb1093_crit_edge ]
  %vectorize.32294 = phi i8 [ %vectorize.1, %integer.thread2291 ], [ %vectorize.3, %integer.sw.bb1093_crit_edge ]
  %alt.32293 = phi i8 [ %alt.1, %integer.thread2291 ], [ %alt.3, %integer.sw.bb1093_crit_edge ]
  %tobool1094 = icmp eq i64 %uv.42302, 0
  %cmp1098 = icmp eq i8 %267, 88
  %cond1100 = select i1 %cmp1098, i8* getelementptr inbounds ([17 x i8]* @.str59, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8]* @.str60, i64 0, i64 0)
  br label %do.body

do.body:                                          ; preds = %do.body, %sw.bb1093
  %eptr.1 = phi i8* [ %add.ptr1092, %sw.bb1093 ], [ %incdec.ptr1105, %do.body ]
  %uv.5 = phi i64 [ %uv.42302, %sw.bb1093 ], [ %shr, %do.body ]
  %conv1102 = and i64 %uv.5, 15
  %arrayidx1104 = getelementptr inbounds i8* %cond1100, i64 %conv1102
  %268 = load i8* %arrayidx1104, align 1, !tbaa !1
  %incdec.ptr1105 = getelementptr inbounds i8* %eptr.1, i64 -1
  store i8 %268, i8* %incdec.ptr1105, align 1, !tbaa !1
  %shr = lshr i64 %uv.5, 4
  %tobool1106 = icmp eq i64 %shr, 0
  br i1 %tobool1106, label %do.end, label %do.body

do.end:                                           ; preds = %do.body
  %.alt.3 = select i1 %tobool1094, i8 0, i8 %alt.32293
  %tobool1107 = icmp eq i8 %.alt.3, 0
  br i1 %tobool1107, label %sw.epilog1163, label %if.then1108

if.then1108:                                      ; preds = %do.end
  store i8 48, i8* %arrayidx1148, align 1, !tbaa !1
  %269 = load i8* %c, align 1, !tbaa !1
  store i8 %269, i8* %arrayidx1150, align 1, !tbaa !1
  br label %sw.epilog1163

do.body1115:                                      ; preds = %integer, %do.body1115
  %eptr.2 = phi i8* [ %incdec.ptr1120, %do.body1115 ], [ %add.ptr1092, %integer ]
  %uv.6 = phi i64 [ %shr1122, %do.body1115 ], [ %uv.4, %integer ]
  %uv.6.tr = trunc i64 %uv.6 to i8
  %conv1117 = and i8 %uv.6.tr, 7
  %add11182214 = or i8 %conv1117, 48
  %incdec.ptr1120 = getelementptr inbounds i8* %eptr.2, i64 -1
  store i8 %add11182214, i8* %incdec.ptr1120, align 1, !tbaa !1
  %shr1122 = lshr i64 %uv.6, 3
  %tobool1123 = icmp eq i64 %shr1122, 0
  br i1 %tobool1123, label %do.end1124, label %do.body1115

do.end1124:                                       ; preds = %do.body1115
  %tobool1126 = icmp eq i8 %alt.3, 0
  %cmp1129 = icmp eq i8 %add11182214, 48
  %or.cond2245 = or i1 %tobool1126, %cmp1129
  br i1 %or.cond2245, label %sw.epilog1163, label %if.then1131

if.then1131:                                      ; preds = %do.end1124
  %incdec.ptr1132 = getelementptr inbounds i8* %eptr.2, i64 -2
  store i8 48, i8* %incdec.ptr1132, align 1, !tbaa !1
  br label %sw.epilog1163

do.body1135:                                      ; preds = %integer, %do.body1135
  %eptr.3 = phi i8* [ %incdec.ptr1140, %do.body1135 ], [ %add.ptr1092, %integer ]
  %uv.7 = phi i64 [ %shr1142, %do.body1135 ], [ %uv.4, %integer ]
  %uv.7.tr = trunc i64 %uv.7 to i8
  %conv1137 = and i8 %uv.7.tr, 1
  %add11382213 = or i8 %conv1137, 48
  %incdec.ptr1140 = getelementptr inbounds i8* %eptr.3, i64 -1
  store i8 %add11382213, i8* %incdec.ptr1140, align 1, !tbaa !1
  %shr1142 = lshr i64 %uv.7, 1
  %tobool1143 = icmp eq i64 %shr1142, 0
  br i1 %tobool1143, label %do.end1144, label %do.body1135

do.end1144:                                       ; preds = %do.body1135
  %tobool1145 = icmp eq i8 %alt.3, 0
  br i1 %tobool1145, label %sw.epilog1163, label %if.then1146

if.then1146:                                      ; preds = %do.end1144
  store i8 48, i8* %arrayidx1148, align 1, !tbaa !1
  store i8 98, i8* %arrayidx1150, align 1, !tbaa !1
  br label %sw.epilog1163

do.body1153:                                      ; preds = %do.body1153.preheader, %do.body1153
  %eptr.4 = phi i8* [ %incdec.ptr1158, %do.body1153 ], [ %add.ptr1092, %do.body1153.preheader ]
  %uv.8 = phi i64 [ %div, %do.body1153 ], [ %uv.8.ph, %do.body1153.preheader ]
  %rem = urem i64 %uv.8, %conv1154
  %conv1155 = trunc i64 %rem to i8
  %add1156 = add i8 %conv1155, 48
  %incdec.ptr1158 = getelementptr inbounds i8* %eptr.4, i64 -1
  store i8 %add1156, i8* %incdec.ptr1158, align 1, !tbaa !1
  %div = udiv i64 %uv.8, %conv1154
  %tobool1161 = icmp eq i64 %div, 0
  br i1 %tobool1161, label %sw.epilog1163, label %do.body1153

sw.epilog1163:                                    ; preds = %do.body1153, %do.end, %do.end1124, %do.end1144, %if.then1146, %if.then1131, %if.then1108
  %svix.212287 = phi i32 [ %svix.21, %if.then1146 ], [ %svix.21, %do.end1144 ], [ %svix.21, %if.then1131 ], [ %svix.21, %do.end1124 ], [ %svix.212305, %if.then1108 ], [ %svix.212305, %do.end ], [ %svix.212288.ph, %do.body1153 ]
  %argsv.42285 = phi %struct.sv* [ %argsv.4, %if.then1146 ], [ %argsv.4, %do.end1144 ], [ %argsv.4, %if.then1131 ], [ %argsv.4, %do.end1124 ], [ %argsv.42304, %if.then1108 ], [ %argsv.42304, %do.end ], [ %argsv.42286.ph, %do.body1153 ]
  %has_utf8.32283 = phi i8 [ %has_utf8.3, %if.then1146 ], [ %has_utf8.3, %do.end1144 ], [ %has_utf8.3, %if.then1131 ], [ %has_utf8.3, %do.end1124 ], [ %has_utf8.32303, %if.then1108 ], [ %has_utf8.32303, %do.end ], [ %has_utf8.32284.ph, %do.body1153 ]
  %base.22282 = phi i32 [ 2, %if.then1146 ], [ 2, %do.end1144 ], [ 8, %if.then1131 ], [ 8, %do.end1124 ], [ 16, %if.then1108 ], [ 16, %do.end ], [ %base.22281.ph, %do.body1153 ]
  %vecstr.42279 = phi i8* [ %vecstr.4, %if.then1146 ], [ %vecstr.4, %do.end1144 ], [ %vecstr.4, %if.then1131 ], [ %vecstr.4, %do.end1124 ], [ %vecstr.42300, %if.then1108 ], [ %vecstr.42300, %do.end ], [ %vecstr.42280.ph, %do.body1153 ]
  %is_utf8.52276 = phi i8 [ %is_utf8.5, %if.then1146 ], [ %is_utf8.5, %do.end1144 ], [ %is_utf8.5, %if.then1131 ], [ %is_utf8.5, %do.end1124 ], [ %is_utf8.52298, %if.then1108 ], [ %is_utf8.52298, %do.end ], [ %is_utf8.52277.ph, %do.body1153 ]
  %precis.62274 = phi i64 [ %precis.6, %if.then1146 ], [ %precis.6, %do.end1144 ], [ %precis.6, %if.then1131 ], [ %precis.6, %do.end1124 ], [ %precis.62297, %if.then1108 ], [ %precis.62297, %do.end ], [ %precis.62275.ph, %do.body1153 ]
  %zeros.12272 = phi i64 [ %zeros.1, %if.then1146 ], [ %zeros.1, %do.end1144 ], [ %zeros.1, %if.then1131 ], [ %zeros.1, %do.end1124 ], [ %zeros.12296, %if.then1108 ], [ %zeros.12296, %do.end ], [ %zeros.12273.ph, %do.body1153 ]
  %width.42270 = phi i64 [ %width.4, %if.then1146 ], [ %width.4, %do.end1144 ], [ %width.4, %if.then1131 ], [ %width.4, %do.end1124 ], [ %width.42295, %if.then1108 ], [ %width.42295, %do.end ], [ %width.42271.ph, %do.body1153 ]
  %vectorize.32268 = phi i8 [ %vectorize.3, %if.then1146 ], [ %vectorize.3, %do.end1144 ], [ %vectorize.3, %if.then1131 ], [ %vectorize.3, %do.end1124 ], [ %vectorize.32294, %if.then1108 ], [ %vectorize.32294, %do.end ], [ %vectorize.32269.ph, %do.body1153 ]
  %alt.5 = phi i8 [ %alt.3, %if.then1146 ], [ 0, %do.end1144 ], [ %alt.3, %if.then1131 ], [ %alt.3, %do.end1124 ], [ %.alt.3, %if.then1108 ], [ 0, %do.end ], [ %alt.32267.ph, %do.body1153 ]
  %esignlen.4 = phi i64 [ 2, %if.then1146 ], [ 0, %do.end1144 ], [ 0, %if.then1131 ], [ 0, %do.end1124 ], [ 2, %if.then1108 ], [ 0, %do.end ], [ %esignlen.32278.ph, %do.body1153 ]
  %eptr.5 = phi i8* [ %incdec.ptr1140, %if.then1146 ], [ %incdec.ptr1140, %do.end1144 ], [ %incdec.ptr1132, %if.then1131 ], [ %incdec.ptr1120, %do.end1124 ], [ %incdec.ptr1105, %if.then1108 ], [ %incdec.ptr1105, %do.end ], [ %incdec.ptr1158, %do.body1153 ]
  %sub.ptr.lhs.cast1166 = ptrtoint i8* %add.ptr1092 to i64
  %sub.ptr.rhs.cast1167 = ptrtoint i8* %eptr.5 to i64
  %sub.ptr.sub1168 = sub i64 %sub.ptr.lhs.cast1166, %sub.ptr.rhs.cast1167
  store i64 %sub.ptr.sub1168, i64* %elen, align 8, !tbaa !5
  %tobool1169 = icmp eq i8 %has_precis.0, 0
  br i1 %tobool1169, label %sw.epilog1598, label %if.then1170

if.then1170:                                      ; preds = %sw.epilog1163
  %cmp1171 = icmp ugt i64 %precis.62274, %sub.ptr.sub1168
  br i1 %cmp1171, label %if.then1173, label %if.else1175

if.then1173:                                      ; preds = %if.then1170
  %sub1174 = sub i64 %precis.62274, %sub.ptr.sub1168
  br label %sw.epilog1598

if.else1175:                                      ; preds = %if.then1170
  %cmp1176 = icmp eq i64 %precis.62274, 0
  %cmp1179 = icmp eq i64 %sub.ptr.sub1168, 1
  %or.cond2246 = and i1 %cmp1176, %cmp1179
  br i1 %or.cond2246, label %land.lhs.true1181, label %sw.epilog1598

land.lhs.true1181:                                ; preds = %if.else1175
  %270 = load i8* %eptr.5, align 1, !tbaa !1
  %cmp1183 = icmp eq i8 %270, 48
  br i1 %cmp1183, label %if.then1185, label %sw.epilog1598

if.then1185:                                      ; preds = %land.lhs.true1181
  store i64 0, i64* %elen, align 8, !tbaa !5
  br label %sw.epilog1598

sw.bb1189:                                        ; preds = %if.end651
  store i8 102, i8* %c, align 1, !tbaa !1
  br label %sw.bb1190

sw.bb1190:                                        ; preds = %if.end651, %if.end651, %if.end651, %if.end651, %if.end651, %sw.bb1189
  %271 = phi i8 [ %165, %if.end651 ], [ %165, %if.end651 ], [ %165, %if.end651 ], [ %165, %if.end651 ], [ %165, %if.end651 ], [ 102, %sw.bb1189 ]
  %cond1826 = icmp eq i8 %intsize.0, 104
  br i1 %cond1826, label %unknown, label %sw.epilog1195

sw.epilog1195:                                    ; preds = %sw.bb1190
  %brmerge2248 = or i1 %tobool625, %tobool168.not
  br i1 %brmerge2248, label %cond.false1224, label %cond.true1199

cond.true1199:                                    ; preds = %sw.epilog1195
  %cmp1201 = icmp eq i8 %intsize.0, 113
  br i1 %cmp1201, label %cond.true1203, label %cond.false1208

cond.true1203:                                    ; preds = %cond.true1199
  %overflow_arg_area1206 = load i8** %overflow_arg_area_p539, align 8
  %272 = getelementptr i8* %overflow_arg_area1206, i64 15
  %273 = ptrtoint i8* %272 to i64
  %274 = and i64 %273, -16
  %overflow_arg_area.align = inttoptr i64 %274 to i8*
  %275 = inttoptr i64 %274 to x86_fp80*
  %overflow_arg_area.next1207 = getelementptr i8* %overflow_arg_area.align, i64 16
  store i8* %overflow_arg_area.next1207, i8** %overflow_arg_area_p539, align 8
  %276 = load x86_fp80* %275, align 16
  br label %cond.end1236

cond.false1208:                                   ; preds = %cond.true1199
  %fp_offset1211 = load i32* %fp_offset_p1210, align 4
  %fits_in_fp1212 = icmp ult i32 %fp_offset1211, 161
  br i1 %fits_in_fp1212, label %vaarg.in_reg1213, label %vaarg.in_mem1215

vaarg.in_reg1213:                                 ; preds = %cond.false1208
  %reg_save_area1214 = load i8** %55, align 8
  %277 = sext i32 %fp_offset1211 to i64
  %278 = getelementptr i8* %reg_save_area1214, i64 %277
  %279 = add i32 %fp_offset1211, 16
  store i32 %279, i32* %fp_offset_p1210, align 4
  br label %vaarg.end1219

vaarg.in_mem1215:                                 ; preds = %cond.false1208
  %overflow_arg_area1217 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1218 = getelementptr i8* %overflow_arg_area1217, i64 8
  store i8* %overflow_arg_area.next1218, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1219

vaarg.end1219:                                    ; preds = %vaarg.in_mem1215, %vaarg.in_reg1213
  %vaarg.addr1220.in = phi i8* [ %278, %vaarg.in_reg1213 ], [ %overflow_arg_area1217, %vaarg.in_mem1215 ]
  %vaarg.addr1220 = bitcast i8* %vaarg.addr1220.in to double*
  %280 = load double* %vaarg.addr1220, align 8
  %conv1221 = fpext double %280 to x86_fp80
  br label %cond.end1236

cond.false1224:                                   ; preds = %sw.epilog1195
  store %struct.sv* %164, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags1225 = getelementptr inbounds %struct.sv* %164, i64 0, i32 2
  %281 = load i32* %sv_flags1225, align 4, !tbaa !3
  %and1226 = and i32 %281, 131072
  %tobool1227 = icmp eq i32 %and1226, 0
  br i1 %tobool1227, label %cond.false1231, label %cond.true1228

cond.true1228:                                    ; preds = %cond.false1224
  %sv_any1229 = getelementptr inbounds %struct.sv* %164, i64 0, i32 0
  %282 = load i8** %sv_any1229, align 8, !tbaa !0
  %xnv_nv1230 = getelementptr inbounds i8* %282, i64 32
  %283 = bitcast i8* %xnv_nv1230 to double*
  %284 = load double* %283, align 8, !tbaa !6
  br label %cond.end1233

cond.false1231:                                   ; preds = %cond.false1224
  %call1232 = call double @Perl_sv_2nv(%struct.sv* %164) #7
  %.pre2481.pre = load i8* %c, align 1, !tbaa !1
  br label %cond.end1233

cond.end1233:                                     ; preds = %cond.false1231, %cond.true1228
  %.pre2481 = phi i8 [ %271, %cond.true1228 ], [ %.pre2481.pre, %cond.false1231 ]
  %cond1234 = phi double [ %284, %cond.true1228 ], [ %call1232, %cond.false1231 ]
  %conv1235 = fpext double %cond1234 to x86_fp80
  br label %cond.end1236

cond.end1236:                                     ; preds = %cond.true1203, %vaarg.end1219, %cond.end1233
  %285 = phi i8 [ %.pre2481, %cond.end1233 ], [ %271, %cond.true1203 ], [ %271, %vaarg.end1219 ]
  %cond1237 = phi x86_fp80 [ %conv1235, %cond.end1233 ], [ %276, %cond.true1203 ], [ %conv1221, %vaarg.end1219 ]
  switch i8 %285, label %if.then1245 [
    i8 101, label %if.end1261
    i8 69, label %if.end1261
  ]

if.then1245:                                      ; preds = %cond.end1236
  store i32 -2147483648, i32* %i, align 4, !tbaa !3
  %conv1246 = fptrunc x86_fp80 %cond1237 to double
  %call1247 = call double @frexp(double %conv1246, i32* %i) #8
  %286 = load i32* %i, align 4, !tbaa !3
  %cmp1248 = icmp eq i32 %286, -2147483648
  br i1 %cmp1248, label %if.end1252.thread, label %if.end1252

if.end1252.thread:                                ; preds = %if.then1245
  %call1251 = call %struct.op* (i8*, ...)* @Perl_die(i8* getelementptr inbounds ([13 x i8]* @.str61, i64 0, i64 0)) #8
  br label %if.end1261

if.end1252:                                       ; preds = %if.then1245
  %cmp1253 = icmp sgt i32 %286, 0
  br i1 %cmp1253, label %if.then1255, label %if.end1261

if.then1255:                                      ; preds = %if.end1252
  %mul1256 = mul nsw i32 %286, 146
  %div1257 = sdiv i32 %mul1256, 485
  %add1258 = add nsw i32 %div1257, 1
  %conv1259 = sext i32 %add1258 to i64
  br label %if.end1261

if.end1261:                                       ; preds = %if.end1252.thread, %cond.end1236, %cond.end1236, %if.end1252, %if.then1255
  %need.0 = phi i64 [ %conv1259, %if.then1255 ], [ 0, %if.end1252 ], [ 0, %cond.end1236 ], [ 0, %cond.end1236 ], [ 0, %if.end1252.thread ]
  %tobool1263 = icmp ne i8 %has_precis.0, 0
  %cond1267 = select i1 %tobool1263, i64 %precis.2, i64 6
  %add1268 = add i64 %need.0, %cond1267
  %cmp1269 = icmp ult i64 %add1268, %width.0
  %width.0.add1268 = select i1 %cmp1269, i64 %width.0, i64 %add1268
  %add1273 = add i64 %width.0.add1268, 20
  %287 = load i64* @PL_efloatsize, align 8, !tbaa !5
  %cmp1274 = icmp ult i64 %287, %add1273
  br i1 %cmp1274, label %if.then1276, label %if.end1281

if.then1276:                                      ; preds = %if.end1261
  %288 = load i8** @PL_efloatbuf, align 8, !tbaa !0
  call void @Perl_safesysfree(i8* %288) #8
  %add1277 = add i64 %width.0.add1268, 40
  store i64 %add1277, i64* @PL_efloatsize, align 8, !tbaa !5
  %call1279 = call i8* @Perl_safesysmalloc(i64 %add1277) #8
  store i8* %call1279, i8** @PL_efloatbuf, align 8, !tbaa !0
  store i8 0, i8* %call1279, align 1, !tbaa !1
  br label %if.end1281

if.end1281:                                       ; preds = %if.then1276, %if.end1261
  %tobool1282 = icmp ne i32 %width.0.in, 0
  %tobool1282.not = xor i1 %tobool1282, true
  %tobool1285 = icmp eq i8 %left.1, 0
  %or.cond2249 = and i1 %tobool1285, %tobool1282.not
  %tobool1288 = icmp eq i8 %plus.1, 0
  %or.cond2250 = and i1 %or.cond2249, %tobool1288
  %tobool1291 = icmp eq i8 %alt.1, 0
  %or.cond2251 = and i1 %or.cond2250, %tobool1291
  %or.cond2251.not = xor i1 %or.cond2251, true
  %cmp1294 = icmp eq i8 %fill.2, 48
  %or.cond2252 = or i1 %cmp1294, %or.cond2251.not
  %tobool1263.not = xor i1 %tobool1263, true
  %brmerge2253 = or i1 %or.cond2252, %tobool1263.not
  %cmp1301 = icmp eq i8 %intsize.0, 113
  %or.cond2254 = or i1 %brmerge2253, %cmp1301
  br i1 %or.cond2254, label %if.end1332, label %if.then1303

if.then1303:                                      ; preds = %if.end1281
  %289 = load i8* %c, align 1, !tbaa !1
  %cmp1305 = icmp ne i8 %289, 103
  %tobool1308 = icmp eq i64 %precis.2, 0
  %or.cond2255 = or i1 %cmp1305, %tobool1308
  br i1 %or.cond2255, label %if.else1316, label %if.then1309

if.then1309:                                      ; preds = %if.then1303
  %conv1310 = fptrunc x86_fp80 %cond1237 to double
  %conv1311 = trunc i64 %precis.2 to i32
  %290 = load i8** @PL_efloatbuf, align 8, !tbaa !0
  %call1312 = call i8* @gcvt(double %conv1310, i32 %conv1311, i8* %290) #8
  %291 = load i8** @PL_efloatbuf, align 8, !tbaa !0
  %292 = load i8* %291, align 1, !tbaa !1
  %tobool1313 = icmp eq i8 %292, 0
  br i1 %tobool1313, label %if.end1332, label %float_converted

if.else1316:                                      ; preds = %if.then1303
  %cmp1318 = icmp eq i8 %289, 102
  %or.cond2256 = and i1 %cmp1318, %tobool1308
  br i1 %or.cond2256, label %if.then1322, label %if.end1332

if.then1322:                                      ; preds = %if.else1316
  %conv1323 = fptrunc x86_fp80 %cond1237 to double
  %call1326 = call fastcc i8* @F0convert(double %conv1323, i8* %add.ptr1092, i64* %elen) #7
  %tobool1327 = icmp eq i8* %call1326, null
  br i1 %tobool1327, label %if.end1332, label %sw.epilog1598

if.end1332:                                       ; preds = %if.then1322, %if.then1309, %if.end1281, %if.else1316
  store i8 0, i8* %incdec.ptr1335, align 2, !tbaa !1
  %293 = load i8* %c, align 1, !tbaa !1
  store i8 %293, i8* %incdec.ptr1336, align 1, !tbaa !1
  br i1 %cmp1301, label %while.body1345, label %if.end1349

while.body1345:                                   ; preds = %if.end1332, %while.body1345
  %p1341.02343 = phi i8* [ %incdec.ptr1346, %while.body1345 ], [ getelementptr inbounds ([3 x i8]* @Perl_sv_vcatpvfn.prifldbl, i64 0, i64 0), %if.end1332 ]
  %eptr.62342 = phi i8* [ %incdec.ptr1347, %while.body1345 ], [ %incdec.ptr1336, %if.end1332 ]
  %incdec.ptr1346 = getelementptr inbounds i8* %p1341.02343, i64 -1
  %294 = load i8* %p1341.02343, align 1, !tbaa !1
  %incdec.ptr1347 = getelementptr inbounds i8* %eptr.62342, i64 -1
  store i8 %294, i8* %incdec.ptr1347, align 1, !tbaa !1
  %cmp1343 = icmp ult i8* %incdec.ptr1346, getelementptr inbounds ([3 x i8]* @Perl_sv_vcatpvfn.prifldbl, i64 0, i64 0)
  br i1 %cmp1343, label %if.end1349, label %while.body1345

if.end1349:                                       ; preds = %while.body1345, %if.end1332
  %eptr.7 = phi i8* [ %incdec.ptr1336, %if.end1332 ], [ %incdec.ptr1347, %while.body1345 ]
  %tobool1350 = icmp eq i8 %has_precis.0, 0
  br i1 %tobool1350, label %if.end1363, label %if.then1351

if.then1351:                                      ; preds = %if.end1349
  %conv1352 = trunc i64 %precis.2 to i32
  br label %do.body1353

do.body1353:                                      ; preds = %do.body1353, %if.then1351
  %eptr.8 = phi i8* [ %eptr.7, %if.then1351 ], [ %incdec.ptr1357, %do.body1353 ]
  %base.3 = phi i32 [ %conv1352, %if.then1351 ], [ %div1359, %do.body1353 ]
  %rem1354 = urem i32 %base.3, 10
  %add13552221 = or i32 %rem1354, 48
  %conv1356 = trunc i32 %add13552221 to i8
  %incdec.ptr1357 = getelementptr inbounds i8* %eptr.8, i64 -1
  store i8 %conv1356, i8* %incdec.ptr1357, align 1, !tbaa !1
  %div1359 = udiv i32 %base.3, 10
  %295 = icmp ugt i32 %base.3, 9
  br i1 %295, label %do.body1353, label %do.end1361

do.end1361:                                       ; preds = %do.body1353
  %incdec.ptr1362 = getelementptr inbounds i8* %eptr.8, i64 -2
  store i8 46, i8* %incdec.ptr1362, align 1, !tbaa !1
  br label %if.end1363

if.end1363:                                       ; preds = %if.end1349, %do.end1361
  %eptr.9 = phi i8* [ %incdec.ptr1362, %do.end1361 ], [ %eptr.7, %if.end1349 ]
  %base.4 = phi i32 [ %div1359, %do.end1361 ], [ 0, %if.end1349 ]
  br i1 %tobool1282, label %do.body1367, label %if.end1376

do.body1367:                                      ; preds = %if.end1363, %do.body1367
  %eptr.10 = phi i8* [ %incdec.ptr1371, %do.body1367 ], [ %eptr.9, %if.end1363 ]
  %base.5 = phi i32 [ %div1373, %do.body1367 ], [ %width.0.in, %if.end1363 ]
  %rem1368 = urem i32 %base.5, 10
  %add13692220 = or i32 %rem1368, 48
  %conv1370 = trunc i32 %add13692220 to i8
  %incdec.ptr1371 = getelementptr inbounds i8* %eptr.10, i64 -1
  store i8 %conv1370, i8* %incdec.ptr1371, align 1, !tbaa !1
  %div1373 = udiv i32 %base.5, 10
  %296 = icmp ugt i32 %base.5, 9
  br i1 %296, label %do.body1367, label %if.end1376

if.end1376:                                       ; preds = %do.body1367, %if.end1363
  %eptr.11 = phi i8* [ %eptr.9, %if.end1363 ], [ %incdec.ptr1371, %do.body1367 ]
  %base.6 = phi i32 [ %base.4, %if.end1363 ], [ %div1373, %do.body1367 ]
  br i1 %cmp1294, label %if.then1380, label %if.end1382

if.then1380:                                      ; preds = %if.end1376
  %incdec.ptr1381 = getelementptr inbounds i8* %eptr.11, i64 -1
  store i8 48, i8* %incdec.ptr1381, align 1, !tbaa !1
  br label %if.end1382

if.end1382:                                       ; preds = %if.then1380, %if.end1376
  %eptr.12 = phi i8* [ %incdec.ptr1381, %if.then1380 ], [ %eptr.11, %if.end1376 ]
  br i1 %tobool1285, label %if.end1386, label %if.then1384

if.then1384:                                      ; preds = %if.end1382
  %incdec.ptr1385 = getelementptr inbounds i8* %eptr.12, i64 -1
  store i8 45, i8* %incdec.ptr1385, align 1, !tbaa !1
  br label %if.end1386

if.end1386:                                       ; preds = %if.end1382, %if.then1384
  %eptr.13 = phi i8* [ %incdec.ptr1385, %if.then1384 ], [ %eptr.12, %if.end1382 ]
  br i1 %tobool1288, label %if.end1390, label %if.then1388

if.then1388:                                      ; preds = %if.end1386
  %incdec.ptr1389 = getelementptr inbounds i8* %eptr.13, i64 -1
  store i8 %plus.1, i8* %incdec.ptr1389, align 1, !tbaa !1
  br label %if.end1390

if.end1390:                                       ; preds = %if.end1386, %if.then1388
  %eptr.14 = phi i8* [ %incdec.ptr1389, %if.then1388 ], [ %eptr.13, %if.end1386 ]
  br i1 %tobool1291, label %if.end1394, label %if.then1392

if.then1392:                                      ; preds = %if.end1390
  %incdec.ptr1393 = getelementptr inbounds i8* %eptr.14, i64 -1
  store i8 35, i8* %incdec.ptr1393, align 1, !tbaa !1
  br label %if.end1394

if.end1394:                                       ; preds = %if.end1390, %if.then1392
  %eptr.15 = phi i8* [ %incdec.ptr1393, %if.then1392 ], [ %eptr.14, %if.end1390 ]
  %incdec.ptr1395 = getelementptr inbounds i8* %eptr.15, i64 -1
  store i8 37, i8* %incdec.ptr1395, align 1, !tbaa !1
  %297 = load i8** @PL_efloatbuf, align 8, !tbaa !0
  br i1 %cmp1301, label %if.then1399, label %if.else1401

if.then1399:                                      ; preds = %if.end1394
  %call1400 = call i32 (i8*, i8*, ...)* @sprintf(i8* %297, i8* %incdec.ptr1395, x86_fp80 %cond1237) #8
  br label %float_converted

if.else1401:                                      ; preds = %if.end1394
  %conv1402 = fptrunc x86_fp80 %cond1237 to double
  %call1403 = call i32 (i8*, i8*, ...)* @sprintf(i8* %297, i8* %incdec.ptr1395, double %conv1402) #8
  br label %float_converted

float_converted:                                  ; preds = %if.then1309, %if.then1399, %if.else1401
  %base.7 = phi i32 [ %base.6, %if.then1399 ], [ %base.6, %if.else1401 ], [ 0, %if.then1309 ]
  %298 = load i8** @PL_efloatbuf, align 8, !tbaa !0
  %call1405 = call i64 @strlen(i8* %298) #8
  store i64 %call1405, i64* %elen, align 8, !tbaa !5
  br label %sw.epilog1598

sw.bb1406:                                        ; preds = %if.end651
  %299 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_cur1408 = getelementptr inbounds i8* %299, i64 8
  %300 = bitcast i8* %xpv_cur1408 to i64*
  %301 = load i64* %300, align 8, !tbaa !5
  %302 = load i64* %origlen, align 8, !tbaa !5
  %sub1409 = sub i64 %301, %302
  %conv1410 = trunc i64 %sub1409 to i32
  store i32 %conv1410, i32* %i, align 4, !tbaa !3
  %brmerge2258 = or i1 %tobool625, %tobool168.not
  br i1 %brmerge2258, label %if.else1486, label %if.then1414

if.then1414:                                      ; preds = %sw.bb1406
  %conv1415 = sext i8 %intsize.0 to i32
  switch i32 %conv1415, label %sw.default1430 [
    i32 104, label %sw.bb1416
    i32 108, label %sw.bb1443
    i32 86, label %sw.bb1457
    i32 113, label %sw.bb1471
  ]

sw.bb1416:                                        ; preds = %if.then1414
  %conv1417 = trunc i64 %sub1409 to i16
  %gp_offset1420 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1421 = icmp ult i32 %gp_offset1420, 41
  br i1 %fits_in_gp1421, label %vaarg.in_reg1422, label %vaarg.in_mem1424

vaarg.in_reg1422:                                 ; preds = %sw.bb1416
  %reg_save_area1423 = load i8** %55, align 8
  %303 = sext i32 %gp_offset1420 to i64
  %304 = getelementptr i8* %reg_save_area1423, i64 %303
  %305 = add i32 %gp_offset1420, 8
  store i32 %305, i32* %gp_offset_p533, align 4
  br label %vaarg.end1428

vaarg.in_mem1424:                                 ; preds = %sw.bb1416
  %overflow_arg_area1426 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1427 = getelementptr i8* %overflow_arg_area1426, i64 8
  store i8* %overflow_arg_area.next1427, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1428

vaarg.end1428:                                    ; preds = %vaarg.in_mem1424, %vaarg.in_reg1422
  %vaarg.addr1429.in = phi i8* [ %304, %vaarg.in_reg1422 ], [ %overflow_arg_area1426, %vaarg.in_mem1424 ]
  %vaarg.addr1429 = bitcast i8* %vaarg.addr1429.in to i16**
  %306 = load i16** %vaarg.addr1429, align 8
  store i16 %conv1417, i16* %306, align 2, !tbaa !4
  br label %for.inc1824

sw.default1430:                                   ; preds = %if.then1414
  %gp_offset1433 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1434 = icmp ult i32 %gp_offset1433, 41
  br i1 %fits_in_gp1434, label %vaarg.in_reg1435, label %vaarg.in_mem1437

vaarg.in_reg1435:                                 ; preds = %sw.default1430
  %reg_save_area1436 = load i8** %55, align 8
  %307 = sext i32 %gp_offset1433 to i64
  %308 = getelementptr i8* %reg_save_area1436, i64 %307
  %309 = add i32 %gp_offset1433, 8
  store i32 %309, i32* %gp_offset_p533, align 4
  br label %vaarg.end1441

vaarg.in_mem1437:                                 ; preds = %sw.default1430
  %overflow_arg_area1439 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1440 = getelementptr i8* %overflow_arg_area1439, i64 8
  store i8* %overflow_arg_area.next1440, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1441

vaarg.end1441:                                    ; preds = %vaarg.in_mem1437, %vaarg.in_reg1435
  %vaarg.addr1442.in = phi i8* [ %308, %vaarg.in_reg1435 ], [ %overflow_arg_area1439, %vaarg.in_mem1437 ]
  %vaarg.addr1442 = bitcast i8* %vaarg.addr1442.in to i32**
  %310 = load i32** %vaarg.addr1442, align 8
  store i32 %conv1410, i32* %310, align 4, !tbaa !3
  br label %for.inc1824

sw.bb1443:                                        ; preds = %if.then1414
  %sext2211 = shl i64 %sub1409, 32
  %conv1444 = ashr exact i64 %sext2211, 32
  %gp_offset1447 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1448 = icmp ult i32 %gp_offset1447, 41
  br i1 %fits_in_gp1448, label %vaarg.in_reg1449, label %vaarg.in_mem1451

vaarg.in_reg1449:                                 ; preds = %sw.bb1443
  %reg_save_area1450 = load i8** %55, align 8
  %311 = sext i32 %gp_offset1447 to i64
  %312 = getelementptr i8* %reg_save_area1450, i64 %311
  %313 = add i32 %gp_offset1447, 8
  store i32 %313, i32* %gp_offset_p533, align 4
  br label %vaarg.end1455

vaarg.in_mem1451:                                 ; preds = %sw.bb1443
  %overflow_arg_area1453 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1454 = getelementptr i8* %overflow_arg_area1453, i64 8
  store i8* %overflow_arg_area.next1454, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1455

vaarg.end1455:                                    ; preds = %vaarg.in_mem1451, %vaarg.in_reg1449
  %vaarg.addr1456.in = phi i8* [ %312, %vaarg.in_reg1449 ], [ %overflow_arg_area1453, %vaarg.in_mem1451 ]
  %vaarg.addr1456 = bitcast i8* %vaarg.addr1456.in to i64**
  %314 = load i64** %vaarg.addr1456, align 8
  store i64 %conv1444, i64* %314, align 8, !tbaa !5
  br label %for.inc1824

sw.bb1457:                                        ; preds = %if.then1414
  %sext2210 = shl i64 %sub1409, 32
  %conv1458 = ashr exact i64 %sext2210, 32
  %gp_offset1461 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1462 = icmp ult i32 %gp_offset1461, 41
  br i1 %fits_in_gp1462, label %vaarg.in_reg1463, label %vaarg.in_mem1465

vaarg.in_reg1463:                                 ; preds = %sw.bb1457
  %reg_save_area1464 = load i8** %55, align 8
  %315 = sext i32 %gp_offset1461 to i64
  %316 = getelementptr i8* %reg_save_area1464, i64 %315
  %317 = add i32 %gp_offset1461, 8
  store i32 %317, i32* %gp_offset_p533, align 4
  br label %vaarg.end1469

vaarg.in_mem1465:                                 ; preds = %sw.bb1457
  %overflow_arg_area1467 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1468 = getelementptr i8* %overflow_arg_area1467, i64 8
  store i8* %overflow_arg_area.next1468, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1469

vaarg.end1469:                                    ; preds = %vaarg.in_mem1465, %vaarg.in_reg1463
  %vaarg.addr1470.in = phi i8* [ %316, %vaarg.in_reg1463 ], [ %overflow_arg_area1467, %vaarg.in_mem1465 ]
  %vaarg.addr1470 = bitcast i8* %vaarg.addr1470.in to i64**
  %318 = load i64** %vaarg.addr1470, align 8
  store i64 %conv1458, i64* %318, align 8, !tbaa !5
  br label %for.inc1824

sw.bb1471:                                        ; preds = %if.then1414
  %sext = shl i64 %sub1409, 32
  %conv1472 = ashr exact i64 %sext, 32
  %gp_offset1475 = load i32* %gp_offset_p533, align 4
  %fits_in_gp1476 = icmp ult i32 %gp_offset1475, 41
  br i1 %fits_in_gp1476, label %vaarg.in_reg1477, label %vaarg.in_mem1479

vaarg.in_reg1477:                                 ; preds = %sw.bb1471
  %reg_save_area1478 = load i8** %55, align 8
  %319 = sext i32 %gp_offset1475 to i64
  %320 = getelementptr i8* %reg_save_area1478, i64 %319
  %321 = add i32 %gp_offset1475, 8
  store i32 %321, i32* %gp_offset_p533, align 4
  br label %vaarg.end1483

vaarg.in_mem1479:                                 ; preds = %sw.bb1471
  %overflow_arg_area1481 = load i8** %overflow_arg_area_p539, align 8
  %overflow_arg_area.next1482 = getelementptr i8* %overflow_arg_area1481, i64 8
  store i8* %overflow_arg_area.next1482, i8** %overflow_arg_area_p539, align 8
  br label %vaarg.end1483

vaarg.end1483:                                    ; preds = %vaarg.in_mem1479, %vaarg.in_reg1477
  %vaarg.addr1484.in = phi i8* [ %320, %vaarg.in_reg1477 ], [ %overflow_arg_area1481, %vaarg.in_mem1479 ]
  %vaarg.addr1484 = bitcast i8* %vaarg.addr1484.in to i64**
  %322 = load i64** %vaarg.addr1484, align 8
  store i64 %conv1472, i64* %322, align 8, !tbaa !5
  br label %for.inc1824

if.else1486:                                      ; preds = %sw.bb1406
  %sext2310 = shl i64 %sub1409, 32
  %conv1487 = ashr exact i64 %sext2310, 32
  call void @Perl_sv_setuv_mg(%struct.sv* %164, i64 %conv1487) #7
  br label %for.inc1824

unknown:                                          ; preds = %if.then266, %if.then278, %land.lhs.true520, %sw.bb821, %sw.bb1190, %if.end651, %sw.bb772
  %argsv.5 = phi %struct.sv* [ %argsv.02424, %land.lhs.true520 ], [ %164, %if.end651 ], [ %164, %sw.bb1190 ], [ %164, %sw.bb821 ], [ %164, %sw.bb772 ], [ %argsv.02424, %if.then278 ], [ %argsv.02424, %if.then266 ]
  br i1 %tobool168, label %if.end1556, label %land.lhs.true1491

land.lhs.true1491:                                ; preds = %unknown
  %323 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %323, i64 0, i32 14
  %324 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp1492 = icmp eq %struct.sv* %324, null
  br i1 %cmp1492, label %lor.lhs.false1510, label %land.lhs.true1494

land.lhs.true1494:                                ; preds = %land.lhs.true1491
  %325 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1495 = getelementptr inbounds %struct.cop* %325, i64 0, i32 14
  %326 = load %struct.sv** %cop_warnings1495, align 8, !tbaa !0
  %cmp1496 = icmp eq %struct.sv* %326, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp1496, label %lor.lhs.false1510, label %land.lhs.true1498

land.lhs.true1498:                                ; preds = %land.lhs.true1494
  %327 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1499 = getelementptr inbounds %struct.cop* %327, i64 0, i32 14
  %328 = load %struct.sv** %cop_warnings1499, align 8, !tbaa !0
  %cmp1500 = icmp eq %struct.sv* %328, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp1500, label %land.lhs.true1518, label %lor.lhs.false1502

lor.lhs.false1502:                                ; preds = %land.lhs.true1498
  %329 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1503 = getelementptr inbounds %struct.cop* %329, i64 0, i32 14
  %330 = load %struct.sv** %cop_warnings1503, align 8, !tbaa !0
  %sv_any1504 = getelementptr inbounds %struct.sv* %330, i64 0, i32 0
  %331 = load i8** %sv_any1504, align 8, !tbaa !0
  %xpv_pv1505 = bitcast i8* %331 to i8**
  %332 = load i8** %xpv_pv1505, align 8, !tbaa !0
  %arrayidx1506 = getelementptr inbounds i8* %332, i64 8
  %333 = load i8* %arrayidx1506, align 1, !tbaa !1
  %and1508 = and i8 %333, 16
  %tobool1509 = icmp eq i8 %and1508, 0
  br i1 %tobool1509, label %lor.lhs.false1510, label %land.lhs.true1518

lor.lhs.false1510:                                ; preds = %lor.lhs.false1502, %land.lhs.true1494, %land.lhs.true1491
  %334 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1511 = getelementptr inbounds %struct.cop* %334, i64 0, i32 14
  %335 = load %struct.sv** %cop_warnings1511, align 8, !tbaa !0
  %cmp1512 = icmp eq %struct.sv* %335, null
  br i1 %cmp1512, label %land.lhs.true1514, label %if.end1556

land.lhs.true1514:                                ; preds = %lor.lhs.false1510
  %336 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and1516 = and i8 %336, 1
  %tobool1517 = icmp eq i8 %and1516, 0
  br i1 %tobool1517, label %if.end1556, label %land.lhs.true1518

land.lhs.true1518:                                ; preds = %lor.lhs.false1502, %land.lhs.true1514, %land.lhs.true1498
  %337 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_type = getelementptr inbounds %struct.op* %337, i64 0, i32 4
  %338 = load i16* %op_type, align 2, !tbaa !4
  switch i16 %338, label %if.end1556 [
    i16 208, label %if.then1527
    i16 115, label %if.then1527
  ]

if.then1527:                                      ; preds = %land.lhs.true1518, %land.lhs.true1518
  %call1528 = call %struct.sv* @Perl_sv_newmortal() #7
  %339 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_type1529 = getelementptr inbounds %struct.op* %339, i64 0, i32 4
  %340 = load i16* %op_type1529, align 2, !tbaa !4
  %cmp1531 = icmp eq i16 %340, 208
  %cond1533 = select i1 %cmp1531, i8* getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str63, i64 0, i64 0)
  call void (%struct.sv*, i8*, ...)* @Perl_sv_setpvf(%struct.sv* %call1528, i8* getelementptr inbounds ([33 x i8]* @.str62, i64 0, i64 0), i8* %cond1533) #7
  %341 = load i8* %c, align 1, !tbaa !1
  %tobool1534 = icmp eq i8 %341, 0
  br i1 %tobool1534, label %if.else1554, label %if.then1535

if.then1535:                                      ; preds = %if.then1527
  %notlhs = icmp sgt i8 %341, 32
  %notrhs = icmp ne i8 %341, 127
  %or.cond2259.not = and i1 %notrhs, %notlhs
  %cmp1545 = icmp eq i8 %341, 32
  %or.cond2309 = or i1 %or.cond2259.not, %cmp1545
  br i1 %or.cond2309, label %if.then1547, label %if.else1550

if.then1547:                                      ; preds = %if.then1535
  %conv15482223 = zext i8 %341 to i32
  call void (%struct.sv*, i8*, ...)* @Perl_sv_catpvf(%struct.sv* %call1528, i8* getelementptr inbounds ([7 x i8]* @.str64, i64 0, i64 0), i32 %conv15482223) #7
  br label %if.end1555

if.else1550:                                      ; preds = %if.then1535
  %conv15512222 = zext i8 %341 to i64
  call void (%struct.sv*, i8*, ...)* @Perl_sv_catpvf(%struct.sv* %call1528, i8* getelementptr inbounds ([11 x i8]* @.str65, i64 0, i64 0), i64 %conv15512222) #7
  br label %if.end1555

if.else1554:                                      ; preds = %if.then1527
  call void @Perl_sv_catpv(%struct.sv* %call1528, i8* getelementptr inbounds ([14 x i8]* @.str66, i64 0, i64 0)) #7
  br label %if.end1555

if.end1555:                                       ; preds = %if.then1547, %if.else1550, %if.else1554
  call void (i32, i8*, ...)* @Perl_warner(i32 34, i8* getelementptr inbounds ([3 x i8]* @.str67, i64 0, i64 0), %struct.sv* %call1528) #8
  br label %if.end1556

if.end1556:                                       ; preds = %land.lhs.true1518, %land.lhs.true1514, %lor.lhs.false1510, %unknown, %if.end1555
  %342 = load i8* %c, align 1, !tbaa !1
  %cmp1558 = icmp eq i8 %342, 0
  %343 = load i8** %q, align 8, !tbaa !0
  br i1 %cmp1558, label %if.then1560, label %if.end1562

if.then1560:                                      ; preds = %if.end1556
  %incdec.ptr1561 = getelementptr inbounds i8* %343, i64 -1
  store i8* %incdec.ptr1561, i8** %q, align 8, !tbaa !0
  br label %if.end1562

if.end1562:                                       ; preds = %if.end1556, %if.then1560
  %344 = phi i8* [ %incdec.ptr1561, %if.then1560 ], [ %343, %if.end1556 ]
  %sub.ptr.lhs.cast1563 = ptrtoint i8* %344 to i64
  %sub.ptr.rhs.cast1564 = ptrtoint i8* %p.1 to i64
  %sub.ptr.sub1565 = sub i64 %sub.ptr.lhs.cast1563, %sub.ptr.rhs.cast1564
  store i64 %sub.ptr.sub1565, i64* %elen, align 8, !tbaa !5
  %345 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_len = getelementptr inbounds i8* %345, i64 16
  %346 = bitcast i8* %xpv_len to i64*
  %347 = load i64* %346, align 8, !tbaa !5
  %xpv_cur1568 = getelementptr inbounds i8* %345, i64 8
  %348 = bitcast i8* %xpv_cur1568 to i64*
  %349 = load i64* %348, align 8, !tbaa !5
  %add1569 = add i64 %sub.ptr.sub1565, 1
  %add1570 = add i64 %add1569, %349
  %cmp1571 = icmp ult i64 %347, %add1570
  br i1 %cmp1571, label %cond.true1573, label %cond.end1582

cond.true1573:                                    ; preds = %if.end1562
  %call1578 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add1570) #7
  %.pre2465 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_cur1587.phi.trans.insert = getelementptr inbounds i8* %.pre2465, i64 8
  %.phi.trans.insert = bitcast i8* %xpv_cur1587.phi.trans.insert to i64*
  %.pre2466 = load i64* %.phi.trans.insert, align 8, !tbaa !5
  %.pre2467 = load i64* %elen, align 8, !tbaa !5
  br label %cond.end1582

cond.end1582:                                     ; preds = %if.end1562, %cond.true1573
  %350 = phi i64 [ %sub.ptr.sub1565, %if.end1562 ], [ %.pre2467, %cond.true1573 ]
  %351 = phi i64 [ %349, %if.end1562 ], [ %.pre2466, %cond.true1573 ]
  %352 = phi i8* [ %345, %if.end1562 ], [ %.pre2465, %cond.true1573 ]
  %xpv_pv1585 = bitcast i8* %352 to i8**
  %353 = load i8** %xpv_pv1585, align 8, !tbaa !0
  %add.ptr1588 = getelementptr inbounds i8* %353, i64 %351
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr1588, i8* %p.1, i64 %350, i32 1, i1 false)
  %354 = load i64* %elen, align 8, !tbaa !5
  %add.ptr1588.sum = add i64 %354, %351
  %add.ptr1590 = getelementptr inbounds i8* %353, i64 %add.ptr1588.sum
  store i8 0, i8* %add.ptr1590, align 1, !tbaa !1
  %355 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_pv1592 = bitcast i8* %355 to i8**
  %356 = load i8** %xpv_pv1592, align 8, !tbaa !0
  %sub.ptr.lhs.cast1593 = ptrtoint i8* %add.ptr1590 to i64
  %sub.ptr.rhs.cast1594 = ptrtoint i8* %356 to i64
  %sub.ptr.sub1595 = sub i64 %sub.ptr.lhs.cast1593, %sub.ptr.rhs.cast1594
  %xpv_cur1597 = getelementptr inbounds i8* %355, i64 8
  %357 = bitcast i8* %xpv_cur1597 to i64*
  store i64 %sub.ptr.sub1595, i64* %357, align 8, !tbaa !5
  br label %for.inc1824

sw.epilog1598:                                    ; preds = %if.then1322, %string, %sw.epilog1163, %if.else1175, %land.lhs.true1181, %if.then1185, %if.then1173, %land.lhs.true816, %if.then819, %float_converted
  %alt.6 = phi i8 [ %alt.1, %if.then819 ], [ %alt.5, %if.then1173 ], [ %alt.5, %if.then1185 ], [ %alt.5, %land.lhs.true1181 ], [ %alt.5, %if.else1175 ], [ %alt.5, %sw.epilog1163 ], [ %alt.1, %land.lhs.true816 ], [ %alt.1, %float_converted ], [ %alt.1, %string ], [ %alt.1, %if.then1322 ]
  %vectorize.4 = phi i8 [ 0, %if.then819 ], [ %vectorize.32268, %if.then1173 ], [ %vectorize.32268, %if.then1185 ], [ %vectorize.32268, %land.lhs.true1181 ], [ %vectorize.32268, %if.else1175 ], [ %vectorize.32268, %sw.epilog1163 ], [ 0, %land.lhs.true816 ], [ 0, %float_converted ], [ 0, %string ], [ 0, %if.then1322 ]
  %width.5 = phi i64 [ %width.2, %if.then819 ], [ %width.42270, %if.then1173 ], [ %width.42270, %if.then1185 ], [ %width.42270, %land.lhs.true1181 ], [ %width.42270, %if.else1175 ], [ %width.42270, %sw.epilog1163 ], [ %width.2, %land.lhs.true816 ], [ %width.0, %float_converted ], [ %width.2, %string ], [ %width.0, %if.then1322 ]
  %zeros.2 = phi i64 [ 0, %if.then819 ], [ %sub1174, %if.then1173 ], [ %zeros.12272, %if.then1185 ], [ %zeros.12272, %land.lhs.true1181 ], [ %zeros.12272, %if.else1175 ], [ %zeros.12272, %sw.epilog1163 ], [ 0, %land.lhs.true816 ], [ 0, %float_converted ], [ 0, %string ], [ 0, %if.then1322 ]
  %precis.7 = phi i64 [ %precis.4, %if.then819 ], [ %precis.62274, %if.then1173 ], [ 0, %if.then1185 ], [ 0, %land.lhs.true1181 ], [ %precis.62274, %if.else1175 ], [ %precis.62274, %sw.epilog1163 ], [ %precis.4, %land.lhs.true816 ], [ %precis.2, %float_converted ], [ %precis.4, %string ], [ 0, %if.then1322 ]
  %is_utf8.6 = phi i8 [ %is_utf8.3, %if.then819 ], [ %is_utf8.52276, %if.then1173 ], [ %is_utf8.52276, %if.then1185 ], [ %is_utf8.52276, %land.lhs.true1181 ], [ %is_utf8.52276, %if.else1175 ], [ %is_utf8.52276, %sw.epilog1163 ], [ %is_utf8.3, %land.lhs.true816 ], [ %is_utf8.2, %float_converted ], [ %is_utf8.3, %string ], [ %is_utf8.2, %if.then1322 ]
  %esignlen.5 = phi i64 [ 0, %if.then819 ], [ %esignlen.4, %if.then1173 ], [ %esignlen.4, %if.then1185 ], [ %esignlen.4, %land.lhs.true1181 ], [ %esignlen.4, %if.else1175 ], [ %esignlen.4, %sw.epilog1163 ], [ 0, %land.lhs.true816 ], [ 0, %float_converted ], [ 0, %string ], [ 0, %if.then1322 ]
  %eptr.16 = phi i8* [ %eptr.0, %if.then819 ], [ %eptr.5, %if.then1173 ], [ %eptr.5, %if.then1185 ], [ %eptr.5, %land.lhs.true1181 ], [ %eptr.5, %if.else1175 ], [ %eptr.5, %sw.epilog1163 ], [ %eptr.0, %land.lhs.true816 ], [ %298, %float_converted ], [ %eptr.0, %string ], [ %call1326, %if.then1322 ]
  %vecstr.5 = phi i8* [ %vecstr.1, %if.then819 ], [ %vecstr.42279, %if.then1173 ], [ %vecstr.42279, %if.then1185 ], [ %vecstr.42279, %land.lhs.true1181 ], [ %vecstr.42279, %if.else1175 ], [ %vecstr.42279, %sw.epilog1163 ], [ %vecstr.1, %land.lhs.true816 ], [ %vecstr.1, %float_converted ], [ %vecstr.1, %string ], [ %vecstr.1, %if.then1322 ]
  %base.8 = phi i32 [ 0, %if.then819 ], [ %base.22282, %if.then1173 ], [ %base.22282, %if.then1185 ], [ %base.22282, %land.lhs.true1181 ], [ %base.22282, %if.else1175 ], [ %base.22282, %sw.epilog1163 ], [ 0, %land.lhs.true816 ], [ %base.7, %float_converted ], [ 0, %string ], [ 0, %if.then1322 ]
  %has_utf8.4 = phi i8 [ %has_utf8.12420, %if.then819 ], [ %has_utf8.32283, %if.then1173 ], [ %has_utf8.32283, %if.then1185 ], [ %has_utf8.32283, %land.lhs.true1181 ], [ %has_utf8.32283, %if.else1175 ], [ %has_utf8.32283, %sw.epilog1163 ], [ %has_utf8.12420, %land.lhs.true816 ], [ %has_utf8.12420, %float_converted ], [ %has_utf8.12420, %string ], [ %has_utf8.12420, %if.then1322 ]
  %argsv.6 = phi %struct.sv* [ %argsv.2, %if.then819 ], [ %argsv.42285, %if.then1173 ], [ %argsv.42285, %if.then1185 ], [ %argsv.42285, %land.lhs.true1181 ], [ %argsv.42285, %if.else1175 ], [ %argsv.42285, %sw.epilog1163 ], [ %argsv.2, %land.lhs.true816 ], [ %164, %float_converted ], [ %argsv.2, %string ], [ %164, %if.then1322 ]
  %svix.22 = phi i32 [ %svix.19, %if.then819 ], [ %svix.212287, %if.then1173 ], [ %svix.212287, %if.then1185 ], [ %svix.212287, %land.lhs.true1181 ], [ %svix.212287, %if.else1175 ], [ %svix.212287, %sw.epilog1163 ], [ %svix.19, %land.lhs.true816 ], [ %svix.18, %float_converted ], [ %svix.19, %string ], [ %svix.18, %if.then1322 ]
  %add1599 = add i64 %esignlen.5, %zeros.2
  %358 = load i64* %elen, align 8, !tbaa !5
  %add1600 = add i64 %add1599, %358
  %cmp1603 = icmp eq i8 %is_utf8.6, %has_utf8.4
  br i1 %cmp1603, label %if.end1648, label %if.then1605

if.then1605:                                      ; preds = %sw.epilog1598
  %tobool1606 = icmp eq i8 %is_utf8.6, 0
  br i1 %tobool1606, label %if.else1614, label %if.then1607

if.then1607:                                      ; preds = %if.then1605
  %359 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_cur1609 = getelementptr inbounds i8* %359, i64 8
  %360 = bitcast i8* %xpv_cur1609 to i64*
  %361 = load i64* %360, align 8, !tbaa !5
  %tobool1610 = icmp eq i64 %361, 0
  br i1 %tobool1610, label %if.end1623, label %if.then1611

if.then1611:                                      ; preds = %if.then1607
  %call1612 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %sv, i32 2) #7
  %.pre2473 = load i64* %elen, align 8, !tbaa !5
  br label %if.end1623

if.else1614:                                      ; preds = %if.then1605
  %call1616 = call %struct.sv* @Perl_newSVpvn(i8* %eptr.16, i64 %358) #7
  %call1617 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call1616) #7
  %call1618 = call i64 @Perl_sv_utf8_upgrade_flags(%struct.sv* %call1617, i32 2) #7
  %sv_any1619 = getelementptr inbounds %struct.sv* %call1617, i64 0, i32 0
  %362 = load i8** %sv_any1619, align 8, !tbaa !0
  %xpv_pv1620 = bitcast i8* %362 to i8**
  %363 = load i8** %xpv_pv1620, align 8, !tbaa !0
  %xpv_cur1622 = getelementptr inbounds i8* %362, i64 8
  %364 = bitcast i8* %xpv_cur1622 to i64*
  %365 = load i64* %364, align 8, !tbaa !5
  store i64 %365, i64* %elen, align 8, !tbaa !5
  br label %if.end1623

if.end1623:                                       ; preds = %if.then1607, %if.then1611, %if.else1614
  %366 = phi i64 [ %.pre2473, %if.then1611 ], [ %358, %if.then1607 ], [ %365, %if.else1614 ]
  %eptr.17 = phi i8* [ %eptr.16, %if.then1611 ], [ %eptr.16, %if.then1607 ], [ %363, %if.else1614 ]
  %367 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_len1625 = getelementptr inbounds i8* %367, i64 16
  %368 = bitcast i8* %xpv_len1625 to i64*
  %369 = load i64* %368, align 8, !tbaa !5
  %xpv_cur1627 = getelementptr inbounds i8* %367, i64 8
  %370 = bitcast i8* %xpv_cur1627 to i64*
  %371 = load i64* %370, align 8, !tbaa !5
  %add1628 = add i64 %371, 1
  %add1629 = add i64 %add1628, %366
  %cmp1630 = icmp ult i64 %369, %add1629
  br i1 %cmp1630, label %cond.true1632, label %cond.end1641

cond.true1632:                                    ; preds = %if.end1623
  %call1637 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add1629) #7
  %.pre2474 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_cur1646.phi.trans.insert = getelementptr inbounds i8* %.pre2474, i64 8
  %.phi.trans.insert2475 = bitcast i8* %xpv_cur1646.phi.trans.insert to i64*
  %.pre2476 = load i64* %.phi.trans.insert2475, align 8, !tbaa !5
  br label %cond.end1641

cond.end1641:                                     ; preds = %if.end1623, %cond.true1632
  %372 = phi i64 [ %371, %if.end1623 ], [ %.pre2476, %cond.true1632 ]
  %373 = phi i8* [ %367, %if.end1623 ], [ %.pre2474, %cond.true1632 ]
  %xpv_pv1644 = bitcast i8* %373 to i8**
  %374 = load i8** %xpv_pv1644, align 8, !tbaa !0
  %add.ptr1647 = getelementptr inbounds i8* %374, i64 %372
  store i8 0, i8* %add.ptr1647, align 1, !tbaa !1
  br label %if.end1648

if.end1648:                                       ; preds = %sw.epilog1598, %cond.end1641
  %eptr.18 = phi i8* [ %eptr.17, %cond.end1641 ], [ %eptr.16, %sw.epilog1598 ]
  %tobool1650 = icmp ne i8 %left.1, 0
  br i1 %tobool1650, label %land.lhs.true1651, label %if.end1698

land.lhs.true1651:                                ; preds = %if.end1648
  %375 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1652 = getelementptr inbounds %struct.cop* %375, i64 0, i32 14
  %376 = load %struct.sv** %cop_warnings1652, align 8, !tbaa !0
  %cmp1653 = icmp eq %struct.sv* %376, null
  br i1 %cmp1653, label %lor.lhs.false1671, label %land.lhs.true1655

land.lhs.true1655:                                ; preds = %land.lhs.true1651
  %377 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1656 = getelementptr inbounds %struct.cop* %377, i64 0, i32 14
  %378 = load %struct.sv** %cop_warnings1656, align 8, !tbaa !0
  %cmp1657 = icmp eq %struct.sv* %378, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp1657, label %lor.lhs.false1671, label %land.lhs.true1659

land.lhs.true1659:                                ; preds = %land.lhs.true1655
  %379 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1660 = getelementptr inbounds %struct.cop* %379, i64 0, i32 14
  %380 = load %struct.sv** %cop_warnings1660, align 8, !tbaa !0
  %cmp1661 = icmp eq %struct.sv* %380, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp1661, label %land.lhs.true1679, label %lor.lhs.false1663

lor.lhs.false1663:                                ; preds = %land.lhs.true1659
  %381 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1664 = getelementptr inbounds %struct.cop* %381, i64 0, i32 14
  %382 = load %struct.sv** %cop_warnings1664, align 8, !tbaa !0
  %sv_any1665 = getelementptr inbounds %struct.sv* %382, i64 0, i32 0
  %383 = load i8** %sv_any1665, align 8, !tbaa !0
  %xpv_pv1666 = bitcast i8* %383 to i8**
  %384 = load i8** %xpv_pv1666, align 8, !tbaa !0
  %arrayidx1667 = getelementptr inbounds i8* %384, i64 8
  %385 = load i8* %arrayidx1667, align 1, !tbaa !1
  %and1669 = and i8 %385, 16
  %tobool1670 = icmp eq i8 %and1669, 0
  br i1 %tobool1670, label %lor.lhs.false1671, label %land.lhs.true1679

lor.lhs.false1671:                                ; preds = %lor.lhs.false1663, %land.lhs.true1655, %land.lhs.true1651
  %386 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings1672 = getelementptr inbounds %struct.cop* %386, i64 0, i32 14
  %387 = load %struct.sv** %cop_warnings1672, align 8, !tbaa !0
  %cmp1673 = icmp eq %struct.sv* %387, null
  br i1 %cmp1673, label %land.lhs.true1675, label %if.end1698

land.lhs.true1675:                                ; preds = %lor.lhs.false1671
  %388 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and1677 = and i8 %388, 1
  %tobool1678 = icmp eq i8 %and1677, 0
  br i1 %tobool1678, label %if.end1698, label %land.lhs.true1679

land.lhs.true1679:                                ; preds = %lor.lhs.false1663, %land.lhs.true1675, %land.lhs.true1659
  %389 = load i64* %elen, align 8, !tbaa !5
  %call1680 = call i8* @memchr(i8* %eptr.18, i32 10, i64 %389) #8
  %tobool1681 = icmp eq i8* %call1680, null
  br i1 %tobool1681, label %if.end1698, label %land.lhs.true1682

land.lhs.true1682:                                ; preds = %land.lhs.true1679
  %390 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_type1683 = getelementptr inbounds %struct.op* %390, i64 0, i32 4
  %391 = load i16* %op_type1683, align 2, !tbaa !4
  switch i16 %391, label %if.end1698 [
    i16 208, label %if.then1692
    i16 115, label %if.then1692
  ]

if.then1692:                                      ; preds = %land.lhs.true1682, %land.lhs.true1682
  %cmp1695 = icmp eq i16 %391, 208
  %cond1697 = select i1 %cmp1695, i8* getelementptr inbounds ([1 x i8]* @.str1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str63, i64 0, i64 0)
  call void (i32, i8*, ...)* @Perl_warner(i32 34, i8* getelementptr inbounds ([46 x i8]* @.str68, i64 0, i64 0), i8* %cond1697) #8
  br label %if.end1698

if.end1698:                                       ; preds = %land.lhs.true1682, %land.lhs.true1679, %land.lhs.true1675, %lor.lhs.false1671, %if.end1648, %if.then1692
  %cmp1699 = icmp ugt i64 %add1600, %width.5
  %cond1704 = select i1 %cmp1699, i64 %add1600, i64 %width.5
  %sub1705 = sub i64 %cond1704, %add1600
  %392 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_len1707 = getelementptr inbounds i8* %392, i64 16
  %393 = bitcast i8* %xpv_len1707 to i64*
  %394 = load i64* %393, align 8, !tbaa !5
  %xpv_cur1709 = getelementptr inbounds i8* %392, i64 8
  %395 = bitcast i8* %xpv_cur1709 to i64*
  %396 = load i64* %395, align 8, !tbaa !5
  %397 = load i64* %dotstrlen, align 8, !tbaa !5
  %add1710 = add i64 %cond1704, 1
  %add1711 = add i64 %add1710, %396
  %add1712 = add i64 %add1711, %397
  %cmp1713 = icmp ult i64 %394, %add1712
  br i1 %cmp1713, label %cond.true1715, label %cond.end1725

cond.true1715:                                    ; preds = %if.end1698
  %call1721 = call i8* @Perl_sv_grow(%struct.sv* %sv, i64 %add1712) #7
  %.pre2470 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_cur1730.phi.trans.insert = getelementptr inbounds i8* %.pre2470, i64 8
  %.phi.trans.insert2471 = bitcast i8* %xpv_cur1730.phi.trans.insert to i64*
  %.pre2472 = load i64* %.phi.trans.insert2471, align 8, !tbaa !5
  br label %cond.end1725

cond.end1725:                                     ; preds = %if.end1698, %cond.true1715
  %398 = phi i64 [ %396, %if.end1698 ], [ %.pre2472, %cond.true1715 ]
  %399 = phi i8* [ %392, %if.end1698 ], [ %.pre2470, %cond.true1715 ]
  %xpv_pv1728 = bitcast i8* %399 to i8**
  %400 = load i8** %xpv_pv1728, align 8, !tbaa !0
  %add.ptr1731 = getelementptr inbounds i8* %400, i64 %398
  %tobool1732 = icmp ne i64 %esignlen.5, 0
  %cmp1735 = icmp eq i8 %fill.2, 48
  %or.cond2260 = and i1 %tobool1732, %cmp1735
  br i1 %or.cond2260, label %for.cond1738.preheader, label %if.end1749

for.cond1738.preheader:                           ; preds = %cond.end1725
  store i32 0, i32* %i, align 4, !tbaa !3
  %conv1739 = trunc i64 %esignlen.5 to i32
  %cmp17402344 = icmp sgt i32 %conv1739, 0
  br i1 %cmp17402344, label %for.body1742, label %if.end1749

for.body1742:                                     ; preds = %for.cond1738.preheader, %for.body1742.for.body1742_crit_edge
  %p.22346 = phi i8* [ %incdec.ptr1745, %for.body1742.for.body1742_crit_edge ], [ %add.ptr1731, %for.cond1738.preheader ]
  %storemerge22182345 = phi i64 [ %phitmp2491, %for.body1742.for.body1742_crit_edge ], [ 0, %for.cond1738.preheader ]
  %arrayidx1744 = getelementptr inbounds [4 x i8]* %esignbuf, i64 0, i64 %storemerge22182345
  %401 = load i8* %arrayidx1744, align 1, !tbaa !1
  %incdec.ptr1745 = getelementptr inbounds i8* %p.22346, i64 1
  store i8 %401, i8* %p.22346, align 1, !tbaa !1
  %402 = load i32* %i, align 4, !tbaa !3
  %inc1747 = add nsw i32 %402, 1
  store i32 %inc1747, i32* %i, align 4, !tbaa !3
  %cmp1740 = icmp slt i32 %inc1747, %conv1739
  br i1 %cmp1740, label %for.body1742.for.body1742_crit_edge, label %if.end1749

for.body1742.for.body1742_crit_edge:              ; preds = %for.body1742
  %phitmp2491 = sext i32 %inc1747 to i64
  br label %for.body1742

if.end1749:                                       ; preds = %for.cond1738.preheader, %for.body1742, %cond.end1725
  %p.3 = phi i8* [ %add.ptr1731, %cond.end1725 ], [ %add.ptr1731, %for.cond1738.preheader ], [ %incdec.ptr1745, %for.body1742 ]
  %tobool1750 = icmp ne i64 %cond1704, %add1600
  %tobool1752 = icmp eq i8 %left.1, 0
  %or.cond2261 = and i1 %tobool1750, %tobool1752
  br i1 %or.cond2261, label %if.then1753, label %if.end1756

if.then1753:                                      ; preds = %if.end1749
  call void @llvm.memset.p0i8.i64(i8* %p.3, i8 %fill.2, i64 %sub1705, i32 1, i1 false)
  %add.ptr1755 = getelementptr inbounds i8* %p.3, i64 %sub1705
  br label %if.end1756

if.end1756:                                       ; preds = %if.then1753, %if.end1749
  %p.4 = phi i8* [ %add.ptr1755, %if.then1753 ], [ %p.3, %if.end1749 ]
  %tobool1732.not = xor i1 %tobool1732, true
  %or.cond2262 = or i1 %cmp1735, %tobool1732.not
  br i1 %or.cond2262, label %if.end1774, label %for.cond1763.preheader

for.cond1763.preheader:                           ; preds = %if.end1756
  store i32 0, i32* %i, align 4, !tbaa !3
  %conv1764 = trunc i64 %esignlen.5 to i32
  %cmp17652348 = icmp sgt i32 %conv1764, 0
  br i1 %cmp17652348, label %for.body1767, label %if.end1774

for.body1767:                                     ; preds = %for.cond1763.preheader, %for.body1767.for.body1767_crit_edge
  %p.52350 = phi i8* [ %incdec.ptr1770, %for.body1767.for.body1767_crit_edge ], [ %p.4, %for.cond1763.preheader ]
  %storemerge22172349 = phi i64 [ %phitmp, %for.body1767.for.body1767_crit_edge ], [ 0, %for.cond1763.preheader ]
  %arrayidx1769 = getelementptr inbounds [4 x i8]* %esignbuf, i64 0, i64 %storemerge22172349
  %403 = load i8* %arrayidx1769, align 1, !tbaa !1
  %incdec.ptr1770 = getelementptr inbounds i8* %p.52350, i64 1
  store i8 %403, i8* %p.52350, align 1, !tbaa !1
  %404 = load i32* %i, align 4, !tbaa !3
  %inc1772 = add nsw i32 %404, 1
  store i32 %inc1772, i32* %i, align 4, !tbaa !3
  %cmp1765 = icmp slt i32 %inc1772, %conv1764
  br i1 %cmp1765, label %for.body1767.for.body1767_crit_edge, label %if.end1774

for.body1767.for.body1767_crit_edge:              ; preds = %for.body1767
  %phitmp = sext i32 %inc1772 to i64
  br label %for.body1767

if.end1774:                                       ; preds = %for.cond1763.preheader, %for.body1767, %if.end1756
  %p.6 = phi i8* [ %p.4, %if.end1756 ], [ %p.4, %for.cond1763.preheader ], [ %incdec.ptr1770, %for.body1767 ]
  %tobool1775 = icmp eq i64 %zeros.2, 0
  br i1 %tobool1775, label %if.end1784, label %if.then1776

if.then1776:                                      ; preds = %if.end1774
  %conv1777 = trunc i64 %zeros.2 to i32
  store i32 %conv1777, i32* %i, align 4, !tbaa !3
  %tobool17792352 = icmp eq i32 %conv1777, 0
  br i1 %tobool17792352, label %if.end1784, label %for.body1780

for.body1780:                                     ; preds = %if.then1776, %for.body1780
  %p.72353 = phi i8* [ %incdec.ptr1781, %for.body1780 ], [ %p.6, %if.then1776 ]
  %incdec.ptr1781 = getelementptr inbounds i8* %p.72353, i64 1
  store i8 48, i8* %p.72353, align 1, !tbaa !1
  %405 = load i32* %i, align 4, !tbaa !3
  %dec = add nsw i32 %405, -1
  store i32 %dec, i32* %i, align 4, !tbaa !3
  %tobool1779 = icmp eq i32 %dec, 0
  br i1 %tobool1779, label %if.end1784, label %for.body1780

if.end1784:                                       ; preds = %if.then1776, %for.body1780, %if.end1774
  %p.8 = phi i8* [ %p.6, %if.end1774 ], [ %p.6, %if.then1776 ], [ %incdec.ptr1781, %for.body1780 ]
  %406 = load i64* %elen, align 8, !tbaa !5
  %tobool1785 = icmp eq i64 %406, 0
  br i1 %tobool1785, label %if.end1789, label %if.then1786

if.then1786:                                      ; preds = %if.end1784
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %p.8, i8* %eptr.18, i64 %406, i32 1, i1 false)
  %407 = load i64* %elen, align 8, !tbaa !5
  %add.ptr1788 = getelementptr inbounds i8* %p.8, i64 %407
  br label %if.end1789

if.end1789:                                       ; preds = %if.end1784, %if.then1786
  %p.9 = phi i8* [ %add.ptr1788, %if.then1786 ], [ %p.8, %if.end1784 ]
  %brmerge2263.demorgan = and i1 %tobool1750, %tobool1650
  br i1 %brmerge2263.demorgan, label %if.then1794, label %if.end1796

if.then1794:                                      ; preds = %if.end1789
  call void @llvm.memset.p0i8.i64(i8* %p.9, i8 32, i64 %sub1705, i32 1, i1 false)
  %add.ptr1795 = getelementptr inbounds i8* %p.9, i64 %sub1705
  br label %if.end1796

if.end1796:                                       ; preds = %if.end1789, %if.then1794
  %p.10 = phi i8* [ %add.ptr1795, %if.then1794 ], [ %p.9, %if.end1789 ]
  %tobool1797 = icmp eq i8 %vectorize.4, 0
  br i1 %tobool1797, label %if.end1805, label %if.then1798

if.then1798:                                      ; preds = %if.end1796
  %408 = load i64* %veclen, align 8, !tbaa !5
  %tobool1799 = icmp eq i64 %408, 0
  br i1 %tobool1799, label %if.end1805, label %if.then1800

if.then1800:                                      ; preds = %if.then1798
  %409 = load i64* %dotstrlen, align 8, !tbaa !5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %p.10, i8* %dotstr.2, i64 %409, i32 1, i1 false)
  %410 = load i64* %dotstrlen, align 8, !tbaa !5
  %add.ptr1802 = getelementptr inbounds i8* %p.10, i64 %410
  br label %if.end1805

if.end1805:                                       ; preds = %if.then1798, %if.end1796, %if.then1800
  %vectorize.5 = phi i8 [ %vectorize.4, %if.then1800 ], [ 0, %if.end1796 ], [ 0, %if.then1798 ]
  %p.11 = phi i8* [ %add.ptr1802, %if.then1800 ], [ %p.10, %if.end1796 ], [ %p.10, %if.then1798 ]
  %tobool1806 = icmp eq i8 %is_utf8.6, 0
  %has_utf8.4. = select i1 %tobool1806, i8 %has_utf8.4, i8 1
  %tobool1809 = icmp eq i8 %has_utf8.4., 0
  br i1 %tobool1809, label %if.end1813, label %if.then1810

if.then1810:                                      ; preds = %if.end1805
  %411 = load i32* %sv_flags, align 4, !tbaa !3
  %or1812 = or i32 %411, 536870912
  store i32 %or1812, i32* %sv_flags, align 4, !tbaa !3
  br label %if.end1813

if.end1813:                                       ; preds = %if.end1805, %if.then1810
  store i8 0, i8* %p.11, align 1, !tbaa !1
  %412 = load i8** %sv_any1566, align 8, !tbaa !0
  %xpv_pv1815 = bitcast i8* %412 to i8**
  %413 = load i8** %xpv_pv1815, align 8, !tbaa !0
  %sub.ptr.lhs.cast1816 = ptrtoint i8* %p.11 to i64
  %sub.ptr.rhs.cast1817 = ptrtoint i8* %413 to i64
  %sub.ptr.sub1818 = sub i64 %sub.ptr.lhs.cast1816, %sub.ptr.rhs.cast1817
  %xpv_cur1820 = getelementptr inbounds i8* %412, i64 8
  %414 = bitcast i8* %xpv_cur1820 to i64*
  store i64 %sub.ptr.sub1818, i64* %414, align 8, !tbaa !5
  %tobool1821 = icmp eq i8 %vectorize.5, 0
  br i1 %tobool1821, label %for.inc1824, label %vector

for.inc1824:                                      ; preds = %if.end1813, %vector, %if.else1486, %vaarg.end1483, %vaarg.end1469, %vaarg.end1455, %vaarg.end1441, %vaarg.end1428, %if.then849, %cond.end1582
  %has_utf8.6 = phi i8 [ %has_utf8.12420, %cond.end1582 ], [ %has_utf8.12420, %if.then849 ], [ %has_utf8.12420, %vaarg.end1428 ], [ %has_utf8.12420, %vaarg.end1441 ], [ %has_utf8.12420, %vaarg.end1455 ], [ %has_utf8.12420, %vaarg.end1469 ], [ %has_utf8.12420, %vaarg.end1483 ], [ %has_utf8.12420, %if.else1486 ], [ %has_utf8.2, %vector ], [ %has_utf8.4., %if.end1813 ]
  %argsv.7 = phi %struct.sv* [ %argsv.5, %cond.end1582 ], [ %164, %if.then849 ], [ %164, %vaarg.end1428 ], [ %164, %vaarg.end1441 ], [ %164, %vaarg.end1455 ], [ %164, %vaarg.end1469 ], [ %164, %vaarg.end1483 ], [ %164, %if.else1486 ], [ %argsv.3, %vector ], [ %argsv.6, %if.end1813 ]
  %svix.23 = phi i32 [ %svix.02426, %cond.end1582 ], [ %svix.18, %if.then849 ], [ %svix.18, %vaarg.end1428 ], [ %svix.18, %vaarg.end1441 ], [ %svix.18, %vaarg.end1455 ], [ %svix.18, %vaarg.end1469 ], [ %svix.18, %vaarg.end1483 ], [ %svix.18, %if.else1486 ], [ %svix.20, %vector ], [ %svix.22, %if.end1813 ]
  %415 = load i8** %q, align 8, !tbaa !0
  %cmp184 = icmp ult i8* %415, %add.ptr183
  br i1 %cmp184, label %for.body, label %cleanup

cleanup:                                          ; preds = %if.end182, %if.end226, %for.inc1824, %if.then146, %if.else121, %if.then64, %vaarg.end54, %land.lhs.true59, %vaarg.end, %if.then36, %if.else, %if.then27, %land.lhs.true31, %cond.end, %if.then162
  call void @llvm.lifetime.end(i64 127, i8* %0) #3
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_catpvf_mg(%struct.sv* %sv, i8* %pat, ...) #0 {
entry:
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %args to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  call void @Perl_sv_vcatpvf_mg(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #7
  call void @llvm.va_end(i8* %arraydecay1)
  ret void
}

; Function Attrs: nounwind optsize uwtable
define void @Perl_sv_vcatpvf_mg(%struct.sv* %sv, i8* %pat, [1 x %struct.__va_list_tag]* %args) #0 {
entry:
  %call = tail call i64 @strlen(i8* %pat) #8
  tail call void @Perl_sv_vcatpvfn(%struct.sv* %sv, i8* %pat, i64 %call, [1 x %struct.__va_list_tag]* %args, %struct.sv** null, i32 0, i8* undef) #7
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 16384
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @Perl_mg_set(%struct.sv* %sv) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret void
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i8* @F0convert(double %nv, i8* %endbuf, i64* nocapture %len) #0 {
entry:
  %cmp = fcmp olt double %nv, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub = fsub double -0.000000e+00, %nv
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %nv.addr.0 = phi double [ %sub, %if.then ], [ %nv, %entry ]
  %cmp1 = fcmp olt double %nv.addr.0, 0x43F0000000000000
  br i1 %cmp1, label %if.then3, label %return

if.then3:                                         ; preds = %if.end
  %add = fadd double %nv.addr.0, 5.000000e-01
  %conv4 = fptoui double %add to i64
  %and = and i64 %conv4, 1
  %tobool5 = icmp ne i64 %and, 0
  %conv6 = uitofp i64 %conv4 to double
  %cmp7 = fcmp oeq double %conv6, %add
  %or.cond = and i1 %tobool5, %cmp7
  %dec = sext i1 %or.cond to i64
  %dec.conv4 = add i64 %dec, %conv4
  br label %do.body

do.body:                                          ; preds = %if.then3, %do.body
  %uv.0 = phi i64 [ %div, %do.body ], [ %dec.conv4, %if.then3 ]
  %p.0 = phi i8* [ %incdec.ptr, %do.body ], [ %endbuf, %if.then3 ]
  %rem = urem i64 %uv.0, 10
  %conv11 = trunc i64 %rem to i8
  %add1234 = or i8 %conv11, 48
  %incdec.ptr = getelementptr inbounds i8* %p.0, i64 -1
  store i8 %add1234, i8* %incdec.ptr, align 1, !tbaa !1
  %div = udiv i64 %uv.0, 10
  %0 = icmp ugt i64 %uv.0, 9
  br i1 %0, label %do.body, label %do.end

do.end:                                           ; preds = %do.body
  br i1 %cmp, label %if.then16, label %if.end18

if.then16:                                        ; preds = %do.end
  %incdec.ptr17 = getelementptr inbounds i8* %p.0, i64 -2
  store i8 45, i8* %incdec.ptr17, align 1, !tbaa !1
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %do.end
  %p.1 = phi i8* [ %incdec.ptr17, %if.then16 ], [ %incdec.ptr, %do.end ]
  %sub.ptr.lhs.cast = ptrtoint i8* %endbuf to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %p.1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %len, align 8, !tbaa !5
  br label %return

return:                                           ; preds = %if.end, %if.end18
  %retval.0 = phi i8* [ %p.1, %if.end18 ], [ null, %if.end ]
  ret i8* %retval.0
}

; Function Attrs: nounwind optsize uwtable
define internal fastcc i32 @S_expect_number(i8** nocapture %pattern) #0 {
entry:
  %0 = load i8** %pattern, align 8, !tbaa !0
  %1 = load i8* %0, align 1, !tbaa !1
  %conv = sext i8 %1 to i32
  %conv.off = add i32 %conv, -49
  %switch = icmp ult i32 %conv.off, 9
  %.off11 = add i8 %1, -48
  %2 = icmp ult i8 %.off11, 10
  %or.cond = and i1 %switch, %2
  br i1 %or.cond, label %while.body, label %sw.epilog

while.body:                                       ; preds = %entry, %while.body
  %3 = phi i8* [ %incdec.ptr, %while.body ], [ %0, %entry ]
  %var.012 = phi i32 [ %add, %while.body ], [ 0, %entry ]
  %mul = mul nsw i32 %var.012, 10
  %incdec.ptr = getelementptr inbounds i8* %3, i64 1
  store i8* %incdec.ptr, i8** %pattern, align 8, !tbaa !0
  %4 = load i8* %3, align 1, !tbaa !1
  %conv6 = sext i8 %4 to i32
  %sub = add i32 %mul, -48
  %add = add i32 %sub, %conv6
  %5 = load i8* %incdec.ptr, align 1, !tbaa !1
  %.off = add i8 %5, -48
  %6 = icmp ult i8 %.off, 10
  br i1 %6, label %while.body, label %sw.epilog

sw.epilog:                                        ; preds = %while.body, %entry
  %var.1 = phi i32 [ 0, %entry ], [ %add, %while.body ]
  ret i32 %var.1
}

; Function Attrs: optsize
declare i8* @Perl_uvuni_to_utf8(i8*, i64) #2

; Function Attrs: nounwind optsize
declare double @frexp(double, i32* nocapture) #5

; Function Attrs: optsize
declare %struct.op* @Perl_die(i8*, ...) #2

; Function Attrs: nounwind optsize readonly
declare i8* @memchr(i8*, i32, i64) #6

; Function Attrs: optsize
declare void @Perl_save_int(i32*) #2

; Function Attrs: optsize
declare void @Perl_save_re_context() #2

; Function Attrs: optsize
declare i32 @Perl_call_method(i8*, i32) #2

; Function Attrs: optsize
declare void @Perl_free_tmps() #2

; Function Attrs: nounwind optsize uwtable
define signext i8 @Perl_sv_cat_decode(%struct.sv* %dsv, %struct.sv* %encoding, %struct.sv* %ssv, i32* %offset, i8* %tstr, i32 %tlen) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %ssv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.else, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %sv_flags1 = getelementptr inbounds %struct.sv* %dsv, i64 0, i32 2
  %1 = load i32* %sv_flags1, align 4, !tbaa !3
  %and2 = and i32 %1, 262144
  %tobool3 = icmp eq i32 %and2, 0
  br i1 %tobool3, label %if.else, label %land.lhs.true4

land.lhs.true4:                                   ; preds = %land.lhs.true
  %sv_flags5 = getelementptr inbounds %struct.sv* %encoding, i64 0, i32 2
  %2 = load i32* %sv_flags5, align 4, !tbaa !3
  %and6 = and i32 %2, 524288
  %tobool7 = icmp eq i32 %and6, 0
  %tobool9 = icmp eq i32* %offset, null
  %or.cond = or i1 %tobool7, %tobool9
  br i1 %or.cond, label %if.else, label %if.then

if.then:                                          ; preds = %land.lhs.true4
  %3 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  tail call void @Perl_push_scope() #8
  tail call void @Perl_save_int(i32* @PL_tmps_floor) #8
  %4 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  store i32 %4, i32* @PL_tmps_floor, align 4, !tbaa !3
  tail call void @Perl_save_re_context() #8
  %5 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds i32* %5, i64 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8, !tbaa !0
  %6 = load i32** @PL_markstack_max, align 8, !tbaa !0
  %cmp = icmp eq i32* %incdec.ptr, %6
  br i1 %cmp, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.then
  tail call void @Perl_markstack_grow() #8
  %.pre = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.then
  %7 = phi i32* [ %.pre, %if.then10 ], [ %incdec.ptr, %if.then ]
  %8 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %3 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div170 = lshr exact i64 %sub.ptr.sub, 3
  %conv = trunc i64 %sub.ptr.div170 to i32
  store i32 %conv, i32* %7, align 4, !tbaa !3
  %9 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast11 = ptrtoint %struct.sv** %9 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.lhs.cast
  %cmp15 = icmp slt i64 %sub.ptr.sub13, 48
  br i1 %cmp15, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end
  %call = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %3, %struct.sv** %3, i32 6) #8
  %.pre171 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %if.end
  %10 = phi %struct.sv** [ %.pre171, %if.then17 ], [ %9, %if.end ]
  %sp.0 = phi %struct.sv** [ %call, %if.then17 ], [ %3, %if.end ]
  %sub.ptr.lhs.cast19 = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.rhs.cast20 = ptrtoint %struct.sv** %sp.0 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %cmp23 = icmp slt i64 %sub.ptr.sub21, 8
  br i1 %cmp23, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.end18
  %call26 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %sp.0, %struct.sv** %sp.0, i32 1) #8
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %if.end18
  %sp.1 = phi %struct.sv** [ %call26, %if.then25 ], [ %sp.0, %if.end18 ]
  %incdec.ptr28 = getelementptr inbounds %struct.sv** %sp.1, i64 1
  store %struct.sv* %encoding, %struct.sv** %incdec.ptr28, align 8, !tbaa !0
  %11 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast29 = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.rhs.cast30 = ptrtoint %struct.sv** %incdec.ptr28 to i64
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30
  %cmp33 = icmp slt i64 %sub.ptr.sub31, 8
  br i1 %cmp33, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end27
  %call36 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %incdec.ptr28, %struct.sv** %incdec.ptr28, i32 1) #8
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end27
  %sp.2 = phi %struct.sv** [ %call36, %if.then35 ], [ %incdec.ptr28, %if.end27 ]
  %incdec.ptr38 = getelementptr inbounds %struct.sv** %sp.2, i64 1
  store %struct.sv* %dsv, %struct.sv** %incdec.ptr38, align 8, !tbaa !0
  %12 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast39 = ptrtoint %struct.sv** %12 to i64
  %sub.ptr.rhs.cast40 = ptrtoint %struct.sv** %incdec.ptr38 to i64
  %sub.ptr.sub41 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast40
  %cmp43 = icmp slt i64 %sub.ptr.sub41, 8
  br i1 %cmp43, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end37
  %call46 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %incdec.ptr38, %struct.sv** %incdec.ptr38, i32 1) #8
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end37
  %sp.3 = phi %struct.sv** [ %call46, %if.then45 ], [ %incdec.ptr38, %if.end37 ]
  %incdec.ptr48 = getelementptr inbounds %struct.sv** %sp.3, i64 1
  store %struct.sv* %ssv, %struct.sv** %incdec.ptr48, align 8, !tbaa !0
  %13 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast49 = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.rhs.cast50 = ptrtoint %struct.sv** %incdec.ptr48 to i64
  %sub.ptr.sub51 = sub i64 %sub.ptr.lhs.cast49, %sub.ptr.rhs.cast50
  %cmp53 = icmp slt i64 %sub.ptr.sub51, 8
  br i1 %cmp53, label %if.then55, label %if.end57

if.then55:                                        ; preds = %if.end47
  %call56 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %incdec.ptr48, %struct.sv** %incdec.ptr48, i32 1) #8
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %if.end47
  %sp.4 = phi %struct.sv** [ %call56, %if.then55 ], [ %incdec.ptr48, %if.end47 ]
  %14 = load i32* %offset, align 4, !tbaa !3
  %conv58 = sext i32 %14 to i64
  %call59 = tail call %struct.sv* @Perl_newSViv(i64 %conv58) #7
  %call60 = tail call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call59) #7
  %incdec.ptr61 = getelementptr inbounds %struct.sv** %sp.4, i64 1
  store %struct.sv* %call60, %struct.sv** %incdec.ptr61, align 8, !tbaa !0
  %15 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast62 = ptrtoint %struct.sv** %15 to i64
  %sub.ptr.rhs.cast63 = ptrtoint %struct.sv** %incdec.ptr61 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %cmp66 = icmp slt i64 %sub.ptr.sub64, 8
  br i1 %cmp66, label %if.then68, label %if.end70

if.then68:                                        ; preds = %if.end57
  %call69 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %incdec.ptr61, %struct.sv** %incdec.ptr61, i32 1) #8
  br label %if.end70

if.end70:                                         ; preds = %if.then68, %if.end57
  %sp.5 = phi %struct.sv** [ %call69, %if.then68 ], [ %incdec.ptr61, %if.end57 ]
  %conv71 = sext i32 %tlen to i64
  %call72 = tail call %struct.sv* @Perl_newSVpvn(i8* %tstr, i64 %conv71) #7
  %call73 = tail call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call72) #7
  %incdec.ptr74 = getelementptr inbounds %struct.sv** %sp.5, i64 1
  store %struct.sv* %call73, %struct.sv** %incdec.ptr74, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr74, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %call75 = tail call i32 @Perl_call_method(i8* getelementptr inbounds ([11 x i8]* @.str70, i64 0, i64 0), i32 0) #8
  %16 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %17 = load %struct.sv** %16, align 8, !tbaa !0
  %tobool76 = icmp eq %struct.sv* %17, null
  br i1 %tobool76, label %cond.end115, label %cond.false

cond.false:                                       ; preds = %if.end70
  %sv_flags77 = getelementptr inbounds %struct.sv* %17, i64 0, i32 2
  %18 = load i32* %sv_flags77, align 4, !tbaa !3
  %and78 = and i32 %18, 262144
  %tobool79 = icmp eq i32 %and78, 0
  br i1 %tobool79, label %cond.false91, label %cond.true80

cond.true80:                                      ; preds = %cond.false
  %sv_any = getelementptr inbounds %struct.sv* %17, i64 0, i32 0
  %19 = load i8** %sv_any, align 8, !tbaa !0
  %20 = bitcast i8* %19 to %struct.xpv*
  store %struct.xpv* %20, %struct.xpv** @PL_Xpv, align 8, !tbaa !0
  %tobool81 = icmp eq i8* %19, null
  br i1 %tobool81, label %land.end90, label %land.rhs

land.rhs:                                         ; preds = %cond.true80
  %xpv_cur = getelementptr inbounds i8* %19, i64 8
  %21 = bitcast i8* %xpv_cur to i64*
  %22 = load i64* %21, align 8, !tbaa !5
  %cmp82 = icmp ugt i64 %22, 1
  br i1 %cmp82, label %land.end90, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %tobool85 = icmp eq i64 %22, 0
  br i1 %tobool85, label %land.end90, label %land.rhs86

land.rhs86:                                       ; preds = %lor.rhs
  %xpv_pv = bitcast i8* %19 to i8**
  %23 = load i8** %xpv_pv, align 8, !tbaa !0
  %24 = load i8* %23, align 1, !tbaa !1
  %cmp88 = icmp ne i8 %24, 48
  br label %land.end90

land.end90:                                       ; preds = %lor.rhs, %cond.true80, %land.rhs, %land.rhs86
  %25 = phi i1 [ false, %cond.true80 ], [ true, %land.rhs ], [ false, %lor.rhs ], [ %cmp88, %land.rhs86 ]
  %cond = zext i1 %25 to i8
  br label %cond.end115

cond.false91:                                     ; preds = %cond.false
  %and93 = and i32 %18, 65536
  %tobool94 = icmp eq i32 %and93, 0
  br i1 %tobool94, label %cond.false99, label %cond.true95

cond.true95:                                      ; preds = %cond.false91
  %sv_any96 = getelementptr inbounds %struct.sv* %17, i64 0, i32 0
  %26 = load i8** %sv_any96, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %26, i64 24
  %27 = bitcast i8* %xiv_iv to i64*
  %28 = load i64* %27, align 8, !tbaa !5
  %cmp97 = icmp ne i64 %28, 0
  %conv98 = zext i1 %cmp97 to i8
  br label %cond.end115

cond.false99:                                     ; preds = %cond.false91
  %and101 = and i32 %18, 131072
  %tobool102 = icmp eq i32 %and101, 0
  br i1 %tobool102, label %cond.false107, label %cond.true103

cond.true103:                                     ; preds = %cond.false99
  %sv_any104 = getelementptr inbounds %struct.sv* %17, i64 0, i32 0
  %29 = load i8** %sv_any104, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %29, i64 32
  %30 = bitcast i8* %xnv_nv to double*
  %31 = load double* %30, align 8, !tbaa !6
  %cmp105 = fcmp une double %31, 0.000000e+00
  %conv106 = zext i1 %cmp105 to i8
  br label %cond.end115

cond.false107:                                    ; preds = %cond.false99
  %call108 = tail call signext i8 @Perl_sv_2bool(%struct.sv* %17) #7
  br label %cond.end115

cond.end115:                                      ; preds = %if.end70, %land.end90, %cond.true103, %cond.false107, %cond.true95
  %cond116 = phi i8 [ 0, %if.end70 ], [ %cond, %land.end90 ], [ %conv98, %cond.true95 ], [ %conv106, %cond.true103 ], [ %call108, %cond.false107 ]
  %sv_flags118 = getelementptr inbounds %struct.sv* %call60, i64 0, i32 2
  %32 = load i32* %sv_flags118, align 4, !tbaa !3
  %and119 = and i32 %32, 65536
  %tobool120 = icmp eq i32 %and119, 0
  br i1 %tobool120, label %cond.false124, label %cond.true121

cond.true121:                                     ; preds = %cond.end115
  %sv_any122 = getelementptr inbounds %struct.sv* %call60, i64 0, i32 0
  %33 = load i8** %sv_any122, align 8, !tbaa !0
  %xiv_iv123 = getelementptr inbounds i8* %33, i64 24
  %34 = bitcast i8* %xiv_iv123 to i64*
  %35 = load i64* %34, align 8, !tbaa !5
  br label %cond.end126

cond.false124:                                    ; preds = %cond.end115
  %call125 = tail call i64 @Perl_sv_2iv(%struct.sv* %call60) #7
  br label %cond.end126

cond.end126:                                      ; preds = %cond.false124, %cond.true121
  %cond127 = phi i64 [ %35, %cond.true121 ], [ %call125, %cond.false124 ]
  %conv128 = trunc i64 %cond127 to i32
  store i32 %conv128, i32* %offset, align 4, !tbaa !3
  store %struct.sv** %16, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %36 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  %37 = load i32* @PL_tmps_floor, align 4, !tbaa !3
  %cmp129 = icmp sgt i32 %36, %37
  br i1 %cmp129, label %if.then131, label %if.end132

if.then131:                                       ; preds = %cond.end126
  tail call void @Perl_free_tmps() #8
  br label %if.end132

if.end132:                                        ; preds = %if.then131, %cond.end126
  tail call void @Perl_pop_scope() #8
  br label %if.end133

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %entry
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([34 x i8]* @.str71, i64 0, i64 0)) #8
  br label %if.end133

if.end133:                                        ; preds = %if.else, %if.end132
  %ret.0 = phi i8 [ %cond116, %if.end132 ], [ 0, %if.else ]
  ret i8 %ret.0
}

; Function Attrs: optsize
declare %struct.av* @Perl_newAV() #2

; Function Attrs: optsize
declare void @Perl_av_extend(%struct.av*, i32) #2

; Function Attrs: optsize
declare i8* @Perl_sv_uni_display(%struct.sv*, %struct.sv*, i64, i64) #2

; Function Attrs: optsize
declare i16** @__ctype_b_loc() #2

attributes #0 = { nounwind optsize uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind optsize readnone uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { optsize "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind optsize readonly uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind optsize "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind optsize readonly "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { optsize }
attributes #8 = { nounwind optsize }

!0 = metadata !{metadata !"any pointer", metadata !1}
!1 = metadata !{metadata !"omnipotent char", metadata !2}
!2 = metadata !{metadata !"Simple C/C++ TBAA"}
!3 = metadata !{metadata !"int", metadata !1}
!4 = metadata !{metadata !"short", metadata !1}
!5 = metadata !{metadata !"long", metadata !1}
!6 = metadata !{metadata !"double", metadata !1}
!7 = metadata !{i64 0, i64 8, metadata !0, i64 8, i64 8, metadata !5, i64 16, i64 8, metadata !5, i64 24, i64 8, metadata !5, i64 32, i64 8, metadata !6, i64 40, i64 8, metadata !0, i64 48, i64 8, metadata !0}
!8 = metadata !{i64 0, i64 8, metadata !0, i64 8, i64 4, metadata !3, i64 12, i64 4, metadata !3}
