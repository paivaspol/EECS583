; ModuleID = '../../SPEC_CPU2006v1.1/benchspec/CPU2006/471.omnetpp/src/libs/sim/task.cc'
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.10.0"

%struct._Task = type { i64, [37 x i32], [37 x i32], i32, i32, %struct._Task*, void (i8*)*, i8*, i32, %struct._Task*, i64 }

@main_task = global %struct._Task zeroinitializer, align 8
@current_task = global %struct._Task* null, align 8
@tmp_jmpb = global [37 x i32] zeroinitializer, align 16

; Function Attrs: nounwind optsize readnone ssp uwtable
define i32 @_Z4distP5_TaskS0_(%struct._Task* %from, %struct._Task* %to) #0 {
  tail call void @llvm.dbg.value(metadata %struct._Task* %from, i64 0, metadata !39, metadata !99), !dbg !100
  tail call void @llvm.dbg.value(metadata %struct._Task* %to, i64 0, metadata !40, metadata !99), !dbg !101
  %1 = icmp ugt %struct._Task* %from, %to, !dbg !102
  br i1 %1, label %2, label %6, !dbg !103

; <label>:2                                       ; preds = %0
  %3 = ptrtoint %struct._Task* %from to i64, !dbg !104
  %4 = ptrtoint %struct._Task* %to to i64, !dbg !104
  %5 = sub i64 %3, %4, !dbg !104
  br label %10, !dbg !103

; <label>:6                                       ; preds = %0
  %7 = ptrtoint %struct._Task* %to to i64, !dbg !105
  %8 = ptrtoint %struct._Task* %from to i64, !dbg !105
  %9 = sub i64 %7, %8, !dbg !105
  br label %10, !dbg !103

; <label>:10                                      ; preds = %6, %2
  %11 = phi i64 [ %5, %2 ], [ %9, %6 ], !dbg !103
  %12 = trunc i64 %11 to i32, !dbg !106
  ret i32 %12, !dbg !107
}

; Function Attrs: noreturn optsize ssp uwtable
define void @_Z3eatP5_TaskjS0_(%struct._Task* %p, i32 %size, %struct._Task* %prevbeef) #1 {
  %t = alloca %struct._Task, align 8
  call void @llvm.dbg.value(metadata %struct._Task* %p, i64 0, metadata !47, metadata !99), !dbg !108
  call void @llvm.dbg.value(metadata i32 %size, i64 0, metadata !48, metadata !99), !dbg !109
  call void @llvm.dbg.value(metadata %struct._Task* %prevbeef, i64 0, metadata !49, metadata !99), !dbg !110
  %1 = bitcast %struct._Task* %t to i8*, !dbg !111
  call void @llvm.lifetime.start(i64 360, i8* %1) #2, !dbg !111
  %2 = getelementptr inbounds %struct._Task* %t, i64 0, i32 0, !dbg !112
  store i64 3736059631, i64* %2, align 8, !dbg !113, !tbaa !114
  %3 = getelementptr inbounds %struct._Task* %t, i64 0, i32 10, !dbg !121
  store i64 3736059631, i64* %3, align 8, !dbg !122, !tbaa !123
  %4 = getelementptr inbounds %struct._Task* %t, i64 0, i32 9, !dbg !124
  store %struct._Task* %prevbeef, %struct._Task** %4, align 8, !dbg !125, !tbaa !126
  call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !51, metadata !99), !dbg !127
  tail call void @llvm.dbg.value(metadata %struct._Task* %p, i64 0, metadata !39, metadata !99), !dbg !128
  tail call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !40, metadata !99), !dbg !130
  %5 = icmp ult %struct._Task* %t, %p, !dbg !131
  br i1 %5, label %6, label %10, !dbg !132

; <label>:6                                       ; preds = %0
  %7 = ptrtoint %struct._Task* %p to i64, !dbg !133
  %8 = ptrtoint %struct._Task* %t to i64, !dbg !133
  %9 = sub i64 %7, %8, !dbg !133
  br label %_Z4distP5_TaskS0_.exit, !dbg !132

; <label>:10                                      ; preds = %0
  %11 = ptrtoint %struct._Task* %t to i64, !dbg !134
  %12 = ptrtoint %struct._Task* %p to i64, !dbg !134
  %13 = sub i64 %11, %12, !dbg !134
  br label %_Z4distP5_TaskS0_.exit, !dbg !132

_Z4distP5_TaskS0_.exit:                           ; preds = %6, %10
  %14 = phi i64 [ %9, %6 ], [ %13, %10 ], !dbg !132
  %15 = trunc i64 %14 to i32, !dbg !135
  call void @llvm.dbg.value(metadata i32 %15, i64 0, metadata !50, metadata !99), !dbg !136
  %16 = icmp ult i32 %15, %size, !dbg !137
  br i1 %16, label %17, label %18, !dbg !139

; <label>:17                                      ; preds = %_Z4distP5_TaskS0_.exit
  call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !51, metadata !99), !dbg !127
  call void @_Z3eatP5_TaskjS0_(%struct._Task* %p, i32 %size, %struct._Task* %t) #9, !dbg !140
  unreachable

; <label>:18                                      ; preds = %_Z4distP5_TaskS0_.exit
  %19 = getelementptr inbounds %struct._Task* %p, i64 0, i32 4, !dbg !142
  %20 = load i32* %19, align 4, !dbg !142, !tbaa !143
  %21 = sub i32 %20, %15, !dbg !144
  %22 = getelementptr inbounds %struct._Task* %t, i64 0, i32 4, !dbg !145
  store i32 %21, i32* %22, align 4, !dbg !146, !tbaa !143
  store i32 %15, i32* %19, align 4, !dbg !147, !tbaa !143
  %23 = getelementptr inbounds %struct._Task* %t, i64 0, i32 3, !dbg !148
  store i32 0, i32* %23, align 8, !dbg !149, !tbaa !150
  %24 = getelementptr inbounds %struct._Task* %p, i64 0, i32 5, !dbg !151
  %25 = bitcast %struct._Task** %24 to i64*, !dbg !151
  %26 = load i64* %25, align 8, !dbg !151, !tbaa !152
  %27 = getelementptr inbounds %struct._Task* %t, i64 0, i32 5, !dbg !153
  %28 = bitcast %struct._Task** %27 to i64*, !dbg !154
  store i64 %26, i64* %28, align 8, !dbg !154, !tbaa !152
  call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !51, metadata !99), !dbg !127
  store %struct._Task* %t, %struct._Task** %24, align 8, !dbg !155, !tbaa !152
  %29 = getelementptr inbounds %struct._Task* %t, i64 0, i32 1, !dbg !156
  %30 = getelementptr inbounds [37 x i32]* %29, i64 0, i64 0, !dbg !158
  %31 = call i32 @setjmp(i32* %30) #10, !dbg !159
  %32 = icmp eq i32 %31, 0, !dbg !160
  br i1 %32, label %36, label %.preheader, !dbg !161

.preheader:                                       ; preds = %18
  %33 = getelementptr inbounds %struct._Task* %t, i64 0, i32 8, !dbg !162
  %34 = getelementptr inbounds %struct._Task* %t, i64 0, i32 6, !dbg !167
  %35 = getelementptr inbounds %struct._Task* %t, i64 0, i32 7, !dbg !168
  br label %.backedge, !dbg !162

; <label>:36                                      ; preds = %18
  %37 = getelementptr inbounds %struct._Task* %t, i64 0, i32 2, !dbg !169
  %38 = bitcast [37 x i32]* %37 to i8*, !dbg !171
  %39 = bitcast [37 x i32]* %29 to i8*, !dbg !171
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 148, i32 4, i1 false), !dbg !171
  %40 = getelementptr inbounds %struct._Task* %p, i64 0, i32 1, i64 0, !dbg !172
  call void @longjmp(i32* %40, i32 1) #11, !dbg !173
  unreachable, !dbg !173

.backedge:                                        ; preds = %54, %59, %.preheader
  %41 = load i32* %33, align 8, !dbg !162, !tbaa !174
  %42 = add i32 %41, 1024, !dbg !175
  %43 = load i32* %22, align 4, !dbg !176, !tbaa !143
  %44 = icmp ugt i32 %42, %43, !dbg !177
  br i1 %44, label %50, label %45, !dbg !178

; <label>:45                                      ; preds = %.backedge
  %46 = call i32 @setjmp(i32* %30) #10, !dbg !179
  %47 = icmp eq i32 %46, 0, !dbg !182
  br i1 %47, label %48, label %50, !dbg !183

; <label>:48                                      ; preds = %45
  %49 = load i32* %33, align 8, !dbg !184, !tbaa !174
  call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !51, metadata !99), !dbg !127
  call void @_Z3eatP5_TaskjS0_(%struct._Task* %t, i32 %49, %struct._Task* null) #9, !dbg !186
  unreachable

; <label>:50                                      ; preds = %.backedge, %45
  store i32 1, i32* %23, align 8, !dbg !187, !tbaa !150
  %51 = call i32 @setjmp(i32* %30) #10, !dbg !188
  %52 = icmp eq i32 %51, 0, !dbg !190
  br i1 %52, label %53, label %54, !dbg !191

; <label>:53                                      ; preds = %50
  call void @longjmp(i32* getelementptr inbounds ([37 x i32]* @tmp_jmpb, i64 0, i64 0), i32 1) #11, !dbg !192
  unreachable, !dbg !192

; <label>:54                                      ; preds = %50
  %55 = load void (i8*)** %34, align 8, !dbg !167, !tbaa !194
  %56 = load i8** %35, align 8, !dbg !168, !tbaa !195
  call void %55(i8* %56) #9, !dbg !196
  call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !51, metadata !99), !dbg !127
  call void @_Z9task_freeP5_Task(%struct._Task* %t) #9, !dbg !197
  %57 = call i32 @setjmp(i32* %30) #10, !dbg !198
  %58 = icmp eq i32 %57, 0, !dbg !200
  br i1 %58, label %59, label %.backedge, !dbg !201

; <label>:59                                      ; preds = %54
  call void @_Z13task_switchtoP5_Task(%struct._Task* @main_task) #9, !dbg !202
  br label %.backedge, !dbg !204
}

; Function Attrs: nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #2

; Function Attrs: optsize returns_twice
declare i32 @setjmp(i32*) #3

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: noreturn optsize
declare void @longjmp(i32*, i32) #4

; Function Attrs: nounwind optsize ssp uwtable
define void @_Z9task_freeP5_Task(%struct._Task* %t) #5 {
  tail call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !74, metadata !99), !dbg !205
  %1 = getelementptr inbounds %struct._Task* %t, i64 0, i32 3, !dbg !206
  store i32 0, i32* %1, align 4, !dbg !207, !tbaa !150
  %2 = getelementptr inbounds %struct._Task* %t, i64 0, i32 5, !dbg !208
  %3 = load %struct._Task** %2, align 8, !dbg !208, !tbaa !152
  %4 = icmp eq %struct._Task* %3, null, !dbg !210
  %5 = ptrtoint %struct._Task* %3 to i64
  br i1 %4, label %20, label %6, !dbg !211

; <label>:6                                       ; preds = %0
  %7 = getelementptr inbounds %struct._Task* %3, i64 0, i32 3, !dbg !212
  %8 = load i32* %7, align 4, !dbg !212, !tbaa !150
  %9 = icmp eq i32 %8, 0, !dbg !213
  br i1 %9, label %10, label %20, !dbg !214

; <label>:10                                      ; preds = %6
  %11 = getelementptr inbounds %struct._Task* %3, i64 0, i32 4, !dbg !215
  %12 = load i32* %11, align 4, !dbg !215, !tbaa !143
  %13 = getelementptr inbounds %struct._Task* %t, i64 0, i32 4, !dbg !217
  %14 = load i32* %13, align 4, !dbg !218, !tbaa !143
  %15 = add i32 %14, %12, !dbg !218
  store i32 %15, i32* %13, align 4, !dbg !218, !tbaa !143
  %16 = getelementptr inbounds %struct._Task* %3, i64 0, i32 5, !dbg !219
  %17 = bitcast %struct._Task** %16 to i64*, !dbg !219
  %18 = load i64* %17, align 8, !dbg !219, !tbaa !152
  %19 = bitcast %struct._Task** %2 to i64*, !dbg !220
  store i64 %18, i64* %19, align 8, !dbg !220, !tbaa !152
  br label %20, !dbg !221

; <label>:20                                      ; preds = %6, %0, %10
  %21 = phi i64 [ %5, %6 ], [ %5, %0 ], [ %18, %10 ]
  %22 = load %struct._Task** getelementptr inbounds (%struct._Task* @main_task, i64 0, i32 5), align 8, !dbg !222, !tbaa !152
  tail call void @llvm.dbg.value(metadata %struct._Task* %22, i64 0, metadata !75, metadata !99), !dbg !223
  %23 = icmp eq %struct._Task* %22, %t, !dbg !224
  br i1 %23, label %38, label %.preheader, !dbg !226

.preheader:                                       ; preds = %20, %.preheader
  %p.0 = phi %struct._Task* [ %25, %.preheader ], [ %22, %20 ]
  %24 = getelementptr inbounds %struct._Task* %p.0, i64 0, i32 5, !dbg !227
  %25 = load %struct._Task** %24, align 8, !dbg !227, !tbaa !152
  %26 = icmp eq %struct._Task* %25, %t, !dbg !229
  br i1 %26, label %27, label %.preheader, !dbg !230

; <label>:27                                      ; preds = %.preheader
  %28 = getelementptr inbounds %struct._Task* %p.0, i64 0, i32 3, !dbg !231
  %29 = load i32* %28, align 4, !dbg !231, !tbaa !150
  %30 = icmp eq i32 %29, 0, !dbg !233
  br i1 %30, label %31, label %38, !dbg !234

; <label>:31                                      ; preds = %27
  %32 = getelementptr inbounds %struct._Task* %t, i64 0, i32 4, !dbg !235
  %33 = load i32* %32, align 4, !dbg !235, !tbaa !143
  %34 = getelementptr inbounds %struct._Task* %p.0, i64 0, i32 4, !dbg !237
  %35 = load i32* %34, align 4, !dbg !238, !tbaa !143
  %36 = add i32 %35, %33, !dbg !238
  store i32 %36, i32* %34, align 4, !dbg !238, !tbaa !143
  %37 = bitcast %struct._Task** %24 to i64*, !dbg !239
  store i64 %21, i64* %37, align 8, !dbg !239, !tbaa !152
  br label %38, !dbg !240

; <label>:38                                      ; preds = %27, %20, %31
  ret void, !dbg !241
}

; Function Attrs: optsize ssp uwtable
define void @_Z13task_switchtoP5_Task(%struct._Task* %p) #6 {
  call void @llvm.dbg.value(metadata %struct._Task* %p, i64 0, metadata !71, metadata !99), !dbg !242
  %1 = load %struct._Task** @current_task, align 8, !dbg !243, !tbaa !245
  %2 = getelementptr inbounds %struct._Task* %1, i64 0, i32 1, i64 0, !dbg !243
  %3 = call i32 @setjmp(i32* %2) #10, !dbg !246
  %4 = icmp eq i32 %3, 0, !dbg !247
  br i1 %4, label %5, label %7, !dbg !248

; <label>:5                                       ; preds = %0
  store %struct._Task* %p, %struct._Task** @current_task, align 8, !dbg !249, !tbaa !245
  %6 = getelementptr inbounds %struct._Task* %p, i64 0, i32 1, i64 0, !dbg !251
  call void @longjmp(i32* %6, i32 1) #11, !dbg !252
  unreachable, !dbg !252

; <label>:7                                       ; preds = %0
  ret void, !dbg !253
}

; Function Attrs: optsize ssp uwtable
define void @_Z9task_initjj(i32 %total_stack, i32 %main_stack) #6 {
  %tmp = alloca %struct._Task, align 8
  call void @llvm.dbg.value(metadata i32 %total_stack, i64 0, metadata !56, metadata !99), !dbg !254
  call void @llvm.dbg.value(metadata i32 %main_stack, i64 0, metadata !57, metadata !99), !dbg !255
  %1 = bitcast %struct._Task* %tmp to i8*, !dbg !256
  call void @llvm.lifetime.start(i64 360, i8* %1) #2, !dbg !256
  %2 = getelementptr inbounds %struct._Task* %tmp, i64 0, i32 4, !dbg !257
  store i32 %total_stack, i32* %2, align 4, !dbg !258, !tbaa !143
  %3 = getelementptr inbounds %struct._Task* %tmp, i64 0, i32 5, !dbg !259
  store %struct._Task* null, %struct._Task** %3, align 8, !dbg !260, !tbaa !152
  %4 = getelementptr inbounds %struct._Task* %tmp, i64 0, i32 1, i64 0, !dbg !261
  %5 = call i32 @setjmp(i32* %4) #10, !dbg !263
  %6 = icmp eq i32 %5, 0, !dbg !264
  br i1 %6, label %7, label %8, !dbg !265

; <label>:7                                       ; preds = %0
  call void @llvm.dbg.value(metadata %struct._Task* %tmp, i64 0, metadata !58, metadata !99), !dbg !266
  call void @_Z3eatP5_TaskjS0_(%struct._Task* %tmp, i32 %main_stack, %struct._Task* null) #9, !dbg !267
  unreachable

; <label>:8                                       ; preds = %0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct._Task* @main_task to i8*), i8* %1, i64 360, i32 8, i1 false), !dbg !269, !tbaa.struct !270
  store i32 1, i32* getelementptr inbounds (%struct._Task* @main_task, i64 0, i32 3), align 8, !dbg !274, !tbaa !150
  store %struct._Task* @main_task, %struct._Task** @current_task, align 8, !dbg !275, !tbaa !245
  call void @llvm.lifetime.end(i64 360, i8* %1) #2, !dbg !276
  ret void, !dbg !276
}

; Function Attrs: nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #2

; Function Attrs: optsize ssp uwtable
define %struct._Task* @_Z11task_createPFvPvES_j(void (i8*)* %fnp, i8* %arg, i32 %stack_size) #6 {
  call void @llvm.dbg.value(metadata void (i8*)* %fnp, i64 0, metadata !63, metadata !99), !dbg !277
  call void @llvm.dbg.value(metadata i8* %arg, i64 0, metadata !64, metadata !99), !dbg !278
  call void @llvm.dbg.value(metadata i32 %stack_size, i64 0, metadata !65, metadata !99), !dbg !279
  %p.02 = load %struct._Task** getelementptr inbounds (%struct._Task* @main_task, i64 0, i32 5), align 8, !dbg !280
  %1 = icmp eq %struct._Task* %p.02, null, !dbg !282
  br i1 %1, label %.loopexit, label %.lr.ph, !dbg !284

.lr.ph:                                           ; preds = %0, %17
  %p.03 = phi %struct._Task* [ %p.0, %17 ], [ %p.02, %0 ]
  %2 = getelementptr inbounds %struct._Task* %p.03, i64 0, i32 3, !dbg !285
  %3 = load i32* %2, align 4, !dbg !285, !tbaa !150
  %4 = icmp eq i32 %3, 0, !dbg !288
  br i1 %4, label %5, label %17, !dbg !289

; <label>:5                                       ; preds = %.lr.ph
  %6 = getelementptr inbounds %struct._Task* %p.03, i64 0, i32 4, !dbg !290
  %7 = load i32* %6, align 4, !dbg !290, !tbaa !143
  %8 = icmp ult i32 %7, %stack_size, !dbg !291
  br i1 %8, label %17, label %9, !dbg !292

; <label>:9                                       ; preds = %5
  %10 = getelementptr inbounds %struct._Task* %p.03, i64 0, i32 6, !dbg !293
  store void (i8*)* %fnp, void (i8*)** %10, align 8, !dbg !295, !tbaa !194
  %11 = getelementptr inbounds %struct._Task* %p.03, i64 0, i32 7, !dbg !296
  store i8* %arg, i8** %11, align 8, !dbg !297, !tbaa !195
  %12 = getelementptr inbounds %struct._Task* %p.03, i64 0, i32 8, !dbg !298
  store i32 %stack_size, i32* %12, align 4, !dbg !299, !tbaa !174
  %13 = call i32 @setjmp(i32* getelementptr inbounds ([37 x i32]* @tmp_jmpb, i64 0, i64 0)) #10, !dbg !300
  %14 = icmp eq i32 %13, 0, !dbg !302
  br i1 %14, label %15, label %.loopexit, !dbg !303

; <label>:15                                      ; preds = %9
  %16 = getelementptr inbounds %struct._Task* %p.03, i64 0, i32 2, i64 0, !dbg !304
  call void @longjmp(i32* %16, i32 1) #11, !dbg !306
  unreachable, !dbg !306

; <label>:17                                      ; preds = %5, %.lr.ph
  %18 = getelementptr inbounds %struct._Task* %p.03, i64 0, i32 5, !dbg !307
  %p.0 = load %struct._Task** %18, align 8, !dbg !280
  %19 = icmp eq %struct._Task* %p.0, null, !dbg !282
  br i1 %19, label %.loopexit, label %.lr.ph, !dbg !284

.loopexit:                                        ; preds = %17, %0, %9
  %.0 = phi %struct._Task* [ %p.03, %9 ], [ null, %0 ], [ null, %17 ]
  ret %struct._Task* %.0, !dbg !308
}

; Function Attrs: optsize ssp uwtable
define void @_Z12task_restartP5_Task(%struct._Task* %p) #6 {
  call void @llvm.dbg.value(metadata %struct._Task* %p, i64 0, metadata !78, metadata !99), !dbg !309
  %1 = call i32 @setjmp(i32* getelementptr inbounds ([37 x i32]* @tmp_jmpb, i64 0, i64 0)) #10, !dbg !310
  %2 = icmp eq i32 %1, 0, !dbg !312
  br i1 %2, label %3, label %5, !dbg !313

; <label>:3                                       ; preds = %0
  %4 = getelementptr inbounds %struct._Task* %p, i64 0, i32 2, i64 0, !dbg !314
  call void @longjmp(i32* %4, i32 1) #11, !dbg !316
  unreachable, !dbg !316

; <label>:5                                       ; preds = %0
  ret void, !dbg !317
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define zeroext i1 @_Z17task_testoverflowP5_Task(%struct._Task* nocapture readonly %t) #7 {
  tail call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !84, metadata !99), !dbg !318
  %1 = getelementptr inbounds %struct._Task* %t, i64 0, i32 3, !dbg !319
  %2 = load i32* %1, align 4, !dbg !319, !tbaa !150
  %3 = icmp eq i32 %2, 0, !dbg !321
  br i1 %3, label %16, label %4, !dbg !322

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct._Task* %t, i64 0, i32 5, !dbg !323
  %6 = load %struct._Task** %5, align 8, !dbg !323, !tbaa !152
  %7 = icmp eq %struct._Task* %6, null, !dbg !324
  br i1 %7, label %16, label %8, !dbg !325

; <label>:8                                       ; preds = %4
  %9 = getelementptr inbounds %struct._Task* %6, i64 0, i32 0, !dbg !326
  %10 = load i64* %9, align 8, !dbg !326, !tbaa !114
  %11 = icmp eq i64 %10, 3736059631, !dbg !327
  br i1 %11, label %12, label %16, !dbg !328

; <label>:12                                      ; preds = %8
  %13 = getelementptr inbounds %struct._Task* %6, i64 0, i32 10, !dbg !329
  %14 = load i64* %13, align 8, !dbg !329, !tbaa !123
  %15 = icmp ne i64 %14, 3736059631, !dbg !330
  br label %16, !dbg !328

; <label>:16                                      ; preds = %12, %8, %0, %4
  %.0 = phi i1 [ false, %4 ], [ false, %0 ], [ true, %8 ], [ %15, %12 ]
  ret i1 %.0, !dbg !331
}

; Function Attrs: nounwind optsize readonly ssp uwtable
define i32 @_Z15task_stackusageP5_Task(%struct._Task* %t) #7 {
  tail call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !89, metadata !99), !dbg !332
  %1 = getelementptr inbounds %struct._Task* %t, i64 0, i32 3, !dbg !333
  %2 = load i32* %1, align 4, !dbg !333, !tbaa !150
  %3 = icmp eq i32 %2, 0, !dbg !335
  br i1 %3, label %75, label %4, !dbg !336

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct._Task* %t, i64 0, i32 5, !dbg !337
  %6 = load %struct._Task** %5, align 8, !dbg !337, !tbaa !152
  %7 = icmp eq %struct._Task* %6, null, !dbg !339
  br i1 %7, label %8, label %11, !dbg !340

; <label>:8                                       ; preds = %4
  %9 = getelementptr inbounds %struct._Task* %t, i64 0, i32 8, !dbg !341
  %10 = load i32* %9, align 4, !dbg !341, !tbaa !174
  br label %75, !dbg !342

; <label>:11                                      ; preds = %4
  tail call void @llvm.dbg.value(metadata %struct._Task* %6, i64 0, metadata !90, metadata !99), !dbg !343
  %12 = getelementptr inbounds %struct._Task* %6, i64 0, i32 0, !dbg !344
  %13 = load i64* %12, align 8, !dbg !344, !tbaa !114
  %14 = icmp eq i64 %13, 3736059631, !dbg !346
  br i1 %14, label %15, label %36, !dbg !347

; <label>:15                                      ; preds = %11
  %16 = getelementptr inbounds %struct._Task* %6, i64 0, i32 10, !dbg !348
  %17 = load i64* %16, align 8, !dbg !348, !tbaa !123
  %18 = icmp eq i64 %17, 3736059631, !dbg !349
  br i1 %18, label %19, label %36, !dbg !350

; <label>:19                                      ; preds = %15
  %20 = getelementptr inbounds %struct._Task* %6, i64 0, i32 9, !dbg !351
  %21 = load %struct._Task** %20, align 8, !dbg !351, !tbaa !126
  %22 = icmp eq %struct._Task* %21, null, !dbg !352
  br i1 %22, label %.critedge, label %23, !dbg !353

; <label>:23                                      ; preds = %19
  tail call void @llvm.dbg.value(metadata %struct._Task* %6, i64 0, metadata !39, metadata !99), !dbg !354
  tail call void @llvm.dbg.value(metadata %struct._Task* %21, i64 0, metadata !40, metadata !99), !dbg !356
  %24 = icmp ugt %struct._Task* %6, %21, !dbg !357
  br i1 %24, label %25, label %29, !dbg !358

; <label>:25                                      ; preds = %23
  %26 = ptrtoint %struct._Task* %6 to i64, !dbg !359
  %27 = ptrtoint %struct._Task* %21 to i64, !dbg !359
  %28 = sub i64 %26, %27, !dbg !359
  br label %_Z4distP5_TaskS0_.exit, !dbg !358

; <label>:29                                      ; preds = %23
  %30 = ptrtoint %struct._Task* %21 to i64, !dbg !360
  %31 = ptrtoint %struct._Task* %6 to i64, !dbg !360
  %32 = sub i64 %30, %31, !dbg !360
  br label %_Z4distP5_TaskS0_.exit, !dbg !358

_Z4distP5_TaskS0_.exit:                           ; preds = %25, %29
  %33 = phi i64 [ %28, %25 ], [ %32, %29 ], !dbg !358
  %34 = trunc i64 %33 to i32, !dbg !361
  %35 = icmp ugt i32 %34, 560, !dbg !362
  br i1 %35, label %36, label %.lr.ph, !dbg !363

; <label>:36                                      ; preds = %15, %11, %_Z4distP5_TaskS0_.exit
  %37 = getelementptr inbounds %struct._Task* %t, i64 0, i32 4, !dbg !364
  %38 = load i32* %37, align 4, !dbg !364, !tbaa !143
  br label %75, !dbg !365

.lr.ph:                                           ; preds = %_Z4distP5_TaskS0_.exit, %62
  %39 = phi %struct._Task* [ %49, %62 ], [ %21, %_Z4distP5_TaskS0_.exit ]
  %p.05 = phi %struct._Task* [ %39, %62 ], [ %6, %_Z4distP5_TaskS0_.exit ]
  %40 = getelementptr inbounds %struct._Task* %39, i64 0, i32 0, !dbg !366
  %41 = load i64* %40, align 8, !dbg !366, !tbaa !114
  %42 = icmp eq i64 %41, 3736059631, !dbg !367
  br i1 %42, label %43, label %.critedge, !dbg !368

; <label>:43                                      ; preds = %.lr.ph
  %44 = getelementptr inbounds %struct._Task* %39, i64 0, i32 10, !dbg !369
  %45 = load i64* %44, align 8, !dbg !369, !tbaa !123
  %46 = icmp eq i64 %45, 3736059631, !dbg !370
  br i1 %46, label %47, label %.critedge, !dbg !371

; <label>:47                                      ; preds = %43
  %48 = getelementptr inbounds %struct._Task* %39, i64 0, i32 9, !dbg !372
  %49 = load %struct._Task** %48, align 8, !dbg !372, !tbaa !126
  tail call void @llvm.dbg.value(metadata %struct._Task* %49, i64 0, metadata !39, metadata !99), !dbg !373
  tail call void @llvm.dbg.value(metadata %struct._Task* %49, i64 0, metadata !40, metadata !99), !dbg !375
  %50 = icmp ugt %struct._Task* %39, %49, !dbg !376
  br i1 %50, label %51, label %55, !dbg !377

; <label>:51                                      ; preds = %47
  %52 = ptrtoint %struct._Task* %39 to i64, !dbg !378
  %53 = ptrtoint %struct._Task* %49 to i64, !dbg !378
  %54 = sub i64 %52, %53, !dbg !378
  br label %_Z4distP5_TaskS0_.exit4, !dbg !377

; <label>:55                                      ; preds = %47
  %56 = ptrtoint %struct._Task* %49 to i64, !dbg !379
  %57 = ptrtoint %struct._Task* %39 to i64, !dbg !379
  %58 = sub i64 %56, %57, !dbg !379
  br label %_Z4distP5_TaskS0_.exit4, !dbg !377

_Z4distP5_TaskS0_.exit4:                          ; preds = %51, %55
  %59 = phi i64 [ %54, %51 ], [ %58, %55 ], !dbg !377
  %60 = trunc i64 %59 to i32, !dbg !380
  %61 = icmp ult i32 %60, 561, !dbg !381
  br i1 %61, label %62, label %.critedge, !dbg !382

; <label>:62                                      ; preds = %_Z4distP5_TaskS0_.exit4
  tail call void @llvm.dbg.value(metadata %struct._Task* %39, i64 0, metadata !90, metadata !99), !dbg !343
  %63 = icmp eq %struct._Task* %49, null, !dbg !383
  br i1 %63, label %.critedge, label %.lr.ph, !dbg !384

.critedge:                                        ; preds = %_Z4distP5_TaskS0_.exit4, %43, %.lr.ph, %62, %19
  %p.0.lcssa = phi %struct._Task* [ %6, %19 ], [ %p.05, %_Z4distP5_TaskS0_.exit4 ], [ %p.05, %43 ], [ %p.05, %.lr.ph ], [ %39, %62 ]
  tail call void @llvm.dbg.value(metadata %struct._Task* %t, i64 0, metadata !39, metadata !99), !dbg !385
  tail call void @llvm.dbg.value(metadata %struct._Task* %39, i64 0, metadata !40, metadata !99), !dbg !387
  %64 = icmp ult %struct._Task* %p.0.lcssa, %t, !dbg !388
  br i1 %64, label %65, label %69, !dbg !389

; <label>:65                                      ; preds = %.critedge
  %66 = ptrtoint %struct._Task* %t to i64, !dbg !390
  %67 = ptrtoint %struct._Task* %p.0.lcssa to i64, !dbg !390
  %68 = sub i64 %66, %67, !dbg !390
  br label %_Z4distP5_TaskS0_.exit3, !dbg !389

; <label>:69                                      ; preds = %.critedge
  %70 = ptrtoint %struct._Task* %p.0.lcssa to i64, !dbg !391
  %71 = ptrtoint %struct._Task* %t to i64, !dbg !391
  %72 = sub i64 %70, %71, !dbg !391
  br label %_Z4distP5_TaskS0_.exit3, !dbg !389

_Z4distP5_TaskS0_.exit3:                          ; preds = %65, %69
  %73 = phi i64 [ %68, %65 ], [ %72, %69 ], !dbg !389
  %74 = trunc i64 %73 to i32, !dbg !392
  br label %75, !dbg !393

; <label>:75                                      ; preds = %0, %_Z4distP5_TaskS0_.exit3, %36, %8
  %.0 = phi i32 [ %38, %36 ], [ %74, %_Z4distP5_TaskS0_.exit3 ], [ %10, %8 ], [ 0, %0 ]
  ret i32 %.0, !dbg !394
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #8

attributes #0 = { nounwind optsize readnone ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+sse,+sse2,+sse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn optsize ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+sse,+sse2,+sse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { optsize returns_twice "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+sse,+sse2,+sse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn optsize "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+sse,+sse2,+sse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind optsize ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+sse,+sse2,+sse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { optsize ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+sse,+sse2,+sse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind optsize readonly ssp uwtable "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+sse,+sse2,+sse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone }
attributes #9 = { optsize }
attributes #10 = { optsize returns_twice }
attributes #11 = { noreturn optsize }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!95, !96, !97}
!llvm.ident = !{!98}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "Apple LLVM version 7.0.0 (clang-700.1.76)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !3, subprograms: !34, globals: !91, imports: !2)
!1 = !DIFile(filename: "../../SPEC_CPU2006v1.1/benchspec/CPU2006/471.omnetpp/src/libs/sim/task.cc", directory: "/Users/vaspol/Documents/classes/EECS583/ClassProject/source_extraction_scripts")
!2 = !{}
!3 = !{!4, !32, !19}
!4 = !DICompositeType(tag: DW_TAG_structure_type, name: "_Task", file: !5, line: 41, size: 2880, align: 64, elements: !6, identifier: "_ZTS5_Task")
!5 = !DIFile(filename: "../../SPEC_CPU2006v1.1/benchspec/CPU2006/471.omnetpp/src/libs/sim/task.h", directory: "/Users/vaspol/Documents/classes/EECS583/ClassProject/source_extraction_scripts")
!6 = !{!7, !9, !16, !17, !18, !20, !22, !28, !29, !30, !31}
!7 = !DIDerivedType(tag: DW_TAG_member, name: "guardbeef1", scope: !"_ZTS5_Task", file: !5, line: 43, baseType: !8, size: 64, align: 64)
!8 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!9 = !DIDerivedType(tag: DW_TAG_member, name: "jmpb", scope: !"_ZTS5_Task", file: !5, line: 44, baseType: !10, size: 1184, align: 32, offset: 64)
!10 = !DIDerivedType(tag: DW_TAG_typedef, name: "jmp_buf", file: !11, line: 36, baseType: !12)
!11 = !DIFile(filename: "/usr/include/setjmp.h", directory: "/Users/vaspol/Documents/classes/EECS583/ClassProject/source_extraction_scripts")
!12 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 1184, align: 32, elements: !14)
!13 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!14 = !{!15}
!15 = !DISubrange(count: 37)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "rst_jmpb", scope: !"_ZTS5_Task", file: !5, line: 45, baseType: !10, size: 1184, align: 32, offset: 1248)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !"_ZTS5_Task", file: !5, line: 46, baseType: !13, size: 32, align: 32, offset: 2432)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !"_ZTS5_Task", file: !5, line: 47, baseType: !19, size: 32, align: 32, offset: 2464)
!19 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !"_ZTS5_Task", file: !5, line: 48, baseType: !21, size: 64, align: 64, offset: 2496)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !"_ZTS5_Task", size: 64, align: 64)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "fnp", scope: !"_ZTS5_Task", file: !5, line: 50, baseType: !23, size: 64, align: 64, offset: 2560)
!23 = !DIDerivedType(tag: DW_TAG_typedef, name: "_Task_fn", file: !5, line: 39, baseType: !24)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64, align: 64)
!25 = !DISubroutineType(types: !26)
!26 = !{null, !27}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "arg", scope: !"_ZTS5_Task", file: !5, line: 51, baseType: !27, size: 64, align: 64, offset: 2624)
!29 = !DIDerivedType(tag: DW_TAG_member, name: "stack_size", scope: !"_ZTS5_Task", file: !5, line: 52, baseType: !19, size: 32, align: 32, offset: 2688)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "prevbeef", scope: !"_ZTS5_Task", file: !5, line: 54, baseType: !21, size: 64, align: 64, offset: 2752)
!31 = !DIDerivedType(tag: DW_TAG_member, name: "guardbeef2", scope: !"_ZTS5_Task", file: !5, line: 55, baseType: !8, size: 64, align: 64, offset: 2816)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64, align: 64)
!33 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!34 = !{!35, !43, !52, !59, !67, !72, !76, !79, !85}
!35 = !DISubprogram(name: "dist", linkageName: "_Z4distP5_TaskS0_", scope: !1, file: !1, line: 26, type: !36, isLocal: false, isDefinition: true, scopeLine: 27, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._Task*, %struct._Task*)* @_Z4distP5_TaskS0_, variables: !38)
!36 = !DISubroutineType(types: !37)
!37 = !{!19, !21, !21}
!38 = !{!39, !40, !41, !42}
!39 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "from", arg: 1, scope: !35, file: !1, line: 26, type: !21)
!40 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "to", arg: 2, scope: !35, file: !1, line: 26, type: !21)
!41 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c1", scope: !35, file: !1, line: 28, type: !32)
!42 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "c2", scope: !35, file: !1, line: 29, type: !32)
!43 = !DISubprogram(name: "eat", linkageName: "_Z3eatP5_TaskjS0_", scope: !1, file: !1, line: 34, type: !44, isLocal: false, isDefinition: true, scopeLine: 35, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct._Task*, i32, %struct._Task*)* @_Z3eatP5_TaskjS0_, variables: !46)
!44 = !DISubroutineType(types: !45)
!45 = !{null, !21, !19, !21}
!46 = !{!47, !48, !49, !50, !51}
!47 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 1, scope: !43, file: !1, line: 34, type: !21)
!48 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "size", arg: 2, scope: !43, file: !1, line: 34, type: !19)
!49 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "prevbeef", arg: 3, scope: !43, file: !1, line: 34, type: !21)
!50 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "d", scope: !43, file: !1, line: 36, type: !19)
!51 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "t", scope: !43, file: !1, line: 37, type: !"_ZTS5_Task")
!52 = !DISubprogram(name: "task_init", linkageName: "_Z9task_initjj", scope: !1, file: !1, line: 103, type: !53, isLocal: false, isDefinition: true, scopeLine: 104, flags: DIFlagPrototyped, isOptimized: true, function: void (i32, i32)* @_Z9task_initjj, variables: !55)
!53 = !DISubroutineType(types: !54)
!54 = !{null, !19, !19}
!55 = !{!56, !57, !58}
!56 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "total_stack", arg: 1, scope: !52, file: !1, line: 103, type: !19)
!57 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "main_stack", arg: 2, scope: !52, file: !1, line: 103, type: !19)
!58 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "tmp", scope: !52, file: !1, line: 105, type: !"_ZTS5_Task")
!59 = !DISubprogram(name: "task_create", linkageName: "_Z11task_createPFvPvES_j", scope: !1, file: !1, line: 119, type: !60, isLocal: false, isDefinition: true, scopeLine: 120, flags: DIFlagPrototyped, isOptimized: true, function: %struct._Task* (void (i8*)*, i8*, i32)* @_Z11task_createPFvPvES_j, variables: !62)
!60 = !DISubroutineType(types: !61)
!61 = !{!21, !23, !27, !19}
!62 = !{!63, !64, !65, !66}
!63 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "fnp", arg: 1, scope: !59, file: !1, line: 119, type: !23)
!64 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "arg", arg: 2, scope: !59, file: !1, line: 119, type: !27)
!65 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "stack_size", arg: 3, scope: !59, file: !1, line: 119, type: !19)
!66 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !59, file: !1, line: 121, type: !21)
!67 = !DISubprogram(name: "task_switchto", linkageName: "_Z13task_switchtoP5_Task", scope: !1, file: !1, line: 141, type: !68, isLocal: false, isDefinition: true, scopeLine: 142, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct._Task*)* @_Z13task_switchtoP5_Task, variables: !70)
!68 = !DISubroutineType(types: !69)
!69 = !{null, !21}
!70 = !{!71}
!71 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 1, scope: !67, file: !1, line: 141, type: !21)
!72 = !DISubprogram(name: "task_free", linkageName: "_Z9task_freeP5_Task", scope: !1, file: !1, line: 151, type: !68, isLocal: false, isDefinition: true, scopeLine: 152, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct._Task*)* @_Z9task_freeP5_Task, variables: !73)
!73 = !{!74, !75}
!74 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "t", arg: 1, scope: !72, file: !1, line: 151, type: !21)
!75 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !72, file: !1, line: 160, type: !21)
!76 = !DISubprogram(name: "task_restart", linkageName: "_Z12task_restartP5_Task", scope: !1, file: !1, line: 175, type: !68, isLocal: false, isDefinition: true, scopeLine: 176, flags: DIFlagPrototyped, isOptimized: true, function: void (%struct._Task*)* @_Z12task_restartP5_Task, variables: !77)
!77 = !{!78}
!78 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "p", arg: 1, scope: !76, file: !1, line: 175, type: !21)
!79 = !DISubprogram(name: "task_testoverflow", linkageName: "_Z17task_testoverflowP5_Task", scope: !1, file: !1, line: 183, type: !80, isLocal: false, isDefinition: true, scopeLine: 184, flags: DIFlagPrototyped, isOptimized: true, function: i1 (%struct._Task*)* @_Z17task_testoverflowP5_Task, variables: !83)
!80 = !DISubroutineType(types: !81)
!81 = !{!82, !21}
!82 = !DIBasicType(name: "bool", size: 8, align: 8, encoding: DW_ATE_boolean)
!83 = !{!84}
!84 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "t", arg: 1, scope: !79, file: !1, line: 183, type: !21)
!85 = !DISubprogram(name: "task_stackusage", linkageName: "_Z15task_stackusageP5_Task", scope: !1, file: !1, line: 190, type: !86, isLocal: false, isDefinition: true, scopeLine: 191, flags: DIFlagPrototyped, isOptimized: true, function: i32 (%struct._Task*)* @_Z15task_stackusageP5_Task, variables: !88)
!86 = !DISubroutineType(types: !87)
!87 = !{!19, !21}
!88 = !{!89, !90}
!89 = !DILocalVariable(tag: DW_TAG_arg_variable, name: "t", arg: 1, scope: !85, file: !1, line: 190, type: !21)
!90 = !DILocalVariable(tag: DW_TAG_auto_variable, name: "p", scope: !85, file: !1, line: 197, type: !21)
!91 = !{!92, !93, !94}
!92 = !DIGlobalVariable(name: "main_task", scope: !0, file: !1, line: 22, type: !"_ZTS5_Task", isLocal: false, isDefinition: true, variable: %struct._Task* @main_task)
!93 = !DIGlobalVariable(name: "current_task", scope: !0, file: !1, line: 23, type: !21, isLocal: false, isDefinition: true, variable: %struct._Task** @current_task)
!94 = !DIGlobalVariable(name: "tmp_jmpb", scope: !0, file: !1, line: 24, type: !10, isLocal: false, isDefinition: true, variable: [37 x i32]* @tmp_jmpb)
!95 = !{i32 2, !"Dwarf Version", i32 2}
!96 = !{i32 2, !"Debug Info Version", i32 700000003}
!97 = !{i32 1, !"PIC Level", i32 2}
!98 = !{!"Apple LLVM version 7.0.0 (clang-700.1.76)"}
!99 = !DIExpression()
!100 = !DILocation(line: 26, column: 23, scope: !35)
!101 = !DILocation(line: 26, column: 36, scope: !35)
!102 = !DILocation(line: 31, column: 26, scope: !35)
!103 = !DILocation(line: 31, column: 24, scope: !35)
!104 = !DILocation(line: 31, column: 34, scope: !35)
!105 = !DILocation(line: 31, column: 42, scope: !35)
!106 = !DILocation(line: 31, column: 22, scope: !35)
!107 = !DILocation(line: 31, column: 5, scope: !35)
!108 = !DILocation(line: 34, column: 18, scope: !43)
!109 = !DILocation(line: 34, column: 30, scope: !43)
!110 = !DILocation(line: 34, column: 43, scope: !43)
!111 = !DILocation(line: 37, column: 5, scope: !43)
!112 = !DILocation(line: 43, column: 7, scope: !43)
!113 = !DILocation(line: 43, column: 18, scope: !43)
!114 = !{!115, !116, i64 0}
!115 = !{!"_ZTS5_Task", !116, i64 0, !117, i64 8, !117, i64 156, !119, i64 304, !119, i64 308, !120, i64 312, !120, i64 320, !120, i64 328, !119, i64 336, !120, i64 344, !116, i64 352}
!116 = !{!"long", !117, i64 0}
!117 = !{!"omnipotent char", !118, i64 0}
!118 = !{!"Simple C/C++ TBAA"}
!119 = !{!"int", !117, i64 0}
!120 = !{!"any pointer", !117, i64 0}
!121 = !DILocation(line: 44, column: 7, scope: !43)
!122 = !DILocation(line: 44, column: 18, scope: !43)
!123 = !{!115, !116, i64 352}
!124 = !DILocation(line: 45, column: 7, scope: !43)
!125 = !DILocation(line: 45, column: 16, scope: !43)
!126 = !{!115, !120, i64 344}
!127 = !DILocation(line: 37, column: 11, scope: !43)
!128 = !DILocation(line: 26, column: 23, scope: !35, inlinedAt: !129)
!129 = distinct !DILocation(line: 48, column: 9, scope: !43)
!130 = !DILocation(line: 26, column: 36, scope: !35, inlinedAt: !129)
!131 = !DILocation(line: 31, column: 26, scope: !35, inlinedAt: !129)
!132 = !DILocation(line: 31, column: 24, scope: !35, inlinedAt: !129)
!133 = !DILocation(line: 31, column: 34, scope: !35, inlinedAt: !129)
!134 = !DILocation(line: 31, column: 42, scope: !35, inlinedAt: !129)
!135 = !DILocation(line: 31, column: 22, scope: !35, inlinedAt: !129)
!136 = !DILocation(line: 36, column: 14, scope: !43)
!137 = !DILocation(line: 49, column: 11, scope: !138)
!138 = distinct !DILexicalBlock(scope: !43, file: !1, line: 49, column: 9)
!139 = !DILocation(line: 49, column: 9, scope: !43)
!140 = !DILocation(line: 51, column: 9, scope: !141)
!141 = distinct !DILexicalBlock(scope: !138, file: !1, line: 50, column: 5)
!142 = !DILocation(line: 55, column: 17, scope: !43)
!143 = !{!115, !119, i64 308}
!144 = !DILocation(line: 55, column: 22, scope: !43)
!145 = !DILocation(line: 55, column: 7, scope: !43)
!146 = !DILocation(line: 55, column: 12, scope: !43)
!147 = !DILocation(line: 56, column: 13, scope: !43)
!148 = !DILocation(line: 57, column: 7, scope: !43)
!149 = !DILocation(line: 57, column: 12, scope: !43)
!150 = !{!115, !119, i64 304}
!151 = !DILocation(line: 58, column: 17, scope: !43)
!152 = !{!115, !120, i64 312}
!153 = !DILocation(line: 58, column: 7, scope: !43)
!154 = !DILocation(line: 58, column: 12, scope: !43)
!155 = !DILocation(line: 59, column: 13, scope: !43)
!156 = !DILocation(line: 63, column: 19, scope: !157)
!157 = distinct !DILexicalBlock(scope: !43, file: !1, line: 63, column: 9)
!158 = !DILocation(line: 63, column: 17, scope: !157)
!159 = !DILocation(line: 63, column: 9, scope: !157)
!160 = !DILocation(line: 63, column: 26, scope: !157)
!161 = !DILocation(line: 63, column: 9, scope: !43)
!162 = !DILocation(line: 74, column: 15, scope: !163)
!163 = distinct !DILexicalBlock(scope: !164, file: !1, line: 74, column: 13)
!164 = distinct !DILexicalBlock(scope: !165, file: !1, line: 71, column: 5)
!165 = distinct !DILexicalBlock(scope: !166, file: !1, line: 70, column: 5)
!166 = distinct !DILexicalBlock(scope: !43, file: !1, line: 70, column: 5)
!167 = !DILocation(line: 90, column: 13, scope: !164)
!168 = !DILocation(line: 90, column: 21, scope: !164)
!169 = !DILocation(line: 65, column: 18, scope: !170)
!170 = distinct !DILexicalBlock(scope: !157, file: !1, line: 64, column: 5)
!171 = !DILocation(line: 65, column: 9, scope: !170)
!172 = !DILocation(line: 66, column: 18, scope: !170)
!173 = !DILocation(line: 66, column: 9, scope: !170)
!174 = !{!115, !119, i64 336}
!175 = !DILocation(line: 74, column: 26, scope: !163)
!176 = !DILocation(line: 74, column: 47, scope: !163)
!177 = !DILocation(line: 74, column: 42, scope: !163)
!178 = !DILocation(line: 74, column: 13, scope: !164)
!179 = !DILocation(line: 76, column: 17, scope: !180)
!180 = distinct !DILexicalBlock(scope: !181, file: !1, line: 76, column: 17)
!181 = distinct !DILexicalBlock(scope: !163, file: !1, line: 75, column: 9)
!182 = !DILocation(line: 76, column: 34, scope: !180)
!183 = !DILocation(line: 76, column: 17, scope: !181)
!184 = !DILocation(line: 78, column: 26, scope: !185)
!185 = distinct !DILexicalBlock(scope: !180, file: !1, line: 77, column: 13)
!186 = !DILocation(line: 78, column: 15, scope: !185)
!187 = !DILocation(line: 81, column: 16, scope: !164)
!188 = !DILocation(line: 84, column: 13, scope: !189)
!189 = distinct !DILexicalBlock(scope: !164, file: !1, line: 84, column: 13)
!190 = !DILocation(line: 84, column: 30, scope: !189)
!191 = !DILocation(line: 84, column: 13, scope: !164)
!192 = !DILocation(line: 86, column: 13, scope: !193)
!193 = distinct !DILexicalBlock(scope: !189, file: !1, line: 85, column: 9)
!194 = !{!115, !120, i64 320}
!195 = !{!115, !120, i64 328}
!196 = !DILocation(line: 90, column: 9, scope: !164)
!197 = !DILocation(line: 93, column: 9, scope: !164)
!198 = !DILocation(line: 96, column: 13, scope: !199)
!199 = distinct !DILexicalBlock(scope: !164, file: !1, line: 96, column: 13)
!200 = !DILocation(line: 96, column: 30, scope: !199)
!201 = !DILocation(line: 96, column: 13, scope: !164)
!202 = !DILocation(line: 98, column: 13, scope: !203)
!203 = distinct !DILexicalBlock(scope: !199, file: !1, line: 97, column: 9)
!204 = !DILocation(line: 99, column: 9, scope: !203)
!205 = !DILocation(line: 151, column: 24, scope: !72)
!206 = !DILocation(line: 153, column: 8, scope: !72)
!207 = !DILocation(line: 153, column: 13, scope: !72)
!208 = !DILocation(line: 154, column: 12, scope: !209)
!209 = distinct !DILexicalBlock(scope: !72, file: !1, line: 154, column: 9)
!210 = !DILocation(line: 154, column: 17, scope: !209)
!211 = !DILocation(line: 154, column: 25, scope: !209)
!212 = !DILocation(line: 154, column: 38, scope: !209)
!213 = !DILocation(line: 154, column: 29, scope: !209)
!214 = !DILocation(line: 154, column: 9, scope: !72)
!215 = !DILocation(line: 156, column: 29, scope: !216)
!216 = distinct !DILexicalBlock(scope: !209, file: !1, line: 155, column: 5)
!217 = !DILocation(line: 156, column: 12, scope: !216)
!218 = !DILocation(line: 156, column: 17, scope: !216)
!219 = !DILocation(line: 157, column: 28, scope: !216)
!220 = !DILocation(line: 157, column: 17, scope: !216)
!221 = !DILocation(line: 158, column: 5, scope: !216)
!222 = !DILocation(line: 160, column: 26, scope: !72)
!223 = !DILocation(line: 160, column: 12, scope: !72)
!224 = !DILocation(line: 161, column: 11, scope: !225)
!225 = distinct !DILexicalBlock(scope: !72, file: !1, line: 161, column: 9)
!226 = !DILocation(line: 161, column: 9, scope: !72)
!227 = !DILocation(line: 163, column: 19, scope: !228)
!228 = distinct !DILexicalBlock(scope: !225, file: !1, line: 162, column: 5)
!229 = !DILocation(line: 163, column: 24, scope: !228)
!230 = !DILocation(line: 163, column: 9, scope: !228)
!231 = !DILocation(line: 167, column: 17, scope: !232)
!232 = distinct !DILexicalBlock(scope: !228, file: !1, line: 167, column: 13)
!233 = !DILocation(line: 167, column: 14, scope: !232)
!234 = !DILocation(line: 167, column: 13, scope: !228)
!235 = !DILocation(line: 169, column: 27, scope: !236)
!236 = distinct !DILexicalBlock(scope: !232, file: !1, line: 168, column: 9)
!237 = !DILocation(line: 169, column: 16, scope: !236)
!238 = !DILocation(line: 169, column: 21, scope: !236)
!239 = !DILocation(line: 170, column: 21, scope: !236)
!240 = !DILocation(line: 171, column: 9, scope: !236)
!241 = !DILocation(line: 173, column: 1, scope: !72)
!242 = !DILocation(line: 141, column: 28, scope: !67)
!243 = !DILocation(line: 143, column: 17, scope: !244)
!244 = distinct !DILexicalBlock(scope: !67, file: !1, line: 143, column: 9)
!245 = !{!120, !120, i64 0}
!246 = !DILocation(line: 143, column: 9, scope: !244)
!247 = !DILocation(line: 143, column: 38, scope: !244)
!248 = !DILocation(line: 143, column: 9, scope: !67)
!249 = !DILocation(line: 145, column: 22, scope: !250)
!250 = distinct !DILexicalBlock(scope: !244, file: !1, line: 144, column: 5)
!251 = !DILocation(line: 146, column: 18, scope: !250)
!252 = !DILocation(line: 146, column: 9, scope: !250)
!253 = !DILocation(line: 148, column: 1, scope: !67)
!254 = !DILocation(line: 103, column: 26, scope: !52)
!255 = !DILocation(line: 103, column: 48, scope: !52)
!256 = !DILocation(line: 105, column: 5, scope: !52)
!257 = !DILocation(line: 107, column: 9, scope: !52)
!258 = !DILocation(line: 107, column: 14, scope: !52)
!259 = !DILocation(line: 108, column: 9, scope: !52)
!260 = !DILocation(line: 108, column: 14, scope: !52)
!261 = !DILocation(line: 109, column: 17, scope: !262)
!262 = distinct !DILexicalBlock(scope: !52, file: !1, line: 109, column: 9)
!263 = !DILocation(line: 109, column: 9, scope: !262)
!264 = !DILocation(line: 109, column: 28, scope: !262)
!265 = !DILocation(line: 109, column: 9, scope: !52)
!266 = !DILocation(line: 105, column: 11, scope: !52)
!267 = !DILocation(line: 111, column: 7, scope: !268)
!268 = distinct !DILexicalBlock(scope: !262, file: !1, line: 110, column: 5)
!269 = !DILocation(line: 114, column: 15, scope: !52)
!270 = !{i64 0, i64 8, !271, i64 8, i64 148, !272, i64 156, i64 148, !272, i64 304, i64 4, !273, i64 308, i64 4, !273, i64 312, i64 8, !245, i64 320, i64 8, !245, i64 328, i64 8, !245, i64 336, i64 4, !273, i64 344, i64 8, !245, i64 352, i64 8, !271}
!271 = !{!116, !116, i64 0}
!272 = !{!117, !117, i64 0}
!273 = !{!119, !119, i64 0}
!274 = !DILocation(line: 115, column: 20, scope: !52)
!275 = !DILocation(line: 116, column: 18, scope: !52)
!276 = !DILocation(line: 117, column: 1, scope: !52)
!277 = !DILocation(line: 119, column: 30, scope: !59)
!278 = !DILocation(line: 119, column: 41, scope: !59)
!279 = !DILocation(line: 119, column: 55, scope: !59)
!280 = !DILocation(line: 123, column: 24, scope: !281)
!281 = distinct !DILexicalBlock(scope: !59, file: !1, line: 123, column: 5)
!282 = !DILocation(line: 123, column: 32, scope: !283)
!283 = distinct !DILexicalBlock(scope: !281, file: !1, line: 123, column: 5)
!284 = !DILocation(line: 123, column: 5, scope: !281)
!285 = !DILocation(line: 125, column: 17, scope: !286)
!286 = distinct !DILexicalBlock(scope: !287, file: !1, line: 125, column: 13)
!287 = distinct !DILexicalBlock(scope: !283, file: !1, line: 124, column: 5)
!288 = !DILocation(line: 125, column: 14, scope: !286)
!289 = !DILocation(line: 125, column: 22, scope: !286)
!290 = !DILocation(line: 125, column: 28, scope: !286)
!291 = !DILocation(line: 125, column: 33, scope: !286)
!292 = !DILocation(line: 125, column: 13, scope: !287)
!293 = !DILocation(line: 127, column: 16, scope: !294)
!294 = distinct !DILexicalBlock(scope: !286, file: !1, line: 126, column: 9)
!295 = !DILocation(line: 127, column: 20, scope: !294)
!296 = !DILocation(line: 128, column: 16, scope: !294)
!297 = !DILocation(line: 128, column: 20, scope: !294)
!298 = !DILocation(line: 129, column: 16, scope: !294)
!299 = !DILocation(line: 129, column: 27, scope: !294)
!300 = !DILocation(line: 130, column: 17, scope: !301)
!301 = distinct !DILexicalBlock(scope: !294, file: !1, line: 130, column: 17)
!302 = !DILocation(line: 130, column: 36, scope: !301)
!303 = !DILocation(line: 130, column: 17, scope: !294)
!304 = !DILocation(line: 132, column: 26, scope: !305)
!305 = distinct !DILexicalBlock(scope: !301, file: !1, line: 131, column: 13)
!306 = !DILocation(line: 132, column: 17, scope: !305)
!307 = !DILocation(line: 123, column: 48, scope: !283)
!308 = !DILocation(line: 138, column: 1, scope: !59)
!309 = !DILocation(line: 175, column: 27, scope: !76)
!310 = !DILocation(line: 177, column: 9, scope: !311)
!311 = distinct !DILexicalBlock(scope: !76, file: !1, line: 177, column: 9)
!312 = !DILocation(line: 177, column: 28, scope: !311)
!313 = !DILocation(line: 177, column: 9, scope: !76)
!314 = !DILocation(line: 179, column: 17, scope: !315)
!315 = distinct !DILexicalBlock(scope: !311, file: !1, line: 178, column: 5)
!316 = !DILocation(line: 179, column: 8, scope: !315)
!317 = !DILocation(line: 181, column: 1, scope: !76)
!318 = !DILocation(line: 183, column: 32, scope: !79)
!319 = !DILocation(line: 185, column: 13, scope: !320)
!320 = distinct !DILexicalBlock(scope: !79, file: !1, line: 185, column: 9)
!321 = !DILocation(line: 185, column: 10, scope: !320)
!322 = !DILocation(line: 185, column: 18, scope: !320)
!323 = !DILocation(line: 185, column: 25, scope: !320)
!324 = !DILocation(line: 185, column: 22, scope: !320)
!325 = !DILocation(line: 185, column: 9, scope: !79)
!326 = !DILocation(line: 187, column: 21, scope: !79)
!327 = !DILocation(line: 187, column: 31, scope: !79)
!328 = !DILocation(line: 187, column: 42, scope: !79)
!329 = !DILocation(line: 187, column: 54, scope: !79)
!330 = !DILocation(line: 187, column: 64, scope: !79)
!331 = !DILocation(line: 188, column: 1, scope: !79)
!332 = !DILocation(line: 190, column: 34, scope: !85)
!333 = !DILocation(line: 192, column: 13, scope: !334)
!334 = distinct !DILexicalBlock(scope: !85, file: !1, line: 192, column: 9)
!335 = !DILocation(line: 192, column: 10, scope: !334)
!336 = !DILocation(line: 192, column: 9, scope: !85)
!337 = !DILocation(line: 194, column: 13, scope: !338)
!338 = distinct !DILexicalBlock(scope: !85, file: !1, line: 194, column: 9)
!339 = !DILocation(line: 194, column: 10, scope: !338)
!340 = !DILocation(line: 194, column: 9, scope: !85)
!341 = !DILocation(line: 195, column: 18, scope: !338)
!342 = !DILocation(line: 195, column: 8, scope: !338)
!343 = !DILocation(line: 197, column: 12, scope: !85)
!344 = !DILocation(line: 198, column: 12, scope: !345)
!345 = distinct !DILexicalBlock(scope: !85, file: !1, line: 198, column: 9)
!346 = !DILocation(line: 198, column: 22, scope: !345)
!347 = !DILocation(line: 198, column: 33, scope: !345)
!348 = !DILocation(line: 199, column: 12, scope: !345)
!349 = !DILocation(line: 199, column: 22, scope: !345)
!350 = !DILocation(line: 199, column: 33, scope: !345)
!351 = !DILocation(line: 200, column: 13, scope: !345)
!352 = !DILocation(line: 200, column: 21, scope: !345)
!353 = !DILocation(line: 200, column: 28, scope: !345)
!354 = !DILocation(line: 26, column: 23, scope: !35, inlinedAt: !355)
!355 = distinct !DILocation(line: 200, column: 31, scope: !345)
!356 = !DILocation(line: 26, column: 36, scope: !35, inlinedAt: !355)
!357 = !DILocation(line: 31, column: 26, scope: !35, inlinedAt: !355)
!358 = !DILocation(line: 31, column: 24, scope: !35, inlinedAt: !355)
!359 = !DILocation(line: 31, column: 34, scope: !35, inlinedAt: !355)
!360 = !DILocation(line: 31, column: 42, scope: !35, inlinedAt: !355)
!361 = !DILocation(line: 31, column: 22, scope: !35, inlinedAt: !355)
!362 = !DILocation(line: 200, column: 51, scope: !345)
!363 = !DILocation(line: 198, column: 9, scope: !85)
!364 = !DILocation(line: 201, column: 18, scope: !345)
!365 = !DILocation(line: 201, column: 8, scope: !345)
!366 = !DILocation(line: 205, column: 25, scope: !85)
!367 = !DILocation(line: 205, column: 35, scope: !85)
!368 = !DILocation(line: 205, column: 46, scope: !85)
!369 = !DILocation(line: 206, column: 25, scope: !85)
!370 = !DILocation(line: 206, column: 35, scope: !85)
!371 = !DILocation(line: 206, column: 46, scope: !85)
!372 = !DILocation(line: 207, column: 42, scope: !85)
!373 = !DILocation(line: 26, column: 23, scope: !35, inlinedAt: !374)
!374 = distinct !DILocation(line: 207, column: 12, scope: !85)
!375 = !DILocation(line: 26, column: 36, scope: !35, inlinedAt: !374)
!376 = !DILocation(line: 31, column: 26, scope: !35, inlinedAt: !374)
!377 = !DILocation(line: 31, column: 24, scope: !35, inlinedAt: !374)
!378 = !DILocation(line: 31, column: 34, scope: !35, inlinedAt: !374)
!379 = !DILocation(line: 31, column: 42, scope: !35, inlinedAt: !374)
!380 = !DILocation(line: 31, column: 22, scope: !35, inlinedAt: !374)
!381 = !DILocation(line: 207, column: 52, scope: !85)
!382 = !DILocation(line: 204, column: 5, scope: !85)
!383 = !DILocation(line: 204, column: 23, scope: !85)
!384 = !DILocation(line: 204, column: 30, scope: !85)
!385 = !DILocation(line: 26, column: 23, scope: !35, inlinedAt: !386)
!386 = distinct !DILocation(line: 210, column: 12, scope: !85)
!387 = !DILocation(line: 26, column: 36, scope: !35, inlinedAt: !386)
!388 = !DILocation(line: 31, column: 26, scope: !35, inlinedAt: !386)
!389 = !DILocation(line: 31, column: 24, scope: !35, inlinedAt: !386)
!390 = !DILocation(line: 31, column: 34, scope: !35, inlinedAt: !386)
!391 = !DILocation(line: 31, column: 42, scope: !35, inlinedAt: !386)
!392 = !DILocation(line: 31, column: 22, scope: !35, inlinedAt: !386)
!393 = !DILocation(line: 210, column: 5, scope: !85)
!394 = !DILocation(line: 211, column: 1, scope: !85)
