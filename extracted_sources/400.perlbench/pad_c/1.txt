void
Perl_pad_undef(pTHX_ CV* cv)
{
    I32 ix;
    PADLIST *padlist = CvPADLIST(cv);

    if (!padlist)
	return;
    if (!SvREFCNT(CvPADLIST(cv))) /* may be during global destruction */
	return;

    DEBUG_X(PerlIO_printf(Perl_debug_log,
	  "Pad undef: padlist=0x%"UVxf"\n" , PTR2UV(padlist))
    );

    /* detach any '&' anon children in the pad; if afterwards they
     * are still live, fix up their CvOUTSIDEs to point to our outside,
     * bypassing us. */
    /* XXX DAPM for efficiency, we should only do this if we know we have
     * children, or integrate this loop with general cleanup */

    if (!PL_dirty) { /* don't bother during global destruction */
	CV *outercv = CvOUTSIDE(cv);
	U32 seq = CvOUTSIDE_SEQ(cv);
	AV *comppad_name = (AV*)AvARRAY(padlist)[0];
	SV **namepad = AvARRAY(comppad_name);
	AV *comppad = (AV*)AvARRAY(padlist)[1];
	SV **curpad = AvARRAY(comppad);
	for (ix = AvFILLp(comppad_name); ix > 0; ix--) {
	    SV *namesv = namepad[ix];
	    if (namesv && namesv != &PL_sv_undef
		&& *SvPVX(namesv) == '&')
	    {
		CV *innercv = (CV*)curpad[ix];
		namepad[ix] = Nullsv;
		SvREFCNT_dec(namesv);

		if (SvREFCNT(comppad) < 2) { /* allow for /(?{ sub{} })/  */
		    curpad[ix] = Nullsv;
		    SvREFCNT_dec(innercv);
		}
		if (SvREFCNT(innercv) /* in use, not just a prototype */
		    && CvOUTSIDE(innercv) == cv)
		{
		    assert(CvWEAKOUTSIDE(innercv));
		    /* don't relink to grandfather if he's being freed */
		    if (outercv && SvREFCNT(outercv)) {
			CvWEAKOUTSIDE_off(innercv);
			CvOUTSIDE(innercv) = outercv;
			CvOUTSIDE_SEQ(innercv) = seq;
			SvREFCNT_inc(outercv);
		    }
		    else {
			CvOUTSIDE(innercv) = Nullcv;
		    }

		}

	    }
	}
    }
