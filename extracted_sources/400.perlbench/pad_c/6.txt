PADOFFSET
Perl_pad_findmy(pTHX_ char *name)
{
    I32 off;
    I32 fake_off = 0;
    I32 our_off = 0;
    SV *sv;
    SV **svp = AvARRAY(PL_comppad_name);
    U32 seq = PL_cop_seqmax;

    ASSERT_CURPAD_ACTIVE("pad_findmy");
    DEBUG_Xv(PerlIO_printf(Perl_debug_log, "Pad findmy:  \"%s\"\n", name));

#ifdef USE_5005THREADS
    /*
     * Special case to get lexical (and hence per-thread) @_.
     * XXX I need to find out how to tell at parse-time whether use
     * of @_ should refer to a lexical (from a sub) or defgv (global
     * scope and maybe weird sub-ish things like formats). See
     * startsub in perly.y.  It's possible that @_ could be lexical
     * (at least from subs) even in non-threaded perl.
     */
    if (strEQ(name, "@_"))
	return 0;		/* success. (NOT_IN_PAD indicates failure) */
#endif /* USE_5005THREADS */

    /* The one we're looking for is probably just before comppad_name_fill. */
    for (off = AvFILLp(PL_comppad_name); off > 0; off--) {
	sv = svp[off];
	if (!sv || sv == &PL_sv_undef || !strEQ(SvPVX(sv), name))
	    continue;
	if (SvFAKE(sv)) {
	    /* we'll use this later if we don't find a real entry */
	    fake_off = off;
	    continue;
	}
	else {
	    if (   seq >  U_32(SvNVX(sv))	/* min */
		&& seq <= (U32)SvIVX(sv))	/* max */
		return off;
	    else if ((SvFLAGS(sv) & SVpad_OUR)
		    && U_32(SvNVX(sv)) == PAD_MAX) /* min */
	    {
		/* look for an our that's being introduced; this allows
		 *    our $foo = 0 unless defined $foo;
		 * to not give a warning. (Yes, this is a hack) */
		our_off = off;
	    }
	}
    }
    if (fake_off)
	return fake_off;

    /* See if it's in a nested scope */
    off = pad_findlex(name, 0, PL_compcv);
    if (off)			/* pad_findlex returns 0 for failure...*/
	return off;
    if (our_off)
	return our_off;
    return NOT_IN_PAD;		/* ...but we return NOT_IN_PAD for failure */

}
