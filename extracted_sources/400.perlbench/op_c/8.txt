PADOFFSET
Perl_allocmy(pTHX_ char *name)
{
    PADOFFSET off;

    /* complain about "my $_" etc etc */
    if (!(PL_in_my == KEY_our ||
	  isALPHA(name[1]) ||
	  (USE_UTF8_IN_NAMES && UTF8_IS_START(name[1])) ||
	  (name[1] == '_' && (int)strlen(name) > 2)))
    {
	if (!isPRINT(name[1]) || strchr("\t\n\r\f", name[1])) {
	    /* 1999-02-27 mjd@plover.com */
	    char *p;
	    p = strchr(name, '\0');
	    /* The next block assumes the buffer is at least 205 chars
	       long.  At present, it's always at least 256 chars. */
	    if (p-name > 200) {
		strcpy(name+200, "...");
		p = name+199;
	    }
	    else {
		p[1] = '\0';
	    }
	    /* Move everything else down one character */
	    for (; p-name > 2; p--)
		*p = *(p-1);
	    name[2] = toCTRL(name[1]);
	    name[1] = '^';
	}
	yyerror(Perl_form(aTHX_ "Can't use global %s in \"my\"",name));
    }
    /* check for duplicate declaration */
    pad_check_dup(name,
		(bool)(PL_in_my == KEY_our),
		(PL_curstash ? PL_curstash : PL_defstash)
    );

    if (PL_in_my_stash && *name != '$') {
	yyerror(Perl_form(aTHX_
		    "Can't declare class for non-scalar %s in \"%s\"",
		     name, PL_in_my == KEY_our ? "our" : "my"));
    }

    /* allocate a spare slot and store the name in that slot */

    off = pad_add_name(name,
		    PL_in_my_stash,
		    (PL_in_my == KEY_our 
			? (PL_curstash ? PL_curstash : PL_defstash)
			: Nullhv
		    ),
		    0 /*  not fake */
    );
    return off;
}
