static char *yyrule[] = {
"$accept : prog",
"prog : progstart lineseq",
"block : '{' remember lineseq '}'",
"remember :",
"progstart :",
"mblock : '{' mremember lineseq '}'",
"mremember :",
"lineseq :",
"lineseq : lineseq decl",
"lineseq : lineseq line",
"line : label cond",
"line : loop",
"line : label ';'",
"line : label sideff ';'",
"sideff : error",
"sideff : expr",
"sideff : expr IF expr",
"sideff : expr UNLESS expr",
"sideff : expr WHILE expr",
"sideff : expr UNTIL iexpr",
"sideff : expr FOR expr",
"else :",
"else : ELSE mblock",
"else : ELSIF '(' mexpr ')' mblock else",
"cond : IF '(' remember mexpr ')' mblock else",
"cond : UNLESS '(' remember miexpr ')' mblock else",
"cont :",
"cont : CONTINUE block",
"loop : label WHILE '(' remember mtexpr ')' mblock cont",
"loop : label UNTIL '(' remember miexpr ')' mblock cont",
"loop : label FOR MY remember my_scalar '(' mexpr ')' mblock cont",
"loop : label FOR scalar '(' remember mexpr ')' mblock cont",
"loop : label FOR '(' remember mexpr ')' mblock cont",
"loop : label FOR '(' remember mnexpr ';' mtexpr ';' mnexpr ')' mblock",
"loop : label block cont",
"nexpr :",
"nexpr : sideff",
"texpr :",
"texpr : expr",
"iexpr : expr",
"mexpr : expr",
"mnexpr : nexpr",
"mtexpr : texpr",
"miexpr : iexpr",
"label :",
"label : LABEL",
"decl : format",
"decl : subrout",
"decl : mysubrout",
"decl : package",
"decl : use",
"format : FORMAT startformsub formname block",
"formname : WORD",
"formname :",
"mysubrout : MYSUB startsub subname proto subattrlist subbody",
"subrout : SUB startsub subname proto subattrlist subbody",
"startsub :",
"startanonsub :",
"startformsub :",
"subname : WORD",
"proto :",
"proto : THING",
"subattrlist :",
"subattrlist : COLONATTR THING",
"subattrlist : COLONATTR",
"myattrlist : COLONATTR THING",
"myattrlist : COLONATTR",
"subbody : block",
"subbody : ';'",
"package : PACKAGE WORD ';'",
"package : PACKAGE ';'",
"$$1 :",
"use : USE startsub $$1 WORD WORD listexpr ';'",
"expr : expr ANDOP expr",
"expr : expr OROP expr",
"expr : argexpr",
"argexpr : argexpr ','",
"argexpr : argexpr ',' term",
"argexpr : term",
"listop : LSTOP indirob argexpr",
"listop : FUNC '(' indirob expr ')'",
"listop : term ARROW method '(' listexprcom ')'",
"listop : term ARROW method",
"listop : METHOD indirob listexpr",
"listop : FUNCMETH indirob '(' listexprcom ')'",
"listop : LSTOP listexpr",
"listop : FUNC '(' listexprcom ')'",
"$$2 :",
"listop : LSTOPSUB startanonsub block $$2 listexpr",
"method : METHOD",
"method : scalar",
"subscripted : star '{' expr ';' '}'",
"subscripted : scalar '[' expr ']'",
"subscripted : term ARROW '[' expr ']'",
"subscripted : subscripted '[' expr ']'",
"subscripted : scalar '{' expr ';' '}'",
"subscripted : term ARROW '{' expr ';' '}'",
"subscripted : subscripted '{' expr ';' '}'",
"subscripted : term ARROW '(' ')'",
"subscripted : term ARROW '(' expr ')'",
"subscripted : subscripted '(' expr ')'",
"subscripted : subscripted '(' ')'",
"termbinop : term ASSIGNOP term",
"termbinop : term POWOP term",
"termbinop : term MULOP term",
"termbinop : term ADDOP term",
"termbinop : term SHIFTOP term",
"termbinop : term RELOP term",
"termbinop : term EQOP term",
"termbinop : term BITANDOP term",
"termbinop : term BITOROP term",
"termbinop : term DOTDOT term",
"termbinop : term ANDAND term",
"termbinop : term OROR term",
"termbinop : term MATCHOP term",
"termunop : '-' term",
"termunop : '+' term",
"termunop : '!' term",
"termunop : '~' term",
"termunop : term POSTINC",
"termunop : term POSTDEC",
"termunop : PREINC term",
"termunop : PREDEC term",
"anonymous : '[' expr ']'",
"anonymous : '[' ']'",
"anonymous : HASHBRACK expr ';' '}'",
