int
yyparse()
{
    register int yym, yyn, yystate;
    register short *yyssp;
    register YYSTYPE *yyvsp;
    short* yyss;
    YYSTYPE* yyvs;
    unsigned yystacksize = YYSTACKSIZE;
    int retval = 0;
#if YYDEBUG
    register char *yys;
#endif

    struct ysv *ysave;
#ifdef USE_ITHREADS
    ENTER;			/* force yydestruct() before we return */
#endif
    New(73, ysave, 1, struct ysv);
    SAVEDESTRUCTOR_X(yydestruct, ysave);
    ysave->oldyydebug	= yydebug;
    ysave->oldyynerrs	= yynerrs;
    ysave->oldyyerrflag	= yyerrflag;
    ysave->oldyychar	= yychar;
    ysave->oldyyval	= yyval;
    ysave->oldyylval	= yylval;

#if YYDEBUG
    if ((yys = getenv("YYDEBUG")))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    /*
    ** Initialize private stacks (yyparse may be called from an action)
    */
    New(73, yyss, yystacksize, short);
    New(73, yyvs, yystacksize, YYSTYPE);
    ysave->yyss = yyss;
    ysave->yyvs = yyvs;
    if (!yyvs || !yyss)
	goto yyoverflow;

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if ((yyn = yydefred[yystate])) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            PerlIO_printf(Perl_debug_log, "yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            PerlIO_printf(Perl_debug_log, "yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
	    /*
	    ** reallocate and recover.  Note that pointers
	    ** have to be reset, or bad things will happen
	    */
	    int yyps_index = (yyssp - yyss);
	    int yypv_index = (yyvsp - yyvs);
	    yystacksize += YYSTACKSIZE;
	    ysave->yyvs = Renew(yyvs, yystacksize, YYSTYPE);
	    ysave->yyss = Renew(yyss, yystacksize, short);
	    if (!yyvs || !yyss)
            goto yyoverflow;
	    yyssp = yyss + yyps_index;
	    yyvsp = yyvs + yypv_index;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint

#endif

    yyerror("syntax error");
#ifdef lint

#endif

    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    PerlIO_printf(Perl_debug_log, "yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
		    /*
		    ** reallocate and recover.  Note that pointers
		    ** have to be reset, or bad things will happen
		    */
		    int yyps_index = (yyssp - yyss);
		    int yypv_index = (yyvsp - yyvs);
		    yystacksize += YYSTACKSIZE;
		    ysave->yyvs = Renew(yyvs, yystacksize, YYSTYPE);
		    ysave->yyss = Renew(yyss, yystacksize, short);
		    if (!yyvs || !yyss)
                    goto yyoverflow;
		    yyssp = yyss + yyps_index;
		    yyvsp = yyvs + yypv_index;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    PerlIO_printf(Perl_debug_log, "yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            PerlIO_printf(Perl_debug_log, "yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        PerlIO_printf(Perl_debug_log, "yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
/* #line 140 "perly.y" */
{ yyval.ival = yyvsp[-1].ival; newPROG(block_end(yyvsp[-1].ival,yyvsp[0].opval)); }
break;
case 2:
/* #line 145 "perly.y" */
{ if (PL_copline > (line_t)yyvsp[-3].ival)
			      PL_copline = (line_t)yyvsp[-3].ival;
			  yyval.opval = block_end(yyvsp[-2].ival, yyvsp[-1].opval); }
break;
case 3:
/* #line 151 "perly.y" */
{ yyval.ival = block_start(TRUE); }
break;
case 4:
/* #line 155 "perly.y" */
{
#if defined(YYDEBUG) && defined(DEBUGGING)
		    yydebug = (DEBUG_p_TEST);
#endif
		    PL_expect = XSTATE; yyval.ival = block_start(TRUE);
		}
break;
case 5:
/* #line 165 "perly.y" */
{ if (PL_copline > (line_t)yyvsp[-3].ival)
			      PL_copline = (line_t)yyvsp[-3].ival;
			  yyval.opval = block_end(yyvsp[-2].ival, yyvsp[-1].opval); }
break;
case 6:
/* #line 171 "perly.y" */
{ yyval.ival = block_start(FALSE); }
break;
case 7:
/* #line 176 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 8:
/* #line 178 "perly.y" */
{ yyval.opval = yyvsp[-1].opval; }
break;
case 9:
/* #line 180 "perly.y" */
{   yyval.opval = append_list(OP_LINESEQ,
				(LISTOP*)yyvsp[-1].opval, (LISTOP*)yyvsp[0].opval);
			    PL_pad_reset_pending = TRUE;
			    if (yyvsp[-1].opval && yyvsp[0].opval) PL_hints |= HINT_BLOCK_SCOPE; }
break;
case 10:
/* #line 188 "perly.y" */
{ yyval.opval = newSTATEOP(0, yyvsp[-1].pval, yyvsp[0].opval); }
break;
case 12:
/* #line 191 "perly.y" */
{ if (yyvsp[-1].pval != Nullch) {
			      yyval.opval = newSTATEOP(0, yyvsp[-1].pval, newOP(OP_NULL, 0));
			    }
			    else {
			      yyval.opval = Nullop;
			      PL_copline = NOLINE;
			    }
			    PL_expect = XSTATE; }
break;
case 13:
/* #line 200 "perly.y" */
{ yyval.opval = newSTATEOP(0, yyvsp[-2].pval, yyvsp[-1].opval);
			  PL_expect = XSTATE; }
break;
case 14:
/* #line 206 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 15:
/* #line 208 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 16:
/* #line 210 "perly.y" */
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 17:
/* #line 212 "perly.y" */
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 18:
/* #line 214 "perly.y" */
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, scalar(yyvsp[0].opval), yyvsp[-2].opval); }
break;
case 19:
/* #line 216 "perly.y" */
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, yyvsp[0].opval, yyvsp[-2].opval);}
break;
case 20:
/* #line 218 "perly.y" */
{ yyval.opval = newFOROP(0, Nullch, (line_t)yyvsp[-1].ival,
					Nullop, yyvsp[0].opval, yyvsp[-2].opval, Nullop); }
break;
case 21:
/* #line 224 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 22:
/* #line 226 "perly.y" */
{ (yyvsp[0].opval)->op_flags |= OPf_PARENS; yyval.opval = scope(yyvsp[0].opval); }
break;
case 23:
/* #line 228 "perly.y" */
{ PL_copline = (line_t)yyvsp[-5].ival;
			    yyval.opval = newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval);
			    PL_hints |= HINT_BLOCK_SCOPE; }
break;
case 24:
/* #line 235 "perly.y" */
{ PL_copline = (line_t)yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval)); }
break;
case 25:
/* #line 239 "perly.y" */
{ PL_copline = (line_t)yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval)); }
break;
case 26:
/* #line 246 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 27:
/* #line 248 "perly.y" */
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 28:
/* #line 253 "perly.y" */
{ PL_copline = (line_t)yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newSTATEOP(0, yyvsp[-7].pval,
				     newWHILEOP(0, 1, (LOOP*)Nullop,
						yyvsp[-6].ival, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval))); }
break;
case 29:
/* #line 259 "perly.y" */
{ PL_copline = (line_t)yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newSTATEOP(0, yyvsp[-7].pval,
				     newWHILEOP(0, 1, (LOOP*)Nullop,
						yyvsp[-6].ival, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval))); }
break;
case 30:
/* #line 265 "perly.y" */
{ yyval.opval = block_end(yyvsp[-6].ival,
				 newFOROP(0, yyvsp[-9].pval, (line_t)yyvsp[-8].ival, yyvsp[-5].opval, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 31:
/* #line 268 "perly.y" */
{ yyval.opval = block_end(yyvsp[-4].ival,
				 newFOROP(0, yyvsp[-8].pval, (line_t)yyvsp[-7].ival, mod(yyvsp[-6].opval, OP_ENTERLOOP),
					  yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 32:
/* #line 272 "perly.y" */
{ yyval.opval = block_end(yyvsp[-4].ival,
				 newFOROP(0, yyvsp[-7].pval, (line_t)yyvsp[-6].ival, Nullop, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 33:
/* #line 276 "perly.y" */
{ OP *forop;
			  PL_copline = (line_t)yyvsp[-9].ival;
			  forop = newSTATEOP(0, yyvsp[-10].pval,
					    newWHILEOP(0, 1, (LOOP*)Nullop,
						yyvsp[-9].ival, scalar(yyvsp[-4].opval),
						yyvsp[0].opval, yyvsp[-2].opval));
			  if (yyvsp[-6].opval) {
				forop = append_elem(OP_LINESEQ,
                                        newSTATEOP(0, (yyvsp[-10].pval?savepv(yyvsp[-10].pval):Nullch),
						   yyvsp[-6].opval),
					forop);
			  }

			  yyval.opval = block_end(yyvsp[-7].ival, forop); }
break;
case 34:
/* #line 291 "perly.y" */
{ yyval.opval = newSTATEOP(0, yyvsp[-2].pval,
				 newWHILEOP(0, 1, (LOOP*)Nullop,
					    NOLINE, Nullop, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 35:
/* #line 298 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 37:
/* #line 304 "perly.y" */
{ (void)scan_num("1", &yylval); yyval.opval = yylval.opval; }
break;
case 39:
/* #line 310 "perly.y" */
{ yyval.opval = invert(scalar(yyvsp[0].opval)); }
break;
case 40:
/* #line 315 "perly.y" */
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 41:
/* #line 319 "perly.y" */
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 42:
/* #line 323 "perly.y" */
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 43:
/* #line 327 "perly.y" */
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 44:
/* #line 332 "perly.y" */
{ yyval.pval = Nullch; }
break;
case 46:
/* #line 338 "perly.y" */
{ yyval.ival = 0; }
break;
case 47:
/* #line 340 "perly.y" */
{ yyval.ival = 0; }
break;
case 48:
/* #line 342 "perly.y" */
{ yyval.ival = 0; }
break;
case 49:
/* #line 344 "perly.y" */
{ yyval.ival = 0; }
break;
case 50:
/* #line 346 "perly.y" */
{ yyval.ival = 0; }
break;
case 51:
/* #line 350 "perly.y" */
{ newFORM(yyvsp[-2].ival, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 52:
/* #line 353 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 53:
/* #line 354 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 54:
/* #line 359 "perly.y" */
{ newMYSUB(yyvsp[-4].ival, yyvsp[-3].opval, yyvsp[-2].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 55:
/* #line 364 "perly.y" */
{ newATTRSUB(yyvsp[-4].ival, yyvsp[-3].opval, yyvsp[-2].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 56:
/* #line 368 "perly.y" */
{ yyval.ival = start_subparse(FALSE, 0); }
break;
case 57:
/* #line 372 "perly.y" */
{ yyval.ival = start_subparse(FALSE, CVf_ANON); }
break;
case 58:
/* #line 376 "perly.y" */
{ yyval.ival = start_subparse(TRUE, 0); }
break;
case 59:
/* #line 380 "perly.y" */
{ STRLEN n_a; char *name = SvPV(((SVOP*)yyvsp[0].opval)->op_sv,n_a);
			  if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK"))
			      CvSPECIAL_on(PL_compcv);
			  yyval.opval = yyvsp[0].opval; }
break;
case 60:
/* #line 389 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 62:
/* #line 395 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 63:
/* #line 397 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 64:
/* #line 399 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 65:
/* #line 404 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 66:
/* #line 406 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 67:
/* #line 410 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 68:
/* #line 411 "perly.y" */
{ yyval.opval = Nullop; PL_expect = XSTATE; }
break;
case 69:
/* #line 415 "perly.y" */
{ package(yyvsp[-1].opval); }
break;
case 70:
/* #line 417 "perly.y" */
{ package(Nullop); }
break;
case 71:
/* #line 421 "perly.y" */
{ CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
break;
case 72:
/* #line 423 "perly.y" */
{ utilize(yyvsp[-6].ival, yyvsp[-5].ival, yyvsp[-3].opval, yyvsp[-2].opval, yyvsp[-1].opval); }
break;
case 73:
/* #line 428 "perly.y" */
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 74:
/* #line 430 "perly.y" */
{ yyval.opval = newLOGOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 76:
/* #line 436 "perly.y" */
{ yyval.opval = yyvsp[-1].opval; }
break;
case 77:
/* #line 438 "perly.y" */
{ yyval.opval = append_elem(OP_LIST, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 79:
/* #line 444 "perly.y" */
{ yyval.opval = convert(yyvsp[-2].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-2].ival,yyvsp[-1].opval), yyvsp[0].opval) ); }
break;
case 80:
/* #line 447 "perly.y" */
{ yyval.opval = convert(yyvsp[-4].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-4].ival,yyvsp[-2].opval), yyvsp[-1].opval) ); }
break;
case 81:
/* #line 450 "perly.y" */
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, scalar(yyvsp[-5].opval), yyvsp[-1].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-3].opval))); }
break;
case 82:
/* #line 455 "perly.y" */
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, scalar(yyvsp[-2].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[0].opval))); }
break;
case 83:
/* #line 459 "perly.y" */
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-1].opval, yyvsp[0].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-2].opval))); }
break;
case 84:
/* #line 464 "perly.y" */
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-3].opval, yyvsp[-1].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-4].opval))); }
break;
case 85:
/* #line 469 "perly.y" */
{ yyval.opval = convert(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 86:
/* #line 471 "perly.y" */
{ yyval.opval = convert(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 87:
/* #line 473 "perly.y" */
{ yyvsp[0].opval = newANONATTRSUB(yyvsp[-1].ival, 0, Nullop, yyvsp[0].opval); }
break;
case 88:
/* #line 475 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 append_elem(OP_LIST,
				   prepend_elem(OP_LIST, yyvsp[-2].opval, yyvsp[0].opval), yyvsp[-4].opval)); }
break;
case 91:
/* #line 489 "perly.y" */
{ yyval.opval = newBINOP(OP_GELEM, 0, yyvsp[-4].opval, scalar(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 92:
/* #line 492 "perly.y" */
{ yyval.opval = newBINOP(OP_AELEM, 0, oopsAV(yyvsp[-3].opval), scalar(yyvsp[-1].opval)); }
break;
case 93:
/* #line 494 "perly.y" */
{ yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-4].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 94:
/* #line 498 "perly.y" */
{ yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-3].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 95:
/* #line 502 "perly.y" */
{ yyval.opval = newBINOP(OP_HELEM, 0, oopsHV(yyvsp[-4].opval), jmaybe(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 96:
/* #line 505 "perly.y" */
{ yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-5].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 97:
/* #line 510 "perly.y" */
{ yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-4].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 98:
/* #line 515 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar(yyvsp[-3].opval))); }
break;
case 99:
/* #line 518 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, yyvsp[-1].opval,
				       newCVREF(0, scalar(yyvsp[-4].opval)))); }
break;
case 100:
/* #line 523 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, yyvsp[-1].opval,
					       newCVREF(0, scalar(yyvsp[-3].opval)))); }
break;
case 101:
/* #line 527 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar(yyvsp[-2].opval))); }
break;
case 102:
/* #line 533 "perly.y" */
{ yyval.opval = newASSIGNOP(OPf_STACKED, yyvsp[-2].opval, yyvsp[-1].ival, yyvsp[0].opval); }
break;
case 103:
/* #line 535 "perly.y" */
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 104:
/* #line 537 "perly.y" */
{   if (yyvsp[-1].ival != OP_REPEAT)
				scalar(yyvsp[-2].opval);
			    yyval.opval = newBINOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, scalar(yyvsp[0].opval)); }
break;
case 105:
/* #line 541 "perly.y" */
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 106:
/* #line 543 "perly.y" */
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 107:
/* #line 545 "perly.y" */
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 108:
/* #line 547 "perly.y" */
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 109:
/* #line 549 "perly.y" */
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 110:
/* #line 551 "perly.y" */
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 111:
/* #line 553 "perly.y" */
{ yyval.opval = newRANGE(yyvsp[-1].ival, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval));}
break;
case 112:
/* #line 555 "perly.y" */
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 113:
/* #line 557 "perly.y" */
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 114:
/* #line 559 "perly.y" */
{ yyval.opval = bind_match(yyvsp[-1].ival, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 115:
/* #line 564 "perly.y" */
{ yyval.opval = newUNOP(OP_NEGATE, 0, scalar(yyvsp[0].opval)); }
break;
case 116:
/* #line 566 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 117:
/* #line 568 "perly.y" */
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 118:
/* #line 570 "perly.y" */
{ yyval.opval = newUNOP(OP_COMPLEMENT, 0, scalar(yyvsp[0].opval));}
break;
case 119:
/* #line 572 "perly.y" */
{ yyval.opval = newUNOP(OP_POSTINC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTINC)); }
break;
case 120:
/* #line 575 "perly.y" */
{ yyval.opval = newUNOP(OP_POSTDEC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTDEC)); }
break;
case 121:
/* #line 578 "perly.y" */
{ yyval.opval = newUNOP(OP_PREINC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREINC)); }
break;
case 122:
/* #line 581 "perly.y" */
{ yyval.opval = newUNOP(OP_PREDEC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREDEC)); }
break;
case 123:
/* #line 588 "perly.y" */
{ yyval.opval = newANONLIST(yyvsp[-1].opval); }
break;
case 124:
/* #line 590 "perly.y" */
{ yyval.opval = newANONLIST(Nullop); }
break;
case 125:
/* #line 592 "perly.y" */
{ yyval.opval = newANONHASH(yyvsp[-2].opval); }
break;
case 126:
/* #line 594 "perly.y" */
{ yyval.opval = newANONHASH(Nullop); }
break;
case 127:
/* #line 596 "perly.y" */
{ yyval.opval = newANONATTRSUB(yyvsp[-3].ival, yyvsp[-2].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 128:
/* #line 602 "perly.y" */
{ yyval.opval = dofile(yyvsp[0].opval); }
break;
case 129:
/* #line 604 "perly.y" */
{ yyval.opval = newUNOP(OP_NULL, OPf_SPECIAL, scope(yyvsp[0].opval)); }
break;
case 130:
/* #line 606 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar(yyvsp[-2].opval)
				)),Nullop)); dep();}
break;
case 131:
/* #line 614 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    append_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar(yyvsp[-3].opval)
				)))); dep();}
break;
case 132:
/* #line 623 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(0,scalar(yyvsp[-2].opval))), Nullop)); dep();}
break;
case 133:
/* #line 627 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(0,scalar(yyvsp[-3].opval))))); dep();}
break;
case 138:
/* #line 639 "perly.y" */
{ yyval.opval = newCONDOP(0, yyvsp[-4].opval, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 139:
/* #line 641 "perly.y" */
{ yyval.opval = newUNOP(OP_REFGEN, 0, mod(yyvsp[0].opval,OP_REFGEN)); }
break;
case 140:
/* #line 643 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 141:
/* #line 645 "perly.y" */
{ yyval.opval = localize(yyvsp[0].opval,yyvsp[-1].ival); }
break;
case 142:
/* #line 647 "perly.y" */
{ yyval.opval = sawparens(yyvsp[-1].opval); }
break;
case 143:
/* #line 649 "perly.y" */
{ yyval.opval = sawparens(newNULLLIST()); }
break;
case 144:
/* #line 651 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 145:
/* #line 653 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 146:
/* #line 655 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 147:
/* #line 657 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 148:
/* #line 659 "perly.y" */
{ yyval.opval = newUNOP(OP_AV2ARYLEN, 0, ref(yyvsp[0].opval, OP_AV2ARYLEN));}
break;
case 149:
/* #line 661 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 150:
/* #line 663 "perly.y" */
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, yyvsp[-4].opval); }
break;
case 151:
/* #line 665 "perly.y" */
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, Nullop); }
break;
case 152:
/* #line 667 "perly.y" */
{ yyval.opval = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list(yyvsp[-1].opval),
					ref(yyvsp[-3].opval, OP_ASLICE))); }
break;
case 153:
/* #line 673 "perly.y" */
{ yyval.opval = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list(yyvsp[-2].opval),
					ref(oopsHV(yyvsp[-4].opval), OP_HSLICE)));
			    PL_expect = XOPERATOR; }
break;
case 154:
/* #line 680 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 155:
/* #line 682 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, 0, scalar(yyvsp[0].opval)); }
break;
case 156:
/* #line 684 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar(yyvsp[-2].opval)); }
break;
case 157:
/* #line 686 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[-1].opval, scalar(yyvsp[-3].opval))); }
break;
case 158:
/* #line 689 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[0].opval, scalar(yyvsp[-1].opval))); }
break;
case 159:
/* #line 692 "perly.y" */
{ yyval.opval = newOP(yyvsp[0].ival, OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }
break;
case 160:
/* #line 695 "perly.y" */
{ yyval.opval = newLOOPEX(yyvsp[-1].ival,yyvsp[0].opval); }
break;
case 161:
/* #line 697 "perly.y" */
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 162:
/* #line 699 "perly.y" */
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 163:
/* #line 701 "perly.y" */
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 164:
/* #line 703 "perly.y" */
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 165:
/* #line 705 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[0].opval, scalar(yyvsp[-1].opval))); }
break;
case 166:
/* #line 708 "perly.y" */
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 167:
/* #line 710 "perly.y" */
{ yyval.opval = newOP(yyvsp[-2].ival, 0); }
break;
case 168:
/* #line 712 "perly.y" */
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				scalar(yyvsp[0].opval)); }
break;
case 169:
/* #line 715 "perly.y" */
{ yyval.opval = yyvsp[-2].ival == OP_NOT ? newUNOP(yyvsp[-2].ival, 0, newSVOP(OP_CONST, 0, newSViv(0)))
					    : newOP(yyvsp[-2].ival, OPf_SPECIAL); }
break;
case 170:
/* #line 718 "perly.y" */
{ yyval.opval = newUNOP(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 171:
/* #line 720 "perly.y" */
{ yyval.opval = pmruntime(yyvsp[-3].opval, yyvsp[-1].opval, Nullop); }
break;
case 172:
/* #line 722 "perly.y" */
{ yyval.opval = pmruntime(yyvsp[-5].opval, yyvsp[-3].opval, yyvsp[-1].opval); }
break;
case 175:
/* #line 729 "perly.y" */
{ yyval.opval = my_attrs(yyvsp[-1].opval,yyvsp[0].opval); }
break;
case 176:
/* #line 731 "perly.y" */
{ yyval.opval = localize(yyvsp[0].opval,yyvsp[-1].ival); }
break;
case 177:
/* #line 736 "perly.y" */
{ yyval.opval = sawparens(yyvsp[-1].opval); }
break;
case 178:
/* #line 738 "perly.y" */
{ yyval.opval = sawparens(newNULLLIST()); }
break;
case 179:
/* #line 740 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 180:
/* #line 742 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 181:
/* #line 744 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 182:
/* #line 749 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 183:
/* #line 751 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 184:
/* #line 755 "perly.y" */
{ yyval.opval = Nullop; }
break;
case 185:
/* #line 757 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
case 186:
/* #line 759 "perly.y" */
{ yyval.opval = yyvsp[-1].opval; }
break;
case 187:
/* #line 765 "perly.y" */
{ PL_in_my = 0; yyval.opval = my(yyvsp[0].opval); }
break;
case 188:
/* #line 769 "perly.y" */
{ yyval.opval = newCVREF(yyvsp[-1].ival,yyvsp[0].opval); }
break;
case 189:
/* #line 773 "perly.y" */
{ yyval.opval = newSVREF(yyvsp[0].opval); }
break;
case 190:
/* #line 777 "perly.y" */
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 191:
/* #line 781 "perly.y" */
{ yyval.opval = newHVREF(yyvsp[0].opval); }
break;
case 192:
/* #line 785 "perly.y" */
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 193:
/* #line 789 "perly.y" */
{ yyval.opval = newGVREF(0,yyvsp[0].opval); }
break;
case 194:
/* #line 794 "perly.y" */
{ yyval.opval = scalar(yyvsp[0].opval); }
break;
case 195:
/* #line 796 "perly.y" */
{ yyval.opval = scalar(yyvsp[0].opval);  }
break;
case 196:
/* #line 798 "perly.y" */
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 197:
/* #line 801 "perly.y" */
{ yyval.opval = yyvsp[0].opval; }
break;
/* #line 2479 "y.tab.c" */
    }
