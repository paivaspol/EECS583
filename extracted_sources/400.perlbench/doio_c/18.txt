bool
Perl_do_exec3(pTHX_ char *cmd, int fd, int do_report)
{
    register char **a;
    register char *s;

    while (*cmd && isSPACE(*cmd))
	cmd++;

    /* save an extra exec if possible */

#ifdef CSH
    {
        char flags[PERL_FLAGS_MAX];
	if (strnEQ(cmd,PL_cshname,PL_cshlen) &&
	    strnEQ(cmd+PL_cshlen," -c",3)) {
#ifdef HAS_STRLCPY
          strlcpy(flags, "-c", PERL_FLAGS_MAX);
#else
	  strcpy(flags,"-c");
#endif
	  s = cmd+PL_cshlen+3;
	  if (*s == 'f') {
	      s++;
#ifdef HAS_STRLCPY
              strlcat(flags, "f", PERL_FLAGS_MAX);
#else
	      strcat(flags,"f");
#endif
	  }
	  if (*s == ' ')
	      s++;
	  if (*s++ == '\'') {
	      char *ncmd = s;

	      while (*s)
		  s++;
	      if (s[-1] == '\n')
		  *--s = '\0';
	      if (s[-1] == '\'') {
		  *--s = '\0';
		  PERL_FPU_PRE_EXEC
		  PerlProc_execl(PL_cshname,"csh", flags, ncmd, (char*)0);
		  PERL_FPU_POST_EXEC
		  *s = '\'';
		  return FALSE;
	      }
	  }
	}
    }
#endif /* CSH */

    /* see if there are shell metacharacters in it */

    if (*cmd == '.' && isSPACE(cmd[1]))
	goto doshell;

    if (strnEQ(cmd,"exec",4) && isSPACE(cmd[4]))
	goto doshell;

    for (s = cmd; *s && isALNUM(*s); s++) ;	/* catch VAR=val gizmo */
    if (*s == '=')
	goto doshell;

    for (s = cmd; *s; s++) {
	if (*s != ' ' && !isALPHA(*s) &&
	    strchr("$&*(){}[]'\";\\|?<>~`\n",*s)) {
	    if (*s == '\n' && !s[1]) {
		*s = '\0';
		break;
	    }
	    /* handle the 2>&1 construct at the end */
	    if (*s == '>' && s[1] == '&' && s[2] == '1'
		&& s > cmd + 1 && s[-1] == '2' && isSPACE(s[-2])
		&& (!s[3] || isSPACE(s[3])))
	    {
		char *t = s + 3;

		while (*t && isSPACE(*t))
		    ++t;
		if (!*t && (PerlLIO_dup2(1,2) != -1)) {
		    s[-2] = '\0';
		    break;
		}
	    }
	  doshell:
	    PERL_FPU_PRE_EXEC
	    PerlProc_execl(PL_sh_path, "sh", "-c", cmd, (char*)0);
	    PERL_FPU_POST_EXEC
	    return FALSE;
	}
    }
