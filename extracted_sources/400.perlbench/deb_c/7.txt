void
Perl_deb_stack_all(pTHX)
{
#ifdef DEBUGGING
    I32		 ix, si_ix;
    PERL_SI	 *si;
    PERL_CONTEXT *cx;

    /* rewind to start of chain */
    si = PL_curstackinfo;
    while (si->si_prev)
	si = si->si_prev;

    si_ix=0;
    for (;;)
    {
	char *si_name;
	int si_name_ix = si->si_type+1; /* -1 is a valid index */
	if (si_name_ix>= sizeof(si_names))
	    si_name = "????";
	else
	    si_name = si_names[si_name_ix];
	PerlIO_printf(Perl_debug_log, "STACK %"IVdf": %s\n",
						(IV)si_ix, si_name);

	for (ix=0; ix<=si->si_cxix; ix++) {

	    cx = &(si->si_cxstack[ix]);
	    PerlIO_printf(Perl_debug_log,
		    "  CX %"IVdf": %-6s => ",
		    (IV)ix, PL_block_type[CxTYPE(cx)]
	    );
	    /* substitution contexts don't save stack pointers etc) */
	    if (CxTYPE(cx) == CXt_SUBST)
		PerlIO_printf(Perl_debug_log, "\n");
	    else {

		/* Find the the current context's stack range by searching
		 * forward for any higher contexts using this stack; failing
		 * that, it will be equal to the size of the stack for old
		 * stacks, or PL_stack_sp for the current stack
		 */

		I32 i, stack_min, stack_max, mark_min, mark_max;
		I32 ret_min, ret_max;
		PERL_CONTEXT *cx_n;
		PERL_SI      *si_n;

		cx_n = Null(PERL_CONTEXT*);

		/* there's a separate stack per SI, so only search
		 * this one */

		for (i=ix+1; i<=si->si_cxix; i++) {
		    if (CxTYPE(cx) == CXt_SUBST)
			continue;
		    cx_n = &(si->si_cxstack[i]);
		    break;
		}

		stack_min = cx->blk_oldsp;

		if (cx_n) {
		    stack_max = cx_n->blk_oldsp;
		}
		else if (si == PL_curstackinfo) {
		    stack_max = PL_stack_sp - AvARRAY(si->si_stack);
		}
		else {
		    stack_max = AvFILLp(si->si_stack);
		}

		/* for the other stack types, there's only one stack
		 * shared between all SIs */

		si_n = si;
		i = ix;
		cx_n = Null(PERL_CONTEXT*);
		for (;;) {
		    i++;
		    if (i > si_n->si_cxix) {
			if (si_n == PL_curstackinfo)
			    break;
			else {
			    si_n = si_n->si_next;
			    i = 0;
			}
		    }
		    if (CxTYPE(&(si_n->si_cxstack[i])) == CXt_SUBST)
			continue;
		    cx_n = &(si_n->si_cxstack[i]);
		    break;
		}

		mark_min  = cx->blk_oldmarksp;
		ret_min   = cx->blk_oldretsp;
		if (cx_n) {
		    mark_max  = cx_n->blk_oldmarksp;
		    ret_max   = cx_n->blk_oldretsp;
		}
		else {
		    mark_max = PL_markstack_ptr - PL_markstack;
		    ret_max  = PL_retstack_ix;
		}

		deb_stack_n(AvARRAY(si->si_stack),
			stack_min, stack_max, mark_min, mark_max);

		if (ret_max > ret_min) {
		    PerlIO_printf(Perl_debug_log, "  retop=%s\n",
			    PL_retstack[ret_min]
				? OP_NAME(PL_retstack[ret_min])
				: "(null)"
		    );
		}

	    }
	} /* next context */


	if (si == PL_curstackinfo)
	    break;
	si = si->si_next;
	si_ix++;
	if (!si)
	    break; /* shouldn't happen, but just in case.. */
    } /* next stackinfo */

    PerlIO_printf(Perl_debug_log, "\n");
#endif /* DEBUGGING */
}
