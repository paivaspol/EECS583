int
Perl_PerlIO_flush(pTHX_ PerlIO *f)
{
    if (f) {
	if (*f) {
	    PerlIO_funcs *tab = PerlIOBase(f)->tab;

	    if (tab && tab->Flush)
		return (*tab->Flush) (aTHX_ f);
	    else
		 return 0; /* If no Flush defined, silently succeed. */
	}
	else {
	    PerlIO_debug("Cannot flush f=%p\n", (void*)f);
	    SETERRNO(EBADF, SS_IVCHAN);
	    return -1;
	}
    }
    else {
	/*
	 * Is it good API design to do flush-all on NULL, a potentially
	 * errorneous input? Maybe some magical value (PerlIO*
	 * PERLIO_FLUSH_ALL = (PerlIO*)-1;)? Yes, stdio does similar
	 * things on fflush(NULL), but should we be bound by their design
	 * decisions? --jhi
	 */
	PerlIO **table = &PL_perlio;
	int code = 0;
	while ((f = *table)) {
	    int i;
	    table = (PerlIO **) (f++);
	    for (i = 1; i < PERLIO_TABLE_SIZE; i++) {
		if (*f && PerlIO_flush(f) != 0)
		    code = -1;
		f++;
	    }
	}
	return code;
    }
}
