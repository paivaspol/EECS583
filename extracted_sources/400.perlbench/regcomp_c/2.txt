void
Perl_regdump(pTHX_ regexp *r)
{
#ifdef DEBUGGING
    SV *sv = sv_newmortal();

    (void)dumpuntil(r->program, r->program + 1, NULL, sv, 0);

    /* Header fields of interest. */
    if (r->anchored_substr)
	PerlIO_printf(Perl_debug_log,
		      "anchored `%s%.*s%s'%s at %"IVdf" ",
		      PL_colors[0],
		      (int)(SvCUR(r->anchored_substr) - (SvTAIL(r->anchored_substr)!=0)),
		      SvPVX(r->anchored_substr),
		      PL_colors[1],
		      SvTAIL(r->anchored_substr) ? "$" : "",
		      (IV)r->anchored_offset);
    else if (r->anchored_utf8)
	PerlIO_printf(Perl_debug_log,
		      "anchored utf8 `%s%.*s%s'%s at %"IVdf" ",
		      PL_colors[0],
		      (int)(SvCUR(r->anchored_utf8) - (SvTAIL(r->anchored_utf8)!=0)),
		      SvPVX(r->anchored_utf8),
		      PL_colors[1],
		      SvTAIL(r->anchored_utf8) ? "$" : "",
		      (IV)r->anchored_offset);
    if (r->float_substr)
	PerlIO_printf(Perl_debug_log,
		      "floating `%s%.*s%s'%s at %"IVdf"..%"UVuf" ",
		      PL_colors[0],
		      (int)(SvCUR(r->float_substr) - (SvTAIL(r->float_substr)!=0)),
		      SvPVX(r->float_substr),
		      PL_colors[1],
		      SvTAIL(r->float_substr) ? "$" : "",
		      (IV)r->float_min_offset, (UV)r->float_max_offset);
    else if (r->float_utf8)
	PerlIO_printf(Perl_debug_log,
		      "floating utf8 `%s%.*s%s'%s at %"IVdf"..%"UVuf" ",
		      PL_colors[0],
		      (int)(SvCUR(r->float_utf8) - (SvTAIL(r->float_utf8)!=0)),
		      SvPVX(r->float_utf8),
		      PL_colors[1],
		      SvTAIL(r->float_utf8) ? "$" : "",
		      (IV)r->float_min_offset, (UV)r->float_max_offset);
    if (r->check_substr || r->check_utf8)
	PerlIO_printf(Perl_debug_log,
		      r->check_substr == r->float_substr
		      && r->check_utf8 == r->float_utf8
		      ? "(checking floating" : "(checking anchored");
    if (r->reganch & ROPT_NOSCAN)
	PerlIO_printf(Perl_debug_log, " noscan");
    if (r->reganch & ROPT_CHECK_ALL)
	PerlIO_printf(Perl_debug_log, " isall");
    if (r->check_substr || r->check_utf8)
	PerlIO_printf(Perl_debug_log, ") ");

    if (r->regstclass) {
	regprop(sv, r->regstclass);
	PerlIO_printf(Perl_debug_log, "stclass `%s' ", SvPVX(sv));
    }
    if (r->reganch & ROPT_ANCH) {
	PerlIO_printf(Perl_debug_log, "anchored");
	if (r->reganch & ROPT_ANCH_BOL)
	    PerlIO_printf(Perl_debug_log, "(BOL)");
	if (r->reganch & ROPT_ANCH_MBOL)
	    PerlIO_printf(Perl_debug_log, "(MBOL)");
	if (r->reganch & ROPT_ANCH_SBOL)
	    PerlIO_printf(Perl_debug_log, "(SBOL)");
	if (r->reganch & ROPT_ANCH_GPOS)
	    PerlIO_printf(Perl_debug_log, "(GPOS)");
	PerlIO_putc(Perl_debug_log, ' ');
    }
    if (r->reganch & ROPT_GPOS_SEEN)
	PerlIO_printf(Perl_debug_log, "GPOS ");
    if (r->reganch & ROPT_SKIP)
	PerlIO_printf(Perl_debug_log, "plus ");
    if (r->reganch & ROPT_IMPLICIT)
	PerlIO_printf(Perl_debug_log, "implicit ");
    PerlIO_printf(Perl_debug_log, "minlen %ld ", (long) r->minlen);
    if (r->reganch & ROPT_EVAL_SEEN)
	PerlIO_printf(Perl_debug_log, "with eval ");
    PerlIO_printf(Perl_debug_log, "\n");
    if (r->offsets) {
      U32 i;
      U32 len = r->offsets[0];
      PerlIO_printf(Perl_debug_log, "Offsets: [%"UVuf"]\n\t", (UV)r->offsets[0]);
      for (i = 1; i <= len; i++)
        PerlIO_printf(Perl_debug_log, "%"UVuf"[%"UVuf"] ", 
                      (UV)r->offsets[i*2-1], 
                      (UV)r->offsets[i*2]);
      PerlIO_printf(Perl_debug_log, "\n");
    }
#endif	/* DEBUGGING */
}
