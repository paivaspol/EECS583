STATIC I32
S_regpposixcc(pTHX_ RExC_state_t *pRExC_state, I32 value)
{
    char *posixcc = 0;
    I32 namedclass = OOB_NAMEDCLASS;

    if (value == '[' && RExC_parse + 1 < RExC_end &&
	/* I smell either [: or [= or [. -- POSIX has been here, right? */
	POSIXCC(UCHARAT(RExC_parse))) {
	char  c = UCHARAT(RExC_parse);
	char* s = RExC_parse++;
	
	while (RExC_parse < RExC_end && UCHARAT(RExC_parse) != c)
	    RExC_parse++;
	if (RExC_parse == RExC_end)
	    /* Grandfather lone [:, [=, [. */
	    RExC_parse = s;
	else {
	    char* t = RExC_parse++; /* skip over the c */

	    assert(*t == c);

  	    if (UCHARAT(RExC_parse) == ']') {
  		RExC_parse++; /* skip over the ending ] */
  		posixcc = s + 1;
		if (*s == ':') {
		    I32 complement = *posixcc == '^' ? *posixcc++ : 0;
		    I32 skip = t - posixcc;

		    /* Initially switch on the length of the name.  */
		    switch (skip) {
		    case 4:
			if (memEQ(posixcc, "word", 4)) {
			    /* this is not POSIX, this is the Perl \w */;
			    namedclass
				= complement ? ANYOF_NALNUM : ANYOF_ALNUM;
			}
			break;
		    case 5:
			/* Names all of length 5.  */
			/* alnum alpha ascii blank cntrl digit graph lower
			   print punct space upper  */
			/* Offset 4 gives the best switch position.  */
			switch (posixcc[4]) {
			case 'a':
			    if (memEQ(posixcc, "alph", 4)) {
				/*                  a     */
				namedclass
				    = complement ? ANYOF_NALPHA : ANYOF_ALPHA;
			    }
			    break;
			case 'e':
			    if (memEQ(posixcc, "spac", 4)) {
				/*                  e     */
				namedclass
				    = complement ? ANYOF_NPSXSPC : ANYOF_PSXSPC;
			    }
			    break;
			case 'h':
			    if (memEQ(posixcc, "grap", 4)) {
				/*                  h     */
				namedclass
				    = complement ? ANYOF_NGRAPH : ANYOF_GRAPH;
			    }
			    break;
			case 'i':
			    if (memEQ(posixcc, "asci", 4)) {
				/*                  i     */
				namedclass
				    = complement ? ANYOF_NASCII : ANYOF_ASCII;
			    }
			    break;
			case 'k':
			    if (memEQ(posixcc, "blan", 4)) {
				/*                  k     */
				namedclass
				    = complement ? ANYOF_NBLANK : ANYOF_BLANK;
			    }
			    break;
			case 'l':
			    if (memEQ(posixcc, "cntr", 4)) {
				/*                  l     */
				namedclass
				    = complement ? ANYOF_NCNTRL : ANYOF_CNTRL;
			    }
			    break;
			case 'm':
			    if (memEQ(posixcc, "alnu", 4)) {
				/*                  m     */
				namedclass
				    = complement ? ANYOF_NALNUMC : ANYOF_ALNUMC;
			    }
			    break;
			case 'r':
			    if (memEQ(posixcc, "lowe", 4)) {
				/*                  r     */
				namedclass
				    = complement ? ANYOF_NLOWER : ANYOF_LOWER;
			    }
			    if (memEQ(posixcc, "uppe", 4)) {
				/*                  r     */
				namedclass
				    = complement ? ANYOF_NUPPER : ANYOF_UPPER;
			    }
			    break;
			case 't':
			    if (memEQ(posixcc, "digi", 4)) {
				/*                  t     */
				namedclass
				    = complement ? ANYOF_NDIGIT : ANYOF_DIGIT;
			    }
			    if (memEQ(posixcc, "prin", 4)) {
				/*                  t     */
				namedclass
				    = complement ? ANYOF_NPRINT : ANYOF_PRINT;
			    }
			    if (memEQ(posixcc, "punc", 4)) {
				/*                  t     */
				namedclass
				    = complement ? ANYOF_NPUNCT : ANYOF_PUNCT;
			    }
			    break;
			}
			break;
		    case 6:
			if (memEQ(posixcc, "xdigit", 6)) {
			    namedclass
				= complement ? ANYOF_NXDIGIT : ANYOF_XDIGIT;
			}
			break;
		    }

		    if (namedclass == OOB_NAMEDCLASS)
		    {
			Simple_vFAIL3("POSIX class [:%.*s:] unknown",
				      t - s - 1, s + 1);
		    }
		    assert (posixcc[skip] == ':');
		    assert (posixcc[skip+1] == ']');
		} else if (!SIZE_ONLY) {
		    /* [[=foo=]] and [[.foo.]] are still future. */

		    /* adjust RExC_parse so the warning shows after
		       the class closes */
		    while (UCHARAT(RExC_parse) && UCHARAT(RExC_parse) != ']')
			RExC_parse++;
		    Simple_vFAIL3("POSIX syntax [%c %c] is reserved for future extensions", c, c);
		}
	    } else {
		/* Maternal grandfather:
		 * "[:" ending in ":" but not in ":]" */
		RExC_parse = s;
	    }
	}
    }

    return namedclass;
}
