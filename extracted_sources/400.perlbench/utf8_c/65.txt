I32
Perl_ibcmp_utf8(pTHX_ const char *s1, char **pe1, register UV l1, bool u1, const char *s2, char **pe2, register UV l2, bool u2)
{
     register U8 *p1  = (U8*)s1;
     register U8 *p2  = (U8*)s2;
     register U8 *e1 = 0, *f1 = 0, *q1 = 0;
     register U8 *e2 = 0, *f2 = 0, *q2 = 0;
     STRLEN n1 = 0, n2 = 0;
     U8 foldbuf1[UTF8_MAXBYTES_CASE+1];
     U8 foldbuf2[UTF8_MAXBYTES_CASE+1];
     U8 natbuf[1+1];
     STRLEN foldlen1, foldlen2;
     bool match;
     
     if (pe1)
	  e1 = *(U8**)pe1;
     if (e1 == 0 || (l1 && l1 < (UV)(e1 - (U8*)s1)))
	  f1 = (U8*)s1 + l1;
     if (pe2)
	  e2 = *(U8**)pe2;
     if (e2 == 0 || (l2 && l2 < (UV)(e2 - (U8*)s2)))
	  f2 = (U8*)s2 + l2;

     if ((e1 == 0 && f1 == 0) || (e2 == 0 && f2 == 0) || (f1 == 0 && f2 == 0))
	  return 1; /* mismatch; possible infinite loop or false positive */

     if (!u1 || !u2)
	  natbuf[1] = 0; /* Need to terminate the buffer. */

     while ((e1 == 0 || p1 < e1) &&
	    (f1 == 0 || p1 < f1) &&
	    (e2 == 0 || p2 < e2) &&
	    (f2 == 0 || p2 < f2)) {
	  if (n1 == 0) {
	       if (u1)
		    to_utf8_fold(p1, foldbuf1, &foldlen1);
	       else {
		    natbuf[0] = *p1;
		    to_utf8_fold(natbuf, foldbuf1, &foldlen1);
	       }
	       q1 = foldbuf1;
	       n1 = foldlen1;
	  }
	  if (n2 == 0) {
	       if (u2)
		    to_utf8_fold(p2, foldbuf2, &foldlen2);
	       else {
		    natbuf[0] = *p2;
		    to_utf8_fold(natbuf, foldbuf2, &foldlen2);
	       }
	       q2 = foldbuf2;
	       n2 = foldlen2;
	  }
	  while (n1 && n2) {
	       if ( UTF8SKIP(q1) != UTF8SKIP(q2) ||
		   (UTF8SKIP(q1) == 1 && *q1 != *q2) ||
		    memNE((char*)q1, (char*)q2, UTF8SKIP(q1)) )
		   return 1; /* mismatch */
	       n1 -= UTF8SKIP(q1);
	       q1 += UTF8SKIP(q1);
	       n2 -= UTF8SKIP(q2);
	       q2 += UTF8SKIP(q2);
	  }
	  if (n1 == 0)
	       p1 += u1 ? UTF8SKIP(p1) : 1;
	  if (n2 == 0)
	       p2 += u2 ? UTF8SKIP(p2) : 1;

     }

     /* A match is defined by all the scans that specified
      * an explicit length reaching their final goals. */
     match = (f1 == 0 || p1 == f1) && (f2 == 0 || p2 == f2);

     if (match) {
	  if (pe1)
	       *pe1 = (char*)p1;
	  if (pe2)
	       *pe2 = (char*)p2;
     }

     return match ? 0 : 1; /* 0 match, 1 mismatch */
}
