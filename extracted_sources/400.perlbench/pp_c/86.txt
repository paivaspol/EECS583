PP(pp_index)
{
    dSP; dTARGET;
    SV *big;
    SV *little;
    SV *temp = Nullsv;
    I32 offset;
    I32 retval;
    char *tmps;
    char *tmps2;
    STRLEN biglen;
    I32 arybase = PL_curcop->cop_arybase;
    int big_utf8;
    int little_utf8;

    if (MAXARG < 3)
	offset = 0;
    else
	offset = POPi - arybase;
    little = POPs;
    big = POPs;
    big_utf8 = DO_UTF8(big);
    little_utf8 = DO_UTF8(little);
    if (big_utf8 ^ little_utf8) {
	/* One needs to be upgraded.  */
	SV *bytes = little_utf8 ? big : little;
	STRLEN len;
	char *p = SvPV(bytes, len);

	temp = newSVpvn(p, len);

	if (PL_encoding) {
	    sv_recode_to_utf8(temp, PL_encoding);
	} else {
	    sv_utf8_upgrade(temp);
	}
	if (little_utf8) {
	    big = temp;
	    big_utf8 = TRUE;
	} else {
	    little = temp;
	}
    }
    if (big_utf8 && offset > 0)
	sv_pos_u2b(big, &offset, 0);
    tmps = SvPV(big, biglen);
    if (offset < 0)
	offset = 0;
    else if (offset > (I32)biglen)
	offset = biglen;
    if (!(tmps2 = fbm_instr((unsigned char*)tmps + offset,
      (unsigned char*)tmps + biglen, little, 0)))
	retval = -1;
    else
	retval = tmps2 - tmps;
    if (retval > 0 && big_utf8)
	sv_pos_b2u(big, &retval);
    if (temp)
	SvREFCNT_dec(temp);
    PUSHi(retval + arybase);
    RETURN;
}
