int
local_mbtowc (pwc, s, n)
     wchar_t *pwc;
     const char *s;
     size_t n;
{
  static JIS_STATE save_state = ASCII;
  JIS_STATE curr_state = save_state;
  const unsigned char *t = (const unsigned char *) s;

  if (s != NULL && n == 0)
    return -1;

  if (literal_codeset == NULL || strlen (literal_codeset) <= 1)
    /* This must be the "C" locale or unknown locale -- fall thru */
    ;
  else if (! strcmp (literal_codeset, "C-SJIS"))
    {
      int char1;
      if (s == NULL)
	/* Not state-dependent.  */
        return 0;

      char1 = *t;
      if (ISSJIS1 (char1))
        {
          int char2 = t[1];

          if (n <= 1)
            return -1;

          if (ISSJIS2 (char2))
            {
	      if (pwc != NULL)
		*pwc = (((wchar_t) *t) << 8) + (wchar_t) (*(t + 1));
              return 2;
            }

	  return -1;
        }

      if (pwc != NULL)
	*pwc = (wchar_t) *t;

      if (*t == '\0')
	return 0;

      return 1;
    }
  else if (! strcmp (literal_codeset, "C-EUCJP"))
    {
      int char1;

      if (s == NULL)
	/* Not state-dependent.  */
        return 0;

      char1 = *t;
      if (ISEUCJP (char1))
        {
          int char2 = t[1];     

          if (n <= 1)
            return -1;

          if (ISEUCJP (char2))
            {
	      if (pwc != NULL)
		*pwc = (((wchar_t) *t) << 8) + (wchar_t) (*(t + 1));
              return 2;
            }

	  return -1;
        }

      if (pwc != NULL)
	*pwc = (wchar_t) *t;

      if (*t == '\0')
	return 0;

      return 1;
    }
  else if (! strcmp (literal_codeset, "C-JIS"))
    {
      JIS_ACTION action;
      JIS_CHAR_TYPE ch;
      const unsigned char *ptr;
      size_t i, curr_ch;
 
      if (s == NULL)
	{
	  save_state = ASCII;
	  /* State-dependent.  */
	  return 1;
	}

      ptr = t;

      for (i = 0; i < n; i++)
        {
          curr_ch = t[i];
          switch (curr_ch)
            {
	    case JIS_ESC_CHAR:
              ch = ESCAPE;
              break;
	    case '$':
              ch = DOLLAR;
              break;
            case '@':
              ch = AT;
              break;
            case '(':
	      ch = BRACKET;
              break;
            case 'B':
              ch = B;
              break;
            case 'J':
              ch = J;
              break;
            case '\0':
              ch = NUL;
              break;
            default:
              if (ISJIS (curr_ch))
                ch = JIS_CHAR;
              else
                ch = OTHER;
	    }

          action = JIS_action_table[curr_state][ch];
          curr_state = JIS_state_table[curr_state][ch];
        
          switch (action)
            {
            case NOOP:
              break;

            case EMPTY:
	      if (pwc != NULL)
		*pwc = (wchar_t) 0;

	      save_state = curr_state;
              return i;

            case COPYA:
	      if (pwc != NULL)
		*pwc = (wchar_t) *ptr;
	      save_state = curr_state;
              return i + 1;

            case COPYJ:
	      if (pwc != NULL)
		*pwc = (((wchar_t) *ptr) << 8) + (wchar_t) (*(ptr + 1));

	      save_state = curr_state;
              return i + 1;

            case COPYJ2:
	      if (pwc != NULL)
		*pwc = (((wchar_t) *ptr) << 8) + (wchar_t) (*(ptr + 1));

	      save_state = curr_state;
              return ptr - t + 2;

            case MAKE_A:
            case MAKE_J:
              ptr = (const unsigned char *) (t + i + 1);
              break;

            case ERROR:
            default:
              return -1;
            }
        }

      /* More than n bytes needed.  */
      return -1;  
    }
               
#ifdef CROSS_COMPILE
  if (s == NULL)
    /* Not state-dependent.  */
    return 0;

  if (pwc != NULL)
    *pwc = *s;
  return 1;
#else

  /* This must be the "C" locale or unknown locale.  */
  return mbtowc (pwc, s, n);
#endif
}
