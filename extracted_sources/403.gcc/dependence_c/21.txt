static void
dump_one_node (du, seen)
     def_use *du;
     varray_type *seen;
{
  def_use *du_ptr;
  dependence *dep_ptr;
  tree array_ref;

  for (du_ptr = du; du_ptr; du_ptr = du_ptr->next)
    {
      printf ("%s ", du_ptr->variable);
      for (array_ref = du_ptr->expression;
	   TREE_CODE (array_ref) == ARRAY_REF;
	   array_ref = TREE_OPERAND (array_ref, 0))
	{	
	  printf ("[");
	  dump_array_ref (TREE_OPERAND (array_ref, 1));
	  printf ("]");
	}

      printf (" Outer Loop %x Containing Loop %x Expression %x %s\n",
	      (int)du_ptr->outer_loop,
	      (int)du_ptr->containing_loop,
	      (int)du_ptr->expression, du_ptr->type == def ? "Def" : "Use");
      VARRAY_PUSH_GENERIC_PTR (*seen, du_ptr);

      for (dep_ptr = du_ptr->dep; dep_ptr; dep_ptr = dep_ptr->next)
	{
	  int i;
	  printf ("%s Dependence with %x ",
		  dependence_string[(int)dep_ptr->dependence],
		  (int)dep_ptr->source);
	  printf ("Dir/Dist ");
	  for (i = 1 ; i < MAX_SUBSCRIPTS ; i++)
	    if (dep_ptr->direction[i] != undef)
	      printf ("[%d] %s/%d ", i,
		      direction_string[(int)dep_ptr->direction[i]],
		      dep_ptr->distance[i]);
	  printf ("\n");
	}
    }
}
