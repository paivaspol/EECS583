static const cpp_token *
glue_header_name (pfile)
     cpp_reader *pfile;
{
  cpp_token *header = NULL;
  const cpp_token *token;
  unsigned char *buffer;
  size_t len, total_len = 0, capacity = 1024;

  /* To avoid lexed tokens overwriting our glued name, we can only
     allocate from the string pool once we've lexed everything.  */
  buffer = (unsigned char *) xmalloc (capacity);
  for (;;)
    {
      token = cpp_get_token (pfile);

      if (token->type == CPP_GREATER || token->type == CPP_EOF)
	break;

      len = cpp_token_len (token);
      if (total_len + len > capacity)
	{
	  capacity = (capacity + len) * 2;
	  buffer = (unsigned char *) xrealloc (buffer, capacity);
	}

      if (token->flags & PREV_WHITE)
	buffer[total_len++] = ' ';

      total_len = cpp_spell_token (pfile, token, &buffer[total_len]) - buffer;
    }

  if (token->type == CPP_EOF)
    cpp_error (pfile, "missing terminating > character");
  else
    {
      unsigned char *token_mem = _cpp_unaligned_alloc (pfile, total_len + 1);
      memcpy (token_mem, buffer, total_len);
      token_mem[total_len] = '\0';

      header = _cpp_temp_token (pfile);
      header->type = CPP_HEADER_NAME;
      header->flags = 0;
      header->val.str.len = total_len;
      header->val.str.text = token_mem;
    }

  free ((PTR) buffer);
  return header;
}
