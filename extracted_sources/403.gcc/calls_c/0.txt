static void emit_call_1		PARAMS ((rtx, tree, tree, HOST_WIDE_INT,
					 HOST_WIDE_INT, HOST_WIDE_INT, rtx,
					 rtx, int, rtx, int,
					 CUMULATIVE_ARGS *));
static void precompute_register_parameters	PARAMS ((int,
							 struct arg_data *,
							 int *));
static int store_one_arg	PARAMS ((struct arg_data *, rtx, int, int,
					 int));
static void store_unaligned_arguments_into_pseudos PARAMS ((struct arg_data *,
							    int));
static int finalize_must_preallocate		PARAMS ((int, int,
							 struct arg_data *,
							 struct args_size *));
static void precompute_arguments 		PARAMS ((int, int,
							 struct arg_data *));
static int compute_argument_block_size		PARAMS ((int,
							 struct args_size *,
							 int));
static void initialize_argument_information	PARAMS ((int,
							 struct arg_data *,
							 struct args_size *,
							 int, tree, tree,
							 CUMULATIVE_ARGS *,
							 int, rtx *, int *,
							 int *, int *));
static void compute_argument_addresses		PARAMS ((struct arg_data *,
							 rtx, int));
static rtx rtx_for_function_call		PARAMS ((tree, tree));
static void load_register_parameters		PARAMS ((struct arg_data *,
							 int, rtx *, int));
static rtx emit_library_call_value_1 		PARAMS ((int, rtx, rtx,
							 enum libcall_type,
							 enum machine_mode,
							 int, va_list));
static int special_function_p			PARAMS ((tree, int));
static int flags_from_decl_or_type 		PARAMS ((tree));
static rtx try_to_integrate			PARAMS ((tree, tree, rtx,
							 int, tree, rtx));
static int check_sibcall_argument_overlap_1	PARAMS ((rtx));
static int check_sibcall_argument_overlap	PARAMS ((rtx, struct arg_data *));

static int combine_pending_stack_adjustment_and_call
                                                PARAMS ((int, struct args_size *, int));

#ifdef REG_PARM_STACK_SPACE
static rtx save_fixed_argument_area	PARAMS ((int, rtx, int *, int *));
static void restore_fixed_argument_area	PARAMS ((rtx, rtx, int, int));
#endif

/* If WHICH is 1, return 1 if EXP contains a call to the built-in function
   `alloca'.

   If WHICH is 0, return 1 if EXP contains a call to any function.
   Actually, we only need return 1 if evaluating EXP would require pushing
   arguments on the stack, but that is too difficult to compute, so we just
   assume any function call might require the stack.  */

static tree calls_function_save_exprs;

static int
calls_function (exp, which)
     tree exp;
     int which;
{
  int val;

  calls_function_save_exprs = 0;
  val = calls_function_1 (exp, which);
  calls_function_save_exprs = 0;
  return val;
}
