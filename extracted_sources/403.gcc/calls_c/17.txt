static rtx
try_to_integrate (fndecl, actparms, target, ignore, type, structure_value_addr)
     tree fndecl;
     tree actparms;
     rtx target;
     int ignore;
     tree type;
     rtx structure_value_addr;
{
  rtx temp;
  rtx before_call;
  int i;
  rtx old_stack_level = 0;
  int reg_parm_stack_space = 0;

#ifdef REG_PARM_STACK_SPACE
#ifdef MAYBE_REG_PARM_STACK_SPACE
  reg_parm_stack_space = MAYBE_REG_PARM_STACK_SPACE;
#else
  reg_parm_stack_space = REG_PARM_STACK_SPACE (fndecl);
#endif
#endif

  before_call = get_last_insn ();

  timevar_push (TV_INTEGRATION);

  temp = expand_inline_function (fndecl, actparms, target,
				 ignore, type,
				 structure_value_addr);

  timevar_pop (TV_INTEGRATION);

  /* If inlining succeeded, return.  */
  if (temp != (rtx) (size_t) - 1)
    {
      if (ACCUMULATE_OUTGOING_ARGS)
	{
	  /* If the outgoing argument list must be preserved, push
	     the stack before executing the inlined function if it
	     makes any calls.  */

	  for (i = reg_parm_stack_space - 1; i >= 0; i--)
	    if (i < highest_outgoing_arg_in_use && stack_usage_map[i] != 0)
	      break;

	  if (stack_arg_under_construction || i >= 0)
	    {
	      rtx first_insn
		= before_call ? NEXT_INSN (before_call) : get_insns ();
	      rtx insn = NULL_RTX, seq;

	      /* Look for a call in the inline function code.
	         If DECL_SAVED_INSNS (fndecl)->outgoing_args_size is
	         nonzero then there is a call and it is not necessary
	         to scan the insns.  */

	      if (DECL_SAVED_INSNS (fndecl)->outgoing_args_size == 0)
		for (insn = first_insn; insn; insn = NEXT_INSN (insn))
		  if (GET_CODE (insn) == CALL_INSN)
		    break;

	      if (insn)
		{
		  /* Reserve enough stack space so that the largest
		     argument list of any function call in the inline
		     function does not overlap the argument list being
		     evaluated.  This is usually an overestimate because
		     allocate_dynamic_stack_space reserves space for an
		     outgoing argument list in addition to the requested
		     space, but there is no way to ask for stack space such
		     that an argument list of a certain length can be
		     safely constructed.

		     Add the stack space reserved for register arguments, if
		     any, in the inline function.  What is really needed is the
		     largest value of reg_parm_stack_space in the inline
		     function, but that is not available.  Using the current
		     value of reg_parm_stack_space is wrong, but gives
		     correct results on all supported machines.  */

		  int adjust = (DECL_SAVED_INSNS (fndecl)->outgoing_args_size
				+ reg_parm_stack_space);

		  start_sequence ();
		  emit_stack_save (SAVE_BLOCK, &old_stack_level, NULL_RTX);
		  allocate_dynamic_stack_space (GEN_INT (adjust),
						NULL_RTX, BITS_PER_UNIT);
		  seq = get_insns ();
		  end_sequence ();
		  emit_insns_before (seq, first_insn);
		  emit_stack_restore (SAVE_BLOCK, old_stack_level, NULL_RTX);
		}
	    }
	}

      /* If the result is equivalent to TARGET, return TARGET to simplify
         checks in store_expr.  They can be equivalent but not equal in the
         case of a function that returns BLKmode.  */
      if (temp != target && rtx_equal_p (temp, target))
	return target;
      return temp;
    }

  /* If inlining failed, mark FNDECL as needing to be compiled
     separately after all.  If function was declared inline,
     give a warning.  */
  if (DECL_INLINE (fndecl) && warn_inline && !flag_no_inline
      && optimize > 0 && !TREE_ADDRESSABLE (fndecl))
    {
      warning_with_decl (fndecl, "inlining failed in call to `%s'");
      warning ("called from here");
    }
  mark_addressable (fndecl);
  return (rtx) (size_t) - 1;
}
