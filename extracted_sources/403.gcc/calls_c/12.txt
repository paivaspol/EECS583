static void
precompute_arguments (flags, num_actuals, args)
     int flags;
     int num_actuals;
     struct arg_data *args;
{
  int i;

  /* If this function call is cse'able, precompute all the parameters.
     Note that if the parameter is constructed into a temporary, this will
     cause an additional copy because the parameter will be constructed
     into a temporary location and then copied into the outgoing arguments.
     If a parameter contains a call to alloca and this function uses the
     stack, precompute the parameter.  */

  /* If we preallocated the stack space, and some arguments must be passed
     on the stack, then we must precompute any parameter which contains a
     function call which will store arguments on the stack.
     Otherwise, evaluating the parameter may clobber previous parameters
     which have already been stored into the stack.  (we have code to avoid
     such case by saving the outgoing stack arguments, but it results in
     worse code)  */

  for (i = 0; i < num_actuals; i++)
    if ((flags & ECF_LIBCALL_BLOCK)
	|| calls_function (args[i].tree_value, !ACCUMULATE_OUTGOING_ARGS))
      {
	enum machine_mode mode;

	/* If this is an addressable type, we cannot pre-evaluate it.  */
	if (TREE_ADDRESSABLE (TREE_TYPE (args[i].tree_value)))
	  abort ();

	args[i].value
	  = expand_expr (args[i].tree_value, NULL_RTX, VOIDmode, 0);

	/* ANSI doesn't require a sequence point here,
	   but PCC has one, so this will avoid some problems.  */
	emit_queue ();

	args[i].initial_value = args[i].value
	  = protect_from_queue (args[i].value, 0);

	mode = TYPE_MODE (TREE_TYPE (args[i].tree_value));
	if (mode != args[i].mode)
	  {
	    args[i].value
	      = convert_modes (args[i].mode, mode,
			       args[i].value, args[i].unsignedp);
#ifdef PROMOTE_FOR_CALL_ONLY
	    /* CSE will replace this only if it contains args[i].value
	       pseudo, so convert it down to the declared mode using
	       a SUBREG.  */
	    if (GET_CODE (args[i].value) == REG
		&& GET_MODE_CLASS (args[i].mode) == MODE_INT)
	      {
		args[i].initial_value
		  = gen_lowpart_SUBREG (mode, args[i].value);
		SUBREG_PROMOTED_VAR_P (args[i].initial_value) = 1;
		SUBREG_PROMOTED_UNSIGNED_P (args[i].initial_value)
		  = args[i].unsignedp;
	      }
#endif
	  }
      }
}
