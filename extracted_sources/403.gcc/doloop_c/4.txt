static int
doloop_modify_runtime (loop, iterations_max,
		       doloop_seq, start_label, mode, condition)
     const struct loop *loop;
     rtx iterations_max;
     rtx doloop_seq;
     rtx start_label;
     enum machine_mode mode;
     rtx condition;
{
  const struct loop_info *loop_info = LOOP_INFO (loop);
  HOST_WIDE_INT abs_inc;
  int neg_inc;
  rtx diff;
  rtx sequence;
  rtx iterations;
  rtx initial_value;
  rtx final_value;
  rtx increment;
  int unsigned_p;
  enum rtx_code comparison_code;

  increment = loop_info->increment;
  initial_value = loop_info->initial_value;
  final_value = loop_info->final_value;

  neg_inc = 0;
  abs_inc = INTVAL (increment);
  if (abs_inc < 0)
    {
      abs_inc = -abs_inc;
      neg_inc = 1;
    }

  comparison_code = loop_info->comparison_code;
  unsigned_p = (comparison_code == LTU
		|| comparison_code == LEU
		|| comparison_code == GTU
		|| comparison_code == GEU
		|| comparison_code == NE);

  /* The number of iterations (prior to any loop unrolling) is given by:

       n = (abs (final - initial) + abs_inc - 1) / abs_inc.

     However, it is possible for the summation to overflow, and a
     safer method is:

       n = abs (final - initial) / abs_inc;
       n += (abs (final - initial) % abs_inc) != 0;

     If the loop has been unrolled, then the loop body has been
     preconditioned to iterate a multiple of unroll_number times.  If
     abs_inc is != 1, the full calculation is

       t1 = abs_inc * unroll_number;
       n = abs (final - initial) / t1;
       n += (abs (final - initial) % t1) > t1 - abs_inc;

     The division and modulo operations can be avoided by requiring
     that the increment is a power of 2 (precondition_loop_p enforces
     this requirement).  Nevertheless, the RTX_COSTS should be checked
     to see if a fast divmod is available.  */

  start_sequence ();
  /* abs (final - initial)  */
  diff = expand_simple_binop (mode, MINUS,
			      copy_rtx (neg_inc ? initial_value : final_value),
			      copy_rtx (neg_inc ? final_value : initial_value),
			      NULL_RTX, unsigned_p, OPTAB_LIB_WIDEN);

  /* Some code transformations can result in code akin to

	  tmp = i + 1;
	  ...
	  goto scan_start;
	top:
	  tmp = tmp + 1;
	scan_start:
	  i = tmp;
	  if (i < n) goto top;

     We'll have already detected this form of loop in scan_loop,
     and set loop->top and loop->scan_start appropriately.

     In this situation, we skip the increment the first time through
     the loop, which results in an incorrect estimate of the number
     of iterations.  Adjust the difference to compensate.  */
  /* ??? Logically, it would seem this belongs in loop_iterations.
     However, this causes regressions e.g. on x86 execute/20011008-3.c,
     so I do not believe we've properly characterized the exact nature
     of the problem.  In the meantime, this fixes execute/20011126-2.c
     on ia64 and some Ada front end miscompilation on ppc.  */

  if (loop->scan_start)
    {
      rtx iteration_var = loop_info->iteration_var;
      struct loop_ivs *ivs = LOOP_IVS (loop);
      struct iv_class *bl;

      if (REG_IV_TYPE (ivs, REGNO (iteration_var)) == BASIC_INDUCT)
	bl = REG_IV_CLASS (ivs, REGNO (iteration_var));
      else if (REG_IV_TYPE (ivs, REGNO (iteration_var)) == GENERAL_INDUCT)
	{
	  struct induction *v = REG_IV_INFO (ivs, REGNO (iteration_var));
	  bl = REG_IV_CLASS (ivs, REGNO (v->src_reg));
	}
      else
	/* Iteration var must be an induction variable to get here.  */
	abort ();

      if (INSN_UID (bl->biv->insn) < max_uid_for_loop
	  && INSN_LUID (bl->biv->insn) < INSN_LUID (loop->scan_start))
	{
	  if (loop_dump_stream)
	    fprintf (loop_dump_stream,
	         "Doloop: Basic induction var skips initial incr.\n");

	  diff = expand_simple_binop (mode, PLUS, diff, increment, diff,
				      unsigned_p, OPTAB_LIB_WIDEN);
	}
    }

  if (abs_inc * loop_info->unroll_number != 1)
    {
      int shift_count;
      rtx extra;
      rtx label;
      unsigned HOST_WIDE_INT limit;

      shift_count = exact_log2 (abs_inc * loop_info->unroll_number);
      if (shift_count < 0)
	abort ();

      /* abs (final - initial) / (abs_inc * unroll_number)  */
      iterations = expand_simple_binop (GET_MODE (diff), LSHIFTRT,
					diff, GEN_INT (shift_count),
					NULL_RTX, 1,
					OPTAB_LIB_WIDEN);

      if (abs_inc != 1)
	{
	  /* abs (final - initial) % (abs_inc * unroll_number)  */
	  rtx count = GEN_INT (abs_inc * loop_info->unroll_number - 1);
	  extra = expand_simple_binop (GET_MODE (iterations), AND,
				       diff, count, NULL_RTX, 1,
				       OPTAB_LIB_WIDEN);

	  /* If (abs (final - initial) % (abs_inc * unroll_number)
	       <= abs_inc * (unroll - 1)),
	     jump past following increment instruction.  */
	  label = gen_label_rtx ();
	  limit = abs_inc * (loop_info->unroll_number - 1);
	  emit_cmp_and_jump_insns (extra, GEN_INT (limit),
				   limit == 0 ? EQ : LEU, NULL_RTX,
				   GET_MODE (extra), 0, label);
	  JUMP_LABEL (get_last_insn ()) = label;
	  LABEL_NUSES (label)++;

	  /* Increment the iteration count by one.  */
	  iterations = expand_simple_binop (GET_MODE (iterations), PLUS,
					    iterations, GEN_INT (1),
					    iterations, 1,
					    OPTAB_LIB_WIDEN);

	  emit_label (label);
	}
    }
  else
    iterations = diff;

  /* If there is a NOTE_INSN_LOOP_VTOP, we have a `for' or `while'
     style loop, with a loop exit test at the start.  Thus, we can
     assume that the loop condition was true when the loop was
     entered.

     `do-while' loops require special treatment since the exit test is
     not executed before the start of the loop.  We need to determine
     if the loop will terminate after the first pass and to limit the
     iteration count to one if necessary.  */
  if (! loop->vtop)
    {
      rtx label;

      if (loop_dump_stream)
	fprintf (loop_dump_stream, "Doloop: Do-while loop.\n");

      /* A `do-while' loop must iterate at least once.  If the
	 iteration count is bogus, we set the iteration count to 1.
	 Note that if the loop has been unrolled, then the loop body
	 is guaranteed to execute at least once.  */
      if (loop_info->unroll_number == 1)
	{
	  /*  Emit insns to test if the loop will immediately
	      terminate and to set the iteration count to 1 if true.  */
	  label = gen_label_rtx();
	  emit_cmp_and_jump_insns (copy_rtx (initial_value),
				   copy_rtx (loop_info->comparison_value),
				   comparison_code, NULL_RTX, mode, 0,
				   label);
	  JUMP_LABEL (get_last_insn ()) = label;
	  LABEL_NUSES (label)++;
	  emit_move_insn (iterations, const1_rtx);
	  emit_label (label);
	}
    }

  sequence = gen_sequence ();
  end_sequence ();
  emit_insn_before (sequence, loop->start);

  return doloop_modify (loop, iterations, iterations_max, doloop_seq,
			start_label, condition);
}
