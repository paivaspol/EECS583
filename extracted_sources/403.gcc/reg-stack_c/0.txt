static rtx
  FP_mode_reg[LAST_STACK_REG+1-FIRST_STACK_REG][(int) MAX_MACHINE_MODE];

#define FP_MODE_REG(regno,mode)	\
  (FP_mode_reg[(regno)-FIRST_STACK_REG][(int) (mode)])

/* Used to initialize uninitialized registers.  */
static rtx nan;

/* Forward declarations */

static int stack_regs_mentioned_p	PARAMS ((rtx pat));
static void straighten_stack		PARAMS ((rtx, stack));
static void pop_stack			PARAMS ((stack, int));
static rtx *get_true_reg		PARAMS ((rtx *));

static int check_asm_stack_operands	PARAMS ((rtx));
static int get_asm_operand_n_inputs	PARAMS ((rtx));
static rtx stack_result			PARAMS ((tree));
static void replace_reg			PARAMS ((rtx *, int));
static void remove_regno_note		PARAMS ((rtx, enum reg_note,
						 unsigned int));
static int get_hard_regnum		PARAMS ((stack, rtx));
static rtx emit_pop_insn		PARAMS ((rtx, stack, rtx,
					       enum emit_where));
static void emit_swap_insn		PARAMS ((rtx, stack, rtx));
static void move_for_stack_reg		PARAMS ((rtx, stack, rtx));
static int swap_rtx_condition_1		PARAMS ((rtx));
static int swap_rtx_condition		PARAMS ((rtx));
static void compare_for_stack_reg	PARAMS ((rtx, stack, rtx));
static void subst_stack_regs_pat	PARAMS ((rtx, stack, rtx));
static void subst_asm_stack_regs	PARAMS ((rtx, stack));
static void subst_stack_regs		PARAMS ((rtx, stack));
static void change_stack		PARAMS ((rtx, stack, stack,
					       enum emit_where));
static int convert_regs_entry		PARAMS ((void));
static void convert_regs_exit		PARAMS ((void));
static int convert_regs_1		PARAMS ((FILE *, basic_block));
static int convert_regs_2		PARAMS ((FILE *, basic_block));
static int convert_regs			PARAMS ((FILE *));
static void print_stack 		PARAMS ((FILE *, stack));
static rtx next_flags_user 		PARAMS ((rtx));
static void record_label_references	PARAMS ((rtx, rtx));
static bool compensate_edge		PARAMS ((edge, FILE *));

/* Return non-zero if any stack register is mentioned somewhere within PAT.  */

static int
stack_regs_mentioned_p (pat)
     rtx pat;
{
  const char *fmt;
  int i;

  if (STACK_REG_P (pat))
    return 1;

  fmt = GET_RTX_FORMAT (GET_CODE (pat));
  for (i = GET_RTX_LENGTH (GET_CODE (pat)) - 1; i >= 0; i--)
    {
      if (fmt[i] == 'E')
	{
	  int j;

	  for (j = XVECLEN (pat, i) - 1; j >= 0; j--)
	    if (stack_regs_mentioned_p (XVECEXP (pat, i, j)))
	      return 1;
	}
      else if (fmt[i] == 'e' && stack_regs_mentioned_p (XEXP (pat, i)))
	return 1;
    }

  return 0;
}
