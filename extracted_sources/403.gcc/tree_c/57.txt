int
int_fits_type_p (c, type)
     tree c, type;
{
  /* If the bounds of the type are integers, we can check ourselves.
     If not, but this type is a subtype, try checking against that.
     Otherwise, use force_fit_type, which checks against the precision.  */
  if (TYPE_MAX_VALUE (type) != NULL_TREE
      && TYPE_MIN_VALUE (type) != NULL_TREE
      && TREE_CODE (TYPE_MAX_VALUE (type)) == INTEGER_CST
      && TREE_CODE (TYPE_MIN_VALUE (type)) == INTEGER_CST)
    {
      if (TREE_UNSIGNED (type))
	return (! INT_CST_LT_UNSIGNED (TYPE_MAX_VALUE (type), c)
		&& ! INT_CST_LT_UNSIGNED (c, TYPE_MIN_VALUE (type))
		/* Negative ints never fit unsigned types.  */
		&& ! (TREE_INT_CST_HIGH (c) < 0
		      && ! TREE_UNSIGNED (TREE_TYPE (c))));
      else
	return (! INT_CST_LT (TYPE_MAX_VALUE (type), c)
		&& ! INT_CST_LT (c, TYPE_MIN_VALUE (type))
		/* Unsigned ints with top bit set never fit signed types.  */
		&& ! (TREE_INT_CST_HIGH (c) < 0
		      && TREE_UNSIGNED (TREE_TYPE (c))));
    }
  else if (TREE_CODE (type) == INTEGER_TYPE && TREE_TYPE (type) != 0)
    return int_fits_type_p (c, TREE_TYPE (type));
  else
    {
      c = copy_node (c);
      TREE_TYPE (c) = type;
      return !force_fit_type (c, 0);
    }
}
