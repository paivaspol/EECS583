static void
append_random_chars (template)
     char *template;
{
  static const char letters[]
    = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  static unsigned HOST_WIDE_INT value;
  unsigned HOST_WIDE_INT v;

  if (! value)
    {
      struct stat st;

      /* VALUE should be unique for each file and must not change between
	 compiles since this can cause bootstrap comparison errors.  */

      if (stat (main_input_filename, &st) < 0)
	{
	  /* This can happen when preprocessed text is shipped between
	     machines, e.g. with bug reports.  Assume that uniqueness
	     isn't actually an issue.  */
	  value = 1;
	}
      else
	{
	  /* In VMS, ino is an array, so we have to use both values.  We
	     conditionalize that.  */
#ifdef VMS
#define INO_TO_INT(INO) ((int) (INO)[1] << 16 ^ (int) (INO)[2])
#else
#define INO_TO_INT(INO) INO
#endif
	  value = st.st_dev ^ INO_TO_INT (st.st_ino) ^ st.st_mtime;
	}
    }

  template += strlen (template);

  v = value;

  /* Fill in the random bits.  */
  template[0] = letters[v % 62];
  v /= 62;
  template[1] = letters[v % 62];
  v /= 62;
  template[2] = letters[v % 62];
  v /= 62;
  template[3] = letters[v % 62];
  v /= 62;
  template[4] = letters[v % 62];
  v /= 62;
  template[5] = letters[v % 62];

  template[6] = '\0';
}
