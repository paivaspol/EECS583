int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
/* MJP these 3 calls below to memcpy used to b to __yy_memcpy */
      memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
/* #line 287 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("ISO C forbids an empty source file");
		  finish_file ();
		;
    break;}
case 2:
/* #line 292 "c-parse.y" */
{
		  /* In case there were missing closebraces,
		     get us back to the global binding level.  */
		  while (! global_bindings_p ())
		    poplevel (0, 0, 0);
		  finish_fname_decls ();
                  finish_file ();
		;
    break;}
case 3:
/* #line 307 "c-parse.y" */
{yyval.ttype = NULL_TREE; ;
    break;}
case 5:
/* #line 308 "c-parse.y" */
{yyval.ttype = NULL_TREE; ggc_collect(); ;
    break;}
case 9:
/* #line 315 "c-parse.y" */
{ STRIP_NOPS (yyvsp[-2].ttype);
		  if ((TREE_CODE (yyvsp[-2].ttype) == ADDR_EXPR
		       && TREE_CODE (TREE_OPERAND (yyvsp[-2].ttype, 0)) == STRING_CST)
		      || TREE_CODE (yyvsp[-2].ttype) == STRING_CST)
		    assemble_asm (yyvsp[-2].ttype);
		  else
		    error ("argument of `asm' is not a constant string"); ;
    break;}
case 10:
/* #line 323 "c-parse.y" */
{ RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;
    break;}
case 11:
/* #line 328 "c-parse.y" */
{ if (pedantic)
		    error ("ISO C forbids data definition with no type or storage class");
		  else if (!flag_traditional)
		    warning ("data definition has no type or storage class"); 

		  POP_DECLSPEC_STACK; ;
    break;}
case 12:
/* #line 335 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 13:
/* #line 337 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 14:
/* #line 339 "c-parse.y" */
{ shadow_tag (yyvsp[-1].ttype); ;
    break;}
case 17:
/* #line 343 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("ISO C does not allow extra `;' outside of a function"); ;
    break;}
case 18:
/* #line 349 "c-parse.y" */
{ if (! start_function (current_declspecs, yyvsp[0].ttype,
					all_prefix_attributes))
		    YYERROR1;
		;
    break;}
case 19:
/* #line 354 "c-parse.y" */
{ store_parm_decls (); ;
    break;}
case 20:
/* #line 356 "c-parse.y" */
{ DECL_SOURCE_FILE (current_function_decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (current_function_decl) = yyvsp[-1].lineno;
		  finish_function (0, 1); 
		  POP_DECLSPEC_STACK; ;
    break;}
case 21:
/* #line 361 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 22:
/* #line 363 "c-parse.y" */
{ if (! start_function (current_declspecs, yyvsp[0].ttype,
					all_prefix_attributes))
		    YYERROR1;
		;
    break;}
case 23:
/* #line 368 "c-parse.y" */
{ store_parm_decls (); ;
    break;}
case 24:
/* #line 370 "c-parse.y" */
{ DECL_SOURCE_FILE (current_function_decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (current_function_decl) = yyvsp[-1].lineno;
		  finish_function (0, 1); 
		  POP_DECLSPEC_STACK; ;
    break;}
case 25:
/* #line 375 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 26:
/* #line 377 "c-parse.y" */
{ if (! start_function (NULL_TREE, yyvsp[0].ttype,
					all_prefix_attributes))
		    YYERROR1;
		;
    break;}
case 27:
/* #line 382 "c-parse.y" */
{ store_parm_decls (); ;
    break;}
case 28:
/* #line 384 "c-parse.y" */
{ DECL_SOURCE_FILE (current_function_decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (current_function_decl) = yyvsp[-1].lineno;
		  finish_function (0, 1); 
		  POP_DECLSPEC_STACK; ;
    break;}
case 29:
/* #line 389 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 32:
/* #line 398 "c-parse.y" */
{ yyval.code = ADDR_EXPR; ;
    break;}
case 33:
/* #line 400 "c-parse.y" */
{ yyval.code = NEGATE_EXPR; ;
    break;}
case 34:
/* #line 402 "c-parse.y" */
{ yyval.code = CONVERT_EXPR;
  if (warn_traditional && !in_system_header)
    warning ("traditional C rejects the unary plus operator");
		;
    break;}
case 35:
/* #line 407 "c-parse.y" */
{ yyval.code = PREINCREMENT_EXPR; ;
    break;}
case 36:
/* #line 409 "c-parse.y" */
{ yyval.code = PREDECREMENT_EXPR; ;
    break;}
case 37:
/* #line 411 "c-parse.y" */
{ yyval.code = BIT_NOT_EXPR; ;
    break;}
case 38:
/* #line 413 "c-parse.y" */
{ yyval.code = TRUTH_NOT_EXPR; ;
    break;}
case 39:
/* #line 417 "c-parse.y" */
{ yyval.ttype = build_compound_expr (yyvsp[0].ttype); ;
    break;}
case 40:
/* #line 422 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 42:
/* #line 428 "c-parse.y" */
{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
    break;}
case 43:
/* #line 430 "c-parse.y" */
{ chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
    break;}
case 45:
/* #line 436 "c-parse.y" */
{ yyval.ttype = build_indirect_ref (yyvsp[0].ttype, "unary *"); ;
    break;}
case 46:
/* #line 439 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;
    break;}
case 47:
/* #line 442 "c-parse.y" */
{ yyval.ttype = build_unary_op (yyvsp[-1].code, yyvsp[0].ttype, 0);
		  overflow_warning (yyval.ttype); ;
    break;}
case 48:
/* #line 446 "c-parse.y" */
{ yyval.ttype = finish_label_address_expr (yyvsp[0].ttype); ;
    break;}
case 49:
/* #line 463 "c-parse.y" */
{ skip_evaluation--;
		  if (TREE_CODE (yyvsp[0].ttype) == COMPONENT_REF
		      && DECL_C_BIT_FIELD (TREE_OPERAND (yyvsp[0].ttype, 1)))
		    error ("`sizeof' applied to a bit-field");
		  yyval.ttype = c_sizeof (TREE_TYPE (yyvsp[0].ttype)); ;
    break;}
case 50:
/* #line 469 "c-parse.y" */
{ skip_evaluation--;
		  yyval.ttype = c_sizeof (groktypename (yyvsp[-1].ttype)); ;
    break;}
case 51:
/* #line 472 "c-parse.y" */
{ skip_evaluation--;
		  yyval.ttype = c_alignof_expr (yyvsp[0].ttype); ;
    break;}
case 52:
/* #line 475 "c-parse.y" */
{ skip_evaluation--;
		  yyval.ttype = c_alignof (groktypename (yyvsp[-1].ttype)); ;
    break;}
case 53:
/* #line 478 "c-parse.y" */
{ yyval.ttype = build_unary_op (REALPART_EXPR, yyvsp[0].ttype, 0); ;
    break;}
case 54:
/* #line 480 "c-parse.y" */
{ yyval.ttype = build_unary_op (IMAGPART_EXPR, yyvsp[0].ttype, 0); ;
    break;}
case 55:
/* #line 484 "c-parse.y" */
{ skip_evaluation++; ;
    break;}
case 56:
/* #line 488 "c-parse.y" */
{ skip_evaluation++; ;
    break;}
case 58:
/* #line 494 "c-parse.y" */
{ yyval.ttype = c_cast_expr (yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 60:
/* #line 500 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 61:
/* #line 502 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 62:
/* #line 504 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 63:
/* #line 506 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 64:
/* #line 508 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 65:
/* #line 510 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 66:
/* #line 512 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 67:
/* #line 514 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 68:
/* #line 516 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 69:
/* #line 518 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 70:
/* #line 520 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 71:
/* #line 522 "c-parse.y" */
{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 72:
/* #line 524 "c-parse.y" */
{ yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));
		  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;
    break;}
case 73:
/* #line 527 "c-parse.y" */
{ skip_evaluation -= yyvsp[-3].ttype == boolean_false_node;
		  yyval.ttype = parser_build_binary_op (TRUTH_ANDIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;
    break;}
case 74:
/* #line 530 "c-parse.y" */
{ yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));
		  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;
    break;}
case 75:
/* #line 533 "c-parse.y" */
{ skip_evaluation -= yyvsp[-3].ttype == boolean_true_node;
		  yyval.ttype = parser_build_binary_op (TRUTH_ORIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;
    break;}
case 76:
/* #line 536 "c-parse.y" */
{ yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));
		  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;
    break;}
case 77:
/* #line 539 "c-parse.y" */
{ skip_evaluation += ((yyvsp[-4].ttype == boolean_true_node)
				      - (yyvsp[-4].ttype == boolean_false_node)); ;
    break;}
case 78:
/* #line 542 "c-parse.y" */
{ skip_evaluation -= yyvsp[-6].ttype == boolean_true_node;
		  yyval.ttype = build_conditional_expr (yyvsp[-6].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;
    break;}
case 79:
/* #line 545 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("ISO C forbids omitting the middle term of a ?: expression");
		  /* Make sure first operand is calculated only once.  */
		  yyvsp[0].ttype = save_expr (yyvsp[-1].ttype);
		  yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[0].ttype));
		  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;
    break;}
case 80:
/* #line 552 "c-parse.y" */
{ skip_evaluation -= yyvsp[-4].ttype == boolean_true_node;
		  yyval.ttype = build_conditional_expr (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;
    break;}
case 81:
/* #line 555 "c-parse.y" */
{ char class;
		  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, NOP_EXPR, yyvsp[0].ttype);
		  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));
		  if (IS_EXPR_CODE_CLASS (class))
		    C_SET_EXP_ORIGINAL_CODE (yyval.ttype, MODIFY_EXPR);
		;
    break;}
case 82:
/* #line 562 "c-parse.y" */
{ char class;
		  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, yyvsp[-1].code, yyvsp[0].ttype);
		  /* This inhibits warnings in truthvalue_conversion.  */
		  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));
		  if (IS_EXPR_CODE_CLASS (class))
		    C_SET_EXP_ORIGINAL_CODE (yyval.ttype, ERROR_MARK);
		;
    break;}
case 83:
/* #line 573 "c-parse.y" */
{
		  if (yychar == YYEMPTY)
		    yychar = YYLEX;
		  yyval.ttype = build_external_ref (yyvsp[0].ttype, yychar == '(');
		;
    break;}
case 85:
/* #line 580 "c-parse.y" */
{ yyval.ttype = combine_strings (yyvsp[0].ttype); ;
    break;}
case 86:
/* #line 582 "c-parse.y" */
{ yyval.ttype = fname_decl (C_RID_CODE (yyval.ttype), yyval.ttype); ;
    break;}
case 87:
/* #line 584 "c-parse.y" */
{ start_init (NULL_TREE, NULL, 0);
		  yyvsp[-2].ttype = groktypename (yyvsp[-2].ttype);
		  really_start_incremental_init (yyvsp[-2].ttype); ;
    break;}
case 88:
/* #line 588 "c-parse.y" */
{ tree constructor = pop_init_level (0);
		  tree type = yyvsp[-5].ttype;
		  finish_init ();

		  if (pedantic && ! flag_isoc99)
		    pedwarn ("ISO C89 forbids compound literals");
		  yyval.ttype = build_compound_literal (type, constructor);
		;
    break;}
case 89:
/* #line 597 "c-parse.y" */
{ char class = TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype));
		  if (IS_EXPR_CODE_CLASS (class))
		    C_SET_EXP_ORIGINAL_CODE (yyvsp[-1].ttype, ERROR_MARK);
		  yyval.ttype = yyvsp[-1].ttype; ;
    break;}
case 90:
/* #line 602 "c-parse.y" */
{ yyval.ttype = error_mark_node; ;
    break;}
case 91:
/* #line 604 "c-parse.y" */
{ tree saved_last_tree;

		   if (pedantic)
		     pedwarn ("ISO C forbids braced-groups within expressions");
		  pop_label_level ();

		  saved_last_tree = COMPOUND_BODY (yyvsp[-2].ttype);
		  RECHAIN_STMTS (yyvsp[-2].ttype, COMPOUND_BODY (yyvsp[-2].ttype));
		  last_tree = saved_last_tree;
		  TREE_CHAIN (last_tree) = NULL_TREE;
		  if (!last_expr_type)
		    last_expr_type = void_type_node;
		  yyval.ttype = build1 (STMT_EXPR, last_expr_type, yyvsp[-2].ttype);
		  TREE_SIDE_EFFECTS (yyval.ttype) = 1;
		;
    break;}
case 92:
/* #line 620 "c-parse.y" */
{
		  pop_label_level ();
		  last_tree = COMPOUND_BODY (yyvsp[-2].ttype);
		  TREE_CHAIN (last_tree) = NULL_TREE;
		  yyval.ttype = error_mark_node;
		;
    break;}
case 93:
/* #line 627 "c-parse.y" */
{ yyval.ttype = build_function_call (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
    break;}
case 94:
/* #line 629 "c-parse.y" */
{ yyval.ttype = build_va_arg (yyvsp[-3].ttype, groktypename (yyvsp[-1].ttype)); ;
    break;}
case 95:
/* #line 632 "c-parse.y" */
{
                  tree c;

                  c = fold (yyvsp[-5].ttype);
                  STRIP_NOPS (c);
                  if (TREE_CODE (c) != INTEGER_CST)
                    error ("first argument to __builtin_choose_expr not a constant");
                  yyval.ttype = integer_zerop (c) ? yyvsp[-1].ttype : yyvsp[-3].ttype;
		;
    break;}
case 96:
/* #line 642 "c-parse.y" */
{
		  tree e1, e2;

		  e1 = TYPE_MAIN_VARIANT (groktypename (yyvsp[-3].ttype));
		  e2 = TYPE_MAIN_VARIANT (groktypename (yyvsp[-1].ttype));

		  yyval.ttype = comptypes (e1, e2)
		    ? build_int_2 (1, 0) : build_int_2 (0, 0);
		;
    break;}
case 97:
/* #line 652 "c-parse.y" */
{ yyval.ttype = build_array_ref (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
    break;}
case 98:
/* #line 654 "c-parse.y" */
{
		      yyval.ttype = build_component_ref (yyvsp[-2].ttype, yyvsp[0].ttype);
		;
    break;}
case 99:
/* #line 658 "c-parse.y" */
{
                  tree expr = build_indirect_ref (yyvsp[-2].ttype, "->");

			yyval.ttype = build_component_ref (expr, yyvsp[0].ttype);
		;
    break;}
case 100:
/* #line 664 "c-parse.y" */
{ yyval.ttype = build_unary_op (POSTINCREMENT_EXPR, yyvsp[-1].ttype, 0); ;
    break;}
case 101:
/* #line 666 "c-parse.y" */
{ yyval.ttype = build_unary_op (POSTDECREMENT_EXPR, yyvsp[-1].ttype, 0); ;
    break;}
case 103:
/* #line 673 "c-parse.y" */
{
                  static int last_lineno = 0;
                  static const char *last_input_filename = 0;
                  yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);
		  if (warn_traditional && !in_system_header
		      && (lineno != last_lineno || !last_input_filename ||
			  strcmp (last_input_filename, input_filename)))
		    {
		      warning ("traditional C rejects string concatenation");
		      last_lineno = lineno;
		      last_input_filename = input_filename;
		    }
		;
    break;}
case 106:
/* #line 694 "c-parse.y" */
{ c_mark_varargs ();
		  if (pedantic)
		    pedwarn ("ISO C does not permit use of `varargs.h'"); ;
    break;}
case 107:
/* #line 704 "c-parse.y" */
{ ;
    break;}
case 112:
/* #line 720 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 113:
/* #line 722 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 114:
/* #line 724 "c-parse.y" */
{ shadow_tag_warned (yyvsp[-1].ttype, 1);
		  pedwarn ("empty declaration"); ;
    break;}
case 115:
/* #line 727 "c-parse.y" */
{ pedwarn ("empty declaration"); ;
    break;}
case 116:
/* #line 736 "c-parse.y" */
{ ;
    break;}
case 117:
/* #line 744 "c-parse.y" */
{ pending_xref_error ();
		  PUSH_DECLSPEC_STACK;
		  split_specs_attrs (yyvsp[0].ttype,
				     &current_declspecs, &prefix_attributes);
		  all_prefix_attributes = prefix_attributes; ;
    break;}
case 118:
/* #line 755 "c-parse.y" */
{ all_prefix_attributes = chainon (yyvsp[0].ttype, prefix_attributes); ;
    break;}
case 119:
/* #line 760 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 120:
/* #line 762 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 121:
/* #line 764 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 122:
/* #line 766 "c-parse.y" */
{ POP_DECLSPEC_STACK; ;
    break;}
case 123:
/* #line 768 "c-parse.y" */
{ shadow_tag (yyvsp[-1].ttype); ;
    break;}
case 124:
/* #line 770 "c-parse.y" */
{ RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;
    break;}
case 125:
/* #line 827 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 126:
/* #line 830 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 127:
/* #line 833 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 128:
/* #line 839 "c-parse.y" */
{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 129:
/* #line 845 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 130:
/* #line 848 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 131:
/* #line 854 "c-parse.y" */
{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 0; ;
    break;}
case 132:
/* #line 857 "c-parse.y" */
{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 133:
/* #line 863 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 134:
/* #line 866 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 135:
/* #line 869 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 136:
/* #line 872 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 137:
/* #line 875 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 138:
/* #line 878 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 139:
/* #line 881 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 140:
/* #line 887 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 141:
/* #line 890 "c-parse.y" */
{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 142:
/* #line 893 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 143:
/* #line 896 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 144:
/* #line 899 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 145:
/* #line 902 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 146:
/* #line 908 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 147:
/* #line 911 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 148:
/* #line 914 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 149:
/* #line 917 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 150:
/* #line 920 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 151:
/* #line 923 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 152:
/* #line 929 "c-parse.y" */
{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 153:
/* #line 932 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 154:
/* #line 935 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 155:
/* #line 938 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 156:
/* #line 941 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 157:
/* #line 947 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
		  TREE_STATIC (yyval.ttype) = 0; ;
    break;}
case 158:
/* #line 950 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 159:
/* #line 953 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 160:
/* #line 956 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 161:
/* #line 962 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 162:
/* #line 968 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 163:
/* #line 974 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 164:
/* #line 983 "c-parse.y" */
{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 165:
/* #line 989 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 166:
/* #line 992 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 167:
/* #line 995 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 168:
/* #line 1001 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 169:
/* #line 1007 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 170:
/* #line 1013 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 171:
/* #line 1022 "c-parse.y" */
{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 172:
/* #line 1028 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 173:
/* #line 1031 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 174:
/* #line 1034 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 175:
/* #line 1037 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 176:
/* #line 1040 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 177:
/* #line 1043 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 178:
/* #line 1046 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 179:
/* #line 1052 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 180:
/* #line 1058 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 181:
/* #line 1064 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 182:
/* #line 1073 "c-parse.y" */
{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 183:
/* #line 1076 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 184:
/* #line 1079 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 185:
/* #line 1082 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 186:
/* #line 1085 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 187:
/* #line 1091 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 188:
/* #line 1094 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 189:
/* #line 1097 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 190:
/* #line 1100 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 191:
/* #line 1103 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 192:
/* #line 1106 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 193:
/* #line 1109 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 194:
/* #line 1115 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 195:
/* #line 1121 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 196:
/* #line 1127 "c-parse.y" */
{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
		    warning ("`%s' is not at beginning of declaration",
			     IDENTIFIER_POINTER (yyvsp[0].ttype));
		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 197:
/* #line 1136 "c-parse.y" */
{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
    break;}
case 198:
/* #line 1139 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 199:
/* #line 1142 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 200:
/* #line 1145 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 201:
/* #line 1148 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
		  TREE_STATIC (yyval.ttype) = 1; ;
    break;}
case 258:
/* #line 1236 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 259:
/* #line 1238 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 263:
/* #line 1273 "c-parse.y" */
{ OBJC_NEED_RAW_IDENTIFIER (1);	;
    break;}
case 266:
/* #line 1283 "c-parse.y" */
{ /* For a typedef name, record the meaning, not the name.
		     In case of `foo foo, bar;'.  */
		  yyval.ttype = lookup_name (yyvsp[0].ttype); ;
    break;}
case 267:
/* #line 1287 "c-parse.y" */
{ yyval.ttype = TREE_TYPE (yyvsp[-1].ttype); ;
    break;}
case 268:
/* #line 1289 "c-parse.y" */
{ yyval.ttype = groktypename (yyvsp[-1].ttype); ;
    break;}
case 273:
/* #line 1306 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 274:
/* #line 1308 "c-parse.y" */
{ if (TREE_CHAIN (yyvsp[-1].ttype)) yyvsp[-1].ttype = combine_strings (yyvsp[-1].ttype);
		  yyval.ttype = yyvsp[-1].ttype;
		;
    break;}
case 275:
/* #line 1315 "c-parse.y" */
{ yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
					  chainon (yyvsp[-1].ttype, all_prefix_attributes));
		  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;
    break;}
case 276:
/* #line 1320 "c-parse.y" */
{ finish_init ();
		  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;
    break;}
case 277:
/* #line 1323 "c-parse.y" */
{ tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,
				       chainon (yyvsp[0].ttype, all_prefix_attributes));
		  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); 
                ;
    break;}
case 278:
/* #line 1331 "c-parse.y" */
{ yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
					  chainon (yyvsp[-1].ttype, all_prefix_attributes));
		  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;
    break;}
case 279:
/* #line 1336 "c-parse.y" */
{ finish_init ();
		  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;
    break;}
case 280:
/* #line 1339 "c-parse.y" */
{ tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,
				       chainon (yyvsp[0].ttype, all_prefix_attributes));
		  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); ;
    break;}
case 281:
/* #line 1347 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 282:
/* #line 1349 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 283:
/* #line 1354 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 284:
/* #line 1356 "c-parse.y" */
{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;
    break;}
case 285:
/* #line 1361 "c-parse.y" */
{ yyval.ttype = yyvsp[-2].ttype; ;
    break;}
case 286:
/* #line 1366 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 287:
/* #line 1368 "c-parse.y" */
{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 288:
/* #line 1373 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 289:
/* #line 1375 "c-parse.y" */
{ yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;
    break;}
case 290:
/* #line 1377 "c-parse.y" */
{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;
    break;}
case 291:
/* #line 1379 "c-parse.y" */
{ yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;
    break;}
case 292:
/* #line 1381 "c-parse.y" */
{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
    break;}
case 298:
/* #line 1399 "c-parse.y" */
{ really_start_incremental_init (NULL_TREE); ;
    break;}
case 299:
/* #line 1401 "c-parse.y" */
{ yyval.ttype = pop_init_level (0); ;
    break;}
case 300:
/* #line 1403 "c-parse.y" */
{ yyval.ttype = error_mark_node; ;
    break;}
case 301:
/* #line 1409 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("ISO C forbids empty initializer braces"); ;
    break;}
case 305:
/* #line 1423 "c-parse.y" */
{ if (pedantic && ! flag_isoc99)
		    pedwarn ("ISO C89 forbids specifying subobject to initialize"); ;
    break;}
case 306:
/* #line 1426 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("obsolete use of designated initializer without `='"); ;
    break;}
case 307:
/* #line 1429 "c-parse.y" */
{ set_init_label (yyvsp[-1].ttype);
		  if (pedantic)
		    pedwarn ("obsolete use of designated initializer with `:'"); ;
    break;}
case 310:
/* #line 1438 "c-parse.y" */
{ push_init_level (0); ;
    break;}
case 311:
/* #line 1440 "c-parse.y" */
{ process_init_element (pop_init_level (0)); ;
    break;}
case 312:
/* #line 1442 "c-parse.y" */
{ process_init_element (yyvsp[0].ttype); ;
    break;}
case 316:
/* #line 1453 "c-parse.y" */
{ set_init_label (yyvsp[0].ttype); ;
    break;}
case 317:
/* #line 1458 "c-parse.y" */
{ set_init_index (yyvsp[-3].ttype, yyvsp[-1].ttype);
		  if (pedantic)
		    pedwarn ("ISO C forbids specifying range of elements to initialize"); ;
    break;}
case 318:
/* #line 1462 "c-parse.y" */
{ set_init_index (yyvsp[-1].ttype, NULL_TREE); ;
    break;}
case 319:
/* #line 1467 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("ISO C forbids nested functions");

		  push_function_context ();
		  if (! start_function (current_declspecs, yyvsp[0].ttype,
					all_prefix_attributes))
		    {
		      pop_function_context ();
		      YYERROR1;
		    }
		;
    break;}
case 320:
/* #line 1479 "c-parse.y" */
{ store_parm_decls (); ;
    break;}
case 321:
/* #line 1487 "c-parse.y" */
{ tree decl = current_function_decl;
		  DECL_SOURCE_FILE (decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (decl) = yyvsp[-1].lineno;
		  finish_function (1, 1);
		  pop_function_context (); 
		  add_decl_stmt (decl); ;
    break;}
case 322:
/* #line 1497 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("ISO C forbids nested functions");

		  push_function_context ();
		  if (! start_function (current_declspecs, yyvsp[0].ttype,
					all_prefix_attributes))
		    {
		      pop_function_context ();
		      YYERROR1;
		    }
		;
    break;}
case 323:
/* #line 1509 "c-parse.y" */
{ store_parm_decls (); ;
    break;}
case 324:
/* #line 1517 "c-parse.y" */
{ tree decl = current_function_decl;
		  DECL_SOURCE_FILE (decl) = yyvsp[-2].filename;
		  DECL_SOURCE_LINE (decl) = yyvsp[-1].lineno;
		  finish_function (1, 1);
		  pop_function_context (); 
		  add_decl_stmt (decl); ;
    break;}
case 327:
/* #line 1537 "c-parse.y" */
{ yyval.ttype = yyvsp[-2].ttype ? tree_cons (yyvsp[-2].ttype, yyvsp[-1].ttype, NULL_TREE) : yyvsp[-1].ttype; ;
    break;}
case 328:
/* #line 1539 "c-parse.y" */
{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
    break;}
case 329:
/* #line 1544 "c-parse.y" */
{ yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 0); ;
    break;}
case 330:
/* #line 1546 "c-parse.y" */
{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
    break;}
case 334:
/* #line 1561 "c-parse.y" */
{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
    break;}
case 335:
/* #line 1566 "c-parse.y" */
{ yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 0); ;
    break;}
case 337:
/* #line 1572 "c-parse.y" */
{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
    break;}
case 338:
/* #line 1577 "c-parse.y" */
{ yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 0); ;
    break;}
case 339:
/* #line 1579 "c-parse.y" */
{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
    break;}
case 340:
/* #line 1581 "c-parse.y" */
{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
    break;}
case 341:
/* #line 1583 "c-parse.y" */
{ yyval.ttype = yyvsp[-2].ttype ? tree_cons (yyvsp[-2].ttype, yyvsp[-1].ttype, NULL_TREE) : yyvsp[-1].ttype; ;
    break;}
case 342:
/* #line 1591 "c-parse.y" */
{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
    break;}
case 343:
/* #line 1596 "c-parse.y" */
{ yyval.ttype = yyvsp[-2].ttype ? tree_cons (yyvsp[-2].ttype, yyvsp[-1].ttype, NULL_TREE) : yyvsp[-1].ttype; ;
    break;}
case 344:
/* #line 1598 "c-parse.y" */
{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
    break;}
case 345:
/* #line 1600 "c-parse.y" */
{ yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 0); ;
    break;}
case 347:
/* #line 1606 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 348:
/* #line 1608 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 349:
/* #line 1613 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 350:
/* #line 1615 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 351:
/* #line 1620 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 352:
/* #line 1622 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 353:
/* #line 1633 "c-parse.y" */
{ yyval.ttype = start_struct (RECORD_TYPE, yyvsp[-1].ttype);
		  /* Start scope of tag before parsing components.  */
		;
    break;}
case 354:
/* #line 1637 "c-parse.y" */
{ yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;
    break;}
case 355:
/* #line 1639 "c-parse.y" */
{ yyval.ttype = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),
				      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));
		;
    break;}
case 356:
/* #line 1643 "c-parse.y" */
{ yyval.ttype = start_struct (UNION_TYPE, yyvsp[-1].ttype); ;
    break;}
case 357:
/* #line 1645 "c-parse.y" */
{ yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;
    break;}
case 358:
/* #line 1647 "c-parse.y" */
{ yyval.ttype = finish_struct (start_struct (UNION_TYPE, NULL_TREE),
				      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));
		;
    break;}
case 359:
/* #line 1651 "c-parse.y" */
{ yyval.ttype = start_enum (yyvsp[-1].ttype); ;
    break;}
case 360:
/* #line 1653 "c-parse.y" */
{ yyval.ttype = finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype),
				    chainon (yyvsp[-7].ttype, yyvsp[0].ttype)); ;
    break;}
case 361:
/* #line 1656 "c-parse.y" */
{ yyval.ttype = start_enum (NULL_TREE); ;
    break;}
case 362:
/* #line 1658 "c-parse.y" */
{ yyval.ttype = finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype),
				    chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;
    break;}
case 363:
/* #line 1664 "c-parse.y" */
{ yyval.ttype = xref_tag (RECORD_TYPE, yyvsp[0].ttype); ;
    break;}
case 364:
/* #line 1666 "c-parse.y" */
{ yyval.ttype = xref_tag (UNION_TYPE, yyvsp[0].ttype); ;
    break;}
case 365:
/* #line 1668 "c-parse.y" */
{ yyval.ttype = xref_tag (ENUMERAL_TYPE, yyvsp[0].ttype);
		  /* In ISO C, enumerated types can be referred to
		     only if already defined.  */
		  if (pedantic && !COMPLETE_TYPE_P (yyval.ttype))
		    pedwarn ("ISO C forbids forward references to `enum' types"); ;
    break;}
case 369:
/* #line 1683 "c-parse.y" */
{ if (pedantic && ! flag_isoc99)
		    pedwarn ("comma at end of enumerator list"); ;
    break;}
case 370:
/* #line 1689 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 371:
/* #line 1691 "c-parse.y" */
{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);
		  pedwarn ("no semicolon at end of struct or union"); ;
    break;}
case 372:
/* #line 1696 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 373:
/* #line 1698 "c-parse.y" */
{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
    break;}
case 374:
/* #line 1700 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("extra semicolon in struct or union specified"); ;
    break;}
case 375:
/* #line 1706 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;
    break;}
case 376:
/* #line 1709 "c-parse.y" */
{
		  /* Support for unnamed structs or unions as members of 
		     structs or unions (which is [a] useful and [b] supports 
		     MS P-SDK).  */
		  if (pedantic)
		    pedwarn ("ISO C doesn't support unnamed structs/unions");

		  yyval.ttype = grokfield(yyvsp[-1].filename, yyvsp[0].lineno, NULL, current_declspecs, NULL_TREE);
		  POP_DECLSPEC_STACK; ;
    break;}
case 377:
/* #line 1719 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;
    break;}
case 378:
/* #line 1722 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("ISO C forbids member declarations with no members");
		  shadow_tag(yyvsp[0].ttype);
		  yyval.ttype = NULL_TREE; ;
    break;}
case 379:
/* #line 1727 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 380:
/* #line 1729 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  RESTORE_WARN_FLAGS (yyvsp[-1].ttype); ;
    break;}
case 382:
/* #line 1736 "c-parse.y" */
{ yyval.ttype = chainon (yyvsp[-3].ttype, yyvsp[0].ttype); ;
    break;}
case 384:
/* #line 1742 "c-parse.y" */
{ yyval.ttype = chainon (yyvsp[-3].ttype, yyvsp[0].ttype); ;
    break;}
case 385:
/* #line 1747 "c-parse.y" */
{ yyval.ttype = grokfield (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-1].ttype, current_declspecs, NULL_TREE);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;
    break;}
case 386:
/* #line 1751 "c-parse.y" */
{ yyval.ttype = grokfield (yyvsp[-5].filename, yyvsp[-4].lineno, yyvsp[-3].ttype, current_declspecs, yyvsp[-1].ttype);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;
    break;}
case 387:
/* #line 1754 "c-parse.y" */
{ yyval.ttype = grokfield (yyvsp[-4].filename, yyvsp[-3].lineno, NULL_TREE, current_declspecs, yyvsp[-1].ttype);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;
    break;}
case 388:
/* #line 1760 "c-parse.y" */
{ yyval.ttype = grokfield (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-1].ttype, current_declspecs, NULL_TREE);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;
    break;}
case 389:
/* #line 1764 "c-parse.y" */
{ yyval.ttype = grokfield (yyvsp[-5].filename, yyvsp[-4].lineno, yyvsp[-3].ttype, current_declspecs, yyvsp[-1].ttype);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;
    break;}
case 390:
/* #line 1767 "c-parse.y" */
{ yyval.ttype = grokfield (yyvsp[-4].filename, yyvsp[-3].lineno, NULL_TREE, current_declspecs, yyvsp[-1].ttype);
		  decl_attributes (&yyval.ttype, chainon (yyvsp[0].ttype, all_prefix_attributes), 0); ;
    break;}
case 392:
/* #line 1779 "c-parse.y" */
{ if (yyvsp[-2].ttype == error_mark_node)
		    yyval.ttype = yyvsp[-2].ttype;
		  else
		    yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-2].ttype); ;
    break;}
case 393:
/* #line 1784 "c-parse.y" */
{ yyval.ttype = error_mark_node; ;
    break;}
case 394:
/* #line 1790 "c-parse.y" */
{ yyval.ttype = build_enumerator (yyvsp[0].ttype, NULL_TREE); ;
    break;}
case 395:
/* #line 1792 "c-parse.y" */
{ yyval.ttype = build_enumerator (yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 396:
/* #line 1797 "c-parse.y" */
{ pending_xref_error ();
		  yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 397:
/* #line 1800 "c-parse.y" */
{ yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;
    break;}
case 398:
/* #line 1805 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 400:
/* #line 1811 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 NULL_TREE),
					all_prefix_attributes); ;
    break;}
case 401:
/* #line 1815 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[0].ttype),
					all_prefix_attributes); ;
    break;}
case 402:
/* #line 1819 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes)); ;
    break;}
case 406:
/* #line 1832 "c-parse.y" */
{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
    break;}
case 407:
/* #line 1837 "c-parse.y" */
{ yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;
    break;}
case 408:
/* #line 1839 "c-parse.y" */
{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
    break;}
case 409:
/* #line 1844 "c-parse.y" */
{ yyval.ttype = yyvsp[-2].ttype ? tree_cons (yyvsp[-2].ttype, yyvsp[-1].ttype, NULL_TREE) : yyvsp[-1].ttype; ;
    break;}
case 410:
/* #line 1846 "c-parse.y" */
{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
    break;}
case 411:
/* #line 1848 "c-parse.y" */
{ yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, yyvsp[-1].ttype, 1); ;
    break;}
case 412:
/* #line 1850 "c-parse.y" */
{ yyval.ttype = build_nt (CALL_EXPR, NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;
    break;}
case 413:
/* #line 1852 "c-parse.y" */
{ yyval.ttype = set_array_declarator_type (yyvsp[0].ttype, NULL_TREE, 1); ;
    break;}
case 414:
/* #line 1859 "c-parse.y" */
{ yyval.ttype = build_array_declarator (yyvsp[-1].ttype, NULL_TREE, 0, 0); ;
    break;}
case 415:
/* #line 1861 "c-parse.y" */
{ yyval.ttype = build_array_declarator (yyvsp[-1].ttype, yyvsp[-2].ttype, 0, 0); ;
    break;}
case 416:
/* #line 1863 "c-parse.y" */
{ yyval.ttype = build_array_declarator (NULL_TREE, NULL_TREE, 0, 0); ;
    break;}
case 417:
/* #line 1865 "c-parse.y" */
{ yyval.ttype = build_array_declarator (NULL_TREE, yyvsp[-1].ttype, 0, 0); ;
    break;}
case 418:
/* #line 1867 "c-parse.y" */
{ yyval.ttype = build_array_declarator (NULL_TREE, NULL_TREE, 0, 1); ;
    break;}
case 419:
/* #line 1869 "c-parse.y" */
{ yyval.ttype = build_array_declarator (NULL_TREE, yyvsp[-2].ttype, 0, 1); ;
    break;}
case 420:
/* #line 1871 "c-parse.y" */
{ if (C_RID_CODE (yyvsp[-2].ttype) != RID_STATIC)
		    error ("storage class specifier in array declarator");
		  yyval.ttype = build_array_declarator (yyvsp[-1].ttype, NULL_TREE, 1, 0); ;
    break;}
case 421:
/* #line 1875 "c-parse.y" */
{ if (C_RID_CODE (yyvsp[-3].ttype) != RID_STATIC)
		    error ("storage class specifier in array declarator");
		  yyval.ttype = build_array_declarator (yyvsp[-1].ttype, yyvsp[-2].ttype, 1, 0); ;
    break;}
case 422:
/* #line 1879 "c-parse.y" */
{ if (C_RID_CODE (yyvsp[-2].ttype) != RID_STATIC)
		    error ("storage class specifier in array declarator");
		  yyval.ttype = build_array_declarator (yyvsp[-1].ttype, yyvsp[-3].ttype, 1, 0); ;
    break;}
case 425:
/* #line 1894 "c-parse.y" */
{
		  pedwarn ("deprecated use of label at end of compound statement");
		;
    break;}
case 433:
/* #line 1911 "c-parse.y" */
{ if (pedantic && !flag_isoc99)
		    pedwarn ("ISO C89 forbids mixed declarations and code"); ;
    break;}
case 448:
/* #line 1941 "c-parse.y" */
{ pushlevel (0);
		  clear_last_expr ();
		  add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);
		;
    break;}
case 449:
/* #line 1948 "c-parse.y" */
{ yyval.ttype = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0); ;
    break;}
case 450:
/* #line 1953 "c-parse.y" */
{ if (flag_isoc99)
		    {
		      yyval.ttype = c_begin_compound_stmt ();
		      pushlevel (0);
		      clear_last_expr ();
		      add_scope_stmt (/*begin_p=*/1, /*partial_p=*/0);
		    }
		  else
		    yyval.ttype = NULL_TREE;
		;
    break;}
case 451:
/* #line 1969 "c-parse.y" */
{ if (flag_isoc99)
		    {
		      tree scope_stmt = add_scope_stmt (/*begin_p=*/0, /*partial_p=*/0);
		      yyval.ttype = poplevel (kept_level_p (), 0, 0); 
		      SCOPE_STMT_BLOCK (TREE_PURPOSE (scope_stmt)) 
			= SCOPE_STMT_BLOCK (TREE_VALUE (scope_stmt))
			= yyval.ttype;
		    }
		  else
		    yyval.ttype = NULL_TREE; ;
    break;}
case 453:
/* #line 1986 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("ISO C forbids label declarations"); ;
    break;}
case 456:
/* #line 1997 "c-parse.y" */
{ tree link;
		  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))
		    {
		      tree label = shadow_label (TREE_VALUE (link));
		      C_DECLARED_LABEL_FLAG (label) = 1;
		      add_decl_stmt (label);
		    }
		;
    break;}
case 457:
/* #line 2011 "c-parse.y" */
{;
    break;}
case 459:
/* #line 2015 "c-parse.y" */
{ compstmt_count++;
                      yyval.ttype = c_begin_compound_stmt (); ;
    break;}
case 460:
/* #line 2020 "c-parse.y" */
{ yyval.ttype = convert (void_type_node, integer_zero_node); ;
    break;}
case 461:
/* #line 2022 "c-parse.y" */
{ yyval.ttype = poplevel (kept_level_p (), 1, 0); 
		  SCOPE_STMT_BLOCK (TREE_PURPOSE (yyvsp[0].ttype)) 
		    = SCOPE_STMT_BLOCK (TREE_VALUE (yyvsp[0].ttype))
		    = yyval.ttype; ;
    break;}
case 464:
/* #line 2035 "c-parse.y" */
{ if (current_function_decl == 0)
		    {
		      error ("braced-group within expression allowed only inside a function");
		      YYERROR;
		    }
		  /* We must force a BLOCK for this level
		     so that, if it is not expanded later,
		     there is a way to turn off the entire subtree of blocks
		     that are contained in it.  */
		  keep_next_level ();
		  push_label_level ();
		  compstmt_count++;
		  yyval.ttype = add_stmt (build_stmt (COMPOUND_STMT, last_tree));
		;
    break;}
case 465:
/* #line 2052 "c-parse.y" */
{ RECHAIN_STMTS (yyvsp[-1].ttype, COMPOUND_BODY (yyvsp[-1].ttype)); 
		  last_expr_type = NULL_TREE;
                  yyval.ttype = yyvsp[-1].ttype; ;
    break;}
case 466:
/* #line 2060 "c-parse.y" */
{ c_finish_then (); ;
    break;}
case 468:
/* #line 2077 "c-parse.y" */
{ yyval.ttype = c_begin_if_stmt (); ;
    break;}
case 469:
/* #line 2079 "c-parse.y" */
{ c_expand_start_cond (truthvalue_conversion (yyvsp[-1].ttype), 
				       compstmt_count,yyvsp[-3].ttype);
		  yyval.itype = stmt_count;
		  if_stmt_file = yyvsp[-7].filename;
		  if_stmt_line = yyvsp[-6].lineno; ;
    break;}
case 470:
/* #line 2091 "c-parse.y" */
{ stmt_count++;
		  compstmt_count++;
		  yyval.ttype 
		    = add_stmt (build_stmt (DO_STMT, NULL_TREE,
					    NULL_TREE));
		  /* In the event that a parse error prevents
		     parsing the complete do-statement, set the
		     condition now.  Otherwise, we can get crashes at
		     RTL-generation time.  */
		  DO_COND (yyval.ttype) = error_mark_node; ;
    break;}
case 471:
/* #line 2102 "c-parse.y" */
{ yyval.ttype = yyvsp[-2].ttype;
		  RECHAIN_STMTS (yyval.ttype, DO_BODY (yyval.ttype)); ;
    break;}
case 472:
/* #line 2110 "c-parse.y" */
{ if (yychar == YYEMPTY)
		    yychar = YYLEX;
		  yyval.filename = input_filename; ;
    break;}
case 473:
/* #line 2116 "c-parse.y" */
{ if (yychar == YYEMPTY)
		    yychar = YYLEX;
		  yyval.lineno = lineno; ;
    break;}
case 476:
/* #line 2129 "c-parse.y" */
{ if (flag_isoc99)
		    RECHAIN_STMTS (yyvsp[-2].ttype, COMPOUND_BODY (yyvsp[-2].ttype)); ;
    break;}
case 477:
/* #line 2135 "c-parse.y" */
{ if (yyvsp[0].ttype)
		    {
		      STMT_LINENO (yyvsp[0].ttype) = yyvsp[-1].lineno;
		      /* ??? We currently have no way of recording
			 the filename for a statement.  This probably
			 matters little in practice at the moment,
			 but I suspect that problems will occur when
			 doing inlining at the tree level.  */
		    }
		;
    break;}
case 478:
/* #line 2149 "c-parse.y" */
{ if (yyvsp[0].ttype)
		    {
		      STMT_LINENO (yyvsp[0].ttype) = yyvsp[-1].lineno;
		    }
		;
    break;}
case 479:
/* #line 2158 "c-parse.y" */
{ c_expand_start_else ();
		  yyvsp[-1].itype = stmt_count; ;
    break;}
case 480:
/* #line 2161 "c-parse.y" */
{ c_finish_else ();
		  c_expand_end_cond ();
		  if (extra_warnings && stmt_count == yyvsp[-3].itype)
		    warning ("empty body in an else-statement"); ;
    break;}
case 481:
/* #line 2166 "c-parse.y" */
{ c_expand_end_cond ();
		  /* This warning is here instead of in simple_if, because we
		     do not want a warning if an empty if is followed by an
		     else statement.  Increment stmt_count so we don't
		     give a second error if this is a nested `if'.  */
		  if (extra_warnings && stmt_count++ == yyvsp[0].itype)
		    warning_with_file_and_line (if_stmt_file, if_stmt_line,
						"empty body in an if-statement"); ;
    break;}
case 482:
/* #line 2178 "c-parse.y" */
{ c_expand_end_cond (); ;
    break;}
case 483:
/* #line 2188 "c-parse.y" */
{ stmt_count++; 
		  yyval.ttype = c_begin_while_stmt (); ;
    break;}
case 484:
/* #line 2191 "c-parse.y" */
{ yyvsp[-1].ttype = truthvalue_conversion (yyvsp[-1].ttype);
		  c_finish_while_stmt_cond (truthvalue_conversion (yyvsp[-1].ttype),
					    yyvsp[-3].ttype);
		  yyval.ttype = add_stmt (yyvsp[-3].ttype); ;
    break;}
case 485:
/* #line 2196 "c-parse.y" */
{ RECHAIN_STMTS (yyvsp[-1].ttype, WHILE_BODY (yyvsp[-1].ttype)); ;
    break;}
case 486:
/* #line 2199 "c-parse.y" */
{ DO_COND (yyvsp[-4].ttype) = truthvalue_conversion (yyvsp[-2].ttype); ;
    break;}
case 487:
/* #line 2201 "c-parse.y" */
{ ;
    break;}
case 488:
/* #line 2203 "c-parse.y" */
{ yyval.ttype = build_stmt (FOR_STMT, NULL_TREE, NULL_TREE,
					  NULL_TREE, NULL_TREE);
		  add_stmt (yyval.ttype); ;
    break;}
case 489:
/* #line 2207 "c-parse.y" */
{ stmt_count++;
		  RECHAIN_STMTS (yyvsp[-2].ttype, FOR_INIT_STMT (yyvsp[-2].ttype)); ;
    break;}
case 490:
/* #line 2210 "c-parse.y" */
{ if (yyvsp[-1].ttype) 
		    FOR_COND (yyvsp[-5].ttype) = truthvalue_conversion (yyvsp[-1].ttype); ;
    break;}
case 491:
/* #line 2213 "c-parse.y" */
{ FOR_EXPR (yyvsp[-8].ttype) = yyvsp[-1].ttype; ;
    break;}
case 492:
/* #line 2215 "c-parse.y" */
{ RECHAIN_STMTS (yyvsp[-10].ttype, FOR_BODY (yyvsp[-10].ttype)); ;
    break;}
case 493:
/* #line 2217 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = c_start_case (yyvsp[-1].ttype); ;
    break;}
case 494:
/* #line 2220 "c-parse.y" */
{ c_finish_case (); ;
    break;}
case 495:
/* #line 2225 "c-parse.y" */
{ add_stmt (build_stmt (EXPR_STMT, yyvsp[-1].ttype)); ;
    break;}
case 496:
/* #line 2227 "c-parse.y" */
{ check_for_loop_decls (); ;
    break;}
case 497:
/* #line 2233 "c-parse.y" */
{ stmt_count++; yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 498:
/* #line 2235 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = c_expand_expr_stmt (yyvsp[-1].ttype); ;
    break;}
case 499:
/* #line 2238 "c-parse.y" */
{ if (flag_isoc99)
		    RECHAIN_STMTS (yyvsp[-2].ttype, COMPOUND_BODY (yyvsp[-2].ttype));
		  yyval.ttype = NULL_TREE; ;
    break;}
case 500:
/* #line 2242 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = add_stmt (build_break_stmt ()); ;
    break;}
case 501:
/* #line 2245 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = add_stmt (build_continue_stmt ()); ;
    break;}
case 502:
/* #line 2248 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = c_expand_return (NULL_TREE); ;
    break;}
case 503:
/* #line 2251 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = c_expand_return (yyvsp[-1].ttype); ;
    break;}
case 504:
/* #line 2254 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = simple_asm_stmt (yyvsp[-2].ttype); ;
    break;}
case 505:
/* #line 2258 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = build_asm_stmt (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE); ;
    break;}
case 506:
/* #line 2263 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = build_asm_stmt (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE); ;
    break;}
case 507:
/* #line 2268 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = build_asm_stmt (yyvsp[-10].ttype, yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype); ;
    break;}
case 508:
/* #line 2271 "c-parse.y" */
{ tree decl;
		  stmt_count++;
		  decl = lookup_label (yyvsp[-1].ttype);
		  if (decl != 0)
		    {
		      TREE_USED (decl) = 1;
		      yyval.ttype = add_stmt (build_stmt (GOTO_STMT, decl));
		    }
		  else
		    yyval.ttype = NULL_TREE;
		;
    break;}
case 509:
/* #line 2283 "c-parse.y" */
{ if (pedantic)
		    pedwarn ("ISO C forbids `goto *expr;'");
		  stmt_count++;
		  yyvsp[-1].ttype = convert (ptr_type_node, yyvsp[-1].ttype);
		  yyval.ttype = add_stmt (build_stmt (GOTO_STMT, yyvsp[-1].ttype)); ;
    break;}
case 510:
/* #line 2289 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 511:
/* #line 2297 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = do_case (yyvsp[-1].ttype, NULL_TREE); ;
    break;}
case 512:
/* #line 2300 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = do_case (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
    break;}
case 513:
/* #line 2303 "c-parse.y" */
{ stmt_count++;
		  yyval.ttype = do_case (NULL_TREE, NULL_TREE); ;
    break;}
case 514:
/* #line 2306 "c-parse.y" */
{ tree label = define_label (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-4].ttype);
		  stmt_count++;
		  if (label)
		    {
		      decl_attributes (&label, yyvsp[0].ttype, 0);
		      yyval.ttype = add_stmt (build_stmt (LABEL_STMT, label));
		    }
		  else
		    yyval.ttype = NULL_TREE;
		;
    break;}
case 515:
/* #line 2322 "c-parse.y" */
{ emit_line_note (input_filename, lineno);
		  yyval.ttype = NULL_TREE; ;
    break;}
case 516:
/* #line 2325 "c-parse.y" */
{ emit_line_note (input_filename, lineno); ;
    break;}
case 517:
/* #line 2330 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 519:
/* #line 2337 "c-parse.y" */
{ yyval.ttype = NULL_TREE; ;
    break;}
case 522:
/* #line 2344 "c-parse.y" */
{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
    break;}
case 523:
/* #line 2349 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (NULL_TREE, yyvsp[-3].ttype), yyvsp[-1].ttype); ;
    break;}
case 524:
/* #line 2351 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (yyvsp[-5].ttype, yyvsp[-3].ttype), yyvsp[-1].ttype); ;
    break;}
case 525:
/* #line 2356 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), NULL_TREE); ;
    break;}
case 526:
/* #line 2358 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), yyvsp[-2].ttype); ;
    break;}
case 527:
/* #line 2368 "c-parse.y" */
{ pushlevel (0);
		  clear_parm_order ();
		  declare_parm_level (0); ;
    break;}
case 528:
/* #line 2372 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  parmlist_tags_warning ();
		  poplevel (0, 0, 0); ;
    break;}
case 530:
/* #line 2380 "c-parse.y" */
{ tree parm;
		  if (pedantic)
		    pedwarn ("ISO C forbids forward parameter declarations");
		  /* Mark the forward decls as such.  */
		  for (parm = getdecls (); parm; parm = TREE_CHAIN (parm))
		    TREE_ASM_WRITTEN (parm) = 1;
		  clear_parm_order (); ;
    break;}
case 531:
/* #line 2388 "c-parse.y" */
{ /* Dummy action so attributes are in known place
		     on parser stack.  */ ;
    break;}
case 532:
/* #line 2391 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype; ;
    break;}
case 533:
/* #line 2393 "c-parse.y" */
{ yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); ;
    break;}
case 534:
/* #line 2399 "c-parse.y" */
{ yyval.ttype = get_parm_info (0); ;
    break;}
case 535:
/* #line 2401 "c-parse.y" */
{ yyval.ttype = get_parm_info (0);
		  /* Gcc used to allow this as an extension.  However, it does
		     not work for all targets, and thus has been disabled.
		     Also, since func (...) and func () are indistinguishable,
		     it caused problems with the code in expand_builtin which
		     tries to verify that BUILT_IN_NEXT_ARG is being used
		     correctly.  */
		  error ("ISO C requires a named argument before `...'");
		;
    break;}
case 536:
/* #line 2411 "c-parse.y" */
{ yyval.ttype = get_parm_info (1); ;
    break;}
case 537:
/* #line 2413 "c-parse.y" */
{ yyval.ttype = get_parm_info (0); ;
    break;}
case 538:
/* #line 2418 "c-parse.y" */
{ push_parm_decl (yyvsp[0].ttype); ;
    break;}
case 539:
/* #line 2420 "c-parse.y" */
{ push_parm_decl (yyvsp[0].ttype); ;
    break;}
case 540:
/* #line 2427 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;
    break;}
case 541:
/* #line 2432 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes)); 
		  POP_DECLSPEC_STACK; ;
    break;}
case 542:
/* #line 2437 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;
    break;}
case 543:
/* #line 2440 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;
    break;}
case 544:
/* #line 2446 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;
    break;}
case 545:
/* #line 2454 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;
    break;}
case 546:
/* #line 2459 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes)); 
		  POP_DECLSPEC_STACK; ;
    break;}
case 547:
/* #line 2464 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;
    break;}
case 548:
/* #line 2467 "c-parse.y" */
{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
							 yyvsp[-1].ttype),
					chainon (yyvsp[0].ttype, all_prefix_attributes));
		  POP_DECLSPEC_STACK; ;
    break;}
case 549:
/* #line 2473 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  POP_DECLSPEC_STACK; ;
    break;}
case 550:
/* #line 2479 "c-parse.y" */
{ prefix_attributes = chainon (prefix_attributes, yyvsp[-3].ttype);
		  all_prefix_attributes = prefix_attributes; ;
    break;}
case 551:
/* #line 2488 "c-parse.y" */
{ pushlevel (0);
		  clear_parm_order ();
		  declare_parm_level (1); ;
    break;}
case 552:
/* #line 2492 "c-parse.y" */
{ yyval.ttype = yyvsp[0].ttype;
		  parmlist_tags_warning ();
		  poplevel (0, 0, 0); ;
    break;}
case 554:
/* #line 2500 "c-parse.y" */
{ tree t;
		  for (t = yyvsp[-1].ttype; t; t = TREE_CHAIN (t))
		    if (TREE_VALUE (t) == NULL_TREE)
		      error ("`...' in old-style identifier list");
		  yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, yyvsp[-1].ttype);

		  /* Make sure we have a parmlist after attributes.  */
		  if (yyvsp[-3].ttype != 0
		      && (TREE_CODE (yyval.ttype) != TREE_LIST
			  || TREE_PURPOSE (yyval.ttype) == 0
			  || TREE_CODE (TREE_PURPOSE (yyval.ttype)) != PARM_DECL))
		    YYERROR1;
		;
    break;}
case 555:
/* #line 2518 "c-parse.y" */
{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
    break;}
case 556:
/* #line 2520 "c-parse.y" */
{ yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
    break;}
case 557:
/* #line 2526 "c-parse.y" */
{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
    break;}
case 558:
/* #line 2528 "c-parse.y" */
{ yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
    break;}
case 559:
/* #line 2533 "c-parse.y" */
{ yyval.ttype = SAVE_WARN_FLAGS();
		  pedantic = 0;
		  warn_pointer_arith = 0;
		  warn_traditional = 0; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
/* #line 543 "/usr/lib/bison.simple" */

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
