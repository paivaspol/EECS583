static void
copy_insn_list (insns, map, static_chain_value)
     rtx insns;
     struct inline_remap *map;
     rtx static_chain_value;
{
  int i;
  rtx insn;
  rtx temp;
#ifdef HAVE_cc0
  rtx cc0_insn = 0;
#endif
  rtx static_chain_mem = 0;

  /* Copy the insns one by one.  Do this in two passes, first the insns and
     then their REG_NOTES.  */

  /* This loop is very similar to the loop in copy_loop_body in unroll.c.  */

  for (insn = insns; insn; insn = NEXT_INSN (insn))
    {
      rtx copy, pattern, set;

      map->orig_asm_operands_vector = 0;

      switch (GET_CODE (insn))
	{
	case INSN:
	  pattern = PATTERN (insn);
	  set = single_set (insn);
	  copy = 0;
	  if (GET_CODE (pattern) == USE
	      && GET_CODE (XEXP (pattern, 0)) == REG
	      && REG_FUNCTION_VALUE_P (XEXP (pattern, 0)))
	    /* The (USE (REG n)) at return from the function should
	       be ignored since we are changing (REG n) into
	       inline_target.  */
	    break;

	  /* Ignore setting a function value that we don't want to use.  */
	  if (map->inline_target == 0
	      && set != 0
	      && GET_CODE (SET_DEST (set)) == REG
	      && REG_FUNCTION_VALUE_P (SET_DEST (set)))
	    {
	      if (volatile_refs_p (SET_SRC (set)))
		{
		  rtx new_set;

		  /* If we must not delete the source,
		     load it into a new temporary.  */
		  copy = emit_insn (copy_rtx_and_substitute (pattern, map, 0));

		  new_set = single_set (copy);
		  if (new_set == 0)
		    abort ();

		  SET_DEST (new_set)
		    = gen_reg_rtx (GET_MODE (SET_DEST (new_set)));
		}
	      /* If the source and destination are the same and it
		 has a note on it, keep the insn.  */
	      else if (rtx_equal_p (SET_DEST (set), SET_SRC (set))
		       && REG_NOTES (insn) != 0)
		copy = emit_insn (copy_rtx_and_substitute (pattern, map, 0));
	      else
		break;
	    }

	  /* Similarly if an ignored return value is clobbered.  */
	  else if (map->inline_target == 0
		   && GET_CODE (pattern) == CLOBBER
		   && GET_CODE (XEXP (pattern, 0)) == REG
		   && REG_FUNCTION_VALUE_P (XEXP (pattern, 0)))
	    break;

	  /* Look for the address of the static chain slot. The
             rtx_equal_p comparisons against the
             static_chain_incoming_rtx below may fail if the static
             chain is in memory and the address specified is not
             "legitimate".  This happens on Xtensa where the static
             chain is at a negative offset from argp and where only
             positive offsets are legitimate.  When the RTL is
             generated, the address is "legitimized" by copying it
             into a register, causing the rtx_equal_p comparisons to
             fail.  This workaround looks for code that sets a
             register to the address of the static chain.  Subsequent
             memory references via that register can then be
             identified as static chain references.  We assume that
             the register is only assigned once, and that the static
             chain address is only live in one register at a time. */

	  else if (static_chain_value != 0
		   && set != 0
		   && GET_CODE (static_chain_incoming_rtx) == MEM
		   && GET_CODE (SET_DEST (set)) == REG
		   && rtx_equal_p (SET_SRC (set),
				   XEXP (static_chain_incoming_rtx, 0)))
	    {
	      static_chain_mem =
		  gen_rtx_MEM (GET_MODE (static_chain_incoming_rtx),
			       SET_DEST (set));

	      /* emit the instruction in case it is used for something
		 other than setting the static chain; if it's not used,
		 it can always be removed as dead code */
	      copy = emit_insn (copy_rtx_and_substitute (pattern, map, 0));
	    }

	  /* If this is setting the static chain rtx, omit it.  */
	  else if (static_chain_value != 0
		   && set != 0
		   && (rtx_equal_p (SET_DEST (set),
				    static_chain_incoming_rtx)
		       || (static_chain_mem
			   && rtx_equal_p (SET_DEST (set), static_chain_mem))))
	    break;

	  /* If this is setting the static chain pseudo, set it from
	     the value we want to give it instead.  */
	  else if (static_chain_value != 0
		   && set != 0
		   && (rtx_equal_p (SET_SRC (set),
				    static_chain_incoming_rtx)
		       || (static_chain_mem
			   && rtx_equal_p (SET_SRC (set), static_chain_mem))))
	    {
	      rtx newdest = copy_rtx_and_substitute (SET_DEST (set), map, 1);

	      copy = emit_move_insn (newdest, static_chain_value);
	      if (GET_CODE (static_chain_incoming_rtx) != MEM)
		static_chain_value = 0;
	    }

	  /* If this is setting the virtual stack vars register, this must
	     be the code at the handler for a builtin longjmp.  The value
	     saved in the setjmp buffer will be the address of the frame
	     we've made for this inlined instance within our frame.  But we
	     know the offset of that value so we can use it to reconstruct
	     our virtual stack vars register from that value.  If we are
	     copying it from the stack pointer, leave it unchanged.  */
	  else if (set != 0
		   && rtx_equal_p (SET_DEST (set), virtual_stack_vars_rtx))
	    {
	      HOST_WIDE_INT offset;
	      temp = map->reg_map[REGNO (SET_DEST (set))];
	      temp = VARRAY_CONST_EQUIV (map->const_equiv_varray,
					 REGNO (temp)).rtx;

	      if (rtx_equal_p (temp, virtual_stack_vars_rtx))
		offset = 0;
	      else if (GET_CODE (temp) == PLUS
		       && rtx_equal_p (XEXP (temp, 0), virtual_stack_vars_rtx)
		       && GET_CODE (XEXP (temp, 1)) == CONST_INT)
		offset = INTVAL (XEXP (temp, 1));
	      else
		abort ();

	      if (rtx_equal_p (SET_SRC (set), stack_pointer_rtx))
		temp = SET_SRC (set);
	      else
		temp = force_operand (plus_constant (SET_SRC (set),
						     - offset),
				      NULL_RTX);

	      copy = emit_move_insn (virtual_stack_vars_rtx, temp);
	    }

	  else
	    copy = emit_insn (copy_rtx_and_substitute (pattern, map, 0));
	  /* REG_NOTES will be copied later.  */

#ifdef HAVE_cc0
	  /* If this insn is setting CC0, it may need to look at
	     the insn that uses CC0 to see what type of insn it is.
	     In that case, the call to recog via validate_change will
	     fail.  So don't substitute constants here.  Instead,
	     do it when we emit the following insn.

	     For example, see the pyr.md file.  That machine has signed and
	     unsigned compares.  The compare patterns must check the
	     following branch insn to see which what kind of compare to
	     emit.

	     If the previous insn set CC0, substitute constants on it as
	     well.  */
	  if (sets_cc0_p (PATTERN (copy)) != 0)
	    cc0_insn = copy;
	  else
	    {
	      if (cc0_insn)
		try_constants (cc0_insn, map);
	      cc0_insn = 0;
	      try_constants (copy, map);
	    }
#else
	  try_constants (copy, map);
#endif
	  break;

	case JUMP_INSN:
	  if (map->integrating && returnjump_p (insn))
	    {
	      if (map->local_return_label == 0)
		map->local_return_label = gen_label_rtx ();
	      pattern = gen_jump (map->local_return_label);
	    }
	  else
	    pattern = copy_rtx_and_substitute (PATTERN (insn), map, 0);

	  copy = emit_jump_insn (pattern);

#ifdef HAVE_cc0
	  if (cc0_insn)
	    try_constants (cc0_insn, map);
	  cc0_insn = 0;
#endif
	  try_constants (copy, map);

	  /* If this used to be a conditional jump insn but whose branch
	     direction is now know, we must do something special.  */
	  if (any_condjump_p (insn) && onlyjump_p (insn) && map->last_pc_value)
	    {
#ifdef HAVE_cc0
	      /* If the previous insn set cc0 for us, delete it.  */
	      if (only_sets_cc0_p (PREV_INSN (copy)))
		delete_related_insns (PREV_INSN (copy));
#endif

	      /* If this is now a no-op, delete it.  */
	      if (map->last_pc_value == pc_rtx)
		{
		  delete_related_insns (copy);
		  copy = 0;
		}
	      else
		/* Otherwise, this is unconditional jump so we must put a
		   BARRIER after it.  We could do some dead code elimination
		   here, but jump.c will do it just as well.  */
		emit_barrier ();
	    }
	  break;

	case CALL_INSN:
	  /* If this is a CALL_PLACEHOLDER insn then we need to copy the
	     three attached sequences: normal call, sibling call and tail
	     recursion.  */
	  if (GET_CODE (PATTERN (insn)) == CALL_PLACEHOLDER)
	    {
	      rtx sequence[3];
	      rtx tail_label;

	      for (i = 0; i < 3; i++)
		{
		  rtx seq;

		  sequence[i] = NULL_RTX;
		  seq = XEXP (PATTERN (insn), i);
		  if (seq)
		    {
		      start_sequence ();
		      copy_insn_list (seq, map, static_chain_value);
		      sequence[i] = get_insns ();
		      end_sequence ();
		    }
		}

	      /* Find the new tail recursion label.
	         It will already be substituted into sequence[2].  */
	      tail_label = copy_rtx_and_substitute (XEXP (PATTERN (insn), 3),
						    map, 0);

	      copy = emit_call_insn (gen_rtx_CALL_PLACEHOLDER (VOIDmode,
							       sequence[0],
							       sequence[1],
							       sequence[2],
							       tail_label));
	      break;
	    }

	  pattern = copy_rtx_and_substitute (PATTERN (insn), map, 0);
	  copy = emit_call_insn (pattern);

	  SIBLING_CALL_P (copy) = SIBLING_CALL_P (insn);
	  CONST_OR_PURE_CALL_P (copy) = CONST_OR_PURE_CALL_P (insn);

	  /* Because the USAGE information potentially contains objects other
	     than hard registers, we need to copy it.  */

	  CALL_INSN_FUNCTION_USAGE (copy)
	    = copy_rtx_and_substitute (CALL_INSN_FUNCTION_USAGE (insn),
				       map, 0);

#ifdef HAVE_cc0
	  if (cc0_insn)
	    try_constants (cc0_insn, map);
	  cc0_insn = 0;
#endif
	  try_constants (copy, map);

	  /* Be lazy and assume CALL_INSNs clobber all hard registers.  */
	  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)
	    VARRAY_CONST_EQUIV (map->const_equiv_varray, i).rtx = 0;
	  break;

	case CODE_LABEL:
	  copy = emit_label (get_label_from_map (map,
						 CODE_LABEL_NUMBER (insn)));
	  LABEL_NAME (copy) = LABEL_NAME (insn);
	  map->const_age++;
	  break;

	case BARRIER:
	  copy = emit_barrier ();
	  break;

	case NOTE:
	  if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_DELETED_LABEL)
	    {
	      copy = emit_label (get_label_from_map (map,
						    CODE_LABEL_NUMBER (insn)));
	      LABEL_NAME (copy) = NOTE_SOURCE_FILE (insn);
	      map->const_age++;
	      break;
	    }

	  /* NOTE_INSN_FUNCTION_END and NOTE_INSN_FUNCTION_BEG are
	     discarded because it is important to have only one of
	     each in the current function.

	     NOTE_INSN_DELETED notes aren't useful.  */

	  if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_END
	      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_FUNCTION_BEG
	      && NOTE_LINE_NUMBER (insn) != NOTE_INSN_DELETED)
	    {
	      copy = emit_note (NOTE_SOURCE_FILE (insn),
				NOTE_LINE_NUMBER (insn));
	      if (copy
		  && (NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_BEG
		      || NOTE_LINE_NUMBER (copy) == NOTE_INSN_BLOCK_END)
		  && NOTE_BLOCK (insn))
		{
		  tree *mapped_block_p;

		  mapped_block_p
		    = (tree *) bsearch (NOTE_BLOCK (insn),
					&VARRAY_TREE (map->block_map, 0),
					map->block_map->elements_used,
					sizeof (tree),
					find_block);

		  if (!mapped_block_p)
		    abort ();
		  else
		    NOTE_BLOCK (copy) = *mapped_block_p;
		}
	      else if (copy
		       && NOTE_LINE_NUMBER (copy) == NOTE_INSN_EXPECTED_VALUE)
		NOTE_EXPECTED_VALUE (copy)
		  = copy_rtx_and_substitute (NOTE_EXPECTED_VALUE (insn),
					     map, 0);
	    }
	  else
	    copy = 0;
	  break;

	default:
	  abort ();
	}

      if (copy)
	RTX_INTEGRATED_P (copy) = 1;

      map->insn_map[INSN_UID (insn)] = copy;
    }
}
