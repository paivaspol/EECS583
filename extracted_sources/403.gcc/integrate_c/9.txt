static void
copy_insn_notes (insns, map, eh_region_offset)
     rtx insns;
     struct inline_remap *map;
     int eh_region_offset;
{
  rtx insn, new_insn;

  map->const_age++;
  for (insn = insns; insn; insn = NEXT_INSN (insn))
    {
      if (! INSN_P (insn))
	continue;

      new_insn = map->insn_map[INSN_UID (insn)];
      if (! new_insn)
	continue;

      if (REG_NOTES (insn))
        {
	  rtx next, note = copy_rtx_and_substitute (REG_NOTES (insn), map, 0);

	  /* We must also do subst_constants, in case one of our parameters
	     has const type and constant value.  */
	  subst_constants (&note, NULL_RTX, map, 0);
	  apply_change_group ();
	  REG_NOTES (new_insn) = note;

	  /* Delete any REG_LABEL notes from the chain.  Remap any
             REG_EH_REGION notes.  */
	  for (; note; note = next)
	    {
	      next = XEXP (note, 1);
	      if (REG_NOTE_KIND (note) == REG_LABEL)
	        remove_note (new_insn, note);
	      else if (REG_NOTE_KIND (note) == REG_EH_REGION
		       && INTVAL (XEXP (note, 0)) > 0)
	        XEXP (note, 0) = GEN_INT (INTVAL (XEXP (note, 0))
					  + eh_region_offset);
	    }
        }

      if (GET_CODE (insn) == CALL_INSN
	  && GET_CODE (PATTERN (insn)) == CALL_PLACEHOLDER)
	{
	  int i;
	  for (i = 0; i < 3; i++)
	    copy_insn_notes (XEXP (PATTERN (insn), i), map, eh_region_offset);
	}

      if (GET_CODE (insn) == JUMP_INSN
	  && GET_CODE (PATTERN (insn)) == RESX)
	XINT (PATTERN (new_insn), 0) += eh_region_offset;
    }
}
