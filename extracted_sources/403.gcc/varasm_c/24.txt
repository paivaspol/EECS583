void
make_decl_rtl (decl, asmspec)
     tree decl;
     const char *asmspec;
{
  int top_level = (DECL_CONTEXT (decl) == NULL_TREE);
  const char *name = 0;
  const char *new_name = 0;
  int reg_number;
  rtx x;

  /* Check that we are not being given an automatic variable.  */
  /* A weak alias has TREE_PUBLIC set but not the other bits.  */
  if (TREE_CODE (decl) == PARM_DECL
      || TREE_CODE (decl) == RESULT_DECL
      || (TREE_CODE (decl) == VAR_DECL
	  && !TREE_STATIC (decl)
	  && !TREE_PUBLIC (decl)
	  && !DECL_EXTERNAL (decl)
	  && !DECL_REGISTER (decl)))
    abort ();
  /* And that we were not given a type or a label.  */
  else if (TREE_CODE (decl) == TYPE_DECL
	   || TREE_CODE (decl) == LABEL_DECL)
    abort ();

  /* For a duplicate declaration, we can be called twice on the
     same DECL node.  Don't discard the RTL already made.  */
  if (DECL_RTL_SET_P (decl))
    {
      /* If the old RTL had the wrong mode, fix the mode.  */
      if (GET_MODE (DECL_RTL (decl)) != DECL_MODE (decl))
	SET_DECL_RTL (decl, adjust_address_nv (DECL_RTL (decl),
					       DECL_MODE (decl), 0));

      /* ??? Another way to do this would be to do what halfpic.c does
	 and maintain a hashed table of such critters.  */
      /* ??? Another way to do this would be to pass a flag bit to
	 ENCODE_SECTION_INFO saying whether this is a new decl or not.  */
      /* Let the target reassign the RTL if it wants.
	 This is necessary, for example, when one machine specific
	 decl attribute overrides another.  */
#ifdef REDO_SECTION_INFO_P
      if (REDO_SECTION_INFO_P (decl))
	ENCODE_SECTION_INFO (decl);
#endif
      return;
    }

  new_name = name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));

  reg_number = decode_reg_name (asmspec);
  if (reg_number == -2)
    {
      /* ASMSPEC is given, and not the name of a register.  Mark the
	 name with a star so assemble_name won't munge it.  */
      char *starred = alloca (strlen (asmspec) + 2);
      starred[0] = '*';
      strcpy (starred + 1, asmspec);
      new_name = starred;
    }

  if (TREE_CODE (decl) != FUNCTION_DECL && DECL_REGISTER (decl))
    {
      /* First detect errors in declaring global registers.  */
      if (reg_number == -1)
	error_with_decl (decl, "register name not specified for `%s'");
      else if (reg_number < 0)
	error_with_decl (decl, "invalid register name for `%s'");
      else if (TYPE_MODE (TREE_TYPE (decl)) == BLKmode)
	error_with_decl (decl,
			 "data type of `%s' isn't suitable for a register");
      else if (! HARD_REGNO_MODE_OK (reg_number, TYPE_MODE (TREE_TYPE (decl))))
	error_with_decl (decl,
			 "register specified for `%s' isn't suitable for data type");
      /* Now handle properly declared static register variables.  */
      else
	{
	  int nregs;

	  if (DECL_INITIAL (decl) != 0 && TREE_STATIC (decl))
	    {
	      DECL_INITIAL (decl) = 0;
	      error ("global register variable has initial value");
	    }
	  if (TREE_THIS_VOLATILE (decl))
	    warning ("volatile register variables don't work as you might wish");

	  /* If the user specified one of the eliminables registers here,
	     e.g., FRAME_POINTER_REGNUM, we don't want to get this variable
	     confused with that register and be eliminated.  This usage is
	     somewhat suspect...  */

	  SET_DECL_RTL (decl, gen_rtx_raw_REG (DECL_MODE (decl), reg_number));
	  ORIGINAL_REGNO (DECL_RTL (decl)) = reg_number;
	  REG_USERVAR_P (DECL_RTL (decl)) = 1;

	  if (TREE_STATIC (decl))
	    {
	      /* Make this register global, so not usable for anything
		 else.  */
#ifdef ASM_DECLARE_REGISTER_GLOBAL
	      ASM_DECLARE_REGISTER_GLOBAL (asm_out_file, decl, reg_number, name);
#endif
	      nregs = HARD_REGNO_NREGS (reg_number, DECL_MODE (decl));
	      while (nregs > 0)
		globalize_reg (reg_number + --nregs);
	    }

	  /* As a register variable, it has no section.  */
	  return;
	}
    }

  /* Now handle ordinary static variables and functions (in memory).
     Also handle vars declared register invalidly.  */

  if (reg_number >= 0 || reg_number == -3)
    error_with_decl (decl,
		     "register name given for non-register variable `%s'");

  /* Specifying a section attribute on a variable forces it into a
     non-.bss section, and thus it cannot be common.  */
  if (TREE_CODE (decl) == VAR_DECL
      && DECL_SECTION_NAME (decl) != NULL_TREE
      && DECL_INITIAL (decl) == NULL_TREE
      && DECL_COMMON (decl))
    DECL_COMMON (decl) = 0;

  /* Can't use just the variable's own name for a variable
     whose scope is less than the whole file, unless it's a member
     of a local class (which will already be unambiguous).
     Concatenate a distinguishing number.  */
  if (!top_level && !TREE_PUBLIC (decl)
      && ! (DECL_CONTEXT (decl) && TYPE_P (DECL_CONTEXT (decl)))
      && asmspec == 0
      && name == IDENTIFIER_POINTER (DECL_NAME (decl)))
    {
      char *label;

      ASM_FORMAT_PRIVATE_NAME (label, name, var_labelno);
      var_labelno++;
      new_name = label;
    }

  if (name != new_name)
    {
      SET_DECL_ASSEMBLER_NAME (decl, get_identifier (new_name));
      name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));
    }

  /* If this variable is to be treated as volatile, show its
     tree node has side effects.  */
  if ((flag_volatile_global && TREE_CODE (decl) == VAR_DECL
       && TREE_PUBLIC (decl))
      || ((flag_volatile_static && TREE_CODE (decl) == VAR_DECL
	   && (TREE_PUBLIC (decl) || TREE_STATIC (decl)))))
    TREE_SIDE_EFFECTS (decl) = 1;

  x = gen_rtx_MEM (DECL_MODE (decl), gen_rtx_SYMBOL_REF (Pmode, name));
  SYMBOL_REF_WEAK (XEXP (x, 0)) = DECL_WEAK (decl);
  if (TREE_CODE (decl) != FUNCTION_DECL)
    set_mem_attributes (x, decl, 1);
  SET_DECL_RTL (decl, x);

  /* Optionally set flags or add text to the name to record information
     such as that it is a function name.
     If the name is changed, the macro ASM_OUTPUT_LABELREF
     will have to know how to strip this information.  */
#ifdef ENCODE_SECTION_INFO
  ENCODE_SECTION_INFO (decl);
#endif
}
