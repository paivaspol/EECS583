static unsigned int
independent_decode_option (argc, argv)
     int argc;
     char **argv;
{
  char *arg = argv[0];

  if (arg[0] != '-' || arg[1] == 0)
    {
      if (arg[0] == '+')
	return 0;

      filename = arg;

      return 1;
    }

  arg++;

  if (!strcmp (arg, "-help"))
    {
      display_help ();
      exit_after_options = 1;
    }

  if (!strcmp (arg, "-target-help"))
    {
      display_target_options ();
      exit_after_options = 1;
    }

  if (!strcmp (arg, "-version"))
    {
      print_version (stderr, "");
      exit_after_options = 1;
    }

  /* Handle '--param <name>=<value>'.  */
  if (strcmp (arg, "-param") == 0)
    {
      char *equal;

      if (argc == 1)
	{
	  error ("-param option missing argument");
	  return 1;
	}

      /* Get the '<name>=<value>' parameter.  */
      arg = argv[1];
      /* Look for the `='.  */
      equal = strchr (arg, '=');
      if (!equal)
	error ("invalid --param option: %s", arg);
      else
	{
	  int val;

	  /* Zero out the `=' sign so that we get two separate strings.  */
	  *equal = '\0';
	  /* Figure out what value is specified.  */
	  val = read_integral_parameter (equal + 1, NULL, INVALID_PARAM_VAL);
	  if (val != INVALID_PARAM_VAL)
	    set_param_value (arg, val);
	  else
	    error ("invalid parameter value `%s'", equal + 1);
	}

      return 2;
    }

  if (*arg == 'Y')
    arg++;

  switch (*arg)
    {
    default:
      return 0;

    case 'O':
      /* Already been treated in main (). Do nothing.  */
      break;

    case 'm':
      set_target_switch (arg + 1);
      break;

    case 'f':
      return decode_f_option (arg + 1);

    case 'g':
      return decode_g_option (arg + 1);

    case 'd':
      if (!strcmp (arg, "dumpbase"))
	{
	  if (argc == 1)
	    return 0;

	  dump_base_name = argv[1];
	  return 2;
	}
      else
	decode_d_option (arg + 1);
      break;

    case 'p':
      if (!strcmp (arg, "pedantic"))
	pedantic = 1;
      else if (!strcmp (arg, "pedantic-errors"))
	flag_pedantic_errors = pedantic = 1;
      else if (arg[1] == 0)
	profile_flag = 1;
      else
	return 0;
      break;

    case 'q':
      if (!strcmp (arg, "quiet"))
	quiet_flag = 1;
      else
	return 0;
      break;

    case 'v':
      if (!strcmp (arg, "version"))
	version_flag = 1;
      else
	return 0;
      break;

    case 'w':
      if (arg[1] == 0)
	inhibit_warnings = 1;
      else
	return 0;
      break;

    case 'W':
      if (arg[1] == 0)
	{
	  extra_warnings = 1;
	  /* We save the value of warn_uninitialized, since if they put
	     -Wuninitialized on the command line, we need to generate a
	     warning about not using it without also specifying -O.  */
	  if (warn_uninitialized != 1)
	    warn_uninitialized = 2;
	}
      else
	return decode_W_option (arg + 1);
      break;

    case 'a':
      if (!strncmp (arg, "aux-info", 8))
	{
	  if (arg[8] == '\0')
	    {
	      if (argc == 1)
		return 0;

	      aux_info_file_name = argv[1];
	      flag_gen_aux_info = 1;
	      return 2;
	    }
	  else if (arg[8] == '=')
	    {
	      aux_info_file_name = arg + 9;
	      flag_gen_aux_info = 1;
	    }
	  else
	    return 0;
	}
      else
	return 0;
      break;

    case 'o':
      if (arg[1] == 0)
	{
	  if (argc == 1)
	    return 0;

	  asm_file_name = argv[1];
	  return 2;
	}
      return 0;

    case 'G':
      {
	int g_switch_val;
	int return_val;

	if (arg[1] == 0)
	  {
	    if (argc == 1)
	      return 0;

	    g_switch_val = read_integral_parameter (argv[1], 0, -1);
	    return_val = 2;
	  }
	else
	  {
	    g_switch_val = read_integral_parameter (arg + 1, 0, -1);
	    return_val = 1;
	  }

	if (g_switch_val == -1)
	  return_val = 0;
	else
	  {
	    g_switch_set = TRUE;
	    g_switch_value = g_switch_val;
	  }

	return return_val;
      }
    }

  return 1;
}
