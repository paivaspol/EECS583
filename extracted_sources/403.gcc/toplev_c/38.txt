static int
decode_f_option (arg)
     const char *arg;
{
  int j;
  const char *option_value = NULL;

  /* Search for the option in the table of binary f options.  */
  for (j = ARRAY_SIZE (f_options); j--;)
    {
      if (!strcmp (arg, f_options[j].string))
	{
	  *f_options[j].variable = f_options[j].on_value;
	  return 1;
	}

      if (arg[0] == 'n' && arg[1] == 'o' && arg[2] == '-'
	  && ! strcmp (arg + 3, f_options[j].string))
	{
	  *f_options[j].variable = ! f_options[j].on_value;
	  return 1;
	}
    }

  if (!strcmp (arg, "fast-math"))
    set_fast_math_flags ();
  else if (!strcmp (arg, "no-fast-math"))
    set_no_fast_math_flags ();
  else if ((option_value = skip_leading_substring (arg, "inline-limit-"))
	   || (option_value = skip_leading_substring (arg, "inline-limit=")))
    {
      int val =
	read_integral_parameter (option_value, arg - 2,
				 MAX_INLINE_INSNS);
      set_param_value ("max-inline-insns", val);
    }
#ifdef INSN_SCHEDULING
  else if ((option_value = skip_leading_substring (arg, "sched-verbose=")))
    fix_sched_param ("verbose", option_value);
#endif
  else if ((option_value = skip_leading_substring (arg, "fixed-")))
    fix_register (option_value, 1, 1);
  else if ((option_value = skip_leading_substring (arg, "call-used-")))
    fix_register (option_value, 0, 1);
  else if ((option_value = skip_leading_substring (arg, "call-saved-")))
    fix_register (option_value, 0, 0);
  else if ((option_value = skip_leading_substring (arg, "align-loops=")))
    align_loops = read_integral_parameter (option_value, arg - 2, align_loops);
  else if ((option_value = skip_leading_substring (arg, "align-functions=")))
    align_functions
      = read_integral_parameter (option_value, arg - 2, align_functions);
  else if ((option_value = skip_leading_substring (arg, "align-jumps=")))
    align_jumps = read_integral_parameter (option_value, arg - 2, align_jumps);
  else if ((option_value = skip_leading_substring (arg, "align-labels=")))
    align_labels
      = read_integral_parameter (option_value, arg - 2, align_labels);
  else if ((option_value
	    = skip_leading_substring (arg, "stack-limit-register=")))
    {
      int reg = decode_reg_name (option_value);
      if (reg < 0)
	error ("unrecognized register name `%s'", option_value);
      else
	stack_limit_rtx = gen_rtx_REG (Pmode, reg);
    }
  else if ((option_value
	    = skip_leading_substring (arg, "stack-limit-symbol=")))
    {
      const char *nm;
      nm = ggc_strdup (option_value);
      stack_limit_rtx = gen_rtx_SYMBOL_REF (Pmode, nm);
    }
  else if ((option_value
            = skip_leading_substring (arg, "message-length=")))
    output_set_maximum_length
      (&global_dc->buffer, read_integral_parameter
       (option_value, arg - 2, diagnostic_line_cutoff (global_dc)));
  else if ((option_value
	    = skip_leading_substring (arg, "diagnostics-show-location=")))
    {
      if (!strcmp (option_value, "once"))
        diagnostic_prefixing_rule (global_dc) = DIAGNOSTICS_SHOW_PREFIX_ONCE;
      else if (!strcmp (option_value, "every-line"))
        diagnostic_prefixing_rule (global_dc)
          = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;
      else
	error ("unrecognized option `%s'", arg - 2);
    }
  else if (!strcmp (arg, "no-stack-limit"))
    stack_limit_rtx = NULL_RTX;
  else if (!strcmp (arg, "preprocessed"))
    /* Recognise this switch but do nothing.  This prevents warnings
       about an unrecognized switch if cpplib has not been linked in.  */
    ;
  else
    return 0;

  return 1;
}
