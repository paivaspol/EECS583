static const lang_independent_options f_options[] =
{
  {"eliminate-dwarf2-dups", &flag_eliminate_dwarf2_dups, 1,
   N_("Perform DWARF2 duplicate elimination") },
  {"float-store", &flag_float_store, 1,
   N_("Do not store floats in registers") },
  {"volatile", &flag_volatile, 1,
   N_("Consider all mem refs through pointers as volatile") },
  {"volatile-global", &flag_volatile_global, 1,
   N_("Consider all mem refs to global data to be volatile") },
  {"volatile-static", &flag_volatile_static, 1,
   N_("Consider all mem refs to static data to be volatile") },
  {"defer-pop", &flag_defer_pop, 1,
   N_("Defer popping functions args from stack until later") },
  {"omit-frame-pointer", &flag_omit_frame_pointer, 1,
   N_("When possible do not generate stack frames") },
  {"optimize-sibling-calls", &flag_optimize_sibling_calls, 1,
   N_("Optimize sibling and tail recursive calls") },
  {"cse-follow-jumps", &flag_cse_follow_jumps, 1,
   N_("When running CSE, follow jumps to their targets") },
  {"cse-skip-blocks", &flag_cse_skip_blocks, 1,
   N_("When running CSE, follow conditional jumps") },
  {"expensive-optimizations", &flag_expensive_optimizations, 1,
   N_("Perform a number of minor, expensive optimizations") },
  {"thread-jumps", &flag_thread_jumps, 1,
   N_("Perform jump threading optimizations") },
  {"strength-reduce", &flag_strength_reduce, 1,
   N_("Perform strength reduction optimizations") },
  {"unroll-loops", &flag_unroll_loops, 1,
   N_("Perform loop unrolling when iteration count is known") },
  {"unroll-all-loops", &flag_unroll_all_loops, 1,
   N_("Perform loop unrolling for all loops") },
  {"prefetch-loop-arrays", &flag_prefetch_loop_arrays, 1,
   N_("Generate prefetch instructions, if available, for arrays in loops") },
  {"move-all-movables", &flag_move_all_movables, 1,
   N_("Force all loop invariant computations out of loops") },
  {"reduce-all-givs", &flag_reduce_all_givs, 1,
   N_("Strength reduce all loop general induction variables") },
  {"writable-strings", &flag_writable_strings, 1,
   N_("Store strings in writable data section") },
  {"peephole", &flag_no_peephole, 0,
   N_("Enable machine specific peephole optimizations") },
  {"force-mem", &flag_force_mem, 1,
   N_("Copy memory operands into registers before using") },
  {"force-addr", &flag_force_addr, 1,
   N_("Copy memory address constants into regs before using") },
  {"function-cse", &flag_no_function_cse, 0,
   N_("Allow function addresses to be held in registers") },
  {"inline-functions", &flag_inline_functions, 1,
   N_("Integrate simple functions into their callers") },
  {"keep-inline-functions", &flag_keep_inline_functions, 1,
   N_("Generate code for funcs even if they are fully inlined") },
  {"inline", &flag_no_inline, 0,
   N_("Pay attention to the 'inline' keyword") },
  {"keep-static-consts", &flag_keep_static_consts, 1,
   N_("Emit static const variables even if they are not used") },
  {"syntax-only", &flag_syntax_only, 1,
   N_("Check for syntax errors, then stop") },
  {"shared-data", &flag_shared_data, 1,
   N_("Mark data as shared rather than private") },
  {"caller-saves", &flag_caller_saves, 1,
   N_("Enable saving registers around function calls") },
  {"pcc-struct-return", &flag_pcc_struct_return, 1,
   N_("Return 'short' aggregates in memory, not registers") },
  {"reg-struct-return", &flag_pcc_struct_return, 0,
   N_("Return 'short' aggregates in registers") },
  {"delayed-branch", &flag_delayed_branch, 1,
   N_("Attempt to fill delay slots of branch instructions") },
  {"gcse", &flag_gcse, 1,
   N_("Perform the global common subexpression elimination") },
  {"gcse-lm", &flag_gcse_lm, 1,
   N_("Perform enhanced load motion during global subexpression elimination") },
  {"gcse-sm", &flag_gcse_sm, 1,
   N_("Perform store motion after global subexpression elimination") },
  {"rerun-cse-after-loop", &flag_rerun_cse_after_loop, 1,
   N_("Run CSE pass after loop optimizations") },
  {"rerun-loop-opt", &flag_rerun_loop_opt, 1,
   N_("Run the loop optimizer twice") },
  {"delete-null-pointer-checks", &flag_delete_null_pointer_checks, 1,
   N_("Delete useless null pointer checks") },
  {"pretend-float", &flag_pretend_float, 1,
   N_("Pretend that host and target use the same FP format") },
  {"schedule-insns", &flag_schedule_insns, 1,
   N_("Reschedule instructions before register allocation") },
  {"schedule-insns2", &flag_schedule_insns_after_reload, 1,
   N_("Reschedule instructions after register allocation") },
  {"sched-interblock",&flag_schedule_interblock, 1,
   N_("Enable scheduling across basic blocks") },
  {"sched-spec",&flag_schedule_speculative, 1,
   N_("Allow speculative motion of non-loads") },
  {"sched-spec-load",&flag_schedule_speculative_load, 1,
   N_("Allow speculative motion of some loads") },
  {"sched-spec-load-dangerous",&flag_schedule_speculative_load_dangerous, 1,
   N_("Allow speculative motion of more loads") },
  {"branch-count-reg",&flag_branch_on_count_reg, 1,
   N_("Replace add,compare,branch with branch on count reg") },
  {"pic", &flag_pic, 1,
   N_("Generate position independent code, if possible") },
  {"PIC", &flag_pic, 2, ""},
  {"exceptions", &flag_exceptions, 1,
   N_("Enable exception handling") },
  {"unwind-tables", &flag_unwind_tables, 1,
   N_("Just generate unwind tables for exception handling") },
  {"asynchronous-unwind-tables", &flag_asynchronous_unwind_tables, 1,
   N_("Generate unwind tables exact at each instruction boundary") },
  {"non-call-exceptions", &flag_non_call_exceptions, 1,
   N_("Support synchronous non-call exceptions") },
  {"profile-arcs", &profile_arc_flag, 1,
   N_("Insert arc based program profiling code") },
  {"test-coverage", &flag_test_coverage, 1,
   N_("Create data files needed by gcov") },
  {"branch-probabilities", &flag_branch_probabilities, 1,
   N_("Use profiling information for branch probabilities") },
  {"reorder-blocks", &flag_reorder_blocks, 1,
   N_("Reorder basic blocks to improve code placement") },
  {"rename-registers", &flag_rename_registers, 1,
   N_("Do the register renaming optimization pass") },
  {"cprop-registers", &flag_cprop_registers, 1,
   N_("Do the register copy-propagation optimization pass") },
  {"common", &flag_no_common, 0,
   N_("Do not put uninitialized globals in the common section") },
  {"inhibit-size-directive", &flag_inhibit_size_directive, 1,
   N_("Do not generate .size directives") },
  {"function-sections", &flag_function_sections, 1,
   N_("place each function into its own section") },
  {"data-sections", &flag_data_sections, 1,
   N_("place data items into their own section") },
  {"verbose-asm", &flag_verbose_asm, 1,
   N_("Add extra commentry to assembler output") },
  {"gnu-linker", &flag_gnu_linker, 1,
   N_("Output GNU ld formatted global initializers") },
  {"regmove", &flag_regmove, 1,
   N_("Enables a register move optimization") },
  {"optimize-register-move", &flag_regmove, 1,
   N_("Do the full regmove optimization pass") },
  {"pack-struct", &flag_pack_struct, 1,
   N_("Pack structure members together without holes") },
  {"stack-check", &flag_stack_check, 1,
   N_("Insert stack checking code into the program") },
  {"argument-alias", &flag_argument_noalias, 0,
   N_("Specify that arguments may alias each other & globals") },
  {"argument-noalias", &flag_argument_noalias, 1,
   N_("Assume arguments may alias globals but not each other") },
  {"argument-noalias-global", &flag_argument_noalias, 2,
   N_("Assume arguments do not alias each other or globals") },
  {"strict-aliasing", &flag_strict_aliasing, 1,
   N_("Assume strict aliasing rules apply") },
  {"align-loops", &align_loops, 0,
   N_("Align the start of loops") },
  {"align-jumps", &align_jumps, 0,
   N_("Align labels which are only reached by jumping") },
  {"align-labels", &align_labels, 0,
   N_("Align all labels") },
  {"align-functions", &align_functions, 0,
   N_("Align the start of functions") },
  {"merge-constants", &flag_merge_constants, 1,
   N_("Attempt to merge identical constants accross compilation units") },
  {"merge-all-constants", &flag_merge_constants, 2,
   N_("Attempt to merge identical constants and constant variables") },
  {"dump-unnumbered", &flag_dump_unnumbered, 1,
   N_("Suppress output of instruction numbers and line number notes in debugging dumps") },
  {"instrument-functions", &flag_instrument_function_entry_exit, 1,
   N_("Instrument function entry/exit with profiling calls") },
  {"ssa", &flag_ssa, 1,
   N_("Enable SSA optimizations") },
  {"ssa-ccp", &flag_ssa_ccp, 1,
   N_("Enable SSA conditional constant propagation") },
  {"ssa-dce", &flag_ssa_dce, 1,
   N_("Enable aggressive SSA dead code elimination") },
  {"leading-underscore", &flag_leading_underscore, 1,
   N_("External symbols have a leading underscore") },
  {"ident", &flag_no_ident, 0,
   N_("Process #ident directives") },
  { "peephole2", &flag_peephole2, 1,
   N_("Enables an rtl peephole pass run before sched2") },
  { "guess-branch-probability", &flag_guess_branch_prob, 1,
   N_("Enables guessing of branch probabilities") },
  {"math-errno", &flag_errno_math, 1,
   N_("Set errno after built-in math functions") },
  {"trapping-math", &flag_trapping_math, 1,
   N_("Floating-point operations can trap") },
  {"unsafe-math-optimizations", &flag_unsafe_math_optimizations, 1,
   N_("Allow math optimizations that may violate IEEE or ANSI standards") },
  {"bounded-pointers", &flag_bounded_pointers, 1,
   N_("Compile pointers as triples: value, base & end") },
  {"bounds-check", &flag_bounds_check, 1,
   N_("Generate code to check bounds before dereferencing pointers and arrays") },
  {"single-precision-constant", &flag_single_precision_constant, 1,
   N_("Convert floating point constant to single precision constant") },
  {"time-report", &time_report, 1,
   N_("Report time taken by each compiler pass at end of run") },
  {"mem-report", &mem_report, 1,
   N_("Report on permanent memory allocation at end of run") },
  { "trapv", &flag_trapv, 1,
   N_("Trap for signed overflow in addition / subtraction / multiplication") },
};
