static void
display_help ()
{
  int undoc;
  unsigned long i;
  const char *lang;

  printf (_("  -ffixed-<register>      Mark <register> as being unavailable to the compiler\n"));
  printf (_("  -fcall-used-<register>  Mark <register> as being corrupted by function calls\n"));
  printf (_("  -fcall-saved-<register> Mark <register> as being preserved across functions\n"));
  printf (_("  -finline-limit=<number> Limits the size of inlined functions to <number>\n"));
  printf (_("  -fmessage-length=<number> Limits diagnostics messages lengths to <number> characters per line.  0 suppresses line-wrapping\n"));
  printf (_("  -fdiagnostics-show-location=[once | every-line] Indicates how often source location information should be emitted, as prefix, at the beginning of diagnostics when line-wrapping\n"));

  for (i = ARRAY_SIZE (f_options); i--;)
    {
      const char *description = f_options[i].description;

      if (description != NULL && * description != 0)
	printf ("  -f%-21s %s\n",
		f_options[i].string, _(description));
    }

  printf (_("  -O[number]              Set optimization level to [number]\n"));
  printf (_("  -Os                     Optimize for space rather than speed\n"));
  for (i = LAST_PARAM; i--;)
    {
      const char *description = compiler_params[i].help;
      const int length = 21-strlen(compiler_params[i].option);

      if (description != NULL && * description != 0)
	printf ("  --param %s=<value>%.*s%s\n",
		compiler_params[i].option,
		length > 0 ? length : 1, "                     ",
		_(description));
    }
  printf (_("  -pedantic               Issue warnings needed by strict compliance to ISO C\n"));
  printf (_("  -pedantic-errors        Like -pedantic except that errors are produced\n"));
  printf (_("  -w                      Suppress warnings\n"));
  printf (_("  -W                      Enable extra warnings\n"));

  for (i = ARRAY_SIZE (W_options); i--;)
    {
      const char *description = W_options[i].description;

      if (description != NULL && * description != 0)
	printf ("  -W%-21s %s\n",
		W_options[i].string, _(description));
    }

  printf (_("  -Wunused                Enable unused warnings\n"));
  printf (_("  -Wlarger-than-<number>  Warn if an object is larger than <number> bytes\n"));
  printf (_("  -p                      Enable function profiling\n"));
  printf (_("  -o <file>               Place output into <file> \n"));
  printf (_("\
  -G <number>             Put global and static data smaller than <number>\n\
                          bytes into a special section (on some targets)\n"));

  for (i = ARRAY_SIZE (debug_args); i--;)
    {
      if (debug_args[i].description != NULL)
	printf ("  -g%-21s %s\n",
		debug_args[i].arg, _(debug_args[i].description));
    }

  printf (_("  -aux-info <file>        Emit declaration info into <file>\n"));
  printf (_("  -quiet                  Do not display functions compiled or elapsed time\n"));
  printf (_("  -version                Display the compiler's version\n"));
  printf (_("  -d[letters]             Enable dumps from specific passes of the compiler\n"));
  printf (_("  -dumpbase <file>        Base name to be used for dumps from specific passes\n"));
#if defined INSN_SCHEDULING
  printf (_("  -fsched-verbose=<number> Set the verbosity level of the scheduler\n"));
#endif
  printf (_("  --help                  Display this information\n"));

  undoc = 0;
  lang  = "language";

  /* Display descriptions of language specific options.
     If there is no description, note that there is an undocumented option.
     If the description is empty, do not display anything.  (This allows
     options to be deliberately undocumented, for whatever reason).
     If the option string is missing, then this is a marker, indicating
     that the description string is in fact the name of a language, whose
     language specific options are to follow.  */

  if (ARRAY_SIZE (documented_lang_options) > 1)
    {
      printf (_("\nLanguage specific options:\n"));

      for (i = 0; i < ARRAY_SIZE (documented_lang_options); i++)
	{
	  const char *description = documented_lang_options[i].description;
	  const char *option      = documented_lang_options[i].option;

	  if (description == NULL)
	    {
	      undoc = 1;

	      if (extra_warnings)
		printf (_("  %-23.23s [undocumented]\n"), option);
	    }
	  else if (*description == 0)
	    continue;
	  else if (option == NULL)
	    {
	      if (undoc)
		printf
		  (_("\nThere are undocumented %s specific options as well.\n"),
			lang);
	      undoc = 0;

	      printf (_("\n Options for %s:\n"), description);

	      lang = description;
	    }
	  else
	    printf ("  %-23.23s %s\n", option, _(description));
	}
    }

  if (undoc)
    printf (_("\nThere are undocumented %s specific options as well.\n"),
	    lang);

  display_target_options ();
}
