static partition
compute_coalesced_reg_partition ()
{
  int bb;
  int changed = 0;
  regset_head phi_set_head;
  regset phi_set = &phi_set_head;

  partition p = 
    partition_new (ssa_definition->num_elements);

  /* The first priority is to make sure registers that might have to
     be copied on abnormal critical edges are placed in the same
     partition.  This saves us from having to split abnormal critical
     edges (which can't be done).  */
  for (bb = n_basic_blocks; --bb >= 0; )
    make_regs_equivalent_over_bad_edges (bb, p);

  INIT_REG_SET (phi_set);

  do
    {
      conflict_graph conflicts;

      changed = 0;

      /* Build the set of registers involved in phi nodes, either as
	 arguments to the phi function or as the target of a set.  */
      CLEAR_REG_SET (phi_set);
      mark_phi_and_copy_regs (phi_set);

      /* Compute conflicts.  */
      conflicts = conflict_graph_compute (phi_set, p);

      /* FIXME: Better would be to process most frequently executed
	 blocks first, so that most frequently executed copies would
	 be more likely to be removed by register coalescing.  But any
	 order will generate correct, if non-optimal, results.  */
      for (bb = n_basic_blocks; --bb >= 0; )
	{
	  basic_block block = BASIC_BLOCK (bb);
	  changed += coalesce_regs_in_copies (block, p, conflicts);
	  changed += 
	    coalesce_regs_in_successor_phi_nodes (block, p, conflicts);
	}

      conflict_graph_delete (conflicts);
    }
  while (changed > 0);

  FREE_REG_SET (phi_set);

  return p;
}
