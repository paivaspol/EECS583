static int
expr_killed_p (x, bb)
     rtx x;
     basic_block bb;
{
  int i, j;
  enum rtx_code code;
  const char *fmt;

  if (x == 0)
    return 1;

  code = GET_CODE (x);
  switch (code)
    {
    case REG:
      return TEST_BIT (reg_set_in_block[bb->index], REGNO (x));

    case MEM:
      if (load_killed_in_block_p (bb, get_max_uid () + 1, x, 0))
	return 1;
      else
	return expr_killed_p (XEXP (x, 0), bb);

    case PC:
    case CC0: /*FIXME*/
    case CONST:
    case CONST_INT:
    case CONST_DOUBLE:
    case CONST_VECTOR:
    case SYMBOL_REF:
    case LABEL_REF:
    case ADDR_VEC:
    case ADDR_DIFF_VEC:
      return 0;

    default:
      break;
    }

  for (i = GET_RTX_LENGTH (code) - 1, fmt = GET_RTX_FORMAT (code); i >= 0; i--)
    {
      if (fmt[i] == 'e')
	{
	  /* If we are about to do the last recursive call
	     needed at this level, change it into iteration.
	     This function is called enough to be worth it.  */
	  if (i == 0)
	    return expr_killed_p (XEXP (x, i), bb);
	  else if (expr_killed_p (XEXP (x, i), bb))
	    return 1;
	}
      else if (fmt[i] == 'E')
	for (j = 0; j < XVECLEN (x, i); j++)
	  if (expr_killed_p (XVECEXP (x, i, j), bb))
	    return 1;
    }

  return 0;
}
