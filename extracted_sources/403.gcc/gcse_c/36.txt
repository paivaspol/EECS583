static void
compute_hash_table (set_p)
     int set_p;
{
  unsigned int i;

  /* While we compute the hash table we also compute a bit array of which
     registers are set in which blocks.
     ??? This isn't needed during const/copy propagation, but it's cheap to
     compute.  Later.  */
  sbitmap_vector_zero (reg_set_in_block, n_basic_blocks);

  /* re-Cache any INSN_LIST nodes we have allocated.  */
  clear_modify_mem_tables ();
  /* Some working arrays used to track first and last set in each block.  */
  reg_avail_info = (struct reg_avail_info*)
    gmalloc (max_gcse_regno * sizeof (struct reg_avail_info));

  for (i = 0; i < max_gcse_regno; ++i)
    reg_avail_info[i].last_bb = NEVER_SET;

  for (current_bb = 0; current_bb < n_basic_blocks; current_bb++)
    {
      rtx insn;
      unsigned int regno;
      int in_libcall_block;

      /* First pass over the instructions records information used to
	 determine when registers and memory are first and last set.
	 ??? hard-reg reg_set_in_block computation
	 could be moved to compute_sets since they currently don't change.  */

      for (insn = BLOCK_HEAD (current_bb);
	   insn && insn != NEXT_INSN (BLOCK_END (current_bb));
	   insn = NEXT_INSN (insn))
	{
	  if (! INSN_P (insn))
	    continue;

	  if (GET_CODE (insn) == CALL_INSN)
	    {
	      bool clobbers_all = false;
#ifdef NON_SAVING_SETJMP 
	      if (NON_SAVING_SETJMP
		  && find_reg_note (insn, REG_SETJMP, NULL_RTX))
		clobbers_all = true;
#endif

	      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)
		if (clobbers_all
		    || TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))
		  record_last_reg_set_info (insn, regno);

	      mark_call (insn);
	    }

	  note_stores (PATTERN (insn), record_last_set_info, insn);
	}

      /* The next pass builds the hash table.  */

      for (insn = BLOCK_HEAD (current_bb), in_libcall_block = 0;
	   insn && insn != NEXT_INSN (BLOCK_END (current_bb));
	   insn = NEXT_INSN (insn))
	if (INSN_P (insn))
	  {
	    if (find_reg_note (insn, REG_LIBCALL, NULL_RTX))
              in_libcall_block = 1;
            else if (set_p && find_reg_note (insn, REG_RETVAL, NULL_RTX))
              in_libcall_block = 0;
            hash_scan_insn (insn, set_p, in_libcall_block);
            if (!set_p && find_reg_note (insn, REG_RETVAL, NULL_RTX))
              in_libcall_block = 0;
	  }
    }

  free (reg_avail_info);
  reg_avail_info = NULL;
}
