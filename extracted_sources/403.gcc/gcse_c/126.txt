static int
compute_store_table ()
{
  int bb, ret;
  unsigned regno;
  rtx insn, pat;

  max_gcse_regno = max_reg_num ();

  reg_set_in_block = (sbitmap *) sbitmap_vector_alloc (n_basic_blocks,
						       max_gcse_regno);
  sbitmap_vector_zero (reg_set_in_block, n_basic_blocks);
  pre_ldst_mems = 0;

  /* Find all the stores we care about.  */
  for (bb = 0; bb < n_basic_blocks; bb++)
    {
      regvec = & (reg_set_in_block[bb]);
      for (insn = BLOCK_END (bb);
	   insn && insn != PREV_INSN (BLOCK_HEAD (bb));
	   insn = PREV_INSN (insn))
	{
	  /* Ignore anything that is not a normal insn.  */
	  if (! INSN_P (insn))
	    continue;

	  if (GET_CODE (insn) == CALL_INSN)
	    {
	      bool clobbers_all = false;
#ifdef NON_SAVING_SETJMP 
	      if (NON_SAVING_SETJMP
		  && find_reg_note (insn, REG_SETJMP, NULL_RTX))
		clobbers_all = true;
#endif

	      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)
		if (clobbers_all
		    || TEST_HARD_REG_BIT (regs_invalidated_by_call, regno))
		  SET_BIT (reg_set_in_block[bb], regno);
	    }
	  
	  pat = PATTERN (insn);
	  note_stores (pat, reg_set_info, NULL);
	  
	  /* Now that we've marked regs, look for stores.  */
	  if (GET_CODE (pat) == SET)
	    find_moveable_store (insn);
	}
    }

  ret = enumerate_ldsts ();
  
  if (gcse_file)
    {
      fprintf (gcse_file, "Store Motion Expressions.\n");
      print_ldst_list (gcse_file);
    }
  
  return ret;
}
