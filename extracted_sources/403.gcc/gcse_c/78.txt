static int
try_replace_reg (from, to, insn)
     rtx from, to, insn;
{
  rtx note = find_reg_equal_equiv_note (insn);
  rtx src = 0;
  int success = 0;
  rtx set = single_set (insn);

  success = validate_replace_src (from, to, insn);

  /* If above failed and this is a single set, try to simplify the source of
     the set given our substitution.  We could perhaps try this for multiple
     SETs, but it probably won't buy us anything.  */
  if (!success && set != 0)
    {
      src = simplify_replace_rtx (SET_SRC (set), from, to);

      if (!rtx_equal_p (src, SET_SRC (set))
	  && validate_change (insn, &SET_SRC (set), src, 0))
	success = 1;
    }

  /* If we've failed to do replacement, have a single SET, and don't already
     have a note, add a REG_EQUAL note to not lose information.  */
  if (!success && note == 0 && set != 0)
    note = set_unique_reg_note (insn, REG_EQUAL, copy_rtx (src));

  /* If there is already a NOTE, update the expression in it with our
     replacement.  */
  else if (note != 0)
    XEXP (note, 0) = simplify_replace_rtx (XEXP (note, 0), from, to);

  /* REG_EQUAL may get simplified into register.
     We don't allow that. Remove that note. This code ought
     not to hapen, because previous code ought to syntetize
     reg-reg move, but be on the safe side.  */
  if (note && REG_P (XEXP (note, 0)))
    remove_note (insn, note);

  return success;
}
