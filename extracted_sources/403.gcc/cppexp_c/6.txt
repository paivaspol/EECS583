static struct op
lex (pfile, skip_evaluation)
     cpp_reader *pfile;
     int skip_evaluation;
{
  struct op op;
  const cpp_token *token = cpp_get_token (pfile);

  switch (token->type)
    {
    case CPP_NUMBER:
      return parse_number (pfile, token);

    case CPP_CHAR:
    case CPP_WCHAR:
      {
	unsigned int chars_seen;

	if (token->type == CPP_CHAR)
	  op.unsignedp = 0;
	else
	  op.unsignedp = WCHAR_UNSIGNED;
	op.op = CPP_NUMBER;
	op.value = cpp_interpret_charconst (pfile, token, 1, 0, &chars_seen);
	return op;
      }

    case CPP_STRING:
    case CPP_WSTRING:
      SYNTAX_ERROR ("string constants are not valid in #if");

    case CPP_OTHER:
      if (ISGRAPH (token->val.c))
	SYNTAX_ERROR2 ("invalid character '%c' in #if", token->val.c);
      else
	SYNTAX_ERROR2 ("invalid character '\\%03o' in #if", token->val.c);

    case CPP_NAME:
      if (token->val.node == pfile->spec_nodes.n_defined)
	return parse_defined (pfile);
      else if (CPP_OPTION (pfile, cplusplus)
	       && (token->val.node == pfile->spec_nodes.n_true
		   || token->val.node == pfile->spec_nodes.n_false))
	{
	  op.op = CPP_NUMBER;
	  op.unsignedp = 0;
	  op.value = (token->val.node == pfile->spec_nodes.n_true);

	  /* Warn about use of true or false in #if when pedantic
	     and stdbool.h has not been included.  */
	  if (CPP_PEDANTIC (pfile)
	      && ! cpp_defined (pfile, DSC("__bool_true_false_are_defined")))
	    cpp_pedwarn (pfile, "ISO C++ does not permit \"%s\" in #if",
			 NODE_NAME (token->val.node));
	  return op;
	}
      else
	{
	  op.op = CPP_NUMBER;
	  op.unsignedp = 0;
	  op.value = 0;

	  if (CPP_OPTION (pfile, warn_undef) && !skip_evaluation)
	    cpp_warning (pfile, "\"%s\" is not defined",
			 NODE_NAME (token->val.node));
	  return op;
	}

    case CPP_HASH:
      {
	int temp;

	op.op = CPP_NUMBER;
	if (_cpp_test_assertion (pfile, &temp))
	  op.op = CPP_ERROR;
	op.unsignedp = 0;
	op.value = temp;
	return op;
      }

    default:
      if (((int) token->type > (int) CPP_EQ
	   && (int) token->type < (int) CPP_PLUS_EQ)
	  || token->type == CPP_EOF)
	{
	  op.op = token->type;
	  return op;
	}

      SYNTAX_ERROR2 ("\"%s\" is not valid in #if expressions",
		     cpp_token_as_text (pfile, token));
    }

 syntax_error:
  op.op = CPP_ERROR;
  return op;
}
