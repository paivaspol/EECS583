void
delete_trivially_dead_insns (insns, nreg, preserve_basic_blocks)
     rtx insns;
     int nreg;
     int preserve_basic_blocks;
{
  int *counts;
  rtx insn, prev;
  int i;
  int in_libcall = 0, dead_libcall = 0;
  basic_block bb;

  /* First count the number of times each register is used.  */
  counts = (int *) xcalloc (nreg, sizeof (int));
  for (insn = next_real_insn (insns); insn; insn = next_real_insn (insn))
    count_reg_usage (insn, counts, NULL_RTX, 1);

  /* Go from the last insn to the first and delete insns that only set unused
     registers or copy a register to itself.  As we delete an insn, remove
     usage counts for registers it uses.

     The first jump optimization pass may leave a real insn as the last
     insn in the function.   We must not skip that insn or we may end
     up deleting code that is not really dead.  */
  insn = get_last_insn ();
  if (! INSN_P (insn))
    insn = prev_real_insn (insn);

  if (!preserve_basic_blocks)
    for (; insn; insn = prev)
      {
	int live_insn = 0;

	prev = prev_real_insn (insn);

	/* Don't delete any insns that are part of a libcall block unless
	   we can delete the whole libcall block.

	   Flow or loop might get confused if we did that.  Remember
	   that we are scanning backwards.  */
	if (find_reg_note (insn, REG_RETVAL, NULL_RTX))
	  {
	    in_libcall = 1;
	    live_insn = 1;
	    dead_libcall = dead_libcall_p (insn);
	  }
	else if (in_libcall)
	  live_insn = ! dead_libcall;
	else
	  live_insn = insn_live_p (insn, counts);

	/* If this is a dead insn, delete it and show registers in it aren't
	   being used.  */

	if (! live_insn)
	  {
	    count_reg_usage (insn, counts, NULL_RTX, -1);
	    delete_related_insns (insn);
	  }

	if (find_reg_note (insn, REG_LIBCALL, NULL_RTX))
	  {
	    in_libcall = 0;
	    dead_libcall = 0;
	  }
      }
  else
    for (i = 0; i < n_basic_blocks; i++)
      for (bb = BASIC_BLOCK (i), insn = bb->end; insn != bb->head; insn = prev)
	{
	  int live_insn = 0;

	  prev = PREV_INSN (insn);
	  if (!INSN_P (insn))
	    continue;

	  /* Don't delete any insns that are part of a libcall block unless
	     we can delete the whole libcall block.

	     Flow or loop might get confused if we did that.  Remember
	     that we are scanning backwards.  */
	  if (find_reg_note (insn, REG_RETVAL, NULL_RTX))
	    {
	      in_libcall = 1;
	      live_insn = 1;
	      dead_libcall = dead_libcall_p (insn);
	    }
	  else if (in_libcall)
	    live_insn = ! dead_libcall;
	  else
	    live_insn = insn_live_p (insn, counts);

	  /* If this is a dead insn, delete it and show registers in it aren't
	     being used.  */

	  if (! live_insn)
	    {
	      count_reg_usage (insn, counts, NULL_RTX, -1);
	      delete_insn (insn);
	    }

	  if (find_reg_note (insn, REG_LIBCALL, NULL_RTX))
	    {
	      in_libcall = 0;
	      dead_libcall = 0;
	    }
	}

  /* Clean up.  */
  free (counts);
}
