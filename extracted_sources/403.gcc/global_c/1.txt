static int
allocno_compare (v1p, v2p)
     const PTR v1p;
     const PTR v2p;
{
  int v1 = *(const int *)v1p, v2 = *(const int *)v2p;
  /* Note that the quotient will never be bigger than
     the value of floor_log2 times the maximum number of
     times a register can occur in one insn (surely less than 100)
     weighted by the frequency (maximally REG_FREQ_MAX).
     Multiplying this by 10000/REG_FREQ_MAX can't overflow.  */
#ifdef SPEC_CPU
  int pri1
    = (((10000 / REG_FREQ_MAX) * allocno[v1].size * 
        (floor_log2 (allocno[v1].n_refs) * allocno[v1].freq)
       / allocno[v1].live_length));
  int pri2
    = (((10000 / REG_FREQ_MAX) * allocno[v2].size *
        (floor_log2 (allocno[v2].n_refs) * allocno[v2].freq)
       / allocno[v2].live_length));
#else
  int pri1
    = (((double) (floor_log2 (allocno[v1].n_refs) * allocno[v1].freq)
	/ allocno[v1].live_length)
       * (10000 / REG_FREQ_MAX) * allocno[v1].size);
  int pri2
    = (((double) (floor_log2 (allocno[v2].n_refs) * allocno[v2].freq)
	/ allocno[v2].live_length)
       * (10000 / REG_FREQ_MAX) * allocno[v2].size);
#endif
  if (pri2 - pri1)
    return pri2 - pri1;

  /* If regs are equally good, sort by allocno,
     so that the results of qsort leave nothing to chance.  */
  return v1 - v2;
}
