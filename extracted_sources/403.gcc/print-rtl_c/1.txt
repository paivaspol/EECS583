static void
print_rtx (in_rtx)
     rtx in_rtx;
{
  int i = 0;
  int j;
  const char *format_ptr;
  int is_insn;
  rtx tem;

  if (sawclose)
    {
      if (flag_simple)
	fputc (' ', outfile);
      else
	fprintf (outfile, "\n%s%*s", print_rtx_head, indent * 2, "");
      sawclose = 0;
    }

  if (in_rtx == 0)
    {
      fputs ("(nil)", outfile);
      sawclose = 1;
      return;
    }
  else if (GET_CODE (in_rtx) > NUM_RTX_CODE)
    {
       fprintf (outfile, "(??? bad code %d\n)", GET_CODE (in_rtx));
       sawclose = 1;
       return;
    }

  is_insn = INSN_P (in_rtx);

  /* When printing in VCG format we write INSNs, NOTE, LABEL, and BARRIER
     in separate nodes and therefore have to handle them special here.  */
  if (dump_for_graph
      && (is_insn || GET_CODE (in_rtx) == NOTE
	  || GET_CODE (in_rtx) == CODE_LABEL || GET_CODE (in_rtx) == BARRIER))
    {
      i = 3;
      indent = 0;
    }
  else
    {
      /* Print name of expression code.  */
      if (flag_simple && GET_CODE (in_rtx) == CONST_INT)
	fputc ('(', outfile);
      else
	fprintf (outfile, "(%s", GET_RTX_NAME (GET_CODE (in_rtx)));
      
      if (! flag_simple)
	{
	  if (in_rtx->in_struct)
	    fputs ("/s", outfile);

	  if (in_rtx->volatil)
	    fputs ("/v", outfile);
	  
	  if (in_rtx->unchanging)
	    fputs ("/u", outfile);
	  
	  if (in_rtx->integrated)
	    fputs ("/i", outfile);
	  
	  if (in_rtx->frame_related)
	    fputs ("/f", outfile);
	  
	  if (in_rtx->jump)
	    fputs ("/j", outfile);
	  
	  if (in_rtx->call)
	    fputs ("/c", outfile);

	  if (GET_MODE (in_rtx) != VOIDmode)
	    {
	      /* Print REG_NOTE names for EXPR_LIST and INSN_LIST.  */
	      if (GET_CODE (in_rtx) == EXPR_LIST 
		  || GET_CODE (in_rtx) == INSN_LIST)
		fprintf (outfile, ":%s",
			 GET_REG_NOTE_NAME (GET_MODE (in_rtx)));
	      else
		fprintf (outfile, ":%s", GET_MODE_NAME (GET_MODE (in_rtx)));
	    }
	}
    }

  /* Get the format string and skip the first elements if we have handled
     them already.  */
  format_ptr = GET_RTX_FORMAT (GET_CODE (in_rtx)) + i;
  for (; i < GET_RTX_LENGTH (GET_CODE (in_rtx)); i++)
    switch (*format_ptr++)
      {
	const char *str;

      case 'T':
	str = XTMPL (in_rtx, i);
	goto string;

      case 'S':
      case 's':
	str = XSTR (in_rtx, i);
      string:

	if (str == 0)
	  fputs (dump_for_graph ? " \\\"\\\"" : " \"\"", outfile);
	else
	  {
	    if (dump_for_graph)
	      fprintf (outfile, " (\\\"%s\\\")", str);
	    else
	      fprintf (outfile, " (\"%s\")", str);
	  }
	sawclose = 1;
	break;

	/* 0 indicates a field for internal use that should not be printed.
	   An exception is the third field of a NOTE, where it indicates
	   that the field has several different valid contents.  */
      case '0':
	if (i == 1 && GET_CODE (in_rtx) == REG)
	  {
	    if (REGNO (in_rtx) != ORIGINAL_REGNO (in_rtx))
	      fprintf (outfile, " [%d]", ORIGINAL_REGNO (in_rtx));
	    break;
	  }
	if (i == 3 && GET_CODE (in_rtx) == NOTE)
	  {
	    switch (NOTE_LINE_NUMBER (in_rtx))
	      {
	      case NOTE_INSN_EH_REGION_BEG:
	      case NOTE_INSN_EH_REGION_END:
		if (flag_dump_unnumbered)
		  fprintf (outfile, " #");
		else
		  fprintf (outfile, " %d", NOTE_EH_HANDLER (in_rtx));
		sawclose = 1;
		break;

	      case NOTE_INSN_BLOCK_BEG:
	      case NOTE_INSN_BLOCK_END:
		fprintf (outfile, " ");
		if (flag_dump_unnumbered)
		  fprintf (outfile, "#");
		else
		  fprintf (outfile, HOST_PTR_PRINTF, 
			   (char *) NOTE_BLOCK (in_rtx));
		sawclose = 1;
		break;

	      case NOTE_INSN_RANGE_BEG:
	      case NOTE_INSN_RANGE_END:
	      case NOTE_INSN_LIVE:
		indent += 2;
		if (!sawclose)
		  fprintf (outfile, " ");
		print_rtx (NOTE_RANGE_INFO (in_rtx));
		indent -= 2;
		break;

	      case NOTE_INSN_BASIC_BLOCK:
		{
		  basic_block bb = NOTE_BASIC_BLOCK (in_rtx);
		  if (bb != 0)
		    fprintf (outfile, " [bb %d]", bb->index);
		  break;
	        }

	      case NOTE_INSN_EXPECTED_VALUE:
		indent += 2;
		if (!sawclose)
		  fprintf (outfile, " ");
		print_rtx (NOTE_EXPECTED_VALUE (in_rtx));
		indent -= 2;
		break;

	      case NOTE_INSN_DELETED_LABEL:
		if (NOTE_SOURCE_FILE (in_rtx))
		  fprintf (outfile, " (\"%s\")", NOTE_SOURCE_FILE (in_rtx));
		else
		  fprintf (outfile, " \"\"");
		break;

	      default:
		{
		  const char * const str = X0STR (in_rtx, i);

		  if (NOTE_LINE_NUMBER (in_rtx) < 0)
		    ;
		  else if (str == 0)
		    fputs (dump_for_graph ? " \\\"\\\"" : " \"\"", outfile);
		  else
		    {
		      if (dump_for_graph)
		        fprintf (outfile, " (\\\"%s\\\")", str);
		      else
		        fprintf (outfile, " (\"%s\")", str);
		    }
		  break;
		}
	      }
	  }
	break;

      case 'e':
      do_e:
	indent += 2;
	if (!sawclose)
	  fprintf (outfile, " ");
	print_rtx (XEXP (in_rtx, i));
	indent -= 2;
	break;

      case 'E':
      case 'V':
	indent += 2;
	if (sawclose)
	  {
	    fprintf (outfile, "\n%s%*s",
                     print_rtx_head, indent * 2, "");
	    sawclose = 0;
	  }
	fputs ("[ ", outfile);
	if (NULL != XVEC (in_rtx, i))
	  {
	    indent += 2;
	    if (XVECLEN (in_rtx, i))
	      sawclose = 1;

	    for (j = 0; j < XVECLEN (in_rtx, i); j++)
	      print_rtx (XVECEXP (in_rtx, i, j));

	    indent -= 2;
	  }
	if (sawclose)
	  fprintf (outfile, "\n%s%*s", print_rtx_head, indent * 2, "");

	fputs ("] ", outfile);
	sawclose = 1;
	indent -= 2;
	break;

      case 'w':
	if (! flag_simple)
	  fprintf (outfile, " ");
	fprintf (outfile, HOST_WIDE_INT_PRINT_DEC, XWINT (in_rtx, i));
	if (! flag_simple)
	  {
	    fprintf (outfile, " [");
	    fprintf (outfile, HOST_WIDE_INT_PRINT_HEX, XWINT (in_rtx, i));
	    fprintf (outfile, "]");
	  }
	break;

      case 'i':
	if (i == 5 && GET_CODE (in_rtx) == NOTE)
	  {
	    /* This field is only used for NOTE_INSN_DELETED_LABEL, and
	       other times often contains garbage from INSN->NOTE death.  */
	    if (NOTE_LINE_NUMBER (in_rtx) == NOTE_INSN_DELETED_LABEL)
	      fprintf (outfile, " %d",  XINT (in_rtx, i));
	  }
	else
	  {
	    int value = XINT (in_rtx, i);
	    const char *name;

	    if (GET_CODE (in_rtx) == REG && value < FIRST_PSEUDO_REGISTER)
	      {
		fputc (' ', outfile);
		DEBUG_PRINT_REG (in_rtx, 0, outfile);
	      }
	    else if (GET_CODE (in_rtx) == REG
		     && value <= LAST_VIRTUAL_REGISTER)
	      {
		if (value == VIRTUAL_INCOMING_ARGS_REGNUM)
		  fprintf (outfile, " %d virtual-incoming-args", value);
		else if (value == VIRTUAL_STACK_VARS_REGNUM)
		  fprintf (outfile, " %d virtual-stack-vars", value);
		else if (value == VIRTUAL_STACK_DYNAMIC_REGNUM)
		  fprintf (outfile, " %d virtual-stack-dynamic", value);
		else if (value == VIRTUAL_OUTGOING_ARGS_REGNUM)
		  fprintf (outfile, " %d virtual-outgoing-args", value);
		else if (value == VIRTUAL_CFA_REGNUM)
		  fprintf (outfile, " %d virtual-cfa", value);
		else
		  fprintf (outfile, " %d virtual-reg-%d", value,
			   value-FIRST_VIRTUAL_REGISTER);
	      }
	    else if (flag_dump_unnumbered
		     && (is_insn || GET_CODE (in_rtx) == NOTE))
	      fputc ('#', outfile);
	    else
	      fprintf (outfile, " %d", value);

	    if (is_insn && &INSN_CODE (in_rtx) == &XINT (in_rtx, i)
		&& XINT (in_rtx, i) >= 0
		&& (name = get_insn_name (XINT (in_rtx, i))) != NULL)
	      fprintf (outfile, " {%s}", name);
	    sawclose = 0;
	  }
	break;

      /* Print NOTE_INSN names rather than integer codes.  */

      case 'n':
	if (XINT (in_rtx, i) >= (int) NOTE_INSN_BIAS
	    && XINT (in_rtx, i) < (int) NOTE_INSN_MAX)
	  fprintf (outfile, " %s", GET_NOTE_INSN_NAME (XINT (in_rtx, i)));
	else
	  fprintf (outfile, " %d", XINT (in_rtx, i));
	sawclose = 0;
	break;

      case 'u':
	if (XEXP (in_rtx, i) != NULL)
	  {
	    rtx sub = XEXP (in_rtx, i);
	    enum rtx_code subc = GET_CODE (sub);

	    if (GET_CODE (in_rtx) == LABEL_REF)
	      {
		if (subc == NOTE
		    && NOTE_LINE_NUMBER (sub) == NOTE_INSN_DELETED_LABEL)
		  {
		    if (flag_dump_unnumbered)
		      fprintf (outfile, " [# deleted]");
		    else
		      fprintf (outfile, " [%d deleted]", INSN_UID (sub));
		    sawclose = 0;
		    break;
		  }

		if (subc != CODE_LABEL)
		  goto do_e;
	      }

	    if (flag_dump_unnumbered)
	      fputs (" #", outfile);
	    else
	      fprintf (outfile, " %d", INSN_UID (sub));
	  }
	else
	  fputs (" 0", outfile);
	sawclose = 0;
	break;

      case 'b':
	if (XBITMAP (in_rtx, i) == NULL)
	  fputs (" {null}", outfile);
	else
	  bitmap_print (outfile, XBITMAP (in_rtx, i), " {", "}");
	sawclose = 0;
	break;

      case 't':
	putc (' ', outfile);
	fprintf (outfile, HOST_PTR_PRINTF, (char *) XTREE (in_rtx, i));
	break;

      case '*':
	fputs (" Unknown", outfile);
	sawclose = 0;
	break;

      default:
	fprintf (stderr,
		 "switch format wrong in rtl.print_rtx(). format was: %c.\n",
		 format_ptr[-1]);
	abort ();
      }

  switch (GET_CODE (in_rtx))
    {
    case MEM:
      fputs (" [", outfile);
      fprintf (outfile, HOST_WIDE_INT_PRINT_DEC, MEM_ALIAS_SET (in_rtx));

      if (MEM_EXPR (in_rtx))
	print_mem_expr (outfile, MEM_EXPR (in_rtx));

      if (MEM_OFFSET (in_rtx))
	{
	  fputc ('+', outfile);
	  fprintf (outfile, HOST_WIDE_INT_PRINT_DEC,
		   INTVAL (MEM_OFFSET (in_rtx)));
	}

      if (MEM_SIZE (in_rtx))
	{
	  fputs (" S", outfile);
	  fprintf (outfile, HOST_WIDE_INT_PRINT_DEC,
		   INTVAL (MEM_SIZE (in_rtx)));
	}

      if (MEM_ALIGN (in_rtx) != 1)
	fprintf (outfile, " A%u", MEM_ALIGN (in_rtx));

      fputc (']', outfile);
      break;

#if HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT && MAX_LONG_DOUBLE_TYPE_SIZE == 64
    case CONST_DOUBLE:
      if (FLOAT_MODE_P (GET_MODE (in_rtx)))
	{
	  double val;
	  REAL_VALUE_FROM_CONST_DOUBLE (val, in_rtx);
	  fprintf (outfile, " [%.16g]", val);
	}
      break;
#endif

    case CODE_LABEL:
      fprintf (outfile, " [%d uses]", LABEL_NUSES (in_rtx));
      if (LABEL_ALTERNATE_NAME (in_rtx))
        fprintf (outfile, " [alternate name: %s]",
		 LABEL_ALTERNATE_NAME (in_rtx));
      break;

    case CALL_PLACEHOLDER:
      if (debug_call_placeholder_verbose)
	{
	  fputs (" (cond [\n  (const_string \"normal\") (sequence [", outfile);
	  for (tem = XEXP (in_rtx, 0); tem != 0; tem = NEXT_INSN (tem))
	    {
	      fputs ("\n    ", outfile);
	      print_inline_rtx (outfile, tem, 4);
	    }

	  tem = XEXP (in_rtx, 1);
	  if (tem)
	    fputs ("\n    ])\n  (const_string \"tail_call\") (sequence [",
		   outfile);
	  for (; tem != 0; tem = NEXT_INSN (tem))
	    {
	      fputs ("\n    ", outfile);
	      print_inline_rtx (outfile, tem, 4);
	    }

	  tem = XEXP (in_rtx, 2);
	  if (tem)
	    fputs ("\n    ])\n  (const_string \"tail_recursion\") (sequence [",
		   outfile);
	  for (; tem != 0; tem = NEXT_INSN (tem))
	    {
	      fputs ("\n    ", outfile);
	      print_inline_rtx (outfile, tem, 4);
	    }

	  fputs ("\n    ])\n  ])", outfile);
	  break;
	}

      for (tem = XEXP (in_rtx, 0); tem != 0; tem = NEXT_INSN (tem))
	if (GET_CODE (tem) == CALL_INSN)
	  {
	    fprintf (outfile, " ");
	    print_rtx (tem);
	    break;
	  }
      break;

    default:
      break;
    }

  if (dump_for_graph
      && (is_insn || GET_CODE (in_rtx) == NOTE
	  || GET_CODE (in_rtx) == CODE_LABEL || GET_CODE (in_rtx) == BARRIER))
    sawclose = 0;
  else
    {
      fputc (')', outfile);
      sawclose = 1;
    }
}
