static void
ix86_osf_output_function_prologue (file, size)
     FILE *file;
     HOST_WIDE_INT size;
{
  const char *prefix = "";
  const char *const lprefix = LPREFIX;
  int labelno = current_function_profile_label_no;

#ifdef OSF_OS

  if (TARGET_UNDERSCORES)
    prefix = "_";

  if (current_function_profile && OSF_PROFILE_BEFORE_PROLOGUE)
    {
      if (!flag_pic && !HALF_PIC_P ())
	{
	  fprintf (file, "\tmovl $%sP%d,%%edx\n", lprefix, labelno);
	  fprintf (file, "\tcall *%s_mcount_ptr\n", prefix);
	}

      else if (HALF_PIC_P ())
	{
	  rtx symref;

	  HALF_PIC_EXTERNAL ("_mcount_ptr");
	  symref = HALF_PIC_PTR (gen_rtx_SYMBOL_REF (Pmode,
						     "_mcount_ptr"));

	  fprintf (file, "\tmovl $%sP%d,%%edx\n", lprefix, labelno);
	  fprintf (file, "\tmovl %s%s,%%eax\n", prefix,
		   XSTR (symref, 0));
	  fprintf (file, "\tcall *(%%eax)\n");
	}

      else
	{
	  static int call_no = 0;

	  fprintf (file, "\tcall %sPc%d\n", lprefix, call_no);
	  fprintf (file, "%sPc%d:\tpopl %%eax\n", lprefix, call_no);
	  fprintf (file, "\taddl $_GLOBAL_OFFSET_TABLE_+[.-%sPc%d],%%eax\n",
		   lprefix, call_no++);
	  fprintf (file, "\tleal %sP%d@GOTOFF(%%eax),%%edx\n",
		   lprefix, labelno);
	  fprintf (file, "\tmovl %s_mcount_ptr@GOT(%%eax),%%eax\n",
		   prefix);
	  fprintf (file, "\tcall *(%%eax)\n");
	}
    }

#else  /* !OSF_OS */

  if (current_function_profile && OSF_PROFILE_BEFORE_PROLOGUE)
    {
      if (!flag_pic)
	{
	  fprintf (file, "\tmovl $%sP%d,%%edx\n", lprefix, labelno);
	  fprintf (file, "\tcall *%s_mcount_ptr\n", prefix);
	}

      else
	{
	  static int call_no = 0;

	  fprintf (file, "\tcall %sPc%d\n", lprefix, call_no);
	  fprintf (file, "%sPc%d:\tpopl %%eax\n", lprefix, call_no);
	  fprintf (file, "\taddl $_GLOBAL_OFFSET_TABLE_+[.-%sPc%d],%%eax\n",
		   lprefix, call_no++);
	  fprintf (file, "\tleal %sP%d@GOTOFF(%%eax),%%edx\n",
		   lprefix, labelno);
	  fprintf (file, "\tmovl %s_mcount_ptr@GOT(%%eax),%%eax\n",
		   prefix);
	  fprintf (file, "\tcall *(%%eax)\n");
	}
    }
#endif /* !OSF_OS */

  function_prologue (file, size);
}
