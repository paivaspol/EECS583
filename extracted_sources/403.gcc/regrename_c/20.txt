static rtx
find_oldest_value_reg (class, reg, vd)
     enum reg_class class;
     rtx reg;
     struct value_data *vd;
{
  unsigned int regno = REGNO (reg);
  enum machine_mode mode = GET_MODE (reg);
  unsigned int i;

  /* If we are accessing REG in some mode other that what we set it in,
     make sure that the replacement is valid.  In particular, consider
	(set (reg:DI r11) (...))
	(set (reg:SI r9) (reg:SI r11))
	(set (reg:SI r10) (...))
	(set (...) (reg:DI r9))
     Replacing r9 with r11 is invalid.  */
  if (mode != vd->e[regno].mode)
    {
      if (HARD_REGNO_NREGS (regno, mode)
	  > HARD_REGNO_NREGS (regno, vd->e[regno].mode))
	return NULL_RTX;
    }

  for (i = vd->e[regno].oldest_regno; i != regno; i = vd->e[i].next_regno)
    if (TEST_HARD_REG_BIT (reg_class_contents[class], i)
	&& (vd->e[i].mode == mode
	    || mode_change_ok (vd->e[i].mode, mode, i)))
      {
	rtx new = gen_rtx_raw_REG (mode, i);
	ORIGINAL_REGNO (new) = ORIGINAL_REGNO (reg);
	return new;
      }

  return NULL_RTX;
}
