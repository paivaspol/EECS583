static rtx
expand_builtin_strcmp (exp, target, mode)
     tree exp;
     rtx target;
     enum machine_mode mode;
{
  tree arglist = TREE_OPERAND (exp, 1);
  tree arg1, arg2, len, len2, fn;
  const char *p1, *p2;

  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))
    return 0;

  arg1 = TREE_VALUE (arglist);
  arg2 = TREE_VALUE (TREE_CHAIN (arglist));

  p1 = c_getstr (arg1);
  p2 = c_getstr (arg2);

  if (p1 && p2)
    {
      const int i = strcmp (p1, p2);
      return (i < 0 ? constm1_rtx : (i > 0 ? const1_rtx : const0_rtx));
    }

  /* If either arg is "", return an expression corresponding to
     (*(const unsigned char*)arg1 - (const unsigned char*)arg2).  */
  if ((p1 && *p1 == '\0') || (p2 && *p2 == '\0'))
    {
      tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);
      tree cst_uchar_ptr_node = build_pointer_type (cst_uchar_node);
      tree ind1 =
	fold (build1 (CONVERT_EXPR, integer_type_node,
		      build1 (INDIRECT_REF, cst_uchar_node,
			      build1 (NOP_EXPR, cst_uchar_ptr_node, arg1))));
      tree ind2 =
	fold (build1 (CONVERT_EXPR, integer_type_node,
		      build1 (INDIRECT_REF, cst_uchar_node,
			      build1 (NOP_EXPR, cst_uchar_ptr_node, arg2))));
      tree result = fold (build (MINUS_EXPR, integer_type_node, ind1, ind2));
      return expand_expr (result, target, mode, EXPAND_NORMAL);
    }

  len = c_strlen (arg1);
  len2 = c_strlen (arg2);

  if (len)
    len = size_binop (PLUS_EXPR, ssize_int (1), len);

  if (len2)
    len2 = size_binop (PLUS_EXPR, ssize_int (1), len2);

  /* If we don't have a constant length for the first, use the length
     of the second, if we know it.  We don't require a constant for
     this case; some cost analysis could be done if both are available
     but neither is constant.  For now, assume they're equally cheap
     unless one has side effects.

     If both strings have constant lengths, use the smaller.  This
     could arise if optimization results in strcpy being called with
     two fixed strings, or if the code was machine-generated.  We should
     add some code to the `memcmp' handler below to deal with such
     situations, someday.  */

  if (!len || TREE_CODE (len) != INTEGER_CST)
    {
      if (len2 && !TREE_SIDE_EFFECTS (len2))
        len = len2;
      else if (len == 0)
        return 0;
    }
  else if (len2 && TREE_CODE (len2) == INTEGER_CST
           && tree_int_cst_lt (len2, len))
    len = len2;

  /* If both arguments have side effects, we cannot optimize.  */
  if (TREE_SIDE_EFFECTS (len))
    return 0;

  fn = built_in_decls[BUILT_IN_MEMCMP];
  if (!fn)
    return 0;

  chainon (arglist, build_tree_list (NULL_TREE, len));
  return expand_expr (build_function_call_expr (fn, arglist),
                      target, mode, EXPAND_NORMAL);
}
