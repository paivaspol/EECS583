static void
remove_fixup_regions ()
{
  int i;
  rtx insn, note;
  struct eh_region *fixup;

  /* Walk the insn chain and adjust the REG_EH_REGION numbers
     for instructions referencing fixup regions.  This is only
     strictly necessary for fixup regions with no parent, but
     doesn't hurt to do it for all regions.  */
  for (insn = get_insns(); insn ; insn = NEXT_INSN (insn))
    if (INSN_P (insn)
	&& (note = find_reg_note (insn, REG_EH_REGION, NULL))
	&& INTVAL (XEXP (note, 0)) > 0
	&& (fixup = cfun->eh->region_array[INTVAL (XEXP (note, 0))])
	&& fixup->type == ERT_FIXUP)
      {
	if (fixup->u.fixup.real_region)
	  XEXP (note, 0) = GEN_INT (fixup->u.fixup.real_region->region_number);
	else
	  remove_note (insn, note);
      }

  /* Remove the fixup regions from the tree.  */
  for (i = cfun->eh->last_region_number; i > 0; --i)
    {
      fixup = cfun->eh->region_array[i];
      if (! fixup)
	continue;

      /* Allow GC to maybe free some memory.  */
      if (fixup->type == ERT_CLEANUP)
        fixup->u.cleanup.exp = NULL_TREE;

      if (fixup->type != ERT_FIXUP)
	continue;

      if (fixup->inner)
	{
	  struct eh_region *parent, *p, **pp;

	  parent = fixup->u.fixup.real_region;

	  /* Fix up the children's parent pointers; find the end of
	     the list.  */
	  for (p = fixup->inner; ; p = p->next_peer)
	    {
	      p->outer = parent;
	      if (! p->next_peer)
		break;
	    }

	  /* In the tree of cleanups, only outer-inner ordering matters.
	     So link the children back in anywhere at the correct level.  */
	  if (parent)
	    pp = &parent->inner;
	  else
	    pp = &cfun->eh->region_tree;
	  p->next_peer = *pp;
	  *pp = fixup->inner;
	  fixup->inner = NULL;
	}

      remove_eh_handler (fixup);
    }
}
