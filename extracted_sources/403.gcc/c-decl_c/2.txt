int
c_decode_option (argc, argv)
     int argc ATTRIBUTE_UNUSED;
     char **argv;
{
  int strings_processed;
  char *p = argv[0];

  strings_processed = cpp_handle_option (parse_in, argc, argv, 0);

  if (!strcmp (p, "-ftraditional") || !strcmp (p, "-traditional"))
    {
      warning ("-traditional is deprecated and may be removed");
      flag_traditional = 1;
      flag_writable_strings = 1;
    }
  else if (!strcmp (p, "-fallow-single-precision"))
    flag_allow_single_precision = 1;
  else if (!strcmp (p, "-fhosted") || !strcmp (p, "-fno-freestanding"))
    {
      flag_hosted = 1;
      flag_no_builtin = 0;
    }
  else if (!strcmp (p, "-ffreestanding") || !strcmp (p, "-fno-hosted"))
    {
      flag_hosted = 0;
      flag_no_builtin = 1;
      /* warn_main will be 2 if set by -Wall, 1 if set by -Wmain */
      if (warn_main == 2)
	warn_main = 0;
    }
  else if (!strcmp (p, "-fnotraditional") || !strcmp (p, "-fno-traditional"))
    {
      flag_traditional = 0;
      flag_writable_strings = 0;
    }
  else if (!strncmp (p, "-std=", 5))
    {
      /* Select the appropriate language standard.  We currently
	 recognize:
	 -std=iso9899:1990	same as -ansi
	 -std=iso9899:199409	ISO C as modified in amend. 1
	 -std=iso9899:1999	ISO C 99
	 -std=c89		same as -std=iso9899:1990
	 -std=c99		same as -std=iso9899:1999
	 -std=gnu89		default, iso9899:1990 + gnu extensions
	 -std=gnu99		iso9899:1999 + gnu extensions
      */
      const char *const argstart = &p[5];

      if (!strcmp (argstart, "iso9899:1990")
	  || !strcmp (argstart, "c89"))
	{
	iso_1990:
	  flag_isoc94 = 0;
	iso_1994:
	  flag_traditional = 0;
	  flag_writable_strings = 0;
	  flag_no_asm = 1;
	  flag_no_nonansi_builtin = 1;
	  flag_noniso_default_format_attributes = 0;
	  flag_isoc99 = 0;
	}
      else if (!strcmp (argstart, "iso9899:199409"))
	{
	  flag_isoc94 = 1;
	  goto iso_1994;
	}
      else if (!strcmp (argstart, "iso9899:199x")
	       || !strcmp (argstart, "iso9899:1999")
	       || !strcmp (argstart, "c9x")
	       || !strcmp (argstart, "c99"))
	{
	  flag_traditional = 0;
	  flag_writable_strings = 0;
	  flag_no_asm = 1;
	  flag_no_nonansi_builtin = 1;
	  flag_noniso_default_format_attributes = 0;
	  flag_isoc99 = 1;
	  flag_isoc94 = 1;
	}
      else if (!strcmp (argstart, "gnu89"))
	{
	  flag_traditional = 0;
	  flag_writable_strings = 0;
	  flag_no_asm = 0;
	  flag_no_nonansi_builtin = 0;
	  flag_noniso_default_format_attributes = 1;
	  flag_isoc99 = 0;
	  flag_isoc94 = 0;
	}
      else if (!strcmp (argstart, "gnu9x") || !strcmp (argstart, "gnu99"))
	{
	  flag_traditional = 0;
	  flag_writable_strings = 0;
	  flag_no_asm = 0;
	  flag_no_nonansi_builtin = 0;
	  flag_noniso_default_format_attributes = 1;
	  flag_isoc99 = 1;
	  flag_isoc94 = 1;
	}
      else
	error ("unknown C standard `%s'", argstart);
    }
  else if (!strcmp (p, "-fdollars-in-identifiers"))
    dollars_in_ident = 1;
  else if (!strcmp (p, "-fno-dollars-in-identifiers"))
    dollars_in_ident = 0;
  else if (!strcmp (p, "-fsigned-char"))
    flag_signed_char = 1;
  else if (!strcmp (p, "-funsigned-char"))
    flag_signed_char = 0;
  else if (!strcmp (p, "-fno-signed-char"))
    flag_signed_char = 0;
  else if (!strcmp (p, "-fno-unsigned-char"))
    flag_signed_char = 1;
  else if (!strcmp (p, "-fsigned-bitfields")
	   || !strcmp (p, "-fno-unsigned-bitfields"))
    {
      flag_signed_bitfields = 1;
      explicit_flag_signed_bitfields = 1;
    }
  else if (!strcmp (p, "-funsigned-bitfields")
	   || !strcmp (p, "-fno-signed-bitfields"))
    {
      flag_signed_bitfields = 0;
      explicit_flag_signed_bitfields = 1;
    }
  else if (!strcmp (p, "-fshort-enums"))
    flag_short_enums = 1;
  else if (!strcmp (p, "-fno-short-enums"))
    flag_short_enums = 0;
  else if (!strcmp (p, "-fshort-wchar"))
    flag_short_wchar = 1;
  else if (!strcmp (p, "-fno-short-wchar"))
    flag_short_wchar = 0;
  else if (!strcmp (p, "-fcond-mismatch"))
    flag_cond_mismatch = 1;
  else if (!strcmp (p, "-fno-cond-mismatch"))
    flag_cond_mismatch = 0;
  else if (!strcmp (p, "-fshort-double"))
    flag_short_double = 1;
  else if (!strcmp (p, "-fno-short-double"))
    flag_short_double = 0;
  else if (!strcmp (p, "-fasm"))
    flag_no_asm = 0;
  else if (!strcmp (p, "-fno-asm"))
    flag_no_asm = 1;
  else if (!strcmp (p, "-fbuiltin"))
    flag_no_builtin = 0;
  else if (!strcmp (p, "-fno-builtin"))
    flag_no_builtin = 1;
  else if (!strncmp (p, "-fno-builtin-", strlen ("-fno-builtin-")))
    disable_builtin_function (p + strlen ("-fno-builtin-"));
  else if (p[0] == '-' && p[1] == 'f' && dump_switch_p (p + 2))
    ;
  else if (!strcmp (p, "-ansi"))
    goto iso_1990;
  else if (!strcmp (p, "-Werror-implicit-function-declaration"))
    mesg_implicit_function_declaration = 2;
  else if (!strcmp (p, "-Wimplicit-function-declaration"))
    mesg_implicit_function_declaration = 1;
  else if (!strcmp (p, "-Wno-implicit-function-declaration"))
    mesg_implicit_function_declaration = 0;
  else if (!strcmp (p, "-Wimplicit-int"))
    warn_implicit_int = 1;
  else if (!strcmp (p, "-Wno-implicit-int"))
    warn_implicit_int = 0;
  else if (!strcmp (p, "-Wimplicit"))
    {
      warn_implicit_int = 1;
      if (mesg_implicit_function_declaration != 2)
	mesg_implicit_function_declaration = 1;
    }
  else if (!strcmp (p, "-Wno-implicit"))
    warn_implicit_int = 0, mesg_implicit_function_declaration = 0;
  else if (!strcmp (p, "-Wlong-long"))
    warn_long_long = 1;
  else if (!strcmp (p, "-Wno-long-long"))
    warn_long_long = 0;
  else if (!strcmp (p, "-Wwrite-strings"))
    flag_const_strings = 1;
  else if (!strcmp (p, "-Wno-write-strings"))
    flag_const_strings = 0;
  else if (!strcmp (p, "-Wcast-qual"))
    warn_cast_qual = 1;
  else if (!strcmp (p, "-Wno-cast-qual"))
    warn_cast_qual = 0;
  else if (!strcmp (p, "-Wbad-function-cast"))
    warn_bad_function_cast = 1;
  else if (!strcmp (p, "-Wno-bad-function-cast"))
    warn_bad_function_cast = 0;
  else if (!strcmp (p, "-Wno-missing-noreturn"))
    warn_missing_noreturn = 0;
  else if (!strcmp (p, "-Wmissing-format-attribute"))
    warn_missing_format_attribute = 1;
  else if (!strcmp (p, "-Wno-missing-format-attribute"))
    warn_missing_format_attribute = 0;
  else if (!strcmp (p, "-Wpointer-arith"))
    warn_pointer_arith = 1;
  else if (!strcmp (p, "-Wno-pointer-arith"))
    warn_pointer_arith = 0;
  else if (!strcmp (p, "-Wstrict-prototypes"))
    warn_strict_prototypes = 1;
  else if (!strcmp (p, "-Wno-strict-prototypes"))
    warn_strict_prototypes = 0;
  else if (!strcmp (p, "-Wmissing-prototypes"))
    warn_missing_prototypes = 1;
  else if (!strcmp (p, "-Wno-missing-prototypes"))
    warn_missing_prototypes = 0;
  else if (!strcmp (p, "-Wmissing-declarations"))
    warn_missing_declarations = 1;
  else if (!strcmp (p, "-Wno-missing-declarations"))
    warn_missing_declarations = 0;
  else if (!strcmp (p, "-Wredundant-decls"))
    warn_redundant_decls = 1;
  else if (!strcmp (p, "-Wno-redundant-decls"))
    warn_redundant_decls = 0;
  else if (!strcmp (p, "-Wnested-externs"))
    warn_nested_externs = 1;
  else if (!strcmp (p, "-Wno-nested-externs"))
    warn_nested_externs = 0;
  else if (!strcmp (p, "-Wtraditional"))
    warn_traditional = 1;
  else if (!strcmp (p, "-Wno-traditional"))
    warn_traditional = 0;
  else if (!strncmp (p, "-Wformat=", 9))
    set_Wformat (atoi (p + 9));
  else if (!strcmp (p, "-Wformat"))
    set_Wformat (1);
  else if (!strcmp (p, "-Wno-format"))
    set_Wformat (0);
  else if (!strcmp (p, "-Wformat-y2k"))
    warn_format_y2k = 1;
  else if (!strcmp (p, "-Wno-format-y2k"))
    warn_format_y2k = 0;
  else if (!strcmp (p, "-Wformat-extra-args"))
    warn_format_extra_args = 1;
  else if (!strcmp (p, "-Wno-format-extra-args"))
    warn_format_extra_args = 0;
  else if (!strcmp (p, "-Wformat-nonliteral"))
    warn_format_nonliteral = 1;
  else if (!strcmp (p, "-Wno-format-nonliteral"))
    warn_format_nonliteral = 0;
  else if (!strcmp (p, "-Wformat-security"))
    warn_format_security = 1;
  else if (!strcmp (p, "-Wno-format-security"))
    warn_format_security = 0;
  else if (!strcmp (p, "-Wchar-subscripts"))
    warn_char_subscripts = 1;
  else if (!strcmp (p, "-Wno-char-subscripts"))
    warn_char_subscripts = 0;
  else if (!strcmp (p, "-Wconversion"))
    warn_conversion = 1;
  else if (!strcmp (p, "-Wno-conversion"))
    warn_conversion = 0;
  else if (!strcmp (p, "-Wparentheses"))
    warn_parentheses = 1;
  else if (!strcmp (p, "-Wno-parentheses"))
    warn_parentheses = 0;
  else if (!strcmp (p, "-Wreturn-type"))
    warn_return_type = 1;
  else if (!strcmp (p, "-Wno-return-type"))
    warn_return_type = 0;
  else if (!strcmp (p, "-Wsequence-point"))
    warn_sequence_point = 1;
  else if (!strcmp (p, "-Wno-sequence-point"))
    warn_sequence_point = 0;
  else if (!strcmp (p, "-Wcomment"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wno-comment"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wcomments"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wno-comments"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wtrigraphs"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wno-trigraphs"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wundef"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wno-undef"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wimport"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wno-import"))
    ; /* cpp handles this one.  */
  else if (!strcmp (p, "-Wmissing-braces"))
    warn_missing_braces = 1;
  else if (!strcmp (p, "-Wno-missing-braces"))
    warn_missing_braces = 0;
  else if (!strcmp (p, "-Wmain"))
    warn_main = 1;
  else if (!strcmp (p, "-Wno-main"))
    warn_main = -1;
  else if (!strcmp (p, "-Wsign-compare"))
    warn_sign_compare = 1;
  else if (!strcmp (p, "-Wno-sign-compare"))
    warn_sign_compare = 0;
  else if (!strcmp (p, "-Wfloat-equal"))
    warn_float_equal = 1;
  else if (!strcmp (p, "-Wno-float-equal"))
    warn_float_equal = 0;
  else if (!strcmp (p, "-Wmultichar"))
    warn_multichar = 1;
  else if (!strcmp (p, "-Wno-multichar"))
    warn_multichar = 0;
  else if (!strcmp (p, "-Wdiv-by-zero"))
    warn_div_by_zero = 1;
  else if (!strcmp (p, "-Wno-div-by-zero"))
    warn_div_by_zero = 0;
  else if (!strcmp (p, "-Wunknown-pragmas"))
    /* Set to greater than 1, so that even unknown pragmas in system
       headers will be warned about.  */
    warn_unknown_pragmas = 2;
  else if (!strcmp (p, "-Wno-unknown-pragmas"))
    warn_unknown_pragmas = 0;
  else if (!strcmp (p, "-Wall"))
    {
      /* We save the value of warn_uninitialized, since if they put
	 -Wuninitialized on the command line, we need to generate a
	 warning about not using it without also specifying -O.  */
      if (warn_uninitialized != 1)
	warn_uninitialized = 2;
      warn_implicit_int = 1;
      mesg_implicit_function_declaration = 1;
      warn_return_type = 1;
      set_Wunused (1);
      warn_switch = 1;
      set_Wformat (1);
      warn_char_subscripts = 1;
      warn_parentheses = 1;
      warn_sequence_point = 1;
      warn_missing_braces = 1;
      /* We set this to 2 here, but 1 in -Wmain, so -ffreestanding can turn
	 it off only if it's not explicit.  */
      warn_main = 2;
      /* Only warn about unknown pragmas that are not in system headers.  */
      warn_unknown_pragmas = 1;
    }
  else
    return strings_processed;

  return 1;
}
