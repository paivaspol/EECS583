void
expand_expr_stmt_value (exp, want_value, maybe_last)
     tree exp;
     int want_value, maybe_last;
{
  rtx value;
  tree type;

  if (want_value == -1)
    want_value = expr_stmts_for_value != 0;

  /* If -W, warn about statements with no side effects,
     except for an explicit cast to void (e.g. for assert()), and
     except for last statement in ({...}) where they may be useful.  */
  if (! want_value
      && (expr_stmts_for_value == 0 || ! maybe_last)
      && exp != error_mark_node)
    {
      if (! TREE_SIDE_EFFECTS (exp))
	{
	  if ((extra_warnings || warn_unused_value)
	      && !(TREE_CODE (exp) == CONVERT_EXPR
		   && VOID_TYPE_P (TREE_TYPE (exp))))
	    warning_with_file_and_line (emit_filename, emit_lineno,
				        "statement with no effect");
	}
      else if (warn_unused_value)
	warn_if_unused_value (exp);
    }

  /* If EXP is of function type and we are expanding statements for
     value, convert it to pointer-to-function.  */
  if (want_value && TREE_CODE (TREE_TYPE (exp)) == FUNCTION_TYPE)
    exp = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (exp)), exp);

  /* The call to `expand_expr' could cause last_expr_type and
     last_expr_value to get reset.  Therefore, we set last_expr_value
     and last_expr_type *after* calling expand_expr.  */
  value = expand_expr (exp, want_value ? NULL_RTX : const0_rtx,
		       VOIDmode, 0);
  type = TREE_TYPE (exp);

  /* If all we do is reference a volatile value in memory,
     copy it to a register to be sure it is actually touched.  */
  if (value && GET_CODE (value) == MEM && TREE_THIS_VOLATILE (exp))
    {
      if (TYPE_MODE (type) == VOIDmode)
	;
      else if (TYPE_MODE (type) != BLKmode)
	value = copy_to_reg (value);
      else
	{
	  rtx lab = gen_label_rtx ();

	  /* Compare the value with itself to reference it.  */
	  emit_cmp_and_jump_insns (value, value, EQ,
				   expand_expr (TYPE_SIZE (type),
						NULL_RTX, VOIDmode, 0),
				   BLKmode, 0, lab);
	  emit_label (lab);
	}
    }

  /* If this expression is part of a ({...}) and is in memory, we may have
     to preserve temporaries.  */
  preserve_temp_slots (value);

  /* Free any temporaries used to evaluate this expression.  Any temporary
     used as a result of this expression will already have been preserved
     above.  */
  free_temp_slots ();

  if (want_value)
    {
      last_expr_value = value;
      last_expr_type = type;
    }

  emit_queue ();
}
