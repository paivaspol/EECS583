void FinalizeRandomAccess()
{
  SyntaxElement sym;
  Bitstream *dest = seiRandomAccess.data;

  sym.type = SE_HEADER;
  sym.mapping = ue_linfo;

  sym.value1 = seiRandomAccess.recovery_point_flag;
  writeSyntaxElement2Buf_UVLC(&sym, dest);

  sym.bitpattern = seiRandomAccess.exact_match_flag;
  sym.len = 1;
  writeSyntaxElement2Buf_Fixed(&sym, dest);

  sym.bitpattern = seiRandomAccess.broken_link_flag;
  sym.len = 1;
  writeSyntaxElement2Buf_Fixed(&sym, dest);

// #define PRINT_RANDOM_ACCESS
#ifdef PRINT_RANDOM_ACCESS
  printf(" recovery_point_flag %d exact_match_flag %d broken_link_flag %d \n", seiRandomAccess.recovery_point_flag, seiRandomAccess.exact_match_flag, seiRandomAccess.broken_link_flag);
  printf(" %d %d \n", dest->byte_pos, dest->bits_to_go);
#endif
#ifdef PRINT_RANDOM_ACCESS
#undef PRINT_RANDOM_ACCESS
#endif
  // make sure the payload is byte aligned, stuff bits are 10..0
  if ( dest->bits_to_go != 8 )
  {
    (dest->byte_buf) <<= 1;
    dest->byte_buf |= 1;
    dest->bits_to_go--;
    if ( dest->bits_to_go != 0 ) (dest->byte_buf) <<= (dest->bits_to_go);
    dest->bits_to_go = 8;
    dest->streamBuffer[dest->byte_pos++]=dest->byte_buf;
    dest->byte_buf = 0;
  }
  seiRandomAccess.payloadSize = dest->byte_pos;
}
