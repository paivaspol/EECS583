int FmoInit(ImageParameters * img, pic_parameter_set_rbsp_t * pps, seq_parameter_set_rbsp_t * sps)
{
  
#ifdef PRINT_FMO_MAPS
  unsigned i,j;
  int bottom;
#endif
  
  int k;
  for (k=0;k<MAXSLICEGROUPIDS;k++)
    FirstMBInSlice[k] = -1;
  
  
  
  FmoGenerateMapUnitToSliceGroupMap(img, pps);
  FmoGenerateMBAmap(img, sps);
  
#ifdef PRINT_FMO_MAPS
  printf("\n");
  printf("FMO Map (Units):\n");
  
  for (j=0; j<img->PicHeightInMapUnits; j++)
  {
    for (i=0; i<img->PicWidthInMbs; i++)
    {
      printf("%d ",MapUnitToSliceGroupMap[i+j*img->PicWidthInMbs]);
    }
    printf("\n");
  }
  printf("\n");
  
  if(sps->mb_adaptive_frame_field_flag==0)
  {
    printf("FMO Map (Mb):\n");	
    for (j=0; j<(img->PicSizeInMbs/img->PicWidthInMbs); j++)
    {
      for (i=0; i<img->PicWidthInMbs; i++)
      {
        printf("%d ",MBAmap[i+j*img->PicWidthInMbs]);
      }
      printf("\n");
    }
    printf("\n");
  }
  else 
  {
    printf("FMO Map (Mb in scan order for MBAFF):\n");	
    for (j=0; j<(img->PicSizeInMbs/img->PicWidthInMbs); j++)
    {
      for (i=0; i<img->PicWidthInMbs; i++)
      {
        bottom=(j%2);
        printf("%d ",MBAmap[(j-bottom)*img->PicWidthInMbs+i*2+bottom]);
      }
      printf("\n");
      
    }
    printf("\n");
    
  }
  
#endif
  
  return 0;
}
