static int FmoGenerateMapUnitToSliceGroupMap (ImageParameters * img, pic_parameter_set_rbsp_t * pps)
{
  PicSizeInMapUnits = img->PicHeightInMapUnits * img->PicWidthInMbs;
  
  
  if (pps->slice_group_map_type == 6)
  {
    if ((pps->pic_size_in_map_units_minus1+1) != PicSizeInMapUnits)
    {
      error ("wrong pps->pic_size_in_map_units_minus1 for used SPS and FMO type 6", 500);
    }
  }
  
  // allocate memory for MapUnitToSliceGroupMap
  if (MapUnitToSliceGroupMap)
    free (MapUnitToSliceGroupMap);
  
  if ((MapUnitToSliceGroupMap = malloc ((PicSizeInMapUnits) * sizeof (byte))) == NULL)
  {
    printf ("cannot allocated %d bytes for MapUnitToSliceGroupMap, exit\n", PicSizeInMapUnits * sizeof (byte));
    exit (-1);
  }
  
  if (pps->num_slice_groups_minus1 == 0)    // only one slice group
  {
    memset (MapUnitToSliceGroupMap, 0,  PicSizeInMapUnits * sizeof (byte));
    return 0;
  }
  
  switch (pps->slice_group_map_type)
  {
  case 0:
    FmoGenerateType0MapUnitMap (img, pps);
    break;
  case 1:
    FmoGenerateType1MapUnitMap (img, pps);
    break;
  case 2:
    FmoGenerateType2MapUnitMap (img, pps);
    break;
  case 3:
    FmoGenerateType3MapUnitMap (img, pps);
    break;
  case 4:
    FmoGenerateType4MapUnitMap (img, pps);
    break;
  case 5:
    FmoGenerateType5MapUnitMap (img, pps);
    break;
  case 6:
    FmoGenerateType6MapUnitMap (img, pps);
    break;
  default:
    printf ("Illegal slice_group_map_type %d , exit \n", pps->slice_group_map_type);
    exit (-1);
  }
  return 0;
}
