void cmn (float32 **mfc, int32 varnorm, int32 n_frame, int32 veclen)
{
  /*    static float32 *mean = NULL; */ /*  */
  /*    static float32 *var = NULL;	*/ /*  */
    float32 *mfcp;
    float32 t;
    int32 i, f;

    /* assert ((n_frame > 0) && (veclen > 0)); */
    /* Added by PPK to prevent this assert from aborting Sphinx 3 */
    if ((n_frame <= 0) || (veclen <= 0)) {
        return;
    }
    
    if (cmn_mean == NULL)
	cmn_mean = (float32 *) ckd_calloc (veclen, sizeof (float32));

    /* Find mean cep vector for this utterance */
    for (i = 0; i < veclen; i++)
      cmn_mean[i] = 0.0;
    for (f = 0; f < n_frame; f++) {
	mfcp = mfc[f];
	for (i = 0; i < veclen; i++)
	    cmn_mean[i] += mfcp[i];
    }
    for (i = 0; i < veclen; i++)
	cmn_mean[i] /= n_frame;
    
    if (! varnorm) {
	/* Subtract mean from each cep vector */
	for (f = 0; f < n_frame; f++) {
	    mfcp = mfc[f];
	    for (i = 0; i < veclen; i++)
		mfcp[i] -= cmn_mean[i];
	}
    } else {
	/* Scale cep vectors to have unit variance along each dimension, and subtract means */
        if (cmn_var == NULL)
    	    cmn_var = (float32 *) ckd_calloc (veclen, sizeof (float32));
	
        for (i = 0; i < veclen; i++)
	    cmn_var[i] = 0.0;
	
        for (f = 0; f < n_frame; f++) {
    	    mfcp = mfc[f];
	    
	    for (i = 0; i < veclen; i++) {
                t = mfcp[i] - cmn_mean[i];
                cmn_var[i] += t * t;
            }
        }
        for (i = 0; i < veclen; i++) 
	  cmn_var[i] = (float32) sqrt ((float64) n_frame / cmn_var[i]); /* Inverse Std. Dev, RAH added type case from sqrt */

        for (f = 0; f < n_frame; f++) {
	    mfcp = mfc[f];
	    for (i = 0; i < veclen; i++)
	        mfcp[i] = (mfcp[i] - cmn_mean[i]) * cmn_var[i];
        }
    }
}
