static void arg_dump (FILE *fp, arg_t *defn, int32 doc)
{
    int32 *pos;
    int32 i, j, l, n;
    int32 namelen, deflen;
    const void *vp;
    
    /* Find max lengths of name and default value fields, and #entries in defn */
    n = arg_strlen (defn, &namelen, &deflen);
    namelen = namelen & 0xfffffff8;	/* Previous tab position */
    deflen = deflen & 0xfffffff8;	/* Previous tab position */

    fprintf (fp, "[NAME]");
    for (l = 6; l < namelen; l += 8)	/* strlen("[NAME]") */
	fprintf (fp, "\t");
    fprintf (fp, "\t[DEFLT]");
    for (l = 6; l < deflen; l += 8)	/* strlen("[DEFLT]") */
	fprintf (fp, "\t");
    fprintf (fp, "\t[VALUE]\n");
    
    /* Print current configuration, sorted by name */
    pos = arg_sort (defn, n);
    for (i = 0; i < n; i++) {
	j = pos[i];
	
	fprintf (fp, "%s", defn[j].name);
	for (l = strlen(defn[j].name); l < namelen; l += 8)
	    fprintf (fp, "\t");

	fprintf (fp, "\t");
	if (defn[j].deflt) {
	    fprintf (fp, "%s", defn[j].deflt);
	    l = strlen (defn[j].deflt);
	} else
	    l = 0;
	for (; l < deflen; l += 8)
	    fprintf (fp, "\t");
	
	fprintf (fp, "\t");
	if (doc) {
	    if (defn[j].doc)
		fprintf (fp, "%s", defn[j].doc);
	} else {
	    vp = cmd_ln_access (defn[j].name);
	    if (vp) {
		switch (defn[j].type) {
		case ARG_INT32:
		case REQARG_INT32:
		    fprintf (fp, "%d", *((int32 *) vp));
		    break;
		case ARG_FLOAT32:
		case REQARG_FLOAT32:
		    fprintf (fp, "%e", *((float32 *) vp));
		    break;
		case ARG_FLOAT64:
		case REQARG_FLOAT64:
		    fprintf (fp, "%e", *((float64 *) vp));
		    break;
		case ARG_STRING:
		case REQARG_STRING:
		    fprintf (fp, "%s", (char *)vp);
		    break;
		default: E_FATAL("Unknown argument type: %d\n", defn[j].type);
		}
	    }
	}
	
	fprintf (fp, "\n");
    }
    ckd_free (pos);
    
    fprintf (fp, "\n");
    fflush (fp);
}
