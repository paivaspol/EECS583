int32 hmm_vit_eval_5st (hmm_t *hmm, s3senid_t *senid, int32 *senscr)
{
    int32 s0, s1, s2, s3, s4, best, *tp;
    
    tp = hmm->tp[0];	/* Hack!!, use the knowledge that the 2-D tp is a contiguous block */
    
    /* 4 = max(2,3,4); */
    /*    s4 = hmm->state[4].score + tp[28];
    s3 = hmm->state[3].score + tp[22];
    s2 = hmm->state[2].score + tp[16];*/

    s4 = NO_UFLOW_ADD(hmm->state[4].score,tp[28]);
    s3 = NO_UFLOW_ADD(hmm->state[3].score,tp[22]);
    s2 = NO_UFLOW_ADD(hmm->state[2].score,tp[16]);

    if (s4 < s3) {
	if (s3 >= s2) {
	    s4 = s3;
	    hmm->state[4].history = hmm->state[3].history;
	} else {
	    s4 = s2;
	    hmm->state[4].history = hmm->state[2].history;
	}
    } else if (s4 < s2) {
	s4 = s2;
	hmm->state[4].history = hmm->state[2].history;
    }
    /*s4 += senscr[senid[4]];*/
    s4 = NO_UFLOW_ADD(s4,senscr[senid[4]]);
    hmm->state[4].score = s4;
    
    /* 3 = max(1,2,3); */
    /*s3 = hmm->state[3].score + tp[21];
    s2 = hmm->state[2].score + tp[15];
    s1 = hmm->state[1].score + tp[ 9];*/
    s3 = NO_UFLOW_ADD(hmm->state[3].score,tp[21]);
    s2 = NO_UFLOW_ADD(hmm->state[2].score, tp[15]);
    s1 = NO_UFLOW_ADD(hmm->state[1].score,tp[ 9]);
    if (s3 < s2) {
	if (s2 >= s1) {
	    s3 = s2;
	    hmm->state[3].history = hmm->state[2].history;
	} else {
	    s3 = s1;
	    hmm->state[3].history = hmm->state[1].history;
	}
    } else if (s3 < s1) {
	s3 = s1;
	hmm->state[3].history = hmm->state[1].history;
    }
    /*s3 += senscr[senid[3]];*/

    s3=NO_UFLOW_ADD(s3,senscr[senid[3]]);
    hmm->state[3].score = s3;
    
    best = (s4 > s3) ? s4 : s3;
    
    /* Exit state score */
    /*s4 += tp[29];
      s3 += tp[23];*/

    s4 = NO_UFLOW_ADD(s4,tp[29]);
    s3 = NO_UFLOW_ADD(s3,tp[23]);

    if (s4 < s3) {
	hmm->out.score = s3;
	hmm->out.history = hmm->state[3].history;
    } else {
	hmm->out.score = s4;
	hmm->out.history = hmm->state[4].history;
    }
    
    /* 2 = max(0,1,2); */
    /* s2 = hmm->state[2].score + tp[14];
    s1 = hmm->state[1].score + tp[ 8];
    s0 = hmm->state[0].score + tp[ 2];*/
    s2 = NO_UFLOW_ADD(hmm->state[2].score,tp[14]);
    s1 = NO_UFLOW_ADD(hmm->state[1].score,tp[ 8]);
    s0 = NO_UFLOW_ADD(hmm->state[0].score,tp[ 2]);
    if (s2 < s1) {
	if (s1 >= s0) {
	    s2 = s1;
	    hmm->state[2].history = hmm->state[1].history;
	} else {
	    s2 = s0;
	    hmm->state[2].history = hmm->state[0].history;
	}
    } else if (s2 < s0) {
	s2 = s0;
	hmm->state[2].history = hmm->state[0].history;
    }
    /*s2 += senscr[senid[2]];*/

    s2=NO_UFLOW_ADD(s2,senscr[senid[2]]);

    hmm->state[2].score = s2;
    if (best < s2)
	best = s2;
    
    /* 1 = max(0,1); */
    /*s1 = hmm->state[1].score + tp[ 7];
      s0 = hmm->state[0].score + tp[ 1];*/
    s1 = NO_UFLOW_ADD(hmm->state[1].score,tp[ 7]);
    s0 = NO_UFLOW_ADD(hmm->state[0].score,tp[ 1]);

    if (s1 < s0) {
	s1 = s0;
	hmm->state[1].history = hmm->state[0].history;
    }
    /*s1 += senscr[senid[1]];*/
    s1 = NO_UFLOW_ADD(s1,senscr[senid[1]]);
    hmm->state[1].score = s1;
    if (best < s1)
	best = s1;
    
    /* 0 = max(0,in); */
    /*s0 = hmm->state[0].score + tp[ 0];*/
    s0 = NO_UFLOW_ADD(hmm->state[0].score,tp[ 0]);
    
    if (s0 < hmm->in.score) {
	s0 = hmm->in.score;
	hmm->state[0].history = hmm->in.history;
    }
    /*s0 += senscr[senid[0]];*/
    s0 = NO_UFLOW_ADD(s0,senscr[senid[0]]);

    hmm->state[0].score = s0;
    if (best < s0)
	best = s0;
    
    hmm->in.score = S3_LOGPROB_ZERO;	/* Consumed */
    hmm->bestscore = best;
    
    return best;
}
