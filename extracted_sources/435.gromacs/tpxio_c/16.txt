static void do_tpx(int fp,bool bRead,int *step,real *t,real *lambda,
		   t_inputrec *ir,rvec *box,int *natoms,
		   rvec *x,rvec *v,rvec *f,t_topology *top)
{
  t_tpxheader tpx;
  t_inputrec  dum_ir;
  t_topology  dum_top;
   
  if (!bRead) {
    tpx.natoms = *natoms;
    tpx.step   = *step;
    tpx.t      = *t;
    tpx.lambda = *lambda;
    tpx.bIr  = (ir  != NULL);
    tpx.bTop = (top != NULL);
    tpx.bX   = (x   != NULL);
    tpx.bV   = (v   != NULL);
    tpx.bF   = (f   != NULL);
    tpx.bBox = (box != NULL);
  }

  do_tpxheader(fp,bRead,&tpx);

  if (bRead) {
    *natoms = tpx.natoms;
    *step   = tpx.step;
    *t      = tpx.t;
    *lambda = tpx.lambda;
  }
    
#define do_test(b,p) if (bRead && (p!=NULL) && !b) fatal_error(0,"No %s in %s",#p,gmx_fio_getname(fp)) 

  do_test(tpx.bBox,box);
  do_section(eitemBOX,bRead);
  if (tpx.bBox) ndo_rvec(box,DIM);

  do_test(tpx.bIr,ir);
  do_section(eitemIR,bRead);
  if (tpx.bIr) {
    if (ir)
      do_inputrec(ir,bRead);
    else {
      init_inputrec(&dum_ir);
      do_inputrec  (&dum_ir,bRead);
      done_inputrec(&dum_ir);
    }
  }
  do_test(tpx.bTop,top);
  do_section(eitemTOP,bRead);
  if (tpx.bTop) {
    if (top)
      do_top(top,bRead);
    else {
      do_top(&dum_top,bRead);
      done_top(&dum_top);
    }
  }
  do_test(tpx.bX,x);  
  do_section(eitemX,bRead);
  if (tpx.bX) ndo_rvec(x,*natoms);
  
  do_test(tpx.bV,v);
  do_section(eitemV,bRead);
  if (tpx.bV) ndo_rvec(v,*natoms);

  do_test(tpx.bF,f);
  do_section(eitemF,bRead);
  if (tpx.bF) ndo_rvec(f,*natoms);
}
