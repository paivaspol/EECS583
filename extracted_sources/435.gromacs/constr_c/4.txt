static void init_lincs(FILE *log,t_topology *top,t_inputrec *ir,
		       t_mdatoms *md,int start,int homenr,
		       int *nrtot,
		       rvec **r,int **bla1,int **bla2,int **blnr,int **blbnb,
		       real **bllen,real **blc,real **blcc,real **blm,
		       real **tmp1,real **tmp2,real **tmp3,
		       real **lincslam,real **bllen0,real **ddist)
{
  t_idef      *idef=&(top->idef);
  t_iatom     *iatom;
  int         i,j,k,n,b1,b,cen;
  int         ncons,nZeroLen;
  int         type,a1,a2,b2,nr,n1,n2,nc4;
  real        len=0,len1,sign;
  real        im1,im2;
  int         **at_c,*at_cn,*at_cm;
  
  ncons  = idef->il[F_SHAKE].nr/3;
  *nrtot = 0;
  
  if (ncons > 0) {

    iatom=idef->il[F_SHAKE].iatoms;

    /* Make atom-constraint connection list for temporary use */
    snew(at_c,homenr);
    snew(at_cn,homenr);
    snew(at_cm,homenr);

    for(i=0; i<ncons; i++) {
      a1=iatom[3*i+1]-start;
      a2=iatom[3*i+2]-start;
      if (at_cn[a1] >= at_cm[a1]) {
	at_cm[a1] += 4;
	srenew(at_c[a1],at_cm[a1]);
      }
      at_c[a1][at_cn[a1]] = i;
      at_cn[a1]++;
      if (at_cn[a2] >= at_cm[a2]) {
	at_cm[a2] += 4;
	srenew(at_c[a2],at_cm[a2]);
      }
      at_c[a2][at_cn[a2]] = i;
      at_cn[a2]++;
    }
    sfree(at_cm);
    
    for(i=0; i<ncons; i++) {
      a1=iatom[3*i+1]-start;
      a2=iatom[3*i+2]-start;
      *nrtot += at_cn[a1] + at_cn[a2] - 2;
    }      

    snew(*r,ncons);
    snew(*bla1,ncons);
    snew(*bla2,ncons);
    snew(*blnr,ncons+1);
    snew(*bllen,ncons);
    snew(*blc,ncons);
    snew(*tmp1,ncons);
    snew(*tmp2,ncons);
    snew(*tmp3,ncons);
    snew(*lincslam,ncons);
    snew(*bllen0,ncons);
    snew(*ddist,ncons);
    snew(*blbnb,*nrtot);
    snew(*blcc,*nrtot);
    snew(*blm,*nrtot);
    
    /* Make constraint-neighbor list */
    (*blnr)[0] = 0;
    nZeroLen = 0;
    for(i=0; (i<ncons); i++) {
      j=3*i;
      a1=iatom[j+1];
      a2=iatom[j+2];
      /* (*blnr)[i+1] = (*blnr)[i] + at_cn[a1] + at_cn[a2] - 2; */
      type=iatom[j];
      len =idef->iparams[type].shake.dA;
      len1=idef->iparams[type].shake.dB;
      if (( len<GMX_REAL_MIN || len1<GMX_REAL_MIN) && 
	  fabs(len1-len)>GMX_REAL_MIN)
	fatal_error(0,"It is not allowed to have a constraint length "
		    "zero and non-zero in the A and B topology");
      if (len < GMX_REAL_MIN)
	nZeroLen++;
      (*bla1)[i]=a1;
      (*bla2)[i]=a2;
      (*bllen)[i]=len;
      (*bllen0)[i]=len;
      (*ddist)[i]=len1-len;
      im1=md->invmass[a1];
      im2=md->invmass[a2];
      (*blc)[i]=invsqrt(im1+im2);
      /* Construct the constraint connection matrix blbnb */
      (*blnr)[i+1]=(*blnr)[i];
      for(k=0; k<at_cn[a1-start]; k++)
	if (at_c[a1-start][k] != i)
	  (*blbnb)[((*blnr)[i+1])++]=at_c[a1-start][k];
      for(k=0; k<at_cn[a2-start]; k++)
	if (at_c[a2-start][k] != i)
	  (*blbnb)[((*blnr)[i+1])++]=at_c[a2-start][k];
      /* Order the blbnb matrix to optimize memory access */
      qsort(&((*blbnb)[(*blnr)[i]]),(*blnr)[i+1]-(*blnr)[i],
            sizeof((*blbnb)[0]),int_comp);
    }

    sfree(at_cn);
    for(i=0; i<homenr; i++)
      sfree(at_c[i]);
    sfree(at_c);
    
    if(log)
    {
        fprintf(log,"\nInitializing LINear Constraint Solver\n");
        fprintf(log,"  number of constraints is %d\n",ncons);
        fprintf(log,"  average number of constraints coupled to one constraint is %.1f\n",
                (real)(*nrtot)/ncons);
        if (nZeroLen)
            fprintf(log,"  found %d constraints with zero length\n",nZeroLen);
        fprintf(log,"\n");
        fflush(log);
    }
    
    /* Construct the coupling coefficient matrix blcc */
    for(b=0; (b<ncons); b++) {
      i=(*bla1)[b];
      j=(*bla2)[b];
      for(n=(*blnr)[b]; (n<(*blnr)[b+1]);n++) {
	k = (*blbnb)[n];
	if (i==(*bla1)[k] || j==(*bla2)[k])
	  sign=-1;
	else
	  sign=1;
	if (i==(*bla1)[k] || i==(*bla2)[k])
	  cen=i;
	else
	  cen=j;
	(*blcc)[n]=sign*md->invmass[cen]*(*blc)[b]*(*blc)[k];
      }
    }
#ifdef DEBUG
    for(i=0; i<ncons; i++) {
      fprintf(log,"%d  %d %d  %g  %g  %d\n",i,(*bla1)[i],(*bla2)[i],
      (*bllen)[i],(*blc)[i],(*blnr)[i+1]-(*blnr)[i]);
      for(n=(*blnr)[i]; (n<(*blnr)[i+1]);n++) {
	k = (*blbnb)[n];
	fprintf(log,"  %d  %g\n",k,(*blcc)[n]);
      }
    }
#endif
  }
}
