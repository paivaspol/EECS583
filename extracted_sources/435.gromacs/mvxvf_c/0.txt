void move_rvecs(FILE *log,bool bForward,bool bSum,
		int left,int right,rvec vecs[],rvec buf[],
		int shift,t_nsborder *nsb,t_nrnb *nrnb)
{
  int    i,j,j0=137,j1=391;
  int    cur,nsum;
#define next ((cur+1) % nsb->nnodes)
#define prev ((cur-1+nsb->nnodes) % nsb->nnodes)

  if (bSum)
    cur=(nsb->nodeid+nsb->shift) % nsb->nnodes;
  else
    cur=nsb->nodeid;

  nsum=0;
  for(i=0; (i<shift); i++) {
    if (bSum) {
      if (bForward) {
	j0=nsb->index[prev];
	j1=j0+nsb->homenr[prev];
      }
      else {
	j0=nsb->index[next];
	j1=j0+nsb->homenr[next];
      }
      for(j=j0; (j<j1); j++) {
	clear_rvec(buf[j]);
      }
    }
    /* Forward pulse around the ring, to increasing NODE number */
    if (bForward) {
      if (bSum)
	gmx_tx_rx_real(right,vecs[nsb->index[cur]], nsb->homenr[cur]*DIM,
		       left,buf [nsb->index[prev]],nsb->homenr[prev]*DIM);
      else
	gmx_tx_rx_real(right,vecs[nsb->index[cur]], nsb->homenr[cur]*DIM,
		       left, vecs[nsb->index[prev]],nsb->homenr[prev]*DIM);
      /* Wait for communication to end */
      gmx_wait(right,left);
    }
    
    /* Backward pulse around the ring, to decreasing NODE number */
    else {
      if (bSum)
	gmx_tx_rx_real(left, vecs[nsb->index[cur]], nsb->homenr[cur]*DIM,
		       right,buf [nsb->index[next]],nsb->homenr[next]*DIM);
      else
	gmx_tx_rx_real(left, vecs[nsb->index[cur]], nsb->homenr[cur]*DIM,
		       right,vecs[nsb->index[next]],nsb->homenr[next]*DIM);
      /* Wait for communication to end */
      gmx_wait(left,right);
    }

    /* Actual summation */
    if (bSum) {
      for(j=j0; (j<j1); j++) {
	rvec_inc(vecs[j],buf[j]);
      }
      nsum+=(j1-j0);
    }
    if (bForward) 
      cur=prev;
    else
      cur=next;
  }  
  if (nsum > 0)
    inc_nrnb(nrnb,eNR_FSUM,nsum);
#undef next
#undef prev
}
