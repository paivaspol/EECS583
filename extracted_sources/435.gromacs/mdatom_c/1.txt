void init_mdatoms(t_mdatoms *md,real lambda,bool bFirst)
{
  static real lambda0;
  int    i,end;
  real   L1=1.0-lambda;
  
  if (bFirst)
    lambda0 = lambda;
  end=md->nr;
  
  /* Only do this loop the first time, or when lambda has changed.
   * One could also check whether there is any perturbed atom at all,
   * but if you don't have perturbed atoms, it does not make sense to modify lambda.
   * In principle this has to be parallellized, although it would mean extra 
   * communication. Basically only the charges are used on other nodes...
   */
  if (bFirst || fabs(lambda0 - lambda)>GMX_REAL_MIN) {
    for(i=0; (i<end); i++) {
      if (md->bPerturbed[i] || bFirst) {
	md->massT[i]=L1*md->massA[i]+lambda*md->massB[i];
	if (md->invmass[i] > 1.1*ALMOST_ZERO)
	  md->invmass[i]=1.0/md->massT[i];
	md->chargeT[i]=L1*md->chargeA[i]+lambda*md->chargeB[i];
      }
    }
  }
  lambda0 = lambda;
}
