void calc_idx(int natoms,matrix recipbox,
	      rvec x[],rvec fractx[],ivec idx[],int nx,int ny,int nz,
	      int nnx[],int nny[],int nnz[])
{
  int  i;
  int  *idxptr,tix,tiy,tiz;
  real *xptr,tx,ty,tz;
  real rxx,ryx,ryy,rzx,rzy,rzz;
#if (defined __GNUC__ && (defined i386 || defined __386__) && !defined DOUBLE && defined USE_X86TRUNC)
  int x86_cw,x86_cwsave;

  asm("fnstcw %0" : "=m" (*&x86_cwsave));
  x86_cw = x86_cwsave | 3072;
  asm("fldcw %0" : : "m" (*&x86_cw));
  #define x86trunc(a,b) asm("fld %1\nfistpl %0\n" : "=m" (*&b) : "f" (a));
#endif
 
  rxx = recipbox[XX][XX];
  ryx = recipbox[YY][XX];
  ryy = recipbox[YY][YY];
  rzx = recipbox[ZZ][XX];
  rzy = recipbox[ZZ][YY];
  rzz = recipbox[ZZ][ZZ];

  for(i=0; (i<natoms); i++) {
    xptr   = x[i];
    idxptr = idx[i];
    
    /* Fractional coordinates along box vectors */
    tx = nx + nx * ( xptr[XX] * rxx + xptr[YY] * ryx + xptr[ZZ] * rzx );
    ty = ny + ny * (                  xptr[YY] * ryy + xptr[ZZ] * rzy );
    tz = nz + nz * (                                   xptr[ZZ] * rzz );
    
#if (defined __GNUC__ && (defined i386 || defined __386__) && !defined DOUBLE && defined USE_X86TRUNC)
    x86trunc(tx,tix);
    x86trunc(ty,tiy);
    x86trunc(tz,tiz);
#else
    tix = (int)(tx);
    tiy = (int)(ty);
    tiz = (int)(tz);
#endif

    fractx[i][XX] = tx - tix;
    fractx[i][YY] = ty - tiy;
    fractx[i][ZZ] = tz - tiz;   
    
    idxptr[XX] = nnx[tix];
    idxptr[YY] = nny[tiy];
    idxptr[ZZ] = nnz[tiz];
#ifdef DEBUG
    range_check(idxptr[XX],nx);
    range_check(idxptr[YY],ny);
    range_check(idxptr[ZZ],nz);
#endif
  }  
#if (defined __GNUC__ && (defined i386 || defined __386__) && !defined DOUBLE && defined USE_X86TRUNC)  
  asm("fldcw %0" : : "m" (*&x86_cwsave));
#endif

}
