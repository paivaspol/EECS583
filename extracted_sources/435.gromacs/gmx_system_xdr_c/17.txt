bool_t
xdr_double(xdrs, dp)
     XDR *xdrs;
     double *dp;
{

  /* Windows and some other systems dont define double-precision
   * word order in the header files, so unfortunately we have
   * to calculate it!
   */
  static int LSW=-1; /* Least significant fp word */
  
  if(LSW<0) {
    double x=0.987654321; /* Just a number */

    /* Possible representations in IEEE double precision: 
     * (S=small endian, B=big endian)
     * 
     * Byte order, Word order, Hex
     *     S           S       b8 56 0e 3c dd 9a ef 3f    
     *     B           S       3c 0e 56 b8 3f ef 9a dd
     *     S           B       dd 9a ef 3f b8 56 0e 3c
     *     B           B       3f ef 9a dd 3c 0e 56 b8
     */ 
    
    unsigned char ix = *((char *)&x);
    
    if(ix==0xdd || ix==0x3f)
      LSW=1;  /* Big endian word order */
    else if(ix==0xb8 || ix==0x3c)
      LSW=0;  /* Small endian word order */
    else { /* Catch strange errors */
      printf("Error when detecting floating-point word order.\n"
	     "Do you have a non-IEEE system?\n"
	     "If possible, use the XDR libraries provided with your system,\n"
	     "instead of the Gromacs fallback XDR source.\n");
      exit(0);
    }
  }  
  
  switch (xdrs->x_op) {
    
  case XDR_ENCODE:
    if (2*sizeof(long) == sizeof(double)) {
      long *lp = (long *)dp;
      return (xdr_putlong(xdrs, lp+!LSW) &&
	      xdr_putlong(xdrs, lp+LSW));
    } else if (2*sizeof(int) == sizeof(double)) {
      int *ip = (int *)dp;
      long tmp[2];
      tmp[0] = ip[!LSW];
      tmp[1] = ip[LSW];
      return (xdr_putlong(xdrs, tmp) &&
	      xdr_putlong(xdrs, tmp+1));
    }
    break;
    
  case XDR_DECODE:
    if (2*sizeof(long) == sizeof(double)) {
      long *lp = (long *)dp;
      return (xdr_getlong(xdrs, lp+!LSW) &&
	      xdr_getlong(xdrs, lp+LSW));
    } else if (2*sizeof(int) == sizeof(double)) {
      int *ip = (int *)dp;
      long tmp[2];
      if (xdr_getlong(xdrs, tmp+!LSW) &&
	  xdr_getlong(xdrs, tmp+LSW)) {
	ip[0] = tmp[0];
	ip[1] = tmp[1];
	return (TRUE);
      }
    }
    break;
    
  case XDR_FREE:
    return (TRUE);
  }
  return (FALSE);
}
