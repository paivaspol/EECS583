int write_trxframe_indexed(int fnum,t_trxframe *fr,int nind,atom_id *ind)
{
  char title[STRLEN];
  rvec *xout=NULL,*vout=NULL,*fout=NULL;
  int  i;
  real prec;

  if (fr->bPrec)
    prec = fr->prec;
  else
    prec = 1000.0;
  
  switch (gmx_fio_getftp(fnum)) {
  case efTRJ:
  case efTRR:
    break;
  default:
    if (!fr->bX)
      fatal_error(0,"Need coordinates to write a %s trajectory",
		  ftp2ext(gmx_fio_getftp(fnum)));
    break;
  }

  switch (gmx_fio_getftp(fnum)) {
  case efTRJ:
  case efTRR:
    if (fr->bV) {
      snew(vout,nind);
      for(i=0; i<nind; i++) 
	copy_rvec(fr->v[ind[i]],vout[i]);
    }
    if (fr->bF) {
      snew(fout,nind);
      for(i=0; i<nind; i++) 
	copy_rvec(fr->f[ind[i]],fout[i]);
    }
  case efXTC:
  case efG87:
    if (fr->bX) {
      snew(xout,nind);
      for(i=0; i<nind; i++) 
	copy_rvec(fr->x[ind[i]],xout[i]);
    }
    break;
  default:
    break;
  }

  switch (gmx_fio_getftp(fnum)) {
  case efXTC: 
    write_xtc(fnum,nind,fr->step,fr->time,fr->box,xout,prec);
    break;
  case efTRJ:
  case efTRR:  
    fwrite_trn(fnum,nframes_read(),
	       fr->time,fr->step,fr->box,nind,xout,vout,fout);
    break;
  case efGRO:
  case efPDB:
  case efBRK:
  case efENT:
    if (!fr->bAtoms)
      fatal_error(0,"Can not write a %s file without atom names",
		  ftp2ext(gmx_fio_getftp(fnum)));
    sprintf(title,"frame t= %.3f",fr->time);
    if (gmx_fio_getftp(fnum) == efGRO)
      write_hconf_indexed_p(gmx_fio_getfp(fnum),title,fr->atoms,nind,ind,
			    prec2ndec(prec),
			    fr->x,fr->bV ? fr->v : NULL,fr->box);
    else
      write_pdbfile_indexed(gmx_fio_getfp(fnum),title,fr->atoms,
			    fr->x,fr->box,0,fr->step,nind,ind);
    break;
  case efG87:
    write_gms(gmx_fio_getfp(fnum),nind,xout,fr->box);
    break;
  case efG96:
    write_g96_conf(gmx_fio_getfp(fnum),fr,nind,ind); 
    break;
  default:
    fatal_error(0,"Sorry, write_trxframe_indexed can not write %s",
		ftp2ext(gmx_fio_getftp(fnum)));
    break;
  }

  switch (gmx_fio_getftp(fnum)) {
  case efTRN:
  case efTRJ:
  case efTRR:
    if (vout) sfree(vout);
    if (fout) sfree(fout);
  case efXTC:
  case efG87:
    sfree(xout);
    break;
  default:
    break;
  }
  
  return 0;
}
