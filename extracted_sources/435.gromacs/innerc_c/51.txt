void inl2430(
	            int nri,
	            int iinr[],
	            int jindex[],
	            int jjnr[],
	            int shift[],
	           real shiftvec[],
	           real fshift[],
	            int gid[],
	           real pos[],
	           real faction[],
	           real charge[],
	           real facel,
	           real Vc[],
	           real krf,
	           real crf,
	            int type[],
	            int ntype,
	           real nbfp[],
	           real Vnb[],
	           real tabscale,
	           real VFtab[],
	           real exptabscale)
{
  int        ii;
  int        k;
  int        n;
  int        nj0;
  int        nj1;
  int        is3;
  int        ggid;
  int        ii3;
  int        n0;
  int        n1;
  int        nnn;
  real       krsq;
  real       qO;
  real       qH;
  real       qqOO;
  real       qqOH;
  real       qqHH;
  real       cexp1;
  real       cexp2;
  real       c6;
  real       vctot;
  real       vcoul;
  real       rt;
  real       eps;
  real       eps2;
  real       Y;
  real       F;
  real       Geps;
  real       Heps2;
  real       Fp;
  real       VV;
  real       FF;
  real       fijD;
  real       fijR;
  real       vnb6;
  real       vnbexp;
  real       vnbtot;
  int        j3;
  int        jnr;
  real       shX;
  real       shY;
  real       shZ;
  const real nul  =  0.0000000000000000;
  const real two  =  2.0000000000000000;
  real       ix1;
  real       iy1;
  real       iz1;
  real       ix2;
  real       iy2;
  real       iz2;
  real       ix3;
  real       iy3;
  real       iz3;
  int        ntiA;
  int        tjA;
  real       fix1;
  real       fiy1;
  real       fiz1;
  real       fix2;
  real       fiy2;
  real       fiz2;
  real       fix3;
  real       fiy3;
  real       fiz3;
  real       jx1;
  real       jy1;
  real       jz1;
  real       jx2;
  real       jy2;
  real       jz2;
  real       jx3;
  real       jy3;
  real       jz3;
  real       dx11;
  real       dy11;
  real       dz11;
  real       dx12;
  real       dy12;
  real       dz12;
  real       dx13;
  real       dy13;
  real       dz13;
  real       dx21;
  real       dy21;
  real       dz21;
  real       dx22;
  real       dy22;
  real       dz22;
  real       dx23;
  real       dy23;
  real       dz23;
  real       dx31;
  real       dy31;
  real       dz31;
  real       dx32;
  real       dy32;
  real       dz32;
  real       dx33;
  real       dy33;
  real       dz33;
  real       rsq11;
  real       rsq12;
  real       rsq13;
  real       rsq21;
  real       rsq22;
  real       rsq23;
  real       rsq31;
  real       rsq32;
  real       rsq33;
  real       rinv11;
  real       rinv12;
  real       rinv13;
  real       rinv21;
  real       rinv22;
  real       rinv23;
  real       rinv31;
  real       rinv32;
  real       rinv33;
  real       rinvsq11;
  real       rinvsq12;
  real       rinvsq13;
  real       rinvsq21;
  real       rinvsq22;
  real       rinvsq23;
  real       rinvsq31;
  real       rinvsq32;
  real       rinvsq33;
  real       r11;
  real       fs11;
  real       fs12;
  real       fs13;
  real       fs21;
  real       fs22;
  real       fs23;
  real       fs31;
  real       fs32;
  real       fs33;
  real       tx11;
  real       ty11;
  real       tz11;
  real       tx12;
  real       ty12;
  real       tz12;
  real       tx13;
  real       ty13;
  real       tz13;
  real       tx21;
  real       ty21;
  real       tz21;
  real       tx22;
  real       ty22;
  real       tz22;
  real       tx23;
  real       ty23;
  real       tz23;
  real       tx31;
  real       ty31;
  real       tz31;
  real       tx32;
  real       ty32;
  real       tz32;
  real       tx33;
  real       ty33;
  real       tz33;
  real       fjx1;
  real       fjy1;
  real       fjz1;
  real       fjx2;
  real       fjy2;
  real       fjz2;
  real       fjx3;
  real       fjy3;
  real       fjz3;

  ii                = iinr[0];
  qO                = charge[ii];
  qH                = charge[ii+1];
  qqOO              = facel*qO*qO;
  qqOH              = facel*qO*qH;
  qqHH              = facel*qH*qH;
  ntiA              = 3*ntype*type[ii];
  tjA               = ntiA+3*type[ii];
  c6                = nbfp[tjA];
  cexp1             = nbfp[tjA+1];
  cexp2             = nbfp[tjA+2];

  for(n=0; (n<nri); n++) {
    is3               = 3*shift[n];
    shX               = shiftvec[is3];
    shY               = shiftvec[is3+1];
    shZ               = shiftvec[is3+2];
    ii                = iinr[n];
    ii3               = 3*ii;
    vctot             = nul;
    vnbtot            = nul;
    nj0               = jindex[n];
    nj1               = jindex[n+1];
    ix1               = shX + pos[ii3];
    iy1               = shY + pos[ii3+1];
    iz1               = shZ + pos[ii3+2];
    ix2               = shX + pos[ii3+3];
    iy2               = shY + pos[ii3+4];
    iz2               = shZ + pos[ii3+5];
    ix3               = shX + pos[ii3+6];
    iy3               = shY + pos[ii3+7];
    iz3               = shZ + pos[ii3+8];
    fix1              = nul;
    fiy1              = nul;
    fiz1              = nul;
    fix2              = nul;
    fiy2              = nul;
    fiz2              = nul;
    fix3              = nul;
    fiy3              = nul;
    fiz3              = nul;
    for(k=nj0; (k<nj1); k++) {
      jnr               = jjnr[k];
      j3                = 3*jnr;
      jx1               = pos[j3];
      jy1               = pos[j3+1];
      jz1               = pos[j3+2];
      jx2               = pos[j3+3];
      jy2               = pos[j3+4];
      jz2               = pos[j3+5];
      jx3               = pos[j3+6];
      jy3               = pos[j3+7];
      jz3               = pos[j3+8];
      dx11              = ix1 - jx1;
      dy11              = iy1 - jy1;
      dz11              = iz1 - jz1;
      rsq11             = dx11*dx11+dy11*dy11+dz11*dz11;
      dx12              = ix1 - jx2;
      dy12              = iy1 - jy2;
      dz12              = iz1 - jz2;
      rsq12             = dx12*dx12+dy12*dy12+dz12*dz12;
      dx13              = ix1 - jx3;
      dy13              = iy1 - jy3;
      dz13              = iz1 - jz3;
      rsq13             = dx13*dx13+dy13*dy13+dz13*dz13;
      dx21              = ix2 - jx1;
      dy21              = iy2 - jy1;
      dz21              = iz2 - jz1;
      rsq21             = dx21*dx21+dy21*dy21+dz21*dz21;
      dx22              = ix2 - jx2;
      dy22              = iy2 - jy2;
      dz22              = iz2 - jz2;
      rsq22             = dx22*dx22+dy22*dy22+dz22*dz22;
      dx23              = ix2 - jx3;
      dy23              = iy2 - jy3;
      dz23              = iz2 - jz3;
      rsq23             = dx23*dx23+dy23*dy23+dz23*dz23;
      dx31              = ix3 - jx1;
      dy31              = iy3 - jy1;
      dz31              = iz3 - jz1;
      rsq31             = dx31*dx31+dy31*dy31+dz31*dz31;
      dx32              = ix3 - jx2;
      dy32              = iy3 - jy2;
      dz32              = iz3 - jz2;
      rsq32             = dx32*dx32+dy32*dy32+dz32*dz32;
      dx33              = ix3 - jx3;
      dy33              = iy3 - jy3;
      dz33              = iz3 - jz3;
      rsq33             = dx33*dx33+dy33*dy33+dz33*dz33;
      rinv11            = 1.0/sqrt(rsq11);
      rinv21            = 1.0/sqrt(rsq21);
      rinv31            = 1.0/sqrt(rsq31);
      rinv12            = 1.0/sqrt(rsq12);
      rinv22            = 1.0/sqrt(rsq22);
      rinv32            = 1.0/sqrt(rsq32);
      rinv13            = 1.0/sqrt(rsq13);
      rinv23            = 1.0/sqrt(rsq23);
      rinv33            = 1.0/sqrt(rsq33);
      r11               = rsq11*rinv11;
      rinvsq11          = rinv11*rinv11;
      rt                = r11*tabscale;
      n0                = rt;
      eps               = rt-n0;
      eps2              = eps*eps;
      n1                = 8*n0;
      nnn               = n1;
      Y                 = VFtab[nnn];
      F                 = VFtab[nnn+1];
      Geps              = eps*VFtab[nnn+2];
      Heps2             = eps2*VFtab[nnn+3];
      Fp                = F+Geps+Heps2;
      VV                = Y+eps*Fp;
      FF                = Fp+Geps+two*Heps2;
      vnb6              = c6*VV;
      fijD              = c6*FF;
      rt                = cexp2*r11*exptabscale;
      n0                = rt;
      eps               = rt-n0;
      eps2              = eps*eps;
      n1                = 8*n0;
      nnn               = n1+4;
      Y                 = VFtab[nnn];
      F                 = VFtab[nnn+1];
      Geps              = eps*VFtab[nnn+2];
      Heps2             = eps2*VFtab[nnn+3];
      Fp                = F+Geps+Heps2;
      VV                = Y+eps*Fp;
      FF                = Fp+Geps+two*Heps2;
      vnbexp            = cexp1*VV;
      fijR              = cexp1*cexp2*FF;
      vnbtot            = vnbtot + vnb6 + vnbexp;
      krsq              = krf*rsq11;
      vcoul             = qqOO*(rinv11+krsq-crf);
      fs11              = 
        ((qqOO*(rinv11-two*krsq))*rinv11-((fijD)*tabscale+(fijR)*exptabscale))*rinv11;
      vctot             = vctot + vcoul;
      tx11              = dx11*fs11;
      ty11              = dy11*fs11;
      tz11              = dz11*fs11;
      fix1              = fix1 + tx11;
      fiy1              = fiy1 + ty11;
      fiz1              = fiz1 + tz11;
      fjx1              = faction[j3]-tx11;
      fjy1              = faction[j3+1]-ty11;
      fjz1              = faction[j3+2]-tz11;
      rinvsq12          = rinv12*rinv12;
      krsq              = krf*rsq12;
      vcoul             = qqOH*(rinv12+krsq-crf);
      fs12              = (qqOH*(rinv12-two*krsq))*rinvsq12;
      vctot             = vctot + vcoul;
      tx12              = dx12*fs12;
      ty12              = dy12*fs12;
      tz12              = dz12*fs12;
      fix1              = fix1 + tx12;
      fiy1              = fiy1 + ty12;
      fiz1              = fiz1 + tz12;
      fjx2              = faction[j3+3]-tx12;
      fjy2              = faction[j3+4]-ty12;
      fjz2              = faction[j3+5]-tz12;
      rinvsq13          = rinv13*rinv13;
      krsq              = krf*rsq13;
      vcoul             = qqOH*(rinv13+krsq-crf);
      fs13              = (qqOH*(rinv13-two*krsq))*rinvsq13;
      vctot             = vctot + vcoul;
      tx13              = dx13*fs13;
      ty13              = dy13*fs13;
      tz13              = dz13*fs13;
      fix1              = fix1 + tx13;
      fiy1              = fiy1 + ty13;
      fiz1              = fiz1 + tz13;
      fjx3              = faction[j3+6]-tx13;
      fjy3              = faction[j3+7]-ty13;
      fjz3              = faction[j3+8]-tz13;
      rinvsq21          = rinv21*rinv21;
      krsq              = krf*rsq21;
      vcoul             = qqOH*(rinv21+krsq-crf);
      fs21              = (qqOH*(rinv21-two*krsq))*rinvsq21;
      vctot             = vctot + vcoul;
      tx21              = dx21*fs21;
      ty21              = dy21*fs21;
      tz21              = dz21*fs21;
      fix2              = fix2 + tx21;
      fiy2              = fiy2 + ty21;
      fiz2              = fiz2 + tz21;
      fjx1              = fjx1-tx21;
      fjy1              = fjy1-ty21;
      fjz1              = fjz1-tz21;
      rinvsq22          = rinv22*rinv22;
      krsq              = krf*rsq22;
      vcoul             = qqHH*(rinv22+krsq-crf);
      fs22              = (qqHH*(rinv22-two*krsq))*rinvsq22;
      vctot             = vctot + vcoul;
      tx22              = dx22*fs22;
      ty22              = dy22*fs22;
      tz22              = dz22*fs22;
      fix2              = fix2 + tx22;
      fiy2              = fiy2 + ty22;
      fiz2              = fiz2 + tz22;
      fjx2              = fjx2-tx22;
      fjy2              = fjy2-ty22;
      fjz2              = fjz2-tz22;
      rinvsq23          = rinv23*rinv23;
      krsq              = krf*rsq23;
      vcoul             = qqHH*(rinv23+krsq-crf);
      fs23              = (qqHH*(rinv23-two*krsq))*rinvsq23;
      vctot             = vctot + vcoul;
      tx23              = dx23*fs23;
      ty23              = dy23*fs23;
      tz23              = dz23*fs23;
      fix2              = fix2 + tx23;
      fiy2              = fiy2 + ty23;
      fiz2              = fiz2 + tz23;
      fjx3              = fjx3-tx23;
      fjy3              = fjy3-ty23;
      fjz3              = fjz3-tz23;
      rinvsq31          = rinv31*rinv31;
      krsq              = krf*rsq31;
      vcoul             = qqOH*(rinv31+krsq-crf);
      fs31              = (qqOH*(rinv31-two*krsq))*rinvsq31;
      vctot             = vctot + vcoul;
      tx31              = dx31*fs31;
      ty31              = dy31*fs31;
      tz31              = dz31*fs31;
      fix3              = fix3 + tx31;
      fiy3              = fiy3 + ty31;
      fiz3              = fiz3 + tz31;
      faction[j3]       = fjx1-tx31;
      faction[j3+1]     = fjy1-ty31;
      faction[j3+2]     = fjz1-tz31;
      rinvsq32          = rinv32*rinv32;
      krsq              = krf*rsq32;
      vcoul             = qqHH*(rinv32+krsq-crf);
      fs32              = (qqHH*(rinv32-two*krsq))*rinvsq32;
      vctot             = vctot + vcoul;
      tx32              = dx32*fs32;
      ty32              = dy32*fs32;
      tz32              = dz32*fs32;
      fix3              = fix3 + tx32;
      fiy3              = fiy3 + ty32;
      fiz3              = fiz3 + tz32;
      faction[j3+3]     = fjx2-tx32;
      faction[j3+4]     = fjy2-ty32;
      faction[j3+5]     = fjz2-tz32;
      rinvsq33          = rinv33*rinv33;
      krsq              = krf*rsq33;
      vcoul             = qqHH*(rinv33+krsq-crf);
      fs33              = (qqHH*(rinv33-two*krsq))*rinvsq33;
      vctot             = vctot + vcoul;
      tx33              = dx33*fs33;
      ty33              = dy33*fs33;
      tz33              = dz33*fs33;
      fix3              = fix3 + tx33;
      fiy3              = fiy3 + ty33;
      fiz3              = fiz3 + tz33;
      faction[j3+6]     = fjx3-tx33;
      faction[j3+7]     = fjy3-ty33;
      faction[j3+8]     = fjz3-tz33;
    }
    faction[ii3]      = faction[ii3] + fix1;
    faction[ii3+1]    = faction[ii3+1] + fiy1;
    faction[ii3+2]    = faction[ii3+2] + fiz1;
    faction[ii3+3]    = faction[ii3+3] + fix2;
    faction[ii3+4]    = faction[ii3+4] + fiy2;
    faction[ii3+5]    = faction[ii3+5] + fiz2;
    faction[ii3+6]    = faction[ii3+6] + fix3;
    faction[ii3+7]    = faction[ii3+7] + fiy3;
    faction[ii3+8]    = faction[ii3+8] + fiz3;
    fshift[is3]       = fshift[is3] + fix1+fix2+fix3;
    fshift[is3+1]     = fshift[is3+1] + fiy1+fiy2+fiy3;
    fshift[is3+2]     = fshift[is3+2] + fiz1+fiz2+fiz3;
    ggid              = gid[n];
    Vc[ggid]          = Vc[ggid] + vctot;
    Vnb[ggid]         = Vnb[ggid] + vnbtot;
  }
}
