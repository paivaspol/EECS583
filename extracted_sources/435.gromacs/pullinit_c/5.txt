void init_pull(FILE *log,int nfile,t_filenm fnm[],t_pull *pull,rvec *x,
	       t_mdatoms *md,matrix box) 
{
  int i,j,m,ii;
  int ngrps;
  real tm;
  rvec tmp;
  char **grpnames;
  atom_id **index;
  int *ngx;
  int totalgrps;    /* total number of groups in the index file */
  
  /* do we have to do any pulling at all? If not return */
  pull->bPull = opt2bSet("-pi",nfile,fnm);
  if (!pull->bPull) return;

  pull->out = ffopen(opt2fn("-pd",nfile,fnm),"w");
  read_pullparams(pull, opt2fn("-pi",nfile,fnm), opt2fn("-po",nfile,fnm));
  ngrps = pull->pull.n;

  if (pull->reftype == eDyn || pull->reftype == eDynT0) 
    pull->bCyl = TRUE;
  else
    pull->bCyl = FALSE;
  
  if (pull->bCyl && (pull->rc < 0.01 || pull->r < 0.01)) 
    fatal_error(0,"rc or r is too small or zero.");

  print_info(log,pull);

  get_pullmemory(&pull->pull,ngrps);
  get_pullmemory(&pull->dyna,ngrps);
  get_pullmemory(&pull->ref,1);
  
  /* read the whole index file */
  read_whole_index(opt2fn("-pn",nfile,fnm),&grpnames,&index,&ngx,&totalgrps);
  
  if (pull->bVerbose) {
    fprintf(stderr,"read_whole_index: %d groups total\n",totalgrps);
    for(i=0;i<totalgrps;i++) 
      fprintf(stderr,"group %i (%s) %d elements\n",
	      i,grpnames[i],ngx[i]);
    /*    print_whole_index(grpnames,index,ngx,totalgrps); */
  } 
  
  /* grab the groups that are specified in the param file */
  for (i=0;i<pull->pull.n;i++) 
    get_named_indexgroup(log,&pull->pull.idx[i],&pull->pull.ngx[i],
			 pull->pull.grps[i],index,ngx,grpnames,totalgrps) ;
  get_named_indexgroup(log,&pull->ref.idx[0],&pull->ref.ngx[0],
		       pull->ref.grps[0],index,ngx,grpnames,totalgrps);

  /* get more memory! Don't we love C? */
  snew(pull->ref.x0[0],pull->ref.ngx[0]);
  snew(pull->ref.xp[0],pull->ref.ngx[0]);
  snew(pull->ref.comhist[0],pull->reflag);
  for (i=0;i<pull->pull.n;i++) 
    snew(pull->dyna.comhist[i],pull->reflag);
  
  for (i=0;i<ngrps;i++) {
    tm = calc_com(x,pull->pull.ngx[i],pull->pull.idx[i],
 		  md,tmp,box);
    copy_rvec(tmp,pull->pull.x_con[i]);
    copy_rvec(tmp,pull->pull.x_unc[i]);
    copy_rvec(tmp,pull->pull.x_ref[i]);
    copy_rvec(tmp,pull->pull.spring[i]);
    fprintf(log,"Initializing pull groups. Mass of group %d: %8.3f\n"
	    "Initial coordinates center of mass: %8.3f %8.3f %8.3f\n",
	    i,tm,tmp[XX],tmp[YY],tmp[ZZ]);
    pull->pull.tmass[i] = tm;
  }
  
  /* initialize the reference group, in all cases */
  tm = calc_com(x,pull->ref.ngx[0],pull->ref.idx[0],md,
		tmp,box);
  
  copy_rvec(tmp,pull->ref.x_unc[0]);
  copy_rvec(tmp,pull->ref.x_con[0]);
  copy_rvec(tmp,pull->ref.x_ref[0]);
  
  for (j=0;j<pull->reflag;j++) 
    copy_rvec(pull->ref.x_unc[0],pull->ref.comhist[0][j]);
  
  fprintf(log,"Initializing reference group. Mass: %8.3f\n"
	  "Initial coordinates center of mass: %8.3f %8.3f %8.3f\n",
	  tm,tmp[XX],tmp[YY],tmp[ZZ]);
  /* keep the initial coordinates for center of mass at t0 */
  for (j=0;j<pull->ref.ngx[0];j++) {
    copy_rvec(x[pull->ref.idx[0][j]],pull->ref.x0[0][j]);
    copy_rvec(x[pull->ref.idx[0][j]],pull->ref.xp[0][j]);
  }
  pull->ref.tmass[0] = tm;

  /* if we use dynamic reference groups, do some initialising for them */
  if (pull->bCyl) {
    make_refgrps(pull,x,md);
    for (i=0;i<ngrps;i++) {
      copy_rvec(pull->dyna.x_unc[i],pull->dyna.x_con[i]);
      copy_rvec(pull->dyna.x_unc[i],pull->dyna.x_ref[i]);
      
      /* initialize comhist values for running averages */
      for (j=0;j<pull->reflag;j++) 
	copy_rvec(pull->dyna.x_unc[i],pull->dyna.comhist[i][j]);
      
      fprintf(log,"Initializing dynamic groups. %d atoms. Weighted mass"
	      "for %d:%8.3f\n"
	      "Initial coordinates center of mass: %8.3f %8.3f %8.3f\n",
	      pull->dyna.ngx[i],i,pull->dyna.tmass[i],pull->dyna.x_ref[i][XX],
	      pull->dyna.x_ref[i][YY],pull->dyna.x_ref[i][ZZ]);
    }
  } 
  
  /* set the reference distances and directions, taking into account pbc */
  for (i=0;i<ngrps;i++) {
    if (pull->bCyl)
      rvec_sub(pull->pull.x_ref[i],pull->dyna.x_ref[i],tmp);
    else
      rvec_sub(pull->pull.x_ref[i],pull->ref.x_ref[0],tmp);
    for (m=DIM-1; m>=0; m--) {
	if (tmp[m] < -0.5*box[m][m]) rvec_inc(tmp,box[m]);
	if (tmp[m] >  0.5*box[m][m]) rvec_dec(tmp,box[m]);
    }
    
    /* reference distance for constraint run */
    pull->pull.d_ref[i] = norm(tmp);
    
    /* select elements of direction vector to use for Afm and Start runs */
    for (m=0;m<DIM;m++)  
      tmp[m] = tmp[m] * pull->dims[m];
    svmul(1/norm(tmp),tmp,pull->pull.dir[i]);
    if (pull->bReverse) 
      svmul(-1.0,pull->pull.dir[i],pull->pull.dir[i]);

    if (pull->runtype == eAfm) 
      fprintf(log,"\nPull rate: %e nm/step. Force constant: %e kJ/(mol nm)",
	      pull->rate,pull->k);
    if (pull->runtype == eAfm || pull->runtype == eStart)  
      fprintf(log,"\nPull direction: %8.3f %8.3f %8.3f bReverse = %d\n",
	      pull->pull.dir[i][XX],pull->pull.dir[i][YY],
	      pull->pull.dir[i][ZZ],pull->bReverse);
    
  }
  fprintf(log,"**************************************************\n"
	  "                      END   PULL INFO                    \n"
	  "**************************************************\n\n");
}
