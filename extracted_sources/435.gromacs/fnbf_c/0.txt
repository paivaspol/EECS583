void do_fnbf(FILE *log,t_commrec *cr,t_forcerec *fr,
	     rvec x[],rvec f[],t_mdatoms *mdatoms,
	     real egnb[],real egcoul[],rvec box_size,
	     t_nrnb *nrnb,real lambda,real *dvdlambda,
	     bool bLR,int eNL)
{
  t_nblist *nlist;
  real     *fshift,nav;
  int      i,i0,i1,nrnb_ind,sz;
  bool     bWater;
  FILE *fp;
#ifdef USE_LOCAL_BUFFERS
static int buflen=0;
static real *drbuf=NULL;
static real *buf1=NULL;
static real *buf2=NULL;
static real *_buf1=NULL;
static real *_buf2=NULL;
#endif

#ifdef USE_VECTOR
  if (fbuf == NULL)
    snew(fbuf,mdatoms->nr*3);
#endif
 

#ifdef USE_LOCAL_BUFFERS
  if (buflen==0) {
    buflen=VECTORIZATION_BUFLENGTH;
    snew(drbuf,3*buflen);
    snew(_buf1,buflen+31);
    snew(_buf2,buflen+31);
    /* use cache aligned buffer pointers */
    buf1=(real *) ( ( (unsigned long int)_buf1 + 31 ) & (~0x1f) );	 
    buf2=(real *) ( ( (unsigned long int)_buf2 + 31 ) & (~0x1f) );	 
    if(log)
        fprintf(log,"Using buffers of length %d for innerloop vectorization.\n",buflen);
  }
#endif

#if (defined USE_X86_SSE_AND_3DNOW || defined USE_X86_SSE2 || defined USE_PPC_ALTIVEC)
  if (cpu_capabilities == UNKNOWN_CPU) {
    cpu_capabilities = detect_cpu(log);
  }
#endif
  
  if (eNL >= 0) {
    i0 = eNL;
    i1 = i0+1;
  }
  else {
    i0 = 0;
    i1 = eNL_NR;
  }

  if (bLR)
    fshift = fr->fshift_twin[0];
  else
    fshift = fr->fshift[0];

  for(i=i0; (i<i1); i++) {
    if (bLR) 
      nlist  = &(fr->nlist_lr[i]);
    else
      nlist = &(fr->nlist_sr[i]);

    if (nlist->nri > 0) {
      nrnb_ind = nlist->il_code;

#ifdef USE_LOCAL_BUFFERS
      /* make sure buffers can hold the longest neighbourlist */
      if (nlist->solvent==esolWATERWATER)			
	sz = 9*nlist->maxlen;
      else if (nlist->solvent==esolWATER) 
	sz = 3*nlist->maxlen;
      else	
        sz = nlist->maxlen;

      if (sz>buflen) {
	buflen=(sz+100); /* use some extra size to avoid reallocating next step */
    	srenew(drbuf,3*buflen);
    	srenew(_buf1,buflen+31);
    	srenew(_buf2,buflen+31);
        /* make cache aligned buffer pointers */
        buf1=(real *) ( ( (unsigned long int)_buf1 + 31 ) & (~0x1f) );	 
        buf2=(real *) ( ( (unsigned long int)_buf2 + 31 ) & (~0x1f) );	 
      }	
#endif

      switch (nrnb_ind) { 
	case eNR_INL0100:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl0100_sse(ASM_COMMON_ARGS ASM_LJ_ARGS);	
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl0100_3dnow(ASM_COMMON_ARGS ASM_LJ_ARGS);
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl0100_sse2(ASM_COMMON_ARGS ASM_LJ_ARGS);
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl0100_altivec(ASM_COMMON_ARGS ASM_LJ_ARGS);	
	  else
#endif
	    FUNC(inl0100,INL0100)(COMMON_ARGS REC_BUF LJ_ARGS);
	break;
        case eNR_INL0110:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
          if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl0110_sse(ASM_COMMON_ARGS ASM_LJ_ARGS SOLMN_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl0110_3dnow(ASM_COMMON_ARGS ASM_LJ_ARGS SOLMN_ARGS);
	  else
#endif
            FUNC(inl0110,INL0110)(COMMON_ARGS REC_BUF LJ_ARGS SOLMN_ARGS);
        break;
	case eNR_INL0200: 
	  FUNC(inl0200,INL0200)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 LJ_ARGS);
	break;
	case eNR_INL0210:
          FUNC(inl0210,INL0210)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 LJ_ARGS SOLMN_ARGS);
        break;
	case eNR_INL0300:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
          if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl0300_sse(ASM_COMMON_ARGS ASM_LJ_ARGS ASM_LJTAB_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl0300_3dnow(ASM_COMMON_ARGS ASM_LJ_ARGS ASM_LJTAB_ARGS);	
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl0300_sse2(ASM_COMMON_ARGS ASM_LJ_ARGS ASM_LJTAB_ARGS);
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl0300_altivec(ASM_COMMON_ARGS ASM_LJ_ARGS ASM_LJTAB_ARGS);
	  else
#endif
	    FUNC(inl0300,INL0300)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 LJ_ARGS LJTAB_ARGS);
	break;
	case eNR_INL0310:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
            inl0310_sse(ASM_COMMON_ARGS ASM_LJ_ARGS ASM_LJTAB_ARGS SOLMN_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
            inl0310_3dnow(ASM_COMMON_ARGS ASM_LJ_ARGS ASM_LJTAB_ARGS SOLMN_ARGS);
	  else 
#endif
            FUNC(inl0310,INL0310)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 LJ_ARGS LJTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL0301:
	  FUNC(inl0301,INL0301)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 LJ_ARGS LJTAB_ARGS FREE_ARGS FREE_TYPEB);
	break;
	case eNR_INL0302:
	  fatal_error(0,"Can't do softcore with the SPEC benchmark version");
	break;
	case eNR_INL0400:
	  FUNC(inl0400,INL0400)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 LJ_ARGS LJTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INL0410:
          FUNC(inl0410,INL0410)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 LJ_ARGS LJTAB_ARGS BHTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL0401:
	  FUNC(inl0401,INL0401)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 LJ_ARGS LJTAB_ARGS BHTAB_ARGS FREE_ARGS FREE_TYPEB);
	break;
	case eNR_INL0402:
	  fatal_error(0,"Can't do softcore with the SPEC benchmark version");
	break;
	case eNR_INL1000:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl1000_sse(ASM_COMMON_ARGS ASM_COUL_ARGS);	
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl1000_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS);	
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl1000_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS);
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl1000_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS);	
	  else
#endif
	    FUNC(inl1000,INL1000)(COMMON_ARGS INVSQRT_BUF1 COUL_ARGS);
	break;
	case eNR_INL1010:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl1010_sse(ASM_COMMON_ARGS ASM_COUL_ARGS SOLMN_ARGS);	
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl1010_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS SOLMN_ARGS);	
	  else 
#endif
	    FUNC(inl1010,INL1010)(COMMON_ARGS INVSQRT_S_BUF1 COUL_ARGS SOLMN_ARGS);
 	break;
	case eNR_INL1020:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl1020_sse(ASM_COMMON_ARGS ASM_COUL_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl1020_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS);
	  else 
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl1020_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS);
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl1020_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS);	
	  else
#endif
	    FUNC(inl1020,INL1020)(COMMON_ARGS INVSQRT_W_BUF1 COUL_ARGS);
	break;
	case eNR_INL1030:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl1030_sse(ASM_COMMON_ARGS ASM_COUL_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl1030_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS);
	  else 
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl1030_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS);
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl1030_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS);	
	  else
#endif
	    FUNC(inl1030,INL1030)(COMMON_ARGS INVSQRT_WW_BUF1 COUL_ARGS);
	break;
	case eNR_INL1100:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl1100_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl1100_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);
	  else 
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl1100_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl1100_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);
	  else
#endif
	    FUNC(inl1100,INL1100)(COMMON_ARGS INVSQRT_BUF1 COUL_ARGS LJ_ARGS);
	break;
	case eNR_INL1110:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl1110_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS SOLMN_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl1110_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS SOLMN_ARGS);
	  else 
#endif
    	    FUNC(inl1110,INL1110)(COMMON_ARGS INVSQRT_BUF1 COUL_ARGS LJ_ARGS SOLMN_ARGS);
	break;
	case eNR_INL1120:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl1120_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl1120_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl1120_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl1120_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);
	  else
#endif
	    FUNC(inl1120,INL1120)(COMMON_ARGS INVSQRT_W_BUF1 COUL_ARGS LJ_ARGS);
	break;
	case eNR_INL1130:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl1130_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);		
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl1130_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);		
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl1130_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);		
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl1130_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS);
	  else
#endif
	    FUNC(inl1130,INL1130)(COMMON_ARGS INVSQRT_WW_BUF1 COUL_ARGS LJ_ARGS);
	break;
	case eNR_INL1200:
	  FUNC(inl1200,INL1200)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS LJ_ARGS);
	break;
	case eNR_INL1210:
	  FUNC(inl1210,INL1210)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS LJ_ARGS SOLMN_ARGS);
	break;
	case eNR_INL1220:
	  FUNC(inl1220,INL1220)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS LJ_ARGS);
	break;
	case eNR_INL1230:
	  FUNC(inl1230,INL1230)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS LJ_ARGS);
	break;
	case eNR_INL1300:
	  FUNC(inl1300,INL1300)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS LJ_ARGS LJTAB_ARGS);
	break;
	case eNR_INL1310:
	  FUNC(inl1310,INL1310)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS LJ_ARGS LJTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL1320:
	  FUNC(inl1320,INL1320)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS LJ_ARGS LJTAB_ARGS);
	break;
	case eNR_INL1330:
	  FUNC(inl1330,INL1330)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS LJ_ARGS LJTAB_ARGS);
	break;
	case eNR_INL1400:
	  FUNC(inl1400,INL1400)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS LJ_ARGS LJTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INL1410:
	  FUNC(inl1410,INL1410)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS LJ_ARGS LJTAB_ARGS BHTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL1420:
	  FUNC(inl1420,INL1420)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS LJ_ARGS LJTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INL1430:
	  FUNC(inl1430,INL1430)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS LJ_ARGS LJTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INL2000:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
          if(cpu_capabilities & X86_SSE_SUPPORT)	
	    inl2000_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS);	
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl2000_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS);	
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl2000_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS);	
	  else
#endif
	    FUNC(inl2000,INL2000)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS RF_ARGS);
	break;
	case eNR_INL2010:
	  FUNC(inl2010,INL2010)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS RF_ARGS SOLMN_ARGS);
	break;
	case eNR_INL2020:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
          if(cpu_capabilities & X86_SSE_SUPPORT)	
	    inl2020_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS);	
	  else	
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl2020_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS);	
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl2020_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS);	
	  else
#endif
	    FUNC(inl2020,INL2020)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS RF_ARGS);
	break;
	case eNR_INL2030:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
          if(cpu_capabilities & X86_SSE_SUPPORT)	
	    inl2030_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS);	
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl2030_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS);	
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl2030_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS);	
	  else
#endif
	    FUNC(inl2030,INL2030)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS RF_ARGS);
	break;
	case eNR_INL2100:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
          if(cpu_capabilities & X86_SSE_SUPPORT)	
	    inl2100_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS ASM_LJ_ARGS);	
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl2100_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS ASM_LJ_ARGS);	
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl2100_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS ASM_LJ_ARGS);	
	  else
#endif
	    FUNC(inl2100,INL2100)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS RF_ARGS LJ_ARGS);
	break;
	case eNR_INL2110:
	  FUNC(inl2110,INL2110)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS RF_ARGS LJ_ARGS SOLMN_ARGS);
	break;
	case eNR_INL2120:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
          if(cpu_capabilities & X86_SSE_SUPPORT)	
	    inl2120_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS ASM_LJ_ARGS);	
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl2120_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS ASM_LJ_ARGS);	
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl2120_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS ASM_LJ_ARGS);	
	  else
#endif
	    FUNC(inl2120,INL2120)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS RF_ARGS LJ_ARGS);
	break;
	case eNR_INL2130:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
          if(cpu_capabilities & X86_SSE_SUPPORT)	
	    inl2130_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS ASM_LJ_ARGS);	
	  else	
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl2130_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS ASM_LJ_ARGS);	
	  else	
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl2130_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_RF_ARGS ASM_LJ_ARGS);	
	  else
#endif
	    FUNC(inl2130,INL2130)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS RF_ARGS LJ_ARGS);
	break;
	case eNR_INL2200:
	  FUNC(inl2200,INL2200)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS RF_ARGS LJ_ARGS);
	break;
	case eNR_INL2210:
	  FUNC(inl2210,INL2210)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS RF_ARGS LJ_ARGS SOLMN_ARGS);
	break;
	case eNR_INL2220:
	  FUNC(inl2220,INL2220)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS RF_ARGS LJ_ARGS);
	break;
	case eNR_INL2230:
	  FUNC(inl2230,INL2230)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS RF_ARGS LJ_ARGS);
	break;
	case eNR_INL2300:
	  FUNC(inl2300,INL2300)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS RF_ARGS LJ_ARGS LJTAB_ARGS);
	break;
	case eNR_INL2310:
	  FUNC(inl2310,INL2310)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS RF_ARGS LJ_ARGS LJTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL2320:
	  FUNC(inl2320,INL2320)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS RF_ARGS LJ_ARGS LJTAB_ARGS);
	break;
	case eNR_INL2330:
	  FUNC(inl2330,INL2330)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS RF_ARGS LJ_ARGS LJTAB_ARGS);
	break;
	case eNR_INL2400:
	  FUNC(inl2400,INL2400)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS RF_ARGS LJ_ARGS LJTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INL2410:
	  FUNC(inl2410,INL2410)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS RF_ARGS LJ_ARGS LJTAB_ARGS BHTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL2420:
	  FUNC(inl2420,INL2420)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS RF_ARGS LJ_ARGS LJTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INL2430:
	  FUNC(inl2430,INL2430)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS RF_ARGS LJ_ARGS LJTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INL3000:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3000_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3000_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl3000_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);
	  else
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl3000_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);
	  else
#endif
	    FUNC(inl3000,INL3000)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS COULTAB_ARGS);
	break;
	case eNR_INL3001:
	  FUNC(inl3001,INL3001)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS COULTAB_ARGS FREE_ARGS FREE_CHARGEB);
	break;
	case eNR_INL3002:
	  fatal_error(0,"Can't do softcore with the SPEC benchmark version");
	break;
	case eNR_INL3010:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3010_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS SOLMN_ARGS);		
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3010_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS SOLMN_ARGS);		
	  else 
#endif
    	    FUNC(inl3010,INL3010)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS COULTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL3020:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3020_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);		
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3020_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);		
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl3020_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);		
	  else 	    
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl3020_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);
	  else
#endif
	    FUNC(inl3020,INL3020)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS COULTAB_ARGS);
	break;
	case eNR_INL3030:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3030_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);		
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3030_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);		
	  else 
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl3030_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);		
	  else 
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl3030_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_COULTAB_ARGS);
	  else
#endif
	    FUNC(inl3030,INL3030)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS COULTAB_ARGS);
	break;
	case eNR_INL3100:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT) 
	    inl3100_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3100_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl3100_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);
	  else 
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl3100_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);
	  else
#endif
	    FUNC(inl3100,INL3100)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS LJ_ARGS COULTAB_ARGS);
	break;
	case eNR_INL3110:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3110_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS SOLMN_ARGS);		
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3110_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS SOLMN_ARGS);		
	  else 
#endif
    	    FUNC(inl3110,INL3110)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS LJ_ARGS COULTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL3120:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3120_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);		
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3120_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);		
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl3120_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);		
	  else  
#elif defined USE_PPC_ALTIVEC
          if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl3120_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);
	  else
#endif
	    FUNC(inl3120,INL3120)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS LJ_ARGS COULTAB_ARGS);
	break;
	case eNR_INL3130:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3130_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);	
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3130_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);	
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl3130_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);	
	  else 	    
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl3130_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_COULTAB_ARGS);
	  else
#endif
	    FUNC(inl3130,INL3130)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS LJ_ARGS COULTAB_ARGS);
	break;
	case eNR_INL3200:
	  FUNC(inl3200,INL3200)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS LJ_ARGS COULTAB_ARGS);
	break;
	case eNR_INL3210:
	  FUNC(inl3210,INL3210)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS LJ_ARGS COULTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL3220:
	  FUNC(inl3220,INL3220)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS LJ_ARGS COULTAB_ARGS);
	break;
	case eNR_INL3230:
	  FUNC(inl3230,INL3230)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS LJ_ARGS COULTAB_ARGS);
	break;
	case eNR_INL3300:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3300_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3300_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl3300_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);
	  else 	    
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl3300_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);
	  else
#endif
	    FUNC(inl3300,INL3300)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS);
	break;
	case eNR_INL3301:
	  FUNC(inl3301,INL3301)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS FREE_ARGS FREE_CHARGEB FREE_TYPEB);
	break;
	case eNR_INL3302:
	  fatal_error(0,"Can't do softcore with the SPEC benchmark version");
		break;
	case eNR_INL3310:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3310_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS SOLMN_ARGS);		
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3310_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS SOLMN_ARGS);		
	  else 
#endif
    	    FUNC(inl3310,INL3310)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL3320:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3320_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3320_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl3320_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);
	  else 	    
#elif defined USE_PPC_ALTIVEC
          if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl3320_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);
	  else
#endif
	    FUNC(inl3320,INL3320)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS);
	break;
	case eNR_INL3330:
#if (defined USE_X86_SSE_AND_3DNOW && !defined DOUBLE)
	  if(cpu_capabilities & X86_SSE_SUPPORT)
	    inl3330_sse(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);		
	  else if(cpu_capabilities & X86_3DNOW_SUPPORT)
	    inl3330_3dnow(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);		
	  else
#elif (defined USE_X86_SSE2 && defined DOUBLE)
	  if(cpu_capabilities & X86_SSE2_SUPPORT)
	    inl3330_sse2(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);		
	  else 	    
#elif defined USE_PPC_ALTIVEC
	  if(cpu_capabilities & PPC_ALTIVEC_SUPPORT)
	    inl3330_altivec(ASM_COMMON_ARGS ASM_COUL_ARGS ASM_LJ_ARGS ASM_LJCTAB_ARGS);
	  else
#endif
	    FUNC(inl3330,INL3330)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS);
	break;
	case eNR_INL3400:
	  FUNC(inl3400,INL3400)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INL3401:
	  FUNC(inl3401,INL3401)(COMMON_ARGS INVSQRT_BUF1 INVSQRT_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS BHTAB_ARGS FREE_ARGS FREE_CHARGEB FREE_TYPEB);
	break;
	case eNR_INL3402:
	  fatal_error(0,"Can't do softcore with the SPEC benchmark version");
	break;
	case eNR_INL3410:
	  FUNC(inl3410,INL3410)(COMMON_ARGS INVSQRT_S_BUF1 INVSQRT_S_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS BHTAB_ARGS SOLMN_ARGS);
	break;
	case eNR_INL3420:
	  FUNC(inl3420,INL3420)(COMMON_ARGS INVSQRT_W_BUF1 INVSQRT_W_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INL3430:
	  FUNC(inl3430,INL3430)(COMMON_ARGS INVSQRT_WW_BUF1 INVSQRT_WW_BUF2 COUL_ARGS LJ_ARGS LJCTAB_ARGS BHTAB_ARGS);
	break;
	case eNR_INLNONE:
	fatal_error(0,"nrnb_ind is \"NONE\", bad selection made in ns.c");
      default:
	fatal_error(0,"No function corresponding to %s in %s `line' %d",
		    nrnb_str(nrnb_ind),__FILE__,__LINE__);
      }
      /* Mega flops accounting */
      if (nlist->solvent==esolWATER) 
        inc_nrnb(nrnb,eNR_INL_IATOM,3*nlist->nri);
      else if (nlist->solvent==esolWATERWATER)
        inc_nrnb(nrnb,eNR_INL_IATOM,9*nlist->nri);
      else if (nlist->solvent!=esolMNO)
       inc_nrnb(nrnb,eNR_INL_IATOM,nlist->nri);


      if (nlist->solvent==esolMNO) {
	switch(nrnb_ind) {
	case eNR_INL1110:
	case eNR_INL1210:
	case eNR_INL1310:
	case eNR_INL1410:
	case eNR_INL2110:
	case eNR_INL2210:
	case eNR_INL2310:
	case eNR_INL2410:
	case eNR_INL3110:
	case eNR_INL3210:
	case eNR_INL3310:
	case eNR_INL3410:
	  /* vdwc loops */
	  nav = fr->nMNOav[0];
	  inc_nrnb(nrnb,eNR_INL_IATOM,nav*nlist->nri);
	  inc_nrnb(nrnb,nrnb_ind,nav*nlist->nrj);
          break;
	case eNR_INL1010:
	case eNR_INL2010:
	case eNR_INL3010:
	  /* coul loops */
	  nav = fr->nMNOav[0];
	  inc_nrnb(nrnb,eNR_INL_IATOM,nav*nlist->nri);
	  inc_nrnb(nrnb,nrnb_ind,nav*nlist->nrj);
          break;
	case eNR_INL0110:
	case eNR_INL0210:
	case eNR_INL0310:
	case eNR_INL0410:
	  /* vdw loops */
	  nav = fr->nMNOav[0];
	  inc_nrnb(nrnb,eNR_INL_IATOM,nav*nlist->nri);
	  inc_nrnb(nrnb,nrnb_ind,nav*nlist->nrj);
          break;
	default:
	  fatal_error(0,"MFlops accounting wrong in %s, %d, nrnb_ind = %d",
		      __FILE__,__LINE__,nrnb_ind);
	}	
      } 
      else 
        inc_nrnb(nrnb,nrnb_ind,nlist->nrj);	
    }
  }
}
