void w_serial(gauge_file *gf)
{
  /* gf  = file descriptor as opened by w_serial_i */

  FILE *fp;
  gauge_header *gh;
  u_int32type *val;
  int rank29,rank31;
  su3_matrix *lbuf;
  su3_matrix tbuf[4];
  int buf_length;
  register int i,j,k;
  off_t offset;             /* File stream pointer */
  off_t coord_list_size;    /* Size of coordinate list in bytes */
  off_t head_size;          /* Size of header plus coordinate list */
  off_t checksum_offset;    /* Location of checksum */
  off_t gauge_check_size;   /* Size of checksum record */

  int currentnode,newnode;
  int x,y,z,t;

  if(this_node==0)
    {
      if(gf->parallel)
	printf("w_serial: Attempting serial write to parallel file \n");

      lbuf = (su3_matrix *)calloc(MAX_BUF_LENGTH*4, sizeof(su3_matrix));
      if(lbuf == NULL)
	{
	  printf("w_serial: Node 0 can't malloc lbuf\n"); 
	  fflush(stdout);terminate(1);
        }

      fp = gf->fp;
      gh = gf->header;
      
      /* No coordinate list was written because fields are to be written
	 in standard coordinate list order */
      
      coord_list_size = 0;
      head_size = gh->header_bytes + coord_list_size;

      checksum_offset = head_size;

      gauge_check_size = sizeof(gf->check.sum29) + sizeof(gf->check.sum31);
      
      offset = head_size + gauge_check_size;

      if( fseeko(fp,offset,SEEK_SET) < 0 ) 
	{
#if defined(SPEC_CPU)
	  printf("w_serial: Node %d fseeko failed error %d file %s\n",
		 this_node,errno,gf->filename);
#elif defined(MSVC6_CANT_DO_LONG_LONG)
	  printf("w_serial: Node %d fseeko %I64d failed error %d file %s\n",
		 this_node,(_int64)offset,errno,gf->filename);
#else
	  printf("w_serial: Node %d fseeko %lld failed error %d file %s\n",
		 this_node,(long long)offset,errno,gf->filename);
#endif
	  fflush(stdout);terminate(1);
	}
    }
      
  /* Buffered algorithm for writing fields in serial order */
  
  /* initialize checksums */
  gf->check.sum31 = 0;
  gf->check.sum29 = 0;
  /* counts 32-bit words mod 29 and mod 31 in order of appearance on file */
  /* Here only node 0 uses these values */
  rank29 = 4*sizeof(su3_matrix)/sizeof(int32type)*sites_on_node*this_node % 29;
  rank31 = 4*sizeof(su3_matrix)/sizeof(int32type)*sites_on_node*this_node % 31;

  g_sync();
  currentnode=0;

  buf_length = 0;

  for(j=0,t=0;t<nt;t++)for(z=0;z<nz;z++)for(y=0;y<ny;y++)for(x=0;x<nx;x++,j++)
    {
      newnode=node_number(x,y,z,t);
      if(newnode != currentnode){	/* switch to another node */
	/* Send a few bytes to tell newnode it's OK to send */
	if( this_node==0 && newnode!=0 )send_field((char *)tbuf,4,newnode);
	if( this_node==newnode && newnode!=0 )get_field((char *)tbuf,4);
	currentnode=newnode;
      }
      
      if(this_node==0)
	{
	  if(currentnode==0)
	    {
	      i=node_index(x,y,z,t);
	      for(k=0;k<4;k++)tbuf[k] = lattice[i].link[k];
	    }
	  else
	    {
	      get_field((char *)tbuf,4*sizeof(su3_matrix));
	    }

	  memcpy((void *)&lbuf[4*buf_length], 
		 (void *)tbuf, 4*sizeof(su3_matrix));


	  /* Accumulate checksums - contribution from next site */
	  for(k = 0, val = (u_int32type *)&lbuf[4*buf_length]; 
	      k < 4*(int)sizeof(su3_matrix)/(int)sizeof(int32type); k++, val++)
	    {
	      gf->check.sum29 ^= (*val)<<rank29 | (*val)>>(32-rank29);
	      gf->check.sum31 ^= (*val)<<rank31 | (*val)>>(32-rank31);
	      rank29++; if(rank29 >= 29)rank29 = 0;
	      rank31++; if(rank31 >= 31)rank31 = 0;
	    }

	  buf_length++;
	  

	  if( (buf_length == MAX_BUF_LENGTH) || (j == volume-1))
	    {
	      /* write out buffer */
	      
	      if( (int)fwrite(lbuf,4*sizeof(su3_matrix),buf_length,fp) != buf_length)
		{
		  printf("w_serial: Node %d gauge configuration write error %d file %s\n",
			 this_node,errno,gf->filename); 
		  fflush(stdout);
		  terminate(1);   
		}
	      buf_length = 0;		/* start again after write */
	    }
	}
      else  /* for nodes other than 0 */
	{	
	  if(this_node==currentnode){
	    i=node_index(x,y,z,t);
	    send_field((char *)lattice[i].link,4*sizeof(su3_matrix),0);
	  }
	}
      
    } /*close x,y,z,t loops */
  
  g_sync();
  
  if(this_node==0)
    {
      free(lbuf);
      printf("Saved gauge configuration serially to binary file %s\n",
	     gf->filename);
      printf("Time stamp %s\n",gh->time_stamp);
      
      /* Write checksum */
      /* Position file pointer */
      if( fseeko(fp,checksum_offset,SEEK_SET) < 0 ) 
	{
#if defined(SPEC_CPU)
	  printf("w_serial: Node %d fseeko failed error %d file %s\n",
		 this_node,errno,gf->filename);
#elif defined(MSVC6_CANT_DO_LONG_LONG)
	  printf("w_serial: Node %d fseeko %I64d failed error %d file %s\n",
		 this_node,(_int64)offset,errno,gf->filename);
#else
	  printf("w_serial: Node %d fseeko %lld failed error %d file %s\n",
		 this_node,(long long)offset,errno,gf->filename);
#endif
	  fflush(stdout);terminate(1);
	}
      write_checksum(SERIAL,gf);
    }
  
} /* w_serial */
