void w_checkpoint(gauge_file *gf)
{
  /* gf  = file descriptor as opened by w_checkpoint_i */

  FILE *fp;
  su3_matrix *lbuf;
  u_int32type *val;
  int k;
  int rank29,rank31;
  off_t checksum_offset;
  int buf_length;
  register site *s;
  register int i;
  char myname[] = "w_checkpoint";

  fp = gf->fp;

  lbuf = w_parallel_setup(gf,&checksum_offset);

  /* C. McNeile's algorithm, changed slightly*/

  /* initialize checksums */
  gf->check.sum31 = 0;
  gf->check.sum29 = 0;
  /* counts 32-bit words mod 29 and mod 31 in order of appearance on file */
  /* Here all nodes use these values */
  rank29 = 4*sizeof(su3_matrix)/sizeof(int32type)*sites_on_node*this_node % 29;
  rank31 = 4*sizeof(su3_matrix)/sizeof(int32type)*sites_on_node*this_node % 31;

  buf_length = 0;

  FORALLSITES(i,s)
  {
        
    /* load the gauge configuration into the buffer */
    memcpy((void *)&lbuf[4*buf_length], 
	   (void *)lattice[i].link, 4*sizeof(su3_matrix));

    /* Accumulate checksums - contribution from next site moved into buffer*/
    for(k = 0, val = (u_int32type *)&lbuf[4*buf_length]; 
	k < 4*(int)sizeof(su3_matrix)/(int)sizeof(int32type); k++, val++)
      {
	gf->check.sum29 ^= (*val)<<rank29 | (*val)>>(32-rank29);
	gf->check.sum31 ^= (*val)<<rank31 | (*val)>>(32-rank31);
	rank29++; if(rank29 >= 29)rank29 = 0;
	rank31++; if(rank31 >= 31)rank31 = 0;
      }

    buf_length++;
    
    if( (buf_length == MAX_BUF_LENGTH) || (i == sites_on_node -1))
      {
	/* write out buffer */
	
	fflush(stdout);
	if( (int)g_write(lbuf,4*sizeof(su3_matrix),buf_length,fp) != buf_length)
	  {
	    printf("%s: Node %d gauge configuration write error %d file %s\n",
		   myname,this_node,errno,gf->filename); 
	    fflush(stdout);
	    terminate(1);   
	  }
	buf_length = 0;		/* start again after write */
      }
    
  } 
  
  free(lbuf);

  /* Combine checksums */

  g_xor32(&gf->check.sum29);
  g_xor32(&gf->check.sum31);

  /* Write checksum at end of lattice file */

  /* Position file for writing checksum */
  /* Only node 0 writes checksum data */
      
  if(this_node == 0)
    {
      if( g_seek(fp,checksum_offset,SEEK_SET) < 0 ) 
	{
	  printf("%s: Node %d g_seek %ld for checksum failed error %d file %s\n",
		 myname,this_node,(long)checksum_offset,errno,gf->filename);
	  fflush(stdout);terminate(1);   
	}

      write_checksum(PARALLEL,gf);
      
      printf("Saved gauge configuration checkpoint file %s\n",
	     gf->filename);
      printf("Time stamp %s\n",(gf->header)->time_stamp);
    }

} /* w_checkpoint */
