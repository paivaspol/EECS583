void check_invert( field_offset src, field_offset dest, double mass,
		   double tol){
    register int i,k,flag;
    register site *s;
    double r_diff, i_diff;
    double sum,sum2;
    dslash( src, F_OFFSET(cg_p), EVENANDODD);
    FORALLSITES(i,s){
	scalar_mult_add_su3_vector( &(s->cg_p), (su3_vector *)F_PT(s,src),
	    +2.0*mass, &(s->cg_p) );
    }
    sum2=sum=0.0;
    FORALLSITES(i,s){
	for(flag=0,k=0;k<3;k++){
	    r_diff = ((su3_vector *)F_PT(s,dest))->c[k].real
		    - s->cg_p.c[k].real;
	    i_diff = ((su3_vector *)F_PT(s,dest))->c[k].imag
		    - s->cg_p.c[k].imag;
	    if( fabs(r_diff) > tol || fabs(i_diff) > tol )flag=1;
	    if(flag)printf("%d %d  ( %.4e , %.4e )  ( %.4e , %.4e )\n",
		i,k,
		((su3_vector *)F_PT(s,dest))->c[k].real,
		((su3_vector *)F_PT(s,dest))->c[k].imag,
		s->cg_p.c[k].real,s->cg_p.c[k].imag);
	    if(flag)terminate(0);
	    sum += r_diff*r_diff + i_diff*i_diff;
	}
	sum2 += magsq_su3vec( (su3_vector *)F_PT(s,dest) );
    }
    g_doublesum( &sum );
    g_doublesum( &sum2 );
    g_sync(); if(this_node==0){
	printf("Inversion checked, frac. error = %e\n",sqrt(sum/sum2));
	fflush(stdout);
    }
}
