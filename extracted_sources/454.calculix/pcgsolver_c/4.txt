void PreConditioning (double *A, int neq, int len, int *ia, int *iz, 
							double alpha, int precFlg,
		      double *C, int *ier)
{
	int				i=0, j=0, jlo=0, jup=0, k=0, klo=0, kup=0, l=0, llo=0, lup=0;
	int				id=0, nILU=0, m=0;
	double			factor;
		factor = 1.0/(1.0+alpha);
/*..division of the off-diagonal elements of A by factor (1.0+alpha)...............	*/
	C[0] = A[0];
	for (i=1; i<neq; i++)
	{
		jlo = iz[i-1]+1;			/*..first non-zero element in current row......	*/
		jup = iz[i];				/*..diagonal element...........................	*/
		C[jup] = A[jup];			/*..copy of diagonal element...................	*/
		for (j=jlo; j<jup; j++)		/*..all non-zero off-diagonal elements.........	*/
			C[j] = A[j]*factor;
	}
	nILU = neq;		/*..ILU on full matrix.................	*/
/*..partial Cholesky decomposition of scaled matrix A..............................	*/
	for (i=1; i<nILU; i++)
	{
		jlo = iz[i-1]+1;			/*..first non-zero element in current row......	*/
		jup = iz[i];				/*..diagonal element...........................	*/
		for (j=jlo; j<jup; j++)		/*..all non-zero off-diagonal elements.........	*/
		{
			C[j] /= C[iz[ia[j]]];
			klo = j+1;				/*..next non-zero element in current row.......	*/
			kup = jup;				/*..diagonal element in current row............	*/
			for (k=klo; k<=kup; k++)
			{
				m = ia[k];
				llo = iz[m-1]+1;
				lup = iz[m];
				for (l=llo; l<=lup; l++)
				{
					if (ia[l]>ia[j])	break;
					if (ia[l]<ia[j])	continue;
					C[k] -= C[j]*C[l];
					break;
				}
			}
		}
		id = iz[i];
		if (C[id]<1.0e-6){
		  return;
		}
		C[id] = sqrt(C[id]);
	}
	*ier=1;
	return;
}
