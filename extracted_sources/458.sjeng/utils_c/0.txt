int allocate_time (void) {

  /* calculate the ammount of time the program can use in its search, measured
     in centi-seconds (calculate everything in float for more accuracy as
     we go, and return the result as an int) */

  double allocated_time = 0.0, move_speed = 20.0;

  /* sudden death time allocation: */
  if (!moves_to_tc) {
    /* calculate move speed.  The idea is that if we are behind, we move
       faster, and if we have < 1 min left and a small increment, we REALLY
       need to start moving fast.  Also, if we aren't in a super fast
       game, don't worry about being behind on the clock at the beginning,
       because some players will make instant moves in the opening, and Sjeng
       will play poorly if it tries to do the same. */

    /* check to see if we're behind on time and need to speed up: */
    if ((min_per_game < 6 && !inc)
	|| time_left < (((min_per_game*6000) + (sec_per_game*100))*4.0/5.0))
    {
      if ((opp_time-time_left) > (opp_time/5.0) && xb_mode)
	move_speed = 40.0;
      else if ((opp_time-time_left) > (opp_time/10.0) && xb_mode)
	move_speed = 30.0;
      else if ((opp_time-time_left) > (opp_time/20.0) && xb_mode)
	move_speed = 25.0;
    }

    if ((Variant != Suicide) && (Variant != Losers))
    {
    	if ((time_left-opp_time) > (time_left/5.0) && xb_mode)
        	move_speed -= 10;
    	else if ((time_left-opp_time) > (time_left/10.0) && xb_mode)
        	move_speed -= 5;
    }
    else if (Variant == Suicide)
    {
	move_speed -= 10;
    }
    else if (Variant == Losers)
    {
	move_speed -= 5;
    }

    /* allocate our base time: */
    allocated_time = time_left/move_speed;

    /* add our increment if applicable: */
    if (inc) {
      if (time_left-allocated_time-inc > 500) {
        allocated_time += inc;
      }
      else if (time_left-allocated_time-(inc*2.0/3.0) > 100) {
        allocated_time += inc*2.0/3.0;
       }
     }
  }

  /* conventional clock time allocation: */
  else {
    allocated_time = (((float)min_per_game * 6000.
	    + (float)sec_per_game * 100.)/(float)moves_to_tc) - 100.;

    /* if we've got extra time, use some of it: */
    if (time_cushion) {
      allocated_time += time_cushion*2.1/3.0;
      time_cushion -= (int)(time_cushion*2.1/3.0);
    }
  }

  if (Variant == Bughouse)
  {
	allocated_time *= 1./4.;

	if ((opp_time > time_left) || (opp_time < 1500))
	{
	  /* behind on time or blitzing out */
	  allocated_time *= 1./2.;
	}
  }

  return ((int) allocated_time);

}
