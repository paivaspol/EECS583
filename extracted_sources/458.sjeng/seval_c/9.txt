int suicide_mid_eval (void) {

  /* return a score for the current middlegame position: */

  int srank, pawn_file, pawns[2][11], white_back_pawn[11], black_back_pawn[11];
  int isolated, backwards, i, a, j;
  int score = 0;
  int in_cache;
  int wb = 0, bb = 0, wbc = 0, bbc = 0;
  int wk = 0, bk = 0, wr = 0, br = 0;
  int wn = 0, bn = 0, wp = 0, bp = 0;
  
  in_cache = 0;
  
  checkECache(&score, &in_cache);
  
  if(in_cache)
    {
      if (white_to_move == 1) return score;
      return -score;
    } 

  score = Material;

  /* initialize the pawns array, (files offset by one to use dummy files in
     order to easier determine isolated status) and also initialize the
     arrays keeping track of the rank of the most backward pawn: */
  memset (pawns, 0, sizeof (pawns));
  for (i = 0; i < 11; i++) {
    white_back_pawn[i] = 7;
    black_back_pawn[i] = 2;
  }
  for (j = 1, a = 1; (a <= piece_count); j++) {
     i = pieces[j];
    
    if (!i)
      continue;
    else
      a++;

    assert((i > 0) && (i < 145));
 
    pawn_file = file (i)+1;
    srank = rank (i);
    if (board[i] == wpawn) {
      pawns[1][pawn_file]++;
      if (srank < white_back_pawn[pawn_file]) {
	white_back_pawn[pawn_file] = srank;
      }
    }
    else if (board[i] == bpawn) {
      pawns[0][pawn_file]++;
      if (srank > black_back_pawn[pawn_file]) {
	black_back_pawn[pawn_file] = srank;
      }
    }
  }

  /* loop through the board, adding material value, as well as positional
     bonuses for all pieces encountered: */
  for (j = 1, a = 1; (a <= piece_count); j++) {
    i = pieces[j];
    
    if (!i)
      continue;
    else
      a++;

    pawn_file = file (i)+1;
    srank = rank (i);
    switch (board[i]) {
      case (wpawn):
	score += scentral[i];
	score += s_pawn_mobility(i);
        score -= black_saccers(i);
	wp++;
	isolated = FALSE;
	backwards = FALSE;
	
	/* check for backwards pawns: */
	if (white_back_pawn[pawn_file+1] > srank
	    && white_back_pawn[pawn_file-1] > srank) {
	  score -= 8;
	  backwards = TRUE;
	  /* check to see if it is furthermore isolated: */
	  if (!pawns[1][pawn_file+1] && !pawns[1][pawn_file-1]) {
	    score -= 12;
	    isolated = TRUE;
	  }
	}

	if (!pawns[0][pawn_file]) {
	  if (backwards) score -= 5;
	  if (isolated) score -= 8;
	}

	if (pawns[1][pawn_file] > 1)
	  score -= 15*(pawns[1][pawn_file]-1);

	if (!pawns[0][pawn_file] && srank >= black_back_pawn[pawn_file-1] &&
	    srank >= black_back_pawn[pawn_file+1]) {
	  score += 30 + 3*(rank(i)-2);

	  /* outside passer ? */
	  if (file(i) == 1 || file(i) == 8)
	    score += 4 + 2*(rank(i)-2);
	    
	  /* give an extra bonus if a connected, passed pawn: */
	  if (!isolated)
	    {
	      score += 6;
	    }
	}

	/* check for pawn islands */
	if (!pawns[1][pawn_file-1])
	  score -= 20;

	break;

     case (bpawn):
	score -= scentral[i];
	score -= s_pawn_mobility(i);
	score += white_saccers(i);
	isolated = FALSE;
	backwards = FALSE;
        bp++;
	/* check for backwards pawns: */
	if (black_back_pawn[pawn_file+1] < srank
	    && black_back_pawn[pawn_file-1] < srank) {
	  score += 8;
	  backwards = TRUE;
	  /* check to see if it is furthermore isolated: */
	  if (!pawns[0][pawn_file+1] && !pawns[0][pawn_file-1]) {
	    score += 12;
	    isolated = TRUE;
	  }
	}

	if (!pawns[1][pawn_file]) {
	  if (backwards) score += 5;
	  if (isolated) score += 8;
	}

        if (pawns[0][pawn_file] > 1)
	  score += 15*(pawns[0][pawn_file]-1);

	if (!pawns[1][pawn_file] && srank <= white_back_pawn[pawn_file-1] &&
	    srank <= white_back_pawn[pawn_file+1]) {
	  score -= 30 + 3*(7-rank(i));
	      
	  /* outside passer ? */
	  if (file(i) == 1 || file(i) == 8)
	    score -= 4 + 2*(7-rank(i));
	  
	  /* give an extra bonus if a connected, passed pawn: */
	  if (!isolated)
	    {
	      score -= 6;
	    }
	}

	if (!pawns[0][pawn_file-1])
	  score += 20;

	break;

      case (wrook):
	score += scentral[i];
	score += s_rook_mobility(i);
	wr++;
	break;

      case (brook):
	score -= scentral[i];
	score -= s_rook_mobility(i);
	br++;
	break;

      case (wbishop):
	score += scentral[i];
	score += s_bishop_mobility(i);
	if (wb)
	{
	  if (sqcolor[i] != wbc)
	    wb = 99;
	}
	wb++;
	wbc = sqcolor[i];
	break;

      case (bbishop):
	score -= scentral[i];
	score -= s_bishop_mobility(i);
	if (bb) 
	{
	  /* two bishops, check for same color */
          if (sqcolor[i] != bbc)
	    bb = 99;
	}
	bb++;
	bbc = sqcolor[i];
	break;

      case (wknight):
	score += scentral[i];
	score += s_knight_mobility(i);
	wn++;
	break;

      case (bknight):
	score -= scentral[i];
	score -= s_knight_mobility(i);
	bn++;
	break;

      case (wqueen):
	score += scentral[i];
	score += s_rook_mobility(i);
	score += s_bishop_mobility(i);
	break;

      case (bqueen):
	score -= scentral[i];
	score -= s_rook_mobility(i);
	score -= s_bishop_mobility(i);
	break;

      case (wking):
	score += scentral[i] >> 1;
	score += s_king_mobility(i);
	wk++;
	break;

      case (bking):
	score -= scentral[i] >> 1;
	score -= s_king_mobility(i);
	bk++;
	break;
    }
  }

  /* opposite color bishops */
  if ((wb < 99) && (bb < 99) && (wbc != bbc) && (piece_count < 32))
    {
	score = (int)((float)score * (float)((float)piece_count / 32.0));
    }
  
  storeECache(score);
  
  /* adjust for color: */
  if (white_to_move == 1) {
    return score;
  }
  else {
    return -score;
  }

}
