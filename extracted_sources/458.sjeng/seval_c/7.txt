static int white_saccers(int square)
{
  /* for black pawn on square, any black
   * pieces that can sac themselves to it? */
  
  register int f = FALSE;

  /* for white pawn on square, any black
   * pieces that can sac themselves to it? */
  
  /* check for case where is_attacked fails
     because pawns dont move to their attacks */
  
  if (board[square - 24] == wpawn ||
      board[square - 22] == wpawn ||
      board[square - 26] == wpawn)
    {
      return 0;
    }

  /* ok, now check pawn moves */

  if ((rank(square) > 3) 
      && (board[square - 25] == wpawn 
	  ||
	  board[square - 23] == wpawn))
    {
      f = TRUE;
    }
  else if (rank(square) == 5 &&
	   (board[square - 35] == wpawn ||
	    board[square - 37] == wpawn))
    {
      f = TRUE;
    }
  
  if (!f)
    {
      f = (is_attacked(square - 11, 1) ? 1 : 0);
    }
  if (!f)
    {
      f = (is_attacked(square - 13, 1) ? 2 : 0);
    }
  
  if (!f)
    {
      return 0;
    }
  else
    {
      /* black can sac, but is the saccer defended ? */
      
      if (f == 1)
	{
	  if (calc_attackers(square - 11, 1) > 1)
	    {
	      /* yep */
	      return 0;
	    }
	  else
	    {
	      /* nope */
	      return 30;
	    }
	}
      else
	{
	  if (calc_attackers(square - 13, 1) > 1)
	    {
	      return 0;
	    }
	  else
	    {
	      return 30;
	    }
	  
	}
    }

}
