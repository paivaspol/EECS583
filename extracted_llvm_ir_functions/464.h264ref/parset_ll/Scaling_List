define i32 @Scaling_List(i16* nocapture %scalingListinput, i16* nocapture %scalingList, i32 %sizeOfScalingList, i16* nocapture %UseDefaultScalingMatrix, %struct.datapartition* %partition) #0 {
entry:
  %cmp59 = icmp sgt i32 %sizeOfScalingList, 0
  br i1 %cmp59, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %cmp1 = icmp eq i32 %sizeOfScalingList, 16
  br label %for.body

for.body:                                         ; preds = %if.end28, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %if.end28 ]
  %nextScale.063 = phi i32 [ 8, %for.body.lr.ph ], [ %nextScale.1, %if.end28 ]
  %lastScale.062 = phi i32 [ 8, %for.body.lr.ph ], [ %cond34, %if.end28 ]
  %len.061 = phi i32 [ 0, %for.body.lr.ph ], [ %len.1, %if.end28 ]
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %arrayidx = getelementptr inbounds [16 x i8]* @ZZ_SCAN, i64 0, i64 %indvars.iv
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %arrayidx3 = getelementptr inbounds [64 x i8]* @ZZ_SCAN8, i64 0, i64 %indvars.iv
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %.sink.in = phi i8* [ %arrayidx, %cond.true ], [ %arrayidx3, %cond.false ]
  %.sink = load i8* %.sink.in, align 1
  %cmp5 = icmp eq i32 %nextScale.063, 0
  %idxprom36.pre = zext i8 %.sink to i64
  br i1 %cmp5, label %if.end28, label %if.then

if.then:                                          ; preds = %cond.end
  %arrayidx8 = getelementptr inbounds i16* %scalingListinput, i64 %idxprom36.pre
  %0 = load i16* %arrayidx8, align 2, !tbaa !4
  %conv9 = sext i16 %0 to i32
  %sub = sub nsw i32 %conv9, %lastScale.062
  %cmp10 = icmp sgt i32 %sub, 127
  br i1 %cmp10, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then
  %sub13 = add nsw i32 %sub, -256
  br label %if.end17

if.else:                                          ; preds = %if.then
  %cmp14 = icmp slt i32 %sub, -128
  %add = add nsw i32 %sub, 256
  %add.sub = select i1 %cmp14, i32 %add, i32 %sub
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then12
  %delta_scale.0 = phi i32 [ %sub13, %if.then12 ], [ %add.sub, %if.else ]
  %call = tail call i32 @se_v(i8* getelementptr inbounds ([17 x i8]* @.str3, i64 0, i64 0), i32 %delta_scale.0, %struct.datapartition* %partition) #5
  %add18 = add nsw i32 %call, %len.061
  %1 = load i16* %arrayidx8, align 2, !tbaa !4
  %conv21 = sext i16 %1 to i32
  %cmp22 = icmp eq i8 %.sink, 0
  %cmp24 = icmp eq i16 %1, 0
  %cmp24. = and i1 %cmp22, %cmp24
  %land.ext = zext i1 %cmp24. to i16
  %2 = load i16* %UseDefaultScalingMatrix, align 2, !tbaa !4
  %or = or i16 %land.ext, %2
  store i16 %or, i16* %UseDefaultScalingMatrix, align 2, !tbaa !4
  br label %if.end28

if.end28:                                         ; preds = %cond.end, %if.end17
  %len.1 = phi i32 [ %add18, %if.end17 ], [ %len.061, %cond.end ]
  %nextScale.1 = phi i32 [ %conv21, %if.end17 ], [ 0, %cond.end ]
  %cmp29 = icmp eq i32 %nextScale.1, 0
  %cond34 = select i1 %cmp29, i32 %lastScale.062, i32 %nextScale.1
  %conv35 = trunc i32 %cond34 to i16
  %arrayidx37 = getelementptr inbounds i16* %scalingList, i64 %idxprom36.pre
  store i16 %conv35, i16* %arrayidx37, align 2, !tbaa !4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %sizeOfScalingList
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %if.end28, %entry
  %len.0.lcssa = phi i32 [ 0, %entry ], [ %len.1, %if.end28 ]
  ret i32 %len.0.lcssa
}
