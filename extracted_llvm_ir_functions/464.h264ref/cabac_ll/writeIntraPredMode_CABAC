define void @writeIntraPredMode_CABAC(%struct.syntaxelement* nocapture %se, %struct.EncodingEnvironment* %eep_dp) #0 {
entry:
  %0 = load %struct.ImageParameters** @img, align 8, !tbaa !3
  %currentSlice = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 50
  %1 = load %struct.Slice** %currentSlice, align 8, !tbaa !3
  %tex_ctx = getelementptr inbounds %struct.Slice* %1, i64 0, i32 8
  %2 = load %struct.TextureInfoContexts** %tex_ctx, align 8, !tbaa !3
  %value1 = getelementptr inbounds %struct.syntaxelement* %se, i64 0, i32 1
  %3 = load i32* %value1, align 4, !tbaa !0
  %cmp = icmp eq i32 %3, -1
  %arraydecay = getelementptr inbounds %struct.TextureInfoContexts* %2, i64 0, i32 0, i64 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  tail call void @biari_encode_symbol(%struct.EncodingEnvironment* %eep_dp, i16 signext 1, %struct.BiContextType* %arraydecay) #5
  br label %if.end

if.else:                                          ; preds = %entry
  tail call void @biari_encode_symbol(%struct.EncodingEnvironment* %eep_dp, i16 signext 0, %struct.BiContextType* %arraydecay) #5
  %4 = load i32* %value1, align 4, !tbaa !0
  %.tr = trunc i32 %4 to i16
  %conv = and i16 %.tr, 1
  %add.ptr = getelementptr inbounds %struct.TextureInfoContexts* %2, i64 0, i32 0, i64 1
  tail call void @biari_encode_symbol(%struct.EncodingEnvironment* %eep_dp, i16 signext %conv, %struct.BiContextType* %add.ptr) #5
  %5 = load i32* %value1, align 4, !tbaa !0
  %and7 = lshr i32 %5, 1
  %and7.tr = trunc i32 %and7 to i16
  %conv8 = and i16 %and7.tr, 1
  tail call void @biari_encode_symbol(%struct.EncodingEnvironment* %eep_dp, i16 signext %conv8, %struct.BiContextType* %add.ptr) #5
  %6 = load i32* %value1, align 4, !tbaa !0
  %and13 = lshr i32 %6, 2
  %and13.tr = trunc i32 %and13 to i16
  %conv15 = and i16 %and13.tr, 1
  tail call void @biari_encode_symbol(%struct.EncodingEnvironment* %eep_dp, i16 signext %conv15, %struct.BiContextType* %add.ptr) #5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}
