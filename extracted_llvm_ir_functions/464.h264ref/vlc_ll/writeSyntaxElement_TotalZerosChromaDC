define i32 @writeSyntaxElement_TotalZerosChromaDC(%struct.syntaxelement* nocapture %se, %struct.datapartition* nocapture %this_dataPart) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.syntaxelement* %se}, i64 0, metadata !275), !dbg !1097
  tail call void @llvm.dbg.value(metadata !{%struct.datapartition* %this_dataPart}, i64 0, metadata !276), !dbg !1097
  %0 = load %struct.ImageParameters** @img, align 8, !dbg !1098, !tbaa !810
  %yuv_format = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 159, !dbg !1098
  %1 = load i32* %yuv_format, align 4, !dbg !1098, !tbaa !806
  %sub = add nsw i32 %1, -1, !dbg !1098
  tail call void @llvm.dbg.value(metadata !{i32 %sub}, i64 0, metadata !278), !dbg !1098
  %len = getelementptr inbounds %struct.syntaxelement* %se, i64 0, i32 3, !dbg !1099
  %2 = load i32* %len, align 4, !dbg !1099, !tbaa !806
  tail call void @llvm.dbg.value(metadata !{i32 %2}, i64 0, metadata !277), !dbg !1099
  %value1 = getelementptr inbounds %struct.syntaxelement* %se, i64 0, i32 1, !dbg !1100
  %3 = load i32* %value1, align 4, !dbg !1100, !tbaa !806
  %idxprom = sext i32 %3 to i64, !dbg !1100
  %idxprom1 = sext i32 %2 to i64, !dbg !1100
  %idxprom2 = sext i32 %sub to i64, !dbg !1100
  %arrayidx4 = getelementptr inbounds [3 x [15 x [16 x i32]]]* @writeSyntaxElement_TotalZerosChromaDC.lentab, i64 0, i64 %idxprom2, i64 %idxprom1, i64 %idxprom, !dbg !1100
  %4 = load i32* %arrayidx4, align 4, !dbg !1100, !tbaa !806
  store i32 %4, i32* %len, align 4, !dbg !1100, !tbaa !806
  %arrayidx12 = getelementptr inbounds [3 x [15 x [16 x i32]]]* @writeSyntaxElement_TotalZerosChromaDC.codtab, i64 0, i64 %idxprom2, i64 %idxprom1, i64 %idxprom, !dbg !1101
  %5 = load i32* %arrayidx12, align 4, !dbg !1101, !tbaa !806
  %inf = getelementptr inbounds %struct.syntaxelement* %se, i64 0, i32 4, !dbg !1101
  store i32 %5, i32* %inf, align 4, !dbg !1101, !tbaa !806
  %cmp = icmp eq i32 %4, 0, !dbg !1102
  br i1 %cmp, label %if.then, label %if.end, !dbg !1102

if.then:                                          ; preds = %entry
  %call = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([37 x i8]* @.str4, i64 0, i64 0), i32 %3) #7, !dbg !1103
  tail call void @exit(i32 -1) #5, !dbg !1105
  unreachable, !dbg !1105

if.end:                                           ; preds = %entry
  tail call void @llvm.dbg.value(metadata !{%struct.syntaxelement* %se}, i64 0, metadata !1106), !dbg !1108
  tail call void @llvm.dbg.value(metadata !{i32 %4}, i64 0, metadata !1109), !dbg !1110
  %bitpattern.i = getelementptr inbounds %struct.syntaxelement* %se, i64 0, i32 5, !dbg !1111
  store i32 0, i32* %bitpattern.i, align 4, !dbg !1112, !tbaa !806
  %cmp10.i = icmp sgt i32 %4, 0, !dbg !1113
  br i1 %cmp10.i, label %while.body.i, label %symbol2vlc.exit, !dbg !1113

while.body.i:                                     ; preds = %if.end, %while.body.i
  %dec12.in.i = phi i32 [ %dec12.i, %while.body.i ], [ %4, %if.end ]
  %storemerge11.i = phi i32 [ %or.i, %while.body.i ], [ 0, %if.end ]
  %dec12.i = add nsw i32 %dec12.in.i, -1, !dbg !1113
  %shl.i = shl i32 %storemerge11.i, 1, !dbg !1114
  %shr8.i = lshr i32 %5, %dec12.i, !dbg !1112
  %and.i = and i32 %shr8.i, 1, !dbg !1112
  %or.i = or i32 %and.i, %shl.i, !dbg !1112
  tail call void @llvm.dbg.value(metadata !{i32 %dec12.i}, i64 0, metadata !1109), !dbg !1113
  %cmp.i = icmp sgt i32 %dec12.i, 0, !dbg !1113
  br i1 %cmp.i, label %while.body.i, label %while.cond.while.end_crit_edge.i, !dbg !1113

while.cond.while.end_crit_edge.i:                 ; preds = %while.body.i
  store i32 %or.i, i32* %bitpattern.i, align 4, !dbg !1112, !tbaa !806
  br label %symbol2vlc.exit, !dbg !1113

symbol2vlc.exit:                                  ; preds = %if.end, %while.cond.while.end_crit_edge.i
  %bitstream = getelementptr inbounds %struct.datapartition* %this_dataPart, i64 0, i32 0, !dbg !1115
  %6 = load %struct.Bitstream** %bitstream, align 8, !dbg !1115, !tbaa !810
  tail call void @writeUVLC2buffer(%struct.syntaxelement* %se, %struct.Bitstream* %6) #6, !dbg !1115
  %7 = load i32* %len, align 4, !dbg !1116, !tbaa !806
  ret i32 %7, !dbg !1116
}
