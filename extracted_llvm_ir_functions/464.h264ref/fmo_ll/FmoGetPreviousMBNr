define i32 @FmoGetPreviousMBNr(i32 %CurrentMbNr) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{i32 %CurrentMbNr}, i64 0, metadata !644), !dbg !1178
  %call = tail call i32 @FmoMB2SliceGroup(i32 %CurrentMbNr) #10, !dbg !1179
  tail call void @llvm.dbg.value(metadata !{i32 %call}, i64 0, metadata !645), !dbg !1179
  %0 = load i8** @MBAmap, align 8, !dbg !1180, !tbaa !948
  %1 = sext i32 %CurrentMbNr to i64
  br label %while.cond, !dbg !1180

while.cond:                                       ; preds = %land.rhs, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %land.rhs ], [ %1, %entry ]
  %CurrentMbNr.addr.0.in = phi i32 [ %CurrentMbNr.addr.0, %land.rhs ], [ %CurrentMbNr, %entry ]
  %indvars.iv.next = add i64 %indvars.iv, -1
  %CurrentMbNr.addr.0 = add nsw i32 %CurrentMbNr.addr.0.in, -1, !dbg !1181
  %2 = trunc i64 %indvars.iv to i32, !dbg !1180
  %cmp = icmp sgt i32 %2, 0, !dbg !1180
  br i1 %cmp, label %land.rhs, label %while.end, !dbg !1180

land.rhs:                                         ; preds = %while.cond
  %arrayidx = getelementptr inbounds i8* %0, i64 %indvars.iv.next, !dbg !1180
  %3 = load i8* %arrayidx, align 1, !dbg !1180, !tbaa !939
  %conv = zext i8 %3 to i32, !dbg !1180
  %cmp1 = icmp eq i32 %conv, %call, !dbg !1180
  br i1 %cmp1, label %while.end, label %while.cond

while.end:                                        ; preds = %land.rhs, %while.cond
  %cmp4 = icmp slt i32 %CurrentMbNr.addr.0.in, 1, !dbg !1182
  %.CurrentMbNr.addr.0 = select i1 %cmp4, i32 -1, i32 %CurrentMbNr.addr.0, !dbg !1183
  ret i32 %.CurrentMbNr.addr.0, !dbg !1184
}
