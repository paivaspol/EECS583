define i32 @rd_pic_decision(double %snrY_version1, double %snrY_version2, i32 %bits_version1, i32 %bits_version2, double %lambda_picture) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{double %snrY_version1}, i64 0, metadata !25), !dbg !580
  tail call void @llvm.dbg.value(metadata !{double %snrY_version2}, i64 0, metadata !26), !dbg !580
  tail call void @llvm.dbg.value(metadata !{i32 %bits_version1}, i64 0, metadata !27), !dbg !580
  tail call void @llvm.dbg.value(metadata !{i32 %bits_version2}, i64 0, metadata !28), !dbg !580
  tail call void @llvm.dbg.value(metadata !{double %lambda_picture}, i64 0, metadata !29), !dbg !580
  %conv = sitofp i32 %bits_version1 to double, !dbg !581
  %mul = fmul double %conv, %lambda_picture, !dbg !581
  %add = fadd double %mul, %snrY_version1, !dbg !581
  tail call void @llvm.dbg.value(metadata !{double %add}, i64 0, metadata !30), !dbg !581
  %conv1 = sitofp i32 %bits_version2 to double, !dbg !582
  %mul2 = fmul double %conv1, %lambda_picture, !dbg !582
  %add3 = fadd double %mul2, %snrY_version2, !dbg !582
  tail call void @llvm.dbg.value(metadata !{double %add3}, i64 0, metadata !31), !dbg !582
  %cmp = fcmp ogt double %add3, %add, !dbg !583
  br i1 %cmp, label %return, label %lor.lhs.false, !dbg !583

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = fcmp une double %add3, %add, !dbg !583
  %cmp7 = fcmp ult double %snrY_version2, %snrY_version1, !dbg !583
  %or.cond = or i1 %cmp5, %cmp7, !dbg !583
  %. = zext i1 %or.cond to i32, !dbg !583
  ret i32 %., !dbg !583

return:                                           ; preds = %entry
  ret i32 0, !dbg !584
}
