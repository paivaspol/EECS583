define void @RandomIntraInit(i32 %xsize, i32 %ysize, i32 %refresh) #0 {
  tail call void @llvm.dbg.value(metadata i32 %xsize, i64 0, metadata !16, metadata !586), !dbg !587
  tail call void @llvm.dbg.value(metadata i32 %ysize, i64 0, metadata !17, metadata !586), !dbg !588
  tail call void @llvm.dbg.value(metadata i32 %refresh, i64 0, metadata !18, metadata !586), !dbg !589
  tail call void @srand(i32 1) #5, !dbg !590
  %1 = mul nsw i32 %ysize, %xsize, !dbg !591
  store i32 %1, i32* @NumberOfMBs, align 4, !dbg !592, !tbaa !593
  store i32 %refresh, i32* @NumberIntraPerPicture, align 4, !dbg !597, !tbaa !593
  %2 = sext i32 %1 to i64, !dbg !598
  %3 = shl nsw i64 %2, 2, !dbg !599
  %4 = tail call i8* @malloc(i64 %3) #5, !dbg !600
  store i8* %4, i8** bitcast (i32** @RefreshPattern to i8**), align 8, !dbg !601, !tbaa !602
  %5 = icmp eq i8* %4, null, !dbg !604
  br i1 %5, label %6, label %7, !dbg !606

; <label>:6                                       ; preds = %0
  tail call void @no_mem_exit(i8* getelementptr inbounds ([32 x i8]* @.str, i64 0, i64 0)) #5, !dbg !607
  br label %7, !dbg !607

; <label>:7                                       ; preds = %6, %0
  %8 = sext i32 %refresh to i64, !dbg !608
  %9 = shl nsw i64 %8, 2, !dbg !609
  %10 = tail call i8* @malloc(i64 %9) #5, !dbg !610
  store i8* %10, i8** bitcast (i32** @IntraMBs to i8**), align 8, !dbg !611, !tbaa !602
  %11 = icmp eq i8* %10, null, !dbg !612
  br i1 %11, label %12, label %.preheader2, !dbg !614

; <label>:12                                      ; preds = %7
  tail call void @no_mem_exit(i8* getelementptr inbounds ([26 x i8]* @.str1, i64 0, i64 0)) #5, !dbg !615
  br label %.preheader2, !dbg !615

.preheader2:                                      ; preds = %12, %7
  %13 = load i32* @NumberOfMBs, align 4, !dbg !616, !tbaa !593
  %14 = icmp sgt i32 %13, 0, !dbg !619
  br i1 %14, label %.lr.ph, label %._crit_edge, !dbg !620

.lr.ph:                                           ; preds = %.preheader2
  %15 = load i32** @RefreshPattern, align 8, !dbg !621, !tbaa !602
  br label %17, !dbg !620

.preheader1:                                      ; preds = %17
  %16 = icmp sgt i32 %19, 0, !dbg !622
  br i1 %16, label %.preheader, label %._crit_edge, !dbg !625

; <label>:17                                      ; preds = %.lr.ph, %17
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %17 ]
  %18 = getelementptr inbounds i32* %15, i64 %indvars.iv, !dbg !621
  store i32 -1, i32* %18, align 4, !dbg !626, !tbaa !593
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !620
  %19 = load i32* @NumberOfMBs, align 4, !dbg !616, !tbaa !593
  %20 = sext i32 %19 to i64, !dbg !619
  %21 = icmp slt i64 %indvars.iv.next, %20, !dbg !619
  br i1 %21, label %17, label %.preheader1, !dbg !620

.preheader:                                       ; preds = %.preheader1, %31
  %i.13 = phi i32 [ %32, %31 ], [ 0, %.preheader1 ]
  br label %22, !dbg !627

; <label>:22                                      ; preds = %.preheader, %22
  %23 = tail call i32 @rand() #5, !dbg !627
  %24 = load i32* @NumberOfMBs, align 4, !dbg !630, !tbaa !593
  %25 = srem i32 %23, %24, !dbg !631
  tail call void @llvm.dbg.value(metadata i32 %25, i64 0, metadata !20, metadata !586), !dbg !632
  %26 = sext i32 %25 to i64, !dbg !633
  %27 = load i32** @RefreshPattern, align 8, !dbg !633, !tbaa !602
  %28 = getelementptr inbounds i32* %27, i64 %26, !dbg !633
  %29 = load i32* %28, align 4, !dbg !633, !tbaa !593
  %30 = icmp eq i32 %29, -1, !dbg !634
  br i1 %30, label %31, label %22, !dbg !635

; <label>:31                                      ; preds = %22
  store i32 %i.13, i32* %28, align 4, !dbg !636, !tbaa !593
  %32 = add nuw nsw i32 %i.13, 1, !dbg !637
  tail call void @llvm.dbg.value(metadata i32 %32, i64 0, metadata !19, metadata !586), !dbg !638
  %33 = load i32* @NumberOfMBs, align 4, !dbg !639, !tbaa !593
  %34 = icmp slt i32 %32, %33, !dbg !622
  br i1 %34, label %.preheader, label %._crit_edge, !dbg !625

._crit_edge:                                      ; preds = %31, %.preheader2, %.preheader1
  ret void, !dbg !640
}
