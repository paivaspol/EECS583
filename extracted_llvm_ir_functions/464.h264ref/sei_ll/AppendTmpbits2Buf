define void @AppendTmpbits2Buf(%struct.Bitstream* nocapture %dest, %struct.Bitstream* nocapture readonly %source) #0 {
  tail call void @llvm.dbg.value(metadata %struct.Bitstream* %dest, i64 0, metadata !122, metadata !931), !dbg !1105
  tail call void @llvm.dbg.value(metadata %struct.Bitstream* %source, i64 0, metadata !123, metadata !931), !dbg !1106
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !124, metadata !931), !dbg !1107
  %1 = getelementptr inbounds %struct.Bitstream* %source, i64 0, i32 0, !dbg !1108
  %2 = load i32* %1, align 4, !dbg !1108, !tbaa !1111
  %3 = icmp sgt i32 %2, 0, !dbg !1113
  br i1 %3, label %.preheader.lr.ph, label %._crit_edge, !dbg !1114

.preheader.lr.ph:                                 ; preds = %0
  %4 = getelementptr inbounds %struct.Bitstream* %dest, i64 0, i32 2, !dbg !1115
  %5 = getelementptr inbounds %struct.Bitstream* %source, i64 0, i32 9, !dbg !1120
  %6 = getelementptr inbounds %struct.Bitstream* %dest, i64 0, i32 1, !dbg !1122
  %7 = getelementptr inbounds %struct.Bitstream* %dest, i64 0, i32 0, !dbg !1123
  %8 = getelementptr inbounds %struct.Bitstream* %dest, i64 0, i32 9, !dbg !1126
  %.pre.pre = load i8* %4, align 1, !dbg !1127, !tbaa !1128
  br label %.preheader, !dbg !1114

.preheader:                                       ; preds = %.preheader.lr.ph, %36
  %.pre = phi i8 [ %.pre.pre, %.preheader.lr.ph ], [ %34, %36 ]
  %indvars.iv = phi i64 [ 0, %.preheader.lr.ph ], [ %indvars.iv.next, %36 ]
  br label %9, !dbg !1129

; <label>:9                                       ; preds = %33, %.preheader
  %10 = phi i8 [ %.pre, %.preheader ], [ %34, %33 ], !dbg !1127
  %mask.04 = phi i32 [ 128, %.preheader ], [ %25, %33 ]
  %j.03 = phi i32 [ 0, %.preheader ], [ %35, %33 ]
  %11 = shl i8 %10, 1, !dbg !1127
  store i8 %11, i8* %4, align 1, !dbg !1127, !tbaa !1128
  %12 = load i8** %5, align 8, !dbg !1120, !tbaa !1130
  %13 = getelementptr inbounds i8* %12, i64 %indvars.iv, !dbg !1131
  %14 = load i8* %13, align 1, !dbg !1131, !tbaa !977
  %15 = zext i8 %14 to i32, !dbg !1131
  %16 = and i32 %mask.04, 255, !dbg !1132
  %17 = and i32 %15, %16, !dbg !1133
  %18 = icmp eq i32 %17, 0, !dbg !1133
  br i1 %18, label %21, label %19, !dbg !1134

; <label>:19                                      ; preds = %9
  %20 = or i8 %11, 1, !dbg !1135
  store i8 %20, i8* %4, align 1, !dbg !1135, !tbaa !1128
  br label %21, !dbg !1136

; <label>:21                                      ; preds = %9, %19
  %22 = phi i8 [ %11, %9 ], [ %20, %19 ]
  %23 = load i32* %6, align 4, !dbg !1137, !tbaa !1138
  %24 = add nsw i32 %23, -1, !dbg !1137
  store i32 %24, i32* %6, align 4, !dbg !1137, !tbaa !1138
  %25 = lshr i32 %16, 1, !dbg !1139
  %26 = icmp eq i32 %24, 0, !dbg !1140
  br i1 %26, label %27, label %33, !dbg !1141

; <label>:27                                      ; preds = %21
  store i32 8, i32* %6, align 4, !dbg !1142, !tbaa !1138
  %28 = load i32* %7, align 4, !dbg !1143, !tbaa !1111
  %29 = add nsw i32 %28, 1, !dbg !1143
  store i32 %29, i32* %7, align 4, !dbg !1143, !tbaa !1111
  %30 = sext i32 %28 to i64, !dbg !1144
  %31 = load i8** %8, align 8, !dbg !1126, !tbaa !1130
  %32 = getelementptr inbounds i8* %31, i64 %30, !dbg !1144
  store i8 %22, i8* %32, align 1, !dbg !1145, !tbaa !977
  store i8 0, i8* %4, align 1, !dbg !1146, !tbaa !1128
  br label %33, !dbg !1147

; <label>:33                                      ; preds = %21, %27
  %34 = phi i8 [ %22, %21 ], [ 0, %27 ]
  %35 = add nuw nsw i32 %j.03, 1, !dbg !1148
  tail call void @llvm.dbg.value(metadata i32 %35, i64 0, metadata !125, metadata !931), !dbg !1149
  %exitcond6 = icmp eq i32 %35, 8, !dbg !1129
  br i1 %exitcond6, label %36, label %9, !dbg !1129

; <label>:36                                      ; preds = %33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1114
  %37 = load i32* %1, align 4, !dbg !1108, !tbaa !1111
  %38 = sext i32 %37 to i64, !dbg !1113
  %39 = icmp slt i64 %indvars.iv.next, %38, !dbg !1113
  br i1 %39, label %.preheader, label %._crit_edge, !dbg !1114

._crit_edge:                                      ; preds = %36, %0
  %40 = getelementptr inbounds %struct.Bitstream* %source, i64 0, i32 1, !dbg !1150
  %41 = load i32* %40, align 4, !dbg !1150, !tbaa !1138
  %42 = sub nsw i32 8, %41, !dbg !1151
  tail call void @llvm.dbg.value(metadata i32 %42, i64 0, metadata !127, metadata !931), !dbg !1152
  %43 = icmp sgt i32 %42, 0, !dbg !1153
  br i1 %43, label %.lr.ph, label %.loopexit, !dbg !1155

.lr.ph:                                           ; preds = %._crit_edge
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !125, metadata !931), !dbg !1149
  %44 = add nsw i32 %42, -1, !dbg !1156
  %45 = shl i32 1, %44, !dbg !1158
  %46 = getelementptr inbounds %struct.Bitstream* %dest, i64 0, i32 2, !dbg !1159
  %47 = getelementptr inbounds %struct.Bitstream* %source, i64 0, i32 2, !dbg !1163
  %48 = getelementptr inbounds %struct.Bitstream* %dest, i64 0, i32 1, !dbg !1165
  %49 = getelementptr inbounds %struct.Bitstream* %dest, i64 0, i32 0, !dbg !1166
  %50 = getelementptr inbounds %struct.Bitstream* %dest, i64 0, i32 9, !dbg !1169
  %51 = sub i32 7, %41, !dbg !1170
  %.pre8 = load i8* %46, align 1, !dbg !1171, !tbaa !1128
  br label %52, !dbg !1170

; <label>:52                                      ; preds = %74, %.lr.ph
  %53 = phi i8 [ %.pre8, %.lr.ph ], [ %75, %74 ], !dbg !1171
  %mask.1.in2 = phi i32 [ %45, %.lr.ph ], [ %66, %74 ]
  %j.11 = phi i32 [ 0, %.lr.ph ], [ %76, %74 ]
  %54 = shl i8 %53, 1, !dbg !1171
  store i8 %54, i8* %46, align 1, !dbg !1171, !tbaa !1128
  %55 = load i8* %47, align 1, !dbg !1163, !tbaa !1128
  %56 = zext i8 %55 to i32, !dbg !1172
  %57 = and i32 %mask.1.in2, 255, !dbg !1173
  %58 = and i32 %56, %57, !dbg !1174
  %59 = icmp eq i32 %58, 0, !dbg !1174
  br i1 %59, label %62, label %60, !dbg !1175

; <label>:60                                      ; preds = %52
  %61 = or i8 %54, 1, !dbg !1176
  store i8 %61, i8* %46, align 1, !dbg !1176, !tbaa !1128
  br label %62, !dbg !1177

; <label>:62                                      ; preds = %52, %60
  %63 = phi i8 [ %54, %52 ], [ %61, %60 ]
  %64 = load i32* %48, align 4, !dbg !1178, !tbaa !1138
  %65 = add nsw i32 %64, -1, !dbg !1178
  store i32 %65, i32* %48, align 4, !dbg !1178, !tbaa !1138
  %66 = lshr i32 %57, 1, !dbg !1179
  %67 = icmp eq i32 %65, 0, !dbg !1180
  br i1 %67, label %68, label %74, !dbg !1181

; <label>:68                                      ; preds = %62
  store i32 8, i32* %48, align 4, !dbg !1182, !tbaa !1138
  %69 = load i32* %49, align 4, !dbg !1183, !tbaa !1111
  %70 = add nsw i32 %69, 1, !dbg !1183
  store i32 %70, i32* %49, align 4, !dbg !1183, !tbaa !1111
  %71 = sext i32 %69 to i64, !dbg !1184
  %72 = load i8** %50, align 8, !dbg !1169, !tbaa !1130
  %73 = getelementptr inbounds i8* %72, i64 %71, !dbg !1184
  store i8 %63, i8* %73, align 1, !dbg !1185, !tbaa !977
  store i8 0, i8* %46, align 1, !dbg !1186, !tbaa !1128
  br label %74, !dbg !1187

; <label>:74                                      ; preds = %62, %68
  %75 = phi i8 [ %63, %62 ], [ 0, %68 ]
  %76 = add nuw nsw i32 %j.11, 1, !dbg !1188
  tail call void @llvm.dbg.value(metadata i32 %76, i64 0, metadata !125, metadata !931), !dbg !1149
  %exitcond = icmp eq i32 %j.11, %51, !dbg !1170
  br i1 %exitcond, label %.loopexit, label %52, !dbg !1170

.loopexit:                                        ; preds = %74, %._crit_edge
  ret void, !dbg !1189
}
