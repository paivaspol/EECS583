define void @LumaResidualCoding() #0 {
entry:
  %fw_mode = alloca i32, align 4
  %bw_mode = alloca i32, align 4
  %p_dir = alloca i16, align 2
  %refframe = alloca i16, align 2
  %bw_ref = alloca i16, align 2
  %0 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %current_mb_nr = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 3
  %1 = load i32* %current_mb_nr, align 4, !tbaa !3
  %idxprom = sext i32 %1 to i64
  %mb_data = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 51
  %2 = load %struct.macroblock** %mb_data, align 8, !tbaa !0
  %cbp = getelementptr inbounds %struct.macroblock* %2, i64 %idxprom, i32 12
  store i32 0, i32* %cbp, align 4, !tbaa !3
  %cbp_blk = getelementptr inbounds %struct.macroblock* %2, i64 %idxprom, i32 13
  store i64 0, i64* %cbp_blk, align 8, !tbaa !5
  br label %for.body

for.body:                                         ; preds = %for.body, %entry
  %sum_cnt_nonz.095 = phi i32 [ 0, %entry ], [ %add, %for.body ]
  %block8x8.094 = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  call void @SetModesAndRefframe(i32 %block8x8.094, i16* %p_dir, i32* %fw_mode, i32* %bw_mode, i16* %refframe, i16* %bw_ref) #8
  %3 = load i16* %p_dir, align 2, !tbaa !4
  %4 = load i32* %fw_mode, align 4, !tbaa !3
  %5 = load i32* %bw_mode, align 4, !tbaa !3
  %6 = load i16* %refframe, align 2, !tbaa !4
  %7 = load i16* %bw_ref, align 2, !tbaa !4
  %call = call i32 @LumaResidualCoding8x8(i32* %cbp, i64* %cbp_blk, i32 %block8x8.094, i16 signext %3, i32 %4, i32 %5, i16 signext %6, i16 signext %7) #8
  %add = add nsw i32 %call, %sum_cnt_nonz.095
  %inc = add nsw i32 %block8x8.094, 1
  %exitcond101 = icmp eq i32 %inc, 4
  br i1 %exitcond101, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  %cmp3 = icmp slt i32 %add, 6
  br i1 %cmp3, label %land.lhs.true, label %if.end63

land.lhs.true:                                    ; preds = %for.end
  %8 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %qp = getelementptr inbounds %struct.ImageParameters* %8, i64 0, i32 10
  %9 = load i32* %qp, align 4, !tbaa !3
  %bitdepth_luma_qp_scale = getelementptr inbounds %struct.ImageParameters* %8, i64 0, i32 151
  %10 = load i32* %bitdepth_luma_qp_scale, align 4, !tbaa !3
  %add4 = sub i32 0, %10
  %cmp5 = icmp eq i32 %9, %add4
  br i1 %cmp5, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true
  %lossless_qpprime_flag = getelementptr inbounds %struct.ImageParameters* %8, i64 0, i32 160
  %11 = load i32* %lossless_qpprime_flag, align 4, !tbaa !3
  %cmp6 = icmp eq i32 %11, 0
  br i1 %cmp6, label %if.then, label %if.end63

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %12 = load i32* %cbp, align 4, !tbaa !3
  %and = and i32 %12, 16777200
  store i32 %and, i32* %cbp, align 4, !tbaa !3
  %13 = load i64* %cbp_blk, align 8, !tbaa !5
  %and9 = and i64 %13, 16711680
  store i64 %and9, i64* %cbp_blk, align 8, !tbaa !5
  %residue_transform_flag = getelementptr inbounds %struct.ImageParameters* %8, i64 0, i32 164
  %pix_x = getelementptr inbounds %struct.ImageParameters* %8, i64 0, i32 33
  %pix_y = getelementptr inbounds %struct.ImageParameters* %8, i64 0, i32 34
  %14 = load %struct.storable_picture** @enc_picture, align 8, !tbaa !0
  %imgY = getelementptr inbounds %struct.storable_picture* %14, i64 0, i32 25
  br label %for.cond13.preheader

for.cond13.preheader:                             ; preds = %for.inc34, %if.then
  %indvars.iv97 = phi i64 [ 0, %if.then ], [ %indvars.iv.next98, %for.inc34 ]
  br label %for.body15

for.body15:                                       ; preds = %for.inc31, %for.cond13.preheader
  %indvars.iv = phi i64 [ 0, %for.cond13.preheader ], [ %indvars.iv.next, %for.inc31 ]
  %15 = load i32* %residue_transform_flag, align 4, !tbaa !3
  %tobool = icmp eq i32 %15, 0
  br i1 %tobool, label %if.then16, label %if.else

if.then16:                                        ; preds = %for.body15
  %arrayidx20 = getelementptr inbounds %struct.ImageParameters* %8, i64 0, i32 45, i64 %indvars.iv97, i64 %indvars.iv
  %16 = load i16* %arrayidx20, align 2, !tbaa !4
  %17 = load i32* %pix_x, align 4, !tbaa !3
  %18 = trunc i64 %indvars.iv97 to i32
  %add21 = add nsw i32 %17, %18
  %idxprom22 = sext i32 %add21 to i64
  %19 = load i32* %pix_y, align 4, !tbaa !3
  %20 = trunc i64 %indvars.iv to i32
  %add23 = add nsw i32 %19, %20
  %idxprom24 = sext i32 %add23 to i64
  %21 = load i16*** %imgY, align 8, !tbaa !0
  %arrayidx25 = getelementptr inbounds i16** %21, i64 %idxprom24
  %22 = load i16** %arrayidx25, align 8, !tbaa !0
  %arrayidx26 = getelementptr inbounds i16* %22, i64 %idxprom22
  store i16 %16, i16* %arrayidx26, align 2, !tbaa !4
  br label %for.inc31

if.else:                                          ; preds = %for.body15
  %arrayidx30 = getelementptr inbounds [16 x [16 x i32]]* @rec_resG, i64 0, i64 %indvars.iv97, i64 %indvars.iv
  store i32 0, i32* %arrayidx30, align 4, !tbaa !3
  br label %for.inc31

for.inc31:                                        ; preds = %if.then16, %if.else
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond96 = icmp eq i32 %lftr.wideiv, 16
  br i1 %exitcond96, label %for.inc34, label %for.body15

for.inc34:                                        ; preds = %for.inc31
  %indvars.iv.next98 = add i64 %indvars.iv97, 1
  %lftr.wideiv99 = trunc i64 %indvars.iv.next98 to i32
  %exitcond100 = icmp eq i32 %lftr.wideiv99, 16
  br i1 %exitcond100, label %for.end36, label %for.cond13.preheader

for.end36:                                        ; preds = %for.inc34
  %type = getelementptr inbounds %struct.ImageParameters* %8, i64 0, i32 6
  %23 = load i32* %type, align 4, !tbaa !3
  %cmp37 = icmp eq i32 %23, 3
  br i1 %cmp37, label %for.body41, label %if.end63

for.body41:                                       ; preds = %for.end36, %for.inc59
  %block8x8.191 = phi i32 [ %inc60, %for.inc59 ], [ 0, %for.end36 ]
  %and42 = shl i32 %block8x8.191, 3
  %shl = and i32 %and42, 8
  %and43 = shl i32 %block8x8.191, 2
  %shl44 = and i32 %and43, 8
  br label %for.cond48.preheader

for.cond48.preheader:                             ; preds = %for.body41, %for.inc56
  %i.190 = phi i32 [ 0, %for.body41 ], [ %add57, %for.inc56 ]
  %add51 = add nsw i32 %i.190, %shl
  br label %for.body50

for.body50:                                       ; preds = %for.cond48.preheader, %for.body50
  %j.189 = phi i32 [ 0, %for.cond48.preheader ], [ %add54, %for.body50 ]
  %add52 = add nsw i32 %j.189, %shl44
  call void @copyblock_sp(i32 %add51, i32 %add52) #7
  %add54 = add nsw i32 %j.189, 4
  %cmp49 = icmp slt i32 %add54, 8
  br i1 %cmp49, label %for.body50, label %for.inc56

for.inc56:                                        ; preds = %for.body50
  %add57 = add nsw i32 %i.190, 4
  %cmp46 = icmp slt i32 %add57, 8
  br i1 %cmp46, label %for.cond48.preheader, label %for.inc59

for.inc59:                                        ; preds = %for.inc56
  %inc60 = add nsw i32 %block8x8.191, 1
  %exitcond = icmp eq i32 %inc60, 4
  br i1 %exitcond, label %if.end63, label %for.body41

if.end63:                                         ; preds = %for.inc59, %for.end36, %lor.lhs.false, %for.end
  ret void
}
