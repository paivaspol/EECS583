define i32 @slice_too_big(i32 %rlc_bits) #0 {
entry:
  %0 = load %struct.ImageParameters** @img, align 8, !tbaa !0
  %currentSlice = getelementptr inbounds %struct.ImageParameters* %0, i64 0, i32 50
  %1 = load %struct.Slice** %currentSlice, align 8, !tbaa !0
  %2 = load %struct.InputParameters** @input, align 8, !tbaa !0
  %symbol_mode = getelementptr inbounds %struct.InputParameters* %2, i64 0, i32 59
  %3 = load i32* %symbol_mode, align 4, !tbaa !3
  switch i32 %3, label %return [
    i32 0, label %for.cond.preheader
    i32 1, label %for.cond17.preheader
  ]

for.cond.preheader:                               ; preds = %entry
  %max_part_nr = getelementptr inbounds %struct.Slice* %1, i64 0, i32 4
  %4 = load i32* %max_part_nr, align 4, !tbaa !3
  %cmp148 = icmp sgt i32 %4, 0
  br i1 %cmp148, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %partArr = getelementptr inbounds %struct.Slice* %1, i64 0, i32 6
  %5 = load %struct.datapartition** %partArr, align 8, !tbaa !0
  %slice_argument = getelementptr inbounds %struct.InputParameters* %2, i64 0, i32 23
  %6 = load i32* %slice_argument, align 4, !tbaa !3
  br label %for.body

for.cond:                                         ; preds = %for.body
  %7 = trunc i64 %indvars.iv.next51 to i32
  %cmp1 = icmp slt i32 %7, %4
  br i1 %cmp1, label %for.body, label %return

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv50 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next51, %for.cond ]
  %bitstream = getelementptr inbounds %struct.datapartition* %5, i64 %indvars.iv50, i32 0
  %8 = load %struct.Bitstream** %bitstream, align 8, !tbaa !0
  %byte_pos = getelementptr inbounds %struct.Bitstream* %8, i64 0, i32 0
  %9 = load i32* %byte_pos, align 4, !tbaa !3
  %bits_to_go = getelementptr inbounds %struct.Bitstream* %8, i64 0, i32 1
  %10 = load i32* %bits_to_go, align 4, !tbaa !3
  %cmp2 = icmp slt i32 %10, 8
  %inc = zext i1 %cmp2 to i32
  %inc. = add nsw i32 %inc, %9
  %cmp5 = icmp slt i32 %10, %rlc_bits
  %inc7 = zext i1 %cmp5 to i32
  %size_in_bytes.1 = add nsw i32 %inc., %inc7
  %cmp9 = icmp sgt i32 %size_in_bytes.1, %6
  %indvars.iv.next51 = add i64 %indvars.iv50, 1
  br i1 %cmp9, label %return, label %for.cond

for.cond17.preheader:                             ; preds = %entry
  %max_part_nr18 = getelementptr inbounds %struct.Slice* %1, i64 0, i32 4
  %11 = load i32* %max_part_nr18, align 4, !tbaa !3
  %cmp1945 = icmp sgt i32 %11, 0
  br i1 %cmp1945, label %for.body20.lr.ph, label %return

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %partArr22 = getelementptr inbounds %struct.Slice* %1, i64 0, i32 6
  br label %for.body20

for.cond17:                                       ; preds = %for.body20
  %12 = load i32* %max_part_nr18, align 4, !tbaa !3
  %13 = trunc i64 %indvars.iv.next to i32
  %cmp19 = icmp slt i32 %13, %12
  br i1 %cmp19, label %for.body20, label %return

for.body20:                                       ; preds = %for.cond17, %for.body20.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next, %for.cond17 ]
  %14 = load %struct.datapartition** %partArr22, align 8, !tbaa !0
  %ee_cabac = getelementptr inbounds %struct.datapartition* %14, i64 %indvars.iv, i32 1
  %call = tail call i32 @arienco_bits_written(%struct.EncodingEnvironment* %ee_cabac) #7
  %15 = load %struct.InputParameters** @input, align 8, !tbaa !0
  %slice_argument24 = getelementptr inbounds %struct.InputParameters* %15, i64 0, i32 23
  %16 = load i32* %slice_argument24, align 4, !tbaa !3
  %mul = shl nsw i32 %16, 3
  %cmp25 = icmp sgt i32 %call, %mul
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp25, label %return, label %for.cond17

return:                                           ; preds = %entry, %for.cond.preheader, %for.cond, %for.body, %for.cond17.preheader, %for.body20, %for.cond17
  %retval.0 = phi i32 [ 0, %for.cond17.preheader ], [ 1, %for.body20 ], [ 0, %for.cond17 ], [ 1, %for.body ], [ 0, %for.cond ], [ 0, %for.cond.preheader ], [ 0, %entry ]
  ret i32 %retval.0
}
