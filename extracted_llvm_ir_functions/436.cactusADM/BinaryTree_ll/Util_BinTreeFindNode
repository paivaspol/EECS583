define %struct.T_TREE* @Util_BinTreeFindNode(%struct.T_TREE* %root, i8* %data, i32 (i8*, i8*)* %compare) #1 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %tailrecurse.backedge, %entry
  %root.tr = phi %struct.T_TREE* [ %root, %entry ], [ %root.tr.be, %tailrecurse.backedge ]
  tail call void @llvm.dbg.value(metadata !{%struct.T_TREE* %root.tr}, i64 0, metadata !74), !dbg !154
  tail call void @llvm.dbg.value(metadata !{i8* %data}, i64 0, metadata !75), !dbg !155
  tail call void @llvm.dbg.value(metadata !{i32 (i8*, i8*)* %compare}, i64 0, metadata !76), !dbg !156
  %data1 = getelementptr inbounds %struct.T_TREE* %root.tr, i64 0, i32 3, !dbg !157
  %0 = load i8** %data1, align 8, !dbg !157, !tbaa !93
  %call = tail call i32 %compare(i8* %data, i8* %0) #5, !dbg !157
  tail call void @llvm.dbg.value(metadata !{i32 %call}, i64 0, metadata !77), !dbg !157
  %cmp = icmp slt i32 %call, 0, !dbg !157
  br i1 %cmp, label %if.then, label %if.else, !dbg !157

if.then:                                          ; preds = %tailrecurse
  %left = getelementptr inbounds %struct.T_TREE* %root.tr, i64 0, i32 0, !dbg !158
  br label %tailrecurse.backedge, !dbg !158

tailrecurse.backedge:                             ; preds = %if.then, %if.then4
  %root.tr.be.in = phi %struct.T_TREE** [ %left, %if.then ], [ %right, %if.then4 ]
  %root.tr.be = load %struct.T_TREE** %root.tr.be.in, align 8, !dbg !158
  br label %tailrecurse

if.else:                                          ; preds = %tailrecurse
  %cmp3 = icmp sgt i32 %call, 0, !dbg !160
  br i1 %cmp3, label %if.then4, label %if.end11, !dbg !160

if.then4:                                         ; preds = %if.else
  %right = getelementptr inbounds %struct.T_TREE* %root.tr, i64 0, i32 1, !dbg !161
  br label %tailrecurse.backedge, !dbg !161

if.end11:                                         ; preds = %if.else
  ret %struct.T_TREE* %root.tr, !dbg !163
}
