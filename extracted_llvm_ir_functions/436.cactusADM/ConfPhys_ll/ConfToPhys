define void @ConfToPhys(i32 %nx, i32 %ny, i32 %nz, double* nocapture %psi, double* nocapture %gxx, double* nocapture %gxy, double* nocapture %gxz, double* nocapture %gyy, double* nocapture %gyz, double* nocapture %gzz) #1 {
entry:
  tail call void @llvm.dbg.value(metadata !{i32 %nx}, i64 0, metadata !18), !dbg !74
  tail call void @llvm.dbg.value(metadata !{i32 %ny}, i64 0, metadata !19), !dbg !75
  tail call void @llvm.dbg.value(metadata !{i32 %nz}, i64 0, metadata !20), !dbg !76
  tail call void @llvm.dbg.value(metadata !{double* %psi}, i64 0, metadata !21), !dbg !77
  tail call void @llvm.dbg.value(metadata !{double* %gxx}, i64 0, metadata !22), !dbg !78
  tail call void @llvm.dbg.value(metadata !{double* %gxy}, i64 0, metadata !23), !dbg !79
  tail call void @llvm.dbg.value(metadata !{double* %gxz}, i64 0, metadata !24), !dbg !80
  tail call void @llvm.dbg.value(metadata !{double* %gyy}, i64 0, metadata !25), !dbg !81
  tail call void @llvm.dbg.value(metadata !{double* %gyz}, i64 0, metadata !26), !dbg !82
  tail call void @llvm.dbg.value(metadata !{double* %gzz}, i64 0, metadata !27), !dbg !83
  %call = tail call i32 @CCTK_Warn(i32 4, i32 66, i8* getelementptr inbounds ([67 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str1, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8]* @.str2, i64 0, i64 0)) #4, !dbg !84
  %mul = mul nsw i32 %ny, %nx, !dbg !85
  %mul1 = mul nsw i32 %mul, %nz, !dbg !85
  tail call void @llvm.dbg.value(metadata !{i32 %mul1}, i64 0, metadata !29), !dbg !85
  %cmp41 = icmp sgt i32 %mul1, 0, !dbg !86
  br i1 %cmp41, label %while.body.lr.ph, label %while.end, !dbg !86

while.body.lr.ph:                                 ; preds = %entry
  %0 = mul i32 %nz, %ny, !dbg !86
  %1 = mul i32 %0, %nx, !dbg !86
  %2 = sext i32 %1 to i64
  br label %while.body, !dbg !86

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %indvars.iv = phi i64 [ %2, %while.body.lr.ph ], [ %indvars.iv.next, %while.body ]
  %indvars.iv.next = add i64 %indvars.iv, -1, !dbg !86
  %arrayidx = getelementptr inbounds double* %psi, i64 %indvars.iv.next, !dbg !87
  %3 = load double* %arrayidx, align 8, !dbg !87, !tbaa !89
  %mul4 = fmul double %3, %3, !dbg !87
  tail call void @llvm.dbg.value(metadata !{double %mul4}, i64 0, metadata !28), !dbg !87
  %mul5 = fmul double %mul4, %mul4, !dbg !92
  tail call void @llvm.dbg.value(metadata !{double %mul5}, i64 0, metadata !28), !dbg !92
  %arrayidx7 = getelementptr inbounds double* %gxx, i64 %indvars.iv.next, !dbg !93
  %4 = load double* %arrayidx7, align 8, !dbg !93, !tbaa !89
  %mul8 = fmul double %4, %mul5, !dbg !93
  store double %mul8, double* %arrayidx7, align 8, !dbg !93, !tbaa !89
  %arrayidx10 = getelementptr inbounds double* %gxy, i64 %indvars.iv.next, !dbg !94
  %5 = load double* %arrayidx10, align 8, !dbg !94, !tbaa !89
  %mul11 = fmul double %5, %mul5, !dbg !94
  store double %mul11, double* %arrayidx10, align 8, !dbg !94, !tbaa !89
  %arrayidx13 = getelementptr inbounds double* %gxz, i64 %indvars.iv.next, !dbg !95
  %6 = load double* %arrayidx13, align 8, !dbg !95, !tbaa !89
  %mul14 = fmul double %mul5, %6, !dbg !95
  store double %mul14, double* %arrayidx13, align 8, !dbg !95, !tbaa !89
  %arrayidx16 = getelementptr inbounds double* %gyy, i64 %indvars.iv.next, !dbg !96
  %7 = load double* %arrayidx16, align 8, !dbg !96, !tbaa !89
  %mul17 = fmul double %mul5, %7, !dbg !96
  store double %mul17, double* %arrayidx16, align 8, !dbg !96, !tbaa !89
  %arrayidx19 = getelementptr inbounds double* %gyz, i64 %indvars.iv.next, !dbg !97
  %8 = load double* %arrayidx19, align 8, !dbg !97, !tbaa !89
  %mul20 = fmul double %mul5, %8, !dbg !97
  store double %mul20, double* %arrayidx19, align 8, !dbg !97, !tbaa !89
  %arrayidx22 = getelementptr inbounds double* %gzz, i64 %indvars.iv.next, !dbg !98
  %9 = load double* %arrayidx22, align 8, !dbg !98, !tbaa !89
  %mul23 = fmul double %mul5, %9, !dbg !98
  store double %mul23, double* %arrayidx22, align 8, !dbg !98, !tbaa !89
  %10 = trunc i64 %indvars.iv.next to i32, !dbg !86
  %cmp = icmp sgt i32 %10, 0, !dbg !86
  br i1 %cmp, label %while.body, label %while.end, !dbg !86

while.end:                                        ; preds = %while.body, %entry
  ret void, !dbg !99
}
