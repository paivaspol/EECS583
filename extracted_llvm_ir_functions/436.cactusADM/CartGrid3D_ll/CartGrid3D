define void @CartGrid3D(%struct.cGH* %cctkGH) #1 {
  %infoline = alloca [120 x i8], align 16
  %domainsym = alloca [6 x i32], align 16
  %1 = getelementptr inbounds %struct.cGH* %cctkGH, i64 0, i32 2
  %2 = load i32** %1, align 8, !tbaa !2
  %3 = getelementptr inbounds %struct.cGH* %cctkGH, i64 0, i32 3
  %4 = load i32** %3, align 8, !tbaa !9
  %5 = getelementptr inbounds %struct.cGH* %cctkGH, i64 0, i32 4
  %6 = load i32** %5, align 8, !tbaa !10
  %7 = getelementptr inbounds %struct.cGH* %cctkGH, i64 0, i32 10
  %8 = load double** %7, align 8, !tbaa !11
  %9 = getelementptr inbounds %struct.cGH* %cctkGH, i64 0, i32 11
  %10 = load double** %9, align 8, !tbaa !12
  %11 = getelementptr inbounds %struct.cGH* %cctkGH, i64 0, i32 14
  %12 = load i32* %11, align 4, !tbaa !13
  %13 = getelementptr inbounds %struct.cGH* %cctkGH, i64 0, i32 15
  %14 = load i32** %13, align 8, !tbaa !14
  %15 = tail call i32 @CCTK_VarIndex(i8* getelementptr inbounds ([16 x i8]* @.str, i64 0, i64 0)) #5
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds %struct.cGH* %cctkGH, i64 0, i32 17
  %18 = load i8**** %17, align 8, !tbaa !15
  %19 = getelementptr inbounds i8*** %18, i64 %16
  %20 = bitcast i8*** %19 to double***
  %21 = load double*** %20, align 8, !tbaa !16
  %22 = load double** %21, align 8, !tbaa !16
  %23 = tail call i32 @CCTK_VarIndex(i8* getelementptr inbounds ([16 x i8]* @.str1, i64 0, i64 0)) #5
  %24 = sext i32 %23 to i64
  %25 = load i8**** %17, align 8, !tbaa !15
  %26 = getelementptr inbounds i8*** %25, i64 %24
  %27 = bitcast i8*** %26 to double***
  %28 = load double*** %27, align 8, !tbaa !16
  %29 = load double** %28, align 8, !tbaa !16
  %30 = tail call i32 @CCTK_VarIndex(i8* getelementptr inbounds ([16 x i8]* @.str2, i64 0, i64 0)) #5
  %31 = sext i32 %30 to i64
  %32 = load i8**** %17, align 8, !tbaa !15
  %33 = getelementptr inbounds i8*** %32, i64 %31
  %34 = bitcast i8*** %33 to double***
  %35 = load double*** %34, align 8, !tbaa !16
  %36 = load double** %35, align 8, !tbaa !16
  %37 = tail call i32 @CCTK_VarIndex(i8* getelementptr inbounds ([8 x i8]* @.str3, i64 0, i64 0)) #5
  %38 = sext i32 %37 to i64
  %39 = load i8**** %17, align 8, !tbaa !15
  %40 = getelementptr inbounds i8*** %39, i64 %38
  %41 = bitcast i8*** %40 to double***
  %42 = load double*** %41, align 8, !tbaa !16
  %43 = load double** %42, align 8, !tbaa !16
  %44 = tail call i32 @CCTK_VarIndex(i8* getelementptr inbounds ([8 x i8]* @.str4, i64 0, i64 0)) #5
  %45 = sext i32 %44 to i64
  %46 = load i8**** %17, align 8, !tbaa !15
  %47 = getelementptr inbounds i8*** %46, i64 %45
  %48 = bitcast i8*** %47 to double***
  %49 = load double*** %48, align 8, !tbaa !16
  %50 = load double** %49, align 8, !tbaa !16
  %51 = tail call i32 @CCTK_VarIndex(i8* getelementptr inbounds ([8 x i8]* @.str5, i64 0, i64 0)) #5
  %52 = sext i32 %51 to i64
  %53 = load i8**** %17, align 8, !tbaa !15
  %54 = getelementptr inbounds i8*** %53, i64 %52
  %55 = bitcast i8*** %54 to double***
  %56 = load double*** %55, align 8, !tbaa !16
  %57 = load double** %56, align 8, !tbaa !16
  %58 = tail call i32 @CCTK_VarIndex(i8* getelementptr inbounds ([8 x i8]* @.str6, i64 0, i64 0)) #5
  %59 = sext i32 %58 to i64
  %60 = load i8**** %17, align 8, !tbaa !15
  %61 = getelementptr inbounds i8*** %60, i64 %59
  %62 = bitcast i8*** %61 to double***
  %63 = load double*** %62, align 8, !tbaa !16
  %64 = load double** %63, align 8, !tbaa !16
  %65 = load i64* bitcast (%struct.anon* @gridrest_ to i64*), align 8, !tbaa !17
  %66 = load double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 1), align 8, !tbaa !19
  %67 = load i64* bitcast (double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 2) to i64*), align 8, !tbaa !20
  %68 = load i64* bitcast (double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 3) to i64*), align 8, !tbaa !21
  %69 = load double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 4), align 8, !tbaa !22
  %70 = load double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 5), align 8, !tbaa !23
  %71 = load double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 6), align 8, !tbaa !24
  %72 = load double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 7), align 8, !tbaa !25
  %73 = load double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 8), align 8, !tbaa !26
  %74 = load double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 9), align 8, !tbaa !27
  %75 = load double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 10), align 8, !tbaa !28
  %76 = load double* getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 11), align 8, !tbaa !29
  %77 = load i8** getelementptr inbounds (%struct.anon* @gridrest_, i64 0, i32 15), align 8, !tbaa !30
  %78 = load i32* getelementptr inbounds (%struct.anon.0* @cartgrid3dpriv_, i64 0, i32 0), align 4, !tbaa !31
  %79 = load i32* getelementptr inbounds (%struct.anon.0* @cartgrid3dpriv_, i64 0, i32 1), align 4, !tbaa !33
  %80 = load i32* getelementptr inbounds (%struct.anon.0* @cartgrid3dpriv_, i64 0, i32 2), align 4, !tbaa !34
  %81 = load i32* getelementptr inbounds (%struct.anon.0* @cartgrid3dpriv_, i64 0, i32 3), align 4, !tbaa !35
  %82 = load i32* getelementptr inbounds (%struct.anon.0* @cartgrid3dpriv_, i64 0, i32 4), align 4, !tbaa !36
  %83 = load i32* getelementptr inbounds (%struct.anon.0* @cartgrid3dpriv_, i64 0, i32 5), align 4, !tbaa !37
  %84 = load i32* getelementptr inbounds (%struct.anon.0* @cartgrid3dpriv_, i64 0, i32 6), align 4, !tbaa !38
  %85 = load i32* getelementptr inbounds (%struct.anon.0* @cartgrid3dpriv_, i64 0, i32 7), align 4, !tbaa !39
  %86 = load i32* getelementptr inbounds (%struct.anon.1* @driverrest_, i64 0, i32 8), align 4, !tbaa !40
  %87 = load i32* getelementptr inbounds (%struct.anon.1* @driverrest_, i64 0, i32 9), align 4, !tbaa !42
  %88 = load i32* getelementptr inbounds (%struct.anon.1* @driverrest_, i64 0, i32 10), align 4, !tbaa !43
  %89 = load i32* getelementptr inbounds (%struct.anon.1* @driverrest_, i64 0, i32 11), align 4, !tbaa !44
  %90 = getelementptr inbounds [120 x i8]* %infoline, i64 0, i64 0
  call void @llvm.lifetime.start(i64 120, i8* %90) #3
  %91 = load i32* %2, align 4, !tbaa !45
  %92 = add nsw i32 %91, -1
  %93 = getelementptr inbounds i32* %2, i64 1
  %94 = load i32* %93, align 4, !tbaa !45
  %95 = add nsw i32 %94, -1
  %96 = getelementptr inbounds i32* %2, i64 2
  %97 = load i32* %96, align 4, !tbaa !45
  %98 = add nsw i32 %97, -1
  %99 = icmp ne i32 %82, 0
  %100 = icmp ne i32 %83, 0
  %or.cond = and i1 %99, %100
  %101 = icmp ne i32 %78, 0
  %or.cond3 = and i1 %101, %or.cond
  br i1 %or.cond3, label %102, label %104

; <label>:102                                     ; preds = %0
  %103 = icmp ne i32 %79, 0
  br label %104

; <label>:104                                     ; preds = %102, %0
  %105 = phi i1 [ false, %0 ], [ %103, %102 ]
  %106 = zext i1 %105 to i32
  %107 = icmp ne i32 %84, 0
  %or.cond5 = and i1 %99, %107
  %or.cond7 = and i1 %101, %or.cond5
  %108 = icmp ne i32 %80, 0
  %. = and i1 %108, %or.cond7
  %109 = zext i1 %. to i32
  %110 = icmp ne i32 %85, 0
  %or.cond9 = and i1 %99, %110
  %or.cond11 = and i1 %101, %or.cond9
  %111 = icmp ne i32 %81, 0
  %.20 = and i1 %111, %or.cond11
  %112 = zext i1 %.20 to i32
  %113 = getelementptr inbounds [6 x i32]* %domainsym, i64 0, i64 0
  call void @DecodeSymParameters3D(i32* %113) #5
  %114 = load i32* %113, align 16, !tbaa !45
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %118, label %116

; <label>:116                                     ; preds = %104
  %117 = load i32* %14, align 4, !tbaa !45
  br label %118

; <label>:118                                     ; preds = %104, %116
  %lowerxi.0 = phi i32 [ %117, %116 ], [ 0, %104 ]
  %119 = getelementptr inbounds [6 x i32]* %domainsym, i64 0, i64 2
  %120 = load i32* %119, align 8, !tbaa !45
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %125, label %122

; <label>:122                                     ; preds = %118
  %123 = getelementptr inbounds i32* %14, i64 1
  %124 = load i32* %123, align 4, !tbaa !45
  br label %125

; <label>:125                                     ; preds = %118, %122
  %loweryi.0 = phi i32 [ %124, %122 ], [ 0, %118 ]
  %126 = getelementptr inbounds [6 x i32]* %domainsym, i64 0, i64 4
  %127 = load i32* %126, align 16, !tbaa !45
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %132, label %129

; <label>:129                                     ; preds = %125
  %130 = getelementptr inbounds i32* %14, i64 2
  %131 = load i32* %130, align 4, !tbaa !45
  br label %132

; <label>:132                                     ; preds = %125, %129
  %lowerzi.0 = phi i32 [ %131, %129 ], [ 0, %125 ]
  %133 = icmp eq i32 %86, 0
  br i1 %133, label %160, label %134

; <label>:134                                     ; preds = %132
  %135 = icmp eq i32 %87, 0
  br i1 %135, label %142, label %136

; <label>:136                                     ; preds = %134
  %137 = load i32* %14, align 4, !tbaa !45
  %138 = add nsw i32 %137, -1
  %139 = load i32* %2, align 4, !tbaa !45
  %140 = xor i32 %137, -1
  %141 = add i32 %139, %140
  br label %142

; <label>:142                                     ; preds = %134, %136
  %lowerxi.1 = phi i32 [ %138, %136 ], [ %lowerxi.0, %134 ]
  %upperxi.0 = phi i32 [ %141, %136 ], [ %92, %134 ]
  %143 = icmp eq i32 %88, 0
  br i1 %143, label %151, label %144

; <label>:144                                     ; preds = %142
  %145 = getelementptr inbounds i32* %14, i64 1
  %146 = load i32* %145, align 4, !tbaa !45
  %147 = add nsw i32 %146, -1
  %148 = load i32* %93, align 4, !tbaa !45
  %149 = xor i32 %146, -1
  %150 = add i32 %148, %149
  br label %151

; <label>:151                                     ; preds = %142, %144
  %loweryi.1 = phi i32 [ %147, %144 ], [ %loweryi.0, %142 ]
  %upperyi.0 = phi i32 [ %150, %144 ], [ %95, %142 ]
  %152 = icmp eq i32 %89, 0
  br i1 %152, label %160, label %153

; <label>:153                                     ; preds = %151
  %154 = getelementptr inbounds i32* %14, i64 2
  %155 = load i32* %154, align 4, !tbaa !45
  %156 = add nsw i32 %155, -1
  %157 = load i32* %96, align 4, !tbaa !45
  %158 = xor i32 %155, -1
  %159 = add i32 %157, %158
  br label %160

; <label>:160                                     ; preds = %151, %132, %153
  %lowerxi.2 = phi i32 [ %lowerxi.1, %153 ], [ %lowerxi.1, %151 ], [ %lowerxi.0, %132 ]
  %upperxi.1 = phi i32 [ %upperxi.0, %153 ], [ %upperxi.0, %151 ], [ %92, %132 ]
  %loweryi.2 = phi i32 [ %loweryi.1, %153 ], [ %loweryi.1, %151 ], [ %loweryi.0, %132 ]
  %upperyi.1 = phi i32 [ %upperyi.0, %153 ], [ %upperyi.0, %151 ], [ %95, %132 ]
  %lowerzi.1 = phi i32 [ %156, %153 ], [ %lowerzi.0, %151 ], [ %lowerzi.0, %132 ]
  %upperzi.0 = phi i32 [ %159, %153 ], [ %98, %151 ], [ %98, %132 ]
  %161 = call double @ldexp(double 1.000000e+00, i32 %12) #3
  %162 = fptosi double %161 to i32
  %163 = call i32 @CCTK_Equals(i8* %77, i8* getelementptr inbounds ([8 x i8]* @.str7, i64 0, i64 0)) #5
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %168

; <label>:165                                     ; preds = %160
  %166 = call i32 @CCTK_Equals(i8* %77, i8* getelementptr inbounds ([4 x i8]* @.str8, i64 0, i64 0)) #5
  %167 = icmp eq i32 %166, 0
  br i1 %167, label %289, label %168

; <label>:168                                     ; preds = %165, %160
  %169 = call i32 @CCTK_Equals(i8* %77, i8* getelementptr inbounds ([4 x i8]* @.str8, i64 0, i64 0)) #5
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %175

; <label>:171                                     ; preds = %168
  %172 = fcmp une double %71, -4.242420e+05
  %.17 = select i1 %172, double %71, double %69
  %.18 = select i1 %172, double %71, double %73
  %.19 = select i1 %172, double %71, double %75
  %173 = fcmp une double %72, -4.242420e+05
  br i1 %173, label %175, label %174

; <label>:174                                     ; preds = %171
  br label %175

; <label>:175                                     ; preds = %171, %168, %174
  %ymin1.0 = phi double [ %74, %174 ], [ -5.000000e-01, %168 ], [ %72, %171 ]
  %zmin1.0 = phi double [ %76, %174 ], [ -5.000000e-01, %168 ], [ %72, %171 ]
  %xmax1.1 = phi double [ %.17, %174 ], [ 5.000000e-01, %168 ], [ %.17, %171 ]
  %ymax1.1 = phi double [ %.18, %174 ], [ 5.000000e-01, %168 ], [ %.18, %171 ]
  %zmax1.1 = phi double [ %.19, %174 ], [ 5.000000e-01, %168 ], [ %.19, %171 ]
  %xmin1.0 = phi double [ %70, %174 ], [ -5.000000e-01, %168 ], [ %72, %171 ]
  %176 = load i32* %113, align 16, !tbaa !45
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %201, label %178

; <label>:178                                     ; preds = %175
  %179 = load i32* %2, align 4, !tbaa !45
  %180 = load i32* %14, align 4, !tbaa !45
  %181 = sub nsw i32 %179, %180
  br i1 %105, label %182, label %192

; <label>:182                                     ; preds = %178
  %183 = sitofp i32 %181 to double
  %184 = fadd double %183, -5.000000e-01
  %185 = fdiv double %xmax1.1, %184
  store double %185, double* %22, align 8, !tbaa !46
  %186 = sitofp i32 %180 to double
  %187 = fadd double %186, -5.000000e-01
  %188 = fmul double %185, %187
  %189 = sitofp i32 %162 to double
  %190 = fmul double %189, %188
  %191 = fsub double -0.000000e+00, %190
  br label %210

; <label>:192                                     ; preds = %178
  %193 = add nsw i32 %181, -1
  %194 = sitofp i32 %193 to double
  %195 = fdiv double %xmax1.1, %194
  store double %195, double* %22, align 8, !tbaa !46
  %196 = sub nsw i32 0, %180
  %197 = sitofp i32 %196 to double
  %198 = fmul double %195, %197
  %199 = sitofp i32 %162 to double
  %200 = fmul double %199, %198
  br label %210

; <label>:201                                     ; preds = %175
  %202 = fsub double %xmax1.1, %xmin1.0
  %203 = load i32* %2, align 4, !tbaa !45
  %204 = add nsw i32 %203, -1
  %205 = icmp sgt i32 %204, 1
  br i1 %205, label %206, label %207

; <label>:206                                     ; preds = %201
  %phitmp = sitofp i32 %204 to double
  br label %207

; <label>:207                                     ; preds = %201, %206
  %208 = phi double [ %phitmp, %206 ], [ 1.000000e+00, %201 ]
  %209 = fdiv double %202, %208
  store double %209, double* %22, align 8, !tbaa !46
  br label %210

; <label>:210                                     ; preds = %182, %192, %207
  %x_origin.0 = phi double [ %191, %182 ], [ %200, %192 ], [ %xmin1.0, %207 ]
  %211 = load i32* %119, align 8, !tbaa !45
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %237, label %213

; <label>:213                                     ; preds = %210
  %214 = load i32* %93, align 4, !tbaa !45
  %215 = getelementptr inbounds i32* %14, i64 1
  %216 = load i32* %215, align 4, !tbaa !45
  %217 = sub nsw i32 %214, %216
  br i1 %., label %218, label %228

; <label>:218                                     ; preds = %213
  %219 = sitofp i32 %217 to double
  %220 = fadd double %219, -5.000000e-01
  %221 = fdiv double %ymax1.1, %220
  store double %221, double* %29, align 8, !tbaa !46
  %222 = sitofp i32 %216 to double
  %223 = fadd double %222, -5.000000e-01
  %224 = fmul double %221, %223
  %225 = sitofp i32 %162 to double
  %226 = fmul double %225, %224
  %227 = fsub double -0.000000e+00, %226
  br label %246

; <label>:228                                     ; preds = %213
  %229 = add nsw i32 %217, -1
  %230 = sitofp i32 %229 to double
  %231 = fdiv double %ymax1.1, %230
  store double %231, double* %29, align 8, !tbaa !46
  %232 = sub nsw i32 0, %216
  %233 = sitofp i32 %232 to double
  %234 = fmul double %231, %233
  %235 = sitofp i32 %162 to double
  %236 = fmul double %235, %234
  br label %246

; <label>:237                                     ; preds = %210
  %238 = fsub double %ymax1.1, %ymin1.0
  %239 = load i32* %93, align 4, !tbaa !45
  %240 = add nsw i32 %239, -1
  %241 = icmp sgt i32 %240, 1
  br i1 %241, label %242, label %243

; <label>:242                                     ; preds = %237
  %phitmp15 = sitofp i32 %240 to double
  br label %243

; <label>:243                                     ; preds = %237, %242
  %244 = phi double [ %phitmp15, %242 ], [ 1.000000e+00, %237 ]
  %245 = fdiv double %238, %244
  store double %245, double* %29, align 8, !tbaa !46
  br label %246

; <label>:246                                     ; preds = %218, %228, %243
  %y_origin.0 = phi double [ %227, %218 ], [ %236, %228 ], [ %ymin1.0, %243 ]
  %247 = load i32* %126, align 16, !tbaa !45
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %273, label %249

; <label>:249                                     ; preds = %246
  %250 = load i32* %96, align 4, !tbaa !45
  %251 = getelementptr inbounds i32* %14, i64 2
  %252 = load i32* %251, align 4, !tbaa !45
  %253 = sub nsw i32 %250, %252
  br i1 %.20, label %254, label %264

; <label>:254                                     ; preds = %249
  %255 = sitofp i32 %253 to double
  %256 = fadd double %255, -5.000000e-01
  %257 = fdiv double %zmax1.1, %256
  store double %257, double* %36, align 8, !tbaa !46
  %258 = sitofp i32 %252 to double
  %259 = fadd double %258, -5.000000e-01
  %260 = fmul double %257, %259
  %261 = sitofp i32 %162 to double
  %262 = fmul double %261, %260
  %263 = fsub double -0.000000e+00, %262
  br label %282

; <label>:264                                     ; preds = %249
  %265 = add nsw i32 %253, -1
  %266 = sitofp i32 %265 to double
  %267 = fdiv double %zmax1.1, %266
  store double %267, double* %36, align 8, !tbaa !46
  %268 = sub nsw i32 0, %252
  %269 = sitofp i32 %268 to double
  %270 = fmul double %267, %269
  %271 = sitofp i32 %162 to double
  %272 = fmul double %271, %270
  br label %282

; <label>:273                                     ; preds = %246
  %274 = fsub double %zmax1.1, %zmin1.0
  %275 = load i32* %96, align 4, !tbaa !45
  %276 = add nsw i32 %275, -1
  %277 = icmp sgt i32 %276, 1
  br i1 %277, label %278, label %279

; <label>:278                                     ; preds = %273
  %phitmp16 = sitofp i32 %276 to double
  br label %279

; <label>:279                                     ; preds = %273, %278
  %280 = phi double [ %phitmp16, %278 ], [ 1.000000e+00, %273 ]
  %281 = fdiv double %274, %280
  store double %281, double* %36, align 8, !tbaa !46
  %.pre = sitofp i32 %162 to double
  br label %282

; <label>:282                                     ; preds = %254, %264, %279
  %.pre-phi = phi double [ %261, %254 ], [ %271, %264 ], [ %.pre, %279 ]
  %283 = phi double [ %257, %254 ], [ %267, %264 ], [ %281, %279 ]
  %z_origin.0 = phi double [ %263, %254 ], [ %272, %264 ], [ %zmin1.0, %279 ]
  %284 = load double* %22, align 8, !tbaa !46
  %285 = fmul double %.pre-phi, %284
  %286 = load double* %29, align 8, !tbaa !46
  %287 = fmul double %.pre-phi, %286
  %288 = fmul double %.pre-phi, %283
  br label %359

; <label>:289                                     ; preds = %165
  %290 = call i32 @CCTK_Equals(i8* %77, i8* getelementptr inbounds ([10 x i8]* @.str9, i64 0, i64 0)) #5
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %359, label %292

; <label>:292                                     ; preds = %289
  %293 = fcmp ogt double %66, 0.000000e+00
  br i1 %293, label %294, label %295

; <label>:294                                     ; preds = %292
  store double %66, double* %22, align 8, !tbaa !46
  store double %66, double* %29, align 8, !tbaa !46
  store double %66, double* %36, align 8, !tbaa !46
  br label %300

; <label>:295                                     ; preds = %292
  %296 = bitcast double* %22 to i64*
  store i64 %65, i64* %296, align 8, !tbaa !46
  %297 = bitcast double* %29 to i64*
  store i64 %67, i64* %297, align 8, !tbaa !46
  %298 = bitcast double* %36 to i64*
  store i64 %68, i64* %298, align 8, !tbaa !46
  %299 = bitcast i64 %68 to double
  br label %300

; <label>:300                                     ; preds = %295, %294
  %301 = phi double [ %299, %295 ], [ %66, %294 ]
  %302 = load double* %22, align 8, !tbaa !46
  %303 = sitofp i32 %162 to double
  %304 = fmul double %303, %302
  %305 = load double* %29, align 8, !tbaa !46
  %306 = fmul double %303, %305
  %307 = fmul double %303, %301
  %308 = load i32* %113, align 16, !tbaa !45
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %317, label %310

; <label>:310                                     ; preds = %300
  %311 = load i32* %14, align 4, !tbaa !45
  %312 = sub nsw i32 0, %311
  %313 = sitofp i32 %312 to double
  %314 = sitofp i32 %106 to double
  %315 = fmul double %314, 5.000000e-01
  %316 = fadd double %315, %313
  br label %323

; <label>:317                                     ; preds = %300
  %318 = load i32* %2, align 4, !tbaa !45
  %319 = add nsw i32 %318, -1
  %.op = srem i32 %318, 2
  %.op.op = sub nsw i32 0, %.op
  %.neg23 = select i1 %105, i32 %.op.op, i32 0
  %320 = add i32 %319, %.neg23
  %321 = sitofp i32 %320 to double
  %322 = fmul double %321, -5.000000e-01
  br label %323

; <label>:323                                     ; preds = %317, %310
  %.pn = phi double [ %316, %310 ], [ %322, %317 ]
  %x_origin.1 = fmul double %304, %.pn
  %324 = load i32* %119, align 8, !tbaa !45
  %325 = icmp eq i32 %324, 0
  br i1 %325, label %334, label %326

; <label>:326                                     ; preds = %323
  %327 = getelementptr inbounds i32* %14, i64 1
  %328 = load i32* %327, align 4, !tbaa !45
  %329 = sub nsw i32 0, %328
  %330 = sitofp i32 %329 to double
  %331 = sitofp i32 %109 to double
  %332 = fmul double %331, 5.000000e-01
  %333 = fadd double %332, %330
  br label %340

; <label>:334                                     ; preds = %323
  %335 = load i32* %93, align 4, !tbaa !45
  %336 = add nsw i32 %335, -1
  %.op12 = srem i32 %335, 2
  %.op12.op = sub nsw i32 0, %.op12
  %.neg24 = select i1 %., i32 %.op12.op, i32 0
  %337 = add i32 %336, %.neg24
  %338 = sitofp i32 %337 to double
  %339 = fmul double %338, -5.000000e-01
  br label %340

; <label>:340                                     ; preds = %334, %326
  %.pn13 = phi double [ %333, %326 ], [ %339, %334 ]
  %y_origin.1 = fmul double %306, %.pn13
  %341 = load i32* %126, align 16, !tbaa !45
  %342 = icmp eq i32 %341, 0
  br i1 %342, label %352, label %343

; <label>:343                                     ; preds = %340
  %344 = getelementptr inbounds i32* %14, i64 2
  %345 = load i32* %344, align 4, !tbaa !45
  %346 = sub nsw i32 0, %345
  %347 = sitofp i32 %346 to double
  %348 = sitofp i32 %112 to double
  %349 = fmul double %348, 5.000000e-01
  %350 = fadd double %349, %347
  %351 = fmul double %307, %350
  br label %359

; <label>:352                                     ; preds = %340
  %353 = load i32* %96, align 4, !tbaa !45
  %354 = add nsw i32 %353, -1
  %.op14 = srem i32 %353, 2
  %.op14.op = sub nsw i32 0, %.op14
  %.neg25 = select i1 %.20, i32 %.op14.op, i32 0
  %355 = add i32 %354, %.neg25
  %356 = sitofp i32 %355 to double
  %357 = fmul double %356, -5.000000e-01
  %358 = fmul double %307, %357
  br label %359

; <label>:359                                     ; preds = %289, %352, %343, %282
  %this_dz.0 = phi double [ %288, %282 ], [ %307, %343 ], [ %307, %352 ], [ 0.000000e+00, %289 ]
  %this_dy.0 = phi double [ %287, %282 ], [ %306, %343 ], [ %306, %352 ], [ 0.000000e+00, %289 ]
  %this_dx.0 = phi double [ %285, %282 ], [ %304, %343 ], [ %304, %352 ], [ 0.000000e+00, %289 ]
  %z_origin.1 = phi double [ %z_origin.0, %282 ], [ %351, %343 ], [ %358, %352 ], [ 0.000000e+00, %289 ]
  %y_origin.2 = phi double [ %y_origin.0, %282 ], [ %y_origin.1, %343 ], [ %y_origin.1, %352 ], [ 0.000000e+00, %289 ]
  %x_origin.2 = phi double [ %x_origin.0, %282 ], [ %x_origin.1, %343 ], [ %x_origin.1, %352 ], [ 0.000000e+00, %289 ]
  %360 = load i32* %4, align 4, !tbaa !45
  %361 = icmp sgt i32 %360, 0
  br i1 %361, label %.preheader26.lr.ph, label %._crit_edge33

.preheader26.lr.ph:                               ; preds = %359
  %362 = getelementptr inbounds i32* %4, i64 1
  %363 = load i32* %362, align 4, !tbaa !45
  %364 = icmp sgt i32 %363, 0
  %365 = getelementptr inbounds i32* %4, i64 2
  %366 = getelementptr inbounds i32* %6, i64 1
  %367 = getelementptr inbounds i32* %6, i64 2
  %368 = sext i32 %360 to i64
  br label %.preheader26

.preheader26:                                     ; preds = %.preheader26.lr.ph, %._crit_edge30
  %indvars.iv36 = phi i64 [ 0, %.preheader26.lr.ph ], [ %indvars.iv.next37, %._crit_edge30 ]
  br i1 %364, label %.preheader.lr.ph, label %._crit_edge30

.preheader.lr.ph:                                 ; preds = %.preheader26
  %369 = load i32* %365, align 4, !tbaa !45
  %370 = icmp sgt i32 %369, 0
  %371 = sext i32 %363 to i64
  br label %.preheader

.preheader:                                       ; preds = %.preheader.lr.ph, %._crit_edge
  %indvars.iv34 = phi i64 [ 0, %.preheader.lr.ph ], [ %indvars.iv.next35, %._crit_edge ]
  br i1 %370, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %372 = load i32* %6, align 4, !tbaa !45
  %373 = trunc i64 %indvars.iv36 to i32
  %374 = add nsw i32 %372, %373
  %375 = sitofp i32 %374 to double
  %376 = fmul double %this_dx.0, %375
  %377 = fadd double %x_origin.2, %376
  %378 = load i32** %3, align 8, !tbaa !9
  %379 = load i32* %378, align 4, !tbaa !45
  %380 = getelementptr inbounds i32* %378, i64 1
  %381 = load i32* %380, align 4, !tbaa !45
  %382 = load i32* %366, align 4, !tbaa !45
  %383 = trunc i64 %indvars.iv34 to i32
  %384 = add nsw i32 %382, %383
  %385 = sitofp i32 %384 to double
  %386 = fmul double %this_dy.0, %385
  %387 = fadd double %y_origin.2, %386
  %388 = load i32* %367, align 4, !tbaa !45
  %389 = sext i32 %381 to i64
  %390 = sext i32 %379 to i64
  %391 = zext i32 %388 to i64
  %392 = sext i32 %369 to i64
  br label %393

; <label>:393                                     ; preds = %.lr.ph, %393
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %393 ]
  %394 = mul nsw i64 %389, %indvars.iv
  %395 = add nsw i64 %394, %indvars.iv34
  %396 = mul nsw i64 %395, %390
  %397 = add nsw i64 %396, %indvars.iv36
  %398 = getelementptr inbounds double* %50, i64 %397
  store double %377, double* %398, align 8, !tbaa !46
  %399 = getelementptr inbounds double* %57, i64 %397
  store double %387, double* %399, align 8, !tbaa !46
  %400 = add i64 %391, %indvars.iv
  %401 = trunc i64 %400 to i32
  %402 = sitofp i32 %401 to double
  %403 = fmul double %this_dz.0, %402
  %404 = fadd double %z_origin.1, %403
  %405 = getelementptr inbounds double* %64, i64 %397
  store double %404, double* %405, align 8, !tbaa !46
  %406 = load double* %398, align 8, !tbaa !46
  %407 = fmul double %406, %406
  %408 = load double* %399, align 8, !tbaa !46
  %409 = fmul double %408, %408
  %410 = fadd double %407, %409
  %411 = fmul double %404, %404
  %412 = fadd double %410, %411
  %413 = call double @sqrt(double %412) #6
  %414 = getelementptr inbounds double* %43, i64 %397
  store double %413, double* %414, align 8, !tbaa !46
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %415 = icmp slt i64 %indvars.iv.next, %392
  br i1 %415, label %393, label %._crit_edge

._crit_edge:                                      ; preds = %393, %.preheader
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1
  %416 = icmp slt i64 %indvars.iv.next35, %371
  br i1 %416, label %.preheader, label %._crit_edge30

._crit_edge30:                                    ; preds = %._crit_edge, %.preheader26
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %417 = icmp slt i64 %indvars.iv.next37, %368
  br i1 %417, label %.preheader26, label %._crit_edge33

._crit_edge33:                                    ; preds = %._crit_edge30, %359
  store double %this_dx.0, double* %8, align 8, !tbaa !46
  %418 = getelementptr inbounds double* %8, i64 1
  store double %this_dy.0, double* %418, align 8, !tbaa !46
  %419 = getelementptr inbounds double* %8, i64 2
  store double %this_dz.0, double* %419, align 8, !tbaa !46
  store double %x_origin.2, double* %10, align 8, !tbaa !46
  %420 = getelementptr inbounds double* %10, i64 1
  store double %y_origin.2, double* %420, align 8, !tbaa !46
  %421 = getelementptr inbounds double* %10, i64 2
  store double %z_origin.1, double* %421, align 8, !tbaa !46
  %422 = load i32* %2, align 4, !tbaa !45
  %423 = add nsw i32 %422, -1
  %424 = sitofp i32 %423 to double
  %425 = fmul double %this_dx.0, %424
  %426 = fadd double %x_origin.2, %425
  %427 = call i32 @CCTK_CoordRegisterRange(%struct.cGH* %cctkGH, double %x_origin.2, double %426, i32 -1, i8* getelementptr inbounds ([2 x i8]* @.str10, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str11, i64 0, i64 0)) #5
  %428 = call i32 @CCTK_CoordRegisterRangePhysIndex(%struct.cGH* %cctkGH, i32 %lowerxi.2, i32 %upperxi.1, i32 -1, i8* getelementptr inbounds ([2 x i8]* @.str10, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str11, i64 0, i64 0)) #5
  %429 = load i32* %93, align 4, !tbaa !45
  %430 = add nsw i32 %429, -1
  %431 = sitofp i32 %430 to double
  %432 = fmul double %this_dy.0, %431
  %433 = fadd double %y_origin.2, %432
  %434 = call i32 @CCTK_CoordRegisterRange(%struct.cGH* %cctkGH, double %y_origin.2, double %433, i32 -1, i8* getelementptr inbounds ([2 x i8]* @.str12, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str11, i64 0, i64 0)) #5
  %435 = call i32 @CCTK_CoordRegisterRangePhysIndex(%struct.cGH* %cctkGH, i32 %loweryi.2, i32 %upperyi.1, i32 -1, i8* getelementptr inbounds ([2 x i8]* @.str12, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str11, i64 0, i64 0)) #5
  %436 = load i32* %96, align 4, !tbaa !45
  %437 = add nsw i32 %436, -1
  %438 = sitofp i32 %437 to double
  %439 = fmul double %this_dz.0, %438
  %440 = fadd double %z_origin.1, %439
  %441 = call i32 @CCTK_CoordRegisterRange(%struct.cGH* %cctkGH, double %z_origin.1, double %440, i32 -1, i8* getelementptr inbounds ([2 x i8]* @.str13, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str11, i64 0, i64 0)) #5
  %442 = call i32 @CCTK_CoordRegisterRangePhysIndex(%struct.cGH* %cctkGH, i32 %lowerzi.1, i32 %upperzi.0, i32 -1, i8* getelementptr inbounds ([2 x i8]* @.str13, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str11, i64 0, i64 0)) #5
  %443 = call i32 @CCTK_Info(i8* getelementptr inbounds ([11 x i8]* @.str14, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8]* @.str15, i64 0, i64 0)) #5
  %444 = load double* %8, align 8, !tbaa !46
  %445 = load double* %418, align 8, !tbaa !46
  %446 = load double* %419, align 8, !tbaa !46
  %447 = call i32 (i8*, i32, i64, i8*, ...)* @__sprintf_chk(i8* %90, i32 0, i64 120, i8* getelementptr inbounds ([32 x i8]* @.str16, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8]* @.str17, i64 0, i64 0), double %444, i8* getelementptr inbounds ([5 x i8]* @.str18, i64 0, i64 0), double %445, i8* getelementptr inbounds ([5 x i8]* @.str19, i64 0, i64 0), double %446) #5
  %448 = call i32 @CCTK_Info(i8* getelementptr inbounds ([11 x i8]* @.str14, i64 0, i64 0), i8* %90) #5
  %449 = call i32 @CCTK_Info(i8* getelementptr inbounds ([11 x i8]* @.str14, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8]* @.str20, i64 0, i64 0)) #5
  %450 = call i32 (i8*, i32, i64, i8*, ...)* @__sprintf_chk(i8* %90, i32 0, i64 120, i8* getelementptr inbounds ([53 x i8]* @.str21, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8]* @.str22, i64 0, i64 0), double %x_origin.2, double %426, i8* getelementptr inbounds ([4 x i8]* @.str23, i64 0, i64 0), double %y_origin.2, double %433, i8* getelementptr inbounds ([4 x i8]* @.str24, i64 0, i64 0), double %z_origin.1, double %440) #5
  %451 = call i32 @CCTK_Info(i8* getelementptr inbounds ([11 x i8]* @.str14, i64 0, i64 0), i8* %90) #5
  %452 = call i32 @CCTK_Info(i8* getelementptr inbounds ([11 x i8]* @.str14, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8]* @.str25, i64 0, i64 0)) #5
  %453 = call i32 (i8*, i32, i64, i8*, ...)* @__sprintf_chk(i8* %90, i32 0, i64 120, i8* getelementptr inbounds ([35 x i8]* @.str26, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8]* @.str22, i64 0, i64 0), i32 %lowerxi.2, i32 %upperxi.1, i8* getelementptr inbounds ([4 x i8]* @.str23, i64 0, i64 0), i32 %loweryi.2, i32 %upperyi.1, i8* getelementptr inbounds ([4 x i8]* @.str24, i64 0, i64 0), i32 %lowerzi.1, i32 %upperzi.0) #5
  %454 = call i32 @CCTK_Info(i8* getelementptr inbounds ([11 x i8]* @.str14, i64 0, i64 0), i8* %90) #5
  call void @llvm.lifetime.end(i64 120, i8* %90) #3
  ret void
}
