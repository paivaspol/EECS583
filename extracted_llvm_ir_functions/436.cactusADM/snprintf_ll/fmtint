define internal fastcc i32 @fmtint(i8* nocapture %buffer, i64* nocapture %currlen, i64 %maxlen, i64 %value, i32 %base, i32 %min, i32 %max, i32 %flags) #0 {
  %convert = alloca [20 x i8], align 16
  %1 = icmp slt i32 %max, 0
  %.max = select i1 %1, i32 0, i32 %max
  %2 = and i32 %flags, 64
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %4, label %14

; <label>:4                                       ; preds = %0
  %5 = icmp slt i64 %value, 0
  br i1 %5, label %6, label %8

; <label>:6                                       ; preds = %4
  %7 = sub nsw i64 0, %value
  br label %14

; <label>:8                                       ; preds = %4
  %9 = and i32 %flags, 2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

; <label>:11                                      ; preds = %8
  %12 = shl i32 %flags, 3
  %13 = and i32 %12, 32
  br label %14

; <label>:14                                      ; preds = %11, %8, %0, %6
  %signvalue.0 = phi i32 [ 0, %0 ], [ 45, %6 ], [ 43, %8 ], [ %13, %11 ]
  %uvalue.0 = phi i64 [ %value, %0 ], [ %7, %6 ], [ %value, %8 ], [ %value, %11 ]
  %15 = and i32 %flags, 32
  %16 = zext i32 %base to i64
  %17 = icmp ne i32 %15, 0
  %18 = select i1 %17, i8* getelementptr inbounds ([17 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8]* @.str1, i64 0, i64 0)
  br label %19

; <label>:19                                      ; preds = %14, %19
  %indvars.iv35 = phi i64 [ 0, %14 ], [ %indvars.iv.next36, %19 ]
  %uvalue.1 = phi i64 [ %uvalue.0, %14 ], [ %24, %19 ]
  %20 = urem i64 %uvalue.1, %16
  %21 = getelementptr inbounds i8* %18, i64 %20
  %22 = load i8* %21, align 1, !tbaa !2
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %23 = getelementptr inbounds [20 x i8]* %convert, i64 0, i64 %indvars.iv35
  store i8 %22, i8* %23, align 1, !tbaa !2
  %24 = udiv i64 %uvalue.1, %16
  %25 = icmp ne i64 %24, 0
  %26 = icmp slt i64 %indvars.iv.next36, 20
  %or.cond4 = and i1 %26, %25
  br i1 %or.cond4, label %19, label %.critedge

.critedge:                                        ; preds = %19
  %27 = trunc i64 %indvars.iv35 to i32
  %28 = trunc i64 %indvars.iv.next36 to i32
  %29 = icmp eq i32 %28, 20
  %place.0. = select i1 %29, i32 %27, i32 %28
  %30 = sext i32 %place.0. to i64
  %31 = getelementptr inbounds [20 x i8]* %convert, i64 0, i64 %30
  store i8 0, i8* %31, align 1, !tbaa !2
  %32 = sub nsw i32 %.max, %place.0.
  %33 = icmp sge i32 %.max, %place.0.
  %34 = select i1 %33, i32 %.max, i32 %place.0.
  %35 = sub nsw i32 %min, %34
  %36 = icmp ne i32 %signvalue.0, 0
  %.neg = sext i1 %36 to i32
  %37 = add i32 %35, %.neg
  %38 = icmp slt i32 %32, 0
  %zpadlen.0 = select i1 %38, i32 0, i32 %32
  %39 = icmp slt i32 %37, 0
  %.6 = select i1 %39, i32 0, i32 %37
  %40 = and i32 %flags, 16
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %45, label %42

; <label>:42                                      ; preds = %.critedge
  %43 = icmp sge i32 %zpadlen.0, %.6
  %44 = select i1 %43, i32 %zpadlen.0, i32 %.6
  br label %45

; <label>:45                                      ; preds = %.critedge, %42
  %spadlen.1 = phi i32 [ 0, %42 ], [ %.6, %.critedge ]
  %zpadlen.1 = phi i32 [ %44, %42 ], [ %zpadlen.0, %.critedge ]
  %46 = and i32 %flags, 1
  %47 = icmp eq i32 %46, 0
  %48 = sub nsw i32 0, %spadlen.1
  %spadlen.1. = select i1 %47, i32 %spadlen.1, i32 %48
  %49 = icmp sgt i32 %spadlen.1., 0
  br i1 %49, label %.lr.ph23, label %63

.lr.ph23:                                         ; preds = %45
  %50 = xor i32 %spadlen.1., -1
  %51 = icmp sgt i32 %50, -2
  %smax34 = select i1 %51, i32 %50, i32 -2
  %52 = add i32 %spadlen.1., %smax34
  br label %53

; <label>:53                                      ; preds = %.lr.ph23, %dopr_outch.exit
  %spadlen.220 = phi i32 [ %spadlen.1., %.lr.ph23 ], [ %59, %dopr_outch.exit ]
  %54 = load i64* %currlen, align 8, !tbaa !5
  %55 = add i64 %54, 1
  %56 = icmp ult i64 %55, %maxlen
  br i1 %56, label %57, label %dopr_outch.exit

; <label>:57                                      ; preds = %53
  store i64 %55, i64* %currlen, align 8, !tbaa !5
  %58 = getelementptr inbounds i8* %buffer, i64 %54
  store i8 32, i8* %58, align 1, !tbaa !2
  br label %dopr_outch.exit

dopr_outch.exit:                                  ; preds = %53, %57
  %59 = add nsw i32 %spadlen.220, -1
  %60 = icmp sgt i32 %spadlen.220, 1
  br i1 %60, label %53, label %._crit_edge24

._crit_edge24:                                    ; preds = %dopr_outch.exit
  %61 = sub i32 -2, %smax34
  %62 = add i32 %52, 2
  br label %63

; <label>:63                                      ; preds = %._crit_edge24, %45
  %total.0.lcssa = phi i32 [ %62, %._crit_edge24 ], [ 0, %45 ]
  %spadlen.2.lcssa = phi i32 [ %61, %._crit_edge24 ], [ %spadlen.1., %45 ]
  br i1 %36, label %64, label %72

; <label>:64                                      ; preds = %63
  %65 = load i64* %currlen, align 8, !tbaa !5
  %66 = add i64 %65, 1
  %67 = icmp ult i64 %66, %maxlen
  br i1 %67, label %68, label %dopr_outch.exit10

; <label>:68                                      ; preds = %64
  %69 = trunc i32 %signvalue.0 to i8
  store i64 %66, i64* %currlen, align 8, !tbaa !5
  %70 = getelementptr inbounds i8* %buffer, i64 %65
  store i8 %69, i8* %70, align 1, !tbaa !2
  br label %dopr_outch.exit10

dopr_outch.exit10:                                ; preds = %64, %68
  %71 = add nsw i32 %total.0.lcssa, 1
  br label %72

; <label>:72                                      ; preds = %dopr_outch.exit10, %63
  %total.1 = phi i32 [ %71, %dopr_outch.exit10 ], [ %total.0.lcssa, %63 ]
  %73 = icmp sgt i32 %zpadlen.1, 0
  br i1 %73, label %.preheader12, label %.preheader11

.preheader12:                                     ; preds = %72
  %74 = add i32 %zpadlen.1, %total.1
  %75 = xor i32 %zpadlen.1, -1
  %76 = icmp sgt i32 %75, -2
  %smax33 = select i1 %76, i32 %75, i32 -2
  %77 = add i32 %74, %smax33
  br label %78

; <label>:78                                      ; preds = %.preheader12, %dopr_outch.exit9
  %zpadlen.2 = phi i32 [ %84, %dopr_outch.exit9 ], [ %zpadlen.1, %.preheader12 ]
  %79 = load i64* %currlen, align 8, !tbaa !5
  %80 = add i64 %79, 1
  %81 = icmp ult i64 %80, %maxlen
  br i1 %81, label %82, label %dopr_outch.exit9

; <label>:82                                      ; preds = %78
  store i64 %80, i64* %currlen, align 8, !tbaa !5
  %83 = getelementptr inbounds i8* %buffer, i64 %79
  store i8 48, i8* %83, align 1, !tbaa !2
  br label %dopr_outch.exit9

dopr_outch.exit9:                                 ; preds = %78, %82
  %84 = add nsw i32 %zpadlen.2, -1
  %.old1 = icmp sgt i32 %zpadlen.2, 1
  br i1 %.old1, label %78, label %.preheader11.loopexit

.preheader11.loopexit:                            ; preds = %dopr_outch.exit9
  %85 = add i32 %77, 2
  br label %.preheader11

.preheader11:                                     ; preds = %.preheader11.loopexit, %72
  %total.3.ph = phi i32 [ %total.1, %72 ], [ %85, %.preheader11.loopexit ]
  %86 = icmp sgt i32 %place.0., 0
  br i1 %86, label %.lr.ph18, label %.preheader

.lr.ph18:                                         ; preds = %.preheader11
  %87 = add i32 %place.0., %total.3.ph
  %88 = xor i32 %place.0., -1
  %89 = icmp sgt i32 %88, -2
  %smax32 = select i1 %89, i32 %88, i32 -2
  %90 = add i32 %87, %smax32
  br label %93

..preheader_crit_edge:                            ; preds = %dopr_outch.exit8
  %91 = add i32 %90, 2
  br label %.preheader

.preheader:                                       ; preds = %..preheader_crit_edge, %.preheader11
  %total.3.lcssa = phi i32 [ %91, %..preheader_crit_edge ], [ %total.3.ph, %.preheader11 ]
  %92 = icmp slt i32 %spadlen.2.lcssa, 0
  br i1 %92, label %.lr.ph, label %110

; <label>:93                                      ; preds = %.lr.ph18, %dopr_outch.exit8
  %indvars.iv = phi i64 [ %30, %.lr.ph18 ], [ %indvars.iv.next, %dopr_outch.exit8 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %94 = load i64* %currlen, align 8, !tbaa !5
  %95 = add i64 %94, 1
  %96 = icmp ult i64 %95, %maxlen
  br i1 %96, label %97, label %dopr_outch.exit8

; <label>:97                                      ; preds = %93
  %98 = getelementptr inbounds [20 x i8]* %convert, i64 0, i64 %indvars.iv.next
  %99 = load i8* %98, align 1, !tbaa !2
  store i64 %95, i64* %currlen, align 8, !tbaa !5
  %100 = getelementptr inbounds i8* %buffer, i64 %94
  store i8 %99, i8* %100, align 1, !tbaa !2
  br label %dopr_outch.exit8

dopr_outch.exit8:                                 ; preds = %93, %97
  %101 = icmp sgt i64 %indvars.iv, 1
  br i1 %101, label %93, label %..preheader_crit_edge

.lr.ph:                                           ; preds = %.preheader, %dopr_outch.exit7
  %spadlen.314 = phi i32 [ %107, %dopr_outch.exit7 ], [ %spadlen.2.lcssa, %.preheader ]
  %102 = load i64* %currlen, align 8, !tbaa !5
  %103 = add i64 %102, 1
  %104 = icmp ult i64 %103, %maxlen
  br i1 %104, label %105, label %dopr_outch.exit7

; <label>:105                                     ; preds = %.lr.ph
  store i64 %103, i64* %currlen, align 8, !tbaa !5
  %106 = getelementptr inbounds i8* %buffer, i64 %102
  store i8 32, i8* %106, align 1, !tbaa !2
  br label %dopr_outch.exit7

dopr_outch.exit7:                                 ; preds = %.lr.ph, %105
  %107 = add nsw i32 %spadlen.314, 1
  %108 = icmp slt i32 %spadlen.314, -1
  br i1 %108, label %.lr.ph, label %._crit_edge

._crit_edge:                                      ; preds = %dopr_outch.exit7
  %109 = sub i32 %total.3.lcssa, %spadlen.2.lcssa
  br label %110

; <label>:110                                     ; preds = %._crit_edge, %.preheader
  %total.4.lcssa = phi i32 [ %109, %._crit_edge ], [ %total.3.lcssa, %.preheader ]
  ret i32 %total.4.lcssa
}
