define i32 @Util_HashAdd(%struct.T_HASH* nocapture %hash, i32 %klen, i8* nocapture readonly %key, i32 %hashval, i8* %data) #1 {
  %location.i = alloca i32, align 4
  %location = alloca i32, align 4
  %1 = icmp eq i32 %hashval, 0
  br i1 %1, label %2, label %Util_HashHash.exit

; <label>:2                                       ; preds = %0
  %3 = icmp eq i32 %klen, 0
  br i1 %3, label %Util_HashHash.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %2, %.lr.ph.i
  %pos.03.i = phi i8* [ %6, %.lr.ph.i ], [ %key, %2 ]
  %i.02.i = phi i32 [ %4, %.lr.ph.i ], [ %klen, %2 ]
  %hash.01.i = phi i32 [ %9, %.lr.ph.i ], [ 0, %2 ]
  %4 = add nsw i32 %i.02.i, -1
  %5 = mul i32 %hash.01.i, 33
  %6 = getelementptr inbounds i8* %pos.03.i, i64 1
  %7 = load i8* %pos.03.i, align 1, !tbaa !16
  %8 = sext i8 %7 to i32
  %9 = add i32 %8, %5
  %10 = icmp eq i32 %4, 0
  br i1 %10, label %Util_HashHash.exit, label %.lr.ph.i

Util_HashHash.exit:                               ; preds = %.lr.ph.i, %2, %0
  %.0 = phi i32 [ %hashval, %0 ], [ 0, %2 ], [ %9, %.lr.ph.i ]
  %11 = getelementptr inbounds %struct.T_HASH* %hash, i64 0, i32 0
  %12 = load i32* %11, align 4, !tbaa !2
  %13 = urem i32 %.0, %12
  store volatile i32 %13, i32* %location, align 4
  %14 = load volatile i32* %location, align 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds %struct.T_HASH* %hash, i64 0, i32 3
  %17 = load %struct.T_HASH_ENTRY*** %16, align 8, !tbaa !10
  %18 = getelementptr inbounds %struct.T_HASH_ENTRY** %17, i64 %15
  %entry.08 = load %struct.T_HASH_ENTRY** %18, align 8
  %19 = icmp eq %struct.T_HASH_ENTRY* %entry.08, null
  br i1 %19, label %._crit_edge11, label %.lr.ph10

; <label>:20                                      ; preds = %.lr.ph10
  %21 = getelementptr inbounds %struct.T_HASH_ENTRY* %entry.09, i64 0, i32 1
  %entry.0 = load %struct.T_HASH_ENTRY** %21, align 8
  %22 = icmp eq %struct.T_HASH_ENTRY* %entry.0, null
  br i1 %22, label %._crit_edge11, label %.lr.ph10

.lr.ph10:                                         ; preds = %Util_HashHash.exit, %20
  %entry.09 = phi %struct.T_HASH_ENTRY* [ %entry.0, %20 ], [ %entry.08, %Util_HashHash.exit ]
  %23 = getelementptr inbounds %struct.T_HASH_ENTRY* %entry.09, i64 0, i32 2
  %24 = load i32* %23, align 4, !tbaa !17
  %25 = icmp eq i32 %.0, %24
  br i1 %25, label %.loopexit, label %20

._crit_edge11:                                    ; preds = %20, %Util_HashHash.exit
  %lastentry.0.lcssa = phi %struct.T_HASH_ENTRY* [ null, %Util_HashHash.exit ], [ %entry.09, %20 ]
  %26 = tail call i8* @malloc(i64 40) #5
  %27 = bitcast i8* %26 to %struct.T_HASH_ENTRY*
  %28 = icmp eq i8* %26, null
  br i1 %28, label %68, label %29

; <label>:29                                      ; preds = %._crit_edge11
  %30 = getelementptr inbounds i8* %26, i64 16
  %31 = bitcast i8* %30 to i32*
  store i32 %.0, i32* %31, align 4, !tbaa !17
  %32 = getelementptr inbounds i8* %26, i64 20
  %33 = bitcast i8* %32 to i32*
  store i32 %klen, i32* %33, align 4, !tbaa !18
  %34 = zext i32 %klen to i64
  %35 = tail call i8* @malloc(i64 %34) #5
  %36 = getelementptr inbounds i8* %26, i64 24
  %37 = bitcast i8* %36 to i8**
  store i8* %35, i8** %37, align 8, !tbaa !14
  %38 = getelementptr inbounds i8* %26, i64 32
  %39 = bitcast i8* %38 to i8**
  store i8* %data, i8** %39, align 8, !tbaa !15
  %40 = getelementptr inbounds i8* %26, i64 8
  %41 = bitcast i8* %40 to %struct.T_HASH_ENTRY**
  store %struct.T_HASH_ENTRY* null, %struct.T_HASH_ENTRY** %41, align 8, !tbaa !12
  %42 = icmp eq i8* %35, null
  br i1 %42, label %67, label %.preheader

.preheader:                                       ; preds = %29
  %43 = icmp eq i32 %klen, 0
  br i1 %43, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader
  %44 = add i32 %klen, -1
  %45 = load i8* %key, align 1, !tbaa !16
  store i8 %45, i8* %35, align 1, !tbaa !16
  %exitcond1519 = icmp eq i32 %44, 0
  br i1 %exitcond1519, label %._crit_edge, label %._crit_edge16

._crit_edge16:                                    ; preds = %.lr.ph, %._crit_edge16
  %indvars.iv20 = phi i64 [ %indvars.iv.next, %._crit_edge16 ], [ 0, %.lr.ph ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv20, 1
  %.pre = load i8** %37, align 8, !tbaa !14
  %46 = getelementptr inbounds i8* %key, i64 %indvars.iv.next
  %47 = load i8* %46, align 1, !tbaa !16
  %48 = getelementptr inbounds i8* %.pre, i64 %indvars.iv.next
  store i8 %47, i8* %48, align 1, !tbaa !16
  %lftr.wideiv14 = trunc i64 %indvars.iv.next to i32
  %exitcond15 = icmp eq i32 %lftr.wideiv14, %44
  br i1 %exitcond15, label %._crit_edge, label %._crit_edge16

._crit_edge:                                      ; preds = %.lr.ph, %._crit_edge16, %.preheader
  %49 = icmp eq %struct.T_HASH_ENTRY* %lastentry.0.lcssa, null
  br i1 %49, label %53, label %50

; <label>:50                                      ; preds = %._crit_edge
  %51 = getelementptr inbounds %struct.T_HASH_ENTRY* %lastentry.0.lcssa, i64 0, i32 1
  %52 = bitcast %struct.T_HASH_ENTRY** %51 to i8**
  store i8* %26, i8** %52, align 8, !tbaa !12
  br label %62

; <label>:53                                      ; preds = %._crit_edge
  %54 = load volatile i32* %location, align 4
  %55 = zext i32 %54 to i64
  %56 = load %struct.T_HASH_ENTRY*** %16, align 8, !tbaa !10
  %57 = getelementptr inbounds %struct.T_HASH_ENTRY** %56, i64 %55
  %58 = bitcast %struct.T_HASH_ENTRY** %57 to i8**
  store i8* %26, i8** %58, align 8, !tbaa !11
  %59 = getelementptr inbounds %struct.T_HASH* %hash, i64 0, i32 1
  %60 = load i32* %59, align 4, !tbaa !8
  %61 = add i32 %60, 1
  store i32 %61, i32* %59, align 4, !tbaa !8
  br label %62

; <label>:62                                      ; preds = %53, %50
  %63 = bitcast i8* %26 to %struct.T_HASH_ENTRY**
  store %struct.T_HASH_ENTRY* %lastentry.0.lcssa, %struct.T_HASH_ENTRY** %63, align 8, !tbaa !19
  %64 = getelementptr inbounds %struct.T_HASH* %hash, i64 0, i32 2
  %65 = load i32* %64, align 4, !tbaa !9
  %66 = add i32 %65, 1
  store i32 %66, i32* %64, align 4, !tbaa !9
  br label %68

; <label>:67                                      ; preds = %29
  tail call void @free(i8* %26) #6
  br label %68

; <label>:68                                      ; preds = %62, %67, %._crit_edge11
  %entry.1.ph = phi %struct.T_HASH_ENTRY* [ %27, %._crit_edge11 ], [ null, %67 ], [ %27, %62 ]
  %69 = icmp eq %struct.T_HASH_ENTRY* %entry.1.ph, null
  %. = select i1 %69, i32 -2, i32 0
  br label %.loopexit

.loopexit:                                        ; preds = %.lr.ph10, %68
  %retval.0 = phi i32 [ %., %68 ], [ -1, %.lr.ph10 ]
  %70 = bitcast i32* %location.i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %70)
  %71 = getelementptr inbounds %struct.T_HASH* %hash, i64 0, i32 2
  %72 = load i32* %71, align 4, !tbaa !9
  %73 = getelementptr inbounds %struct.T_HASH* %hash, i64 0, i32 1
  %74 = load i32* %73, align 4, !tbaa !8
  %75 = icmp ugt i32 %72, %74
  br i1 %75, label %76, label %HashRehash.exit

; <label>:76                                      ; preds = %.loopexit
  %77 = load i32* %11, align 4, !tbaa !2
  %78 = shl i32 %77, 1
  %79 = zext i32 %78 to i64
  %80 = tail call i8* @calloc(i64 8, i64 %79) #5
  %81 = bitcast i8* %80 to %struct.T_HASH_ENTRY**
  %82 = load %struct.T_HASH_ENTRY*** %16, align 8, !tbaa !10
  %83 = icmp eq i8* %80, null
  %84 = bitcast %struct.T_HASH_ENTRY** %82 to i8*
  br i1 %83, label %HashRehash.exit, label %.preheader.i

.preheader.i:                                     ; preds = %76
  %85 = icmp eq i32 %77, 0
  br i1 %85, label %.preheader._crit_edge.i, label %.lr.ph5.i

.preheader._crit_edge.i:                          ; preds = %.preheader.i
  %.pre8.i = bitcast %struct.T_HASH_ENTRY*** %16 to i8**
  br label %120

.lr.ph5.i:                                        ; preds = %.preheader.i
  %86 = add i32 %77, -1
  br label %87

; <label>:87                                      ; preds = %._crit_edge.i, %.lr.ph5.i
  %indvars.iv.i = phi i64 [ 0, %.lr.ph5.i ], [ %indvars.iv.next.i, %._crit_edge.i ]
  %new_fill.03.i = phi i32 [ 0, %.lr.ph5.i ], [ %new_fill.1.lcssa.i, %._crit_edge.i ]
  %88 = getelementptr inbounds %struct.T_HASH_ENTRY** %82, i64 %indvars.iv.i
  %89 = load %struct.T_HASH_ENTRY** %88, align 8, !tbaa !11
  %90 = icmp eq %struct.T_HASH_ENTRY* %89, null
  br i1 %90, label %._crit_edge.i, label %.lr.ph.i1

.lr.ph.i1:                                        ; preds = %87, %118
  %entry.02.i = phi %struct.T_HASH_ENTRY* [ %92, %118 ], [ %89, %87 ]
  %new_fill.11.i = phi i32 [ %new_fill.2.i, %118 ], [ %new_fill.03.i, %87 ]
  %91 = getelementptr inbounds %struct.T_HASH_ENTRY* %entry.02.i, i64 0, i32 1
  %92 = load %struct.T_HASH_ENTRY** %91, align 8, !tbaa !12
  %93 = getelementptr inbounds %struct.T_HASH_ENTRY* %entry.02.i, i64 0, i32 2
  %94 = load i32* %93, align 4, !tbaa !17
  %95 = urem i32 %94, %78
  store volatile i32 %95, i32* %location.i, align 4
  %96 = load volatile i32* %location.i, align 4
  %97 = zext i32 %96 to i64
  %98 = getelementptr inbounds %struct.T_HASH_ENTRY** %81, i64 %97
  %99 = load %struct.T_HASH_ENTRY** %98, align 8, !tbaa !11
  %100 = icmp eq %struct.T_HASH_ENTRY* %99, null
  br i1 %100, label %101, label %107

; <label>:101                                     ; preds = %.lr.ph.i1
  %102 = add i32 %new_fill.11.i, 1
  %103 = load volatile i32* %location.i, align 4
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds %struct.T_HASH_ENTRY** %81, i64 %104
  store %struct.T_HASH_ENTRY* %entry.02.i, %struct.T_HASH_ENTRY** %105, align 8, !tbaa !11
  %106 = getelementptr inbounds %struct.T_HASH_ENTRY* %entry.02.i, i64 0, i32 0
  store %struct.T_HASH_ENTRY* null, %struct.T_HASH_ENTRY** %106, align 8, !tbaa !19
  br label %118

; <label>:107                                     ; preds = %.lr.ph.i1
  %108 = load volatile i32* %location.i, align 4
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds %struct.T_HASH_ENTRY** %81, i64 %109
  %111 = load %struct.T_HASH_ENTRY** %110, align 8, !tbaa !11
  br label %112

; <label>:112                                     ; preds = %112, %107
  %entry2.0.i = phi %struct.T_HASH_ENTRY* [ %111, %107 ], [ %114, %112 ]
  %113 = getelementptr inbounds %struct.T_HASH_ENTRY* %entry2.0.i, i64 0, i32 1
  %114 = load %struct.T_HASH_ENTRY** %113, align 8, !tbaa !12
  %115 = icmp eq %struct.T_HASH_ENTRY* %114, null
  br i1 %115, label %116, label %112

; <label>:116                                     ; preds = %112
  store %struct.T_HASH_ENTRY* %entry.02.i, %struct.T_HASH_ENTRY** %113, align 8, !tbaa !12
  %117 = getelementptr inbounds %struct.T_HASH_ENTRY* %entry.02.i, i64 0, i32 0
  store %struct.T_HASH_ENTRY* %entry2.0.i, %struct.T_HASH_ENTRY** %117, align 8, !tbaa !19
  br label %118

; <label>:118                                     ; preds = %116, %101
  %new_fill.2.i = phi i32 [ %new_fill.11.i, %116 ], [ %102, %101 ]
  store %struct.T_HASH_ENTRY* null, %struct.T_HASH_ENTRY** %91, align 8, !tbaa !12
  %119 = icmp eq %struct.T_HASH_ENTRY* %92, null
  br i1 %119, label %._crit_edge.i, label %.lr.ph.i1

._crit_edge.i:                                    ; preds = %118, %87
  %new_fill.1.lcssa.i = phi i32 [ %new_fill.03.i, %87 ], [ %new_fill.2.i, %118 ]
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %86
  br i1 %exitcond, label %._crit_edge6.i, label %87

._crit_edge6.i:                                   ; preds = %._crit_edge.i
  %.phi.trans.insert.i = bitcast %struct.T_HASH_ENTRY*** %16 to i8**
  %.pre.i = load i8** %.phi.trans.insert.i, align 8, !tbaa !10
  br label %120

; <label>:120                                     ; preds = %._crit_edge6.i, %.preheader._crit_edge.i
  %.pre-phi.i = phi i8** [ %.pre8.i, %.preheader._crit_edge.i ], [ %.phi.trans.insert.i, %._crit_edge6.i ]
  %121 = phi i8* [ %84, %.preheader._crit_edge.i ], [ %.pre.i, %._crit_edge6.i ]
  %new_fill.0.lcssa.i = phi i32 [ 0, %.preheader._crit_edge.i ], [ %new_fill.1.lcssa.i, %._crit_edge6.i ]
  tail call void @free(i8* %121) #5
  store i8* %80, i8** %.pre-phi.i, align 8, !tbaa !10
  store i32 %new_fill.0.lcssa.i, i32* %73, align 4, !tbaa !8
  store i32 %78, i32* %11, align 4, !tbaa !2
  br label %HashRehash.exit

HashRehash.exit:                                  ; preds = %.loopexit, %76, %120
  call void @llvm.lifetime.end(i64 4, i8* %70)
  ret i32 %retval.0
}
