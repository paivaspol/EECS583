define internal fastcc %struct.T_HASH_ENTRY* @HashFind(%struct.T_HASH* nocapture %hash, i32 %klen, i8* nocapture %key, i32 %hashval) #1 {
entry:
  %location = alloca i32, align 4
  call void @llvm.dbg.value(metadata !{%struct.T_HASH* %hash}, i64 0, metadata !130), !dbg !191
  call void @llvm.dbg.value(metadata !{i32 %klen}, i64 0, metadata !131), !dbg !192
  call void @llvm.dbg.value(metadata !{i8* %key}, i64 0, metadata !132), !dbg !193
  call void @llvm.dbg.value(metadata !{i32 %hashval}, i64 0, metadata !133), !dbg !194
  %tobool = icmp eq i32 %hashval, 0, !dbg !195
  br i1 %tobool, label %if.then, label %if.end, !dbg !195

if.then:                                          ; preds = %entry
  tail call void @llvm.dbg.value(metadata !{i32 %klen}, i64 0, metadata !196), !dbg !199
  tail call void @llvm.dbg.value(metadata !{i8* %key}, i64 0, metadata !200), !dbg !201
  tail call void @llvm.dbg.value(metadata !{i32 %klen}, i64 0, metadata !202), !dbg !203
  tail call void @llvm.dbg.value(metadata !{i8* %key}, i64 0, metadata !204), !dbg !205
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !206), !dbg !207
  %tobool1.i = icmp eq i32 %klen, 0, !dbg !208
  br i1 %tobool1.i, label %if.end, label %while.body.i, !dbg !208

while.body.i:                                     ; preds = %if.then, %while.body.i
  %pos.04.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ %key, %if.then ]
  %i.03.i = phi i32 [ %dec.i, %while.body.i ], [ %klen, %if.then ]
  %hash.02.i = phi i32 [ %add.i, %while.body.i ], [ 0, %if.then ]
  %dec.i = add nsw i32 %i.03.i, -1, !dbg !208
  %mul.i = mul i32 %hash.02.i, 33, !dbg !209
  %incdec.ptr.i = getelementptr inbounds i8* %pos.04.i, i64 1, !dbg !209
  tail call void @llvm.dbg.value(metadata !{i8* %incdec.ptr.i}, i64 0, metadata !204), !dbg !209
  %0 = load i8* %pos.04.i, align 1, !dbg !209, !tbaa !146
  %conv.i = sext i8 %0 to i32, !dbg !209
  %add.i = add i32 %conv.i, %mul.i, !dbg !209
  tail call void @llvm.dbg.value(metadata !{i32 %add.i}, i64 0, metadata !206), !dbg !209
  %tobool.i = icmp eq i32 %dec.i, 0, !dbg !208
  br i1 %tobool.i, label %if.end, label %while.body.i, !dbg !208

if.end:                                           ; preds = %while.body.i, %if.then, %entry
  %hashval.addr.0 = phi i32 [ %hashval, %entry ], [ 0, %if.then ], [ %add.i, %while.body.i ]
  %size = getelementptr inbounds %struct.T_HASH* %hash, i64 0, i32 0, !dbg !211
  %1 = load i32* %size, align 4, !dbg !211, !tbaa !145
  %rem = urem i32 %hashval.addr.0, %1, !dbg !211
  call void @llvm.dbg.value(metadata !{i32 %rem}, i64 0, metadata !135), !dbg !211
  store volatile i32 %rem, i32* %location, align 4, !dbg !211
  call void @llvm.dbg.value(metadata !{i32* %location}, i64 0, metadata !135), !dbg !212
  %location.0.load12 = load volatile i32* %location, align 4, !dbg !212
  %idxprom = zext i32 %location.0.load12 to i64, !dbg !212
  %array = getelementptr inbounds %struct.T_HASH* %hash, i64 0, i32 3, !dbg !212
  %2 = load %struct.T_HASH_ENTRY*** %array, align 8, !dbg !212, !tbaa !151
  %arrayidx = getelementptr inbounds %struct.T_HASH_ENTRY** %2, i64 %idxprom, !dbg !212
  %entry1.013 = load %struct.T_HASH_ENTRY** %arrayidx, align 8, !dbg !212
  %tobool214 = icmp eq %struct.T_HASH_ENTRY* %entry1.013, null, !dbg !213
  br i1 %tobool214, label %for.end, label %for.body, !dbg !213

for.cond:                                         ; preds = %for.body
  %next = getelementptr inbounds %struct.T_HASH_ENTRY* %entry1.015, i64 0, i32 1, !dbg !213
  %entry1.0 = load %struct.T_HASH_ENTRY** %next, align 8, !dbg !212
  %tobool2 = icmp eq %struct.T_HASH_ENTRY* %entry1.0, null, !dbg !213
  br i1 %tobool2, label %for.end, label %for.body, !dbg !213

for.body:                                         ; preds = %if.end, %for.cond
  %entry1.015 = phi %struct.T_HASH_ENTRY* [ %entry1.0, %for.cond ], [ %entry1.013, %if.end ]
  %hash3 = getelementptr inbounds %struct.T_HASH_ENTRY* %entry1.015, i64 0, i32 2, !dbg !215
  %3 = load i32* %hash3, align 4, !dbg !215, !tbaa !145
  %cmp = icmp eq i32 %hashval.addr.0, %3, !dbg !215
  br i1 %cmp, label %for.end, label %for.cond, !dbg !215

for.end:                                          ; preds = %for.cond, %for.body, %if.end
  %entry1.0.lcssa = phi %struct.T_HASH_ENTRY* [ null, %if.end ], [ %entry1.015, %for.body ], [ null, %for.cond ]
  ret %struct.T_HASH_ENTRY* %entry1.0.lcssa, !dbg !217
}
