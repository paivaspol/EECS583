define i32 @PUGH_ReductionArrays(%struct.cGH* %GH, i32 %proc, i32 %num_dims, i32* nocapture readonly %dims, i32 %intype, i32 %num_inarrays, i8** %inarrays, i32 %outtype, i32 %num_outvals, i8* nocapture %outvals, i32 (%struct.cGH*, i32, i32, i32*, i32*, i32*, i32*, i32, i32, i32*, i8**, i32, double*)* nocapture %reduction_fn) #1 {
  %from = alloca [1 x i32], align 4
  %to = alloca [1 x i32], align 4
  %iterator = alloca [1 x i32], align 4
  %points_per_dim = alloca [1 x i32], align 4
  %1 = getelementptr inbounds [1 x i32]* %points_per_dim, i64 0, i64 0
  store i32 1, i32* %1, align 4, !tbaa !2
  %2 = getelementptr inbounds [1 x i32]* %from, i64 0, i64 0
  store i32 0, i32* %2, align 4, !tbaa !2
  %3 = load i32* %dims, align 4, !tbaa !2
  %4 = getelementptr inbounds [1 x i32]* %to, i64 0, i64 0
  store i32 %3, i32* %4, align 4, !tbaa !2
  %5 = icmp sgt i32 %num_dims, 1
  br i1 %5, label %.lr.ph4, label %12

.lr.ph4:                                          ; preds = %0
  %6 = add i32 %num_dims, -1
  br label %7

; <label>:7                                       ; preds = %7, %.lr.ph4
  %indvars.iv6 = phi i64 [ 1, %.lr.ph4 ], [ %indvars.iv.next7, %7 ]
  %8 = phi i32 [ %3, %.lr.ph4 ], [ %11, %7 ]
  %9 = getelementptr inbounds i32* %dims, i64 %indvars.iv6
  %10 = load i32* %9, align 4, !tbaa !2
  %11 = mul nsw i32 %8, %10
  %indvars.iv.next7 = add nuw nsw i64 %indvars.iv6, 1
  %lftr.wideiv8 = trunc i64 %indvars.iv6 to i32
  %exitcond9 = icmp eq i32 %lftr.wideiv8, %6
  br i1 %exitcond9, label %._crit_edge5, label %7

._crit_edge5:                                     ; preds = %7
  store i32 %11, i32* %4, align 4, !tbaa !2
  br label %12

; <label>:12                                      ; preds = %._crit_edge5, %0
  %13 = phi i32 [ %11, %._crit_edge5 ], [ %3, %0 ]
  %14 = icmp eq i32 %num_outvals, 1
  br i1 %14, label %20, label %15

; <label>:15                                      ; preds = %12
  %16 = icmp eq i32 %13, %num_outvals
  br i1 %16, label %19, label %17

; <label>:17                                      ; preds = %15
  %18 = tail call i32 (i32, i32, i8*, i8*, i8*, ...)* @CCTK_VWarn(i32 1, i32 150, i8* getelementptr inbounds ([82 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @.str1, i64 0, i64 0), i8* getelementptr inbounds ([121 x i8]* @.str2, i64 0, i64 0), i32 %num_dims, i32 %13, i32 %num_outvals) #5
  br label %50

; <label>:19                                      ; preds = %15
  store i32 1, i32* %4, align 4, !tbaa !2
  br label %20

; <label>:20                                      ; preds = %12, %19
  %21 = phi i32 [ %13, %12 ], [ 1, %19 ]
  %22 = load i32 (%struct.cGH*)** @CCTK_nProcs, align 8, !tbaa !6
  %23 = tail call i32 %22(%struct.cGH* %GH) #5
  %24 = mul nsw i32 %23, %21
  %25 = sext i32 %num_inarrays to i64
  %26 = shl nsw i64 %25, 2
  %27 = tail call i8* @malloc(i64 %26) #5
  %28 = bitcast i8* %27 to i32*
  %29 = icmp sgt i32 %num_inarrays, 0
  br i1 %29, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %20
  %30 = add i32 %num_inarrays, -1
  br label %31

; <label>:31                                      ; preds = %31, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %31 ]
  %32 = getelementptr inbounds i32* %28, i64 %indvars.iv
  store i32 %intype, i32* %32, align 4, !tbaa !2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %30
  br i1 %exitcond, label %._crit_edge, label %31

._crit_edge:                                      ; preds = %31, %20
  %33 = sext i32 %num_outvals to i64
  %34 = shl nsw i64 %33, 3
  %35 = tail call i8* @malloc(i64 %34) #5
  %36 = bitcast i8* %35 to double*
  %37 = getelementptr inbounds [1 x i32]* %iterator, i64 0, i64 0
  %38 = call i32 %reduction_fn(%struct.cGH* %GH, i32 %proc, i32 %num_dims, i32* %2, i32* %4, i32* %37, i32* %1, i32 %24, i32 %num_inarrays, i32* %28, i8** %inarrays, i32 %num_outvals, double* %36) #5
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %49

; <label>:40                                      ; preds = %._crit_edge
  %41 = icmp slt i32 %proc, 0
  br i1 %41, label %46, label %42

; <label>:42                                      ; preds = %40
  %43 = load i32 (%struct.cGH*)** @CCTK_MyProc, align 8, !tbaa !6
  %44 = call i32 %43(%struct.cGH* %GH) #5
  %45 = icmp eq i32 %44, %proc
  br i1 %45, label %46, label %49

; <label>:46                                      ; preds = %42, %40
  %47 = mul nsw i32 %num_outvals, %num_inarrays
  %48 = call fastcc i32 @copy_real_to_outtype(i32 %47, double* %36, i32 %outtype, i8* %outvals) #6
  br label %49

; <label>:49                                      ; preds = %46, %42, %._crit_edge
  %retval.0 = phi i32 [ %48, %46 ], [ 0, %42 ], [ %38, %._crit_edge ]
  call void @free(i8* %27) #6
  call void @free(i8* %35) #6
  br label %50

; <label>:50                                      ; preds = %49, %17
  %.0 = phi i32 [ -1, %17 ], [ %retval.0, %49 ]
  ret i32 %.0
}
