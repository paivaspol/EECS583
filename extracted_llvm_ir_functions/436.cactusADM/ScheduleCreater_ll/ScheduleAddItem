define internal fastcc i32 @ScheduleAddItem(i32 %ghandle, %struct.t_sched_item* nocapture %item) #1 {
  %1 = load %struct.cHandledData** @schedule_groups, align 8, !tbaa !9
  %2 = tail call i8* @Util_GetHandledData(%struct.cHandledData* %1, i32 %ghandle) #8
  %3 = getelementptr inbounds i8* %2, i64 16
  %4 = bitcast i8* %3 to i32*
  %5 = load i32* %4, align 4, !tbaa !17
  %6 = add nsw i32 %5, 1
  store i32 %6, i32* %4, align 4, !tbaa !17
  %7 = getelementptr inbounds i8* %2, i64 24
  %8 = bitcast i8* %7 to i8**
  %9 = load i8** %8, align 8, !tbaa !18
  %10 = sext i32 %6 to i64
  %11 = mul nsw i64 %10, 56
  %12 = tail call i8* @realloc(i8* %9, i64 %11) #8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %22, label %14

; <label>:14                                      ; preds = %0
  %15 = bitcast i8* %12 to %struct.t_sched_item*
  store i8* %12, i8** %8, align 8, !tbaa !18
  %16 = load i32* %4, align 4, !tbaa !17
  %17 = add nsw i32 %16, -1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.t_sched_item* %15, i64 %18
  %20 = bitcast %struct.t_sched_item* %19 to i8*
  %21 = bitcast %struct.t_sched_item* %item to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 56, i32 8, i1 false), !tbaa.struct !26
  tail call void @free(i8* %21) #9
  br label %25

; <label>:22                                      ; preds = %0
  %23 = load i32* %4, align 4, !tbaa !17
  %24 = add nsw i32 %23, -1
  store i32 %24, i32* %4, align 4, !tbaa !17
  br label %25

; <label>:25                                      ; preds = %22, %14
  %retcode.0 = phi i32 [ 0, %14 ], [ -1, %22 ]
  ret i32 %retcode.0
}
