define i32 @CCTKi_NamesStoreVariable(i8* %name, i32 %vnum, i32 %gnum) #1 {
  %1 = load %struct.T_HASH** @VariableData, align 8, !tbaa !2
  %2 = icmp eq %struct.T_HASH* %1, null
  br i1 %2, label %3, label %5

; <label>:3                                       ; preds = %0
  %4 = tail call %struct.T_HASH* @Util_HashCreate(i32 64) #5
  store %struct.T_HASH* %4, %struct.T_HASH** @VariableData, align 8, !tbaa !2
  br label %5

; <label>:5                                       ; preds = %0, %3
  %6 = phi %struct.T_HASH* [ %1, %0 ], [ %4, %3 ]
  %7 = tail call i8* @malloc(i64 8) #5
  %8 = icmp ne i8* %7, null
  %9 = icmp ne %struct.T_HASH* %6, null
  %or.cond = and i1 %8, %9
  br i1 %or.cond, label %10, label %29

; <label>:10                                      ; preds = %5
  %11 = bitcast i8* %7 to i32*
  store i32 %vnum, i32* %11, align 4, !tbaa !10
  %12 = getelementptr inbounds i8* %7, i64 4
  %13 = bitcast i8* %12 to i32*
  store i32 %gnum, i32* %13, align 4, !tbaa !12
  %14 = tail call i64 @strlen(i8* %name) #5
  %15 = trunc i64 %14 to i32
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %CaseIndependentHash.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %10, %.lr.ph.i
  %pos.03.i = phi i8* [ %19, %.lr.ph.i ], [ %name, %10 ]
  %i.02.i = phi i32 [ %17, %.lr.ph.i ], [ %15, %10 ]
  %hash.01.i = phi i32 [ %23, %.lr.ph.i ], [ 0, %10 ]
  %17 = add nsw i32 %i.02.i, -1
  %18 = mul i32 %hash.01.i, 33
  %19 = getelementptr inbounds i8* %pos.03.i, i64 1
  %20 = load i8* %pos.03.i, align 1, !tbaa !9
  %21 = sext i8 %20 to i32
  %22 = tail call i32 @__toupper(i32 %21) #5
  %23 = add i32 %22, %18
  %24 = icmp eq i32 %17, 0
  br i1 %24, label %CaseIndependentHash.exit.loopexit, label %.lr.ph.i

CaseIndependentHash.exit.loopexit:                ; preds = %.lr.ph.i
  %.pre = load %struct.T_HASH** @VariableData, align 8, !tbaa !2
  br label %CaseIndependentHash.exit

CaseIndependentHash.exit:                         ; preds = %CaseIndependentHash.exit.loopexit, %10
  %25 = phi %struct.T_HASH* [ %6, %10 ], [ %.pre, %CaseIndependentHash.exit.loopexit ]
  %hash.0.lcssa.i = phi i32 [ 0, %10 ], [ %23, %CaseIndependentHash.exit.loopexit ]
  %26 = tail call i64 @strlen(i8* %name) #5
  %27 = trunc i64 %26 to i32
  %28 = tail call i32 @Util_HashStore(%struct.T_HASH* %25, i32 %27, i8* %name, i32 %hash.0.lcssa.i, i8* %7) #5
  br label %29

; <label>:29                                      ; preds = %5, %CaseIndependentHash.exit
  %retval.0 = phi i32 [ %28, %CaseIndependentHash.exit ], [ -1, %5 ]
  ret i32 %retval.0
}
