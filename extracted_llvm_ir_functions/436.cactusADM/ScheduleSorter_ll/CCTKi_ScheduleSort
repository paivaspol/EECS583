define i32 @CCTKi_ScheduleSort(i32 %size, i8** nocapture %array, i32* nocapture %order) #1 {
  %1 = add i32 %size, -1
  %2 = mul nsw i32 %1, %size
  %3 = sdiv i32 %2, 2
  %4 = icmp sgt i32 %2, 1
  br i1 %4, label %.critedge.preheader.lr.ph, label %.thread.preheader

.critedge.preheader.lr.ph:                        ; preds = %0
  %5 = icmp sgt i32 %size, 0
  br i1 %5, label %.critedge.preheader.lr.ph..critedge.preheader.lr.ph.split_crit_edge, label %.thread._crit_edge

.critedge.preheader.lr.ph..critedge.preheader.lr.ph.split_crit_edge: ; preds = %.critedge.preheader.lr.ph
  %6 = sext i32 %size to i64
  br label %.lr.ph14

.lr.ph14:                                         ; preds = %ScheduleSwap.exit, %.critedge.preheader.lr.ph..critedge.preheader.lr.ph.split_crit_edge
  %iter.015 = phi i32 [ 0, %.critedge.preheader.lr.ph..critedge.preheader.lr.ph.split_crit_edge ], [ %42, %ScheduleSwap.exit ]
  br label %9

.critedge.loopexit:                               ; preds = %18
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  br i1 %10, label %9, label %.thread.preheader

.thread.preheader:                                ; preds = %ScheduleSwap.exit, %9, %.critedge.loopexit, %0
  %7 = icmp sgt i32 %size, 0
  br i1 %7, label %.lr.ph9, label %.thread._crit_edge

.lr.ph9:                                          ; preds = %.thread.preheader
  %8 = sext i32 %size to i64
  br label %44

; <label>:9                                       ; preds = %.lr.ph14, %.critedge.loopexit
  %indvars.iv30 = phi i64 [ 0, %.lr.ph14 ], [ %indvars.iv.next31, %.critedge.loopexit ]
  %indvars.iv26 = phi i64 [ 1, %.lr.ph14 ], [ %indvars.iv.next27, %.critedge.loopexit ]
  %indvars.iv.next31 = add nuw nsw i64 %indvars.iv30, 1
  %10 = icmp slt i64 %indvars.iv.next31, %6
  br i1 %10, label %.lr.ph12, label %.thread.preheader

.lr.ph12:                                         ; preds = %9
  %11 = getelementptr inbounds i8** %array, i64 %indvars.iv30
  %12 = load i8** %11, align 8, !tbaa !2
  %13 = trunc i64 %indvars.iv.next31 to i32
  br label %14

; <label>:14                                      ; preds = %.lr.ph12, %18
  %indvars.iv28 = phi i64 [ %indvars.iv26, %.lr.ph12 ], [ %indvars.iv.next29, %18 ]
  %column.211 = phi i32 [ %13, %.lr.ph12 ], [ %19, %18 ]
  %15 = getelementptr inbounds i8* %12, i64 %indvars.iv28
  %16 = load i8* %15, align 1, !tbaa !6
  %17 = icmp sgt i8 %16, 0
  br i1 %17, label %.lr.ph.i, label %18

; <label>:18                                      ; preds = %14
  %19 = add nuw nsw i32 %column.211, 1
  %20 = icmp slt i32 %19, %size
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 1
  br i1 %20, label %14, label %.critedge.loopexit

.lr.ph.i:                                         ; preds = %14
  %sext = shl i64 %indvars.iv30, 32
  %21 = ashr exact i64 %sext, 32
  %22 = getelementptr inbounds i8** %array, i64 %21
  %23 = bitcast i8** %22 to i64*
  %24 = load i64* %23, align 8, !tbaa !2
  %sext34 = shl i64 %indvars.iv28, 32
  %25 = ashr exact i64 %sext34, 32
  %26 = getelementptr inbounds i8** %array, i64 %25
  %27 = bitcast i8** %26 to i64*
  %28 = load i64* %27, align 8, !tbaa !2
  store i64 %28, i64* %23, align 8, !tbaa !2
  store i64 %24, i64* %27, align 8, !tbaa !2
  br label %29

; <label>:29                                      ; preds = %29, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %.lr.ph.i ], [ %indvars.iv.next.i, %29 ]
  %30 = getelementptr inbounds i8** %array, i64 %indvars.iv.i
  %31 = load i8** %30, align 8, !tbaa !2
  %32 = getelementptr inbounds i8* %31, i64 %25
  %33 = load i8* %32, align 1, !tbaa !6
  %34 = getelementptr inbounds i8* %31, i64 %21
  %35 = load i8* %34, align 1, !tbaa !6
  store i8 %35, i8* %32, align 1, !tbaa !6
  %36 = load i8** %30, align 8, !tbaa !2
  %37 = getelementptr inbounds i8* %36, i64 %21
  store i8 %33, i8* %37, align 1, !tbaa !6
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv32 = trunc i64 %indvars.iv.i to i32
  %exitcond33 = icmp eq i32 %lftr.wideiv32, %1
  br i1 %exitcond33, label %ScheduleSwap.exit, label %29

ScheduleSwap.exit:                                ; preds = %29
  %38 = getelementptr inbounds i32* %order, i64 %25
  %39 = load i32* %38, align 4, !tbaa !7
  %40 = getelementptr inbounds i32* %order, i64 %21
  %41 = load i32* %40, align 4, !tbaa !7
  store i32 %41, i32* %38, align 4, !tbaa !7
  store i32 %39, i32* %40, align 4, !tbaa !7
  %42 = add nuw nsw i32 %iter.015, 1
  %43 = icmp slt i32 %42, %3
  br i1 %43, label %.lr.ph14, label %.thread.preheader

.thread.loopexit:                                 ; preds = %48, %44
  %retval.1.lcssa = phi i32 [ %retval.08, %44 ], [ %.retval.1, %48 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv24 = trunc i64 %indvars.iv22 to i32
  %exitcond25 = icmp eq i32 %lftr.wideiv24, %1
  br i1 %exitcond25, label %.thread._crit_edge, label %44

; <label>:44                                      ; preds = %.thread.loopexit, %.lr.ph9
  %indvars.iv22 = phi i64 [ 0, %.lr.ph9 ], [ %indvars.iv.next23, %.thread.loopexit ]
  %indvars.iv = phi i64 [ 1, %.lr.ph9 ], [ %indvars.iv.next, %.thread.loopexit ]
  %retval.08 = phi i32 [ 0, %.lr.ph9 ], [ %retval.1.lcssa, %.thread.loopexit ]
  %indvars.iv.next23 = add nuw nsw i64 %indvars.iv22, 1
  %45 = icmp slt i64 %indvars.iv.next23, %8
  br i1 %45, label %.lr.ph, label %.thread.loopexit

.lr.ph:                                           ; preds = %44
  %46 = getelementptr inbounds i8** %array, i64 %indvars.iv22
  %47 = load i8** %46, align 8, !tbaa !2
  br label %48

; <label>:48                                      ; preds = %48, %.lr.ph
  %indvars.iv20 = phi i64 [ %indvars.iv, %.lr.ph ], [ %indvars.iv.next21, %48 ]
  %retval.16 = phi i32 [ %retval.08, %.lr.ph ], [ %.retval.1, %48 ]
  %49 = getelementptr inbounds i8* %47, i64 %indvars.iv20
  %50 = load i8* %49, align 1, !tbaa !6
  %51 = icmp sgt i8 %50, 0
  %52 = sext i1 %51 to i32
  %.retval.1 = add nsw i32 %52, %retval.16
  %indvars.iv.next21 = add nuw nsw i64 %indvars.iv20, 1
  %lftr.wideiv = trunc i64 %indvars.iv20 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %1
  br i1 %exitcond, label %.thread.loopexit, label %48

.thread._crit_edge:                               ; preds = %.thread.loopexit, %.critedge.preheader.lr.ph, %.thread.preheader
  %retval.0.lcssa = phi i32 [ 0, %.thread.preheader ], [ 0, %.critedge.preheader.lr.ph ], [ %retval.1.lcssa, %.thread.loopexit ]
  ret i32 %retval.0.lcssa
}
