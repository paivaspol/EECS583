define i32 @CCTKi_ScheduleAddRow(i32 %size, i8** nocapture readonly %array, i32* nocapture %order, i32 %item, i32* nocapture readonly %thisorders) #1 {
  tail call void @llvm.dbg.value(metadata i32 %size, i64 0, metadata !31, metadata !87), !dbg !166
  tail call void @llvm.dbg.value(metadata i8** %array, i64 0, metadata !32, metadata !87), !dbg !167
  tail call void @llvm.dbg.value(metadata i32* %order, i64 0, metadata !33, metadata !87), !dbg !168
  tail call void @llvm.dbg.value(metadata i32 %item, i64 0, metadata !34, metadata !87), !dbg !169
  tail call void @llvm.dbg.value(metadata i32* %thisorders, i64 0, metadata !35, metadata !87), !dbg !170
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !36, metadata !87), !dbg !171
  %1 = sext i32 %item to i64, !dbg !172
  %2 = getelementptr inbounds i32* %order, i64 %1, !dbg !172
  store i32 %item, i32* %2, align 4, !dbg !173, !tbaa !148
  tail call void @llvm.dbg.value(metadata i32 %item, i64 0, metadata !37, metadata !87), !dbg !174
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !38, metadata !87), !dbg !175
  %3 = icmp sgt i32 %size, 0, !dbg !176
  br i1 %3, label %.lr.ph, label %._crit_edge, !dbg !179

.lr.ph:                                           ; preds = %0
  %4 = getelementptr inbounds i8** %array, i64 %1, !dbg !180
  %5 = add i32 %size, -1, !dbg !179
  br label %6, !dbg !179

; <label>:6                                       ; preds = %23, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %23 ]
  %retval.02 = phi i32 [ 0, %.lr.ph ], [ %retval.2, %23 ]
  %7 = getelementptr inbounds i32* %thisorders, i64 %indvars.iv, !dbg !185
  %8 = load i32* %7, align 4, !dbg !185, !tbaa !148
  %9 = icmp eq i32 %8, 0, !dbg !185
  br i1 %9, label %23, label %10, !dbg !186

; <label>:10                                      ; preds = %6
  %11 = load i8** %4, align 8, !dbg !180, !tbaa !117
  %12 = getelementptr inbounds i8* %11, i64 %indvars.iv, !dbg !180
  %13 = load i8* %12, align 1, !dbg !180, !tbaa !121
  %14 = sext i8 %13 to i32
  %notlhs = icmp ne i8 %13, 0, !dbg !187
  %notrhs = icmp ne i32 %14, %8, !dbg !187
  %not.or.cond = and i1 %notlhs, %notrhs, !dbg !187
  %15 = sext i1 %not.or.cond to i32, !dbg !187
  %retval.1 = add nsw i32 %15, %retval.02, !dbg !187
  %16 = trunc i32 %8 to i8, !dbg !188
  store i8 %16, i8* %12, align 1, !dbg !189, !tbaa !121
  %17 = load i32* %7, align 4, !dbg !190, !tbaa !148
  %18 = sub nsw i32 0, %17, !dbg !191
  %19 = trunc i32 %18 to i8, !dbg !191
  %20 = getelementptr inbounds i8** %array, i64 %indvars.iv, !dbg !192
  %21 = load i8** %20, align 8, !dbg !192, !tbaa !117
  %22 = getelementptr inbounds i8* %21, i64 %1, !dbg !192
  store i8 %19, i8* %22, align 1, !dbg !193, !tbaa !121
  br label %23, !dbg !194

; <label>:23                                      ; preds = %6, %10
  %retval.2 = phi i32 [ %retval.1, %10 ], [ %retval.02, %6 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !179
  %lftr.wideiv = trunc i64 %indvars.iv to i32, !dbg !179
  %exitcond = icmp eq i32 %lftr.wideiv, %5, !dbg !179
  br i1 %exitcond, label %._crit_edge, label %6, !dbg !179

._crit_edge:                                      ; preds = %23, %0
  %retval.0.lcssa = phi i32 [ 0, %0 ], [ %retval.2, %23 ]
  ret i32 %retval.0.lcssa, !dbg !195
}
