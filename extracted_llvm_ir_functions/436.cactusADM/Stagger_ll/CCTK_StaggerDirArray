define i32 @CCTK_StaggerDirArray(i32* nocapture %dindex, i32 %dim, i32 %sindex) #1 {
  %.b = load i1* @CCTK_StaggerDirArray.hashed, align 1
  br i1 %.b, label %2, label %1

; <label>:1                                       ; preds = %0
  store i32 1, i32* getelementptr inbounds ([4 x i32]* @CCTK_StaggerDirArray.hash, i64 0, i64 0), align 16, !tbaa !7
  store i32 3, i32* getelementptr inbounds ([4 x i32]* @CCTK_StaggerDirArray.hash, i64 0, i64 1), align 4, !tbaa !7
  store i32 9, i32* getelementptr inbounds ([4 x i32]* @CCTK_StaggerDirArray.hash, i64 0, i64 2), align 8, !tbaa !7
  store i32 27, i32* getelementptr inbounds ([4 x i32]* @CCTK_StaggerDirArray.hash, i64 0, i64 3), align 4, !tbaa !7
  store i1 true, i1* @CCTK_StaggerDirArray.hashed, align 1
  br label %2

; <label>:2                                       ; preds = %0, %1
  %3 = icmp sgt i32 %dim, 4
  br i1 %3, label %5, label %.preheader

.preheader:                                       ; preds = %2
  %4 = sext i32 %dim to i64
  br label %7

; <label>:5                                       ; preds = %2
  %6 = tail call i32 (i32, i32, i8*, i8*, i8*, ...)* @CCTK_VWarn(i32 1, i32 256, i8* getelementptr inbounds ([76 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str1, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8]* @.str3, i64 0, i64 0), i32 %dim) #6
  br label %.loopexit

; <label>:7                                       ; preds = %.preheader, %15
  %indvars.iv = phi i64 [ 3, %.preheader ], [ %indvars.iv.next, %15 ]
  %.012 = phi i32 [ %sindex, %.preheader ], [ %10, %15 ]
  %8 = getelementptr inbounds [4 x i32]* @CCTK_StaggerDirArray.hash, i64 0, i64 %indvars.iv
  %9 = load i32* %8, align 4, !tbaa !7
  %10 = srem i32 %.012, %9
  %11 = icmp slt i64 %indvars.iv, %4
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %7
  %13 = sdiv i32 %.012, %9
  %14 = getelementptr inbounds i32* %dindex, i64 %indvars.iv
  store i32 %13, i32* %14, align 4, !tbaa !7
  br label %15

; <label>:15                                      ; preds = %7, %12
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %16 = icmp sgt i64 %indvars.iv, 0
  br i1 %16, label %7, label %.loopexit

.loopexit:                                        ; preds = %15, %5
  %.0 = phi i32 [ -1, %5 ], [ 0, %15 ]
  ret i32 %.0
}
