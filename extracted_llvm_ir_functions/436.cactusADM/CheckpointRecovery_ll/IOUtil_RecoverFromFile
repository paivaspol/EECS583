define internal fastcc i32 @IOUtil_RecoverFromFile(%struct.cGH* %GH, i8* %basefilename, i32 %called_from) #1 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.cGH* %GH}, i64 0, metadata !525), !dbg !614
  tail call void @llvm.dbg.value(metadata !{i8* %basefilename}, i64 0, metadata !526), !dbg !615
  tail call void @llvm.dbg.value(metadata !{i32 %called_from}, i64 0, metadata !527), !dbg !616
  tail call void @llvm.dbg.value(metadata !617, i64 0, metadata !529), !dbg !618
  tail call void @llvm.dbg.value(metadata !26, i64 0, metadata !528), !dbg !619
  %0 = load i32* @num_functions, align 4, !dbg !619, !tbaa !562
  %cmp16 = icmp sgt i32 %0, 0, !dbg !619
  br i1 %cmp16, label %for.body, label %if.then7, !dbg !619

for.body:                                         ; preds = %entry, %for.inc
  %handle.018 = phi i32 [ %inc, %for.inc ], [ 0, %entry ]
  %retval1.017 = phi i32 [ %retval1.1, %for.inc ], [ -1, %entry ]
  %1 = load %struct.cHandledData** @RecoverFunctions, align 8, !dbg !621, !tbaa !555
  %call = tail call i8* @Util_GetHandledData(%struct.cHandledData* %1, i32 %handle.018) #9, !dbg !621
  tail call void @llvm.dbg.value(metadata !{i32 (%struct.cGH*, i8*, i32)* %2}, i64 0, metadata !530), !dbg !621
  %tobool = icmp eq i8* %call, null, !dbg !623
  br i1 %tobool, label %for.inc, label %if.then, !dbg !623

if.then:                                          ; preds = %for.body
  %2 = bitcast i8* %call to i32 (%struct.cGH*, i8*, i32)*, !dbg !621
  %call2 = tail call i32 %2(%struct.cGH* %GH, i8* %basefilename, i32 %called_from) #9, !dbg !624
  tail call void @llvm.dbg.value(metadata !{i32 %call2}, i64 0, metadata !529), !dbg !624
  %cmp3 = icmp sgt i32 %call2, -1, !dbg !626
  br i1 %cmp3, label %for.endthread-pre-split, label %for.inc, !dbg !626

for.inc:                                          ; preds = %for.body, %if.then
  %retval1.1 = phi i32 [ %call2, %if.then ], [ %retval1.017, %for.body ]
  %inc = add nsw i32 %handle.018, 1, !dbg !619
  tail call void @llvm.dbg.value(metadata !{i32 %inc}, i64 0, metadata !528), !dbg !619
  %3 = load i32* @num_functions, align 4, !dbg !619, !tbaa !562
  %cmp = icmp slt i32 %inc, %3, !dbg !619
  br i1 %cmp, label %for.body, label %for.end, !dbg !619

for.endthread-pre-split:                          ; preds = %if.then
  %.pr = load i32* @num_functions, align 4, !dbg !627, !tbaa !562
  br label %for.end

for.end:                                          ; preds = %for.inc, %for.endthread-pre-split
  %4 = phi i32 [ %.pr, %for.endthread-pre-split ], [ %3, %for.inc ], !dbg !627
  %retval1.2 = phi i32 [ %call2, %for.endthread-pre-split ], [ %retval1.1, %for.inc ]
  %cmp6 = icmp slt i32 %4, 1, !dbg !627
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !627

if.then7:                                         ; preds = %entry, %for.end
  %retval1.223 = phi i32 [ %retval1.2, %for.end ], [ -1, %entry ]
  %call8 = tail call i32 @CCTK_Warn(i32 1, i32 305, i8* getelementptr inbounds ([75 x i8]* @.str1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([61 x i8]* @.str30, i64 0, i64 0)) #9, !dbg !628
  br label %if.end9, !dbg !630

if.end9:                                          ; preds = %if.then7, %for.end
  %retval1.222 = phi i32 [ %retval1.223, %if.then7 ], [ %retval1.2, %for.end ]
  ret i32 %retval1.222, !dbg !631
}
