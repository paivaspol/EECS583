define i32 @SKTreeTraversePreorder(%struct.T_SKTREE* readonly %root, i32 (i8*, i8*, i8*)* %process, i8* %info) #1 {
  %1 = icmp eq %struct.T_SKTREE* %root, null
  br i1 %1, label %.thread, label %.lr.ph

.lr.ph:                                           ; preds = %0, %tailrecurse
  %root.tr1 = phi %struct.T_SKTREE* [ %14, %tailrecurse ], [ %root, %0 ]
  %2 = getelementptr inbounds %struct.T_SKTREE* %root.tr1, i64 0, i32 4
  %3 = load i8** %2, align 8, !tbaa !7
  %4 = getelementptr inbounds %struct.T_SKTREE* %root.tr1, i64 0, i32 5
  %5 = load i8** %4, align 8, !tbaa !2
  %6 = tail call i32 %process(i8* %3, i8* %5, i8* %info) #8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %.thread

; <label>:8                                       ; preds = %.lr.ph
  %9 = getelementptr inbounds %struct.T_SKTREE* %root.tr1, i64 0, i32 0
  %10 = load %struct.T_SKTREE** %9, align 8, !tbaa !8
  %11 = tail call i32 @SKTreeTraversePreorder(%struct.T_SKTREE* %10, i32 (i8*, i8*, i8*)* %process, i8* %info) #9
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %tailrecurse, label %.thread

tailrecurse:                                      ; preds = %8
  %13 = getelementptr inbounds %struct.T_SKTREE* %root.tr1, i64 0, i32 1
  %14 = load %struct.T_SKTREE** %13, align 8, !tbaa !11
  %15 = icmp eq %struct.T_SKTREE* %14, null
  br i1 %15, label %.thread, label %.lr.ph

.thread:                                          ; preds = %tailrecurse, %8, %.lr.ph, %0
  %terminate.1 = phi i32 [ 0, %0 ], [ 0, %tailrecurse ], [ %11, %8 ], [ %6, %.lr.ph ]
  ret i32 %terminate.1
}
