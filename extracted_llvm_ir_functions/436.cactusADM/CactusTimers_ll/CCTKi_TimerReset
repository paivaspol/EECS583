define internal fastcc void @CCTKi_TimerReset(i32 %this_timer, %struct.t_Timer* readonly %timer) #1 {
  %1 = icmp eq %struct.t_Timer* %timer, null
  br i1 %1, label %.loopexit, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.t_Timer* %timer, i64 0, i32 0
  %4 = load i8*** %3, align 8, !tbaa !12
  %5 = icmp ne i8** %4, null
  %6 = load i32* @n_clocks, align 4
  %7 = icmp sgt i32 %6, 0
  %or.cond = and i1 %5, %7
  br i1 %or.cond, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %2, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %2 ]
  %8 = load %struct.cHandledData** @clocks, align 8, !tbaa !9
  %9 = trunc i64 %indvars.iv to i32
  %10 = tail call i8* @Util_GetHandledData(%struct.cHandledData* %8, i32 %9) #7
  %11 = getelementptr inbounds i8* %10, i64 48
  %12 = bitcast i8* %11 to void (i32, i8*)**
  %13 = load void (i32, i8*)** %12, align 8, !tbaa !18
  %14 = load i8*** %3, align 8, !tbaa !12
  %15 = getelementptr inbounds i8** %14, i64 %indvars.iv
  %16 = load i8** %15, align 8, !tbaa !9
  tail call void %13(i32 %this_timer, i8* %16) #7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %17 = load i32* @n_clocks, align 4, !tbaa !11
  %18 = sext i32 %17 to i64
  %19 = icmp slt i64 %indvars.iv.next, %18
  br i1 %19, label %.lr.ph, label %.loopexit

.loopexit:                                        ; preds = %.lr.ph, %2, %0
  ret void
}
