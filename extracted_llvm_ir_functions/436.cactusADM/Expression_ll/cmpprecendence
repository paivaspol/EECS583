define internal fastcc i32 @cmpprecendence(i8* nocapture %op1, i8* nocapture %op2) #7 {
for.body.lr.ph:
  tail call void @llvm.dbg.value(metadata !{i8* %op1}, i64 0, metadata !202), !dbg !567
  tail call void @llvm.dbg.value(metadata !{i8* %op2}, i64 0, metadata !203), !dbg !567
  tail call void @llvm.dbg.value(metadata !381, i64 0, metadata !206), !dbg !568
  tail call void @llvm.dbg.value(metadata !381, i64 0, metadata !207), !dbg !569
  tail call void @llvm.dbg.value(metadata !55, i64 0, metadata !205), !dbg !570
  br label %for.body, !dbg !570

for.cond:                                         ; preds = %if.end17
  %operator = getelementptr inbounds [29 x %struct.anon]* bitcast (<{ { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] } }>* @operators to [29 x %struct.anon]*), i64 0, i64 %indvars.iv.next, i32 0, !dbg !570
  %0 = load i8** %operator, align 8, !dbg !570, !tbaa !272
  %tobool = icmp eq i8* %0, null, !dbg !570
  br i1 %tobool, label %for.end, label %for.body, !dbg !570

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %1 = phi i8* [ getelementptr inbounds ([2 x i8]* @.str3, i64 0, i64 0), %for.body.lr.ph ], [ %0, %for.cond ]
  %operator33 = phi i8** [ getelementptr inbounds (<{ { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] } }>* @operators, i64 0, i32 0, i32 0), %for.body.lr.ph ], [ %operator, %for.cond ]
  %op2prec.031 = phi i32 [ -1, %for.body.lr.ph ], [ %op2prec.1, %for.cond ]
  %op1prec.030 = phi i32 [ -1, %for.body.lr.ph ], [ %op1prec.1, %for.cond ]
  %call = tail call i32 @strcmp(i8* %1, i8* %op1) #13, !dbg !572
  %tobool5 = icmp eq i32 %call, 0, !dbg !572
  br i1 %tobool5, label %if.then, label %if.end, !dbg !572

if.then:                                          ; preds = %for.body
  %precedence = getelementptr inbounds [29 x %struct.anon]* bitcast (<{ { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] } }>* @operators to [29 x %struct.anon]*), i64 0, i64 %indvars.iv, i32 2, !dbg !574
  %2 = load i32* %precedence, align 4, !dbg !574, !tbaa !268
  tail call void @llvm.dbg.value(metadata !{i32 %2}, i64 0, metadata !206), !dbg !574
  br label %if.end, !dbg !576

if.end:                                           ; preds = %for.body, %if.then
  %op1prec.1 = phi i32 [ %2, %if.then ], [ %op1prec.030, %for.body ]
  %3 = load i8** %operator33, align 8, !dbg !577, !tbaa !272
  %call11 = tail call i32 @strcmp(i8* %3, i8* %op2) #13, !dbg !577
  %tobool12 = icmp eq i32 %call11, 0, !dbg !577
  br i1 %tobool12, label %if.then13, label %if.end17, !dbg !577

if.then13:                                        ; preds = %if.end
  %precedence16 = getelementptr inbounds [29 x %struct.anon]* bitcast (<{ { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] } }>* @operators to [29 x %struct.anon]*), i64 0, i64 %indvars.iv, i32 2, !dbg !578
  %4 = load i32* %precedence16, align 4, !dbg !578, !tbaa !268
  tail call void @llvm.dbg.value(metadata !{i32 %4}, i64 0, metadata !207), !dbg !578
  br label %if.end17, !dbg !580

if.end17:                                         ; preds = %if.end, %if.then13
  %op2prec.1 = phi i32 [ %op2prec.031, %if.end ], [ %4, %if.then13 ]
  %cmp = icmp eq i32 %op1prec.1, -1, !dbg !581
  %cmp18 = icmp eq i32 %op2prec.1, -1, !dbg !581
  %or.cond = or i1 %cmp, %cmp18, !dbg !581
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !570
  br i1 %or.cond, label %for.cond, label %for.end, !dbg !581

for.end:                                          ; preds = %for.cond, %if.end17
  %sub = sub nsw i32 %op2prec.1, %op1prec.1, !dbg !582
  tail call void @llvm.dbg.value(metadata !{i32 %sub}, i64 0, metadata !204), !dbg !582
  ret i32 %sub, !dbg !583
}
