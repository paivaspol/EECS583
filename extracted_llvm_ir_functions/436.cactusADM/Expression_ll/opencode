define internal fastcc void @opencode(i8* nocapture %operator, i32* nocapture %type, i32* nocapture %opcode) #1 {
for.body.lr.ph:
  tail call void @llvm.dbg.value(metadata !381, i64 0, metadata !196), !dbg !584
  tail call void @llvm.dbg.value(metadata !55, i64 0, metadata !197), !dbg !585
  br label %for.body, !dbg !585

for.cond:                                         ; preds = %for.body
  %operator1 = getelementptr inbounds [29 x %struct.anon]* bitcast (<{ { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] } }>* @operators to [29 x %struct.anon]*), i64 0, i64 %indvars.iv.next, i32 0, !dbg !585
  %0 = load i8** %operator1, align 8, !dbg !585, !tbaa !272
  %tobool = icmp eq i8* %0, null, !dbg !585
  br i1 %tobool, label %for.end, label %for.body, !dbg !585

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %1 = phi i8* [ getelementptr inbounds ([2 x i8]* @.str3, i64 0, i64 0), %for.body.lr.ph ], [ %0, %for.cond ]
  %call = tail call i32 @strcmp(i8* %1, i8* %operator) #13, !dbg !587
  %tobool5 = icmp eq i32 %call, 0, !dbg !587
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !585
  br i1 %tobool5, label %if.then, label %for.cond, !dbg !587

if.then:                                          ; preds = %for.body
  tail call void @llvm.dbg.value(metadata !55, i64 0, metadata !196), !dbg !589
  %type8 = getelementptr inbounds [29 x %struct.anon]* bitcast (<{ { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] } }>* @operators to [29 x %struct.anon]*), i64 0, i64 %indvars.iv, i32 1, !dbg !591
  %2 = load i32* %type8, align 8, !dbg !591, !tbaa !269
  store i32 %2, i32* %type, align 4, !dbg !591, !tbaa !269
  %opcode11 = getelementptr inbounds [29 x %struct.anon]* bitcast (<{ { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] }, { i8*, i32, i32, i32, [4 x i8] } }>* @operators to [29 x %struct.anon]*), i64 0, i64 %indvars.iv, i32 3, !dbg !592
  %3 = load i32* %opcode11, align 8, !dbg !592, !tbaa !269
  store i32 %3, i32* %opcode, align 4, !dbg !592, !tbaa !269
  br label %for.end, !dbg !593

for.end:                                          ; preds = %for.cond, %if.then
  ret void
}
