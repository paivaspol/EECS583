define internal fastcc i32 @re_match_2_internal(%struct.re_pattern_buffer* nocapture %bufp, i8* %string1, i32 %size1, i8* %string2, i32 %size2, i32 %pos, %struct.re_registers* %regs, i32 %stop) #0 {
  %p1 = alloca i8*, align 8
  %1 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 0
  %2 = load i8** %1, align 8, !tbaa !10
  %3 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 2
  %4 = load i64* %3, align 8, !tbaa !11
  %5 = getelementptr inbounds i8* %2, i64 %4
  %6 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 5
  %7 = load i8** %6, align 8, !tbaa !16
  %8 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 6
  %9 = load i64* %8, align 8, !tbaa !17
  %10 = add i64 %9, 1
  %11 = tail call i8* @malloc(i64 40) #7
  %12 = bitcast i8* %11 to %union.fail_stack_elt*
  %13 = icmp eq i8* %11, null
  br i1 %13, label %.loopexit220, label %14

; <label>:14                                      ; preds = %0
  %15 = icmp eq i64 %9, 0
  br i1 %15, label %63, label %16

; <label>:16                                      ; preds = %14
  %17 = shl i64 %10, 3
  %18 = tail call i8* @malloc(i64 %17) #7
  %19 = bitcast i8* %18 to i8**
  %20 = tail call i8* @malloc(i64 %17) #7
  %21 = bitcast i8* %20 to i8**
  %22 = tail call i8* @malloc(i64 %17) #7
  %23 = bitcast i8* %22 to i8**
  %24 = tail call i8* @malloc(i64 %17) #7
  %25 = bitcast i8* %24 to i8**
  %26 = tail call i8* @malloc(i64 %17) #7
  %27 = bitcast i8* %26 to i8**
  %28 = tail call i8* @malloc(i64 %17) #7
  %29 = bitcast i8* %28 to i8**
  %30 = tail call i8* @malloc(i64 %17) #7
  %31 = bitcast i8* %30 to %union.register_info_type*
  %32 = tail call i8* @malloc(i64 %17) #7
  %33 = bitcast i8* %32 to i8**
  %34 = tail call i8* @malloc(i64 %17) #7
  %35 = bitcast i8* %34 to %union.register_info_type*
  %36 = icmp ne i8* %18, null
  %37 = icmp ne i8* %20, null
  %or.cond = and i1 %36, %37
  %38 = icmp ne i8* %22, null
  %or.cond27 = and i1 %or.cond, %38
  %39 = icmp ne i8* %24, null
  %or.cond29 = and i1 %or.cond27, %39
  %40 = icmp ne i8* %30, null
  %or.cond31 = and i1 %or.cond29, %40
  %41 = icmp ne i8* %26, null
  %or.cond33 = and i1 %41, %or.cond31
  %42 = icmp ne i8* %28, null
  %or.cond35 = and i1 %42, %or.cond33
  %43 = icmp ne i8* %32, null
  %or.cond37 = and i1 %43, %or.cond35
  %44 = icmp ne i8* %34, null
  %or.cond39 = and i1 %44, %or.cond37
  br i1 %or.cond39, label %63, label %45

; <label>:45                                      ; preds = %16
  tail call void @free(i8* %11) #8
  br i1 %36, label %46, label %47

; <label>:46                                      ; preds = %45
  tail call void @free(i8* %18) #8
  br label %47

; <label>:47                                      ; preds = %46, %45
  br i1 %37, label %48, label %49

; <label>:48                                      ; preds = %47
  tail call void @free(i8* %20) #8
  br label %49

; <label>:49                                      ; preds = %48, %47
  br i1 %38, label %50, label %51

; <label>:50                                      ; preds = %49
  tail call void @free(i8* %22) #8
  br label %51

; <label>:51                                      ; preds = %50, %49
  br i1 %39, label %52, label %53

; <label>:52                                      ; preds = %51
  tail call void @free(i8* %24) #8
  br label %53

; <label>:53                                      ; preds = %52, %51
  br i1 %41, label %54, label %55

; <label>:54                                      ; preds = %53
  tail call void @free(i8* %26) #8
  br label %55

; <label>:55                                      ; preds = %54, %53
  br i1 %42, label %56, label %57

; <label>:56                                      ; preds = %55
  tail call void @free(i8* %28) #8
  br label %57

; <label>:57                                      ; preds = %56, %55
  br i1 %40, label %58, label %59

; <label>:58                                      ; preds = %57
  tail call void @free(i8* %30) #8
  br label %59

; <label>:59                                      ; preds = %58, %57
  br i1 %43, label %60, label %61

; <label>:60                                      ; preds = %59
  tail call void @free(i8* %32) #8
  br label %61

; <label>:61                                      ; preds = %60, %59
  br i1 %44, label %62, label %.loopexit220

; <label>:62                                      ; preds = %61
  tail call void @free(i8* %34) #8
  br label %.loopexit220

; <label>:63                                      ; preds = %14, %16
  %regstart.0 = phi i8** [ %19, %16 ], [ null, %14 ]
  %regend.0 = phi i8** [ %21, %16 ], [ null, %14 ]
  %old_regstart.0 = phi i8** [ %23, %16 ], [ null, %14 ]
  %old_regend.0 = phi i8** [ %25, %16 ], [ null, %14 ]
  %reg_info.0 = phi %union.register_info_type* [ %31, %16 ], [ null, %14 ]
  %best_regstart.0 = phi i8** [ %27, %16 ], [ null, %14 ]
  %best_regend.0 = phi i8** [ %29, %16 ], [ null, %14 ]
  %reg_dummy.0 = phi i8** [ %33, %16 ], [ null, %14 ]
  %reg_info_dummy.0 = phi %union.register_info_type* [ %35, %16 ], [ null, %14 ]
  %64 = icmp slt i32 %pos, 0
  %65 = add nsw i32 %size2, %size1
  %66 = icmp slt i32 %65, %pos
  %or.cond108 = or i1 %64, %66
  br i1 %or.cond108, label %68, label %.preheader258

.preheader258:                                    ; preds = %63
  %67 = icmp ugt i64 %10, 1
  br i1 %67, label %.lr.ph454, label %._crit_edge455

; <label>:68                                      ; preds = %63
  tail call void @free(i8* %11) #8
  %69 = icmp eq i8** %regstart.0, null
  br i1 %69, label %72, label %70

; <label>:70                                      ; preds = %68
  %71 = bitcast i8** %regstart.0 to i8*
  tail call void @free(i8* %71) #8
  br label %72

; <label>:72                                      ; preds = %68, %70
  %73 = icmp eq i8** %regend.0, null
  br i1 %73, label %76, label %74

; <label>:74                                      ; preds = %72
  %75 = bitcast i8** %regend.0 to i8*
  tail call void @free(i8* %75) #8
  br label %76

; <label>:76                                      ; preds = %72, %74
  %77 = icmp eq i8** %old_regstart.0, null
  br i1 %77, label %80, label %78

; <label>:78                                      ; preds = %76
  %79 = bitcast i8** %old_regstart.0 to i8*
  tail call void @free(i8* %79) #8
  br label %80

; <label>:80                                      ; preds = %76, %78
  %81 = icmp eq i8** %old_regend.0, null
  br i1 %81, label %84, label %82

; <label>:82                                      ; preds = %80
  %83 = bitcast i8** %old_regend.0 to i8*
  tail call void @free(i8* %83) #8
  br label %84

; <label>:84                                      ; preds = %80, %82
  %85 = icmp eq i8** %best_regstart.0, null
  br i1 %85, label %88, label %86

; <label>:86                                      ; preds = %84
  %87 = bitcast i8** %best_regstart.0 to i8*
  tail call void @free(i8* %87) #8
  br label %88

; <label>:88                                      ; preds = %84, %86
  %89 = icmp eq i8** %best_regend.0, null
  br i1 %89, label %92, label %90

; <label>:90                                      ; preds = %88
  %91 = bitcast i8** %best_regend.0 to i8*
  tail call void @free(i8* %91) #8
  br label %92

; <label>:92                                      ; preds = %88, %90
  %93 = icmp eq %union.register_info_type* %reg_info.0, null
  br i1 %93, label %96, label %94

; <label>:94                                      ; preds = %92
  %95 = bitcast %union.register_info_type* %reg_info.0 to i8*
  tail call void @free(i8* %95) #8
  br label %96

; <label>:96                                      ; preds = %92, %94
  %97 = icmp eq i8** %reg_dummy.0, null
  br i1 %97, label %100, label %98

; <label>:98                                      ; preds = %96
  %99 = bitcast i8** %reg_dummy.0 to i8*
  tail call void @free(i8* %99) #8
  br label %100

; <label>:100                                     ; preds = %96, %98
  %101 = icmp eq %union.register_info_type* %reg_info_dummy.0, null
  br i1 %101, label %.loopexit220, label %102

; <label>:102                                     ; preds = %100
  %103 = bitcast %union.register_info_type* %reg_info_dummy.0 to i8*
  tail call void @free(i8* %103) #8
  br label %.loopexit220

.lr.ph454:                                        ; preds = %.preheader258, %.lr.ph454
  %indvars.iv597 = phi i64 [ %indvars.iv.next598, %.lr.ph454 ], [ 1, %.preheader258 ]
  %sext633 = shl i64 %indvars.iv597, 32
  %104 = ashr exact i64 %sext633, 32
  %105 = getelementptr inbounds i8** %old_regend.0, i64 %104
  store i8* @reg_unset_dummy, i8** %105, align 8, !tbaa !13
  %106 = getelementptr inbounds i8** %old_regstart.0, i64 %104
  store i8* @reg_unset_dummy, i8** %106, align 8, !tbaa !13
  %107 = getelementptr inbounds i8** %regend.0, i64 %104
  store i8* @reg_unset_dummy, i8** %107, align 8, !tbaa !13
  %108 = getelementptr inbounds i8** %regstart.0, i64 %104
  store i8* @reg_unset_dummy, i8** %108, align 8, !tbaa !13
  %109 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %104
  %110 = bitcast %union.register_info_type* %109 to i8*
  %111 = load i8* %110, align 4
  %112 = and i8 %111, -32
  %113 = or i8 %112, 3
  store i8 %113, i8* %110, align 4
  %indvars.iv.next598 = add nuw nsw i64 %indvars.iv597, 1
  %exitcond599 = icmp eq i64 %indvars.iv597, %9
  br i1 %exitcond599, label %._crit_edge455, label %.lr.ph454

._crit_edge455:                                   ; preds = %.lr.ph454, %.preheader258
  %114 = icmp eq i32 %size2, 0
  %115 = icmp ne i8* %string1, null
  %or.cond41 = and i1 %115, %114
  %size1.size2 = select i1 %or.cond41, i32 %size1, i32 %size2
  %string1.string2 = select i1 %or.cond41, i8* %string1, i8* %string2
  %.size1 = select i1 %or.cond41, i32 0, i32 %size1
  %.string1 = select i1 %or.cond41, i8* null, i8* %string1
  %116 = sext i32 %.size1 to i64
  %117 = getelementptr inbounds i8* %.string1, i64 %116
  %118 = sext i32 %size1.size2 to i64
  %119 = getelementptr inbounds i8* %string1.string2, i64 %118
  %120 = icmp slt i32 %.size1, %stop
  %121 = sext i32 %stop to i64
  br i1 %120, label %124, label %122

; <label>:122                                     ; preds = %._crit_edge455
  %123 = getelementptr inbounds i8* %.string1, i64 %121
  br label %126

; <label>:124                                     ; preds = %._crit_edge455
  %.sum = sub nsw i64 %121, %116
  %125 = getelementptr inbounds i8* %string1.string2, i64 %.sum
  br label %126

; <label>:126                                     ; preds = %124, %122
  %end_match_2.0 = phi i8* [ %string1.string2, %122 ], [ %125, %124 ]
  %end_match_1.0 = phi i8* [ %123, %122 ], [ %117, %124 ]
  %127 = icmp slt i32 %.size1, 1
  %128 = icmp slt i32 %.size1, %pos
  %or.cond109 = or i1 %127, %128
  %129 = sext i32 %pos to i64
  br i1 %or.cond109, label %132, label %130

; <label>:130                                     ; preds = %126
  %131 = getelementptr inbounds i8* %.string1, i64 %129
  br label %.preheader255

; <label>:132                                     ; preds = %126
  %.sum76 = sub nsw i64 %129, %116
  %133 = getelementptr inbounds i8* %string1.string2, i64 %.sum76
  br label %.preheader255

.preheader255:                                    ; preds = %132, %130
  %dend.0.ph = phi i8* [ %end_match_2.0, %132 ], [ %end_match_1.0, %130 ]
  %d.0.ph = phi i8* [ %133, %132 ], [ %131, %130 ]
  %notlhs184 = icmp ne i32 %.size1, 0
  %134 = icmp eq i8* %7, null
  %135 = select i1 %notlhs184, i8* %.string1, i8* %string1.string2
  %136 = icmp ne i32 %size1.size2, 0
  %137 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 7
  %notrhs168 = icmp eq i32 %size1.size2, 0
  %138 = getelementptr inbounds i8* %string1.string2, i64 -1
  %.sum86 = add nsw i64 %116, -1
  %139 = getelementptr inbounds i8* %.string1, i64 %.sum86
  %140 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 3
  br label %.backedge257

.backedge257:                                     ; preds = %.critedge121, %.thread164, %1498, %1419, %.loopexit204, %870, %883, %.loopexit213, %.loopexit217, %600, %._crit_edge418, %._crit_edge413, %.loopexit238, %._crit_edge376, %1401, %1403, %.loopexit248, %.loopexit252, %443, %878, %890, %893, %895, %1383, %1377, %1434, %1455, %1470, %1477, %.preheader200, %663, %switch.hole_check, %switch.lookup, %683, %686, %690, %826, %.lr.ph435, %.preheader255
  %fail_stack.sroa.0.0 = phi %union.fail_stack_elt* [ %12, %.preheader255 ], [ %fail_stack.sroa.0.0, %.loopexit252 ], [ %fail_stack.sroa.0.0, %.loopexit248 ], [ %fail_stack.sroa.0.0, %1498 ], [ %fail_stack.sroa.0.0, %1477 ], [ %fail_stack.sroa.0.0, %1470 ], [ %fail_stack.sroa.0.0, %1455 ], [ %fail_stack.sroa.0.0, %1434 ], [ %fail_stack.sroa.0.0, %1419 ], [ %fail_stack.sroa.0.0, %1403 ], [ %fail_stack.sroa.0.6, %.loopexit238 ], [ %fail_stack.sroa.0.0, %1401 ], [ %fail_stack.sroa.0.0, %1377 ], [ %fail_stack.sroa.0.5, %._crit_edge413 ], [ %fail_stack.sroa.0.0, %1383 ], [ %fail_stack.sroa.0.8, %._crit_edge376 ], [ %fail_stack.sroa.0.4, %._crit_edge418 ], [ %fail_stack.sroa.0.0, %895 ], [ %fail_stack.sroa.0.0, %893 ], [ %fail_stack.sroa.0.0, %883 ], [ %fail_stack.sroa.0.0, %890 ], [ %fail_stack.sroa.0.0, %878 ], [ %fail_stack.sroa.0.0, %870 ], [ %fail_stack.sroa.0.0, %600 ], [ %fail_stack.sroa.0.0, %.loopexit217 ], [ %fail_stack.sroa.0.0, %.loopexit213 ], [ %fail_stack.sroa.0.0, %.loopexit204 ], [ %fail_stack.sroa.0.0, %443 ], [ %fail_stack.sroa.0.9.ph636, %.thread164 ], [ %fail_stack.sroa.0.0, %.preheader200 ], [ %fail_stack.sroa.0.0, %663 ], [ %fail_stack.sroa.0.0, %switch.hole_check ], [ %fail_stack.sroa.0.0, %switch.lookup ], [ %fail_stack.sroa.0.0, %683 ], [ %fail_stack.sroa.0.0, %686 ], [ %fail_stack.sroa.0.0, %690 ], [ %fail_stack.sroa.0.0, %.critedge121 ], [ %fail_stack.sroa.0.0, %826 ], [ %fail_stack.sroa.0.0, %.lr.ph435 ]
  %lowest_active_reg.0 = phi i64 [ 257, %.preheader255 ], [ %lowest_active_reg.0, %.loopexit252 ], [ %lowest_active_reg.0, %.loopexit248 ], [ %lowest_active_reg.0, %1498 ], [ %lowest_active_reg.0, %1477 ], [ %lowest_active_reg.0, %1470 ], [ %lowest_active_reg.0, %1455 ], [ %lowest_active_reg.0, %1434 ], [ %lowest_active_reg.0, %1419 ], [ %lowest_active_reg.0, %1403 ], [ %lowest_active_reg.0, %.loopexit238 ], [ %lowest_active_reg.0, %1401 ], [ %lowest_active_reg.0, %1377 ], [ %lowest_active_reg.3.ph, %._crit_edge413 ], [ %lowest_active_reg.0, %1383 ], [ %lowest_active_reg.0, %._crit_edge376 ], [ %lowest_active_reg.0, %._crit_edge418 ], [ %lowest_active_reg.0, %895 ], [ %lowest_active_reg.0, %893 ], [ %lowest_active_reg.0, %883 ], [ %lowest_active_reg.0, %890 ], [ %lowest_active_reg.0, %878 ], [ %lowest_active_reg.0, %870 ], [ %.lowest_active_reg.0, %600 ], [ %lowest_active_reg.0, %.loopexit217 ], [ %lowest_active_reg.0, %.loopexit213 ], [ %lowest_active_reg.0, %.loopexit204 ], [ %lowest_active_reg.0, %443 ], [ %1571, %.thread164 ], [ %lowest_active_reg.0, %.preheader200 ], [ %lowest_active_reg.2, %663 ], [ %lowest_active_reg.2, %switch.hole_check ], [ %lowest_active_reg.2, %switch.lookup ], [ %lowest_active_reg.2, %683 ], [ %lowest_active_reg.2, %686 ], [ %lowest_active_reg.2, %690 ], [ %lowest_active_reg.2, %.critedge121 ], [ %lowest_active_reg.0, %826 ], [ %lowest_active_reg.0, %.lr.ph435 ]
  %highest_active_reg.0 = phi i64 [ 256, %.preheader255 ], [ %highest_active_reg.0, %.loopexit252 ], [ %highest_active_reg.0, %.loopexit248 ], [ %highest_active_reg.0, %1498 ], [ %highest_active_reg.0, %1477 ], [ %highest_active_reg.0, %1470 ], [ %highest_active_reg.0, %1455 ], [ %highest_active_reg.0, %1434 ], [ %highest_active_reg.0, %1419 ], [ %highest_active_reg.0, %1403 ], [ %highest_active_reg.0, %.loopexit238 ], [ %highest_active_reg.0, %1401 ], [ %highest_active_reg.0, %1377 ], [ %highest_active_reg.2.ph, %._crit_edge413 ], [ %highest_active_reg.0, %1383 ], [ %highest_active_reg.0, %._crit_edge376 ], [ %highest_active_reg.0, %._crit_edge418 ], [ %highest_active_reg.0, %895 ], [ %highest_active_reg.0, %893 ], [ %highest_active_reg.0, %883 ], [ %highest_active_reg.0, %890 ], [ %highest_active_reg.0, %878 ], [ %highest_active_reg.0, %870 ], [ %619, %600 ], [ %highest_active_reg.0, %.loopexit217 ], [ %highest_active_reg.0, %.loopexit213 ], [ %highest_active_reg.0, %.loopexit204 ], [ %highest_active_reg.0, %443 ], [ %1565, %.thread164 ], [ %highest_active_reg.0, %.preheader200 ], [ %highest_active_reg.1, %663 ], [ %highest_active_reg.1, %switch.hole_check ], [ %highest_active_reg.1, %switch.lookup ], [ %highest_active_reg.1, %683 ], [ %highest_active_reg.1, %686 ], [ %highest_active_reg.1, %690 ], [ %highest_active_reg.1, %.critedge121 ], [ %highest_active_reg.0, %826 ], [ %highest_active_reg.0, %.lr.ph435 ]
  %best_regs_set.0 = phi i32 [ 0, %.preheader255 ], [ %best_regs_set.0, %.loopexit252 ], [ %best_regs_set.0, %.loopexit248 ], [ %best_regs_set.0, %1498 ], [ %best_regs_set.0, %1477 ], [ %best_regs_set.0, %1470 ], [ %best_regs_set.0, %1455 ], [ %best_regs_set.0, %1434 ], [ %best_regs_set.0, %1419 ], [ %best_regs_set.0, %1403 ], [ %best_regs_set.0, %.loopexit238 ], [ %best_regs_set.0, %1401 ], [ %best_regs_set.0, %1377 ], [ %best_regs_set.0, %._crit_edge413 ], [ %best_regs_set.0, %1383 ], [ %best_regs_set.0, %._crit_edge376 ], [ %best_regs_set.0, %._crit_edge418 ], [ %best_regs_set.0, %895 ], [ %best_regs_set.0, %893 ], [ %best_regs_set.0, %883 ], [ %best_regs_set.0, %890 ], [ %best_regs_set.0, %878 ], [ %best_regs_set.0, %870 ], [ %best_regs_set.0, %600 ], [ %best_regs_set.0, %.loopexit217 ], [ %best_regs_set.0, %.loopexit213 ], [ %best_regs_set.0, %.loopexit204 ], [ %best_regs_set.0, %443 ], [ %best_regs_set.1.ph639, %.thread164 ], [ %best_regs_set.0, %.preheader200 ], [ %best_regs_set.0, %663 ], [ %best_regs_set.0, %switch.hole_check ], [ %best_regs_set.0, %switch.lookup ], [ %best_regs_set.0, %683 ], [ %best_regs_set.0, %686 ], [ %best_regs_set.0, %690 ], [ %best_regs_set.0, %.critedge121 ], [ %best_regs_set.0, %826 ], [ %best_regs_set.0, %.lr.ph435 ]
  %match_end.0 = phi i8* [ null, %.preheader255 ], [ %match_end.0, %.loopexit252 ], [ %match_end.0, %.loopexit248 ], [ %match_end.0, %1498 ], [ %match_end.0, %1477 ], [ %match_end.0, %1470 ], [ %match_end.0, %1455 ], [ %match_end.0, %1434 ], [ %match_end.0, %1419 ], [ %match_end.0, %1403 ], [ %match_end.0, %.loopexit238 ], [ %match_end.0, %1401 ], [ %match_end.0, %1377 ], [ %match_end.0, %._crit_edge413 ], [ %match_end.0, %1383 ], [ %match_end.0, %._crit_edge376 ], [ %match_end.0, %._crit_edge418 ], [ %match_end.0, %895 ], [ %match_end.0, %893 ], [ %match_end.0, %883 ], [ %match_end.0, %890 ], [ %match_end.0, %878 ], [ %match_end.0, %870 ], [ %match_end.0, %600 ], [ %match_end.0, %.loopexit217 ], [ %match_end.0, %.loopexit213 ], [ %match_end.0, %.loopexit204 ], [ %match_end.0, %443 ], [ %match_end.2.ph641, %.thread164 ], [ %match_end.0, %.preheader200 ], [ %match_end.0, %663 ], [ %match_end.0, %switch.hole_check ], [ %match_end.0, %switch.lookup ], [ %match_end.0, %683 ], [ %match_end.0, %686 ], [ %match_end.0, %690 ], [ %match_end.0, %.critedge121 ], [ %match_end.0, %826 ], [ %match_end.0, %.lr.ph435 ]
  %set_regs_matched_done.0 = phi i32 [ 0, %.preheader255 ], [ %set_regs_matched_done.6, %.loopexit252 ], [ %set_regs_matched_done.5, %.loopexit248 ], [ %set_regs_matched_done.0, %1498 ], [ %set_regs_matched_done.0, %1477 ], [ %set_regs_matched_done.0, %1470 ], [ %set_regs_matched_done.0, %1455 ], [ %set_regs_matched_done.0, %1434 ], [ %set_regs_matched_done.0, %1419 ], [ %set_regs_matched_done.0, %1403 ], [ %set_regs_matched_done.4, %.loopexit238 ], [ %set_regs_matched_done.0, %1401 ], [ %set_regs_matched_done.0, %1377 ], [ %set_regs_matched_done.0, %._crit_edge413 ], [ %set_regs_matched_done.0, %1383 ], [ %set_regs_matched_done.0, %._crit_edge376 ], [ %set_regs_matched_done.0, %._crit_edge418 ], [ %set_regs_matched_done.0, %895 ], [ %set_regs_matched_done.0, %893 ], [ %set_regs_matched_done.0, %883 ], [ %set_regs_matched_done.0, %890 ], [ %set_regs_matched_done.0, %878 ], [ %set_regs_matched_done.0, %870 ], [ 0, %600 ], [ %set_regs_matched_done.2, %.loopexit217 ], [ %set_regs_matched_done.1, %.loopexit213 ], [ %set_regs_matched_done.0, %.loopexit204 ], [ %set_regs_matched_done.0, %443 ], [ 0, %.thread164 ], [ 1, %.preheader200 ], [ 0, %663 ], [ 0, %switch.hole_check ], [ 0, %switch.lookup ], [ 0, %683 ], [ 0, %686 ], [ 0, %690 ], [ 0, %.critedge121 ], [ %set_regs_matched_done.3.ph, %826 ], [ 1, %.lr.ph435 ]
  %fail_stack.sroa.72.0 = phi i32 [ 5, %.preheader255 ], [ %fail_stack.sroa.72.0, %.loopexit252 ], [ %fail_stack.sroa.72.0, %.loopexit248 ], [ %fail_stack.sroa.72.0, %1498 ], [ %fail_stack.sroa.72.0, %1477 ], [ %fail_stack.sroa.72.0, %1470 ], [ %fail_stack.sroa.72.0, %1455 ], [ %fail_stack.sroa.72.0, %1434 ], [ %fail_stack.sroa.72.0, %1419 ], [ %fail_stack.sroa.72.0, %1403 ], [ %fail_stack.sroa.72.7, %.loopexit238 ], [ %fail_stack.sroa.72.0, %1401 ], [ %fail_stack.sroa.72.0, %1377 ], [ %fail_stack.sroa.72.5, %._crit_edge413 ], [ %fail_stack.sroa.72.0, %1383 ], [ %fail_stack.sroa.72.10, %._crit_edge376 ], [ %fail_stack.sroa.72.3, %._crit_edge418 ], [ %fail_stack.sroa.72.0, %895 ], [ %fail_stack.sroa.72.0, %893 ], [ %fail_stack.sroa.72.0, %883 ], [ %fail_stack.sroa.72.0, %890 ], [ %fail_stack.sroa.72.0, %878 ], [ %fail_stack.sroa.72.0, %870 ], [ %fail_stack.sroa.72.0, %600 ], [ %fail_stack.sroa.72.0, %.loopexit217 ], [ %fail_stack.sroa.72.0, %.loopexit213 ], [ %fail_stack.sroa.72.0, %.loopexit204 ], [ %fail_stack.sroa.72.0, %443 ], [ %fail_stack.sroa.72.12.ph642, %.thread164 ], [ %fail_stack.sroa.72.0, %.preheader200 ], [ %fail_stack.sroa.72.0, %663 ], [ %fail_stack.sroa.72.0, %switch.hole_check ], [ %fail_stack.sroa.72.0, %switch.lookup ], [ %fail_stack.sroa.72.0, %683 ], [ %fail_stack.sroa.72.0, %686 ], [ %fail_stack.sroa.72.0, %690 ], [ %fail_stack.sroa.72.0, %.critedge121 ], [ %fail_stack.sroa.72.0, %826 ], [ %fail_stack.sroa.72.0, %.lr.ph435 ]
  %fail_stack.sroa.98.0 = phi i32 [ 0, %.preheader255 ], [ %fail_stack.sroa.98.0, %.loopexit252 ], [ %fail_stack.sroa.98.0, %.loopexit248 ], [ %fail_stack.sroa.98.0, %1498 ], [ %fail_stack.sroa.98.0, %1477 ], [ %fail_stack.sroa.98.0, %1470 ], [ %fail_stack.sroa.98.0, %1455 ], [ %fail_stack.sroa.98.0, %1434 ], [ %fail_stack.sroa.98.0, %1419 ], [ %fail_stack.sroa.98.0, %1403 ], [ %fail_stack.sroa.98.5, %.loopexit238 ], [ %fail_stack.sroa.98.0, %1401 ], [ %fail_stack.sroa.98.0, %1377 ], [ %1052, %._crit_edge413 ], [ %fail_stack.sroa.98.0, %1383 ], [ %1364, %._crit_edge376 ], [ %963, %._crit_edge418 ], [ %fail_stack.sroa.98.0, %895 ], [ %fail_stack.sroa.98.0, %893 ], [ %fail_stack.sroa.98.0, %883 ], [ %fail_stack.sroa.98.0, %890 ], [ %fail_stack.sroa.98.0, %878 ], [ %fail_stack.sroa.98.0, %870 ], [ %fail_stack.sroa.98.0, %600 ], [ %fail_stack.sroa.98.0, %.loopexit217 ], [ %fail_stack.sroa.98.0, %.loopexit213 ], [ %fail_stack.sroa.98.0, %.loopexit204 ], [ %fail_stack.sroa.98.0, %443 ], [ %fail_stack.sroa.98.9.lcssa, %.thread164 ], [ %fail_stack.sroa.98.0, %.preheader200 ], [ %fail_stack.sroa.98.0, %663 ], [ %fail_stack.sroa.98.0, %switch.hole_check ], [ %fail_stack.sroa.98.0, %switch.lookup ], [ %fail_stack.sroa.98.0, %683 ], [ %fail_stack.sroa.98.0, %686 ], [ %fail_stack.sroa.98.0, %690 ], [ %fail_stack.sroa.98.0, %.critedge121 ], [ %fail_stack.sroa.98.0, %826 ], [ %fail_stack.sroa.98.0, %.lr.ph435 ]
  %just_past_start_mem.0 = phi i8* [ null, %.preheader255 ], [ %just_past_start_mem.0, %.loopexit252 ], [ %just_past_start_mem.0, %.loopexit248 ], [ %just_past_start_mem.0, %1498 ], [ %just_past_start_mem.0, %1477 ], [ %just_past_start_mem.0, %1470 ], [ %just_past_start_mem.0, %1455 ], [ %just_past_start_mem.0, %1434 ], [ %just_past_start_mem.0, %1419 ], [ %just_past_start_mem.0, %1403 ], [ %just_past_start_mem.0, %.loopexit238 ], [ %just_past_start_mem.0, %1401 ], [ %just_past_start_mem.0, %1377 ], [ %just_past_start_mem.0, %._crit_edge413 ], [ %just_past_start_mem.0, %1383 ], [ %just_past_start_mem.0, %._crit_edge376 ], [ %just_past_start_mem.0, %._crit_edge418 ], [ %just_past_start_mem.0, %895 ], [ %just_past_start_mem.0, %893 ], [ %just_past_start_mem.0, %883 ], [ %just_past_start_mem.0, %890 ], [ %just_past_start_mem.0, %878 ], [ %just_past_start_mem.0, %870 ], [ %621, %600 ], [ %just_past_start_mem.0, %.loopexit217 ], [ %just_past_start_mem.0, %.loopexit213 ], [ %just_past_start_mem.0, %.loopexit204 ], [ %just_past_start_mem.0, %443 ], [ %just_past_start_mem.0, %.thread164 ], [ %just_past_start_mem.0, %.preheader200 ], [ %just_past_start_mem.0, %663 ], [ %just_past_start_mem.0, %switch.hole_check ], [ %just_past_start_mem.0, %switch.lookup ], [ %just_past_start_mem.0, %683 ], [ %just_past_start_mem.0, %686 ], [ %just_past_start_mem.0, %690 ], [ %just_past_start_mem.0, %.critedge121 ], [ %just_past_start_mem.0, %826 ], [ %just_past_start_mem.0, %.lr.ph435 ]
  %p.0 = phi i8* [ %2, %.preheader255 ], [ %444, %.loopexit252 ], [ %444, %.loopexit248 ], [ %444, %1498 ], [ %444, %1477 ], [ %444, %1470 ], [ %444, %1455 ], [ %444, %1434 ], [ %444, %1419 ], [ %1416, %1403 ], [ %1254, %.loopexit238 ], [ %1402, %1401 ], [ %1382, %1377 ], [ %.pre-phi616, %._crit_edge413 ], [ %444, %1383 ], [ %444, %._crit_edge376 ], [ %905, %._crit_edge418 ], [ %444, %895 ], [ %444, %893 ], [ %444, %883 ], [ %444, %890 ], [ %444, %878 ], [ %444, %870 ], [ %621, %600 ], [ %560, %.loopexit217 ], [ %444, %.loopexit213 ], [ %p.3, %.loopexit204 ], [ %444, %443 ], [ %1559, %.thread164 ], [ %p.3, %.preheader200 ], [ %661, %663 ], [ %661, %switch.hole_check ], [ %661, %switch.lookup ], [ %661, %683 ], [ %661, %686 ], [ %661, %690 ], [ %661, %.critedge121 ], [ %800, %826 ], [ %p.3, %.lr.ph435 ]
  %dend.0 = phi i8* [ %dend.0.ph, %.preheader255 ], [ %dend.10, %.loopexit252 ], [ %dend.9, %.loopexit248 ], [ %dend.0, %1498 ], [ %dend.0, %1477 ], [ %dend.0, %1470 ], [ %dend.0, %1455 ], [ %dend.0, %1434 ], [ %dend.0, %1419 ], [ %dend.0, %1403 ], [ %dend.0, %.loopexit238 ], [ %dend.0, %1401 ], [ %dend.0, %1377 ], [ %dend.0, %._crit_edge413 ], [ %dend.0, %1383 ], [ %dend.0, %._crit_edge376 ], [ %dend.0, %._crit_edge418 ], [ %dend.0, %895 ], [ %dend.0, %893 ], [ %dend.0, %883 ], [ %dend.0, %890 ], [ %dend.0, %878 ], [ %dend.0, %870 ], [ %dend.0, %600 ], [ %dend.6, %.loopexit217 ], [ %dend.5, %.loopexit213 ], [ %dend.4, %.loopexit204 ], [ %dend.0, %443 ], [ %dend.11.end_match_1.0, %.thread164 ], [ %dend.4, %.preheader200 ], [ %dend.0, %663 ], [ %dend.0, %switch.hole_check ], [ %dend.0, %switch.lookup ], [ %dend.0, %683 ], [ %dend.0, %686 ], [ %dend.0, %690 ], [ %dend.0, %.critedge121 ], [ %dend.7, %826 ], [ %dend.4, %.lr.ph435 ]
  %d.0 = phi i8* [ %d.0.ph, %.preheader255 ], [ %1547, %.loopexit252 ], [ %1525, %.loopexit248 ], [ %d.0, %1498 ], [ %d.0, %1477 ], [ %d.0, %1470 ], [ %d.0, %1455 ], [ %d.0, %1434 ], [ %d.0, %1419 ], [ %d.0, %1403 ], [ %d.0, %.loopexit238 ], [ %d.0, %1401 ], [ %d.0, %1377 ], [ %d.0, %._crit_edge413 ], [ %d.0, %1383 ], [ %d.0, %._crit_edge376 ], [ %d.0, %._crit_edge418 ], [ %119, %895 ], [ %d.0, %893 ], [ %119, %883 ], [ %d.0, %890 ], [ %d.0, %878 ], [ %d.0, %870 ], [ %d.0, %600 ], [ %571, %.loopexit217 ], [ %529, %.loopexit213 ], [ %d.4, %.loopexit204 ], [ %d.0, %443 ], [ %d.11., %.thread164 ], [ %d.4, %.preheader200 ], [ %d.0, %663 ], [ %d.0, %switch.hole_check ], [ %d.0, %switch.lookup ], [ %d.0, %683 ], [ %d.0, %686 ], [ %d.0, %690 ], [ %d.0, %.critedge121 ], [ %d.7, %826 ], [ %d.4, %.lr.ph435 ]
  %141 = icmp eq i8* %p.0, %5
  br i1 %141, label %142, label %443

; <label>:142                                     ; preds = %.backedge257
  %143 = icmp eq i8* %d.0, %end_match_2.0
  br i1 %143, label %.loopexit194, label %144

; <label>:144                                     ; preds = %142
  %145 = icmp ule i8* %match_end.0, %117
  %notrhs185 = icmp ule i8* %.string1, %match_end.0
  %not.or.cond110 = and i1 %notlhs184, %notrhs185
  %.152 = and i1 %145, %not.or.cond110
  %146 = icmp eq i8* %dend.0, %end_match_1.0
  %tmp106 = xor i1 %.152, %146
  br i1 %tmp106, label %150, label %147

; <label>:147                                     ; preds = %144
  %148 = icmp ugt i8* %d.0, %match_end.0
  %149 = zext i1 %148 to i8
  br label %153

; <label>:150                                     ; preds = %144
  %151 = zext i1 %146 to i8
  %152 = xor i8 %151, 1
  br label %153

; <label>:153                                     ; preds = %150, %147
  %best_match_p.0 = phi i8 [ %149, %147 ], [ %152, %150 ]
  %154 = icmp eq i32 %fail_stack.sroa.98.0, 0
  %155 = icmp ne i32 %best_regs_set.0, 0
  br i1 %154, label %169, label %156

; <label>:156                                     ; preds = %153
  %157 = icmp eq i8 %best_match_p.0, 0
  %or.cond111 = and i1 %155, %157
  br i1 %or.cond111, label %.lr.ph446, label %.preheader199

.preheader199:                                    ; preds = %156
  br i1 %67, label %.lr.ph437, label %.lr.ph446

.lr.ph437:                                        ; preds = %.preheader199, %.lr.ph437
  %indvars.iv592 = phi i64 [ %indvars.iv.next593, %.lr.ph437 ], [ 1, %.preheader199 ]
  %sext632 = shl i64 %indvars.iv592, 32
  %158 = ashr exact i64 %sext632, 32
  %159 = getelementptr inbounds i8** %regstart.0, i64 %158
  %160 = bitcast i8** %159 to i64*
  %161 = load i64* %160, align 8, !tbaa !13
  %162 = getelementptr inbounds i8** %best_regstart.0, i64 %158
  %163 = bitcast i8** %162 to i64*
  store i64 %161, i64* %163, align 8, !tbaa !13
  %164 = getelementptr inbounds i8** %regend.0, i64 %158
  %165 = bitcast i8** %164 to i64*
  %166 = load i64* %165, align 8, !tbaa !13
  %167 = getelementptr inbounds i8** %best_regend.0, i64 %158
  %168 = bitcast i8** %167 to i64*
  store i64 %166, i64* %168, align 8, !tbaa !13
  %indvars.iv.next593 = add nuw nsw i64 %indvars.iv592, 1
  %exitcond594 = icmp eq i64 %indvars.iv592, %9
  br i1 %exitcond594, label %bcmp_translate.exit.thread158.preheader, label %.lr.ph437

; <label>:169                                     ; preds = %153
  %.not = xor i1 %155, true
  %170 = icmp ne i8 %best_match_p.0, 0
  %or.cond43 = or i1 %170, %.not
  br i1 %or.cond43, label %.loopexit194, label %171

; <label>:171                                     ; preds = %bcmp_translate.exit.thread158.preheader._crit_edge, %169
  %fail_stack.sroa.0.1 = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.0, %169 ], [ %fail_stack.sroa.0.9.ph637, %bcmp_translate.exit.thread158.preheader._crit_edge ]
  %match_end.1 = phi i8* [ %match_end.0, %169 ], [ %match_end.2.ph640, %bcmp_translate.exit.thread158.preheader._crit_edge ]
  %172 = icmp ult i8* %match_end.1, %.string1
  %173 = icmp ugt i8* %match_end.1, %117
  %or.cond112 = or i1 %172, %173
  %174 = select i1 %or.cond112, i8* %end_match_2.0, i8* %end_match_1.0
  br i1 %67, label %.lr.ph368, label %.loopexit194

.lr.ph368:                                        ; preds = %171, %.lr.ph368
  %indvars.iv584 = phi i64 [ %indvars.iv.next585, %.lr.ph368 ], [ 1, %171 ]
  %sext619 = shl i64 %indvars.iv584, 32
  %175 = ashr exact i64 %sext619, 32
  %176 = getelementptr inbounds i8** %best_regstart.0, i64 %175
  %177 = bitcast i8** %176 to i64*
  %178 = load i64* %177, align 8, !tbaa !13
  %179 = getelementptr inbounds i8** %regstart.0, i64 %175
  %180 = bitcast i8** %179 to i64*
  store i64 %178, i64* %180, align 8, !tbaa !13
  %181 = getelementptr inbounds i8** %best_regend.0, i64 %175
  %182 = bitcast i8** %181 to i64*
  %183 = load i64* %182, align 8, !tbaa !13
  %184 = getelementptr inbounds i8** %regend.0, i64 %175
  %185 = bitcast i8** %184 to i64*
  store i64 %183, i64* %185, align 8, !tbaa !13
  %indvars.iv.next585 = add nuw nsw i64 %indvars.iv584, 1
  %exitcond = icmp eq i64 %indvars.iv584, %9
  br i1 %exitcond, label %.loopexit194, label %.lr.ph368

.loopexit194:                                     ; preds = %142, %443, %.lr.ph368, %171, %169
  %fail_stack.sroa.0.2 = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.0, %169 ], [ %fail_stack.sroa.0.1, %171 ], [ %fail_stack.sroa.0.1, %.lr.ph368 ], [ %fail_stack.sroa.0.0, %443 ], [ %fail_stack.sroa.0.0, %142 ]
  %dend.1 = phi i8* [ %dend.0, %169 ], [ %174, %171 ], [ %174, %.lr.ph368 ], [ %dend.0, %443 ], [ %dend.0, %142 ]
  %d.1 = phi i8* [ %d.0, %169 ], [ %match_end.1, %171 ], [ %match_end.1, %.lr.ph368 ], [ %d.0, %443 ], [ %end_match_2.0, %142 ]
  %186 = icmp eq %struct.re_registers* %regs, null
  br i1 %186, label %.loopexit, label %187

; <label>:187                                     ; preds = %.loopexit194
  %188 = load i8* %137, align 8
  %189 = and i8 %188, 16
  %190 = icmp eq i8 %189, 0
  br i1 %190, label %191, label %.loopexit

; <label>:191                                     ; preds = %187
  %192 = lshr i8 %188, 1
  %193 = and i8 %192, 3
  switch i8 %193, label %._crit_edge611 [
    i8 0, label %194
    i8 1, label %252
  ]

._crit_edge611:                                   ; preds = %191
  %.pre612 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 0
  br label %313

; <label>:194                                     ; preds = %191
  %195 = add i64 %9, 2
  %196 = icmp ult i64 %195, 30
  %. = select i1 %196, i64 30, i64 %195
  %197 = trunc i64 %. to i32
  %198 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 0
  store i32 %197, i32* %198, align 4, !tbaa !18
  %199 = shl i64 %., 2
  %200 = and i64 %199, 17179869180
  %201 = tail call i8* @malloc(i64 %200) #7
  %202 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 1
  %203 = bitcast i32** %202 to i8**
  store i8* %201, i8** %203, align 8, !tbaa !20
  %204 = shl i64 %., 2
  %205 = and i64 %204, 17179869180
  %206 = tail call i8* @malloc(i64 %205) #7
  %207 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 2
  %208 = bitcast i32** %207 to i8**
  store i8* %206, i8** %208, align 8, !tbaa !21
  %209 = icmp eq i8* %201, null
  %210 = icmp eq i8* %206, null
  %or.cond113 = or i1 %210, %209
  br i1 %or.cond113, label %211, label %248

; <label>:211                                     ; preds = %194
  %212 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.2 to i8*
  tail call void @free(i8* %212) #8
  %213 = icmp eq i8** %regstart.0, null
  br i1 %213, label %216, label %214

; <label>:214                                     ; preds = %211
  %215 = bitcast i8** %regstart.0 to i8*
  tail call void @free(i8* %215) #8
  br label %216

; <label>:216                                     ; preds = %211, %214
  %217 = icmp eq i8** %regend.0, null
  br i1 %217, label %220, label %218

; <label>:218                                     ; preds = %216
  %219 = bitcast i8** %regend.0 to i8*
  tail call void @free(i8* %219) #8
  br label %220

; <label>:220                                     ; preds = %216, %218
  %221 = icmp eq i8** %old_regstart.0, null
  br i1 %221, label %224, label %222

; <label>:222                                     ; preds = %220
  %223 = bitcast i8** %old_regstart.0 to i8*
  tail call void @free(i8* %223) #8
  br label %224

; <label>:224                                     ; preds = %220, %222
  %225 = icmp eq i8** %old_regend.0, null
  br i1 %225, label %228, label %226

; <label>:226                                     ; preds = %224
  %227 = bitcast i8** %old_regend.0 to i8*
  tail call void @free(i8* %227) #8
  br label %228

; <label>:228                                     ; preds = %224, %226
  %229 = icmp eq i8** %best_regstart.0, null
  br i1 %229, label %232, label %230

; <label>:230                                     ; preds = %228
  %231 = bitcast i8** %best_regstart.0 to i8*
  tail call void @free(i8* %231) #8
  br label %232

; <label>:232                                     ; preds = %228, %230
  %233 = icmp eq i8** %best_regend.0, null
  br i1 %233, label %236, label %234

; <label>:234                                     ; preds = %232
  %235 = bitcast i8** %best_regend.0 to i8*
  tail call void @free(i8* %235) #8
  br label %236

; <label>:236                                     ; preds = %232, %234
  %237 = icmp eq %union.register_info_type* %reg_info.0, null
  br i1 %237, label %240, label %238

; <label>:238                                     ; preds = %236
  %239 = bitcast %union.register_info_type* %reg_info.0 to i8*
  tail call void @free(i8* %239) #8
  br label %240

; <label>:240                                     ; preds = %236, %238
  %241 = icmp eq i8** %reg_dummy.0, null
  br i1 %241, label %244, label %242

; <label>:242                                     ; preds = %240
  %243 = bitcast i8** %reg_dummy.0 to i8*
  tail call void @free(i8* %243) #8
  br label %244

; <label>:244                                     ; preds = %240, %242
  %245 = icmp eq %union.register_info_type* %reg_info_dummy.0, null
  br i1 %245, label %.loopexit220, label %246

; <label>:246                                     ; preds = %244
  %247 = bitcast %union.register_info_type* %reg_info_dummy.0 to i8*
  tail call void @free(i8* %247) #8
  br label %.loopexit220

; <label>:248                                     ; preds = %194
  %249 = load i8* %137, align 8
  %250 = and i8 %249, -7
  %251 = or i8 %250, 2
  store i8 %251, i8* %137, align 8
  br label %313

; <label>:252                                     ; preds = %191
  %253 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 0
  %254 = load i32* %253, align 4, !tbaa !18
  %255 = zext i32 %254 to i64
  %256 = add i64 %9, 2
  %257 = icmp ult i64 %255, %256
  br i1 %257, label %258, label %313

; <label>:258                                     ; preds = %252
  %259 = trunc i64 %256 to i32
  store i32 %259, i32* %253, align 4, !tbaa !18
  %260 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 1
  %261 = bitcast i32** %260 to i8**
  %262 = load i8** %261, align 8, !tbaa !20
  %263 = shl i64 %256, 2
  %264 = and i64 %263, 17179869180
  %265 = tail call i8* @realloc(i8* %262, i64 %264) #7
  store i8* %265, i8** %261, align 8, !tbaa !20
  %266 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 2
  %267 = bitcast i32** %266 to i8**
  %268 = load i8** %267, align 8, !tbaa !21
  %269 = load i32* %253, align 4, !tbaa !18
  %270 = zext i32 %269 to i64
  %271 = shl nuw nsw i64 %270, 2
  %272 = tail call i8* @realloc(i8* %268, i64 %271) #7
  store i8* %272, i8** %267, align 8, !tbaa !21
  %273 = load i32** %260, align 8, !tbaa !20
  %274 = icmp eq i32* %273, null
  %275 = icmp eq i8* %272, null
  %or.cond114 = or i1 %275, %274
  br i1 %or.cond114, label %276, label %313

; <label>:276                                     ; preds = %258
  %277 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.2 to i8*
  tail call void @free(i8* %277) #8
  %278 = icmp eq i8** %regstart.0, null
  br i1 %278, label %281, label %279

; <label>:279                                     ; preds = %276
  %280 = bitcast i8** %regstart.0 to i8*
  tail call void @free(i8* %280) #8
  br label %281

; <label>:281                                     ; preds = %276, %279
  %282 = icmp eq i8** %regend.0, null
  br i1 %282, label %285, label %283

; <label>:283                                     ; preds = %281
  %284 = bitcast i8** %regend.0 to i8*
  tail call void @free(i8* %284) #8
  br label %285

; <label>:285                                     ; preds = %281, %283
  %286 = icmp eq i8** %old_regstart.0, null
  br i1 %286, label %289, label %287

; <label>:287                                     ; preds = %285
  %288 = bitcast i8** %old_regstart.0 to i8*
  tail call void @free(i8* %288) #8
  br label %289

; <label>:289                                     ; preds = %285, %287
  %290 = icmp eq i8** %old_regend.0, null
  br i1 %290, label %293, label %291

; <label>:291                                     ; preds = %289
  %292 = bitcast i8** %old_regend.0 to i8*
  tail call void @free(i8* %292) #8
  br label %293

; <label>:293                                     ; preds = %289, %291
  %294 = icmp eq i8** %best_regstart.0, null
  br i1 %294, label %297, label %295

; <label>:295                                     ; preds = %293
  %296 = bitcast i8** %best_regstart.0 to i8*
  tail call void @free(i8* %296) #8
  br label %297

; <label>:297                                     ; preds = %293, %295
  %298 = icmp eq i8** %best_regend.0, null
  br i1 %298, label %301, label %299

; <label>:299                                     ; preds = %297
  %300 = bitcast i8** %best_regend.0 to i8*
  tail call void @free(i8* %300) #8
  br label %301

; <label>:301                                     ; preds = %297, %299
  %302 = icmp eq %union.register_info_type* %reg_info.0, null
  br i1 %302, label %305, label %303

; <label>:303                                     ; preds = %301
  %304 = bitcast %union.register_info_type* %reg_info.0 to i8*
  tail call void @free(i8* %304) #8
  br label %305

; <label>:305                                     ; preds = %301, %303
  %306 = icmp eq i8** %reg_dummy.0, null
  br i1 %306, label %309, label %307

; <label>:307                                     ; preds = %305
  %308 = bitcast i8** %reg_dummy.0 to i8*
  tail call void @free(i8* %308) #8
  br label %309

; <label>:309                                     ; preds = %305, %307
  %310 = icmp eq %union.register_info_type* %reg_info_dummy.0, null
  br i1 %310, label %.loopexit220, label %311

; <label>:311                                     ; preds = %309
  %312 = bitcast %union.register_info_type* %reg_info_dummy.0 to i8*
  tail call void @free(i8* %312) #8
  br label %.loopexit220

; <label>:313                                     ; preds = %._crit_edge611, %258, %252, %248
  %.pre-phi = phi i32* [ %.pre612, %._crit_edge611 ], [ %253, %258 ], [ %253, %252 ], [ %198, %248 ]
  %314 = load i32* %.pre-phi, align 4, !tbaa !18
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %.preheader, label %316

; <label>:316                                     ; preds = %313
  %317 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 1
  %318 = load i32** %317, align 8, !tbaa !20
  store i32 %pos, i32* %318, align 4, !tbaa !15
  %319 = icmp eq i8* %dend.1, %end_match_1.0
  %320 = ptrtoint i8* %d.1 to i64
  br i1 %319, label %321, label %324

; <label>:321                                     ; preds = %316
  %322 = ptrtoint i8* %.string1 to i64
  %323 = sub i64 %320, %322
  br label %328

; <label>:324                                     ; preds = %316
  %325 = ptrtoint i8* %string1.string2 to i64
  %326 = sub i64 %116, %325
  %327 = add i64 %326, %320
  br label %328

; <label>:328                                     ; preds = %324, %321
  %.sink = phi i64 [ %323, %321 ], [ %327, %324 ]
  %329 = trunc i64 %.sink to i32
  %330 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 2
  %331 = load i32** %330, align 8, !tbaa !21
  store i32 %329, i32* %331, align 4, !tbaa !15
  %.pre609 = load i32* %.pre-phi, align 4, !tbaa !18
  br label %.preheader

.preheader:                                       ; preds = %313, %328
  %332 = phi i32 [ 0, %313 ], [ %.pre609, %328 ]
  %333 = zext i32 %332 to i64
  %334 = icmp ult i64 %10, %333
  %.115362 = select i1 %334, i64 %10, i64 %333
  %335 = icmp ugt i64 %.115362, 1
  br i1 %335, label %.lr.ph364, label %._crit_edge365

.lr.ph364:                                        ; preds = %.preheader
  %336 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 2
  %337 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 1
  %.not116 = xor i1 %notlhs184, true
  %338 = ptrtoint i8* %string1.string2 to i64
  %339 = sub i64 %116, %338
  %340 = ptrtoint i8* %.string1 to i64
  br label %341

; <label>:341                                     ; preds = %.lr.ph364, %376
  %indvars.iv582 = phi i64 [ 1, %.lr.ph364 ], [ %indvars.iv.next583, %376 ]
  %sext618 = shl i64 %indvars.iv582, 32
  %342 = ashr exact i64 %sext618, 32
  %343 = getelementptr inbounds i8** %regstart.0, i64 %342
  %344 = load i8** %343, align 8, !tbaa !13
  %345 = icmp eq i8* %344, @reg_unset_dummy
  br i1 %345, label %350, label %346

; <label>:346                                     ; preds = %341
  %347 = getelementptr inbounds i8** %regend.0, i64 %342
  %348 = load i8** %347, align 8, !tbaa !13
  %349 = icmp eq i8* %348, @reg_unset_dummy
  br i1 %349, label %350, label %355

; <label>:350                                     ; preds = %346, %341
  %351 = load i32** %336, align 8, !tbaa !21
  %352 = getelementptr inbounds i32* %351, i64 %342
  store i32 -1, i32* %352, align 4, !tbaa !15
  %353 = load i32** %337, align 8, !tbaa !20
  %354 = getelementptr inbounds i32* %353, i64 %342
  store i32 -1, i32* %354, align 4, !tbaa !15
  br label %376

; <label>:355                                     ; preds = %346
  %356 = icmp ugt i8* %.string1, %344
  %or.cond117 = or i1 %356, %.not116
  %357 = icmp ugt i8* %344, %117
  %or.cond118 = or i1 %357, %or.cond117
  %358 = ptrtoint i8* %344 to i64
  %359 = sub i64 0, %340
  %.sink44.p = select i1 %or.cond118, i64 %339, i64 %359
  %.sink44 = add i64 %358, %.sink44.p
  %360 = trunc i64 %.sink44 to i32
  %361 = load i32** %337, align 8, !tbaa !20
  %362 = getelementptr inbounds i32* %361, i64 %342
  store i32 %360, i32* %362, align 4, !tbaa !15
  br i1 %notlhs184, label %363, label %369

; <label>:363                                     ; preds = %355
  %364 = icmp ugt i8* %.string1, %348
  %365 = icmp ugt i8* %348, %117
  %or.cond119 = or i1 %364, %365
  br i1 %or.cond119, label %369, label %366

; <label>:366                                     ; preds = %363
  %367 = ptrtoint i8* %348 to i64
  %368 = sub i64 %367, %340
  br label %372

; <label>:369                                     ; preds = %363, %355
  %370 = ptrtoint i8* %348 to i64
  %371 = add i64 %339, %370
  br label %372

; <label>:372                                     ; preds = %369, %366
  %.sink45 = phi i64 [ %368, %366 ], [ %371, %369 ]
  %373 = trunc i64 %.sink45 to i32
  %374 = load i32** %336, align 8, !tbaa !21
  %375 = getelementptr inbounds i32* %374, i64 %342
  store i32 %373, i32* %375, align 4, !tbaa !15
  br label %376

; <label>:376                                     ; preds = %350, %372
  %indvars.iv.next583 = add nuw nsw i64 %indvars.iv582, 1
  %377 = load i32* %.pre-phi, align 4, !tbaa !18
  %378 = zext i32 %377 to i64
  %379 = icmp ult i64 %10, %378
  %.115 = select i1 %379, i64 %10, i64 %378
  %380 = icmp ult i64 %indvars.iv.next583, %.115
  br i1 %380, label %341, label %._crit_edge365

._crit_edge365:                                   ; preds = %376, %.preheader
  %381 = phi i32 [ %332, %.preheader ], [ %377, %376 ]
  %382 = trunc i64 %10 to i32
  %383 = icmp ult i32 %382, %381
  br i1 %383, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %._crit_edge365
  %384 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 2
  %385 = load i32** %384, align 8, !tbaa !21
  %386 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 1
  %387 = load i32** %386, align 8, !tbaa !20
  %sext617 = shl i64 %10, 32
  %388 = ashr exact i64 %sext617, 32
  br label %389

; <label>:389                                     ; preds = %.lr.ph, %389
  %indvars.iv = phi i64 [ %388, %.lr.ph ], [ %indvars.iv.next, %389 ]
  %390 = getelementptr inbounds i32* %385, i64 %indvars.iv
  store i32 -1, i32* %390, align 4, !tbaa !15
  %391 = getelementptr inbounds i32* %387, i64 %indvars.iv
  store i32 -1, i32* %391, align 4, !tbaa !15
  %indvars.iv.next = add i64 %indvars.iv, 1
  %392 = load i32* %.pre-phi, align 4, !tbaa !18
  %393 = trunc i64 %indvars.iv.next to i32
  %394 = icmp ult i32 %393, %392
  br i1 %394, label %389, label %.loopexit

.loopexit:                                        ; preds = %389, %._crit_edge365, %187, %.loopexit194
  %395 = sub nsw i64 0, %129
  %396 = getelementptr inbounds i8* %d.1, i64 %395
  %397 = icmp eq i8* %dend.1, %end_match_1.0
  br i1 %397, label %401, label %398

; <label>:398                                     ; preds = %.loopexit
  %399 = sub nsw i64 0, %116
  %400 = getelementptr inbounds i8* %string1.string2, i64 %399
  br label %401

; <label>:401                                     ; preds = %.loopexit, %398
  %402 = phi i8* [ %400, %398 ], [ %.string1, %.loopexit ]
  %403 = ptrtoint i8* %396 to i64
  %404 = ptrtoint i8* %402 to i64
  %405 = sub i64 %403, %404
  %406 = trunc i64 %405 to i32
  %407 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.2 to i8*
  tail call void @free(i8* %407) #8
  %408 = icmp eq i8** %regstart.0, null
  br i1 %408, label %411, label %409

; <label>:409                                     ; preds = %401
  %410 = bitcast i8** %regstart.0 to i8*
  tail call void @free(i8* %410) #8
  br label %411

; <label>:411                                     ; preds = %401, %409
  %412 = icmp eq i8** %regend.0, null
  br i1 %412, label %415, label %413

; <label>:413                                     ; preds = %411
  %414 = bitcast i8** %regend.0 to i8*
  tail call void @free(i8* %414) #8
  br label %415

; <label>:415                                     ; preds = %411, %413
  %416 = icmp eq i8** %old_regstart.0, null
  br i1 %416, label %419, label %417

; <label>:417                                     ; preds = %415
  %418 = bitcast i8** %old_regstart.0 to i8*
  tail call void @free(i8* %418) #8
  br label %419

; <label>:419                                     ; preds = %415, %417
  %420 = icmp eq i8** %old_regend.0, null
  br i1 %420, label %423, label %421

; <label>:421                                     ; preds = %419
  %422 = bitcast i8** %old_regend.0 to i8*
  tail call void @free(i8* %422) #8
  br label %423

; <label>:423                                     ; preds = %419, %421
  %424 = icmp eq i8** %best_regstart.0, null
  br i1 %424, label %427, label %425

; <label>:425                                     ; preds = %423
  %426 = bitcast i8** %best_regstart.0 to i8*
  tail call void @free(i8* %426) #8
  br label %427

; <label>:427                                     ; preds = %423, %425
  %428 = icmp eq i8** %best_regend.0, null
  br i1 %428, label %431, label %429

; <label>:429                                     ; preds = %427
  %430 = bitcast i8** %best_regend.0 to i8*
  tail call void @free(i8* %430) #8
  br label %431

; <label>:431                                     ; preds = %427, %429
  %432 = icmp eq %union.register_info_type* %reg_info.0, null
  br i1 %432, label %435, label %433

; <label>:433                                     ; preds = %431
  %434 = bitcast %union.register_info_type* %reg_info.0 to i8*
  tail call void @free(i8* %434) #8
  br label %435

; <label>:435                                     ; preds = %431, %433
  %436 = icmp eq i8** %reg_dummy.0, null
  br i1 %436, label %439, label %437

; <label>:437                                     ; preds = %435
  %438 = bitcast i8** %reg_dummy.0 to i8*
  tail call void @free(i8* %438) #8
  br label %439

; <label>:439                                     ; preds = %435, %437
  %440 = icmp eq %union.register_info_type* %reg_info_dummy.0, null
  br i1 %440, label %.loopexit220, label %441

; <label>:441                                     ; preds = %439
  %442 = bitcast %union.register_info_type* %reg_info_dummy.0 to i8*
  tail call void @free(i8* %442) #8
  br label %.loopexit220

; <label>:443                                     ; preds = %.backedge257
  %444 = getelementptr inbounds i8* %p.0, i64 1
  %445 = load i8* %p.0, align 1, !tbaa !12
  %446 = zext i8 %445 to i32
  switch i32 %446, label %1548 [
    i32 0, label %.backedge257
    i32 1, label %.loopexit194
    i32 2, label %453
    i32 3, label %.preheader214
    i32 4, label %530
    i32 5, label %530
    i32 6, label %572
    i32 7, label %622
    i32 8, label %799
    i32 9, label %868
    i32 10, label %881
    i32 11, label %893
    i32 12, label %895
    i32 16, label %897
    i32 15, label %._crit_edge610
    i32 18, label %1055
    i32 17, label %.thread163
    i32 13, label %.loopexit238
    i32 14, label %.loopexit238
    i32 19, label %.preheader242
    i32 20, label %.preheader245
    i32 21, label %1367
    i32 22, label %1386
    i32 23, label %1403
    i32 28, label %1419
    i32 29, label %1440
    i32 26, label %1461
    i32 27, label %1482
    i32 24, label %.preheader249
    i32 25, label %.preheader253
  ]

._crit_edge610:                                   ; preds = %443
  %.pre615 = getelementptr inbounds i8* %p.0, i64 3
  br label %966

.preheader245:                                    ; preds = %443
  %447 = sub i64 %highest_active_reg.0, %lowest_active_reg.0
  %448 = mul i64 %447, 3
  %449 = add i64 %448, 7
  br label %1311

.preheader242:                                    ; preds = %443
  %450 = sub i64 %highest_active_reg.0, %lowest_active_reg.0
  %451 = mul i64 %450, 3
  %452 = add i64 %451, 7
  br label %1255

; <label>:453                                     ; preds = %443
  %454 = getelementptr inbounds i8* %p.0, i64 2
  %455 = load i8* %444, align 1, !tbaa !12
  %456 = zext i8 %455 to i32
  br i1 %134, label %.outer, label %.outer210

; <label>:457                                     ; preds = %.outer210, %459
  %dend.2 = phi i8* [ %end_match_2.0, %459 ], [ %dend.2.ph, %.outer210 ]
  %d.2 = phi i8* [ %string1.string2, %459 ], [ %d.2.ph, %.outer210 ]
  %458 = icmp eq i8* %d.2, %dend.2
  br i1 %458, label %459, label %461

; <label>:459                                     ; preds = %457
  %460 = icmp eq i8* %dend.2, %end_match_2.0
  br i1 %460, label %bcmp_translate.exit.thread158.preheader, label %457

; <label>:461                                     ; preds = %457
  %462 = getelementptr inbounds i8* %d.2, i64 1
  %463 = load i8* %d.2, align 1, !tbaa !12
  %464 = zext i8 %463 to i64
  %465 = getelementptr inbounds i8* %7, i64 %464
  %466 = load i8* %465, align 1, !tbaa !12
  %467 = getelementptr inbounds i8* %p.1.ph, i64 1
  %468 = load i8* %p.1.ph, align 1, !tbaa !12
  %469 = icmp eq i8 %466, %468
  br i1 %469, label %470, label %bcmp_translate.exit.thread158.preheader

; <label>:470                                     ; preds = %461
  %471 = add nsw i32 %mcnt.5.ph, -1
  %472 = icmp eq i32 %471, 0
  br i1 %472, label %.loopexit204, label %.outer210

.outer210:                                        ; preds = %453, %470
  %p.1.ph = phi i8* [ %467, %470 ], [ %454, %453 ]
  %dend.2.ph = phi i8* [ %dend.2, %470 ], [ %dend.0, %453 ]
  %d.2.ph = phi i8* [ %462, %470 ], [ %d.0, %453 ]
  %mcnt.5.ph = phi i32 [ %471, %470 ], [ %456, %453 ]
  br label %457

; <label>:473                                     ; preds = %.outer, %475
  %dend.3 = phi i8* [ %end_match_2.0, %475 ], [ %dend.3.ph, %.outer ]
  %d.3 = phi i8* [ %string1.string2, %475 ], [ %d.3.ph, %.outer ]
  %474 = icmp eq i8* %d.3, %dend.3
  br i1 %474, label %475, label %477

; <label>:475                                     ; preds = %473
  %476 = icmp eq i8* %dend.3, %end_match_2.0
  br i1 %476, label %bcmp_translate.exit.thread158.preheader, label %473

; <label>:477                                     ; preds = %473
  %478 = getelementptr inbounds i8* %d.3, i64 1
  %479 = load i8* %d.3, align 1, !tbaa !12
  %480 = getelementptr inbounds i8* %p.2.ph, i64 1
  %481 = load i8* %p.2.ph, align 1, !tbaa !12
  %482 = icmp eq i8 %479, %481
  br i1 %482, label %483, label %bcmp_translate.exit.thread158.preheader

; <label>:483                                     ; preds = %477
  %484 = add nsw i32 %mcnt.6.ph, -1
  %485 = icmp eq i32 %484, 0
  br i1 %485, label %.loopexit204, label %.outer

.outer:                                           ; preds = %453, %483
  %p.2.ph = phi i8* [ %480, %483 ], [ %454, %453 ]
  %dend.3.ph = phi i8* [ %dend.3, %483 ], [ %dend.0, %453 ]
  %d.3.ph = phi i8* [ %478, %483 ], [ %d.0, %453 ]
  %mcnt.6.ph = phi i32 [ %484, %483 ], [ %456, %453 ]
  br label %473

.loopexit204:                                     ; preds = %470, %483
  %p.3 = phi i8* [ %480, %483 ], [ %467, %470 ]
  %dend.4 = phi i8* [ %dend.3, %483 ], [ %dend.2, %470 ]
  %d.4 = phi i8* [ %478, %483 ], [ %462, %470 ]
  %486 = icmp eq i32 %set_regs_matched_done.0, 0
  br i1 %486, label %.preheader200, label %.backedge257

.preheader200:                                    ; preds = %.loopexit204
  %487 = icmp ult i64 %highest_active_reg.0, %lowest_active_reg.0
  br i1 %487, label %.backedge257, label %.lr.ph435

.lr.ph435:                                        ; preds = %.preheader200, %.lr.ph435
  %r.0434 = phi i64 [ %492, %.lr.ph435 ], [ %lowest_active_reg.0, %.preheader200 ]
  %488 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %r.0434
  %489 = bitcast %union.register_info_type* %488 to i8*
  %490 = load i8* %489, align 4
  %491 = or i8 %490, 24
  store i8 %491, i8* %489, align 4
  %492 = add i64 %r.0434, 1
  %493 = icmp ugt i64 %492, %highest_active_reg.0
  br i1 %493, label %.backedge257, label %.lr.ph435

.preheader214:                                    ; preds = %443, %495
  %dend.5 = phi i8* [ %end_match_2.0, %495 ], [ %dend.0, %443 ]
  %d.5 = phi i8* [ %string1.string2, %495 ], [ %d.0, %443 ]
  %494 = icmp eq i8* %d.5, %dend.5
  br i1 %494, label %495, label %497

; <label>:495                                     ; preds = %.preheader214
  %496 = icmp eq i8* %dend.5, %end_match_2.0
  br i1 %496, label %bcmp_translate.exit.thread158.preheader, label %.preheader214

; <label>:497                                     ; preds = %.preheader214
  %498 = load i64* %140, align 8, !tbaa !14
  %499 = and i64 %498, 64
  %500 = icmp eq i64 %499, 0
  br i1 %500, label %501, label %509

; <label>:501                                     ; preds = %497
  %502 = load i8* %d.5, align 1, !tbaa !12
  br i1 %134, label %507, label %503

; <label>:503                                     ; preds = %501
  %504 = zext i8 %502 to i64
  %505 = getelementptr inbounds i8* %7, i64 %504
  %506 = load i8* %505, align 1, !tbaa !12
  br label %507

; <label>:507                                     ; preds = %501, %503
  %.sink46 = phi i8 [ %506, %503 ], [ %502, %501 ]
  %508 = icmp eq i8 %.sink46, 10
  br i1 %508, label %bcmp_translate.exit.thread158.preheader, label %509

; <label>:509                                     ; preds = %497, %507
  %510 = and i64 %498, 128
  %511 = icmp eq i64 %510, 0
  br i1 %511, label %520, label %512

; <label>:512                                     ; preds = %509
  %513 = load i8* %d.5, align 1, !tbaa !12
  br i1 %134, label %518, label %514

; <label>:514                                     ; preds = %512
  %515 = zext i8 %513 to i64
  %516 = getelementptr inbounds i8* %7, i64 %515
  %517 = load i8* %516, align 1, !tbaa !12
  br label %518

; <label>:518                                     ; preds = %512, %514
  %.sink47 = phi i8 [ %517, %514 ], [ %513, %512 ]
  %519 = icmp eq i8 %.sink47, 0
  br i1 %519, label %bcmp_translate.exit.thread158.preheader, label %520

; <label>:520                                     ; preds = %509, %518
  %521 = icmp eq i32 %set_regs_matched_done.0, 0
  br i1 %521, label %.preheader212, label %.loopexit213

.preheader212:                                    ; preds = %520
  %522 = icmp ult i64 %highest_active_reg.0, %lowest_active_reg.0
  br i1 %522, label %.loopexit213, label %.lr.ph433

.lr.ph433:                                        ; preds = %.preheader212, %.lr.ph433
  %r1.0432 = phi i64 [ %527, %.lr.ph433 ], [ %lowest_active_reg.0, %.preheader212 ]
  %523 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %r1.0432
  %524 = bitcast %union.register_info_type* %523 to i8*
  %525 = load i8* %524, align 4
  %526 = or i8 %525, 24
  store i8 %526, i8* %524, align 4
  %527 = add i64 %r1.0432, 1
  %528 = icmp ugt i64 %527, %highest_active_reg.0
  br i1 %528, label %.loopexit213, label %.lr.ph433

.loopexit213:                                     ; preds = %.lr.ph433, %.preheader212, %520
  %set_regs_matched_done.1 = phi i32 [ %set_regs_matched_done.0, %520 ], [ 1, %.preheader212 ], [ 1, %.lr.ph433 ]
  %529 = getelementptr inbounds i8* %d.5, i64 1
  br label %.backedge257

; <label>:530                                     ; preds = %443, %443
  %531 = icmp eq i8 %445, 5
  %532 = zext i1 %531 to i8
  br label %533

; <label>:533                                     ; preds = %535, %530
  %dend.6 = phi i8* [ %dend.0, %530 ], [ %end_match_2.0, %535 ]
  %d.6 = phi i8* [ %d.0, %530 ], [ %string1.string2, %535 ]
  %534 = icmp eq i8* %d.6, %dend.6
  br i1 %534, label %535, label %537

; <label>:535                                     ; preds = %533
  %536 = icmp eq i8* %dend.6, %end_match_2.0
  br i1 %536, label %bcmp_translate.exit.thread158.preheader, label %533

; <label>:537                                     ; preds = %533
  %538 = load i8* %d.6, align 1, !tbaa !12
  br i1 %134, label %543, label %539

; <label>:539                                     ; preds = %537
  %540 = zext i8 %538 to i64
  %541 = getelementptr inbounds i8* %7, i64 %540
  %542 = load i8* %541, align 1, !tbaa !12
  br label %543

; <label>:543                                     ; preds = %537, %539
  %.sink48 = phi i8 [ %542, %539 ], [ %538, %537 ]
  %544 = zext i8 %.sink48 to i32
  %545 = load i8* %444, align 1, !tbaa !12
  %546 = zext i8 %545 to i32
  %547 = shl nuw nsw i32 %546, 3
  %548 = icmp ult i32 %544, %547
  br i1 %548, label %549, label %558

; <label>:549                                     ; preds = %543
  %div104 = lshr i8 %.sink48, 3
  %550 = zext i8 %div104 to i64
  %.sum105 = add nuw nsw i64 %550, 2
  %551 = getelementptr inbounds i8* %p.0, i64 %.sum105
  %552 = load i8* %551, align 1, !tbaa !12
  %553 = zext i8 %552 to i32
  %554 = and i8 %.sink48, 7
  %555 = zext i8 %554 to i32
  %556 = shl i32 1, %555
  %557 = and i32 %553, %556
  %not.182 = icmp ne i32 %557, 0
  %.165183 = xor i1 %531, %not.182
  %.165 = zext i1 %.165183 to i8
  br label %558

; <label>:558                                     ; preds = %549, %543
  %not.0 = phi i8 [ %532, %543 ], [ %.165, %549 ]
  %559 = zext i8 %545 to i64
  %.sum103 = add nuw nsw i64 %559, 2
  %560 = getelementptr inbounds i8* %p.0, i64 %.sum103
  %561 = icmp eq i8 %not.0, 0
  br i1 %561, label %bcmp_translate.exit.thread158.preheader, label %562

; <label>:562                                     ; preds = %558
  %563 = icmp eq i32 %set_regs_matched_done.0, 0
  br i1 %563, label %.preheader216, label %.loopexit217

.preheader216:                                    ; preds = %562
  %564 = icmp ult i64 %highest_active_reg.0, %lowest_active_reg.0
  br i1 %564, label %.loopexit217, label %.lr.ph431

.lr.ph431:                                        ; preds = %.preheader216, %.lr.ph431
  %r2.0430 = phi i64 [ %569, %.lr.ph431 ], [ %lowest_active_reg.0, %.preheader216 ]
  %565 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %r2.0430
  %566 = bitcast %union.register_info_type* %565 to i8*
  %567 = load i8* %566, align 4
  %568 = or i8 %567, 24
  store i8 %568, i8* %566, align 4
  %569 = add i64 %r2.0430, 1
  %570 = icmp ugt i64 %569, %highest_active_reg.0
  br i1 %570, label %.loopexit217, label %.lr.ph431

.loopexit217:                                     ; preds = %.lr.ph431, %.preheader216, %562
  %set_regs_matched_done.2 = phi i32 [ %set_regs_matched_done.0, %562 ], [ 1, %.preheader216 ], [ 1, %.lr.ph431 ]
  %571 = getelementptr inbounds i8* %d.6, i64 1
  br label %.backedge257

; <label>:572                                     ; preds = %443
  store i8* %444, i8** %p1, align 8, !tbaa !13
  %573 = load i8* %444, align 1, !tbaa !12
  %574 = zext i8 %573 to i64
  %575 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %574
  %576 = bitcast %union.register_info_type* %575 to i8*
  %577 = load i8* %576, align 4
  %578 = and i8 %577, 3
  %579 = icmp eq i8 %578, 3
  br i1 %579, label %580, label %590

; <label>:580                                     ; preds = %572
  %581 = call fastcc signext i8 @group_match_null_string_p(i8** %p1, i8* %5, %union.register_info_type* %reg_info.0) #8
  %582 = load i8* %444, align 1, !tbaa !12
  %583 = zext i8 %582 to i64
  %584 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %583
  %585 = bitcast %union.register_info_type* %584 to i8*
  %586 = load i8* %585, align 4
  %587 = and i8 %581, 3
  %588 = and i8 %586, -4
  %589 = or i8 %588, %587
  store i8 %589, i8* %585, align 4
  %.pre605 = load i8* %444, align 1, !tbaa !12
  %.phi.trans.insert = zext i8 %.pre605 to i64
  %.phi.trans.insert606 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %.phi.trans.insert
  %.phi.trans.insert607 = bitcast %union.register_info_type* %.phi.trans.insert606 to i8*
  %.pre608 = load i8* %.phi.trans.insert607, align 4
  br label %590

; <label>:590                                     ; preds = %580, %572
  %591 = phi i8 [ %.pre608, %580 ], [ %577, %572 ]
  %592 = phi i8 [ %.pre605, %580 ], [ %573, %572 ]
  %593 = zext i8 %592 to i64
  %594 = and i8 %591, 3
  %595 = icmp eq i8 %594, 0
  %596 = getelementptr inbounds i8** %regstart.0, i64 %593
  %597 = load i8** %596, align 8, !tbaa !13
  br i1 %595, label %600, label %598

; <label>:598                                     ; preds = %590
  %599 = icmp eq i8* %597, @reg_unset_dummy
  %d.0. = select i1 %599, i8* %d.0, i8* %597
  br label %600

; <label>:600                                     ; preds = %598, %590
  %601 = phi i8* [ %597, %590 ], [ %d.0., %598 ]
  %602 = getelementptr inbounds i8** %old_regstart.0, i64 %593
  store i8* %601, i8** %602, align 8, !tbaa !13
  %603 = load i8* %444, align 1, !tbaa !12
  %604 = zext i8 %603 to i64
  %605 = getelementptr inbounds i8** %regstart.0, i64 %604
  store i8* %d.0, i8** %605, align 8, !tbaa !13
  %606 = load i8* %444, align 1, !tbaa !12
  %607 = zext i8 %606 to i64
  %608 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %607
  %609 = bitcast %union.register_info_type* %608 to i8*
  %610 = load i8* %609, align 4
  %611 = or i8 %610, 4
  store i8 %611, i8* %609, align 4
  %612 = load i8* %444, align 1, !tbaa !12
  %613 = zext i8 %612 to i64
  %614 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %613
  %615 = bitcast %union.register_info_type* %614 to i8*
  %616 = load i8* %615, align 4
  %617 = and i8 %616, -9
  store i8 %617, i8* %615, align 4
  %618 = load i8* %444, align 1, !tbaa !12
  %619 = zext i8 %618 to i64
  %620 = icmp eq i64 %lowest_active_reg.0, 257
  %.lowest_active_reg.0 = select i1 %620, i64 %619, i64 %lowest_active_reg.0
  %621 = getelementptr inbounds i8* %p.0, i64 3
  br label %.backedge257

; <label>:622                                     ; preds = %443
  %623 = load i8* %444, align 1, !tbaa !12
  %624 = zext i8 %623 to i64
  %625 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %624
  %626 = bitcast %union.register_info_type* %625 to i8*
  %627 = load i8* %626, align 4
  %628 = and i8 %627, 3
  %629 = icmp eq i8 %628, 0
  %630 = getelementptr inbounds i8** %regend.0, i64 %624
  %631 = load i8** %630, align 8, !tbaa !13
  br i1 %629, label %634, label %632

; <label>:632                                     ; preds = %622
  %633 = icmp eq i8* %631, @reg_unset_dummy
  %d.0.120 = select i1 %633, i8* %d.0, i8* %631
  br label %634

; <label>:634                                     ; preds = %632, %622
  %635 = phi i8* [ %631, %622 ], [ %d.0.120, %632 ]
  %636 = getelementptr inbounds i8** %old_regend.0, i64 %624
  store i8* %635, i8** %636, align 8, !tbaa !13
  %637 = load i8* %444, align 1, !tbaa !12
  %638 = zext i8 %637 to i64
  %639 = getelementptr inbounds i8** %regend.0, i64 %638
  store i8* %d.0, i8** %639, align 8, !tbaa !13
  %640 = load i8* %444, align 1, !tbaa !12
  %641 = zext i8 %640 to i64
  %642 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %641
  %643 = bitcast %union.register_info_type* %642 to i8*
  %644 = load i8* %643, align 4
  %645 = and i8 %644, -5
  store i8 %645, i8* %643, align 4
  %646 = icmp eq i64 %highest_active_reg.0, %lowest_active_reg.0
  %.pre = load i8* %444, align 1, !tbaa !12
  br i1 %646, label %.critedge121, label %.preheader665

.preheader665:                                    ; preds = %634, %647
  %r3.0.in = phi i8 [ %r3.0, %647 ], [ %.pre, %634 ]
  %r3.0 = add i8 %r3.0.in, -1
  %cond = icmp eq i8 %r3.0, 0
  br i1 %cond, label %.critedge121, label %647

; <label>:647                                     ; preds = %.preheader665
  %648 = zext i8 %r3.0 to i64
  %649 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %648
  %650 = bitcast %union.register_info_type* %649 to i8*
  %651 = load i8* %650, align 4
  %652 = and i8 %651, 4
  %653 = icmp eq i8 %652, 0
  br i1 %653, label %.preheader665, label %.critedge121

.critedge121:                                     ; preds = %647, %.preheader665, %634
  %lowest_active_reg.2 = phi i64 [ 257, %634 ], [ 257, %.preheader665 ], [ %lowest_active_reg.0, %647 ]
  %highest_active_reg.1 = phi i64 [ 256, %634 ], [ 256, %.preheader665 ], [ %648, %647 ]
  %654 = zext i8 %.pre to i64
  %655 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %654
  %656 = bitcast %union.register_info_type* %655 to i8*
  %657 = load i8* %656, align 4
  %658 = and i8 %657, 8
  %659 = icmp eq i8 %658, 0
  %660 = icmp eq i8* %just_past_start_mem.0, %p.0
  %or.cond122 = or i1 %660, %659
  %661 = getelementptr inbounds i8* %p.0, i64 3
  %662 = icmp ult i8* %661, %5
  %or.cond646 = and i1 %or.cond122, %662
  br i1 %or.cond646, label %663, label %.backedge257

; <label>:663                                     ; preds = %.critedge121
  %664 = getelementptr inbounds i8* %p.0, i64 4
  store i8* %664, i8** %p1, align 8, !tbaa !13
  %665 = load i8* %661, align 1, !tbaa !12
  %666 = zext i8 %665 to i32
  %switch.tableidx = add nsw i32 %666, -13
  %667 = icmp ult i32 %switch.tableidx, 10
  br i1 %667, label %switch.hole_check, label %.backedge257

switch.hole_check:                                ; preds = %663
  %switch.maskindex = trunc i32 %switch.tableidx to i16
  %switch.shifted = lshr i16 625, %switch.maskindex
  %668 = and i16 %switch.shifted, 1
  %switch.lobit = icmp eq i16 %668, 0
  br i1 %switch.lobit, label %.backedge257, label %switch.lookup

switch.lookup:                                    ; preds = %switch.hole_check
  %switch.cast = trunc i32 %switch.tableidx to i10
  %switch.downshift = lshr i10 -114, %switch.cast
  %669 = and i10 %switch.downshift, 1
  %670 = load i8* %664, align 1, !tbaa !12
  %671 = zext i8 %670 to i32
  %672 = getelementptr inbounds i8* %p.0, i64 5
  %673 = load i8* %672, align 1, !tbaa !12
  %674 = sext i8 %673 to i32
  %675 = shl nsw i32 %674, 8
  %676 = or i32 %675, %671
  %677 = zext i10 %669 to i64
  %678 = shl nuw nsw i64 %677, 1
  %679 = add nuw nsw i64 %678, 6
  %680 = sext i32 %676 to i64
  %.sum186 = add nsw i64 %680, %679
  %681 = getelementptr inbounds i8* %p.0, i64 %.sum186
  store i8* %681, i8** %p1, align 8, !tbaa !13
  %682 = icmp slt i32 %676, 0
  br i1 %682, label %683, label %.backedge257

; <label>:683                                     ; preds = %switch.lookup
  %684 = load i8* %681, align 1, !tbaa !12
  %685 = icmp eq i8 %684, 15
  br i1 %685, label %686, label %.backedge257

; <label>:686                                     ; preds = %683
  %.sum101 = or i64 %678, 9
  %.sum187 = add nsw i64 %.sum101, %680
  %687 = getelementptr inbounds i8* %p.0, i64 %.sum187
  %688 = load i8* %687, align 1, !tbaa !12
  %689 = icmp eq i8 %688, 6
  br i1 %689, label %690, label %.backedge257

; <label>:690                                     ; preds = %686
  %.sum102 = add nuw nsw i64 %678, 10
  %.sum188 = add nsw i64 %.sum102, %680
  %691 = getelementptr inbounds i8* %p.0, i64 %.sum188
  %692 = load i8* %691, align 1, !tbaa !12
  %693 = load i8* %444, align 1, !tbaa !12
  %694 = icmp eq i8 %692, %693
  br i1 %694, label %695, label %.backedge257

; <label>:695                                     ; preds = %690
  %696 = zext i8 %692 to i64
  %697 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %696
  %698 = bitcast %union.register_info_type* %697 to i8*
  %699 = load i8* %698, align 4
  %700 = and i8 %699, 16
  %701 = icmp eq i8 %700, 0
  br i1 %701, label %.loopexit221, label %702

; <label>:702                                     ; preds = %695
  %703 = and i8 %699, -17
  store i8 %703, i8* %698, align 4
  %704 = getelementptr inbounds i8* %p.0, i64 2
  %705 = load i8* %704, align 1, !tbaa !12
  %706 = icmp eq i8 %705, 0
  br i1 %706, label %.loopexit221, label %.lr.ph424

.lr.ph424:                                        ; preds = %702
  %707 = load i8* %444, align 1, !tbaa !12
  %708 = zext i8 %707 to i32
  br label %709

; <label>:709                                     ; preds = %.lr.ph424, %719
  %r4.0422 = phi i32 [ %708, %.lr.ph424 ], [ %720, %719 ]
  %710 = zext i32 %r4.0422 to i64
  %711 = getelementptr inbounds i8** %old_regstart.0, i64 %710
  %712 = load i8** %711, align 8, !tbaa !13
  %713 = getelementptr inbounds i8** %regstart.0, i64 %710
  store i8* %712, i8** %713, align 8, !tbaa !13
  %714 = getelementptr inbounds i8** %old_regend.0, i64 %710
  %715 = load i8** %714, align 8, !tbaa !13
  %716 = icmp ult i8* %715, %712
  br i1 %716, label %719, label %717

; <label>:717                                     ; preds = %709
  %718 = getelementptr inbounds i8** %regend.0, i64 %710
  store i8* %715, i8** %718, align 8, !tbaa !13
  br label %719

; <label>:719                                     ; preds = %709, %717
  %720 = add nuw nsw i32 %r4.0422, 1
  %721 = load i8* %444, align 1, !tbaa !12
  %722 = zext i8 %721 to i32
  %723 = load i8* %704, align 1, !tbaa !12
  %724 = zext i8 %723 to i32
  %725 = add nuw nsw i32 %724, %722
  %726 = icmp ult i32 %720, %725
  br i1 %726, label %709, label %.loopexit221

.loopexit221:                                     ; preds = %719, %702, %695
  %.sum629 = add nsw i64 %.sum186, 1
  %727 = getelementptr inbounds i8* %p.0, i64 %.sum629
  store i8* %727, i8** %p1, align 8, !tbaa !13
  %728 = load i8* %727, align 1, !tbaa !12
  %729 = zext i8 %728 to i32
  %.sum630 = add nsw i64 %.sum186, 2
  %730 = getelementptr inbounds i8* %p.0, i64 %.sum630
  %731 = load i8* %730, align 1, !tbaa !12
  %732 = sext i8 %731 to i32
  %733 = shl nsw i32 %732, 8
  %734 = or i32 %733, %729
  %.sum631 = add nsw i64 %.sum186, 3
  %735 = getelementptr inbounds i8* %p.0, i64 %.sum631
  store i8* %735, i8** %p1, align 8, !tbaa !13
  %736 = sub i64 %highest_active_reg.1, %lowest_active_reg.2
  %737 = mul i64 %736, 3
  %738 = add i64 %737, 7
  br label %739

; <label>:739                                     ; preds = %748, %.loopexit221
  %fail_stack.sroa.0.3 = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.0, %.loopexit221 ], [ %754, %748 ]
  %fail_stack.sroa.72.1 = phi i32 [ %fail_stack.sroa.72.0, %.loopexit221 ], [ %fail_stack.sroa.72.1., %748 ]
  %740 = sub i32 %fail_stack.sroa.72.1, %fail_stack.sroa.98.0
  %741 = zext i32 %740 to i64
  %742 = icmp ult i64 %741, %738
  br i1 %742, label %744, label %.preheader219

.preheader219:                                    ; preds = %739
  %743 = icmp ult i64 %highest_active_reg.1, %lowest_active_reg.2
  br i1 %743, label %779, label %.lr.ph427

; <label>:744                                     ; preds = %739
  %745 = load i32* @re_max_failures, align 4, !tbaa !15
  %746 = mul nsw i32 %745, 19
  %747 = icmp ugt i32 %fail_stack.sroa.72.1, %746
  br i1 %747, label %.loopexit220, label %748

; <label>:748                                     ; preds = %744
  %749 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.3 to i8*
  %750 = shl i32 %fail_stack.sroa.72.1, 1
  %751 = zext i32 %750 to i64
  %752 = shl nuw nsw i64 %751, 3
  %753 = tail call i8* @realloc(i8* %749, i64 %752) #7
  %754 = bitcast i8* %753 to %union.fail_stack_elt*
  %755 = icmp eq i8* %753, null
  %fail_stack.sroa.72.1. = select i1 %755, i32 %fail_stack.sroa.72.1, i32 %750
  br i1 %755, label %.loopexit220, label %739

.lr.ph427:                                        ; preds = %.preheader219, %.lr.ph427
  %this_reg.0426 = phi i64 [ %777, %.lr.ph427 ], [ %lowest_active_reg.2, %.preheader219 ]
  %fail_stack.sroa.98.1425 = phi i32 [ %770, %.lr.ph427 ], [ %fail_stack.sroa.98.0, %.preheader219 ]
  %756 = getelementptr inbounds i8** %regstart.0, i64 %this_reg.0426
  %757 = bitcast i8** %756 to i64*
  %758 = load i64* %757, align 8, !tbaa !13
  %759 = add i32 %fail_stack.sroa.98.1425, 1
  %760 = zext i32 %fail_stack.sroa.98.1425 to i64
  %761 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.3, i64 %760
  %762 = bitcast %union.fail_stack_elt* %761 to i64*
  store i64 %758, i64* %762, align 8, !tbaa !13
  %763 = getelementptr inbounds i8** %regend.0, i64 %this_reg.0426
  %764 = bitcast i8** %763 to i64*
  %765 = load i64* %764, align 8, !tbaa !13
  %766 = add i32 %fail_stack.sroa.98.1425, 2
  %767 = zext i32 %759 to i64
  %768 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.3, i64 %767
  %769 = bitcast %union.fail_stack_elt* %768 to i64*
  store i64 %765, i64* %769, align 8, !tbaa !13
  %770 = add i32 %fail_stack.sroa.98.1425, 3
  %771 = zext i32 %766 to i64
  %772 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.3, i64 %771
  %773 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %this_reg.0426, i32 0
  %774 = bitcast %union.fail_stack_elt* %773 to i64*
  %775 = load i64* %774, align 8
  %776 = bitcast %union.fail_stack_elt* %772 to i64*
  store i64 %775, i64* %776, align 8
  %777 = add i64 %this_reg.0426, 1
  %778 = icmp ugt i64 %777, %highest_active_reg.1
  br i1 %778, label %._crit_edge428, label %.lr.ph427

._crit_edge428:                                   ; preds = %.lr.ph427
  %.pre604 = load i8** %p1, align 8, !tbaa !13
  br label %779

; <label>:779                                     ; preds = %._crit_edge428, %.preheader219
  %780 = phi i8* [ %.pre604, %._crit_edge428 ], [ %735, %.preheader219 ]
  %fail_stack.sroa.98.1.lcssa = phi i32 [ %770, %._crit_edge428 ], [ %fail_stack.sroa.98.0, %.preheader219 ]
  %781 = trunc i64 %lowest_active_reg.2 to i32
  %782 = add i32 %fail_stack.sroa.98.1.lcssa, 1
  %783 = zext i32 %fail_stack.sroa.98.1.lcssa to i64
  %784 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.3, i64 %783
  %785 = bitcast %union.fail_stack_elt* %784 to i32*
  store i32 %781, i32* %785, align 4, !tbaa !15
  %786 = trunc i64 %highest_active_reg.1 to i32
  %787 = add i32 %fail_stack.sroa.98.1.lcssa, 2
  %788 = zext i32 %782 to i64
  %789 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.3, i64 %788
  %790 = bitcast %union.fail_stack_elt* %789 to i32*
  store i32 %786, i32* %790, align 4, !tbaa !15
  %791 = sext i32 %734 to i64
  %792 = getelementptr inbounds i8* %780, i64 %791
  %793 = add i32 %fail_stack.sroa.98.1.lcssa, 3
  %794 = zext i32 %787 to i64
  %795 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.3, i64 %794, i32 0
  store i8* %792, i8** %795, align 8, !tbaa !13
  %796 = add i32 %fail_stack.sroa.98.1.lcssa, 4
  %797 = zext i32 %793 to i64
  %798 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.3, i64 %797, i32 0
  store i8* %d.0, i8** %798, align 8, !tbaa !13
  br label %bcmp_translate.exit.thread158.preheader

; <label>:799                                     ; preds = %443
  %800 = getelementptr inbounds i8* %p.0, i64 2
  %801 = load i8* %444, align 1, !tbaa !12
  %802 = zext i8 %801 to i64
  %803 = getelementptr inbounds i8** %regstart.0, i64 %802
  %804 = load i8** %803, align 8, !tbaa !13
  %805 = icmp eq i8* %804, @reg_unset_dummy
  br i1 %805, label %bcmp_translate.exit.thread158.preheader, label %806

; <label>:806                                     ; preds = %799
  %807 = getelementptr inbounds i8** %regend.0, i64 %802
  %808 = load i8** %807, align 8, !tbaa !13
  %809 = icmp eq i8* %808, @reg_unset_dummy
  br i1 %809, label %bcmp_translate.exit.thread158.preheader, label %810

; <label>:810                                     ; preds = %806
  %811 = icmp ule i8* %804, %117
  %.not178 = icmp ule i8* %.string1, %804
  %not.or.cond125 = and i1 %notlhs184, %.not178
  %.155 = and i1 %811, %not.or.cond125
  br i1 %notlhs184, label %812, label %._crit_edge

._crit_edge:                                      ; preds = %810
  br i1 %.155, label %.preheader222, label %814

; <label>:812                                     ; preds = %810
  %813 = icmp ule i8* %808, %117
  %not.179 = icmp ule i8* %.string1, %808
  %.126 = and i1 %813, %not.179
  %tmp = xor i1 %.155, %.126
  br i1 %tmp, label %.preheader222, label %814

; <label>:814                                     ; preds = %._crit_edge, %812
  br label %.preheader222

.preheader222:                                    ; preds = %812, %814, %._crit_edge
  %dend2.0.ph = phi i8* [ %end_match_1.0, %._crit_edge ], [ %808, %814 ], [ %end_match_1.0, %812 ]
  %815 = icmp ult i64 %highest_active_reg.0, %lowest_active_reg.0
  br label %.outer225

.outer225:                                        ; preds = %.preheader195, %.lr.ph421, %.preheader222
  %816 = phi i8* [ %808, %.preheader222 ], [ %827, %.lr.ph421 ], [ %827, %.preheader195 ]
  %set_regs_matched_done.3.ph = phi i32 [ %set_regs_matched_done.0, %.preheader222 ], [ 1, %.lr.ph421 ], [ 1, %.preheader195 ]
  %d2.0.ph = phi i8* [ %804, %.preheader222 ], [ %861, %.lr.ph421 ], [ %861, %.preheader195 ]
  %dend2.0.ph226 = phi i8* [ %dend2.0.ph, %.preheader222 ], [ %dend2.0.ph229, %.lr.ph421 ], [ %dend2.0.ph229, %.preheader195 ]
  %dend.7.ph = phi i8* [ %dend.0, %.preheader222 ], [ %dend.8, %.lr.ph421 ], [ %dend.8, %.preheader195 ]
  %d.7.ph = phi i8* [ %d.0, %.preheader222 ], [ %860, %.lr.ph421 ], [ %860, %.preheader195 ]
  %817 = icmp eq i32 %set_regs_matched_done.3.ph, 0
  br label %.outer227

.outer227:                                        ; preds = %824, %.outer225
  %818 = phi i8* [ %816, %.outer225 ], [ %822, %824 ]
  %d2.0.ph228 = phi i8* [ %d2.0.ph, %.outer225 ], [ %string1.string2, %824 ]
  %dend2.0.ph229 = phi i8* [ %dend2.0.ph226, %.outer225 ], [ %822, %824 ]
  %dend.7.ph230 = phi i8* [ %dend.7.ph, %.outer225 ], [ %dend.7, %824 ]
  %d.7.ph231 = phi i8* [ %d.7.ph, %.outer225 ], [ %d.7, %824 ]
  %819 = icmp eq i8* %dend2.0.ph229, %end_match_2.0
  %820 = ptrtoint i8* %dend2.0.ph229 to i64
  br label %821

; <label>:821                                     ; preds = %.outer227, %bcmp_translate.exit.thread
  %822 = phi i8* [ %827, %bcmp_translate.exit.thread ], [ %818, %.outer227 ]
  %d2.0 = phi i8* [ %861, %bcmp_translate.exit.thread ], [ %d2.0.ph228, %.outer227 ]
  %dend.7 = phi i8* [ %dend.8, %bcmp_translate.exit.thread ], [ %dend.7.ph230, %.outer227 ]
  %d.7 = phi i8* [ %860, %bcmp_translate.exit.thread ], [ %d.7.ph231, %.outer227 ]
  %823 = icmp eq i8* %d2.0, %dend2.0.ph229
  %.not127 = xor i1 %823, true
  %or.cond128 = or i1 %819, %.not127
  br i1 %or.cond128, label %826, label %824

; <label>:824                                     ; preds = %821
  %825 = icmp eq i8* %dend2.0.ph229, %822
  br i1 %825, label %826, label %.outer227

; <label>:826                                     ; preds = %821, %824
  %827 = phi i8* [ %822, %821 ], [ %dend2.0.ph229, %824 ]
  br i1 %823, label %.backedge257, label %.preheader197

.preheader197:                                    ; preds = %826, %829
  %dend.8 = phi i8* [ %end_match_2.0, %829 ], [ %dend.7, %826 ]
  %d.8 = phi i8* [ %string1.string2, %829 ], [ %d.7, %826 ]
  %828 = icmp eq i8* %d.8, %dend.8
  br i1 %828, label %829, label %831

; <label>:829                                     ; preds = %.preheader197
  %830 = icmp eq i8* %dend.8, %end_match_2.0
  br i1 %830, label %bcmp_translate.exit.thread158.preheader, label %.preheader197

; <label>:831                                     ; preds = %.preheader197
  %832 = ptrtoint i8* %dend.8 to i64
  %833 = ptrtoint i8* %d.8 to i64
  %834 = sub i64 %832, %833
  %sext = shl i64 %834, 32
  %835 = ashr exact i64 %sext, 32
  %836 = ptrtoint i8* %d2.0 to i64
  %837 = sub i64 %820, %836
  %838 = icmp sgt i64 %835, %837
  %.129 = select i1 %838, i64 %837, i64 %834
  br i1 %134, label %855, label %839

; <label>:839                                     ; preds = %831
  %mcnt.8 = trunc i64 %.129 to i32
  %840 = icmp eq i32 %mcnt.8, 0
  br i1 %840, label %bcmp_translate.exit.thread, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %839, %850
  %p2.04.i = phi i8* [ %851, %850 ], [ %d2.0, %839 ]
  %p1.03.i = phi i8* [ %852, %850 ], [ %d.8, %839 ]
  %.012.i = phi i32 [ %853, %850 ], [ %mcnt.8, %839 ]
  %841 = load i8* %p1.03.i, align 1, !tbaa !12
  %842 = zext i8 %841 to i64
  %843 = getelementptr inbounds i8* %7, i64 %842
  %844 = load i8* %843, align 1, !tbaa !12
  %845 = load i8* %p2.04.i, align 1, !tbaa !12
  %846 = zext i8 %845 to i64
  %847 = getelementptr inbounds i8* %7, i64 %846
  %848 = load i8* %847, align 1, !tbaa !12
  %849 = icmp eq i8 %844, %848
  br i1 %849, label %850, label %bcmp_translate.exit.thread158.preheader

; <label>:850                                     ; preds = %.lr.ph.i
  %851 = getelementptr inbounds i8* %p2.04.i, i64 1
  %852 = getelementptr inbounds i8* %p1.03.i, i64 1
  %853 = add nsw i32 %.012.i, -1
  %854 = icmp eq i32 %853, 0
  br i1 %854, label %bcmp_translate.exit.thread, label %.lr.ph.i

; <label>:855                                     ; preds = %831
  %sext99 = shl i64 %.129, 32
  %856 = ashr exact i64 %sext99, 32
  %857 = tail call i32 @memcmp(i8* %d.8, i8* %d2.0, i64 %856) #7
  %858 = icmp eq i32 %857, 0
  br i1 %858, label %bcmp_translate.exit.thread, label %bcmp_translate.exit.thread158.preheader

bcmp_translate.exit.thread:                       ; preds = %850, %839, %855
  %sext100 = shl i64 %.129, 32
  %859 = ashr exact i64 %sext100, 32
  %860 = getelementptr inbounds i8* %d.8, i64 %859
  %861 = getelementptr inbounds i8* %d2.0, i64 %859
  br i1 %817, label %.preheader195, label %821

.preheader195:                                    ; preds = %bcmp_translate.exit.thread
  br i1 %815, label %.outer225, label %.lr.ph421

.lr.ph421:                                        ; preds = %.preheader195, %.lr.ph421
  %r5.0420 = phi i64 [ %866, %.lr.ph421 ], [ %lowest_active_reg.0, %.preheader195 ]
  %862 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %r5.0420
  %863 = bitcast %union.register_info_type* %862 to i8*
  %864 = load i8* %863, align 4
  %865 = or i8 %864, 24
  store i8 %865, i8* %863, align 4
  %866 = add i64 %r5.0420, 1
  %867 = icmp ugt i64 %866, %highest_active_reg.0
  br i1 %867, label %.outer225, label %.lr.ph421

; <label>:868                                     ; preds = %443
  %869 = icmp ne i8* %d.0, %135
  %or.cond50 = and i1 %136, %869
  br i1 %or.cond50, label %874, label %870

; <label>:870                                     ; preds = %868
  %871 = load i8* %137, align 8
  %872 = and i8 %871, 32
  %873 = icmp eq i8 %872, 0
  br i1 %873, label %.backedge257, label %bcmp_translate.exit.thread158.preheader

; <label>:874                                     ; preds = %868
  %875 = getelementptr inbounds i8* %d.0, i64 -1
  %876 = load i8* %875, align 1, !tbaa !12
  %877 = icmp eq i8 %876, 10
  br i1 %877, label %878, label %bcmp_translate.exit.thread158.preheader

; <label>:878                                     ; preds = %874
  %879 = load i8* %137, align 8
  %880 = icmp slt i8 %879, 0
  br i1 %880, label %.backedge257, label %bcmp_translate.exit.thread158.preheader

; <label>:881                                     ; preds = %443
  %882 = icmp eq i8* %d.0, %119
  br i1 %882, label %883, label %887

; <label>:883                                     ; preds = %881
  %884 = load i8* %137, align 8
  %885 = and i8 %884, 64
  %886 = icmp eq i8 %885, 0
  br i1 %886, label %.backedge257, label %bcmp_translate.exit.thread158.preheader

; <label>:887                                     ; preds = %881
  %888 = icmp eq i8* %d.0, %117
  %string1.string2.d.0 = select i1 %888, i8* %string1.string2, i8* %d.0
  %.sink51 = load i8* %string1.string2.d.0, align 1
  %889 = icmp eq i8 %.sink51, 10
  br i1 %889, label %890, label %bcmp_translate.exit.thread158.preheader

; <label>:890                                     ; preds = %887
  %891 = load i8* %137, align 8
  %892 = icmp slt i8 %891, 0
  br i1 %892, label %.backedge257, label %bcmp_translate.exit.thread158.preheader

; <label>:893                                     ; preds = %443
  %894 = icmp ne i8* %d.0, %135
  %or.cond53 = and i1 %136, %894
  br i1 %or.cond53, label %bcmp_translate.exit.thread158.preheader, label %.backedge257

; <label>:895                                     ; preds = %443
  %896 = icmp eq i8* %d.0, %119
  br i1 %896, label %.backedge257, label %bcmp_translate.exit.thread158.preheader

; <label>:897                                     ; preds = %443
  %898 = load i8* %444, align 1, !tbaa !12
  %899 = zext i8 %898 to i32
  %900 = getelementptr inbounds i8* %p.0, i64 2
  %901 = load i8* %900, align 1, !tbaa !12
  %902 = sext i8 %901 to i32
  %903 = shl nsw i32 %902, 8
  %904 = or i32 %903, %899
  %905 = getelementptr inbounds i8* %p.0, i64 3
  %906 = sub i64 %highest_active_reg.0, %lowest_active_reg.0
  %907 = mul i64 %906, 3
  %908 = add i64 %907, 7
  br label %909

; <label>:909                                     ; preds = %918, %897
  %fail_stack.sroa.0.4 = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.0, %897 ], [ %924, %918 ]
  %fail_stack.sroa.72.3 = phi i32 [ %fail_stack.sroa.72.0, %897 ], [ %fail_stack.sroa.72.3., %918 ]
  %910 = sub i32 %fail_stack.sroa.72.3, %fail_stack.sroa.98.0
  %911 = zext i32 %910 to i64
  %912 = icmp ult i64 %911, %908
  br i1 %912, label %914, label %.preheader232

.preheader232:                                    ; preds = %909
  %913 = icmp ult i64 %highest_active_reg.0, %lowest_active_reg.0
  br i1 %913, label %._crit_edge418, label %.lr.ph417

; <label>:914                                     ; preds = %909
  %915 = load i32* @re_max_failures, align 4, !tbaa !15
  %916 = mul nsw i32 %915, 19
  %917 = icmp ugt i32 %fail_stack.sroa.72.3, %916
  br i1 %917, label %.loopexit220, label %918

; <label>:918                                     ; preds = %914
  %919 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.4 to i8*
  %920 = shl i32 %fail_stack.sroa.72.3, 1
  %921 = zext i32 %920 to i64
  %922 = shl nuw nsw i64 %921, 3
  %923 = tail call i8* @realloc(i8* %919, i64 %922) #7
  %924 = bitcast i8* %923 to %union.fail_stack_elt*
  %925 = icmp eq i8* %923, null
  %fail_stack.sroa.72.3. = select i1 %925, i32 %fail_stack.sroa.72.3, i32 %920
  br i1 %925, label %.loopexit220, label %909

.lr.ph417:                                        ; preds = %.preheader232, %.lr.ph417
  %this_reg7.0416 = phi i64 [ %947, %.lr.ph417 ], [ %lowest_active_reg.0, %.preheader232 ]
  %fail_stack.sroa.98.2415 = phi i32 [ %940, %.lr.ph417 ], [ %fail_stack.sroa.98.0, %.preheader232 ]
  %926 = getelementptr inbounds i8** %regstart.0, i64 %this_reg7.0416
  %927 = bitcast i8** %926 to i64*
  %928 = load i64* %927, align 8, !tbaa !13
  %929 = add i32 %fail_stack.sroa.98.2415, 1
  %930 = zext i32 %fail_stack.sroa.98.2415 to i64
  %931 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.4, i64 %930
  %932 = bitcast %union.fail_stack_elt* %931 to i64*
  store i64 %928, i64* %932, align 8, !tbaa !13
  %933 = getelementptr inbounds i8** %regend.0, i64 %this_reg7.0416
  %934 = bitcast i8** %933 to i64*
  %935 = load i64* %934, align 8, !tbaa !13
  %936 = add i32 %fail_stack.sroa.98.2415, 2
  %937 = zext i32 %929 to i64
  %938 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.4, i64 %937
  %939 = bitcast %union.fail_stack_elt* %938 to i64*
  store i64 %935, i64* %939, align 8, !tbaa !13
  %940 = add i32 %fail_stack.sroa.98.2415, 3
  %941 = zext i32 %936 to i64
  %942 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.4, i64 %941
  %943 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %this_reg7.0416, i32 0
  %944 = bitcast %union.fail_stack_elt* %943 to i64*
  %945 = load i64* %944, align 8
  %946 = bitcast %union.fail_stack_elt* %942 to i64*
  store i64 %945, i64* %946, align 8
  %947 = add i64 %this_reg7.0416, 1
  %948 = icmp ugt i64 %947, %highest_active_reg.0
  br i1 %948, label %._crit_edge418, label %.lr.ph417

._crit_edge418:                                   ; preds = %.lr.ph417, %.preheader232
  %fail_stack.sroa.98.2.lcssa = phi i32 [ %fail_stack.sroa.98.0, %.preheader232 ], [ %940, %.lr.ph417 ]
  %949 = trunc i64 %lowest_active_reg.0 to i32
  %950 = add i32 %fail_stack.sroa.98.2.lcssa, 1
  %951 = zext i32 %fail_stack.sroa.98.2.lcssa to i64
  %952 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.4, i64 %951
  %953 = bitcast %union.fail_stack_elt* %952 to i32*
  store i32 %949, i32* %953, align 4, !tbaa !15
  %954 = trunc i64 %highest_active_reg.0 to i32
  %955 = add i32 %fail_stack.sroa.98.2.lcssa, 2
  %956 = zext i32 %950 to i64
  %957 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.4, i64 %956
  %958 = bitcast %union.fail_stack_elt* %957 to i32*
  store i32 %954, i32* %958, align 4, !tbaa !15
  %addconv98 = add nsw i32 %904, 3
  %.sum97 = sext i32 %addconv98 to i64
  %959 = getelementptr inbounds i8* %p.0, i64 %.sum97
  %960 = add i32 %fail_stack.sroa.98.2.lcssa, 3
  %961 = zext i32 %955 to i64
  %962 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.4, i64 %961, i32 0
  store i8* %959, i8** %962, align 8, !tbaa !13
  %963 = add i32 %fail_stack.sroa.98.2.lcssa, 4
  %964 = zext i32 %960 to i64
  %965 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.4, i64 %964, i32 0
  store i8* null, i8** %965, align 8, !tbaa !13
  br label %.backedge257

; <label>:966                                     ; preds = %._crit_edge610, %1385
  %.pre-phi616 = phi i8* [ %.pre615, %._crit_edge610 ], [ %1368, %1385 ]
  %967 = load i8* %444, align 1, !tbaa !12
  %968 = zext i8 %967 to i32
  %969 = getelementptr inbounds i8* %p.0, i64 2
  %970 = load i8* %969, align 1, !tbaa !12
  %971 = sext i8 %970 to i32
  %972 = shl nsw i32 %971, 8
  %973 = or i32 %972, %968
  store i8* %.pre-phi616, i8** %p1, align 8, !tbaa !13
  %974 = icmp ult i8* %.pre-phi616, %5
  br i1 %974, label %.lr.ph409, label %.thread159

.lr.ph409:                                        ; preds = %966, %978
  %975 = phi i8* [ %979, %978 ], [ %.pre-phi616, %966 ]
  %976 = load i8* %975, align 1, !tbaa !12
  %977 = icmp eq i8 %976, 0
  br i1 %977, label %978, label %.thread159

; <label>:978                                     ; preds = %.lr.ph409
  %979 = getelementptr inbounds i8* %975, i64 1
  store i8* %979, i8** %p1, align 8, !tbaa !13
  %980 = icmp ult i8* %979, %5
  br i1 %980, label %.lr.ph409, label %.thread159

.thread159:                                       ; preds = %.lr.ph409, %978, %966
  %981 = phi i8* [ %.pre-phi616, %966 ], [ %975, %.lr.ph409 ], [ %979, %978 ]
  %982 = icmp ult i8* %981, %5
  br i1 %982, label %983, label %.preheader235

; <label>:983                                     ; preds = %.thread159
  %984 = load i8* %981, align 1, !tbaa !12
  %985 = icmp eq i8 %984, 6
  br i1 %985, label %986, label %.preheader235

; <label>:986                                     ; preds = %983
  %987 = getelementptr inbounds i8* %981, i64 1
  %988 = load i8* %987, align 1, !tbaa !12
  %989 = zext i8 %988 to i64
  %990 = getelementptr inbounds i8* %981, i64 2
  %991 = load i8* %990, align 1, !tbaa !12
  %992 = zext i8 %991 to i64
  %993 = add nuw nsw i64 %992, %989
  %994 = icmp eq i64 %lowest_active_reg.0, 257
  %.lowest_active_reg.0131 = select i1 %994, i64 %989, i64 %lowest_active_reg.0
  br label %.preheader235

.preheader235:                                    ; preds = %.thread159, %983, %986
  %lowest_active_reg.3.ph = phi i64 [ %.lowest_active_reg.0131, %986 ], [ %lowest_active_reg.0, %.thread159 ], [ %lowest_active_reg.0, %983 ]
  %highest_active_reg.2.ph = phi i64 [ %993, %986 ], [ %highest_active_reg.0, %.thread159 ], [ %highest_active_reg.0, %983 ]
  %995 = sub i64 %highest_active_reg.2.ph, %lowest_active_reg.3.ph
  %996 = mul i64 %995, 3
  %997 = add i64 %996, 7
  br label %998

; <label>:998                                     ; preds = %.preheader235, %1007
  %fail_stack.sroa.0.5 = phi %union.fail_stack_elt* [ %1013, %1007 ], [ %fail_stack.sroa.0.0, %.preheader235 ]
  %fail_stack.sroa.72.5 = phi i32 [ %fail_stack.sroa.72.5., %1007 ], [ %fail_stack.sroa.72.0, %.preheader235 ]
  %999 = sub i32 %fail_stack.sroa.72.5, %fail_stack.sroa.98.0
  %1000 = zext i32 %999 to i64
  %1001 = icmp ult i64 %1000, %997
  br i1 %1001, label %1003, label %.preheader234

.preheader234:                                    ; preds = %998
  %1002 = icmp ult i64 %highest_active_reg.2.ph, %lowest_active_reg.3.ph
  br i1 %1002, label %._crit_edge413, label %.lr.ph412

; <label>:1003                                    ; preds = %998
  %1004 = load i32* @re_max_failures, align 4, !tbaa !15
  %1005 = mul nsw i32 %1004, 19
  %1006 = icmp ugt i32 %fail_stack.sroa.72.5, %1005
  br i1 %1006, label %.loopexit220, label %1007

; <label>:1007                                    ; preds = %1003
  %1008 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.5 to i8*
  %1009 = shl i32 %fail_stack.sroa.72.5, 1
  %1010 = zext i32 %1009 to i64
  %1011 = shl nuw nsw i64 %1010, 3
  %1012 = tail call i8* @realloc(i8* %1008, i64 %1011) #7
  %1013 = bitcast i8* %1012 to %union.fail_stack_elt*
  %1014 = icmp eq i8* %1012, null
  %fail_stack.sroa.72.5. = select i1 %1014, i32 %fail_stack.sroa.72.5, i32 %1009
  br i1 %1014, label %.loopexit220, label %998

.lr.ph412:                                        ; preds = %.preheader234, %.lr.ph412
  %this_reg9.0411 = phi i64 [ %1036, %.lr.ph412 ], [ %lowest_active_reg.3.ph, %.preheader234 ]
  %fail_stack.sroa.98.3410 = phi i32 [ %1029, %.lr.ph412 ], [ %fail_stack.sroa.98.0, %.preheader234 ]
  %1015 = getelementptr inbounds i8** %regstart.0, i64 %this_reg9.0411
  %1016 = bitcast i8** %1015 to i64*
  %1017 = load i64* %1016, align 8, !tbaa !13
  %1018 = add i32 %fail_stack.sroa.98.3410, 1
  %1019 = zext i32 %fail_stack.sroa.98.3410 to i64
  %1020 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.5, i64 %1019
  %1021 = bitcast %union.fail_stack_elt* %1020 to i64*
  store i64 %1017, i64* %1021, align 8, !tbaa !13
  %1022 = getelementptr inbounds i8** %regend.0, i64 %this_reg9.0411
  %1023 = bitcast i8** %1022 to i64*
  %1024 = load i64* %1023, align 8, !tbaa !13
  %1025 = add i32 %fail_stack.sroa.98.3410, 2
  %1026 = zext i32 %1018 to i64
  %1027 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.5, i64 %1026
  %1028 = bitcast %union.fail_stack_elt* %1027 to i64*
  store i64 %1024, i64* %1028, align 8, !tbaa !13
  %1029 = add i32 %fail_stack.sroa.98.3410, 3
  %1030 = zext i32 %1025 to i64
  %1031 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.5, i64 %1030
  %1032 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %this_reg9.0411, i32 0
  %1033 = bitcast %union.fail_stack_elt* %1032 to i64*
  %1034 = load i64* %1033, align 8
  %1035 = bitcast %union.fail_stack_elt* %1031 to i64*
  store i64 %1034, i64* %1035, align 8
  %1036 = add i64 %this_reg9.0411, 1
  %1037 = icmp ugt i64 %1036, %highest_active_reg.2.ph
  br i1 %1037, label %._crit_edge413, label %.lr.ph412

._crit_edge413:                                   ; preds = %.lr.ph412, %.preheader234
  %fail_stack.sroa.98.3.lcssa = phi i32 [ %fail_stack.sroa.98.0, %.preheader234 ], [ %1029, %.lr.ph412 ]
  %1038 = trunc i64 %lowest_active_reg.3.ph to i32
  %1039 = add i32 %fail_stack.sroa.98.3.lcssa, 1
  %1040 = zext i32 %fail_stack.sroa.98.3.lcssa to i64
  %1041 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.5, i64 %1040
  %1042 = bitcast %union.fail_stack_elt* %1041 to i32*
  store i32 %1038, i32* %1042, align 4, !tbaa !15
  %1043 = trunc i64 %highest_active_reg.2.ph to i32
  %1044 = add i32 %fail_stack.sroa.98.3.lcssa, 2
  %1045 = zext i32 %1039 to i64
  %1046 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.5, i64 %1045
  %1047 = bitcast %union.fail_stack_elt* %1046 to i32*
  store i32 %1043, i32* %1047, align 4, !tbaa !15
  %addconv93 = add nsw i32 %973, 3
  %.sum92 = sext i32 %addconv93 to i64
  %1048 = getelementptr inbounds i8* %p.0, i64 %.sum92
  %1049 = add i32 %fail_stack.sroa.98.3.lcssa, 3
  %1050 = zext i32 %1044 to i64
  %1051 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.5, i64 %1050, i32 0
  store i8* %1048, i8** %1051, align 8, !tbaa !13
  %1052 = add i32 %fail_stack.sroa.98.3.lcssa, 4
  %1053 = zext i32 %1049 to i64
  %1054 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.5, i64 %1053, i32 0
  store i8* %d.0, i8** %1054, align 8, !tbaa !13
  br label %.backedge257

; <label>:1055                                    ; preds = %443
  %1056 = load i8* %444, align 1, !tbaa !12
  %1057 = zext i8 %1056 to i32
  %1058 = getelementptr inbounds i8* %p.0, i64 2
  %1059 = load i8* %1058, align 1, !tbaa !12
  %1060 = sext i8 %1059 to i32
  %1061 = shl nsw i32 %1060, 8
  %1062 = or i32 %1061, %1057
  %1063 = getelementptr inbounds i8* %p.0, i64 3
  br label %.backedge

.backedge:                                        ; preds = %1074, %1069, %1055
  %p2.0 = phi i8* [ %1063, %1055 ], [ %1070, %1069 ], [ %1072, %1074 ]
  %1064 = getelementptr inbounds i8* %p2.0, i64 2
  %1065 = icmp ult i8* %1064, %5
  br i1 %1065, label %1066, label %1071

; <label>:1066                                    ; preds = %.backedge
  %1067 = load i8* %p2.0, align 1, !tbaa !12
  %1068 = and i8 %1067, -2
  %switch = icmp eq i8 %1068, 6
  br i1 %switch, label %1069, label %1071

; <label>:1069                                    ; preds = %1066
  %1070 = getelementptr inbounds i8* %p2.0, i64 3
  br label %.backedge

; <label>:1071                                    ; preds = %1066, %.backedge
  %1072 = getelementptr inbounds i8* %p2.0, i64 6
  %1073 = icmp ult i8* %1072, %5
  br i1 %1073, label %1074, label %1077

; <label>:1074                                    ; preds = %1071
  %1075 = load i8* %p2.0, align 1, !tbaa !12
  %1076 = icmp eq i8 %1075, 19
  br i1 %1076, label %.backedge, label %1077

; <label>:1077                                    ; preds = %1071, %1074
  %addconv95 = add nsw i32 %1062, 3
  %.sum94 = sext i32 %addconv95 to i64
  %1078 = getelementptr inbounds i8* %p.0, i64 %.sum94
  store i8* %1078, i8** %p1, align 8, !tbaa !13
  %1079 = icmp eq i8* %p2.0, %5
  br i1 %1079, label %1080, label %1081

; <label>:1080                                    ; preds = %1077
  store i8 17, i8* %p.0, align 1, !tbaa !12
  br label %.thread163

; <label>:1081                                    ; preds = %1077
  %1082 = load i8* %p2.0, align 1, !tbaa !12
  %1083 = icmp eq i8 %1082, 2
  br i1 %1083, label %.thread160, label %1084

; <label>:1084                                    ; preds = %1081
  %1085 = load i8* %137, align 8
  %1086 = icmp slt i8 %1085, 0
  %1087 = icmp eq i8 %1082, 10
  %or.cond133 = and i1 %1087, %1086
  br i1 %or.cond133, label %1089, label %1121

.thread160:                                       ; preds = %1081
  %1088 = load i8* %1064, align 1, !tbaa !12
  br label %1089

; <label>:1089                                    ; preds = %1084, %.thread160
  %1090 = phi i8 [ %1088, %.thread160 ], [ 10, %1084 ]
  %.sum625 = add nsw i64 %.sum94, 3
  %1091 = getelementptr inbounds i8* %p.0, i64 %.sum625
  %1092 = load i8* %1091, align 1, !tbaa !12
  %1093 = icmp eq i8 %1092, 2
  br i1 %1093, label %1094, label %1099

; <label>:1094                                    ; preds = %1089
  %.sum628 = add nsw i64 %.sum94, 5
  %1095 = getelementptr inbounds i8* %p.0, i64 %.sum628
  %1096 = load i8* %1095, align 1, !tbaa !12
  %1097 = icmp eq i8 %1096, %1090
  br i1 %1097, label %.thread, label %1098

; <label>:1098                                    ; preds = %1094
  store i8 17, i8* %p.0, align 1, !tbaa !12
  br label %.thread163

; <label>:1099                                    ; preds = %1089
  %1100 = and i8 %1092, -2
  %switch157 = icmp eq i8 %1100, 4
  br i1 %switch157, label %1101, label %.thread

; <label>:1101                                    ; preds = %1099
  %1102 = icmp eq i8 %1092, 5
  %1103 = zext i1 %1102 to i32
  %.sum626 = add nsw i64 %.sum94, 4
  %1104 = getelementptr inbounds i8* %p.0, i64 %.sum626
  %1105 = load i8* %1104, align 1, !tbaa !12
  %1106 = shl i8 %1105, 3
  %1107 = icmp ult i8 %1090, %1106
  br i1 %1107, label %1108, label %1118

; <label>:1108                                    ; preds = %1101
  %div96 = lshr i8 %1090, 3
  %1109 = zext i8 %div96 to i64
  %1110 = add nuw nsw i64 %1109, 5
  %.sum627 = add nsw i64 %.sum94, %1110
  %1111 = getelementptr inbounds i8* %p.0, i64 %.sum627
  %1112 = load i8* %1111, align 1, !tbaa !12
  %1113 = zext i8 %1112 to i32
  %1114 = and i8 %1090, 7
  %1115 = zext i8 %1114 to i32
  %1116 = shl i32 1, %1115
  %1117 = and i32 %1113, %1116
  %not.175 = icmp ne i32 %1117, 0
  %.166176 = xor i1 %1102, %not.175
  %.166 = zext i1 %.166176 to i32
  br label %1118

; <label>:1118                                    ; preds = %1108, %1101
  %not11.0 = phi i32 [ %1103, %1101 ], [ %.166, %1108 ]
  %1119 = icmp eq i32 %not11.0, 0
  br i1 %1119, label %1120, label %.thread

; <label>:1120                                    ; preds = %1118
  store i8 17, i8* %p.0, align 1, !tbaa !12
  br label %.thread163

; <label>:1121                                    ; preds = %1084
  %1122 = icmp eq i8 %1082, 4
  br i1 %1122, label %1123, label %.thread

; <label>:1123                                    ; preds = %1121
  %.sum173 = add nsw i64 %.sum94, 3
  %1124 = getelementptr inbounds i8* %p.0, i64 %.sum173
  %1125 = load i8* %1124, align 1, !tbaa !12
  switch i8 %1125, label %.thread [
    i8 2, label %1126
    i8 5, label %.preheader239
    i8 4, label %.preheader240
  ]

; <label>:1126                                    ; preds = %1123
  %1127 = getelementptr inbounds i8* %p2.0, i64 1
  %1128 = load i8* %1127, align 1, !tbaa !12
  %1129 = zext i8 %1128 to i32
  %1130 = shl nuw nsw i32 %1129, 3
  %.sum174 = add nsw i64 %.sum94, 5
  %1131 = getelementptr inbounds i8* %p.0, i64 %.sum174
  %1132 = load i8* %1131, align 1, !tbaa !12
  %1133 = zext i8 %1132 to i32
  %1134 = icmp ugt i32 %1130, %1133
  br i1 %1134, label %1135, label %1146

; <label>:1135                                    ; preds = %1126
  %div = lshr i8 %1132, 3
  %1136 = zext i8 %div to i64
  %1137 = add nuw nsw i64 %1136, 2
  %1138 = getelementptr inbounds i8* %p2.0, i64 %1137
  %1139 = load i8* %1138, align 1, !tbaa !12
  %1140 = zext i8 %1139 to i32
  %1141 = and i8 %1132, 7
  %1142 = zext i8 %1141 to i32
  %1143 = shl i32 1, %1142
  %1144 = and i32 %1140, %1143
  %1145 = icmp eq i32 %1144, 0
  br i1 %1145, label %1146, label %.thread

; <label>:1146                                    ; preds = %1135, %1126
  store i8 17, i8* %p.0, align 1, !tbaa !12
  br label %.thread163

.preheader240:                                    ; preds = %1123
  %1147 = getelementptr inbounds i8* %p2.0, i64 1
  %1148 = load i8* %1147, align 1, !tbaa !12
  %1149 = icmp eq i8 %1148, 0
  br i1 %1149, label %.critedge, label %.lr.ph383

.lr.ph383:                                        ; preds = %.preheader240
  %.sum620 = add nsw i64 %.sum94, 4
  %1150 = getelementptr inbounds i8* %p.0, i64 %.sum620
  %1151 = load i8* %1150, align 1, !tbaa !12
  %1152 = zext i8 %1151 to i64
  br label %1185

.preheader239:                                    ; preds = %1123
  %1153 = getelementptr inbounds i8* %p2.0, i64 1
  %1154 = load i8* %1153, align 1, !tbaa !12
  %1155 = icmp eq i8 %1154, 0
  br i1 %1155, label %1181, label %.lr.ph393

.lr.ph393:                                        ; preds = %.preheader239
  %.sum623 = add nsw i64 %.sum94, 4
  %1156 = getelementptr inbounds i8* %p.0, i64 %.sum623
  br label %1157

; <label>:1157                                    ; preds = %.lr.ph393, %1175
  %indvars.iv590 = phi i64 [ 0, %.lr.ph393 ], [ %indvars.iv.next591, %1175 ]
  %1158 = add nsw i64 %indvars.iv590, 2
  %1159 = getelementptr inbounds i8* %p2.0, i64 %1158
  %1160 = load i8* %1159, align 1, !tbaa !12
  %1161 = zext i8 %1160 to i32
  %1162 = icmp eq i8 %1160, 0
  br i1 %1162, label %1175, label %1163

; <label>:1163                                    ; preds = %1157
  %1164 = load i8* %1156, align 1, !tbaa !12
  %1165 = zext i8 %1164 to i64
  %1166 = icmp slt i64 %indvars.iv590, %1165
  br i1 %1166, label %1167, label %._crit_edge394

; <label>:1167                                    ; preds = %1163
  %1168 = add nsw i64 %indvars.iv590, 5
  %.sum624 = add i64 %.sum94, %1168
  %1169 = getelementptr inbounds i8* %p.0, i64 %.sum624
  %1170 = load i8* %1169, align 1, !tbaa !12
  %1171 = zext i8 %1170 to i32
  %1172 = xor i32 %1171, -1
  %1173 = and i32 %1161, %1172
  %1174 = icmp eq i32 %1173, 0
  br i1 %1174, label %1175, label %._crit_edge397

; <label>:1175                                    ; preds = %1157, %1167
  %indvars.iv.next591 = add nuw nsw i64 %indvars.iv590, 1
  %1176 = zext i8 %1154 to i64
  %1177 = icmp slt i64 %indvars.iv.next591, %1176
  br i1 %1177, label %1157, label %._crit_edge400

._crit_edge394:                                   ; preds = %1163
  %1178 = trunc i64 %indvars.iv590 to i32
  br label %1181

._crit_edge397:                                   ; preds = %1167
  %1179 = trunc i64 %indvars.iv590 to i32
  br label %1181

._crit_edge400:                                   ; preds = %1175
  %1180 = trunc i64 %indvars.iv.next591 to i32
  br label %1181

; <label>:1181                                    ; preds = %.preheader239, %._crit_edge400, %._crit_edge397, %._crit_edge394
  %idx.0.lcssa = phi i32 [ %1178, %._crit_edge394 ], [ %1179, %._crit_edge397 ], [ %1180, %._crit_edge400 ], [ 0, %.preheader239 ]
  %1182 = zext i8 %1154 to i32
  %1183 = icmp eq i32 %idx.0.lcssa, %1182
  br i1 %1183, label %1184, label %.thread

; <label>:1184                                    ; preds = %1181
  store i8 17, i8* %p.0, align 1, !tbaa !12
  br label %.thread163

; <label>:1185                                    ; preds = %.lr.ph383, %1196
  %indvars.iv588 = phi i64 [ 0, %.lr.ph383 ], [ %indvars.iv.next589, %1196 ]
  %1186 = icmp slt i64 %indvars.iv588, %1152
  br i1 %1186, label %1187, label %..critedge_crit_edge389

; <label>:1187                                    ; preds = %1185
  %1188 = add nuw nsw i64 %indvars.iv588, 2
  %1189 = getelementptr inbounds i8* %p2.0, i64 %1188
  %1190 = load i8* %1189, align 1, !tbaa !12
  %1191 = add nuw nsw i64 %indvars.iv588, 5
  %.sum622 = add i64 %.sum94, %1191
  %1192 = getelementptr inbounds i8* %p.0, i64 %.sum622
  %1193 = load i8* %1192, align 1, !tbaa !12
  %1194 = and i8 %1193, %1190
  %1195 = icmp eq i8 %1194, 0
  br i1 %1195, label %1196, label %..critedge_crit_edge

; <label>:1196                                    ; preds = %1187
  %indvars.iv.next589 = add nuw nsw i64 %indvars.iv588, 1
  %1197 = zext i8 %1148 to i64
  %1198 = icmp slt i64 %indvars.iv.next589, %1197
  br i1 %1198, label %1185, label %..critedge_crit_edge386

..critedge_crit_edge:                             ; preds = %1187
  %1199 = trunc i64 %indvars.iv588 to i32
  br label %.critedge

..critedge_crit_edge386:                          ; preds = %1196
  %1200 = trunc i64 %indvars.iv.next589 to i32
  br label %.critedge

..critedge_crit_edge389:                          ; preds = %1185
  %1201 = trunc i64 %indvars.iv588 to i32
  br label %.critedge

.critedge:                                        ; preds = %.preheader240, %..critedge_crit_edge389, %..critedge_crit_edge386, %..critedge_crit_edge
  %idx12.0.lcssa = phi i32 [ %1199, %..critedge_crit_edge ], [ %1200, %..critedge_crit_edge386 ], [ %1201, %..critedge_crit_edge389 ], [ 0, %.preheader240 ]
  %1202 = zext i8 %1148 to i32
  %1203 = icmp eq i32 %idx12.0.lcssa, %1202
  br i1 %1203, label %1209, label %1204

; <label>:1204                                    ; preds = %.critedge
  %.sum621 = add nsw i64 %.sum94, 4
  %1205 = getelementptr inbounds i8* %p.0, i64 %.sum621
  %1206 = load i8* %1205, align 1, !tbaa !12
  %1207 = zext i8 %1206 to i32
  %1208 = icmp eq i32 %idx12.0.lcssa, %1207
  br i1 %1208, label %1209, label %.thread

; <label>:1209                                    ; preds = %1204, %.critedge
  store i8 17, i8* %p.0, align 1, !tbaa !12
  br label %.thread163

.thread:                                          ; preds = %1123, %1135, %1094, %1099, %1118, %1204, %1181, %1121
  %.pr161 = load i8* %p.0, align 1, !tbaa !12
  %1210 = icmp eq i8 %.pr161, 17
  br i1 %1210, label %.thread163, label %1211

; <label>:1211                                    ; preds = %.thread
  store i8 13, i8* %p.0, align 1, !tbaa !12
  br label %.loopexit238

.thread163:                                       ; preds = %1080, %1184, %1209, %1146, %1098, %1120, %.thread, %443
  %1212 = add i32 %fail_stack.sroa.98.0, -3
  %1213 = zext i32 %1212 to i64
  %1214 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.0, i64 %1213
  %1215 = bitcast %union.fail_stack_elt* %1214 to i32*
  %1216 = load i32* %1215, align 4, !tbaa !15
  %1217 = add i32 %fail_stack.sroa.98.0, -4
  %1218 = zext i32 %1217 to i64
  %1219 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.0, i64 %1218
  %1220 = bitcast %union.fail_stack_elt* %1219 to i32*
  %1221 = load i32* %1220, align 4, !tbaa !15
  %1222 = sext i32 %1221 to i64
  %1223 = icmp ult i32 %1216, %1221
  br i1 %1223, label %.loopexit238, label %.lr.ph405

.lr.ph405:                                        ; preds = %.thread163
  %1224 = sext i32 %1216 to i64
  br label %1225

; <label>:1225                                    ; preds = %.lr.ph405, %1225
  %this_reg13.0404 = phi i64 [ %1224, %.lr.ph405 ], [ %1245, %1225 ]
  %fail_stack.sroa.98.4403 = phi i32 [ %1217, %.lr.ph405 ], [ %1240, %1225 ]
  %1226 = getelementptr inbounds %union.register_info_type* %reg_info_dummy.0, i64 %this_reg13.0404, i32 0
  %1227 = add i32 %fail_stack.sroa.98.4403, -1
  %1228 = zext i32 %1227 to i64
  %1229 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.0, i64 %1228
  %1230 = bitcast %union.fail_stack_elt* %1229 to i64*
  %1231 = load i64* %1230, align 8
  %1232 = bitcast %union.fail_stack_elt* %1226 to i64*
  store i64 %1231, i64* %1232, align 8
  %1233 = add i32 %fail_stack.sroa.98.4403, -2
  %1234 = zext i32 %1233 to i64
  %1235 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.0, i64 %1234, i32 0
  %1236 = bitcast i8** %1235 to i64*
  %1237 = load i64* %1236, align 8, !tbaa !13
  %1238 = getelementptr inbounds i8** %reg_dummy.0, i64 %this_reg13.0404
  %1239 = bitcast i8** %1238 to i64*
  store i64 %1237, i64* %1239, align 8, !tbaa !13
  %1240 = add i32 %fail_stack.sroa.98.4403, -3
  %1241 = zext i32 %1240 to i64
  %1242 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.0, i64 %1241, i32 0
  %1243 = bitcast i8** %1242 to i64*
  %1244 = load i64* %1243, align 8, !tbaa !13
  store i64 %1244, i64* %1239, align 8, !tbaa !13
  %1245 = add i64 %this_reg13.0404, -1
  %1246 = icmp ult i64 %1245, %1222
  br i1 %1246, label %.loopexit238, label %1225

.loopexit238:                                     ; preds = %1225, %.thread163, %443, %1211, %._crit_edge380, %1396, %443
  %fail_stack.sroa.0.6 = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.0, %1396 ], [ %fail_stack.sroa.0.7, %._crit_edge380 ], [ %fail_stack.sroa.0.0, %443 ], [ %fail_stack.sroa.0.0, %443 ], [ %fail_stack.sroa.0.0, %1211 ], [ %fail_stack.sroa.0.0, %.thread163 ], [ %fail_stack.sroa.0.0, %1225 ]
  %set_regs_matched_done.4 = phi i32 [ %set_regs_matched_done.0, %1396 ], [ %set_regs_matched_done.0, %._crit_edge380 ], [ %set_regs_matched_done.0, %443 ], [ %set_regs_matched_done.0, %443 ], [ %set_regs_matched_done.0, %1211 ], [ 0, %.thread163 ], [ 0, %1225 ]
  %fail_stack.sroa.72.7 = phi i32 [ %fail_stack.sroa.72.0, %1396 ], [ %fail_stack.sroa.72.8, %._crit_edge380 ], [ %fail_stack.sroa.72.0, %443 ], [ %fail_stack.sroa.72.0, %443 ], [ %fail_stack.sroa.72.0, %1211 ], [ %fail_stack.sroa.72.0, %.thread163 ], [ %fail_stack.sroa.72.0, %1225 ]
  %fail_stack.sroa.98.5 = phi i32 [ %fail_stack.sroa.98.0, %1396 ], [ %1308, %._crit_edge380 ], [ %fail_stack.sroa.98.0, %443 ], [ %fail_stack.sroa.98.0, %443 ], [ %fail_stack.sroa.98.0, %1211 ], [ %1217, %.thread163 ], [ %1240, %1225 ]
  %1247 = load i8* %444, align 1, !tbaa !12
  %1248 = zext i8 %1247 to i32
  %1249 = getelementptr inbounds i8* %p.0, i64 2
  %1250 = load i8* %1249, align 1, !tbaa !12
  %1251 = sext i8 %1250 to i32
  %1252 = shl nsw i32 %1251, 8
  %1253 = or i32 %1252, %1248
  %addconv170 = add nsw i32 %1253, 3
  %.sum169 = sext i32 %addconv170 to i64
  %1254 = getelementptr inbounds i8* %p.0, i64 %.sum169
  br label %.backedge257

; <label>:1255                                    ; preds = %.preheader242, %1264
  %fail_stack.sroa.0.7 = phi %union.fail_stack_elt* [ %1270, %1264 ], [ %fail_stack.sroa.0.0, %.preheader242 ]
  %fail_stack.sroa.72.8 = phi i32 [ %fail_stack.sroa.72.8., %1264 ], [ %fail_stack.sroa.72.0, %.preheader242 ]
  %1256 = sub i32 %fail_stack.sroa.72.8, %fail_stack.sroa.98.0
  %1257 = zext i32 %1256 to i64
  %1258 = icmp ult i64 %1257, %452
  br i1 %1258, label %1260, label %.preheader241

.preheader241:                                    ; preds = %1255
  %1259 = icmp ult i64 %highest_active_reg.0, %lowest_active_reg.0
  br i1 %1259, label %._crit_edge380, label %.lr.ph379

; <label>:1260                                    ; preds = %1255
  %1261 = load i32* @re_max_failures, align 4, !tbaa !15
  %1262 = mul nsw i32 %1261, 19
  %1263 = icmp ugt i32 %fail_stack.sroa.72.8, %1262
  br i1 %1263, label %.loopexit220, label %1264

; <label>:1264                                    ; preds = %1260
  %1265 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.7 to i8*
  %1266 = shl i32 %fail_stack.sroa.72.8, 1
  %1267 = zext i32 %1266 to i64
  %1268 = shl nuw nsw i64 %1267, 3
  %1269 = tail call i8* @realloc(i8* %1265, i64 %1268) #7
  %1270 = bitcast i8* %1269 to %union.fail_stack_elt*
  %1271 = icmp eq i8* %1269, null
  %fail_stack.sroa.72.8. = select i1 %1271, i32 %fail_stack.sroa.72.8, i32 %1266
  br i1 %1271, label %.loopexit220, label %1255

.lr.ph379:                                        ; preds = %.preheader241, %.lr.ph379
  %this_reg15.0378 = phi i64 [ %1293, %.lr.ph379 ], [ %lowest_active_reg.0, %.preheader241 ]
  %fail_stack.sroa.98.6377 = phi i32 [ %1286, %.lr.ph379 ], [ %fail_stack.sroa.98.0, %.preheader241 ]
  %1272 = getelementptr inbounds i8** %regstart.0, i64 %this_reg15.0378
  %1273 = bitcast i8** %1272 to i64*
  %1274 = load i64* %1273, align 8, !tbaa !13
  %1275 = add i32 %fail_stack.sroa.98.6377, 1
  %1276 = zext i32 %fail_stack.sroa.98.6377 to i64
  %1277 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.7, i64 %1276
  %1278 = bitcast %union.fail_stack_elt* %1277 to i64*
  store i64 %1274, i64* %1278, align 8, !tbaa !13
  %1279 = getelementptr inbounds i8** %regend.0, i64 %this_reg15.0378
  %1280 = bitcast i8** %1279 to i64*
  %1281 = load i64* %1280, align 8, !tbaa !13
  %1282 = add i32 %fail_stack.sroa.98.6377, 2
  %1283 = zext i32 %1275 to i64
  %1284 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.7, i64 %1283
  %1285 = bitcast %union.fail_stack_elt* %1284 to i64*
  store i64 %1281, i64* %1285, align 8, !tbaa !13
  %1286 = add i32 %fail_stack.sroa.98.6377, 3
  %1287 = zext i32 %1282 to i64
  %1288 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.7, i64 %1287
  %1289 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %this_reg15.0378, i32 0
  %1290 = bitcast %union.fail_stack_elt* %1289 to i64*
  %1291 = load i64* %1290, align 8
  %1292 = bitcast %union.fail_stack_elt* %1288 to i64*
  store i64 %1291, i64* %1292, align 8
  %1293 = add i64 %this_reg15.0378, 1
  %1294 = icmp ugt i64 %1293, %highest_active_reg.0
  br i1 %1294, label %._crit_edge380, label %.lr.ph379

._crit_edge380:                                   ; preds = %.lr.ph379, %.preheader241
  %fail_stack.sroa.98.6.lcssa = phi i32 [ %fail_stack.sroa.98.0, %.preheader241 ], [ %1286, %.lr.ph379 ]
  %1295 = trunc i64 %lowest_active_reg.0 to i32
  %1296 = add i32 %fail_stack.sroa.98.6.lcssa, 1
  %1297 = zext i32 %fail_stack.sroa.98.6.lcssa to i64
  %1298 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.7, i64 %1297
  %1299 = bitcast %union.fail_stack_elt* %1298 to i32*
  store i32 %1295, i32* %1299, align 4, !tbaa !15
  %1300 = trunc i64 %highest_active_reg.0 to i32
  %1301 = add i32 %fail_stack.sroa.98.6.lcssa, 2
  %1302 = zext i32 %1296 to i64
  %1303 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.7, i64 %1302
  %1304 = bitcast %union.fail_stack_elt* %1303 to i32*
  store i32 %1300, i32* %1304, align 4, !tbaa !15
  %1305 = add i32 %fail_stack.sroa.98.6.lcssa, 3
  %1306 = zext i32 %1301 to i64
  %1307 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.7, i64 %1306, i32 0
  store i8* null, i8** %1307, align 8, !tbaa !13
  %1308 = add i32 %fail_stack.sroa.98.6.lcssa, 4
  %1309 = zext i32 %1305 to i64
  %1310 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.7, i64 %1309, i32 0
  store i8* null, i8** %1310, align 8, !tbaa !13
  br label %.loopexit238

; <label>:1311                                    ; preds = %.preheader245, %1320
  %fail_stack.sroa.0.8 = phi %union.fail_stack_elt* [ %1326, %1320 ], [ %fail_stack.sroa.0.0, %.preheader245 ]
  %fail_stack.sroa.72.10 = phi i32 [ %fail_stack.sroa.72.10., %1320 ], [ %fail_stack.sroa.72.0, %.preheader245 ]
  %1312 = sub i32 %fail_stack.sroa.72.10, %fail_stack.sroa.98.0
  %1313 = zext i32 %1312 to i64
  %1314 = icmp ult i64 %1313, %449
  br i1 %1314, label %1316, label %.preheader244

.preheader244:                                    ; preds = %1311
  %1315 = icmp ult i64 %highest_active_reg.0, %lowest_active_reg.0
  br i1 %1315, label %._crit_edge376, label %.lr.ph375

; <label>:1316                                    ; preds = %1311
  %1317 = load i32* @re_max_failures, align 4, !tbaa !15
  %1318 = mul nsw i32 %1317, 19
  %1319 = icmp ugt i32 %fail_stack.sroa.72.10, %1318
  br i1 %1319, label %.loopexit220, label %1320

; <label>:1320                                    ; preds = %1316
  %1321 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.8 to i8*
  %1322 = shl i32 %fail_stack.sroa.72.10, 1
  %1323 = zext i32 %1322 to i64
  %1324 = shl nuw nsw i64 %1323, 3
  %1325 = tail call i8* @realloc(i8* %1321, i64 %1324) #7
  %1326 = bitcast i8* %1325 to %union.fail_stack_elt*
  %1327 = icmp eq i8* %1325, null
  %fail_stack.sroa.72.10. = select i1 %1327, i32 %fail_stack.sroa.72.10, i32 %1322
  br i1 %1327, label %.loopexit220, label %1311

.lr.ph375:                                        ; preds = %.preheader244, %.lr.ph375
  %this_reg17.0374 = phi i64 [ %1349, %.lr.ph375 ], [ %lowest_active_reg.0, %.preheader244 ]
  %fail_stack.sroa.98.7373 = phi i32 [ %1342, %.lr.ph375 ], [ %fail_stack.sroa.98.0, %.preheader244 ]
  %1328 = getelementptr inbounds i8** %regstart.0, i64 %this_reg17.0374
  %1329 = bitcast i8** %1328 to i64*
  %1330 = load i64* %1329, align 8, !tbaa !13
  %1331 = add i32 %fail_stack.sroa.98.7373, 1
  %1332 = zext i32 %fail_stack.sroa.98.7373 to i64
  %1333 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.8, i64 %1332
  %1334 = bitcast %union.fail_stack_elt* %1333 to i64*
  store i64 %1330, i64* %1334, align 8, !tbaa !13
  %1335 = getelementptr inbounds i8** %regend.0, i64 %this_reg17.0374
  %1336 = bitcast i8** %1335 to i64*
  %1337 = load i64* %1336, align 8, !tbaa !13
  %1338 = add i32 %fail_stack.sroa.98.7373, 2
  %1339 = zext i32 %1331 to i64
  %1340 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.8, i64 %1339
  %1341 = bitcast %union.fail_stack_elt* %1340 to i64*
  store i64 %1337, i64* %1341, align 8, !tbaa !13
  %1342 = add i32 %fail_stack.sroa.98.7373, 3
  %1343 = zext i32 %1338 to i64
  %1344 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.8, i64 %1343
  %1345 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %this_reg17.0374, i32 0
  %1346 = bitcast %union.fail_stack_elt* %1345 to i64*
  %1347 = load i64* %1346, align 8
  %1348 = bitcast %union.fail_stack_elt* %1344 to i64*
  store i64 %1347, i64* %1348, align 8
  %1349 = add i64 %this_reg17.0374, 1
  %1350 = icmp ugt i64 %1349, %highest_active_reg.0
  br i1 %1350, label %._crit_edge376, label %.lr.ph375

._crit_edge376:                                   ; preds = %.lr.ph375, %.preheader244
  %fail_stack.sroa.98.7.lcssa = phi i32 [ %fail_stack.sroa.98.0, %.preheader244 ], [ %1342, %.lr.ph375 ]
  %1351 = trunc i64 %lowest_active_reg.0 to i32
  %1352 = add i32 %fail_stack.sroa.98.7.lcssa, 1
  %1353 = zext i32 %fail_stack.sroa.98.7.lcssa to i64
  %1354 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.8, i64 %1353
  %1355 = bitcast %union.fail_stack_elt* %1354 to i32*
  store i32 %1351, i32* %1355, align 4, !tbaa !15
  %1356 = trunc i64 %highest_active_reg.0 to i32
  %1357 = add i32 %fail_stack.sroa.98.7.lcssa, 2
  %1358 = zext i32 %1352 to i64
  %1359 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.8, i64 %1358
  %1360 = bitcast %union.fail_stack_elt* %1359 to i32*
  store i32 %1356, i32* %1360, align 4, !tbaa !15
  %1361 = add i32 %fail_stack.sroa.98.7.lcssa, 3
  %1362 = zext i32 %1357 to i64
  %1363 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.8, i64 %1362, i32 0
  store i8* null, i8** %1363, align 8, !tbaa !13
  %1364 = add i32 %fail_stack.sroa.98.7.lcssa, 4
  %1365 = zext i32 %1361 to i64
  %1366 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.8, i64 %1365, i32 0
  store i8* null, i8** %1366, align 8, !tbaa !13
  br label %.backedge257

; <label>:1367                                    ; preds = %443
  %1368 = getelementptr inbounds i8* %p.0, i64 3
  %1369 = load i8* %1368, align 1, !tbaa !12
  %1370 = zext i8 %1369 to i32
  %1371 = getelementptr inbounds i8* %p.0, i64 4
  %1372 = load i8* %1371, align 1, !tbaa !12
  %1373 = sext i8 %1372 to i32
  %1374 = shl nsw i32 %1373, 8
  %1375 = or i32 %1374, %1370
  %1376 = icmp sgt i32 %1375, 0
  br i1 %1376, label %1377, label %1383

; <label>:1377                                    ; preds = %1367
  %1378 = add nsw i32 %1375, -1
  %1379 = trunc i32 %1378 to i8
  store i8 %1379, i8* %1368, align 1, !tbaa !12
  %1380 = lshr i32 %1378, 8
  %1381 = trunc i32 %1380 to i8
  store i8 %1381, i8* %1371, align 1, !tbaa !12
  %1382 = getelementptr inbounds i8* %p.0, i64 5
  br label %.backedge257

; <label>:1383                                    ; preds = %1367
  %1384 = icmp eq i32 %1375, 0
  br i1 %1384, label %1385, label %.backedge257

; <label>:1385                                    ; preds = %1383
  store i8 0, i8* %1368, align 1, !tbaa !12
  store i8 0, i8* %1371, align 1, !tbaa !12
  br label %966

; <label>:1386                                    ; preds = %443
  %1387 = getelementptr inbounds i8* %p.0, i64 3
  %1388 = load i8* %1387, align 1, !tbaa !12
  %1389 = zext i8 %1388 to i32
  %1390 = getelementptr inbounds i8* %p.0, i64 4
  %1391 = load i8* %1390, align 1, !tbaa !12
  %1392 = sext i8 %1391 to i32
  %1393 = shl nsw i32 %1392, 8
  %1394 = or i32 %1393, %1389
  %1395 = icmp eq i32 %1394, 0
  br i1 %1395, label %1401, label %1396

; <label>:1396                                    ; preds = %1386
  %1397 = add nsw i32 %1394, -1
  %1398 = trunc i32 %1397 to i8
  store i8 %1398, i8* %1387, align 1, !tbaa !12
  %1399 = lshr i32 %1397, 8
  %1400 = trunc i32 %1399 to i8
  store i8 %1400, i8* %1390, align 1, !tbaa !12
  br label %.loopexit238

; <label>:1401                                    ; preds = %1386
  %1402 = getelementptr inbounds i8* %p.0, i64 5
  br label %.backedge257

; <label>:1403                                    ; preds = %443
  %1404 = load i8* %444, align 1, !tbaa !12
  %1405 = zext i8 %1404 to i32
  %1406 = getelementptr inbounds i8* %p.0, i64 2
  %1407 = load i8* %1406, align 1, !tbaa !12
  %1408 = sext i8 %1407 to i32
  %1409 = shl nsw i32 %1408, 8
  %1410 = or i32 %1409, %1405
  %1411 = getelementptr inbounds i8* %p.0, i64 3
  %addconv89 = add nsw i32 %1410, 3
  %.sum88 = sext i32 %addconv89 to i64
  %1412 = getelementptr inbounds i8* %p.0, i64 %.sum88
  store i8* %1412, i8** %p1, align 8, !tbaa !13
  %1413 = load i8* %1411, align 1, !tbaa !12
  %1414 = getelementptr inbounds i8* %p.0, i64 4
  %1415 = load i8* %1414, align 1, !tbaa !12
  %1416 = getelementptr inbounds i8* %p.0, i64 5
  store i8 %1413, i8* %1412, align 1, !tbaa !12
  %1417 = load i8** %p1, align 8, !tbaa !13
  %1418 = getelementptr inbounds i8* %1417, i64 1
  store i8 %1415, i8* %1418, align 1, !tbaa !12
  br label %.backedge257

; <label>:1419                                    ; preds = %443
  %notlhs167 = icmp eq i8* %d.0, %135
  %or.cond55.not = or i1 %notrhs168, %notlhs167
  %1420 = icmp eq i8* %d.0, %119
  %or.cond136 = or i1 %1420, %or.cond55.not
  br i1 %or.cond136, label %.backedge257, label %1421

; <label>:1421                                    ; preds = %1419
  %1422 = getelementptr inbounds i8* %d.0, i64 -1
  %1423 = icmp eq i8* %1422, %117
  br i1 %1423, label %1426, label %1424

; <label>:1424                                    ; preds = %1421
  %1425 = icmp eq i8* %d.0, %string1.string2
  %.647 = select i1 %1425, i8* %139, i8* %1422
  br label %1426

; <label>:1426                                    ; preds = %1424, %1421
  %.sink56.sink.in = phi i8* [ %string1.string2, %1421 ], [ %.647, %1424 ]
  %.sink56.sink = load i8* %.sink56.sink.in, align 1
  %1427 = sext i8 %.sink56.sink to i64
  %1428 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1427
  %1429 = load i8* %1428, align 1, !tbaa !12
  %1430 = icmp eq i8 %1429, 1
  %1431 = icmp eq i8* %d.0, %117
  br i1 %1431, label %1434, label %1432

; <label>:1432                                    ; preds = %1426
  %1433 = icmp eq i8* %d.0, %138
  %.d.0 = select i1 %1433, i8* %139, i8* %d.0
  br label %1434

; <label>:1434                                    ; preds = %1432, %1426
  %.sink57.sink.in = phi i8* [ %string1.string2, %1426 ], [ %.d.0, %1432 ]
  %.sink57.sink = load i8* %.sink57.sink.in, align 1
  %1435 = sext i8 %.sink57.sink to i64
  %1436 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1435
  %1437 = load i8* %1436, align 1, !tbaa !12
  %1438 = icmp eq i8 %1437, 1
  %1439 = xor i1 %1430, %1438
  br i1 %1439, label %.backedge257, label %bcmp_translate.exit.thread158.preheader

; <label>:1440                                    ; preds = %443
  %notlhs = icmp eq i8* %d.0, %135
  %or.cond59.not = or i1 %notrhs168, %notlhs
  %1441 = icmp eq i8* %d.0, %119
  %or.cond137 = or i1 %1441, %or.cond59.not
  br i1 %or.cond137, label %bcmp_translate.exit.thread158.preheader, label %1442

; <label>:1442                                    ; preds = %1440
  %1443 = getelementptr inbounds i8* %d.0, i64 -1
  %1444 = icmp eq i8* %1443, %117
  br i1 %1444, label %1447, label %1445

; <label>:1445                                    ; preds = %1442
  %1446 = icmp eq i8* %d.0, %string1.string2
  %.648 = select i1 %1446, i8* %139, i8* %1443
  br label %1447

; <label>:1447                                    ; preds = %1445, %1442
  %.sink60.sink.in = phi i8* [ %string1.string2, %1442 ], [ %.648, %1445 ]
  %.sink60.sink = load i8* %.sink60.sink.in, align 1
  %1448 = sext i8 %.sink60.sink to i64
  %1449 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1448
  %1450 = load i8* %1449, align 1, !tbaa !12
  %1451 = icmp eq i8 %1450, 1
  %1452 = icmp eq i8* %d.0, %117
  br i1 %1452, label %1455, label %1453

; <label>:1453                                    ; preds = %1447
  %1454 = icmp eq i8* %d.0, %138
  %.d.0649 = select i1 %1454, i8* %139, i8* %d.0
  br label %1455

; <label>:1455                                    ; preds = %1453, %1447
  %.sink61.sink.in = phi i8* [ %string1.string2, %1447 ], [ %.d.0649, %1453 ]
  %.sink61.sink = load i8* %.sink61.sink.in, align 1
  %1456 = sext i8 %.sink61.sink to i64
  %1457 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1456
  %1458 = load i8* %1457, align 1, !tbaa !12
  %1459 = icmp eq i8 %1458, 1
  %1460 = xor i1 %1451, %1459
  br i1 %1460, label %bcmp_translate.exit.thread158.preheader, label %.backedge257

; <label>:1461                                    ; preds = %443
  %1462 = icmp eq i8* %d.0, %117
  br i1 %1462, label %1465, label %1463

; <label>:1463                                    ; preds = %1461
  %1464 = icmp eq i8* %d.0, %138
  %.d.0650 = select i1 %1464, i8* %139, i8* %d.0
  br label %1465

; <label>:1465                                    ; preds = %1463, %1461
  %.sink62.sink.in = phi i8* [ %string1.string2, %1461 ], [ %.d.0650, %1463 ]
  %.sink62.sink = load i8* %.sink62.sink.in, align 1
  %1466 = sext i8 %.sink62.sink to i64
  %1467 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1466
  %1468 = load i8* %1467, align 1, !tbaa !12
  %1469 = icmp eq i8 %1468, 1
  br i1 %1469, label %1470, label %bcmp_translate.exit.thread158.preheader

; <label>:1470                                    ; preds = %1465
  %1471 = icmp ne i8* %d.0, %135
  %or.cond64 = and i1 %136, %1471
  br i1 %or.cond64, label %1472, label %.backedge257

; <label>:1472                                    ; preds = %1470
  %1473 = getelementptr inbounds i8* %d.0, i64 -1
  %1474 = icmp eq i8* %1473, %117
  br i1 %1474, label %1477, label %1475

; <label>:1475                                    ; preds = %1472
  %1476 = icmp eq i8* %d.0, %string1.string2
  %.651 = select i1 %1476, i8* %139, i8* %1473
  br label %1477

; <label>:1477                                    ; preds = %1475, %1472
  %.sink65.sink.in = phi i8* [ %string1.string2, %1472 ], [ %.651, %1475 ]
  %.sink65.sink = load i8* %.sink65.sink.in, align 1
  %1478 = sext i8 %.sink65.sink to i64
  %1479 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1478
  %1480 = load i8* %1479, align 1, !tbaa !12
  %1481 = icmp eq i8 %1480, 1
  br i1 %1481, label %bcmp_translate.exit.thread158.preheader, label %.backedge257

; <label>:1482                                    ; preds = %443
  %1483 = icmp ne i8* %d.0, %135
  %or.cond67 = and i1 %136, %1483
  br i1 %or.cond67, label %1484, label %bcmp_translate.exit.thread158.preheader

; <label>:1484                                    ; preds = %1482
  %1485 = getelementptr inbounds i8* %d.0, i64 -1
  %1486 = icmp eq i8* %1485, %117
  br i1 %1486, label %1489, label %1487

; <label>:1487                                    ; preds = %1484
  %1488 = icmp eq i8* %d.0, %string1.string2
  %.652 = select i1 %1488, i8* %139, i8* %1485
  br label %1489

; <label>:1489                                    ; preds = %1487, %1484
  %.sink68.sink.in = phi i8* [ %string1.string2, %1484 ], [ %.652, %1487 ]
  %.sink68.sink = load i8* %.sink68.sink.in, align 1
  %1490 = sext i8 %.sink68.sink to i64
  %1491 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1490
  %1492 = load i8* %1491, align 1, !tbaa !12
  %1493 = icmp eq i8 %1492, 1
  br i1 %1493, label %1494, label %bcmp_translate.exit.thread158.preheader

; <label>:1494                                    ; preds = %1489
  %1495 = icmp eq i8* %d.0, %117
  br i1 %1495, label %1498, label %1496

; <label>:1496                                    ; preds = %1494
  %1497 = icmp eq i8* %d.0, %138
  %.d.0653 = select i1 %1497, i8* %139, i8* %d.0
  br label %1498

; <label>:1498                                    ; preds = %1496, %1494
  %.sink69.sink.in = phi i8* [ %string1.string2, %1494 ], [ %.d.0653, %1496 ]
  %.sink69.sink = load i8* %.sink69.sink.in, align 1
  %1499 = sext i8 %.sink69.sink to i64
  %1500 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1499
  %1501 = load i8* %1500, align 1, !tbaa !12
  %1502 = icmp ne i8 %1501, 1
  %1503 = icmp eq i8* %d.0, %119
  %or.cond138 = or i1 %1503, %1502
  br i1 %or.cond138, label %.backedge257, label %bcmp_translate.exit.thread158.preheader

.preheader249:                                    ; preds = %443, %1505
  %dend.9 = phi i8* [ %end_match_2.0, %1505 ], [ %dend.0, %443 ]
  %d.9 = phi i8* [ %string1.string2, %1505 ], [ %d.0, %443 ]
  %1504 = icmp eq i8* %d.9, %dend.9
  br i1 %1504, label %1505, label %1507

; <label>:1505                                    ; preds = %.preheader249
  %1506 = icmp eq i8* %dend.9, %end_match_2.0
  br i1 %1506, label %bcmp_translate.exit.thread158.preheader, label %.preheader249

; <label>:1507                                    ; preds = %.preheader249
  %1508 = icmp eq i8* %d.9, %117
  br i1 %1508, label %1511, label %1509

; <label>:1509                                    ; preds = %1507
  %1510 = icmp eq i8* %d.9, %138
  %.d.9 = select i1 %1510, i8* %139, i8* %d.9
  br label %1511

; <label>:1511                                    ; preds = %1509, %1507
  %.sink70.sink.in = phi i8* [ %string1.string2, %1507 ], [ %.d.9, %1509 ]
  %.sink70.sink = load i8* %.sink70.sink.in, align 1
  %1512 = sext i8 %.sink70.sink to i64
  %1513 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1512
  %1514 = load i8* %1513, align 1, !tbaa !12
  %1515 = icmp eq i8 %1514, 1
  br i1 %1515, label %1516, label %bcmp_translate.exit.thread158.preheader

; <label>:1516                                    ; preds = %1511
  %1517 = icmp eq i32 %set_regs_matched_done.0, 0
  br i1 %1517, label %.preheader247, label %.loopexit248

.preheader247:                                    ; preds = %1516
  %1518 = icmp ult i64 %highest_active_reg.0, %lowest_active_reg.0
  br i1 %1518, label %.loopexit248, label %.lr.ph372

.lr.ph372:                                        ; preds = %.preheader247, %.lr.ph372
  %r20.0371 = phi i64 [ %1523, %.lr.ph372 ], [ %lowest_active_reg.0, %.preheader247 ]
  %1519 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %r20.0371
  %1520 = bitcast %union.register_info_type* %1519 to i8*
  %1521 = load i8* %1520, align 4
  %1522 = or i8 %1521, 24
  store i8 %1522, i8* %1520, align 4
  %1523 = add i64 %r20.0371, 1
  %1524 = icmp ugt i64 %1523, %highest_active_reg.0
  br i1 %1524, label %.loopexit248, label %.lr.ph372

.loopexit248:                                     ; preds = %.lr.ph372, %.preheader247, %1516
  %set_regs_matched_done.5 = phi i32 [ %set_regs_matched_done.0, %1516 ], [ 1, %.preheader247 ], [ 1, %.lr.ph372 ]
  %1525 = getelementptr inbounds i8* %d.9, i64 1
  br label %.backedge257

.preheader253:                                    ; preds = %443, %1527
  %dend.10 = phi i8* [ %end_match_2.0, %1527 ], [ %dend.0, %443 ]
  %d.10 = phi i8* [ %string1.string2, %1527 ], [ %d.0, %443 ]
  %1526 = icmp eq i8* %d.10, %dend.10
  br i1 %1526, label %1527, label %1529

; <label>:1527                                    ; preds = %.preheader253
  %1528 = icmp eq i8* %dend.10, %end_match_2.0
  br i1 %1528, label %bcmp_translate.exit.thread158.preheader, label %.preheader253

; <label>:1529                                    ; preds = %.preheader253
  %1530 = icmp eq i8* %d.10, %117
  br i1 %1530, label %1533, label %1531

; <label>:1531                                    ; preds = %1529
  %1532 = icmp eq i8* %d.10, %138
  %.d.10 = select i1 %1532, i8* %139, i8* %d.10
  br label %1533

; <label>:1533                                    ; preds = %1531, %1529
  %.sink71.sink.in = phi i8* [ %string1.string2, %1529 ], [ %.d.10, %1531 ]
  %.sink71.sink = load i8* %.sink71.sink.in, align 1
  %1534 = sext i8 %.sink71.sink to i64
  %1535 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %1534
  %1536 = load i8* %1535, align 1, !tbaa !12
  %1537 = icmp eq i8 %1536, 1
  br i1 %1537, label %bcmp_translate.exit.thread158.preheader, label %1538

; <label>:1538                                    ; preds = %1533
  %1539 = icmp eq i32 %set_regs_matched_done.0, 0
  br i1 %1539, label %.preheader251, label %.loopexit252

.preheader251:                                    ; preds = %1538
  %1540 = icmp ult i64 %highest_active_reg.0, %lowest_active_reg.0
  br i1 %1540, label %.loopexit252, label %.lr.ph370

.lr.ph370:                                        ; preds = %.preheader251, %.lr.ph370
  %r21.0369 = phi i64 [ %1545, %.lr.ph370 ], [ %lowest_active_reg.0, %.preheader251 ]
  %1541 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %r21.0369
  %1542 = bitcast %union.register_info_type* %1541 to i8*
  %1543 = load i8* %1542, align 4
  %1544 = or i8 %1543, 24
  store i8 %1544, i8* %1542, align 4
  %1545 = add i64 %r21.0369, 1
  %1546 = icmp ugt i64 %1545, %highest_active_reg.0
  br i1 %1546, label %.loopexit252, label %.lr.ph370

.loopexit252:                                     ; preds = %.lr.ph370, %.preheader251, %1538
  %set_regs_matched_done.6 = phi i32 [ %set_regs_matched_done.0, %1538 ], [ 1, %.preheader251 ], [ 1, %.lr.ph370 ]
  %1547 = getelementptr inbounds i8* %d.10, i64 1
  br label %.backedge257

; <label>:1548                                    ; preds = %443
  tail call void @abort() #9
  unreachable

bcmp_translate.exit.thread158.preheader:          ; preds = %1527, %1505, %535, %495, %461, %477, %.lr.ph437, %459, %475, %855, %829, %.lr.ph.i, %779, %518, %507, %806, %799, %874, %878, %887, %890, %893, %895, %1434, %1455, %1477, %1465, %1482, %1489, %1511, %1533, %883, %870, %558, %1440, %1498
  %fail_stack.sroa.0.9.ph = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.0, %1498 ], [ %fail_stack.sroa.0.0, %507 ], [ %fail_stack.sroa.0.0, %518 ], [ %fail_stack.sroa.0.0, %558 ], [ %fail_stack.sroa.0.3, %779 ], [ %fail_stack.sroa.0.0, %806 ], [ %fail_stack.sroa.0.0, %799 ], [ %fail_stack.sroa.0.0, %870 ], [ %fail_stack.sroa.0.0, %874 ], [ %fail_stack.sroa.0.0, %878 ], [ %fail_stack.sroa.0.0, %887 ], [ %fail_stack.sroa.0.0, %890 ], [ %fail_stack.sroa.0.0, %883 ], [ %fail_stack.sroa.0.0, %893 ], [ %fail_stack.sroa.0.0, %895 ], [ %fail_stack.sroa.0.0, %1434 ], [ %fail_stack.sroa.0.0, %1440 ], [ %fail_stack.sroa.0.0, %1455 ], [ %fail_stack.sroa.0.0, %1465 ], [ %fail_stack.sroa.0.0, %1477 ], [ %fail_stack.sroa.0.0, %1482 ], [ %fail_stack.sroa.0.0, %1489 ], [ %fail_stack.sroa.0.0, %1511 ], [ %fail_stack.sroa.0.0, %1533 ], [ %fail_stack.sroa.0.0, %.lr.ph.i ], [ %fail_stack.sroa.0.0, %829 ], [ %fail_stack.sroa.0.0, %855 ], [ %fail_stack.sroa.0.0, %475 ], [ %fail_stack.sroa.0.0, %459 ], [ %fail_stack.sroa.0.0, %.lr.ph437 ], [ %fail_stack.sroa.0.0, %477 ], [ %fail_stack.sroa.0.0, %461 ], [ %fail_stack.sroa.0.0, %495 ], [ %fail_stack.sroa.0.0, %535 ], [ %fail_stack.sroa.0.0, %1505 ], [ %fail_stack.sroa.0.0, %1527 ]
  %best_regs_set.1.ph = phi i32 [ %best_regs_set.0, %1498 ], [ %best_regs_set.0, %507 ], [ %best_regs_set.0, %518 ], [ %best_regs_set.0, %558 ], [ %best_regs_set.0, %779 ], [ %best_regs_set.0, %806 ], [ %best_regs_set.0, %799 ], [ %best_regs_set.0, %870 ], [ %best_regs_set.0, %874 ], [ %best_regs_set.0, %878 ], [ %best_regs_set.0, %887 ], [ %best_regs_set.0, %890 ], [ %best_regs_set.0, %883 ], [ %best_regs_set.0, %893 ], [ %best_regs_set.0, %895 ], [ %best_regs_set.0, %1434 ], [ %best_regs_set.0, %1440 ], [ %best_regs_set.0, %1455 ], [ %best_regs_set.0, %1465 ], [ %best_regs_set.0, %1477 ], [ %best_regs_set.0, %1482 ], [ %best_regs_set.0, %1489 ], [ %best_regs_set.0, %1511 ], [ %best_regs_set.0, %1533 ], [ %best_regs_set.0, %.lr.ph.i ], [ %best_regs_set.0, %829 ], [ %best_regs_set.0, %855 ], [ %best_regs_set.0, %475 ], [ %best_regs_set.0, %459 ], [ 1, %.lr.ph437 ], [ %best_regs_set.0, %477 ], [ %best_regs_set.0, %461 ], [ %best_regs_set.0, %495 ], [ %best_regs_set.0, %535 ], [ %best_regs_set.0, %1505 ], [ %best_regs_set.0, %1527 ]
  %match_end.2.ph = phi i8* [ %match_end.0, %1498 ], [ %match_end.0, %507 ], [ %match_end.0, %518 ], [ %match_end.0, %558 ], [ %match_end.0, %779 ], [ %match_end.0, %806 ], [ %match_end.0, %799 ], [ %match_end.0, %870 ], [ %match_end.0, %874 ], [ %match_end.0, %878 ], [ %match_end.0, %887 ], [ %match_end.0, %890 ], [ %match_end.0, %883 ], [ %match_end.0, %893 ], [ %match_end.0, %895 ], [ %match_end.0, %1434 ], [ %match_end.0, %1440 ], [ %match_end.0, %1455 ], [ %match_end.0, %1465 ], [ %match_end.0, %1477 ], [ %match_end.0, %1482 ], [ %match_end.0, %1489 ], [ %match_end.0, %1511 ], [ %match_end.0, %1533 ], [ %match_end.0, %.lr.ph.i ], [ %match_end.0, %829 ], [ %match_end.0, %855 ], [ %match_end.0, %475 ], [ %match_end.0, %459 ], [ %d.0, %.lr.ph437 ], [ %match_end.0, %477 ], [ %match_end.0, %461 ], [ %match_end.0, %495 ], [ %match_end.0, %535 ], [ %match_end.0, %1505 ], [ %match_end.0, %1527 ]
  %fail_stack.sroa.72.12.ph = phi i32 [ %fail_stack.sroa.72.0, %1498 ], [ %fail_stack.sroa.72.0, %507 ], [ %fail_stack.sroa.72.0, %518 ], [ %fail_stack.sroa.72.0, %558 ], [ %fail_stack.sroa.72.1, %779 ], [ %fail_stack.sroa.72.0, %806 ], [ %fail_stack.sroa.72.0, %799 ], [ %fail_stack.sroa.72.0, %870 ], [ %fail_stack.sroa.72.0, %874 ], [ %fail_stack.sroa.72.0, %878 ], [ %fail_stack.sroa.72.0, %887 ], [ %fail_stack.sroa.72.0, %890 ], [ %fail_stack.sroa.72.0, %883 ], [ %fail_stack.sroa.72.0, %893 ], [ %fail_stack.sroa.72.0, %895 ], [ %fail_stack.sroa.72.0, %1434 ], [ %fail_stack.sroa.72.0, %1440 ], [ %fail_stack.sroa.72.0, %1455 ], [ %fail_stack.sroa.72.0, %1465 ], [ %fail_stack.sroa.72.0, %1477 ], [ %fail_stack.sroa.72.0, %1482 ], [ %fail_stack.sroa.72.0, %1489 ], [ %fail_stack.sroa.72.0, %1511 ], [ %fail_stack.sroa.72.0, %1533 ], [ %fail_stack.sroa.72.0, %.lr.ph.i ], [ %fail_stack.sroa.72.0, %829 ], [ %fail_stack.sroa.72.0, %855 ], [ %fail_stack.sroa.72.0, %475 ], [ %fail_stack.sroa.72.0, %459 ], [ %fail_stack.sroa.72.0, %.lr.ph437 ], [ %fail_stack.sroa.72.0, %477 ], [ %fail_stack.sroa.72.0, %461 ], [ %fail_stack.sroa.72.0, %495 ], [ %fail_stack.sroa.72.0, %535 ], [ %fail_stack.sroa.72.0, %1505 ], [ %fail_stack.sroa.72.0, %1527 ]
  %fail_stack.sroa.98.8.ph = phi i32 [ %fail_stack.sroa.98.0, %1498 ], [ %fail_stack.sroa.98.0, %507 ], [ %fail_stack.sroa.98.0, %518 ], [ %fail_stack.sroa.98.0, %558 ], [ %796, %779 ], [ %fail_stack.sroa.98.0, %806 ], [ %fail_stack.sroa.98.0, %799 ], [ %fail_stack.sroa.98.0, %870 ], [ %fail_stack.sroa.98.0, %874 ], [ %fail_stack.sroa.98.0, %878 ], [ %fail_stack.sroa.98.0, %887 ], [ %fail_stack.sroa.98.0, %890 ], [ %fail_stack.sroa.98.0, %883 ], [ %fail_stack.sroa.98.0, %893 ], [ %fail_stack.sroa.98.0, %895 ], [ %fail_stack.sroa.98.0, %1434 ], [ %fail_stack.sroa.98.0, %1440 ], [ %fail_stack.sroa.98.0, %1455 ], [ %fail_stack.sroa.98.0, %1465 ], [ %fail_stack.sroa.98.0, %1477 ], [ %fail_stack.sroa.98.0, %1482 ], [ %fail_stack.sroa.98.0, %1489 ], [ %fail_stack.sroa.98.0, %1511 ], [ %fail_stack.sroa.98.0, %1533 ], [ %fail_stack.sroa.98.0, %.lr.ph.i ], [ %fail_stack.sroa.98.0, %829 ], [ %fail_stack.sroa.98.0, %855 ], [ %fail_stack.sroa.98.0, %475 ], [ %fail_stack.sroa.98.0, %459 ], [ %fail_stack.sroa.98.0, %.lr.ph437 ], [ %fail_stack.sroa.98.0, %477 ], [ %fail_stack.sroa.98.0, %461 ], [ %fail_stack.sroa.98.0, %495 ], [ %fail_stack.sroa.98.0, %535 ], [ %fail_stack.sroa.98.0, %1505 ], [ %fail_stack.sroa.98.0, %1527 ]
  %dend.11.ph = phi i8* [ %dend.0, %1498 ], [ %dend.5, %507 ], [ %dend.5, %518 ], [ %dend.6, %558 ], [ %dend.0, %779 ], [ %dend.0, %806 ], [ %dend.0, %799 ], [ %dend.0, %870 ], [ %dend.0, %874 ], [ %dend.0, %878 ], [ %dend.0, %887 ], [ %dend.0, %890 ], [ %dend.0, %883 ], [ %dend.0, %893 ], [ %dend.0, %895 ], [ %dend.0, %1434 ], [ %dend.0, %1440 ], [ %dend.0, %1455 ], [ %dend.0, %1465 ], [ %dend.0, %1477 ], [ %dend.0, %1482 ], [ %dend.0, %1489 ], [ %dend.9, %1511 ], [ %dend.10, %1533 ], [ %dend.8, %.lr.ph.i ], [ %end_match_2.0, %829 ], [ %dend.8, %855 ], [ %end_match_2.0, %475 ], [ %end_match_2.0, %459 ], [ %dend.0, %.lr.ph437 ], [ %dend.3, %477 ], [ %dend.2, %461 ], [ %end_match_2.0, %495 ], [ %end_match_2.0, %535 ], [ %end_match_2.0, %1505 ], [ %end_match_2.0, %1527 ]
  %d.11.ph = phi i8* [ %d.0, %1498 ], [ %d.5, %507 ], [ %d.5, %518 ], [ %d.6, %558 ], [ %d.0, %779 ], [ %d.0, %806 ], [ %d.0, %799 ], [ %d.0, %870 ], [ %d.0, %874 ], [ %d.0, %878 ], [ %d.0, %887 ], [ %d.0, %890 ], [ %119, %883 ], [ %d.0, %893 ], [ %d.0, %895 ], [ %d.0, %1434 ], [ %d.0, %1440 ], [ %d.0, %1455 ], [ %d.0, %1465 ], [ %d.0, %1477 ], [ %d.0, %1482 ], [ %d.0, %1489 ], [ %d.9, %1511 ], [ %d.10, %1533 ], [ %d.8, %.lr.ph.i ], [ %end_match_2.0, %829 ], [ %d.8, %855 ], [ %end_match_2.0, %475 ], [ %end_match_2.0, %459 ], [ %d.0, %.lr.ph437 ], [ %478, %477 ], [ %462, %461 ], [ %end_match_2.0, %495 ], [ %end_match_2.0, %535 ], [ %end_match_2.0, %1505 ], [ %end_match_2.0, %1527 ]
  %1549 = icmp eq i32 %fail_stack.sroa.98.8.ph, 0
  br i1 %1549, label %bcmp_translate.exit.thread158.preheader._crit_edge, label %.lr.ph446

.lr.ph446:                                        ; preds = %.preheader199, %156, %bcmp_translate.exit.thread158.preheader
  %d.11.ph645 = phi i8* [ %d.11.ph, %bcmp_translate.exit.thread158.preheader ], [ %d.0, %156 ], [ %d.0, %.preheader199 ]
  %dend.11.ph644 = phi i8* [ %dend.11.ph, %bcmp_translate.exit.thread158.preheader ], [ %dend.0, %156 ], [ %dend.0, %.preheader199 ]
  %fail_stack.sroa.98.8.ph643 = phi i32 [ %fail_stack.sroa.98.8.ph, %bcmp_translate.exit.thread158.preheader ], [ %fail_stack.sroa.98.0, %156 ], [ %fail_stack.sroa.98.0, %.preheader199 ]
  %fail_stack.sroa.72.12.ph642 = phi i32 [ %fail_stack.sroa.72.12.ph, %bcmp_translate.exit.thread158.preheader ], [ %fail_stack.sroa.72.0, %156 ], [ %fail_stack.sroa.72.0, %.preheader199 ]
  %match_end.2.ph641 = phi i8* [ %match_end.2.ph, %bcmp_translate.exit.thread158.preheader ], [ %match_end.0, %156 ], [ %d.0, %.preheader199 ]
  %best_regs_set.1.ph639 = phi i32 [ %best_regs_set.1.ph, %bcmp_translate.exit.thread158.preheader ], [ %best_regs_set.0, %156 ], [ 1, %.preheader199 ]
  %fail_stack.sroa.0.9.ph636 = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.9.ph, %bcmp_translate.exit.thread158.preheader ], [ %fail_stack.sroa.0.0, %156 ], [ %fail_stack.sroa.0.0, %.preheader199 ]
  br label %1550

; <label>:1550                                    ; preds = %.lr.ph446, %bcmp_translate.exit.thread158.backedge
  %d.11445 = phi i8* [ %d.11.ph645, %.lr.ph446 ], [ %d.11., %bcmp_translate.exit.thread158.backedge ]
  %fail_stack.sroa.98.8444 = phi i32 [ %fail_stack.sroa.98.8.ph643, %.lr.ph446 ], [ %fail_stack.sroa.98.9.lcssa, %bcmp_translate.exit.thread158.backedge ]
  %1551 = add i32 %fail_stack.sroa.98.8444, -1
  %1552 = zext i32 %1551 to i64
  %1553 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.9.ph636, i64 %1552, i32 0
  %1554 = load i8** %1553, align 8, !tbaa !13
  %1555 = icmp eq i8* %1554, null
  %d.11. = select i1 %1555, i8* %d.11445, i8* %1554
  %1556 = add i32 %fail_stack.sroa.98.8444, -2
  %1557 = zext i32 %1556 to i64
  %1558 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.9.ph636, i64 %1557, i32 0
  %1559 = load i8** %1558, align 8, !tbaa !13
  %1560 = add i32 %fail_stack.sroa.98.8444, -3
  %1561 = zext i32 %1560 to i64
  %1562 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.9.ph636, i64 %1561
  %1563 = bitcast %union.fail_stack_elt* %1562 to i32*
  %1564 = load i32* %1563, align 4, !tbaa !15
  %1565 = sext i32 %1564 to i64
  %1566 = add i32 %fail_stack.sroa.98.8444, -4
  %1567 = zext i32 %1566 to i64
  %1568 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.9.ph636, i64 %1567
  %1569 = bitcast %union.fail_stack_elt* %1568 to i32*
  %1570 = load i32* %1569, align 4, !tbaa !15
  %1571 = sext i32 %1570 to i64
  %1572 = icmp ult i32 %1564, %1570
  br i1 %1572, label %._crit_edge442, label %.lr.ph441

.lr.ph441:                                        ; preds = %1550, %.lr.ph441
  %this_reg22.0439 = phi i64 [ %1594, %.lr.ph441 ], [ %1565, %1550 ]
  %fail_stack.sroa.98.9438 = phi i32 [ %1587, %.lr.ph441 ], [ %1566, %1550 ]
  %1573 = getelementptr inbounds %union.register_info_type* %reg_info.0, i64 %this_reg22.0439, i32 0
  %1574 = add i32 %fail_stack.sroa.98.9438, -1
  %1575 = zext i32 %1574 to i64
  %1576 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.9.ph636, i64 %1575
  %1577 = bitcast %union.fail_stack_elt* %1576 to i64*
  %1578 = load i64* %1577, align 8
  %1579 = bitcast %union.fail_stack_elt* %1573 to i64*
  store i64 %1578, i64* %1579, align 8
  %1580 = add i32 %fail_stack.sroa.98.9438, -2
  %1581 = zext i32 %1580 to i64
  %1582 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.9.ph636, i64 %1581, i32 0
  %1583 = bitcast i8** %1582 to i64*
  %1584 = load i64* %1583, align 8, !tbaa !13
  %1585 = getelementptr inbounds i8** %regend.0, i64 %this_reg22.0439
  %1586 = bitcast i8** %1585 to i64*
  store i64 %1584, i64* %1586, align 8, !tbaa !13
  %1587 = add i32 %fail_stack.sroa.98.9438, -3
  %1588 = zext i32 %1587 to i64
  %1589 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.9.ph636, i64 %1588, i32 0
  %1590 = bitcast i8** %1589 to i64*
  %1591 = load i64* %1590, align 8, !tbaa !13
  %1592 = getelementptr inbounds i8** %regstart.0, i64 %this_reg22.0439
  %1593 = bitcast i8** %1592 to i64*
  store i64 %1591, i64* %1593, align 8, !tbaa !13
  %1594 = add i64 %this_reg22.0439, -1
  %1595 = icmp ult i64 %1594, %1571
  br i1 %1595, label %._crit_edge442, label %.lr.ph441

._crit_edge442:                                   ; preds = %.lr.ph441, %1550
  %fail_stack.sroa.98.9.lcssa = phi i32 [ %1566, %1550 ], [ %1587, %.lr.ph441 ]
  %1596 = icmp eq i8* %1559, null
  br i1 %1596, label %bcmp_translate.exit.thread158.backedge, label %1597

; <label>:1597                                    ; preds = %._crit_edge442
  %1598 = icmp ult i8* %1559, %5
  br i1 %1598, label %1599, label %.thread164

; <label>:1599                                    ; preds = %1597
  %1600 = load i8* %1559, align 1, !tbaa !12
  %1601 = zext i8 %1600 to i32
  %switch.tableidx140 = add nsw i32 %1601, -13
  %1602 = icmp ult i32 %switch.tableidx140, 10
  br i1 %1602, label %switch.hole_check141, label %.thread164

switch.hole_check141:                             ; preds = %1599
  %switch.maskindex143 = trunc i32 %switch.tableidx140 to i16
  %switch.shifted144 = lshr i16 561, %switch.maskindex143
  %1603 = and i16 %switch.shifted144, 1
  %switch.lobit145 = icmp eq i16 %1603, 0
  br i1 %switch.lobit145, label %.thread164, label %switch.lookup142

switch.lookup142:                                 ; preds = %switch.hole_check141
  %switch.cast146 = trunc i32 %switch.tableidx140 to i10
  %switch.downshift148 = lshr i10 -50, %switch.cast146
  %1604 = and i10 %switch.downshift148, 1
  %switch.masked149 = icmp eq i10 %1604, 0
  %1605 = getelementptr inbounds i8* %1559, i64 1
  %1606 = load i8* %1605, align 1, !tbaa !12
  %1607 = zext i8 %1606 to i32
  %1608 = getelementptr inbounds i8* %1559, i64 2
  %1609 = load i8* %1608, align 1, !tbaa !12
  %1610 = sext i8 %1609 to i32
  %1611 = shl nsw i32 %1610, 8
  %1612 = or i32 %1611, %1607
  %addconv = add nsw i32 %1612, 3
  %.sum77 = sext i32 %addconv to i64
  %1613 = getelementptr inbounds i8* %1559, i64 %.sum77
  store i8* %1613, i8** %p1, align 8, !tbaa !13
  %1614 = load i8* %1613, align 1, !tbaa !12
  br i1 %switch.masked149, label %.critedge150, label %1615

; <label>:1615                                    ; preds = %switch.lookup142
  %1616 = icmp eq i8 %1614, 21
  br i1 %1616, label %bcmp_translate.exit.thread158.backedge, label %.thread164

.critedge150:                                     ; preds = %switch.lookup142
  %1617 = icmp eq i8 %1614, 15
  br i1 %1617, label %bcmp_translate.exit.thread158.backedge, label %.thread164

bcmp_translate.exit.thread158.backedge:           ; preds = %.critedge150, %1615, %._crit_edge442
  %1618 = icmp eq i32 %fail_stack.sroa.98.9.lcssa, 0
  br i1 %1618, label %bcmp_translate.exit.thread158.preheader._crit_edge, label %1550

.thread164:                                       ; preds = %switch.hole_check141, %1615, %1599, %.critedge150, %1597
  %1619 = icmp ult i8* %d.11., %.string1
  %1620 = icmp ugt i8* %d.11., %117
  %or.cond151 = or i1 %1619, %1620
  %dend.11.end_match_1.0 = select i1 %or.cond151, i8* %dend.11.ph644, i8* %end_match_1.0
  br label %.backedge257

bcmp_translate.exit.thread158.preheader._crit_edge: ; preds = %bcmp_translate.exit.thread158.preheader, %bcmp_translate.exit.thread158.backedge
  %match_end.2.ph640 = phi i8* [ %match_end.2.ph641, %bcmp_translate.exit.thread158.backedge ], [ %match_end.2.ph, %bcmp_translate.exit.thread158.preheader ]
  %best_regs_set.1.ph638 = phi i32 [ %best_regs_set.1.ph639, %bcmp_translate.exit.thread158.backedge ], [ %best_regs_set.1.ph, %bcmp_translate.exit.thread158.preheader ]
  %fail_stack.sroa.0.9.ph637 = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.9.ph636, %bcmp_translate.exit.thread158.backedge ], [ %fail_stack.sroa.0.9.ph, %bcmp_translate.exit.thread158.preheader ]
  %1621 = icmp eq i32 %best_regs_set.1.ph638, 0
  br i1 %1621, label %1622, label %171

; <label>:1622                                    ; preds = %bcmp_translate.exit.thread158.preheader._crit_edge
  %1623 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.9.ph637 to i8*
  tail call void @free(i8* %1623) #8
  %1624 = icmp eq i8** %regstart.0, null
  br i1 %1624, label %1627, label %1625

; <label>:1625                                    ; preds = %1622
  %1626 = bitcast i8** %regstart.0 to i8*
  tail call void @free(i8* %1626) #8
  br label %1627

; <label>:1627                                    ; preds = %1622, %1625
  %1628 = icmp eq i8** %regend.0, null
  br i1 %1628, label %1631, label %1629

; <label>:1629                                    ; preds = %1627
  %1630 = bitcast i8** %regend.0 to i8*
  tail call void @free(i8* %1630) #8
  br label %1631

; <label>:1631                                    ; preds = %1627, %1629
  %1632 = icmp eq i8** %old_regstart.0, null
  br i1 %1632, label %1635, label %1633

; <label>:1633                                    ; preds = %1631
  %1634 = bitcast i8** %old_regstart.0 to i8*
  tail call void @free(i8* %1634) #8
  br label %1635

; <label>:1635                                    ; preds = %1631, %1633
  %1636 = icmp eq i8** %old_regend.0, null
  br i1 %1636, label %1639, label %1637

; <label>:1637                                    ; preds = %1635
  %1638 = bitcast i8** %old_regend.0 to i8*
  tail call void @free(i8* %1638) #8
  br label %1639

; <label>:1639                                    ; preds = %1635, %1637
  %1640 = icmp eq i8** %best_regstart.0, null
  br i1 %1640, label %1643, label %1641

; <label>:1641                                    ; preds = %1639
  %1642 = bitcast i8** %best_regstart.0 to i8*
  tail call void @free(i8* %1642) #8
  br label %1643

; <label>:1643                                    ; preds = %1639, %1641
  %1644 = icmp eq i8** %best_regend.0, null
  br i1 %1644, label %1647, label %1645

; <label>:1645                                    ; preds = %1643
  %1646 = bitcast i8** %best_regend.0 to i8*
  tail call void @free(i8* %1646) #8
  br label %1647

; <label>:1647                                    ; preds = %1643, %1645
  %1648 = icmp eq %union.register_info_type* %reg_info.0, null
  br i1 %1648, label %1651, label %1649

; <label>:1649                                    ; preds = %1647
  %1650 = bitcast %union.register_info_type* %reg_info.0 to i8*
  tail call void @free(i8* %1650) #8
  br label %1651

; <label>:1651                                    ; preds = %1647, %1649
  %1652 = icmp eq i8** %reg_dummy.0, null
  br i1 %1652, label %1655, label %1653

; <label>:1653                                    ; preds = %1651
  %1654 = bitcast i8** %reg_dummy.0 to i8*
  tail call void @free(i8* %1654) #8
  br label %1655

; <label>:1655                                    ; preds = %1651, %1653
  %1656 = icmp eq %union.register_info_type* %reg_info_dummy.0, null
  br i1 %1656, label %.loopexit220, label %1657

; <label>:1657                                    ; preds = %1655
  %1658 = bitcast %union.register_info_type* %reg_info_dummy.0 to i8*
  tail call void @free(i8* %1658) #8
  br label %.loopexit220

.loopexit220:                                     ; preds = %1320, %1316, %1264, %1260, %1007, %1003, %918, %914, %748, %744, %1657, %1655, %441, %439, %311, %309, %246, %244, %102, %100, %61, %62, %0
  %.0 = phi i32 [ -2, %0 ], [ -2, %62 ], [ -2, %61 ], [ -1, %100 ], [ -1, %102 ], [ -2, %244 ], [ -2, %246 ], [ -2, %309 ], [ -2, %311 ], [ %406, %439 ], [ %406, %441 ], [ -1, %1655 ], [ -1, %1657 ], [ -2, %744 ], [ -2, %748 ], [ -2, %914 ], [ -2, %918 ], [ -2, %1003 ], [ -2, %1007 ], [ -2, %1260 ], [ -2, %1264 ], [ -2, %1316 ], [ -2, %1320 ]
  ret i32 %.0
}
