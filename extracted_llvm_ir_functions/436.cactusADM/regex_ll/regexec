define i32 @regexec(%struct.re_pattern_buffer* nocapture readonly %preg, i8* %string, i64 %nmatch, %struct.regmatch_t* nocapture %pmatch, i32 %eflags) #0 {
  %regs = alloca %struct.re_registers, align 8
  %private_preg = alloca %struct.re_pattern_buffer, align 8
  %1 = bitcast %struct.re_pattern_buffer* %private_preg to i8*
  call void @llvm.lifetime.start(i64 64, i8* %1) #6
  %2 = tail call i64 @strlen(i8* %string) #7
  %3 = trunc i64 %2 to i32
  %4 = getelementptr inbounds %struct.re_pattern_buffer* %preg, i64 0, i32 7
  %5 = load i8* %4, align 8
  %6 = and i8 %5, 16
  %7 = icmp eq i8 %6, 0
  %8 = icmp ne i64 %nmatch, 0
  %. = and i1 %8, %7
  %9 = bitcast %struct.re_pattern_buffer* %preg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* %9, i64 64, i32 8, i1 false), !tbaa.struct !29
  %10 = getelementptr inbounds %struct.re_pattern_buffer* %private_preg, i64 0, i32 7
  %eflags.tr = trunc i32 %eflags to i8
  %11 = load i8* %10, align 8
  %12 = shl i8 %eflags.tr, 5
  %13 = and i8 %12, 32
  %14 = and i8 %11, -103
  %15 = shl i32 %eflags, 5
  %16 = trunc i32 %15 to i8
  %17 = and i8 %16, 64
  %18 = or i8 %13, %17
  %19 = or i8 %18, %14
  %20 = or i8 %19, 4
  store i8 %20, i8* %10, align 8
  br i1 %., label %22, label %.thread3

.thread3:                                         ; preds = %0
  %21 = call i32 @re_search_2(%struct.re_pattern_buffer* %private_preg, i8* null, i32 0, i8* %string, i32 %3, i32 0, i32 %3, %struct.re_registers* null, i32 %3) #7
  br label %50

; <label>:22                                      ; preds = %0
  %23 = trunc i64 %nmatch to i32
  %24 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 0
  store i32 %23, i32* %24, align 8, !tbaa !18
  %25 = shl i64 %nmatch, 3
  %26 = tail call i8* @malloc(i64 %25) #7
  %27 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 1
  %28 = bitcast i32** %27 to i8**
  store i8* %26, i8** %28, align 8, !tbaa !20
  %29 = icmp eq i8* %26, null
  br i1 %29, label %52, label %30

; <label>:30                                      ; preds = %22
  %31 = bitcast i8* %26 to i32*
  %32 = getelementptr inbounds i32* %31, i64 %nmatch
  %33 = getelementptr inbounds %struct.re_registers* %regs, i64 0, i32 2
  store i32* %32, i32** %33, align 8, !tbaa !21
  %34 = call i32 @re_search_2(%struct.re_pattern_buffer* %private_preg, i8* null, i32 0, i8* %string, i32 %3, i32 0, i32 %3, %struct.re_registers* %regs, i32 %3) #7
  %35 = icmp sgt i32 %34, -1
  br i1 %35, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %30
  %36 = load i32** %27, align 8, !tbaa !20
  %37 = load i32** %33, align 8, !tbaa !21
  br label %38

; <label>:38                                      ; preds = %.lr.ph, %38
  %39 = phi i64 [ 0, %.lr.ph ], [ %47, %38 ]
  %r.05 = phi i32 [ 0, %.lr.ph ], [ %46, %38 ]
  %40 = getelementptr inbounds i32* %36, i64 %39
  %41 = load i32* %40, align 4, !tbaa !15
  %42 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %39, i32 0
  store i32 %41, i32* %42, align 4, !tbaa !30
  %43 = getelementptr inbounds i32* %37, i64 %39
  %44 = load i32* %43, align 4, !tbaa !15
  %45 = getelementptr inbounds %struct.regmatch_t* %pmatch, i64 %39, i32 1
  store i32 %44, i32* %45, align 4, !tbaa !32
  %46 = add i32 %r.05, 1
  %47 = zext i32 %46 to i64
  %48 = icmp ult i64 %47, %nmatch
  br i1 %48, label %38, label %.loopexit

.loopexit:                                        ; preds = %38, %30
  %49 = load i8** %28, align 8, !tbaa !20
  call void @free(i8* %49) #8
  br label %50

; <label>:50                                      ; preds = %.thread3, %.loopexit
  %51 = phi i32 [ %34, %.loopexit ], [ %21, %.thread3 ]
  %.lobit = lshr i32 %51, 31
  br label %52

; <label>:52                                      ; preds = %22, %50
  %.0 = phi i32 [ %.lobit, %50 ], [ 1, %22 ]
  call void @llvm.lifetime.end(i64 64, i8* %1) #6
  ret i32 %.0
}
