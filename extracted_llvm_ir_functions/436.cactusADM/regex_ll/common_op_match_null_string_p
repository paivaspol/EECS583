define internal fastcc signext i8 @common_op_match_null_string_p(i8** nocapture %p, i8* %end, %union.register_info_type* nocapture %reg_info) #0 {
  %p1 = alloca i8*, align 8
  %1 = load i8** %p, align 8, !tbaa !13
  %2 = getelementptr inbounds i8* %1, i64 1
  store i8* %2, i8** %p1, align 8, !tbaa !13
  %3 = load i8* %1, align 1, !tbaa !12
  %4 = zext i8 %3 to i32
  %5 = ptrtoint i8* %2 to i64
  switch i32 %4, label %68 [
    i32 0, label %65
    i32 9, label %65
    i32 10, label %65
    i32 11, label %65
    i32 12, label %65
    i32 26, label %65
    i32 27, label %65
    i32 28, label %65
    i32 29, label %65
    i32 6, label %6
    i32 13, label %21
    i32 21, label %34
    i32 8, label %55
    i32 23, label %63
  ]

; <label>:6                                       ; preds = %0
  %7 = load i8* %2, align 1, !tbaa !12
  %8 = call fastcc signext i8 @group_match_null_string_p(i8** %p1, i8* %end, %union.register_info_type* %reg_info) #8
  %9 = zext i8 %7 to i64
  %10 = getelementptr inbounds %union.register_info_type* %reg_info, i64 %9
  %11 = bitcast %union.register_info_type* %10 to i8*
  %12 = load i8* %11, align 4
  %13 = and i8 %12, 3
  %14 = icmp eq i8 %13, 3
  br i1 %14, label %15, label %19

; <label>:15                                      ; preds = %6
  %16 = and i8 %8, 3
  %17 = and i8 %12, -4
  %18 = or i8 %17, %16
  store i8 %18, i8* %11, align 4
  br label %19

; <label>:19                                      ; preds = %15, %6
  %20 = icmp eq i8 %8, 0
  br i1 %20, label %68, label %._crit_edge

._crit_edge:                                      ; preds = %19
  %.phi.trans.insert = bitcast i8** %p1 to i64*
  %.pre = load i64* %.phi.trans.insert, align 8, !tbaa !13
  br label %65

; <label>:21                                      ; preds = %0
  %22 = load i8* %2, align 1, !tbaa !12
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8* %1, i64 2
  %25 = load i8* %24, align 1, !tbaa !12
  %26 = sext i8 %25 to i32
  %27 = shl nsw i32 %26, 8
  %28 = or i32 %27, %23
  %29 = getelementptr inbounds i8* %1, i64 3
  store i8* %29, i8** %p1, align 8, !tbaa !13
  %30 = icmp sgt i32 %28, -1
  br i1 %30, label %31, label %68

; <label>:31                                      ; preds = %21
  %addconv2 = add nsw i32 %28, 3
  %.sum1 = sext i32 %addconv2 to i64
  %32 = getelementptr inbounds i8* %1, i64 %.sum1
  store i8* %32, i8** %p1, align 8, !tbaa !13
  %33 = ptrtoint i8* %32 to i64
  br label %65

; <label>:34                                      ; preds = %0
  %35 = getelementptr inbounds i8* %1, i64 3
  %36 = load i8* %35, align 1, !tbaa !12
  %37 = zext i8 %36 to i32
  %38 = getelementptr inbounds i8* %1, i64 4
  %39 = load i8* %38, align 1, !tbaa !12
  %40 = sext i8 %39 to i32
  %41 = shl nsw i32 %40, 8
  %42 = or i32 %41, %37
  %43 = getelementptr inbounds i8* %1, i64 5
  store i8* %43, i8** %p1, align 8, !tbaa !13
  %44 = icmp eq i32 %42, 0
  br i1 %44, label %45, label %68

; <label>:45                                      ; preds = %34
  %46 = load i8* %2, align 1, !tbaa !12
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i8* %1, i64 2
  %49 = load i8* %48, align 1, !tbaa !12
  %50 = sext i8 %49 to i32
  %51 = shl nsw i32 %50, 8
  %52 = or i32 %51, %47
  %addconv = add nsw i32 %52, 3
  %.sum = sext i32 %addconv to i64
  %53 = getelementptr inbounds i8* %1, i64 %.sum
  store i8* %53, i8** %p1, align 8, !tbaa !13
  %54 = ptrtoint i8* %53 to i64
  br label %65

; <label>:55                                      ; preds = %0
  %56 = load i8* %2, align 1, !tbaa !12
  %57 = zext i8 %56 to i64
  %58 = getelementptr inbounds %union.register_info_type* %reg_info, i64 %57
  %59 = bitcast %union.register_info_type* %58 to i8*
  %60 = load i8* %59, align 4
  %61 = and i8 %60, 3
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %68, label %65

; <label>:63                                      ; preds = %0
  %64 = getelementptr inbounds i8* %1, i64 5
  store i8* %64, i8** %p1, align 8, !tbaa !13
  br label %68

; <label>:65                                      ; preds = %._crit_edge, %55, %0, %0, %0, %0, %0, %0, %0, %0, %0, %45, %31
  %66 = phi i64 [ %.pre, %._crit_edge ], [ %5, %55 ], [ %5, %0 ], [ %5, %0 ], [ %5, %0 ], [ %5, %0 ], [ %5, %0 ], [ %5, %0 ], [ %5, %0 ], [ %5, %0 ], [ %5, %0 ], [ %54, %45 ], [ %33, %31 ]
  %67 = bitcast i8** %p to i64*
  store i64 %66, i64* %67, align 8, !tbaa !13
  br label %68

; <label>:68                                      ; preds = %63, %0, %55, %34, %21, %19, %65
  %.0 = phi i8 [ 1, %65 ], [ 0, %19 ], [ 0, %21 ], [ 0, %34 ], [ 0, %55 ], [ 0, %0 ], [ 0, %63 ]
  ret i8 %.0
}
