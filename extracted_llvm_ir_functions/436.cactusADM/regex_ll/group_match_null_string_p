define internal fastcc signext i8 @group_match_null_string_p(i8** nocapture %p, i8* %end, %union.register_info_type* nocapture %reg_info) #0 {
  %p1 = alloca i8*, align 8
  %1 = load i8** %p, align 8, !tbaa !13
  %2 = getelementptr inbounds i8* %1, i64 2
  store i8* %2, i8** %p1, align 8, !tbaa !13
  %3 = icmp ult i8* %2, %end
  br i1 %3, label %.lr.ph, label %.loopexit6

.lr.ph:                                           ; preds = %0, %.backedge
  %4 = phi i8* [ %18, %.backedge ], [ %2, %0 ]
  %5 = load i8* %4, align 1, !tbaa !12
  %6 = zext i8 %5 to i32
  switch i32 %6, label %67 [
    i32 15, label %7
    i32 7, label %65
  ]

; <label>:7                                       ; preds = %.lr.ph
  %8 = getelementptr inbounds i8* %4, i64 1
  store i8* %8, i8** %p1, align 8, !tbaa !13
  %9 = load i8* %8, align 1, !tbaa !12
  %10 = zext i8 %9 to i32
  %11 = getelementptr inbounds i8* %4, i64 2
  %12 = load i8* %11, align 1, !tbaa !12
  %13 = sext i8 %12 to i32
  %14 = shl nsw i32 %13, 8
  %15 = or i32 %14, %10
  %16 = getelementptr inbounds i8* %4, i64 3
  store i8* %16, i8** %p1, align 8, !tbaa !13
  %17 = icmp sgt i32 %15, -1
  br i1 %17, label %.preheader, label %.backedge

.backedge:                                        ; preds = %..backedge_crit_edge, %7, %64
  %18 = phi i8* [ %.pre, %..backedge_crit_edge ], [ %16, %7 ], [ %61, %64 ]
  %19 = icmp ult i8* %18, %end
  br i1 %19, label %.lr.ph, label %.loopexit6

.preheader:                                       ; preds = %7, %35
  %20 = phi i8* [ %44, %35 ], [ %16, %7 ]
  %mcnt.0 = phi i32 [ %43, %35 ], [ %15, %7 ]
  %21 = add nsw i32 %mcnt.0, -3
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8* %20, i64 %22
  %24 = load i8* %23, align 1, !tbaa !12
  %25 = icmp eq i8 %24, 14
  br i1 %25, label %26, label %.loopexit

; <label>:26                                      ; preds = %.preheader
  %27 = sext i32 %mcnt.0 to i64
  %.sum = add nsw i64 %27, -3
  %28 = getelementptr inbounds i8* %20, i64 %.sum
  %29 = tail call fastcc signext i8 @alt_match_null_string_p(i8* %20, i8* %28, %union.register_info_type* %reg_info) #8
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %.loopexit6, label %31

; <label>:31                                      ; preds = %26
  %32 = getelementptr inbounds i8* %20, i64 %27
  store i8* %32, i8** %p1, align 8, !tbaa !13
  %33 = load i8* %32, align 1, !tbaa !12
  %34 = icmp eq i8 %33, 15
  br i1 %34, label %35, label %.loopexit

; <label>:35                                      ; preds = %31
  %.sum1 = add nsw i64 %27, 1
  %36 = getelementptr inbounds i8* %20, i64 %.sum1
  store i8* %36, i8** %p1, align 8, !tbaa !13
  %37 = load i8* %36, align 1, !tbaa !12
  %38 = zext i8 %37 to i32
  %.sum2 = add nsw i64 %27, 2
  %39 = getelementptr inbounds i8* %20, i64 %.sum2
  %40 = load i8* %39, align 1, !tbaa !12
  %41 = sext i8 %40 to i32
  %42 = shl nsw i32 %41, 8
  %43 = or i32 %42, %38
  %.sum3 = add nsw i64 %27, 3
  %44 = getelementptr inbounds i8* %20, i64 %.sum3
  store i8* %44, i8** %p1, align 8, !tbaa !13
  %45 = add nsw i32 %43, -3
  %46 = sext i32 %45 to i64
  %.sum4 = add nsw i64 %46, %.sum3
  %47 = getelementptr inbounds i8* %20, i64 %.sum4
  %48 = load i8* %47, align 1, !tbaa !12
  %49 = icmp eq i8 %48, 14
  br i1 %49, label %.preheader, label %50

; <label>:50                                      ; preds = %35
  store i8* %32, i8** %p1, align 8, !tbaa !13
  br label %.loopexit

.loopexit:                                        ; preds = %31, %.preheader, %50
  %51 = phi i8* [ %32, %50 ], [ %32, %31 ], [ %20, %.preheader ]
  %52 = getelementptr inbounds i8* %51, i64 -2
  %53 = load i8* %52, align 1, !tbaa !12
  %54 = zext i8 %53 to i32
  %55 = getelementptr inbounds i8* %51, i64 -1
  %56 = load i8* %55, align 1, !tbaa !12
  %57 = sext i8 %56 to i32
  %58 = shl nsw i32 %57, 8
  %59 = or i32 %58, %54
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8* %51, i64 %60
  %62 = tail call fastcc signext i8 @alt_match_null_string_p(i8* %51, i8* %61, %union.register_info_type* %reg_info) #8
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %.loopexit6, label %64

; <label>:64                                      ; preds = %.loopexit
  store i8* %61, i8** %p1, align 8, !tbaa !13
  br label %.backedge

; <label>:65                                      ; preds = %.lr.ph
  %66 = getelementptr inbounds i8* %4, i64 2
  store i8* %66, i8** %p, align 8, !tbaa !13
  br label %.loopexit6

; <label>:67                                      ; preds = %.lr.ph
  %68 = call fastcc signext i8 @common_op_match_null_string_p(i8** %p1, i8* %end, %union.register_info_type* %reg_info) #8
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %.loopexit6, label %..backedge_crit_edge

..backedge_crit_edge:                             ; preds = %67
  %.pre = load i8** %p1, align 8, !tbaa !13
  br label %.backedge

.loopexit6:                                       ; preds = %.loopexit, %67, %.backedge, %26, %0, %65
  %.0 = phi i8 [ 1, %65 ], [ 0, %0 ], [ 0, %26 ], [ 0, %.backedge ], [ 0, %67 ], [ 0, %.loopexit ]
  ret i8 %.0
}
