define i32 @re_compile_fastmap(%struct.re_pattern_buffer* nocapture %bufp) #0 {
  %1 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 4
  %2 = load i8** %1, align 8, !tbaa !6
  %3 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 0
  %4 = load i8** %3, align 8, !tbaa !10
  %5 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 2
  %6 = load i64* %5, align 8, !tbaa !11
  %7 = getelementptr inbounds i8* %4, i64 %6
  %8 = tail call i8* @malloc(i64 40) #7
  %9 = icmp eq i8* %8, null
  br i1 %9, label %200, label %10

; <label>:10                                      ; preds = %0
  %11 = bitcast i8* %8 to %union.fail_stack_elt*
  %12 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %2, i1 false)
  %13 = tail call i8* @__memset_chk(i8* %2, i32 0, i64 256, i64 %12) #7
  %14 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 7
  %15 = load i8* %14, align 8
  %16 = and i8 %15, -10
  %17 = or i8 %16, 8
  store i8 %17, i8* %14, align 8
  %18 = getelementptr inbounds i8* %2, i64 10
  %19 = getelementptr inbounds %struct.re_pattern_buffer* %bufp, i64 0, i32 3
  br label %.backedge18

.backedge18:                                      ; preds = %180, %140, %41, %111, %112, %126, %183, %128, %116, %35, %35, %35, %35, %35, %35, %35, %35, %35, %35, %30, %194, %196, %46, %67, %.backedge, %.backedge13, %99, %105, %10
  %fail_stack.sroa.10.0 = phi i32 [ 5, %10 ], [ %fail_stack.sroa.10.0, %30 ], [ %fail_stack.sroa.10.0, %196 ], [ %fail_stack.sroa.10.0, %194 ], [ %fail_stack.sroa.10.0, %183 ], [ %fail_stack.sroa.10.0, %116 ], [ %fail_stack.sroa.10.0, %128 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %35 ], [ %fail_stack.sroa.10.0, %126 ], [ %fail_stack.sroa.10.0, %140 ], [ %fail_stack.sroa.10.3, %180 ], [ %fail_stack.sroa.10.0, %112 ], [ %fail_stack.sroa.10.0, %111 ], [ %fail_stack.sroa.10.0, %41 ], [ %fail_stack.sroa.10.0, %46 ], [ %fail_stack.sroa.10.0, %67 ], [ %fail_stack.sroa.10.0, %.backedge ], [ %fail_stack.sroa.10.0, %.backedge13 ], [ %fail_stack.sroa.10.0, %99 ], [ %fail_stack.sroa.10.0, %105 ]
  %fail_stack.sroa.0.0 = phi %union.fail_stack_elt* [ %11, %10 ], [ %fail_stack.sroa.0.0, %30 ], [ %fail_stack.sroa.0.0, %196 ], [ %fail_stack.sroa.0.0, %194 ], [ %fail_stack.sroa.0.0, %183 ], [ %fail_stack.sroa.0.0, %116 ], [ %fail_stack.sroa.0.0, %128 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %35 ], [ %fail_stack.sroa.0.0, %126 ], [ %fail_stack.sroa.0.0, %140 ], [ %fail_stack.sroa.0.3, %180 ], [ %fail_stack.sroa.0.0, %112 ], [ %fail_stack.sroa.0.0, %111 ], [ %fail_stack.sroa.0.0, %41 ], [ %fail_stack.sroa.0.0, %46 ], [ %fail_stack.sroa.0.0, %67 ], [ %fail_stack.sroa.0.0, %.backedge ], [ %fail_stack.sroa.0.0, %.backedge13 ], [ %fail_stack.sroa.0.0, %99 ], [ %fail_stack.sroa.0.0, %105 ]
  %fail_stack.sroa.16.0 = phi i32 [ 0, %10 ], [ %31, %30 ], [ %fail_stack.sroa.16.0, %196 ], [ %fail_stack.sroa.16.0, %194 ], [ %fail_stack.sroa.16.0, %183 ], [ %fail_stack.sroa.16.0, %116 ], [ 0, %128 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %35 ], [ %fail_stack.sroa.16.0, %126 ], [ %.fail_stack.sroa.16.0, %140 ], [ %fail_stack.sroa.16.1, %180 ], [ %fail_stack.sroa.16.0, %112 ], [ %fail_stack.sroa.16.0, %111 ], [ %fail_stack.sroa.16.0, %41 ], [ %fail_stack.sroa.16.0, %46 ], [ %fail_stack.sroa.16.0, %67 ], [ %fail_stack.sroa.16.0, %.backedge ], [ %fail_stack.sroa.16.0, %.backedge13 ], [ %fail_stack.sroa.16.0, %99 ], [ %fail_stack.sroa.16.0, %105 ]
  %p.0 = phi i8* [ %4, %10 ], [ %34, %30 ], [ %197, %196 ], [ %195, %194 ], [ %192, %183 ], [ %124, %116 ], [ %138, %128 ], [ %37, %35 ], [ %37, %35 ], [ %37, %35 ], [ %37, %35 ], [ %37, %35 ], [ %37, %35 ], [ %37, %35 ], [ %37, %35 ], [ %37, %35 ], [ %37, %35 ], [ %124, %126 ], [ %138, %140 ], [ %.11, %180 ], [ %7, %112 ], [ %7, %111 ], [ %7, %41 ], [ %7, %46 ], [ %7, %67 ], [ %7, %.backedge ], [ %7, %.backedge13 ], [ %7, %99 ], [ %7, %105 ]
  %path_can_be_null.0 = phi i8 [ 1, %10 ], [ 1, %30 ], [ %path_can_be_null.0, %196 ], [ %path_can_be_null.0, %194 ], [ %path_can_be_null.0, %183 ], [ %path_can_be_null.0, %116 ], [ %path_can_be_null.0, %128 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %35 ], [ %path_can_be_null.0, %126 ], [ %path_can_be_null.0, %140 ], [ %path_can_be_null.0, %180 ], [ 0, %112 ], [ 0, %111 ], [ 0, %41 ], [ 0, %46 ], [ 0, %67 ], [ 0, %.backedge ], [ 0, %.backedge13 ], [ 0, %99 ], [ 0, %105 ]
  %20 = icmp eq i8* %p.0, %7
  br i1 %20, label %24, label %21

; <label>:21                                      ; preds = %.backedge18
  %22 = load i8* %p.0, align 1, !tbaa !12
  %23 = icmp eq i8 %22, 1
  br i1 %23, label %24, label %35

; <label>:24                                      ; preds = %21, %.backedge18
  %25 = icmp eq i32 %fail_stack.sroa.16.0, 0
  %26 = load i8* %14, align 8
  %.masked = and i8 %26, 1
  %27 = or i8 %.masked, %path_can_be_null.0
  %28 = and i8 %26, -2
  %29 = or i8 %27, %28
  store i8 %29, i8* %14, align 8
  br i1 %25, label %.loopexit17, label %30

; <label>:30                                      ; preds = %24
  %31 = add i32 %fail_stack.sroa.16.0, -1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.0, i64 %32, i32 0
  %34 = load i8** %33, align 8, !tbaa !13
  br label %.backedge18

; <label>:35                                      ; preds = %21
  %36 = zext i8 %22 to i32
  %37 = getelementptr inbounds i8* %p.0, i64 1
  switch i32 %36, label %198 [
    i32 8, label %38
    i32 2, label %41
    i32 4, label %46
    i32 5, label %64
    i32 24, label %.preheader
    i32 25, label %.preheader15
    i32 3, label %106
    i32 0, label %.backedge18
    i32 9, label %.backedge18
    i32 10, label %.backedge18
    i32 11, label %.backedge18
    i32 12, label %.backedge18
    i32 28, label %.backedge18
    i32 29, label %.backedge18
    i32 26, label %.backedge18
    i32 27, label %.backedge18
    i32 20, label %.backedge18
    i32 22, label %116
    i32 17, label %116
    i32 18, label %116
    i32 13, label %116
    i32 14, label %116
    i32 19, label %116
    i32 15, label %146
    i32 16, label %146
    i32 21, label %183
    i32 23, label %194
    i32 6, label %196
    i32 7, label %196
  ]

; <label>:38                                      ; preds = %35
  %39 = load i8* %14, align 8
  %40 = or i8 %39, 1
  store i8 %40, i8* %14, align 8
  br label %.loopexit17

; <label>:41                                      ; preds = %35
  %42 = getelementptr inbounds i8* %p.0, i64 2
  %43 = load i8* %42, align 1, !tbaa !12
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds i8* %2, i64 %44
  store i8 1, i8* %45, align 1, !tbaa !12
  br label %.backedge18

; <label>:46                                      ; preds = %35
  %47 = load i8* %37, align 1, !tbaa !12
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %.backedge18, label %.lr.ph34

.lr.ph34:                                         ; preds = %46
  %49 = zext i8 %47 to i64
  %50 = shl nuw nsw i64 %49, 3
  br label %51

; <label>:51                                      ; preds = %.lr.ph34, %.backedge
  %indvars.iv46 = phi i64 [ %50, %.lr.ph34 ], [ %indvars.iv.next47, %.backedge ]
  %indvars.iv.next47 = add nsw i64 %indvars.iv46, -1
  %52 = trunc i64 %indvars.iv.next47 to i32
  %53 = sdiv i32 %52, 8
  %addconv10 = add nsw i32 %53, 2
  %.sum9 = sext i32 %addconv10 to i64
  %54 = getelementptr inbounds i8* %p.0, i64 %.sum9
  %55 = load i8* %54, align 1, !tbaa !12
  %56 = zext i8 %55 to i32
  %57 = and i32 %52, 7
  %58 = shl i32 1, %57
  %59 = and i32 %56, %58
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %.backedge, label %62

.backedge:                                        ; preds = %51, %62
  %61 = icmp sgt i64 %indvars.iv46, 1
  br i1 %61, label %51, label %.backedge18

; <label>:62                                      ; preds = %51
  %63 = getelementptr inbounds i8* %2, i64 %indvars.iv.next47
  store i8 1, i8* %63, align 1, !tbaa !12
  br label %.backedge

; <label>:64                                      ; preds = %35
  %65 = load i8* %37, align 1, !tbaa !12
  %66 = icmp ult i8 %65, 32
  br i1 %66, label %67, label %.lr.ph30

; <label>:67                                      ; preds = %64
  %68 = zext i8 %65 to i32
  %69 = shl nuw nsw i32 %68, 3
  %70 = zext i32 %69 to i64
  %scevgep = getelementptr i8* %2, i64 %70
  %71 = or i32 %69, 1
  %72 = icmp ugt i32 %71, 256
  %.op = add nsw i32 %71, -1
  %73 = select i1 %72, i32 %.op, i32 255
  %74 = sub nsw i32 %73, %69
  %75 = zext i32 %74 to i64
  %76 = add nuw nsw i64 %75, 1
  call void @llvm.memset.p0i8.i64(i8* %scevgep, i8 1, i64 %76, i32 1, i1 false)
  %.pre = load i8* %37, align 1, !tbaa !12
  %77 = icmp eq i8 %.pre, 0
  br i1 %77, label %.backedge18, label %.lr.ph30

.lr.ph30:                                         ; preds = %64, %67
  %78 = phi i8 [ %.pre, %67 ], [ %65, %64 ]
  %79 = zext i8 %78 to i64
  %80 = shl nuw nsw i64 %79, 3
  br label %81

; <label>:81                                      ; preds = %.lr.ph30, %.backedge13
  %indvars.iv44 = phi i64 [ %80, %.lr.ph30 ], [ %indvars.iv.next45, %.backedge13 ]
  %indvars.iv.next45 = add nsw i64 %indvars.iv44, -1
  %82 = trunc i64 %indvars.iv.next45 to i32
  %83 = sdiv i32 %82, 8
  %addconv8 = add nsw i32 %83, 2
  %.sum7 = sext i32 %addconv8 to i64
  %84 = getelementptr inbounds i8* %p.0, i64 %.sum7
  %85 = load i8* %84, align 1, !tbaa !12
  %86 = zext i8 %85 to i32
  %87 = and i32 %82, 7
  %88 = shl i32 1, %87
  %89 = and i32 %86, %88
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %92, label %.backedge13

.backedge13:                                      ; preds = %81, %92
  %91 = icmp sgt i64 %indvars.iv44, 1
  br i1 %91, label %81, label %.backedge18

; <label>:92                                      ; preds = %81
  %93 = getelementptr inbounds i8* %2, i64 %indvars.iv.next45
  store i8 1, i8* %93, align 1, !tbaa !12
  br label %.backedge13

.preheader:                                       ; preds = %35, %99
  %indvars.iv39 = phi i64 [ %indvars.iv.next40, %99 ], [ 0, %35 ]
  %94 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %indvars.iv39
  %95 = load i8* %94, align 1, !tbaa !12
  %96 = icmp eq i8 %95, 1
  br i1 %96, label %97, label %99

; <label>:97                                      ; preds = %.preheader
  %98 = getelementptr inbounds i8* %2, i64 %indvars.iv39
  store i8 1, i8* %98, align 1, !tbaa !12
  br label %99

; <label>:99                                      ; preds = %.preheader, %97
  %indvars.iv.next40 = add nuw nsw i64 %indvars.iv39, 1
  %exitcond41 = icmp eq i64 %indvars.iv.next40, 256
  br i1 %exitcond41, label %.backedge18, label %.preheader

.preheader15:                                     ; preds = %35, %105
  %indvars.iv = phi i64 [ %indvars.iv.next, %105 ], [ 0, %35 ]
  %100 = getelementptr inbounds [256 x i8]* @re_syntax_table, i64 0, i64 %indvars.iv
  %101 = load i8* %100, align 1, !tbaa !12
  %102 = icmp eq i8 %101, 1
  br i1 %102, label %105, label %103

; <label>:103                                     ; preds = %.preheader15
  %104 = getelementptr inbounds i8* %2, i64 %indvars.iv
  store i8 1, i8* %104, align 1, !tbaa !12
  br label %105

; <label>:105                                     ; preds = %.preheader15, %103
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %.backedge18, label %.preheader15

; <label>:106                                     ; preds = %35
  %107 = load i8* %18, align 1, !tbaa !12
  call void @llvm.memset.p0i8.i64(i8* %2, i8 1, i64 256, i32 1, i1 false)
  %108 = load i64* %19, align 8, !tbaa !14
  %109 = and i64 %108, 64
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %112

; <label>:111                                     ; preds = %106
  store i8 %107, i8* %18, align 1, !tbaa !12
  br label %.backedge18

; <label>:112                                     ; preds = %106
  %113 = load i8* %14, align 8
  %114 = and i8 %113, 1
  %115 = icmp eq i8 %114, 0
  br i1 %115, label %.backedge18, label %.loopexit17

; <label>:116                                     ; preds = %35, %35, %35, %35, %35, %35
  %117 = load i8* %37, align 1, !tbaa !12
  %118 = zext i8 %117 to i32
  %119 = getelementptr inbounds i8* %p.0, i64 2
  %120 = load i8* %119, align 1, !tbaa !12
  %121 = sext i8 %120 to i32
  %122 = shl nsw i32 %121, 8
  %123 = or i32 %122, %118
  %addconv2 = add nsw i32 %123, 3
  %.sum1 = sext i32 %addconv2 to i64
  %124 = getelementptr inbounds i8* %p.0, i64 %.sum1
  %125 = icmp sgt i32 %123, 0
  br i1 %125, label %.backedge18, label %126

; <label>:126                                     ; preds = %116
  %127 = load i8* %124, align 1, !tbaa !12
  switch i8 %127, label %.backedge18 [
    i8 15, label %128
    i8 21, label %128
  ]

; <label>:128                                     ; preds = %126, %126
  %.sum3 = add nsw i64 %.sum1, 1
  %129 = getelementptr inbounds i8* %p.0, i64 %.sum3
  %130 = load i8* %129, align 1, !tbaa !12
  %131 = zext i8 %130 to i32
  %.sum4 = add nsw i64 %.sum1, 2
  %132 = getelementptr inbounds i8* %p.0, i64 %.sum4
  %133 = load i8* %132, align 1, !tbaa !12
  %134 = sext i8 %133 to i32
  %135 = shl nsw i32 %134, 8
  %136 = or i32 %135, %131
  %.sum5 = add nsw i64 %.sum1, 3
  %137 = sext i32 %136 to i64
  %.sum6 = add nsw i64 %.sum5, %137
  %138 = getelementptr inbounds i8* %p.0, i64 %.sum6
  %139 = icmp eq i32 %fail_stack.sroa.16.0, 0
  br i1 %139, label %.backedge18, label %140

; <label>:140                                     ; preds = %128
  %141 = add i32 %fail_stack.sroa.16.0, -1
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.0, i64 %142, i32 0
  %144 = load i8** %143, align 8, !tbaa !13
  %145 = icmp eq i8* %144, %138
  %.fail_stack.sroa.16.0 = select i1 %145, i32 %141, i32 %fail_stack.sroa.16.0
  br label %.backedge18

; <label>:146                                     ; preds = %183, %35, %35
  %succeed_n_p.1 = phi i8 [ 0, %35 ], [ 0, %35 ], [ 1, %183 ]
  %147 = load i8* %37, align 1, !tbaa !12
  %148 = zext i8 %147 to i32
  %149 = getelementptr inbounds i8* %p.0, i64 2
  %150 = load i8* %149, align 1, !tbaa !12
  %151 = sext i8 %150 to i32
  %152 = shl nsw i32 %151, 8
  %153 = or i32 %152, %148
  %154 = getelementptr inbounds i8* %p.0, i64 3
  %addconv = add nsw i32 %153, 3
  %.sum = sext i32 %addconv to i64
  %155 = getelementptr inbounds i8* %p.0, i64 %.sum
  %156 = icmp ult i8* %155, %7
  br i1 %156, label %157, label %177

; <label>:157                                     ; preds = %146
  %158 = icmp eq i32 %fail_stack.sroa.16.0, %fail_stack.sroa.10.0
  br i1 %158, label %159, label %171

; <label>:159                                     ; preds = %157
  %160 = load i32* @re_max_failures, align 4, !tbaa !15
  %161 = mul nsw i32 %160, 19
  %162 = icmp ugt i32 %fail_stack.sroa.10.0, %161
  br i1 %162, label %175, label %163

; <label>:163                                     ; preds = %159
  %164 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.0 to i8*
  %165 = shl i32 %fail_stack.sroa.10.0, 1
  %166 = zext i32 %165 to i64
  %167 = shl nuw nsw i64 %166, 3
  %168 = tail call i8* @realloc(i8* %164, i64 %167) #7
  %169 = bitcast i8* %168 to %union.fail_stack_elt*
  %170 = icmp eq i8* %168, null
  %fail_stack.sroa.10.0. = select i1 %170, i32 %fail_stack.sroa.10.0, i32 %165
  br i1 %170, label %175, label %171

; <label>:171                                     ; preds = %163, %157
  %fail_stack.sroa.10.2 = phi i32 [ %fail_stack.sroa.10.0., %163 ], [ %fail_stack.sroa.10.0, %157 ]
  %fail_stack.sroa.0.1 = phi %union.fail_stack_elt* [ %169, %163 ], [ %fail_stack.sroa.0.0, %157 ]
  %172 = add i32 %fail_stack.sroa.16.0, 1
  %173 = zext i32 %fail_stack.sroa.16.0 to i64
  %174 = getelementptr inbounds %union.fail_stack_elt* %fail_stack.sroa.0.1, i64 %173, i32 0
  store i8* %155, i8** %174, align 8, !tbaa !13
  br label %180

; <label>:175                                     ; preds = %163, %159
  %fail_stack.sroa.0.2 = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.0, %159 ], [ %169, %163 ]
  %176 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.2 to i8*
  tail call void @free(i8* %176) #8
  br label %200

; <label>:177                                     ; preds = %146
  %178 = load i8* %14, align 8
  %179 = or i8 %178, 1
  store i8 %179, i8* %14, align 8
  br label %180

; <label>:180                                     ; preds = %177, %171
  %fail_stack.sroa.10.3 = phi i32 [ %fail_stack.sroa.10.2, %171 ], [ %fail_stack.sroa.10.0, %177 ]
  %fail_stack.sroa.0.3 = phi %union.fail_stack_elt* [ %fail_stack.sroa.0.1, %171 ], [ %fail_stack.sroa.0.0, %177 ]
  %fail_stack.sroa.16.1 = phi i32 [ %172, %171 ], [ %fail_stack.sroa.16.0, %177 ]
  %181 = icmp eq i8 %succeed_n_p.1, 0
  %182 = getelementptr inbounds i8* %p.0, i64 5
  %.11 = select i1 %181, i8* %154, i8* %182
  br label %.backedge18

; <label>:183                                     ; preds = %35
  %184 = getelementptr inbounds i8* %p.0, i64 3
  %185 = load i8* %184, align 1, !tbaa !12
  %186 = zext i8 %185 to i32
  %187 = getelementptr inbounds i8* %p.0, i64 4
  %188 = load i8* %187, align 1, !tbaa !12
  %189 = sext i8 %188 to i32
  %190 = shl nsw i32 %189, 8
  %191 = or i32 %190, %186
  %192 = getelementptr inbounds i8* %p.0, i64 5
  %193 = icmp eq i32 %191, 0
  br i1 %193, label %146, label %.backedge18

; <label>:194                                     ; preds = %35
  %195 = getelementptr inbounds i8* %p.0, i64 5
  br label %.backedge18

; <label>:196                                     ; preds = %35, %35
  %197 = getelementptr inbounds i8* %p.0, i64 3
  br label %.backedge18

; <label>:198                                     ; preds = %35
  tail call void @abort() #9
  unreachable

.loopexit17:                                      ; preds = %112, %24, %38
  %199 = bitcast %union.fail_stack_elt* %fail_stack.sroa.0.0 to i8*
  tail call void @free(i8* %199) #8
  br label %200

; <label>:200                                     ; preds = %0, %.loopexit17, %175
  %.0 = phi i32 [ 0, %.loopexit17 ], [ -2, %175 ], [ -2, %0 ]
  ret i32 %.0
}
