define i32 @CCTK_SetKeywordInRangeList(i8** nocapture %data, i8* %value, i32 %n_elements, ...) #1 {
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %1 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.va_start(i8* %1)
  %2 = icmp sgt i32 %n_elements, 0
  br i1 %2, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %0
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 0
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 3
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 2
  br label %8

; <label>:6                                       ; preds = %19
  %7 = icmp slt i32 %24, %n_elements
  br i1 %7, label %8, label %.loopexit

; <label>:8                                       ; preds = %.lr.ph, %6
  %arg.01 = phi i32 [ 0, %.lr.ph ], [ %24, %6 ]
  %9 = load i32* %3, align 16
  %10 = icmp ult i32 %9, 41
  br i1 %10, label %11, label %16

; <label>:11                                      ; preds = %8
  %12 = load i8** %4, align 16
  %13 = sext i32 %9 to i64
  %14 = getelementptr i8* %12, i64 %13
  %15 = add i32 %9, 8
  store i32 %15, i32* %3, align 16
  br label %19

; <label>:16                                      ; preds = %8
  %17 = load i8** %5, align 8
  %18 = getelementptr i8* %17, i64 8
  store i8* %18, i8** %5, align 8
  br label %19

; <label>:19                                      ; preds = %16, %11
  %.in = phi i8* [ %14, %11 ], [ %17, %16 ]
  %20 = bitcast i8* %.in to i8**
  %21 = load i8** %20, align 8
  %22 = call i32 @CCTK_Equals(i8* %value, i8* %21) #8
  %23 = icmp eq i32 %22, 0
  %24 = add nuw nsw i32 %arg.01, 1
  br i1 %23, label %6, label %25

; <label>:25                                      ; preds = %19
  %26 = load i8** %data, align 8, !tbaa !2
  %27 = icmp eq i8* %26, null
  br i1 %27, label %29, label %28

; <label>:28                                      ; preds = %25
  call void @free(i8* %26) #8
  br label %29

; <label>:29                                      ; preds = %25, %28
  %30 = call i64 @strlen(i8* %value) #7
  %31 = add i64 %30, 1
  %32 = call i8* @malloc(i64 %31) #7
  store i8* %32, i8** %data, align 8, !tbaa !2
  %33 = icmp eq i8* %32, null
  br i1 %33, label %.loopexit, label %34

; <label>:34                                      ; preds = %29
  %35 = call i64 @llvm.objectsize.i64.p0i8(i8* %32, i1 false)
  %36 = call i8* @__strcpy_chk(i8* %32, i8* %value, i64 %35) #7
  br label %.loopexit

.loopexit:                                        ; preds = %6, %0, %29, %34
  %retval.0 = phi i32 [ 0, %34 ], [ -1, %29 ], [ 1, %0 ], [ 1, %6 ]
  call void @llvm.va_end(i8* %1)
  ret i32 %retval.0
}
