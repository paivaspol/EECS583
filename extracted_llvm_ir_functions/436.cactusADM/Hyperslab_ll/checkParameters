define internal fastcc i8* @checkParameters(%struct.cGH* %GH, i32 %vindex, i32 %vtimelvl, i32 %hdim, i32* readnone %global_origin, i32* readonly %directions, i32* readnone %extents, i32* readonly %downsample_, i8** readnone %hdata, i32* readnone %hsize) #1 {
  %vinfo = alloca %struct.cGroup, align 4
  %1 = icmp slt i32 %vindex, 0
  br i1 %1, label %.loopexit, label %2

; <label>:2                                       ; preds = %0
  %3 = tail call i32 @CCTK_NumVars() #8
  %4 = icmp sgt i32 %3, %vindex
  br i1 %4, label %5, label %.loopexit

; <label>:5                                       ; preds = %2
  %6 = icmp slt i32 %vtimelvl, 0
  br i1 %6, label %.loopexit, label %7

; <label>:7                                       ; preds = %5
  %8 = tail call i32 @CCTK_NumTimeLevelsFromVarI(i32 %vindex) #8
  %9 = icmp sgt i32 %8, %vtimelvl
  br i1 %9, label %10, label %.loopexit

; <label>:10                                      ; preds = %7
  %11 = icmp ne i32* %global_origin, null
  %12 = icmp ne i32* %directions, null
  %or.cond = and i1 %11, %12
  %13 = icmp ne i32* %extents, null
  %or.cond3 = and i1 %or.cond, %13
  %14 = icmp ne i32* %downsample_, null
  %or.cond5 = and i1 %or.cond3, %14
  %15 = icmp ne i8** %hdata, null
  %or.cond7 = and i1 %or.cond5, %15
  %16 = icmp ne i32* %hsize, null
  %or.cond9 = and i1 %or.cond7, %16
  br i1 %or.cond9, label %.preheader10, label %.loopexit

.preheader10:                                     ; preds = %10
  %17 = icmp sgt i32 %hdim, 0
  br i1 %17, label %.lr.ph14, label %._crit_edge15

.lr.ph14:                                         ; preds = %.preheader10
  %18 = sext i32 %hdim to i64
  br label %21

; <label>:19                                      ; preds = %21
  %20 = icmp slt i64 %indvars.iv.next17, %18
  br i1 %20, label %21, label %._crit_edge15

; <label>:21                                      ; preds = %.lr.ph14, %19
  %indvars.iv16 = phi i64 [ 0, %.lr.ph14 ], [ %indvars.iv.next17, %19 ]
  %22 = getelementptr inbounds i32* %downsample_, i64 %indvars.iv16
  %23 = load i32* %22, align 4, !tbaa !2
  %24 = icmp slt i32 %23, 1
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  br i1 %24, label %.loopexit, label %19

._crit_edge15:                                    ; preds = %19, %.preheader10
  %25 = tail call i32 @CCTK_GroupIndexFromVarI(i32 %vindex) #8
  %26 = call i32 @CCTK_GroupData(i32 %25, %struct.cGroup* %vinfo) #8
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %.loopexit, label %28

; <label>:28                                      ; preds = %._crit_edge15
  %29 = getelementptr inbounds %struct.cGroup* %vinfo, i64 0, i32 0
  %30 = load i32* %29, align 4, !tbaa !37
  %31 = and i32 %30, -2
  %switch = icmp eq i32 %31, 2
  br i1 %switch, label %32, label %.loopexit

; <label>:32                                      ; preds = %28
  %33 = icmp slt i32 %hdim, 0
  br i1 %33, label %.loopexit, label %34

; <label>:34                                      ; preds = %32
  %35 = getelementptr inbounds %struct.cGroup* %vinfo, i64 0, i32 4
  %36 = load i32* %35, align 4, !tbaa !8
  %37 = icmp slt i32 %36, %hdim
  br i1 %37, label %.loopexit, label %38

; <label>:38                                      ; preds = %34
  %39 = icmp eq i32 %36, %hdim
  br i1 %39, label %50, label %.preheader

.preheader:                                       ; preds = %38
  %40 = icmp sgt i32 %36, 0
  br i1 %40, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  %41 = sext i32 %36 to i64
  br label %42

; <label>:42                                      ; preds = %.lr.ph, %42
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %42 ]
  %num_directions.012 = phi i32 [ 0, %.lr.ph ], [ %num_directions.0., %42 ]
  %43 = getelementptr inbounds i32* %directions, i64 %indvars.iv
  %44 = load i32* %43, align 4, !tbaa !2
  %not. = icmp ne i32 %44, 0
  %45 = zext i1 %not. to i32
  %num_directions.0. = add nsw i32 %45, %num_directions.012
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %46 = icmp slt i64 %indvars.iv.next, %41
  br i1 %46, label %42, label %._crit_edge

._crit_edge:                                      ; preds = %42
  %47 = icmp eq i32 %num_directions.0., 0
  br i1 %47, label %.loopexit, label %48

; <label>:48                                      ; preds = %._crit_edge
  %49 = icmp sgt i32 %num_directions.0., 1
  br i1 %49, label %.loopexit, label %50

; <label>:50                                      ; preds = %38, %48
  %51 = call %struct.PGH* @PUGH_pGH(%struct.cGH* %GH) #8
  %52 = icmp eq %struct.PGH* %51, null
  %. = select i1 %52, i8* getelementptr inbounds ([62 x i8]* @.str17, i64 0, i64 0), i8* null
  br label %.loopexit

.loopexit:                                        ; preds = %21, %.preheader, %28, %50, %48, %._crit_edge, %32, %34, %._crit_edge15, %10, %5, %7, %0, %2
  %.0 = phi i8* [ getelementptr inbounds ([23 x i8]* @.str9, i64 0, i64 0), %2 ], [ getelementptr inbounds ([23 x i8]* @.str9, i64 0, i64 0), %0 ], [ getelementptr inbounds ([18 x i8]* @.str10, i64 0, i64 0), %7 ], [ getelementptr inbounds ([18 x i8]* @.str10, i64 0, i64 0), %5 ], [ getelementptr inbounds ([37 x i8]* @.str11, i64 0, i64 0), %10 ], [ getelementptr inbounds ([24 x i8]* @.str13, i64 0, i64 0), %._crit_edge15 ], [ getelementptr inbounds ([28 x i8]* @.str14, i64 0, i64 0), %28 ], [ getelementptr inbounds ([28 x i8]* @.str15, i64 0, i64 0), %34 ], [ getelementptr inbounds ([28 x i8]* @.str15, i64 0, i64 0), %32 ], [ getelementptr inbounds ([37 x i8]* @.str16, i64 0, i64 0), %._crit_edge ], [ getelementptr inbounds ([40 x i8]* @.str5, i64 0, i64 0), %48 ], [ %., %50 ], [ getelementptr inbounds ([37 x i8]* @.str16, i64 0, i64 0), %.preheader ], [ getelementptr inbounds ([40 x i8]* @.str12, i64 0, i64 0), %21 ]
  ret i8* %.0
}
