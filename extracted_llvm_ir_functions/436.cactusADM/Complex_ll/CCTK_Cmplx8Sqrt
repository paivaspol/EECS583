define <2 x float> @CCTK_Cmplx8Sqrt(<2 x float> %complex_number.coerce) #3 {
entry:
  tail call void @llvm.dbg.declare(metadata !241, metadata !81), !dbg !261
  tail call void @llvm.dbg.declare(metadata !241, metadata !86), !dbg !261
  %complex_number.sroa.0.0.vec.extract = extractelement <2 x float> %complex_number.coerce, i32 0, !dbg !261
  %cmp = fcmp oeq float %complex_number.sroa.0.0.vec.extract, 0.000000e+00, !dbg !261
  %complex_number.sroa.0.4.vec.extract = extractelement <2 x float> %complex_number.coerce, i32 1, !dbg !261
  %cmp3 = fcmp oeq float %complex_number.sroa.0.4.vec.extract, 0.000000e+00, !dbg !261
  %or.cond = and i1 %cmp, %cmp3, !dbg !261
  br i1 %or.cond, label %if.end68, label %if.else, !dbg !261

if.else:                                          ; preds = %entry
  %fabsf = tail call float @fabsf(float %complex_number.sroa.0.0.vec.extract) #5, !dbg !262
  tail call void @llvm.dbg.value(metadata !{float %fabsf}, i64 0, metadata !82), !dbg !262
  %conv11 = fpext float %complex_number.sroa.0.4.vec.extract to double, !dbg !262
  %fabsf98 = tail call float @fabsf(float %complex_number.sroa.0.4.vec.extract) #5, !dbg !262
  tail call void @llvm.dbg.value(metadata !{float %fabsf98}, i64 0, metadata !83), !dbg !262
  %cmp14 = fcmp ult float %fabsf, %fabsf98, !dbg !262
  br i1 %cmp14, label %if.else27, label %if.then16, !dbg !262

if.then16:                                        ; preds = %if.else
  %div = fdiv float %fabsf98, %fabsf, !dbg !264
  tail call void @llvm.dbg.value(metadata !{float %div}, i64 0, metadata !85), !dbg !264
  %conv17 = fpext float %fabsf to double, !dbg !264
  %call18 = tail call double @sqrt(double %conv17) #7, !dbg !264
  %conv19 = fpext float %div to double, !dbg !264
  %mul21 = fmul double %conv19, %conv19, !dbg !264
  %call22 = tail call double @sqrt(double %mul21) #7, !dbg !264
  %add = fadd double %call22, 1.000000e+00, !dbg !264
  %mul23 = fmul double %add, 5.000000e-01, !dbg !264
  %call24 = tail call double @sqrt(double %mul23) #7, !dbg !264
  %mul25 = fmul double %call18, %call24, !dbg !264
  br label %if.end, !dbg !264

if.else27:                                        ; preds = %if.else
  %div28 = fdiv float %fabsf, %fabsf98, !dbg !266
  tail call void @llvm.dbg.value(metadata !{float %div28}, i64 0, metadata !85), !dbg !266
  %conv29 = fpext float %fabsf98 to double, !dbg !266
  %call30 = tail call double @sqrt(double %conv29) #7, !dbg !266
  %conv31 = fpext float %div28 to double, !dbg !266
  %mul35 = fmul double %conv31, %conv31, !dbg !266
  %call36 = tail call double @sqrt(double %mul35) #7, !dbg !266
  %add37 = fadd double %conv31, %call36, !dbg !266
  %mul38 = fmul double %add37, 5.000000e-01, !dbg !266
  %call39 = tail call double @sqrt(double %mul38) #7, !dbg !266
  %mul40 = fmul double %call30, %call39, !dbg !266
  br label %if.end

if.end:                                           ; preds = %if.else27, %if.then16
  %w.0.in = phi double [ %mul25, %if.then16 ], [ %mul40, %if.else27 ]
  %w.0 = fptrunc double %w.0.in to float, !dbg !264
  %cmp44 = fcmp ult float %complex_number.sroa.0.0.vec.extract, 0.000000e+00, !dbg !262
  br i1 %cmp44, label %if.else55, label %if.then46, !dbg !262

if.then46:                                        ; preds = %if.end
  %conv50 = fpext float %w.0 to double, !dbg !268
  %mul51 = fmul double %conv50, 2.000000e+00, !dbg !268
  %div52 = fdiv double %conv11, %mul51, !dbg !268
  %conv53 = fptrunc double %div52 to float, !dbg !268
  br label %if.end68, !dbg !268

if.else55:                                        ; preds = %if.end
  %cmp57 = fcmp ult float %complex_number.sroa.0.4.vec.extract, 0.000000e+00, !dbg !270
  br i1 %cmp57, label %cond.false, label %cond.end, !dbg !270

cond.false:                                       ; preds = %if.else55
  %sub = fsub float -0.000000e+00, %w.0, !dbg !270
  br label %cond.end, !dbg !270

cond.end:                                         ; preds = %if.else55, %cond.false
  %cond = phi float [ %sub, %cond.false ], [ %w.0, %if.else55 ], !dbg !270
  tail call void @llvm.dbg.value(metadata !{float %cond}, i64 0, metadata !82), !dbg !270
  %conv61 = fpext float %cond to double, !dbg !270
  %mul62 = fmul double %conv61, 2.000000e+00, !dbg !270
  %div63 = fdiv double %conv11, %mul62, !dbg !270
  %conv64 = fptrunc double %div63 to float, !dbg !270
  br label %if.end68

if.end68:                                         ; preds = %entry, %if.then46, %cond.end
  %result.sroa.1.0 = phi float [ %conv53, %if.then46 ], [ %cond, %cond.end ], [ 0.000000e+00, %entry ]
  %result.sroa.0.0 = phi float [ %w.0, %if.then46 ], [ %conv64, %cond.end ], [ 0.000000e+00, %entry ]
  %retval.sroa.0.0.vec.insert = insertelement <2 x float> undef, float %result.sroa.0.0, i32 0, !dbg !261
  %retval.sroa.0.4.vec.insert = insertelement <2 x float> %retval.sroa.0.0.vec.insert, float %result.sroa.1.0, i32 1, !dbg !261
  ret <2 x float> %retval.sroa.0.4.vec.insert, !dbg !261
}
