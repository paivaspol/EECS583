define <2 x float> @CCTK_Cmplx8Exp(<2 x float> %complex_number.coerce) #3 {
entry:
  tail call void @llvm.dbg.declare(metadata !241, metadata !75), !dbg !260
  tail call void @llvm.dbg.declare(metadata !241, metadata !78), !dbg !260
  %complex_number.sroa.0.0.vec.extract = extractelement <2 x float> %complex_number.coerce, i32 0, !dbg !260
  %conv = fpext float %complex_number.sroa.0.0.vec.extract to double, !dbg !260
  %call = tail call double @exp(double %conv) #7, !dbg !260
  %conv1 = fptrunc double %call to float, !dbg !260
  tail call void @llvm.dbg.value(metadata !{float %conv1}, i64 0, metadata !76), !dbg !260
  %complex_number.sroa.0.4.vec.extract = extractelement <2 x float> %complex_number.coerce, i32 1, !dbg !260
  tail call void @llvm.dbg.value(metadata !{float %complex_number.sroa.0.4.vec.extract}, i64 0, metadata !77), !dbg !260
  %conv2 = fpext float %conv1 to double, !dbg !260
  %conv3 = fpext float %complex_number.sroa.0.4.vec.extract to double, !dbg !260
  %call4 = tail call double @cos(double %conv3) #7, !dbg !260
  %mul = fmul double %call4, %conv2, !dbg !260
  %conv5 = fptrunc double %mul to float, !dbg !260
  %call9 = tail call double @sin(double %conv3) #7, !dbg !260
  %mul10 = fmul double %conv2, %call9, !dbg !260
  %conv11 = fptrunc double %mul10 to float, !dbg !260
  %retval.sroa.0.0.vec.insert = insertelement <2 x float> undef, float %conv5, i32 0, !dbg !260
  %retval.sroa.0.4.vec.insert = insertelement <2 x float> %retval.sroa.0.0.vec.insert, float %conv11, i32 1, !dbg !260
  ret <2 x float> %retval.sroa.0.4.vec.insert, !dbg !260
}
