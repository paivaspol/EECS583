define void @CCTK_Cmplx32Sqrt(%struct.CCTK_COMPLEX32* noalias nocapture sret %agg.result, %struct.CCTK_COMPLEX32* byval nocapture align 16 %complex_number) #3 {
entry:
  %result.sroa.1 = alloca [6 x i8], align 2
  %result.sroa.3 = alloca [6 x i8], align 2
  call void @llvm.dbg.declare(metadata !{%struct.CCTK_COMPLEX32* %complex_number}, metadata !231), !dbg !328
  call void @llvm.dbg.declare(metadata !305, metadata !236), !dbg !328
  %Re = getelementptr inbounds %struct.CCTK_COMPLEX32* %complex_number, i64 0, i32 0, !dbg !328
  %0 = load x86_fp80* %Re, align 16, !dbg !328, !tbaa !307
  %cmp = fcmp oeq x86_fp80 %0, 0xK00000000000000000000, !dbg !328
  %Im = getelementptr inbounds %struct.CCTK_COMPLEX32* %complex_number, i64 0, i32 1, !dbg !328
  %1 = load x86_fp80* %Im, align 16, !dbg !328, !tbaa !307
  %cmp1 = fcmp oeq x86_fp80 %1, 0xK00000000000000000000, !dbg !328
  %or.cond = and i1 %cmp, %cmp1, !dbg !328
  br i1 %or.cond, label %if.end56, label %if.else, !dbg !328

if.else:                                          ; preds = %entry
  %conv = fptrunc x86_fp80 %0 to double, !dbg !329
  %call = call double @fabs(double %conv) #8, !dbg !329
  %conv5 = fpext double %call to x86_fp80, !dbg !329
  call void @llvm.dbg.value(metadata !{x86_fp80 %conv5}, i64 0, metadata !232), !dbg !329
  %conv7 = fptrunc x86_fp80 %1 to double, !dbg !329
  %call8 = call double @fabs(double %conv7) #8, !dbg !329
  %conv9 = fpext double %call8 to x86_fp80, !dbg !329
  call void @llvm.dbg.value(metadata !{x86_fp80 %conv9}, i64 0, metadata !233), !dbg !329
  %cmp10 = fcmp ult double %call, %call8, !dbg !329
  br i1 %cmp10, label %if.else22, label %if.then12, !dbg !329

if.then12:                                        ; preds = %if.else
  %div = fdiv x86_fp80 %conv9, %conv5, !dbg !331
  call void @llvm.dbg.value(metadata !{x86_fp80 %div}, i64 0, metadata !235), !dbg !331
  %call14 = call double @sqrt(double %call) #7, !dbg !331
  %mul15 = fmul x86_fp80 %div, %div, !dbg !331
  %conv16 = fptrunc x86_fp80 %mul15 to double, !dbg !331
  %call17 = call double @sqrt(double %conv16) #7, !dbg !331
  %add = fadd double %call17, 1.000000e+00, !dbg !331
  %mul18 = fmul double %add, 5.000000e-01, !dbg !331
  %call19 = call double @sqrt(double %mul18) #7, !dbg !331
  %mul20 = fmul double %call14, %call19, !dbg !331
  br label %if.end, !dbg !331

if.else22:                                        ; preds = %if.else
  %div23 = fdiv x86_fp80 %conv5, %conv9, !dbg !333
  call void @llvm.dbg.value(metadata !{x86_fp80 %div23}, i64 0, metadata !235), !dbg !333
  %call25 = call double @sqrt(double %call8) #7, !dbg !333
  %mul27 = fmul x86_fp80 %div23, %div23, !dbg !333
  %conv28 = fptrunc x86_fp80 %mul27 to double, !dbg !333
  %call29 = call double @sqrt(double %conv28) #7, !dbg !333
  %conv30 = fpext double %call29 to x86_fp80, !dbg !333
  %add31 = fadd x86_fp80 %div23, %conv30, !dbg !333
  %mul32 = fmul x86_fp80 %add31, 0xK3FFE8000000000000000, !dbg !333
  %conv33 = fptrunc x86_fp80 %mul32 to double, !dbg !333
  %call34 = call double @sqrt(double %conv33) #7, !dbg !333
  %mul35 = fmul double %call25, %call34, !dbg !333
  br label %if.end

if.end:                                           ; preds = %if.else22, %if.then12
  %w.0.in = phi double [ %mul20, %if.then12 ], [ %mul35, %if.else22 ]
  %w.0 = fpext double %w.0.in to x86_fp80, !dbg !331
  %cmp38 = fcmp ult x86_fp80 %0, 0xK00000000000000000000, !dbg !329
  br i1 %cmp38, label %if.else46, label %if.then40, !dbg !329

if.then40:                                        ; preds = %if.end
  %mul43 = fmul x86_fp80 %w.0, 0xK40008000000000000000, !dbg !335
  %div44 = fdiv x86_fp80 %1, %mul43, !dbg !335
  br label %if.end56, !dbg !335

if.else46:                                        ; preds = %if.end
  %cmp48 = fcmp ult x86_fp80 %1, 0xK00000000000000000000, !dbg !337
  br i1 %cmp48, label %cond.false, label %cond.end, !dbg !337

cond.false:                                       ; preds = %if.else46
  %sub = fsub x86_fp80 0xK80000000000000000000, %w.0, !dbg !337
  br label %cond.end, !dbg !337

cond.end:                                         ; preds = %if.else46, %cond.false
  %cond = phi x86_fp80 [ %sub, %cond.false ], [ %w.0, %if.else46 ], !dbg !337
  call void @llvm.dbg.value(metadata !{x86_fp80 %cond}, i64 0, metadata !232), !dbg !337
  %mul51 = fmul x86_fp80 %cond, 0xK40008000000000000000, !dbg !337
  %div52 = fdiv x86_fp80 %1, %mul51, !dbg !337
  br label %if.end56

if.end56:                                         ; preds = %entry, %if.then40, %cond.end
  %result.sroa.2.0 = phi x86_fp80 [ %div44, %if.then40 ], [ %cond, %cond.end ], [ 0xK00000000000000000000, %entry ]
  %result.sroa.0.0 = phi x86_fp80 [ %w.0, %if.then40 ], [ %div52, %cond.end ], [ 0xK00000000000000000000, %entry ]
  %result.sroa.0.0.idx = getelementptr inbounds %struct.CCTK_COMPLEX32* %agg.result, i64 0, i32 0, !dbg !328
  store x86_fp80 %result.sroa.0.0, x86_fp80* %result.sroa.0.0.idx, align 16, !dbg !328
  %result.sroa.1.10.raw_cast = bitcast %struct.CCTK_COMPLEX32* %agg.result to i8*, !dbg !328
  %result.sroa.1.10.raw_idx = getelementptr inbounds i8* %result.sroa.1.10.raw_cast, i64 10, !dbg !328
  %result.sroa.1.10.idx = getelementptr inbounds [6 x i8]* %result.sroa.1, i64 0, i64 0, !dbg !328
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %result.sroa.1.10.raw_idx, i8* %result.sroa.1.10.idx, i64 6, i32 2, i1 false), !dbg !328
  %result.sroa.2.16.idx57 = getelementptr inbounds %struct.CCTK_COMPLEX32* %agg.result, i64 0, i32 1, !dbg !328
  store x86_fp80 %result.sroa.2.0, x86_fp80* %result.sroa.2.16.idx57, align 16, !dbg !328
  %result.sroa.3.26.raw_idx = getelementptr inbounds i8* %result.sroa.1.10.raw_cast, i64 26, !dbg !328
  %result.sroa.3.26.idx = getelementptr inbounds [6 x i8]* %result.sroa.3, i64 0, i64 0, !dbg !328
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %result.sroa.3.26.raw_idx, i8* %result.sroa.3.26.idx, i64 6, i32 2, i1 false), !dbg !328
  ret void, !dbg !328
}
