define <2 x float> @CCTK_Cmplx8Cos(<2 x float> %complex_number.coerce) #3 {
entry:
  tail call void @llvm.dbg.declare(metadata !241, metadata !71), !dbg !255
  tail call void @llvm.dbg.declare(metadata !241, metadata !72), !dbg !255
  %complex_number.sroa.0.4.vec.extract = extractelement <2 x float> %complex_number.coerce, i32 1, !dbg !255
  %conv = fpext float %complex_number.sroa.0.4.vec.extract to double, !dbg !255
  %cmp = fcmp oeq float %complex_number.sroa.0.4.vec.extract, 0.000000e+00, !dbg !255
  %complex_number.sroa.0.0.vec.extract = extractelement <2 x float> %complex_number.coerce, i32 0, !dbg !256
  %conv2 = fpext float %complex_number.sroa.0.0.vec.extract to double, !dbg !256
  %call = tail call double @cos(double %conv2) #7, !dbg !256
  br i1 %cmp, label %if.end, label %if.else, !dbg !255

if.else:                                          ; preds = %entry
  %call11 = tail call double @cosh(double %conv) #7, !dbg !258
  %mul = fmul double %call, %call11, !dbg !258
  %call16 = tail call double @sin(double %conv2) #7, !dbg !258
  %call19 = tail call double @sinh(double %conv) #7, !dbg !258
  %mul20 = fmul double %call16, %call19, !dbg !258
  %conv21 = fptrunc double %mul20 to float, !dbg !258
  br label %if.end

if.end:                                           ; preds = %entry, %if.else
  %result.sroa.1.0 = phi float [ %conv21, %if.else ], [ 0.000000e+00, %entry ]
  %result.sroa.0.0.in = phi double [ %mul, %if.else ], [ %call, %entry ]
  %result.sroa.0.0 = fptrunc double %result.sroa.0.0.in to float, !dbg !256
  %retval.sroa.0.0.vec.insert = insertelement <2 x float> undef, float %result.sroa.0.0, i32 0, !dbg !255
  %retval.sroa.0.4.vec.insert = insertelement <2 x float> %retval.sroa.0.0.vec.insert, float %result.sroa.1.0, i32 1, !dbg !255
  ret <2 x float> %retval.sroa.0.4.vec.insert, !dbg !255
}
