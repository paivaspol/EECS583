define { double, double } @CCTK_Cmplx16Exp(double %complex_number.coerce0, double %complex_number.coerce1) #3 {
entry:
  tail call void @llvm.dbg.declare(metadata !273, metadata !150), !dbg !292
  tail call void @llvm.dbg.declare(metadata !273, metadata !153), !dbg !292
  %call = tail call double @exp(double %complex_number.coerce0) #7, !dbg !292
  tail call void @llvm.dbg.value(metadata !{double %call}, i64 0, metadata !151), !dbg !292
  tail call void @llvm.dbg.value(metadata !{double %complex_number.coerce1}, i64 0, metadata !152), !dbg !292
  %call1 = tail call double @cos(double %complex_number.coerce1) #7, !dbg !292
  %mul = fmul double %call, %call1, !dbg !292
  %call3 = tail call double @sin(double %complex_number.coerce1) #7, !dbg !292
  %mul4 = fmul double %call, %call3, !dbg !292
  %.fca.0.insert = insertvalue { double, double } undef, double %mul, 0, !dbg !292
  %.fca.1.insert = insertvalue { double, double } %.fca.0.insert, double %mul4, 1, !dbg !292
  ret { double, double } %.fca.1.insert, !dbg !292
}
