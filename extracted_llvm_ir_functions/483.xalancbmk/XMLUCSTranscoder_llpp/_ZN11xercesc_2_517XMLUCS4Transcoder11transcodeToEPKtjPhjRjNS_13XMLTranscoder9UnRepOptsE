define i32 @_ZN11xercesc_2_517XMLUCS4Transcoder11transcodeToEPKtjPhjRjNS_13XMLTranscoder9UnRepOptsE(%"class.xercesc_2_5::XMLUCS4Transcoder"* nocapture %this, i16* %srcData, i32 %srcCount, i8* %toFill, i32 %maxBytes, i32* nocapture %charsEaten, i32) unnamed_addr #0 align 2 {
entry:
  tail call void @llvm.dbg.value(metadata !{%"class.xercesc_2_5::XMLUCS4Transcoder"* %this}, i64 0, metadata !700), !dbg !989
  tail call void @llvm.dbg.value(metadata !{i16* %srcData}, i64 0, metadata !701), !dbg !989
  tail call void @llvm.dbg.value(metadata !{i32 %srcCount}, i64 0, metadata !702), !dbg !990
  tail call void @llvm.dbg.value(metadata !{i8* %toFill}, i64 0, metadata !703), !dbg !991
  tail call void @llvm.dbg.value(metadata !{i32 %maxBytes}, i64 0, metadata !704), !dbg !992
  tail call void @llvm.dbg.value(metadata !{i32* %charsEaten}, i64 0, metadata !705), !dbg !993
  tail call void @llvm.dbg.value(metadata !{i32 %0}, i64 0, metadata !706), !dbg !994
  tail call void @llvm.dbg.value(metadata !{i16* %srcData}, i64 0, metadata !707), !dbg !995
  %idx.ext = zext i32 %srcCount to i64, !dbg !996
  %add.ptr = getelementptr inbounds i16* %srcData, i64 %idx.ext, !dbg !996
  tail call void @llvm.dbg.value(metadata !{i16* %add.ptr}, i64 0, metadata !708), !dbg !996
  %1 = bitcast i8* %toFill to i32*, !dbg !997
  tail call void @llvm.dbg.value(metadata !{i32* %1}, i64 0, metadata !709), !dbg !997
  %conv = zext i32 %maxBytes to i64, !dbg !998
  %div = lshr i64 %conv, 2, !dbg !998
  %add.ptr2 = getelementptr inbounds i32* %1, i64 %div, !dbg !998
  tail call void @llvm.dbg.value(metadata !{i32* %add.ptr2}, i64 0, metadata !711), !dbg !998
  %cmp66 = icmp ult i32* %1, %add.ptr2, !dbg !999
  %cmp367 = icmp ne i32 %srcCount, 0, !dbg !999
  %or.cond68 = and i1 %cmp66, %cmp367, !dbg !999
  br i1 %or.cond68, label %while.body.lr.ph, label %while.end, !dbg !999

while.body.lr.ph:                                 ; preds = %entry
  %fSwapped = getelementptr inbounds %"class.xercesc_2_5::XMLUCS4Transcoder"* %this, i64 0, i32 1, !dbg !1000
  br label %while.body, !dbg !999

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %srcPtr.070 = phi i16* [ %srcData, %while.body.lr.ph ], [ %srcPtr.0.be, %while.cond.backedge ]
  %outPtr.069 = phi i32* [ %1, %while.body.lr.ph ], [ %outPtr.0.be, %while.cond.backedge ]
  %2 = load i16* %srcPtr.070, align 2, !dbg !1001, !tbaa !979
  tail call void @llvm.dbg.value(metadata !{i16 %2}, i64 0, metadata !713), !dbg !1001
  %conv4 = zext i16 %2 to i32, !dbg !1002
  %.off = add i16 %2, 10240, !dbg !1002
  %3 = icmp ult i16 %.off, 1024, !dbg !1002
  br i1 %3, label %if.then, label %if.else, !dbg !1002

if.then:                                          ; preds = %while.body
  %add.ptr8 = getelementptr inbounds i16* %srcPtr.070, i64 1, !dbg !1003
  %cmp9 = icmp eq i16* %add.ptr8, %add.ptr, !dbg !1003
  br i1 %cmp9, label %while.end, label %if.end, !dbg !1003

if.end:                                           ; preds = %if.then
  tail call void @llvm.dbg.value(metadata !{i16* %add.ptr8}, i64 0, metadata !707), !dbg !1005
  tail call void @llvm.dbg.value(metadata !{i16* %incdec.ptr11}, i64 0, metadata !707), !dbg !1006
  %4 = load i16* %add.ptr8, align 2, !dbg !1006, !tbaa !979
  tail call void @llvm.dbg.value(metadata !{i16 %4}, i64 0, metadata !712), !dbg !1006
  %.off63 = add i16 %4, 9216, !dbg !1007
  %5 = icmp ult i16 %.off63, 1024, !dbg !1007
  br i1 %5, label %if.end19, label %if.then17, !dbg !1007

if.then17:                                        ; preds = %if.end
  %exception = tail call i8* @__cxa_allocate_exception(i64 48) #8, !dbg !1008
  %6 = bitcast i8* %exception to %"class.xercesc_2_5::TranscodingException"*, !dbg !1008
  %fMemoryManager.i = getelementptr inbounds %"class.xercesc_2_5::XMLUCS4Transcoder"* %this, i64 0, i32 0, i32 3, !dbg !1009
  %7 = load %"class.xercesc_2_5::MemoryManager"** %fMemoryManager.i, align 8, !dbg !1009, !tbaa !1011
  tail call void @llvm.dbg.value(metadata !{%"class.xercesc_2_5::TranscodingException"* %6}, i64 0, metadata !1012), !dbg !1013
  tail call void @llvm.dbg.value(metadata !1014, i64 0, metadata !1015), !dbg !1013
  tail call void @llvm.dbg.value(metadata !1016, i64 0, metadata !1017), !dbg !1013
  tail call void @llvm.dbg.value(metadata !1018, i64 0, metadata !1019), !dbg !1013
  tail call void @llvm.dbg.value(metadata !{%"class.xercesc_2_5::MemoryManager"* %7}, i64 0, metadata !1020), !dbg !1013
  invoke void @_ZN11xercesc_2_520TranscodingExceptionC2EPKcjNS_10XMLExcepts5CodesEPNS_13MemoryManagerE(%"class.xercesc_2_5::TranscodingException"* %6, i8* getelementptr inbounds ([68 x i8]* @.str, i64 0, i64 0), i32 250, i32 95, %"class.xercesc_2_5::MemoryManager"* %7) #6
          to label %invoke.cont18 unwind label %lpad

invoke.cont18:                                    ; preds = %if.then17
  tail call void @__cxa_throw(i8* %exception, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN11xercesc_2_520TranscodingExceptionE to i8*), i8* bitcast (void (%"class.xercesc_2_5::TranscodingException"*)* @_ZN11xercesc_2_520TranscodingExceptionD1Ev to i8*)) #9, !dbg !1008
  unreachable, !dbg !1008

lpad:                                             ; preds = %if.then17
  %8 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup, !dbg !1008
  tail call void @__cxa_free_exception(i8* %exception) #8, !dbg !1008
  resume { i8*, i32 } %8, !dbg !1008

if.end19:                                         ; preds = %if.end
  %conv12 = zext i16 %4 to i32, !dbg !1007
  %incdec.ptr11 = getelementptr inbounds i16* %srcPtr.070, i64 2, !dbg !1006
  %sub = shl nuw nsw i32 %conv4, 10, !dbg !1021
  %sub22 = add i32 %sub, -56613888, !dbg !1021
  %add23 = add i32 %sub22, %conv12, !dbg !1021
  store i32 %add23, i32* %outPtr.069, align 4, !dbg !1021, !tbaa !966
  br label %while.cond.backedge, !dbg !1022

if.else:                                          ; preds = %while.body
  tail call void @llvm.dbg.value(metadata !{i32 %conv4}, i64 0, metadata !715), !dbg !1023
  %9 = load i8* %fSwapped, align 1, !dbg !1000, !tbaa !939, !range !967
  %tobool = icmp eq i8 %9, 0, !dbg !1000
  br i1 %tobool, label %if.end31, label %if.then26, !dbg !1000

if.then26:                                        ; preds = %if.else
  tail call void @llvm.dbg.value(metadata !{i32 %conv4}, i64 0, metadata !1024) #8, !dbg !1026
  %or5.i = tail call i32 @llvm.bswap.i32(i32 %conv4) #8, !dbg !1027
  br label %if.end31, !dbg !1025

if.end31:                                         ; preds = %if.else, %if.then26
  %storemerge = phi i32 [ %or5.i, %if.then26 ], [ %conv4, %if.else ]
  store i32 %storemerge, i32* %outPtr.069, align 4, !dbg !1025, !tbaa !966
  %incdec.ptr32 = getelementptr inbounds i16* %srcPtr.070, i64 1, !dbg !1028
  tail call void @llvm.dbg.value(metadata !{i16* %incdec.ptr32}, i64 0, metadata !707), !dbg !1028
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.end31, %if.end19
  %srcPtr.0.be = phi i16* [ %incdec.ptr11, %if.end19 ], [ %incdec.ptr32, %if.end31 ]
  %outPtr.0.be = getelementptr inbounds i32* %outPtr.069, i64 1, !dbg !1021
  %cmp = icmp ult i32* %outPtr.0.be, %add.ptr2, !dbg !999
  %cmp3 = icmp ult i16* %srcPtr.0.be, %add.ptr, !dbg !999
  %or.cond = and i1 %cmp, %cmp3, !dbg !999
  br i1 %or.cond, label %while.body, label %while.end, !dbg !999

while.end:                                        ; preds = %while.cond.backedge, %if.then, %entry
  %srcPtr.0.lcssa = phi i16* [ %srcData, %entry ], [ %srcPtr.070, %if.then ], [ %srcPtr.0.be, %while.cond.backedge ]
  %outPtr.0.lcssa = phi i32* [ %1, %entry ], [ %outPtr.069, %if.then ], [ %outPtr.0.be, %while.cond.backedge ]
  %sub.ptr.lhs.cast = ptrtoint i16* %srcPtr.0.lcssa to i64, !dbg !1029
  %sub.ptr.rhs.cast = ptrtoint i16* %srcData to i64, !dbg !1029
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !1029
  %sub.ptr.div60 = lshr exact i64 %sub.ptr.sub, 1, !dbg !1029
  %conv34 = trunc i64 %sub.ptr.div60 to i32, !dbg !1029
  store i32 %conv34, i32* %charsEaten, align 4, !dbg !1029, !tbaa !966
  %sub.ptr.lhs.cast35 = ptrtoint i32* %outPtr.0.lcssa to i64, !dbg !1030
  %sub.ptr.rhs.cast36 = ptrtoint i8* %toFill to i64, !dbg !1030
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36, !dbg !1030
  %conv38 = trunc i64 %sub.ptr.sub37 to i32, !dbg !1030
  ret i32 %conv38, !dbg !1030
}
