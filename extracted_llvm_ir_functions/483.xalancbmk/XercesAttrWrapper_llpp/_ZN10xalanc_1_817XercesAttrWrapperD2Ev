define void @_ZN10xalanc_1_817XercesAttrWrapperD2Ev(%"class.xalanc_1_8::XercesAttrWrapper"* %this) unnamed_addr #0 align 2 {
entry:
  tail call void @llvm.dbg.value(metadata !{%"class.xalanc_1_8::XercesAttrWrapper"* %this}, i64 0, metadata !7583), !dbg !7716
  %0 = getelementptr inbounds %"class.xalanc_1_8::XercesAttrWrapper"* %this, i64 0, i32 0, i32 0, i32 0, !dbg !7717
  store i32 (...)** bitcast (i8** getelementptr inbounds ([35 x i8*]* @_ZTVN10xalanc_1_817XercesAttrWrapperE, i64 0, i64 2) to i32 (...)**), i32 (...)*** %0, align 8, !dbg !7717, !tbaa !7707
  %m_children = getelementptr inbounds %"class.xalanc_1_8::XercesAttrWrapper"* %this, i64 0, i32 2, !dbg !7718
  invoke void @_ZN10xalanc_1_821XercesNodeListWrapperD1Ev(%"class.xalanc_1_8::XercesNodeListWrapper"* %m_children) #8
          to label %invoke.cont unwind label %lpad, !dbg !7718

invoke.cont:                                      ; preds = %entry
  %1 = getelementptr inbounds %"class.xalanc_1_8::XercesAttrWrapper"* %this, i64 0, i32 0, !dbg !7718
  tail call void @_ZN10xalanc_1_89XalanAttrD2Ev(%"class.xalanc_1_8::XalanAttr"* %1) #8, !dbg !7718
  ret void, !dbg !7720

lpad:                                             ; preds = %entry
  %2 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup, !dbg !7718
  %3 = getelementptr inbounds %"class.xalanc_1_8::XercesAttrWrapper"* %this, i64 0, i32 0, !dbg !7720
  invoke void @_ZN10xalanc_1_89XalanAttrD2Ev(%"class.xalanc_1_8::XalanAttr"* %3) #8
          to label %eh.resume unwind label %terminate.lpad, !dbg !7720

eh.resume:                                        ; preds = %lpad
  resume { i8*, i32 } %2, !dbg !7720

terminate.lpad:                                   ; preds = %lpad
  %4 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null, !dbg !7720
  %5 = extractvalue { i8*, i32 } %4, 0, !dbg !7720
  tail call void @__clang_call_terminate(i8* %5) #9, !dbg !7720
  unreachable, !dbg !7720
}
