define internal i32 @_ZN3povL9compboxesEPvS0_(i8* nocapture %in_a, i8* nocapture %in_b) #5 {
entry:
  tail call void @llvm.dbg.value(metadata !{i8* %in_a}, i64 0, metadata !1126), !dbg !2011
  tail call void @llvm.dbg.value(metadata !{i8* %in_b}, i64 0, metadata !1127), !dbg !2011
  %0 = bitcast i8* %in_a to %"struct.pov::BBox_Tree_Struct"**, !dbg !2012
  %1 = load %"struct.pov::BBox_Tree_Struct"** %0, align 8, !dbg !2012, !tbaa !1312
  %2 = bitcast i8* %in_b to %"struct.pov::BBox_Tree_Struct"**, !dbg !2013
  %3 = load %"struct.pov::BBox_Tree_Struct"** %2, align 8, !dbg !2013, !tbaa !1312
  %4 = load i32* @_ZN3povL4AxisE, align 4, !dbg !2014, !tbaa !1316
  %idxprom = sext i32 %4 to i64, !dbg !2014
  %arrayidx = getelementptr inbounds %"struct.pov::BBox_Tree_Struct"* %1, i64 0, i32 2, i32 0, i64 %idxprom, !dbg !2014
  %5 = load float* %arrayidx, align 4, !dbg !2014, !tbaa !1371
  %conv = fpext float %5 to double, !dbg !2014
  %mul = fmul double %conv, 2.000000e+00, !dbg !2014
  %arrayidx3 = getelementptr inbounds %"struct.pov::BBox_Tree_Struct"* %1, i64 0, i32 2, i32 1, i64 %idxprom, !dbg !2014
  %6 = load float* %arrayidx3, align 4, !dbg !2014, !tbaa !1371
  %conv4 = fpext float %6 to double, !dbg !2014
  %add = fadd double %mul, %conv4, !dbg !2014
  tail call void @llvm.dbg.value(metadata !{double %add}, i64 0, metadata !1131), !dbg !2014
  %arrayidx7 = getelementptr inbounds %"struct.pov::BBox_Tree_Struct"* %3, i64 0, i32 2, i32 0, i64 %idxprom, !dbg !2015
  %7 = load float* %arrayidx7, align 4, !dbg !2015, !tbaa !1371
  %conv8 = fpext float %7 to double, !dbg !2015
  %mul9 = fmul double %conv8, 2.000000e+00, !dbg !2015
  %arrayidx12 = getelementptr inbounds %"struct.pov::BBox_Tree_Struct"* %3, i64 0, i32 2, i32 1, i64 %idxprom, !dbg !2015
  %8 = load float* %arrayidx12, align 4, !dbg !2015, !tbaa !1371
  %conv13 = fpext float %8 to double, !dbg !2015
  %add14 = fadd double %mul9, %conv13, !dbg !2015
  tail call void @llvm.dbg.value(metadata !{double %add14}, i64 0, metadata !1132), !dbg !2015
  %cmp = fcmp olt double %add, %add14, !dbg !2016
  br i1 %cmp, label %return, label %if.else, !dbg !2016

if.else:                                          ; preds = %entry
  %not.cmp15 = fcmp une double %add, %add14, !dbg !2017
  %. = zext i1 %not.cmp15 to i32, !dbg !2017
  br label %return, !dbg !2017

return:                                           ; preds = %if.else, %entry
  %retval.0 = phi i32 [ -1, %entry ], [ %., %if.else ]
  ret i32 %retval.0, !dbg !2020
}
