define internal i32 @_ZN3povL11Inside_ConeEPdPNS_13Object_StructE(double* %IPoint, %"struct.pov::Object_Struct"* nocapture readonly %Object) #0 {
  %New_Point = alloca [3 x double], align 16
  tail call void @llvm.dbg.value(metadata double* %IPoint, i64 0, metadata !1031, metadata !1443), !dbg !1822
  tail call void @llvm.dbg.value(metadata %"struct.pov::Object_Struct"* %Object, i64 0, metadata !1032, metadata !1443), !dbg !1823
  %1 = getelementptr inbounds %"struct.pov::Object_Struct"* %Object, i64 0, i32 13, !dbg !1824
  %2 = load i32* %1, align 4, !dbg !1824, !tbaa !1499
  %3 = and i32 %2, 2, !dbg !1824
  %4 = icmp ne i32 %3, 0, !dbg !1824
  %5 = select i1 %4, double -1.000000e-07, double 1.000000e-07, !dbg !1824
  tail call void @llvm.dbg.value(metadata double %5, i64 0, metadata !1036, metadata !1443), !dbg !1825
  tail call void @llvm.dbg.declare(metadata [3 x double]* %New_Point, metadata !1037, metadata !1443), !dbg !1826
  %6 = getelementptr inbounds [3 x double]* %New_Point, i64 0, i64 0, !dbg !1827
  %7 = getelementptr inbounds %"struct.pov::Object_Struct"* %Object, i64 0, i32 10, !dbg !1828
  %8 = load %"struct.pov::Transform_Struct"** %7, align 8, !dbg !1828, !tbaa !1465
  call void @_ZN3pov14MInvTransPointEPdS0_PNS_16Transform_StructE(double* %6, double* %IPoint, %"struct.pov::Transform_Struct"* %8) #6, !dbg !1829
  %9 = bitcast [3 x double]* %New_Point to <2 x double>*, !dbg !1830
  %10 = load <2 x double>* %9, align 16, !dbg !1830, !tbaa !1480
  %11 = fmul <2 x double> %10, %10, !dbg !1831
  %12 = extractelement <2 x double> %11, i32 0, !dbg !1832
  %13 = extractelement <2 x double> %11, i32 1, !dbg !1832
  %14 = fadd double %12, %13, !dbg !1832
  call void @llvm.dbg.value(metadata double %14, i64 0, metadata !1034, metadata !1443), !dbg !1833
  %15 = load i32* %1, align 4, !dbg !1834, !tbaa !1499
  %16 = and i32 %15, 16, !dbg !1834
  %17 = icmp eq i32 %16, 0, !dbg !1834
  br i1 %17, label %32, label %18, !dbg !1836

; <label>:18                                      ; preds = %0
  %19 = fadd double %5, 1.000000e+00, !dbg !1837
  %20 = fcmp ogt double %14, %19, !dbg !1840
  br i1 %20, label %27, label %21, !dbg !1841

; <label>:21                                      ; preds = %18
  %22 = getelementptr inbounds [3 x double]* %New_Point, i64 0, i64 2, !dbg !1842
  %23 = load double* %22, align 16, !dbg !1842, !tbaa !1480
  %24 = fsub double 0.000000e+00, %5, !dbg !1843
  %25 = fcmp olt double %23, %24, !dbg !1844
  %26 = fcmp ogt double %23, %19, !dbg !1845
  %or.cond = or i1 %25, %26, !dbg !1846
  br i1 %or.cond, label %27, label %29, !dbg !1846

; <label>:27                                      ; preds = %21, %18
  %28 = and i32 %15, 4, !dbg !1847
  br label %51, !dbg !1849

; <label>:29                                      ; preds = %21
  %30 = lshr i32 %15, 2, !dbg !1850
  %.lobit1 = and i32 %30, 1, !dbg !1850
  %31 = xor i32 %.lobit1, 1, !dbg !1850
  br label %51, !dbg !1852

; <label>:32                                      ; preds = %0
  %33 = getelementptr inbounds [3 x double]* %New_Point, i64 0, i64 2, !dbg !1853
  %34 = load double* %33, align 16, !dbg !1853, !tbaa !1480
  %35 = fmul double %34, %34, !dbg !1855
  call void @llvm.dbg.value(metadata double %35, i64 0, metadata !1035, metadata !1443), !dbg !1856
  %36 = fadd double %5, %35, !dbg !1857
  %37 = fcmp ogt double %14, %36, !dbg !1859
  br i1 %37, label %46, label %38, !dbg !1860

; <label>:38                                      ; preds = %32
  %39 = getelementptr inbounds %"struct.pov::Object_Struct"* %Object, i64 1, i32 8, !dbg !1861
  %40 = bitcast %"struct.pov::Light_Source_Struct"** %39 to double*, !dbg !1861
  %41 = load double* %40, align 8, !dbg !1861, !tbaa !1608
  %42 = fsub double %41, %5, !dbg !1862
  %43 = fcmp olt double %34, %42, !dbg !1863
  %44 = fadd double %5, 1.000000e+00
  %45 = fcmp ogt double %34, %44, !dbg !1864
  %or.cond3 = or i1 %45, %43, !dbg !1865
  br i1 %or.cond3, label %46, label %48, !dbg !1865

; <label>:46                                      ; preds = %38, %32
  %47 = and i32 %15, 4, !dbg !1866
  br label %51, !dbg !1868

; <label>:48                                      ; preds = %38
  %49 = lshr i32 %15, 2, !dbg !1869
  %.lobit = and i32 %49, 1, !dbg !1869
  %50 = xor i32 %.lobit, 1, !dbg !1869
  br label %51, !dbg !1871

; <label>:51                                      ; preds = %48, %46, %29, %27
  %.0 = phi i32 [ %28, %27 ], [ %31, %29 ], [ %47, %46 ], [ %50, %48 ]
  ret i32 %.0, !dbg !1872
}
