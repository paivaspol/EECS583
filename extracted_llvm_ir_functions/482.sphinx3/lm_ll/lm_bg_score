define i32 @lm_bg_score(%struct.lm_s* nocapture %lm, i16 zeroext %lw1, i16 zeroext %lw2, i32 %w2) #2 {
entry:
  %n_bg = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 1
  %0 = load i32* %n_bg, align 4, !tbaa !3
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %conv = zext i16 %lw1 to i64
  %cmp1 = icmp eq i16 %lw1, -1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = tail call i32 @lm_ug_score(%struct.lm_s* %lm, i16 zeroext %lw2, i32 %w2) #9
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %n_bg_score = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 30
  %1 = load i32* %n_bg_score, align 4, !tbaa !3
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %n_bg_score, align 4, !tbaa !3
  %conv3 = zext i16 %lw2 to i32
  %cmp4 = icmp eq i16 %lw2, -1
  br i1 %cmp4, label %if.then10, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %if.end
  %n_ug = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 0
  %2 = load i32* %n_ug, align 4, !tbaa !3
  %cmp8 = icmp slt i32 %conv3, %2
  br i1 %cmp8, label %if.end12, label %if.then10

if.then10:                                        ; preds = %lor.lhs.false6, %if.end
  tail call void @_E__pr_header(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i64 1038, i8* getelementptr inbounds ([12 x i8]* @.str3, i64 0, i64 0)) #8
  tail call void (i8*, ...)* @_E__die_error(i8* getelementptr inbounds ([38 x i8]* @.str26, i64 0, i64 0), i32 %conv3) #8
  br label %if.end12

if.end12:                                         ; preds = %lor.lhs.false6, %if.then10
  %add = add i64 %conv, 1
  %ug = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 9
  %3 = load %struct.ug_t** %ug, align 8, !tbaa !0
  %firstbg = getelementptr inbounds %struct.ug_t* %3, i64 %add, i32 3
  %4 = load i32* %firstbg, align 4, !tbaa !3
  %firstbg17 = getelementptr inbounds %struct.ug_t* %3, i64 %conv, i32 3
  %5 = load i32* %firstbg17, align 4, !tbaa !3
  %sub = sub nsw i32 %4, %5
  %cmp18 = icmp sgt i32 %sub, 0
  br i1 %cmp18, label %if.then20, label %if.else49

if.then20:                                        ; preds = %if.end12
  %membg = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 12
  %6 = load %struct.membg_t** %membg, align 8, !tbaa !0
  %bg23 = getelementptr inbounds %struct.membg_t* %6, i64 %conv, i32 0
  %7 = load %struct.bg_t** %bg23, align 8, !tbaa !0
  %tobool = icmp eq %struct.bg_t* %7, null
  br i1 %tobool, label %if.then24, label %if.end34

if.then24:                                        ; preds = %if.then20
  tail call fastcc void @load_bg(%struct.lm_s* %lm, i16 zeroext %lw1) #9
  %.pre = load %struct.membg_t** %membg, align 8, !tbaa !0
  %bg32.phi.trans.insert = getelementptr inbounds %struct.membg_t* %.pre, i64 %conv, i32 0
  %.pre98 = load %struct.bg_t** %bg32.phi.trans.insert, align 8, !tbaa !0
  br label %if.end34

if.end34:                                         ; preds = %if.then24, %if.then20
  %8 = phi %struct.bg_t* [ %.pre98, %if.then24 ], [ %7, %if.then20 ]
  %9 = phi %struct.membg_t* [ %.pre, %if.then24 ], [ %6, %if.then20 ]
  %used = getelementptr inbounds %struct.membg_t* %9, i64 %conv, i32 1
  store i32 1, i32* %used, align 4, !tbaa !3
  %call33 = tail call fastcc i32 @find_bg(%struct.bg_t* %8, i32 %sub, i16 zeroext %lw2) #9
  %cmp35 = icmp sgt i32 %call33, -1
  br i1 %cmp35, label %if.then37, label %if.end34.if.else49_crit_edge

if.end34.if.else49_crit_edge:                     ; preds = %if.end34
  %.pre99 = load %struct.ug_t** %ug, align 8, !tbaa !0
  br label %if.else49

if.then37:                                        ; preds = %if.end34
  %idxprom38 = sext i32 %call33 to i64
  %probid = getelementptr inbounds %struct.bg_t* %8, i64 %idxprom38, i32 1
  %10 = load i16* %probid, align 2, !tbaa !5
  %idxprom40 = zext i16 %10 to i64
  %bgprob = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 14
  %11 = load %union.lmlog_t** %bgprob, align 8, !tbaa !0
  %arrayidx41 = getelementptr inbounds %union.lmlog_t* %11, i64 %idxprom40
  %l = bitcast %union.lmlog_t* %arrayidx41 to i32*
  %12 = load i32* %l, align 4, !tbaa !3
  %inclass_ugscore = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 42
  %13 = load i32** %inclass_ugscore, align 8, !tbaa !0
  %tobool42 = icmp eq i32* %13, null
  br i1 %tobool42, label %if.end48, label %if.then43

if.then43:                                        ; preds = %if.then37
  %idxprom44 = sext i32 %w2 to i64
  %arrayidx46 = getelementptr inbounds i32* %13, i64 %idxprom44
  %14 = load i32* %arrayidx46, align 4, !tbaa !3
  %add47 = add nsw i32 %14, %12
  br label %if.end48

if.end48:                                         ; preds = %if.then37, %if.then43
  %score.0 = phi i32 [ %add47, %if.then43 ], [ %12, %if.then37 ]
  %access_type = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 37
  store i32 2, i32* %access_type, align 4, !tbaa !3
  br label %return

if.else49:                                        ; preds = %if.end34.if.else49_crit_edge, %if.end12
  %15 = phi %struct.ug_t* [ %.pre99, %if.end34.if.else49_crit_edge ], [ %3, %if.end12 ]
  %n_bg_bo = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 31
  %16 = load i32* %n_bg_bo, align 4, !tbaa !3
  %inc50 = add nsw i32 %16, 1
  store i32 %inc50, i32* %n_bg_bo, align 4, !tbaa !3
  %access_type51 = getelementptr inbounds %struct.lm_s* %lm, i64 0, i32 37
  store i32 1, i32* %access_type51, align 4, !tbaa !3
  %bowt = getelementptr inbounds %struct.ug_t* %15, i64 %conv, i32 2
  %l55 = bitcast %union.lmlog_t* %bowt to i32*
  %17 = load i32* %l55, align 4, !tbaa !3
  %idxprom56 = zext i16 %lw2 to i64
  %prob = getelementptr inbounds %struct.ug_t* %15, i64 %idxprom56, i32 1
  %l59 = bitcast %union.lmlog_t* %prob to i32*
  %18 = load i32* %l59, align 4, !tbaa !3
  %add60 = add nsw i32 %18, %17
  br label %return

return:                                           ; preds = %if.end48, %if.else49, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %score.0, %if.end48 ], [ %add60, %if.else49 ]
  ret i32 %retval.0
}
