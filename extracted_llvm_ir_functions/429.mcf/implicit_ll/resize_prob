define i64 @resize_prob(%struct.network* %net) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.network* %net}, i64 0, metadata !83), !dbg !152
  %max_new_m = getelementptr inbounds %struct.network* %net, i64 0, i32 9, !dbg !153
  %0 = load i64* %max_new_m, align 8, !dbg !153, !tbaa !154
  %cmp = icmp sgt i64 %0, 2, !dbg !153
  br i1 %cmp, label %cond.end, label %cond.false, !dbg !153

cond.false:                                       ; preds = %entry
  tail call void @__assert_fail(i8* getelementptr inbounds ([20 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8]* @.str1, i64 0, i64 0), i32 39, i8* getelementptr inbounds ([30 x i8]* @__PRETTY_FUNCTION__.resize_prob, i64 0, i64 0)) #6, !dbg !153
  unreachable, !dbg !153

cond.end:                                         ; preds = %entry
  %max_m = getelementptr inbounds %struct.network* %net, i64 0, i32 4, !dbg !157
  %1 = load i64* %max_m, align 8, !dbg !157, !tbaa !154
  %add = add nsw i64 %1, %0, !dbg !157
  store i64 %add, i64* %max_m, align 8, !dbg !157, !tbaa !154
  %max_residual_new_m = getelementptr inbounds %struct.network* %net, i64 0, i32 8, !dbg !158
  %2 = load i64* %max_residual_new_m, align 8, !dbg !158, !tbaa !154
  %add3 = add nsw i64 %2, %0, !dbg !158
  store i64 %add3, i64* %max_residual_new_m, align 8, !dbg !158, !tbaa !154
  %arcs = getelementptr inbounds %struct.network* %net, i64 0, i32 23, !dbg !159
  %3 = load %struct.arc** %arcs, align 8, !dbg !159, !tbaa !160
  %4 = bitcast %struct.arc* %3 to i8*, !dbg !159
  %mul = shl i64 %add, 6, !dbg !159
  %call = tail call i8* @realloc(i8* %4, i64 %mul) #7, !dbg !159
  %5 = bitcast i8* %call to %struct.arc*, !dbg !159
  tail call void @llvm.dbg.value(metadata !{%struct.arc* %5}, i64 0, metadata !84), !dbg !159
  %tobool = icmp eq i8* %call, null, !dbg !161
  br i1 %tobool, label %if.then, label %if.end, !dbg !161

if.then:                                          ; preds = %cond.end
  %arraydecay = getelementptr inbounds %struct.network* %net, i64 0, i32 0, i64 0, !dbg !162
  %call5 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([31 x i8]* @.str2, i64 0, i64 0), i8* %arraydecay) #7, !dbg !162
  %6 = load %struct._IO_FILE** @stdout, align 8, !dbg !164, !tbaa !160
  %call6 = tail call i32 @fflush(%struct._IO_FILE* %6) #7, !dbg !164
  br label %return, !dbg !165

if.end:                                           ; preds = %cond.end
  %7 = ptrtoint i8* %call to i64, !dbg !166
  %8 = load %struct.arc** %arcs, align 8, !dbg !166, !tbaa !160
  %9 = ptrtoint %struct.arc* %8 to i64, !dbg !166
  %sub = sub i64 %7, %9, !dbg !166
  tail call void @llvm.dbg.value(metadata !{i64 %sub}, i64 0, metadata !92), !dbg !166
  store %struct.arc* %5, %struct.arc** %arcs, align 8, !dbg !167, !tbaa !160
  %m = getelementptr inbounds %struct.network* %net, i64 0, i32 5, !dbg !168
  %10 = load i64* %m, align 8, !dbg !168, !tbaa !154
  %add.ptr = getelementptr inbounds %struct.arc* %5, i64 %10, !dbg !168
  %stop_arcs = getelementptr inbounds %struct.network* %net, i64 0, i32 24, !dbg !168
  store %struct.arc* %add.ptr, %struct.arc** %stop_arcs, align 8, !dbg !168, !tbaa !160
  %nodes = getelementptr inbounds %struct.network* %net, i64 0, i32 21, !dbg !169
  %11 = load %struct.node** %nodes, align 8, !dbg !169, !tbaa !160
  tail call void @llvm.dbg.value(metadata !{%struct.node* %11}, i64 0, metadata !87), !dbg !169
  tail call void @llvm.dbg.value(metadata !{%struct.node* %11}, i64 0, metadata !91), !dbg !169
  %stop_nodes = getelementptr inbounds %struct.network* %net, i64 0, i32 22, !dbg !170
  %12 = load %struct.node** %stop_nodes, align 8, !dbg !170, !tbaa !160
  tail call void @llvm.dbg.value(metadata !{%struct.node* %12}, i64 0, metadata !90), !dbg !170
  %node.037 = getelementptr inbounds %struct.node* %11, i64 1, !dbg !170
  %cmp938 = icmp ult %struct.node* %node.037, %12, !dbg !170
  br i1 %cmp938, label %for.body, label %return, !dbg !170

for.body:                                         ; preds = %if.end, %for.cond.backedge
  %node.040 = phi %struct.node* [ %node.0, %for.cond.backedge ], [ %node.037, %if.end ]
  %.pn39 = phi %struct.node* [ %node.040, %for.cond.backedge ], [ %11, %if.end ]
  %pred = getelementptr inbounds %struct.node* %.pn39, i64 1, i32 3, !dbg !172
  %13 = load %struct.node** %pred, align 8, !dbg !172, !tbaa !160
  %cmp10 = icmp eq %struct.node* %13, %11, !dbg !172
  br i1 %cmp10, label %for.cond.backedge, label %if.then11, !dbg !172

for.cond.backedge:                                ; preds = %for.body, %if.then11
  %node.0 = getelementptr inbounds %struct.node* %node.040, i64 1, !dbg !170
  %cmp9 = icmp ult %struct.node* %node.0, %12, !dbg !170
  br i1 %cmp9, label %for.body, label %return, !dbg !170

if.then11:                                        ; preds = %for.body
  %basic_arc = getelementptr inbounds %struct.node* %.pn39, i64 1, i32 6, !dbg !173
  %14 = load %struct.arc** %basic_arc, align 8, !dbg !173, !tbaa !160
  %15 = ptrtoint %struct.arc* %14 to i64, !dbg !173
  %add12 = add i64 %sub, %15, !dbg !173
  %16 = inttoptr i64 %add12 to %struct.arc*, !dbg !173
  store %struct.arc* %16, %struct.arc** %basic_arc, align 8, !dbg !173, !tbaa !160
  br label %for.cond.backedge, !dbg !173

return:                                           ; preds = %if.end, %for.cond.backedge, %if.then
  %retval.0 = phi i64 [ -1, %if.then ], [ 0, %for.cond.backedge ], [ 0, %if.end ]
  ret i64 %retval.0, !dbg !174
}
