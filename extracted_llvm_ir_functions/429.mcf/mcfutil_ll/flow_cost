define double @flow_cost(%struct.network* nocapture %net) #0 {
entry:
  %stop_arcs = getelementptr inbounds %struct.network* %net, i64 0, i32 24
  %0 = load %struct.arc** %stop_arcs, align 8, !tbaa !0
  %arcs = getelementptr inbounds %struct.network* %net, i64 0, i32 23
  %1 = load %struct.arc** %arcs, align 8, !tbaa !0
  %cmp76 = icmp eq %struct.arc* %1, %0
  br i1 %cmp76, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %arc.077 = phi %struct.arc* [ %incdec.ptr, %for.body ], [ %1, %entry ]
  %ident = getelementptr inbounds %struct.arc* %arc.077, i64 0, i32 3
  %2 = load i32* %ident, align 4, !tbaa !4
  %cmp1 = icmp eq i32 %2, 2
  %flow = getelementptr inbounds %struct.arc* %arc.077, i64 0, i32 6
  %. = zext i1 %cmp1 to i64
  store i64 %., i64* %flow, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds %struct.arc* %arc.077, i64 1
  %cmp = icmp eq %struct.arc* %incdec.ptr, %0
  br i1 %cmp, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %stop_nodes = getelementptr inbounds %struct.network* %net, i64 0, i32 22
  %3 = load %struct.node** %stop_nodes, align 8, !tbaa !0
  %nodes = getelementptr inbounds %struct.network* %net, i64 0, i32 21
  %4 = load %struct.node** %nodes, align 8, !tbaa !0
  %node.072 = getelementptr inbounds %struct.node* %4, i64 1
  %cmp573 = icmp eq %struct.node* %node.072, %3
  br i1 %cmp573, label %for.end11, label %for.body6

for.body6:                                        ; preds = %for.end, %for.body6
  %node.075 = phi %struct.node* [ %node.0, %for.body6 ], [ %node.072, %for.end ]
  %.pn74 = phi %struct.node* [ %node.075, %for.body6 ], [ %4, %for.end ]
  %flow7 = getelementptr inbounds %struct.node* %.pn74, i64 1, i32 10
  %5 = load i64* %flow7, align 8, !tbaa !3
  %basic_arc = getelementptr inbounds %struct.node* %.pn74, i64 1, i32 6
  %6 = load %struct.arc** %basic_arc, align 8, !tbaa !0
  %flow8 = getelementptr inbounds %struct.arc* %6, i64 0, i32 6
  store i64 %5, i64* %flow8, align 8, !tbaa !3
  %node.0 = getelementptr inbounds %struct.node* %node.075, i64 1
  %cmp5 = icmp eq %struct.node* %node.0, %3
  br i1 %cmp5, label %for.end11, label %for.body6

for.end11:                                        ; preds = %for.body6, %for.end
  %bigM36.pre = getelementptr inbounds %struct.network* %net, i64 0, i32 18
  br i1 %cmp76, label %for.end35, label %for.body16

for.body16:                                       ; preds = %for.end11, %for.inc33
  %operational_cost.070 = phi i64 [ %operational_cost.1, %for.inc33 ], [ 0, %for.end11 ]
  %fleet.069 = phi i64 [ %fleet.1, %for.inc33 ], [ 0, %for.end11 ]
  %arc.167 = phi %struct.arc* [ %incdec.ptr34, %for.inc33 ], [ %1, %for.end11 ]
  %flow17 = getelementptr inbounds %struct.arc* %arc.167, i64 0, i32 6
  %7 = load i64* %flow17, align 8, !tbaa !3
  %tobool = icmp eq i64 %7, 0
  br i1 %tobool, label %for.inc33, label %if.then18

if.then18:                                        ; preds = %for.body16
  %tail = getelementptr inbounds %struct.arc* %arc.167, i64 0, i32 1
  %8 = load %struct.node** %tail, align 8, !tbaa !0
  %number = getelementptr inbounds %struct.node* %8, i64 0, i32 12
  %9 = load i32* %number, align 4, !tbaa !4
  %cmp19 = icmp slt i32 %9, 0
  br i1 %cmp19, label %land.lhs.true, label %if.then22

land.lhs.true:                                    ; preds = %if.then18
  %head = getelementptr inbounds %struct.arc* %arc.167, i64 0, i32 2
  %10 = load %struct.node** %head, align 8, !tbaa !0
  %number20 = getelementptr inbounds %struct.node* %10, i64 0, i32 12
  %11 = load i32* %number20, align 4, !tbaa !4
  %cmp21 = icmp sgt i32 %11, 0
  br i1 %cmp21, label %for.inc33, label %if.then22.thread

if.then22.thread:                                 ; preds = %land.lhs.true
  %cost2879 = getelementptr inbounds %struct.arc* %arc.167, i64 0, i32 0
  %12 = load i64* %cost2879, align 8, !tbaa !3
  br label %if.else27

if.then22:                                        ; preds = %if.then18
  %tobool25 = icmp eq i32 %9, 0
  %cost28 = getelementptr inbounds %struct.arc* %arc.167, i64 0, i32 0
  %13 = load i64* %cost28, align 8, !tbaa !3
  br i1 %tobool25, label %if.then26, label %if.else27

if.then26:                                        ; preds = %if.then22
  %14 = load i64* %bigM36.pre, align 8, !tbaa !3
  %sub = add i64 %13, %operational_cost.070
  %add = sub i64 %sub, %14
  %inc = add nsw i64 %fleet.069, 1
  br label %for.inc33

if.else27:                                        ; preds = %if.then22.thread, %if.then22
  %15 = phi i64 [ %12, %if.then22.thread ], [ %13, %if.then22 ]
  %add29 = add nsw i64 %15, %operational_cost.070
  br label %for.inc33

for.inc33:                                        ; preds = %for.body16, %if.then26, %if.else27, %land.lhs.true
  %fleet.1 = phi i64 [ %fleet.069, %land.lhs.true ], [ %fleet.069, %if.else27 ], [ %inc, %if.then26 ], [ %fleet.069, %for.body16 ]
  %operational_cost.1 = phi i64 [ %operational_cost.070, %land.lhs.true ], [ %add29, %if.else27 ], [ %add, %if.then26 ], [ %operational_cost.070, %for.body16 ]
  %incdec.ptr34 = getelementptr inbounds %struct.arc* %arc.167, i64 1
  %cmp15 = icmp eq %struct.arc* %incdec.ptr34, %0
  br i1 %cmp15, label %for.end35, label %for.body16

for.end35:                                        ; preds = %for.end11, %for.inc33
  %operational_cost.0.lcssa = phi i64 [ %operational_cost.1, %for.inc33 ], [ 0, %for.end11 ]
  %fleet.0.lcssa = phi i64 [ %fleet.1, %for.inc33 ], [ 0, %for.end11 ]
  %conv = sitofp i64 %fleet.0.lcssa to double
  %16 = load i64* %bigM36.pre, align 8, !tbaa !3
  %conv37 = sitofp i64 %16 to double
  %mul = fmul double %conv, %conv37
  %conv38 = sitofp i64 %operational_cost.0.lcssa to double
  %add39 = fadd double %conv38, %mul
  ret double %add39
}
