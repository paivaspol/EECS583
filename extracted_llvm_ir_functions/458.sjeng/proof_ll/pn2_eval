define void @pn2_eval(%struct.node* %root) #0 {
entry:
  store i32 0, i32* @nodecount2, align 4, !tbaa !0
  store i32 1, i32* @pn2, align 4, !tbaa !0
  %parent = getelementptr inbounds %struct.node* %root, i64 0, i32 7
  %0 = load %struct.node** %parent, align 8, !tbaa !3
  store %struct.node* null, %struct.node** %parent, align 8, !tbaa !3
  tail call void @pn_eval(%struct.node* %root) #5
  tail call void @set_proof_and_disproof_numbers(%struct.node* %root) #5
  %disproof = getelementptr inbounds %struct.node* %root, i64 0, i32 5
  %proof = getelementptr inbounds %struct.node* %root, i64 0, i32 4
  %1 = load i32* %proof, align 4, !tbaa !0
  %cmp16 = icmp eq i32 %1, 0
  br i1 %cmp16, label %while.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry, %while.body
  %2 = load i32* %disproof, align 4, !tbaa !0
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load i32* @nodecount2, align 4, !tbaa !0
  %4 = load i32* @nodecount, align 4, !tbaa !0
  %cmp3 = icmp slt i32 %3, %4
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %call = tail call %struct.node* @select_most_proving(%struct.node* %root) #5
  tail call void @develop_node(%struct.node* %call) #5
  tail call void @update_ancestors(%struct.node* %call) #5
  %5 = load i32* %proof, align 4, !tbaa !0
  %cmp = icmp eq i32 %5, 0
  br i1 %cmp, label %while.end, label %land.lhs.true

while.end:                                        ; preds = %while.body, %land.lhs.true, %land.rhs, %entry
  %expanded = getelementptr inbounds %struct.node* %root, i64 0, i32 2
  store i8 0, i8* %expanded, align 1, !tbaa !1
  %num_children = getelementptr inbounds %struct.node* %root, i64 0, i32 1
  store i8 0, i8* %num_children, align 1, !tbaa !1
  store %struct.node* %0, %struct.node** %parent, align 8, !tbaa !3
  store i32 0, i32* @pn2, align 4, !tbaa !0
  ret void
}
