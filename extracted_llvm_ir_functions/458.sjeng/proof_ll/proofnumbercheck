define void @proofnumbercheck(%struct.move_s* noalias nocapture sret %agg.result, %struct.move_s* byval align 8 %compmove) #0 {
entry:
  %resmove = alloca %struct.move_s, align 4
  %0 = load i32* @piece_count, align 4, !tbaa !0
  %cmp = icmp slt i32 %0, 4
  %1 = load i32* @Variant, align 4, !tbaa !0
  %cmp1 = icmp eq i32 %1, 3
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = bitcast %struct.move_s* %agg.result to i8*
  %3 = bitcast %struct.move_s* %compmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 24, i32 4, i1 false), !tbaa.struct !4
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* @nodecount, align 4, !tbaa !0
  store i32 0, i32* @iters, align 4, !tbaa !0
  store i32 0, i32* @frees, align 4, !tbaa !0
  store i32 1, i32* @ply, align 4, !tbaa !0
  store i32 0, i32* @maxply, align 4, !tbaa !0
  call void @make(%struct.move_s* %compmove, i32 0) #6
  %4 = load i32* @hash, align 4, !tbaa !0
  %5 = load i32* @move_number, align 4, !tbaa !0
  %6 = load i32* @ply, align 4, !tbaa !0
  %add = add i32 %5, -1
  %sub = add i32 %add, %6
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [600 x i32]* @hash_history, i64 0, i64 %idxprom
  store i32 %4, i32* %arrayidx, align 4, !tbaa !0
  %7 = load i32* @white_to_move, align 4, !tbaa !0
  %not.tobool = icmp eq i32 %7, 0
  %cond = zext i1 %not.tobool to i32
  store i32 %cond, i32* @root_to_move, align 4, !tbaa !0
  %call = call i64 @rtime() #6
  %call2 = call noalias i8* @calloc(i64 1, i64 56) #6
  %8 = bitcast i8* %call2 to %struct.node*
  %9 = load i32* @PBSize, align 4, !tbaa !0
  %conv = sext i32 %9 to i64
  %call3 = call noalias i8* @calloc(i64 %conv, i64 56) #6
  store i8* %call3, i8** @membuff, align 8, !tbaa !3
  call void @pn_eval(%struct.node* %8) #5
  call void @set_proof_and_disproof_numbers(%struct.node* %8) #5
  %disproof = getelementptr inbounds i8* %call2, i64 8
  %10 = bitcast i8* %disproof to i32*
  %proof = getelementptr inbounds i8* %call2, i64 4
  %11 = bitcast i8* %proof to i32*
  %12 = load i32* %11, align 4, !tbaa !0
  %cmp468 = icmp eq i32 %12, 0
  br i1 %cmp468, label %while.end36, label %land.lhs.true6

land.lhs.true6:                                   ; preds = %if.end, %while.cond.backedge
  %.pre70 = phi i32 [ %18, %while.cond.backedge ], [ %12, %if.end ]
  %13 = load i32* %10, align 4, !tbaa !0
  %cmp7 = icmp eq i32 %13, 0
  br i1 %cmp7, label %while.end36, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true6
  %14 = load i32* @bufftop, align 4, !tbaa !0
  %conv9 = zext i32 %14 to i64
  %15 = load i32* @PBSize, align 4, !tbaa !0
  %sub10 = add nsw i32 %15, -10000
  %conv11 = sext i32 %sub10 to i64
  %mul = mul i64 %conv11, 56
  %cmp12 = icmp ult i64 %conv9, %mul
  br i1 %cmp12, label %while.body, label %while.end36

while.body:                                       ; preds = %land.rhs
  %call14 = call %struct.node* @select_most_proving(%struct.node* %8) #5
  call void @develop_node(%struct.node* %call14) #5
  call void @update_ancestors(%struct.node* %call14) #5
  %16 = load i32* @iters, align 4, !tbaa !0
  %inc = add nsw i32 %16, 1
  store i32 %inc, i32* @iters, align 4, !tbaa !0
  %rem66 = and i32 %inc, 31
  %cmp15 = icmp eq i32 %rem66, 0
  br i1 %cmp15, label %if.then17, label %while.cond.backedge

if.then17:                                        ; preds = %while.body
  %call18 = call i64 @rtime() #6
  %call19 = call i32 @rdifftime(i64 %call18, i64 %call) #6
  %17 = load i32* @pn_time, align 4, !tbaa !0
  %cmp20 = icmp sgt i32 %call19, %17
  br i1 %cmp20, label %if.then17.while.endsplit_crit_edge, label %while.cond.backedge

if.then17.while.endsplit_crit_edge:               ; preds = %if.then17
  %.pre.pre = load i32* %11, align 4, !tbaa !0
  br label %while.end36

while.cond.backedge:                              ; preds = %if.then17, %while.body
  %18 = load i32* %11, align 4, !tbaa !0
  %cmp4 = icmp eq i32 %18, 0
  br i1 %cmp4, label %while.end36, label %land.lhs.true6

while.end36:                                      ; preds = %if.end, %if.then17.while.endsplit_crit_edge, %land.rhs, %land.lhs.true6, %while.cond.backedge
  %19 = phi i32 [ 0, %if.end ], [ %.pre.pre, %if.then17.while.endsplit_crit_edge ], [ %.pre70, %land.rhs ], [ %.pre70, %land.lhs.true6 ], [ 0, %while.cond.backedge ]
  %20 = load i32* %10, align 4, !tbaa !0
  %21 = load i32* @nodecount, align 4, !tbaa !0
  %22 = load i32* @frees, align 4, !tbaa !0
  %conv27 = sext i32 %21 to i64
  %mul28 = mul i64 %conv27, 56
  %conv29 = uitofp i64 %mul28 to float
  %div = fmul float %conv29, 0x3EB0000000000000
  %conv30 = fpext float %div to double
  %23 = load i32* @iters, align 4, !tbaa !0
  %call31 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([47 x i8]* @.str17, i64 0, i64 0), i32 %19, i32 %20, i32 %21, i32 %22, double %conv30, i32 %23) #6
  call void @unmake(%struct.move_s* %compmove, i32 0) #6
  %24 = load i32* %11, align 4, !tbaa !0
  %cmp38 = icmp eq i32 %24, 0
  %25 = bitcast %struct.move_s* %resmove to i8*
  br i1 %cmp38, label %if.then40, label %if.else

if.then40:                                        ; preds = %while.end36
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* bitcast (%struct.move_s* @pn_move to i8*), i64 24, i32 4, i1 false), !tbaa.struct !4
  store i32 1, i32* @s_threat, align 4, !tbaa !0
  br label %if.end49

if.else:                                          ; preds = %while.end36
  %26 = bitcast %struct.move_s* %compmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 24, i32 4, i1 false), !tbaa.struct !4
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then40
  store i32 0, i32* @bufftop, align 4, !tbaa !0
  call void @free(i8* %call2) #6
  %27 = load i8** @membuff, align 8, !tbaa !3
  call void @free(i8* %27) #6
  %28 = bitcast %struct.move_s* %agg.result to i8*
  %29 = bitcast %struct.move_s* %resmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 24, i32 4, i1 false), !tbaa.struct !4
  br label %return

return:                                           ; preds = %if.end49, %if.then
  ret void
}
