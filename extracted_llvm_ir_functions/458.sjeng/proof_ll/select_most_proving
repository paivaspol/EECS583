define %struct.node* @select_most_proving(%struct.node* %node) #0 {
entry:
  %expanded36 = getelementptr inbounds %struct.node* %node, i64 0, i32 2
  %0 = load i8* %expanded36, align 1, !tbaa !1
  %tobool37 = icmp eq i8 %0, 0
  br i1 %tobool37, label %while.end23, label %while.body

while.body:                                       ; preds = %entry, %while.cond.backedge
  %tnode.038 = phi %struct.node* [ %10, %while.cond.backedge ], [ %node, %entry ]
  %1 = load i32* @white_to_move, align 4, !tbaa !0
  %not.tobool1 = icmp eq i32 %1, 0
  %cond = zext i1 %not.tobool1 to i32
  %2 = load i32* @root_to_move, align 4, !tbaa !0
  %cmp = icmp eq i32 %cond, %2
  %children = getelementptr inbounds %struct.node* %tnode.038, i64 0, i32 6
  %3 = load %struct.node*** %children, align 8, !tbaa !3
  br i1 %cmp, label %while.cond2.preheader, label %while.cond6.preheader

while.cond2.preheader:                            ; preds = %while.body
  %proof3 = getelementptr inbounds %struct.node* %tnode.038, i64 0, i32 4
  %4 = load i32* %proof3, align 4, !tbaa !0
  br label %while.cond2

while.cond6.preheader:                            ; preds = %while.body
  %disproof10 = getelementptr inbounds %struct.node* %tnode.038, i64 0, i32 5
  %5 = load i32* %disproof10, align 4, !tbaa !0
  br label %while.cond6

while.cond2:                                      ; preds = %while.cond2, %while.cond2.preheader
  %indvars.iv39 = phi i64 [ %indvars.iv.next40, %while.cond2 ], [ 0, %while.cond2.preheader ]
  %i.0 = phi i32 [ %inc, %while.cond2 ], [ 0, %while.cond2.preheader ]
  %arrayidx = getelementptr inbounds %struct.node** %3, i64 %indvars.iv39
  %6 = load %struct.node** %arrayidx, align 8, !tbaa !3
  %proof = getelementptr inbounds %struct.node* %6, i64 0, i32 4
  %7 = load i32* %proof, align 4, !tbaa !0
  %cmp4 = icmp eq i32 %7, %4
  %indvars.iv.next40 = add i64 %indvars.iv39, 1
  %inc = add nsw i32 %i.0, 1
  br i1 %cmp4, label %if.end, label %while.cond2

while.cond6:                                      ; preds = %while.cond6, %while.cond6.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %while.cond6 ], [ 0, %while.cond6.preheader ]
  %i.1 = phi i32 [ %inc13, %while.cond6 ], [ 0, %while.cond6.preheader ]
  %arrayidx9 = getelementptr inbounds %struct.node** %3, i64 %indvars.iv
  %8 = load %struct.node** %arrayidx9, align 8, !tbaa !3
  %disproof = getelementptr inbounds %struct.node* %8, i64 0, i32 5
  %9 = load i32* %disproof, align 4, !tbaa !0
  %cmp11 = icmp eq i32 %9, %5
  %indvars.iv.next = add i64 %indvars.iv, 1
  %inc13 = add nsw i32 %i.1, 1
  br i1 %cmp11, label %if.end, label %while.cond6

if.end:                                           ; preds = %while.cond2, %while.cond6
  %i.2 = phi i32 [ %i.1, %while.cond6 ], [ %i.0, %while.cond2 ]
  %idxprom15 = sext i32 %i.2 to i64
  %arrayidx17 = getelementptr inbounds %struct.node** %3, i64 %idxprom15
  %10 = load %struct.node** %arrayidx17, align 8, !tbaa !3
  %11 = load i32* @hash, align 4, !tbaa !0
  %12 = load i32* @move_number, align 4, !tbaa !0
  %13 = load i32* @ply, align 4, !tbaa !0
  %add = add i32 %12, -1
  %sub = add i32 %add, %13
  %idxprom18 = sext i32 %sub to i64
  %arrayidx19 = getelementptr inbounds [600 x i32]* @hash_history, i64 0, i64 %idxprom18
  store i32 %11, i32* %arrayidx19, align 4, !tbaa !0
  %move = getelementptr inbounds %struct.node* %10, i64 0, i32 8
  tail call void @make(%struct.move_s* %move, i32 0) #6
  %14 = load i32* @ply, align 4, !tbaa !0
  %15 = load i32* @maxply, align 4, !tbaa !0
  %cmp20 = icmp sgt i32 %14, %15
  br i1 %cmp20, label %if.then21, label %while.cond.backedge

if.then21:                                        ; preds = %if.end
  store i32 %14, i32* @maxply, align 4, !tbaa !0
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then21, %if.end
  %expanded = getelementptr inbounds %struct.node* %10, i64 0, i32 2
  %16 = load i8* %expanded, align 1, !tbaa !1
  %tobool = icmp eq i8 %16, 0
  br i1 %tobool, label %while.end23, label %while.body

while.end23:                                      ; preds = %while.cond.backedge, %entry
  %tnode.0.lcssa = phi %struct.node* [ %node, %entry ], [ %10, %while.cond.backedge ]
  ret %struct.node* %tnode.0.lcssa
}
