define void @check_phase() #0 {
entry:
  %0 = load i32* @piece_count, align 4, !tbaa !0
  %cmp43 = icmp slt i32 %0, 1
  br i1 %cmp43, label %if.then30, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 1, %entry ]
  %xnum_pieces.046 = phi i32 [ %xnum_pieces.1, %for.inc ], [ 0, %entry ]
  %a.045 = phi i32 [ %a.1, %for.inc ], [ 1, %entry ]
  %arrayidx = getelementptr inbounds [62 x i32]* @pieces, i64 0, i64 %indvars.iv
  %1 = load i32* %arrayidx, align 4, !tbaa !0
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %for.inc, label %if.else

if.else:                                          ; preds = %for.body
  %inc = add nsw i32 %a.045, 1
  %idxprom1 = sext i32 %1 to i64
  %arrayidx2 = getelementptr inbounds [144 x i32]* @board, i64 0, i64 %idxprom1
  %2 = load i32* %arrayidx2, align 4, !tbaa !0
  switch i32 %2, label %if.then15 [
    i32 1, label %for.inc
    i32 2, label %for.inc
    i32 13, label %for.inc
    i32 0, label %for.inc
  ]

if.then15:                                        ; preds = %if.else
  %inc16 = add nsw i32 %xnum_pieces.046, 1
  br label %for.inc

for.inc:                                          ; preds = %if.else, %if.else, %if.else, %if.else, %for.body, %if.then15
  %a.1 = phi i32 [ %inc, %if.then15 ], [ %inc, %if.else ], [ %a.045, %for.body ], [ %inc, %if.else ], [ %inc, %if.else ], [ %inc, %if.else ]
  %xnum_pieces.1 = phi i32 [ %inc16, %if.then15 ], [ %xnum_pieces.046, %if.else ], [ %xnum_pieces.046, %for.body ], [ %xnum_pieces.046, %if.else ], [ %xnum_pieces.046, %if.else ], [ %xnum_pieces.046, %if.else ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %cmp = icmp sgt i32 %a.1, %0
  br i1 %cmp, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc
  %cmp19 = icmp sgt i32 %xnum_pieces.1, 11
  br i1 %cmp19, label %land.lhs.true20, label %if.else28

land.lhs.true20:                                  ; preds = %for.end
  %3 = load i32* @white_castled, align 4, !tbaa !0
  %tobool21 = icmp ne i32 %3, 0
  %4 = load i32* @black_castled, align 4, !tbaa !0
  %tobool22 = icmp ne i32 %4, 0
  %or.cond = and i1 %tobool21, %tobool22
  br i1 %or.cond, label %if.else28, label %land.lhs.true23

land.lhs.true23:                                  ; preds = %land.lhs.true20
  %5 = load i32* getelementptr inbounds ([144 x i32]* @board, i64 0, i64 30), align 4, !tbaa !0
  %cmp24 = icmp eq i32 %5, 5
  %6 = load i32* getelementptr inbounds ([144 x i32]* @board, i64 0, i64 114), align 4, !tbaa !0
  %cmp26 = icmp eq i32 %6, 6
  %or.cond34 = or i1 %cmp24, %cmp26
  br i1 %or.cond34, label %if.then27, label %if.else28

if.then27:                                        ; preds = %land.lhs.true23
  store i32 0, i32* @phase, align 4, !tbaa !0
  br label %if.end33

if.else28:                                        ; preds = %land.lhs.true23, %land.lhs.true20, %for.end
  %cmp29 = icmp slt i32 %xnum_pieces.1, 7
  br i1 %cmp29, label %if.then30, label %if.else31

if.then30:                                        ; preds = %entry, %if.else28
  store i32 2, i32* @phase, align 4, !tbaa !0
  br label %if.end33

if.else31:                                        ; preds = %if.else28
  store i32 1, i32* @phase, align 4, !tbaa !0
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %if.else31, %if.then27
  ret void
}
