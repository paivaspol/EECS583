define void @check_piece_square() #0 {
  tail call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !258, metadata !388), !dbg !1375
  %1 = load i32* @piece_count, align 4, !dbg !1376, !tbaa !393
  %2 = icmp slt i32 %1, 1, !dbg !1379
  br i1 %2, label %.preheader, label %.lr.ph, !dbg !1380

.lr.ph:                                           ; preds = %0
  %3 = sext i32 %1 to i64, !dbg !1380
  br label %6, !dbg !1380

; <label>:4                                       ; preds = %23
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1, !dbg !1380
  %5 = icmp slt i64 %indvars.iv16, %3, !dbg !1379
  br i1 %5, label %6, label %.preheader, !dbg !1380

; <label>:6                                       ; preds = %4, %.lr.ph
  %indvars.iv16 = phi i64 [ %indvars.iv.next17, %4 ], [ 1, %.lr.ph ]
  %7 = getelementptr inbounds [62 x i32]* @pieces, i64 0, i64 %indvars.iv16, !dbg !1381
  %8 = load i32* %7, align 4, !dbg !1381, !tbaa !393
  %9 = sext i32 %8 to i64, !dbg !1384
  %10 = getelementptr inbounds [144 x i32]* @squares, i64 0, i64 %9, !dbg !1384
  %11 = load i32* %10, align 4, !dbg !1384, !tbaa !393
  %12 = trunc i64 %indvars.iv16 to i32, !dbg !1385
  %13 = icmp eq i32 %11, %12, !dbg !1385
  %14 = icmp eq i32 %8, 0, !dbg !1386
  %or.cond = or i1 %14, %13, !dbg !1387
  br i1 %or.cond, label %17, label %15, !dbg !1387

; <label>:15                                      ; preds = %6
  %puts4 = tail call i32 @puts(i8* getelementptr inbounds ([35 x i8]* @str80, i64 0, i64 0)), !dbg !1388
  %16 = load %struct.__sFILE** @__stdoutp, align 8, !dbg !1390, !tbaa !767
  tail call void @display_board(%struct.__sFILE* %16, i32 0) #11, !dbg !1391
  tail call void @llvm.trap(), !dbg !1392
  unreachable

; <label>:17                                      ; preds = %6
  %18 = getelementptr inbounds [144 x i32]* @board, i64 0, i64 %9, !dbg !1393
  %19 = load i32* %18, align 4, !dbg !1393, !tbaa !393
  %20 = icmp ne i32 %19, 13, !dbg !1395
  %or.cond5 = or i1 %14, %20, !dbg !1396
  br i1 %or.cond5, label %23, label %21, !dbg !1396

; <label>:21                                      ; preds = %17
  %puts3 = tail call i32 @puts(i8* getelementptr inbounds ([34 x i8]* @str79, i64 0, i64 0)), !dbg !1397
  %22 = load %struct.__sFILE** @__stdoutp, align 8, !dbg !1399, !tbaa !767
  tail call void @display_board(%struct.__sFILE* %22, i32 0) #11, !dbg !1400
  tail call void @llvm.trap(), !dbg !1401
  unreachable

; <label>:23                                      ; preds = %17
  %.not = xor i1 %14, true, !dbg !1402
  %24 = icmp eq i32 %11, 0, !dbg !1404
  %or.cond7 = or i1 %24, %.not, !dbg !1402
  br i1 %or.cond7, label %4, label %25, !dbg !1402

; <label>:25                                      ; preds = %23
  %puts2 = tail call i32 @puts(i8* getelementptr inbounds ([28 x i8]* @str78, i64 0, i64 0)), !dbg !1405
  %26 = load %struct.__sFILE** @__stdoutp, align 8, !dbg !1407, !tbaa !767
  tail call void @display_board(%struct.__sFILE* %26, i32 0) #11, !dbg !1408
  tail call void @llvm.trap(), !dbg !1409
  unreachable

.preheader:                                       ; preds = %0, %4, %54
  %indvars.iv = phi i64 [ %indvars.iv.next, %54 ], [ 0, %4 ], [ 0, %0 ]
  %27 = getelementptr inbounds [144 x i32]* @board, i64 0, i64 %indvars.iv, !dbg !1410
  %28 = load i32* %27, align 4, !dbg !1410, !tbaa !393
  switch i32 %28, label %35 [
    i32 13, label %29
    i32 0, label %29
  ], !dbg !1415

; <label>:29                                      ; preds = %.preheader, %.preheader
  %30 = getelementptr inbounds [144 x i32]* @squares, i64 0, i64 %indvars.iv, !dbg !1416
  %31 = load i32* %30, align 4, !dbg !1416, !tbaa !393
  %32 = icmp eq i32 %31, 0, !dbg !1417
  br i1 %32, label %thread-pre-split, label %33, !dbg !1418

; <label>:33                                      ; preds = %29
  %puts1 = tail call i32 @puts(i8* getelementptr inbounds ([31 x i8]* @str77, i64 0, i64 0)), !dbg !1419
  %34 = load %struct.__sFILE** @__stdoutp, align 8, !dbg !1421, !tbaa !767
  tail call void @display_board(%struct.__sFILE* %34, i32 0) #11, !dbg !1422
  tail call void @llvm.trap(), !dbg !1423
  unreachable

thread-pre-split:                                 ; preds = %29
  switch i32 %28, label %35 [
    i32 13, label %43
    i32 0, label %43
  ], !dbg !1424

; <label>:35                                      ; preds = %.preheader, %thread-pre-split
  %36 = getelementptr inbounds [144 x i32]* @squares, i64 0, i64 %indvars.iv, !dbg !1426
  %37 = load i32* %36, align 4, !dbg !1426, !tbaa !393
  %38 = icmp eq i32 %37, 0, !dbg !1427
  br i1 %38, label %39, label %43, !dbg !1428

; <label>:39                                      ; preds = %35
  %40 = trunc i64 %indvars.iv to i32, !dbg !1429
  %41 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([39 x i8]* @.str64, i64 0, i64 0), i32 %40) #10, !dbg !1429
  %42 = load %struct.__sFILE** @__stdoutp, align 8, !dbg !1431, !tbaa !767
  tail call void @display_board(%struct.__sFILE* %42, i32 0) #11, !dbg !1432
  tail call void @llvm.trap(), !dbg !1433
  unreachable

; <label>:43                                      ; preds = %thread-pre-split, %thread-pre-split, %35
  %44 = getelementptr inbounds [144 x i32]* @squares, i64 0, i64 %indvars.iv, !dbg !1434
  %45 = load i32* %44, align 4, !dbg !1434, !tbaa !393
  %46 = sext i32 %45 to i64, !dbg !1436
  %47 = getelementptr inbounds [62 x i32]* @pieces, i64 0, i64 %46, !dbg !1436
  %48 = load i32* %47, align 4, !dbg !1436, !tbaa !393
  %49 = trunc i64 %indvars.iv to i32, !dbg !1437
  %50 = icmp eq i32 %48, %49, !dbg !1437
  %51 = icmp eq i32 %45, 0, !dbg !1438
  %or.cond6 = or i1 %51, %50, !dbg !1439
  br i1 %or.cond6, label %54, label %52, !dbg !1439

; <label>:52                                      ; preds = %43
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([36 x i8]* @str76, i64 0, i64 0)), !dbg !1440
  %53 = load %struct.__sFILE** @__stdoutp, align 8, !dbg !1442, !tbaa !767
  tail call void @display_board(%struct.__sFILE* %53, i32 0) #11, !dbg !1443
  tail call void @llvm.trap(), !dbg !1444
  unreachable

; <label>:54                                      ; preds = %43
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1445
  %55 = icmp slt i64 %indvars.iv.next, 144, !dbg !1446
  br i1 %55, label %.preheader, label %56, !dbg !1445

; <label>:56                                      ; preds = %54
  ret void, !dbg !1447
}
