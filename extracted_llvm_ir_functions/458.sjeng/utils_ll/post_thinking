define void @post_thinking(i32 %score) #0 {
entry:
  %output = alloca [256 x i8], align 16
  %hashpv = alloca [256 x i8], align 16
  %tmp = alloca %struct.move_s, align 8
  %0 = getelementptr inbounds [256 x i8]* %output, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %0) #1
  %1 = getelementptr inbounds [256 x i8]* %hashpv, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %1) #1
  %2 = load i32* @xb_mode, align 4, !tbaa !0
  %tobool = icmp eq i32 %2, 0
  %3 = load i32* @i_depth, align 4, !tbaa !0
  br i1 %tobool, label %if.else6, label %if.then4

if.then4:                                         ; preds = %entry
  %4 = load i64* @start_time, align 8, !tbaa !6
  %call.i = call double @difftime(i64 0, i64 %4) #14
  %conv.i = fptosi double %call.i to i32
  %mul.i = mul nsw i32 %conv.i, 100
  %5 = load i32* @nodes, align 4, !tbaa !0
  %call5 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str50, i64 0, i64 0), i32 %3, i32 %score, i32 %mul.i, i32 %5) #12
  br label %if.end13

if.else6:                                         ; preds = %entry
  %6 = ashr i32 %score, 31
  %7 = and i32 %6, 13
  %8 = or i32 %7, 32
  %div9 = sdiv i32 %score, 100
  %ispos = icmp sgt i32 %score, -100
  %neg = sub i32 0, %div9
  %9 = select i1 %ispos, i32 %div9, i32 %neg
  %rem = srem i32 %score, 100
  %ispos60 = icmp sgt i32 %rem, -1
  %neg61 = sub i32 0, %rem
  %10 = select i1 %ispos60, i32 %rem, i32 %neg61
  %11 = load i32* @nodes, align 4, !tbaa !0
  %call12 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str51, i64 0, i64 0), i32 %3, i32 %8, i32 %9, i32 %10, i32 %11) #12
  br label %if.end13

if.end13:                                         ; preds = %if.else6, %if.then4
  %12 = load i32* getelementptr inbounds ([300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1, i32 0), align 4, !tbaa !0
  %cmp14 = icmp eq i32 %12, 0
  br i1 %cmp14, label %land.lhs.true20, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end13
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr inbounds [144 x i32]* @board, i64 0, i64 %idxprom
  %13 = load i32* %arrayidx, align 4, !tbaa !0
  %cmp16 = icmp eq i32 %13, 13
  br i1 %cmp16, label %if.then25, label %if.end26

land.lhs.true20:                                  ; preds = %if.end13
  %14 = load i32* getelementptr inbounds ([300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1, i32 1), align 4, !tbaa !0
  %idxprom21 = sext i32 %14 to i64
  %arrayidx22 = getelementptr inbounds [144 x i32]* @board, i64 0, i64 %idxprom21
  %15 = load i32* %arrayidx22, align 4, !tbaa !0
  %cmp23 = icmp eq i32 %15, 13
  br i1 %cmp23, label %if.end26, label %if.then25

if.then25:                                        ; preds = %land.lhs.true20, %land.lhs.true
  call void @unmake(%struct.move_s* getelementptr inbounds ([300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1), i32 0) #12
  br label %if.end26

if.end26:                                         ; preds = %land.lhs.true, %land.lhs.true20, %if.then25
  %remake.0 = phi i32 [ 1, %if.then25 ], [ 0, %land.lhs.true20 ], [ 0, %land.lhs.true ]
  %16 = load i32* getelementptr inbounds ([300 x i32]* @pv_length, i64 0, i64 1), align 4, !tbaa !0
  %cmp2766 = icmp sgt i32 %16, 1
  br i1 %cmp2766, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end26
  %17 = bitcast %struct.move_s* %tmp to i8*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv69 = phi i64 [ 1, %for.body.lr.ph ], [ %indvars.iv.next70, %for.body ]
  %arrayidx30 = getelementptr inbounds [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 %indvars.iv69
  %18 = bitcast %struct.move_s* %arrayidx30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 24, i32 4, i1 false), !tbaa.struct !5
  call void @comp_to_san(%struct.move_s* byval align 8 %tmp, i8* %0) #13
  call void @make(%struct.move_s* %arrayidx30, i32 0) #12
  %call34 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.str52, i64 0, i64 0), i8* %0) #12
  %indvars.iv.next70 = add i64 %indvars.iv69, 1
  %19 = load i32* getelementptr inbounds ([300 x i32]* @pv_length, i64 0, i64 1), align 4, !tbaa !0
  %20 = trunc i64 %indvars.iv.next70 to i32
  %cmp27 = icmp slt i32 %20, %19
  br i1 %cmp27, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %if.end26
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 256, i32 16, i1 false)
  call void @hash_extract_pv(i32 7, i8* %1) #13
  %call37 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str53, i64 0, i64 0), i8* %1) #12
  %21 = load i32* getelementptr inbounds ([300 x i32]* @pv_length, i64 0, i64 1), align 4, !tbaa !0
  %i.163 = add i32 %21, -1
  %cmp3964 = icmp sgt i32 %i.163, 0
  br i1 %cmp3964, label %for.body41.lr.ph, label %for.end45

for.body41.lr.ph:                                 ; preds = %for.end
  %22 = sext i32 %i.163 to i64
  br label %for.body41

for.body41:                                       ; preds = %for.body41.lr.ph, %for.body41
  %indvars.iv = phi i64 [ %22, %for.body41.lr.ph ], [ %indvars.iv.next, %for.body41 ]
  %i.165 = phi i32 [ %i.163, %for.body41.lr.ph ], [ %i.1, %for.body41 ]
  %arrayidx43 = getelementptr inbounds [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 %indvars.iv
  call void @unmake(%struct.move_s* %arrayidx43, i32 0) #12
  %i.1 = add nsw i32 %i.165, -1
  %cmp39 = icmp sgt i32 %i.1, 0
  %indvars.iv.next = add i64 %indvars.iv, -1
  br i1 %cmp39, label %for.body41, label %for.end45

for.end45:                                        ; preds = %for.body41, %for.end
  %tobool46 = icmp eq i32 %remake.0, 0
  br i1 %tobool46, label %if.end48, label %if.then47

if.then47:                                        ; preds = %for.end45
  call void @make(%struct.move_s* getelementptr inbounds ([300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1), i32 0) #12
  br label %if.end48

if.end48:                                         ; preds = %for.end45, %if.then47
  %putchar = call i32 @putchar(i32 10) #1
  call void @llvm.lifetime.end(i64 256, i8* %1) #1
  call void @llvm.lifetime.end(i64 256, i8* %0) #1
  ret void
}
