define void @seedMT(i32 %seed) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{i32 %seed}, i64 0, metadata !338), !dbg !1016
  %or = or i32 %seed, 1, !dbg !1017
  tail call void @llvm.dbg.value(metadata !{i32 %or}, i64 0, metadata !339), !dbg !1017
  tail call void @llvm.dbg.value(metadata !1018, i64 0, metadata !340), !dbg !1017
  store i32 0, i32* @left, align 4, !dbg !1019, !tbaa !371
  tail call void @llvm.dbg.value(metadata !1021, i64 0, metadata !340), !dbg !1019
  store i32 %or, i32* getelementptr inbounds ([625 x i32]* @state, i64 0, i64 0), align 16, !dbg !1019, !tbaa !371
  tail call void @llvm.dbg.value(metadata !1022, i64 0, metadata !342), !dbg !1019
  tail call void @llvm.dbg.value(metadata !1023, i64 0, metadata !342), !dbg !1019
  br label %for.inc, !dbg !1019

for.inc:                                          ; preds = %entry, %for.inc
  %j.06 = phi i32 [ 623, %entry ], [ %phitmp, %for.inc ]
  %s.05 = phi i32* [ getelementptr inbounds ([625 x i32]* @state, i64 0, i64 1), %entry ], [ %incdec.ptr1, %for.inc ]
  %x.04 = phi i32 [ %or, %entry ], [ %mul, %for.inc ]
  %mul = mul i32 %x.04, 69069, !dbg !1024
  tail call void @llvm.dbg.value(metadata !{i32 %mul}, i64 0, metadata !339), !dbg !1024
  %incdec.ptr1 = getelementptr inbounds i32* %s.05, i64 1, !dbg !1024
  tail call void @llvm.dbg.value(metadata !{i32* %incdec.ptr1}, i64 0, metadata !340), !dbg !1024
  store i32 %mul, i32* %s.05, align 4, !dbg !1024, !tbaa !371
  %phitmp = add i32 %j.06, -1, !dbg !1024
  tail call void @llvm.dbg.value(metadata !{i32 %j.06}, i64 0, metadata !342), !dbg !1019
  %tobool = icmp eq i32 %phitmp, 0, !dbg !1019
  br i1 %tobool, label %for.end, label %for.inc, !dbg !1019

for.end:                                          ; preds = %for.inc
  ret void, !dbg !1025
}
