define i32 @allocate_time() #0 {
entry:
  %0 = load i32* @moves_to_tc, align 4, !tbaa !0
  %tobool = icmp eq i32 %0, 0
  %1 = load i32* @min_per_game, align 4, !tbaa !0
  br i1 %tobool, label %if.then, label %if.else110

if.then:                                          ; preds = %entry
  %cmp = icmp sgt i32 %1, 5
  %2 = load i32* @inc, align 4, !tbaa !0
  %tobool1 = icmp ne i32 %2, 0
  %or.cond = or i1 %cmp, %tobool1
  %3 = load i32* @time_left, align 4, !tbaa !0
  br i1 %or.cond, label %lor.lhs.false, label %if.then7

lor.lhs.false:                                    ; preds = %if.then
  %conv = sitofp i32 %3 to double
  %mul = mul nsw i32 %1, 6000
  %4 = load i32* @sec_per_game, align 4, !tbaa !0
  %mul2 = mul nsw i32 %4, 100
  %add = add nsw i32 %mul2, %mul
  %conv3 = sitofp i32 %add to double
  %mul4 = fmul double %conv3, 4.000000e+00
  %div = fdiv double %mul4, 5.000000e+00
  %cmp5 = fcmp olt double %conv, %div
  br i1 %cmp5, label %if.then7, label %if.end37

if.then7:                                         ; preds = %if.then, %lor.lhs.false
  %5 = load i32* @opp_time, align 4, !tbaa !0
  %sub = sub nsw i32 %5, %3
  %conv8 = sitofp i32 %sub to double
  %conv9 = sitofp i32 %5 to double
  %div10 = fdiv double %conv9, 5.000000e+00
  %cmp11 = fcmp ogt double %conv8, %div10
  %6 = load i32* @xb_mode, align 4, !tbaa !0
  %tobool14 = icmp ne i32 %6, 0
  %or.cond149 = and i1 %cmp11, %tobool14
  br i1 %or.cond149, label %if.end37, label %if.else

if.else:                                          ; preds = %if.then7
  %div19 = fdiv double %conv9, 1.000000e+01
  %cmp20 = fcmp ogt double %conv8, %div19
  %or.cond150 = and i1 %cmp20, %tobool14
  br i1 %or.cond150, label %if.end37, label %if.else25

if.else25:                                        ; preds = %if.else
  %div29 = fdiv double %conv9, 2.000000e+01
  %cmp30 = fcmp ogt double %conv8, %div29
  %or.cond151 = and i1 %cmp30, %tobool14
  %. = select i1 %or.cond151, double 2.500000e+01, double 2.000000e+01
  br label %if.end37

if.end37:                                         ; preds = %if.else25, %if.else, %if.then7, %lor.lhs.false
  %move_speed.0 = phi double [ 2.000000e+01, %lor.lhs.false ], [ 4.000000e+01, %if.then7 ], [ 3.000000e+01, %if.else ], [ %., %if.else25 ]
  %7 = load i32* @Variant, align 4, !tbaa !0
  %.off = add i32 %7, -3
  %8 = icmp ugt i32 %.off, 1
  br i1 %8, label %if.then43, label %if.else67

if.then43:                                        ; preds = %if.end37
  %9 = load i32* @opp_time, align 4, !tbaa !0
  %sub44 = sub nsw i32 %3, %9
  %conv45 = sitofp i32 %sub44 to double
  %conv46 = sitofp i32 %3 to double
  %div47 = fdiv double %conv46, 5.000000e+00
  %cmp48 = fcmp ogt double %conv45, %div47
  %10 = load i32* @xb_mode, align 4, !tbaa !0
  %tobool51 = icmp ne i32 %10, 0
  %or.cond153 = and i1 %cmp48, %tobool51
  br i1 %or.cond153, label %if.then52, label %if.else54

if.then52:                                        ; preds = %if.then43
  %sub53 = fadd double %move_speed.0, -1.000000e+01
  br label %if.end79

if.else54:                                        ; preds = %if.then43
  %div58 = fdiv double %conv46, 1.000000e+01
  %cmp59 = fcmp ogt double %conv45, %div58
  %or.cond154 = and i1 %cmp59, %tobool51
  br i1 %or.cond154, label %if.then63, label %if.end79

if.then63:                                        ; preds = %if.else54
  %sub64 = fadd double %move_speed.0, -5.000000e+00
  br label %if.end79

if.else67:                                        ; preds = %if.end37
  switch i32 %7, label %if.end79 [
    i32 3, label %if.then70
    i32 4, label %if.then75
  ]

if.then70:                                        ; preds = %if.else67
  %sub71 = fadd double %move_speed.0, -1.000000e+01
  br label %if.end79

if.then75:                                        ; preds = %if.else67
  %sub76 = fadd double %move_speed.0, -5.000000e+00
  br label %if.end79

if.end79:                                         ; preds = %if.else67, %if.then70, %if.then75, %if.then52, %if.then63, %if.else54
  %move_speed.1 = phi double [ %sub53, %if.then52 ], [ %sub64, %if.then63 ], [ %move_speed.0, %if.else54 ], [ %sub71, %if.then70 ], [ %sub76, %if.then75 ], [ %move_speed.0, %if.else67 ]
  %conv80 = sitofp i32 %3 to double
  %div81 = fdiv double %conv80, %move_speed.1
  %tobool82 = icmp eq i32 %2, 0
  br i1 %tobool82, label %if.end134, label %if.then83

if.then83:                                        ; preds = %if.end79
  %sub85 = fsub double %conv80, %div81
  %conv86 = sitofp i32 %2 to double
  %sub87 = fsub double %sub85, %conv86
  %cmp88 = fcmp ogt double %sub87, 5.000000e+02
  br i1 %cmp88, label %if.then90, label %if.else93

if.then90:                                        ; preds = %if.then83
  %add92 = fadd double %div81, %conv86
  br label %if.end134

if.else93:                                        ; preds = %if.then83
  %mul97 = fmul double %conv86, 2.000000e+00
  %div98 = fdiv double %mul97, 3.000000e+00
  %sub99 = fsub double %sub85, %div98
  %cmp100 = fcmp ogt double %sub99, 1.000000e+02
  br i1 %cmp100, label %if.then102, label %if.end134

if.then102:                                       ; preds = %if.else93
  %add106 = fadd double %div81, %div98
  br label %if.end134

if.else110:                                       ; preds = %entry
  %conv111 = sitofp i32 %1 to float
  %conv112 = fpext float %conv111 to double
  %mul113 = fmul double %conv112, 6.000000e+03
  %11 = load i32* @sec_per_game, align 4, !tbaa !0
  %conv114 = sitofp i32 %11 to float
  %conv115 = fpext float %conv114 to double
  %mul116 = fmul double %conv115, 1.000000e+02
  %add117 = fadd double %mul113, %mul116
  %conv118 = sitofp i32 %0 to float
  %conv119 = fpext float %conv118 to double
  %div120 = fdiv double %add117, %conv119
  %sub121 = fadd double %div120, -1.000000e+02
  %12 = load i32* @time_cushion, align 4, !tbaa !0
  %tobool122 = icmp eq i32 %12, 0
  br i1 %tobool122, label %if.end134, label %if.then123

if.then123:                                       ; preds = %if.else110
  %conv124 = sitofp i32 %12 to double
  %mul125 = fmul double %conv124, 2.100000e+00
  %div126 = fdiv double %mul125, 3.000000e+00
  %add127 = fadd double %sub121, %div126
  %conv131 = fptosi double %div126 to i32
  %sub132 = sub nsw i32 %12, %conv131
  store i32 %sub132, i32* @time_cushion, align 4, !tbaa !0
  br label %if.end134

if.end134:                                        ; preds = %if.else110, %if.end79, %if.then123, %if.else93, %if.then102, %if.then90
  %allocated_time.0 = phi double [ %add127, %if.then123 ], [ %add92, %if.then90 ], [ %add106, %if.then102 ], [ %div81, %if.else93 ], [ %div81, %if.end79 ], [ %sub121, %if.else110 ]
  %13 = load i32* @Variant, align 4, !tbaa !0
  %cmp135 = icmp eq i32 %13, 1
  br i1 %cmp135, label %if.then137, label %if.end147

if.then137:                                       ; preds = %if.end134
  %mul138 = fmul double %allocated_time.0, 2.500000e-01
  %14 = load i32* @opp_time, align 4, !tbaa !0
  %15 = load i32* @time_left, align 4, !tbaa !0
  %cmp139 = icmp sgt i32 %14, %15
  %cmp142 = icmp slt i32 %14, 1500
  %or.cond155 = or i1 %cmp139, %cmp142
  br i1 %or.cond155, label %if.then144, label %if.end147

if.then144:                                       ; preds = %if.then137
  %mul145 = fmul double %mul138, 5.000000e-01
  br label %if.end147

if.end147:                                        ; preds = %if.then144, %if.then137, %if.end134
  %allocated_time.1 = phi double [ %mul145, %if.then144 ], [ %mul138, %if.then137 ], [ %allocated_time.0, %if.end134 ]
  %conv148 = fptosi double %allocated_time.1 to i32
  ret i32 %conv148
}
