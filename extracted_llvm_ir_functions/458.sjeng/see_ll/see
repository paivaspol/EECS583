define i32 @see(i32 %color, i32 %square, i32 %from) #0 {
entry:
  %caps = alloca [2 x i32], align 4
  store i32 0, i32* getelementptr inbounds ([2 x i32]* @see_num_attackers, i64 0, i64 0), align 4, !tbaa !0
  store i32 0, i32* getelementptr inbounds ([2 x i32]* @see_num_attackers, i64 0, i64 1), align 4, !tbaa !0
  %idxprom = sext i32 %from to i64
  %arrayidx = getelementptr inbounds [144 x i32]* @board, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !0
  store i32 13, i32* %arrayidx, align 4, !tbaa !0
  %idxprom3 = sext i32 %color to i64
  %arrayidx4 = getelementptr inbounds [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom3
  %1 = load i32* %arrayidx4, align 4, !tbaa !0
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %arrayidx4, align 4, !tbaa !0
  %piece = getelementptr inbounds [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom3, i64 0, i32 0
  store i32 %0, i32* %piece, align 16, !tbaa !0
  %square11 = getelementptr inbounds [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom3, i64 0, i32 1
  store i32 %from, i32* %square11, align 4, !tbaa !0
  call void @setup_attackers(i32 %square) #1
  %idxprom12 = sext i32 %square to i64
  %arrayidx13 = getelementptr inbounds [144 x i32]* @board, i64 0, i64 %idxprom12
  %2 = load i32* %arrayidx13, align 4, !tbaa !0
  %idxprom14 = sext i32 %2 to i64
  %arrayidx15 = getelementptr inbounds [14 x i32]* @material, i64 0, i64 %idxprom14
  %3 = load i32* %arrayidx15, align 4, !tbaa !0
  %ispos = icmp sgt i32 %3, -1
  %neg = sub i32 0, %3
  %4 = select i1 %ispos, i32 %3, i32 %neg
  %lnot = icmp eq i32 %color, 0
  %idxprom16 = zext i1 %lnot to i64
  %arrayidx17 = getelementptr inbounds [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom16
  %5 = load i32* %arrayidx17, align 4, !tbaa !0
  %tobool18 = icmp eq i32 %5, 0
  br i1 %tobool18, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 %0, i32* %arrayidx, align 4, !tbaa !0
  br label %return

if.else:                                          ; preds = %entry
  %arrayidx22 = getelementptr inbounds [2 x i32]* %caps, i64 0, i64 %idxprom3
  store i32 1, i32* %arrayidx22, align 4, !tbaa !0
  %arrayidx27 = getelementptr inbounds [2 x i32]* %caps, i64 0, i64 %idxprom16
  store i32 0, i32* %arrayidx27, align 4, !tbaa !0
  %cmp164 = icmp sgt i32 %5, 0
  br i1 %cmp164, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %if.else
  %lnot.ext = zext i1 %lnot to i32
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %if.end109
  %6 = phi i32 [ 0, %while.body.lr.ph ], [ %14, %if.end109 ]
  %arrayidx32169 = phi i32* [ %arrayidx27, %while.body.lr.ph ], [ %arrayidx32, %if.end109 ]
  %hisbestvalue.0168 = phi i32 [ %4, %while.body.lr.ph ], [ %hisbestvalue.1, %if.end109 ]
  %ourbestvalue.0167 = phi i32 [ -1000000, %while.body.lr.ph ], [ %ourbestvalue.3, %if.end109 ]
  %value.0166 = phi i32 [ %4, %while.body.lr.ph ], [ %value.1, %if.end109 ]
  %sside.0165 = phi i32 [ %lnot.ext, %while.body.lr.ph ], [ %xor, %if.end109 ]
  call void @findlowest(i32 %sside.0165, i32 %6) #1
  %cmp37 = icmp eq i32 %sside.0165, %color
  %lnot40 = icmp eq i32 %sside.0165, 0
  %idxprom42 = zext i1 %lnot40 to i64
  %arrayidx43 = getelementptr inbounds [2 x i32]* %caps, i64 0, i64 %idxprom42
  %7 = load i32* %arrayidx43, align 4, !tbaa !0
  %sub = add nsw i32 %7, -1
  %idxprom44 = sext i32 %sub to i64
  %piece51 = getelementptr inbounds [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom42, i64 %idxprom44, i32 0
  %8 = load i32* %piece51, align 8, !tbaa !0
  %idxprom52 = sext i32 %8 to i64
  %arrayidx53 = getelementptr inbounds [14 x i32]* @material, i64 0, i64 %idxprom52
  %9 = load i32* %arrayidx53, align 4, !tbaa !0
  %ispos158 = icmp sgt i32 %9, -1
  %neg159 = sub i32 0, %9
  %10 = select i1 %ispos158, i32 %9, i32 %neg159
  br i1 %cmp37, label %if.then38, label %if.else72

if.then38:                                        ; preds = %while.body
  %add = add nsw i32 %10, %value.0166
  %arrayidx59 = getelementptr inbounds [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom42
  %11 = load i32* %arrayidx59, align 4, !tbaa !0
  %cmp65 = icmp sle i32 %11, %7
  %cmp66 = icmp sgt i32 %add, %ourbestvalue.0167
  %or.cond = and i1 %cmp65, %cmp66
  %ourbestvalue.1 = select i1 %or.cond, i32 %add, i32 %ourbestvalue.0167
  %cmp69 = icmp slt i32 %add, %hisbestvalue.0168
  %add.hisbestvalue.0 = select i1 %cmp69, i32 %add, i32 %hisbestvalue.0168
  br label %if.end109

if.else72:                                        ; preds = %while.body
  %sub90 = sub nsw i32 %value.0166, %10
  %cmp91 = icmp sgt i32 %sub90, %ourbestvalue.0167
  %sub90.ourbestvalue.0 = select i1 %cmp91, i32 %sub90, i32 %ourbestvalue.0167
  %arrayidx98 = getelementptr inbounds [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom42
  %12 = load i32* %arrayidx98, align 4, !tbaa !0
  %cmp104 = icmp sle i32 %12, %7
  %cmp106 = icmp slt i32 %sub90, %hisbestvalue.0168
  %or.cond160 = and i1 %cmp104, %cmp106
  %sub90.hisbestvalue.0 = select i1 %or.cond160, i32 %sub90, i32 %hisbestvalue.0168
  br label %if.end109

if.end109:                                        ; preds = %if.else72, %if.then38
  %value.1 = phi i32 [ %add, %if.then38 ], [ %sub90, %if.else72 ]
  %ourbestvalue.3 = phi i32 [ %ourbestvalue.1, %if.then38 ], [ %sub90.ourbestvalue.0, %if.else72 ]
  %hisbestvalue.1 = phi i32 [ %add.hisbestvalue.0, %if.then38 ], [ %sub90.hisbestvalue.0, %if.else72 ]
  %13 = load i32* %arrayidx32169, align 4, !tbaa !0
  %inc112 = add nsw i32 %13, 1
  store i32 %inc112, i32* %arrayidx32169, align 4, !tbaa !0
  %xor = xor i32 %sside.0165, 1
  %idxprom31 = sext i32 %xor to i64
  %arrayidx32 = getelementptr inbounds [2 x i32]* %caps, i64 0, i64 %idxprom31
  %14 = load i32* %arrayidx32, align 4, !tbaa !0
  %arrayidx34 = getelementptr inbounds [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom31
  %15 = load i32* %arrayidx34, align 4, !tbaa !0
  %cmp = icmp slt i32 %14, %15
  br i1 %cmp, label %while.body, label %while.end

while.end:                                        ; preds = %if.end109, %if.else
  %hisbestvalue.0.lcssa = phi i32 [ %4, %if.else ], [ %hisbestvalue.1, %if.end109 ]
  %ourbestvalue.0.lcssa = phi i32 [ -1000000, %if.else ], [ %ourbestvalue.3, %if.end109 ]
  store i32 %0, i32* %arrayidx, align 4, !tbaa !0
  %cmp115 = icmp sgt i32 %ourbestvalue.0.lcssa, %hisbestvalue.0.lcssa
  %cond = select i1 %cmp115, i32 %hisbestvalue.0.lcssa, i32 %ourbestvalue.0.lcssa
  br label %return

return:                                           ; preds = %while.end, %if.then
  %retval.0 = phi i32 [ %cond, %while.end ], [ %4, %if.then ]
  ret i32 %retval.0
}
