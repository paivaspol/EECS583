define i32 @check_solution(i8* %inbuff, %struct.move_s* byval align 8 %cmove) #0 {
entry:
  %san = alloca [256 x i8], align 16
  %0 = getelementptr inbounds [256 x i8]* %san, i64 0, i64 0
  call void @llvm.lifetime.start(i64 256, i8* %0) #1
  call void @comp_to_san(%struct.move_s* byval align 8 %cmove, i8* %0) #10
  %call = call i8* @strstr(i8* %inbuff, i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0)) #9
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %if.else5, label %if.then

if.then:                                          ; preds = %entry
  %call2 = call i8* @strstr(i8* %inbuff, i8* %0) #9
  %not.cmp3 = icmp ne i8* %call2, null
  %. = zext i1 %not.cmp3 to i32
  br label %cleanup

if.else5:                                         ; preds = %entry
  %call6 = call i8* @strstr(i8* %inbuff, i8* getelementptr inbounds ([3 x i8]* @.str1, i64 0, i64 0)) #9
  %cmp7 = icmp eq i8* %call6, null
  br i1 %cmp7, label %if.else14, label %if.then8

if.then8:                                         ; preds = %if.else5
  %call10 = call i8* @strstr(i8* %inbuff, i8* %0) #9
  %cmp11 = icmp eq i8* %call10, null
  %.19 = zext i1 %cmp11 to i32
  br label %cleanup

if.else14:                                        ; preds = %if.else5
  %call15 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([34 x i8]* @.str2, i64 0, i64 0)) #10
  br label %cleanup

cleanup:                                          ; preds = %if.then8, %if.then, %if.else14
  %retval.0 = phi i32 [ 0, %if.else14 ], [ %., %if.then ], [ %.19, %if.then8 ]
  call void @llvm.lifetime.end(i64 256, i8* %0) #1
  ret i32 %retval.0
}
