define void @compressStream(i32 %stream, i32 %zStream) #0 {
entry:
  %ibuf = alloca [5000 x i8], align 16
  %nbytes_in_lo32 = alloca i32, align 4
  %nbytes_in_hi32 = alloca i32, align 4
  %nbytes_out_lo32 = alloca i32, align 4
  %nbytes_out_hi32 = alloca i32, align 4
  %bzerr = alloca i32, align 4
  %bzerr_dummy = alloca i32, align 4
  %buf_nin = alloca [32 x i8], align 16
  %buf_nout = alloca [32 x i8], align 16
  %nbytes_in = alloca %struct.UInt64, align 1
  %nbytes_out = alloca %struct.UInt64, align 1
  %0 = getelementptr inbounds [5000 x i8]* %ibuf, i64 0, i64 0
  call void @llvm.lifetime.start(i64 5000, i8* %0) #1
  %1 = load i32* @blockSize100k, align 4, !tbaa !0
  %2 = load i32* @verbosity, align 4, !tbaa !0
  %3 = load i32* @workFactor, align 4, !tbaa !0
  %call = call i8* @BZ2_bzWriteOpen(i32* %bzerr, i32 %zStream, i32 %1, i32 %2, i32 %3) #6
  %4 = load i32* %bzerr, align 4, !tbaa !0
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.end, label %errhandler

if.end:                                           ; preds = %entry
  %5 = load i32* @verbosity, align 4, !tbaa !0
  %cmp1 = icmp sgt i32 %5, 1
  br i1 %cmp1, label %if.then2, label %while.body

if.then2:                                         ; preds = %if.end
  %6 = load %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %fputc = call i32 @fputc(i32 10, %struct._IO_FILE* %6)
  br label %while.body

while.body:                                       ; preds = %if.then2, %if.end, %if.end12
  %call5 = call fastcc zeroext i8 @myfeof(i32 %stream) #7
  %tobool = icmp eq i8 %call5, 0
  br i1 %tobool, label %if.end7, label %while.end

if.end7:                                          ; preds = %while.body
  %call8 = call i32 @spec_fread(i8* %0, i32 1, i32 5000, i32 %stream) #6
  %cmp9 = icmp sgt i32 %call8, 0
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %if.end7
  call void @BZ2_bzWrite(i32* %bzerr, i8* %call, i8* %0, i32 %call8) #6
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %if.end7
  %7 = load i32* %bzerr, align 4, !tbaa !0
  %cmp13 = icmp eq i32 %7, 0
  br i1 %cmp13, label %while.body, label %errhandler

while.end:                                        ; preds = %while.body
  call void @BZ2_bzWriteClose64(i32* %bzerr, i8* %call, i32 0, i32* %nbytes_in_lo32, i32* %nbytes_in_hi32, i32* %nbytes_out_lo32, i32* %nbytes_out_hi32) #6
  %8 = load i32* %bzerr, align 4, !tbaa !0
  %cmp16 = icmp eq i32 %8, 0
  br i1 %cmp16, label %if.end21, label %errhandler

if.end21:                                         ; preds = %while.end
  %cmp22 = icmp eq i32 %zStream, 1
  br i1 %cmp22, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end21
  store i32 0, i32* @outputHandleJustInCase, align 4, !tbaa !0
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end21
  store i32 0, i32* @outputHandleJustInCase, align 4, !tbaa !0
  %9 = load i32* @verbosity, align 4, !tbaa !0
  %cmp31 = icmp sgt i32 %9, 0
  br i1 %cmp31, label %if.then32, label %cleanup

if.then32:                                        ; preds = %if.end27
  %10 = load i32* %nbytes_in_lo32, align 4, !tbaa !0
  %11 = load i32* %nbytes_in_hi32, align 4, !tbaa !0
  %12 = or i32 %10, %11
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %if.then35, label %if.else

if.then35:                                        ; preds = %if.then32
  %14 = load %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %15 = call i64 @fwrite(i8* getelementptr inbounds ([22 x i8]* @.str1, i64 0, i64 0), i64 21, i64 1, %struct._IO_FILE* %14)
  br label %cleanup

if.else:                                          ; preds = %if.then32
  %shr.i = lshr i32 %11, 24
  %conv.i = trunc i32 %shr.i to i8
  %arrayidx.i = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 7
  store i8 %conv.i, i8* %arrayidx.i, align 1, !tbaa !1
  %shr1.i = lshr i32 %11, 16
  %conv3.i = trunc i32 %shr1.i to i8
  %arrayidx5.i = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 6
  store i8 %conv3.i, i8* %arrayidx5.i, align 1, !tbaa !1
  %shr6.i = lshr i32 %11, 8
  %conv8.i = trunc i32 %shr6.i to i8
  %arrayidx10.i = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 5
  store i8 %conv8.i, i8* %arrayidx10.i, align 1, !tbaa !1
  %conv12.i = trunc i32 %11 to i8
  %arrayidx14.i = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 4
  store i8 %conv12.i, i8* %arrayidx14.i, align 1, !tbaa !1
  %shr15.i = lshr i32 %10, 24
  %conv17.i = trunc i32 %shr15.i to i8
  %arrayidx19.i = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 3
  store i8 %conv17.i, i8* %arrayidx19.i, align 1, !tbaa !1
  %shr20.i = lshr i32 %10, 16
  %conv22.i = trunc i32 %shr20.i to i8
  %arrayidx24.i = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 2
  store i8 %conv22.i, i8* %arrayidx24.i, align 1, !tbaa !1
  %shr25.i = lshr i32 %10, 8
  %conv27.i = trunc i32 %shr25.i to i8
  %arrayidx29.i = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 1
  store i8 %conv27.i, i8* %arrayidx29.i, align 1, !tbaa !1
  %conv31.i = trunc i32 %10 to i8
  %arrayidx33.i = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 0
  store i8 %conv31.i, i8* %arrayidx33.i, align 1, !tbaa !1
  %16 = load i32* %nbytes_out_lo32, align 4, !tbaa !0
  %17 = load i32* %nbytes_out_hi32, align 4, !tbaa !0
  %shr.i62 = lshr i32 %17, 24
  %conv.i63 = trunc i32 %shr.i62 to i8
  %arrayidx.i64 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 7
  store i8 %conv.i63, i8* %arrayidx.i64, align 1, !tbaa !1
  %shr1.i65 = lshr i32 %17, 16
  %conv3.i66 = trunc i32 %shr1.i65 to i8
  %arrayidx5.i67 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 6
  store i8 %conv3.i66, i8* %arrayidx5.i67, align 1, !tbaa !1
  %shr6.i68 = lshr i32 %17, 8
  %conv8.i69 = trunc i32 %shr6.i68 to i8
  %arrayidx10.i70 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 5
  store i8 %conv8.i69, i8* %arrayidx10.i70, align 1, !tbaa !1
  %conv12.i71 = trunc i32 %17 to i8
  %arrayidx14.i72 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 4
  store i8 %conv12.i71, i8* %arrayidx14.i72, align 1, !tbaa !1
  %shr15.i73 = lshr i32 %16, 24
  %conv17.i74 = trunc i32 %shr15.i73 to i8
  %arrayidx19.i75 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 3
  store i8 %conv17.i74, i8* %arrayidx19.i75, align 1, !tbaa !1
  %shr20.i76 = lshr i32 %16, 16
  %conv22.i77 = trunc i32 %shr20.i76 to i8
  %arrayidx24.i78 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 2
  store i8 %conv22.i77, i8* %arrayidx24.i78, align 1, !tbaa !1
  %shr25.i79 = lshr i32 %16, 8
  %conv27.i80 = trunc i32 %shr25.i79 to i8
  %arrayidx29.i81 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 1
  store i8 %conv27.i80, i8* %arrayidx29.i81, align 1, !tbaa !1
  %conv31.i82 = trunc i32 %16 to i8
  %arrayidx33.i83 = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 0
  store i8 %conv31.i82, i8* %arrayidx33.i83, align 1, !tbaa !1
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.for.body.i_crit_edge, %if.else
  %18 = phi i8 [ %conv31.i, %if.else ], [ %.pre101, %for.body.i.for.body.i_crit_edge ]
  %indvars.iv.i = phi i64 [ 1, %if.else ], [ %phitmp, %for.body.i.for.body.i_crit_edge ]
  %sum.08.i = phi double [ 0.000000e+00, %if.else ], [ %add.i, %for.body.i.for.body.i_crit_edge ]
  %base.07.i = phi double [ 1.000000e+00, %if.else ], [ %mul1.i, %for.body.i.for.body.i_crit_edge ]
  %conv.i85 = uitofp i8 %18 to double
  %mul.i = fmul double %base.07.i, %conv.i85
  %add.i = fadd double %sum.08.i, %mul.i
  %lftr.wideiv99 = trunc i64 %indvars.iv.i to i32
  %exitcond100 = icmp eq i32 %lftr.wideiv99, 8
  br i1 %exitcond100, label %for.body.i97, label %for.body.i.for.body.i_crit_edge

for.body.i.for.body.i_crit_edge:                  ; preds = %for.body.i
  %mul1.i = fmul double %base.07.i, 2.560000e+02
  %arrayidx.i84.phi.trans.insert = getelementptr inbounds %struct.UInt64* %nbytes_in, i64 0, i32 0, i64 %indvars.iv.i
  %.pre101 = load i8* %arrayidx.i84.phi.trans.insert, align 1, !tbaa !1
  %phitmp = add i64 %indvars.iv.i, 1
  br label %for.body.i

for.body.i97:                                     ; preds = %for.body.i, %for.body.i97.for.body.i97_crit_edge
  %19 = phi i8 [ %.pre102, %for.body.i97.for.body.i97_crit_edge ], [ %conv31.i82, %for.body.i ]
  %indvars.iv.i86 = phi i64 [ %phitmp103, %for.body.i97.for.body.i97_crit_edge ], [ 1, %for.body.i ]
  %sum.08.i87 = phi double [ %add.i92, %for.body.i97.for.body.i97_crit_edge ], [ 0.000000e+00, %for.body.i ]
  %base.07.i88 = phi double [ %mul1.i93, %for.body.i97.for.body.i97_crit_edge ], [ 1.000000e+00, %for.body.i ]
  %conv.i90 = uitofp i8 %19 to double
  %mul.i91 = fmul double %base.07.i88, %conv.i90
  %add.i92 = fadd double %sum.08.i87, %mul.i91
  %lftr.wideiv = trunc i64 %indvars.iv.i86 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 8
  br i1 %exitcond, label %uInt64_to_double.exit98, label %for.body.i97.for.body.i97_crit_edge

for.body.i97.for.body.i97_crit_edge:              ; preds = %for.body.i97
  %mul1.i93 = fmul double %base.07.i88, 2.560000e+02
  %arrayidx.i89.phi.trans.insert = getelementptr inbounds %struct.UInt64* %nbytes_out, i64 0, i32 0, i64 %indvars.iv.i86
  %.pre102 = load i8* %arrayidx.i89.phi.trans.insert, align 1, !tbaa !1
  %phitmp103 = add i64 %indvars.iv.i86, 1
  br label %for.body.i97

uInt64_to_double.exit98:                          ; preds = %for.body.i97
  %arraydecay39 = getelementptr inbounds [32 x i8]* %buf_nin, i64 0, i64 0
  call fastcc void @uInt64_toAscii(i8* %arraydecay39, %struct.UInt64* %nbytes_in) #7
  %arraydecay40 = getelementptr inbounds [32 x i8]* %buf_nout, i64 0, i64 0
  call fastcc void @uInt64_toAscii(i8* %arraydecay40, %struct.UInt64* %nbytes_out) #7
  %20 = load %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %div = fdiv double %add.i, %add.i92
  %mul = fmul double %add.i92, 8.000000e+00
  %div41 = fdiv double %mul, %add.i
  %div42 = fdiv double %add.i92, %add.i
  %sub = fsub double 1.000000e+00, %div42
  %mul43 = fmul double %sub, 1.000000e+02
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([57 x i8]* @.str2, i64 0, i64 0), double %div, double %div41, double %mul43, i8* %arraydecay39, i8* %arraydecay40) #6
  br label %cleanup

errhandler:                                       ; preds = %if.end12, %while.end, %entry
  call void @BZ2_bzWriteClose64(i32* %bzerr_dummy, i8* %call, i32 1, i32* %nbytes_in_lo32, i32* %nbytes_in_hi32, i32* %nbytes_out_lo32, i32* %nbytes_out_hi32) #6
  %21 = load i32* %bzerr, align 4, !tbaa !0
  switch i32 %21, label %sw.default [
    i32 -9, label %sw.bb
    i32 -3, label %sw.bb49
    i32 -6, label %errhandler_io
  ]

sw.bb:                                            ; preds = %errhandler
  call fastcc void @configError() #7
  unreachable

sw.bb49:                                          ; preds = %errhandler
  call fastcc void @outOfMemory() #7
  unreachable

errhandler_io:                                    ; preds = %errhandler
  call fastcc void @ioError() #7
  unreachable

sw.default:                                       ; preds = %errhandler
  call fastcc void @panic(i8* getelementptr inbounds ([26 x i8]* @.str3, i64 0, i64 0)) #7
  unreachable

cleanup:                                          ; preds = %if.end27, %uInt64_to_double.exit98, %if.then35
  call void @llvm.lifetime.end(i64 5000, i8* %0) #1
  ret void
}
