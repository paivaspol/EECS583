define internal fastcc void @uInt64_toAscii(i8* nocapture %outbuf, %struct.UInt64* nocapture %n) #0 {
entry:
  %buf = alloca [32 x i8], align 16
  %n_copy = alloca i64, align 8
  %tmpcast = bitcast i64* %n_copy to %struct.UInt64*
  %0 = bitcast %struct.UInt64* %n to i64*
  %1 = load i64* %0, align 1
  store i64 %1, i64* %n_copy, align 8
  br label %do.body

do.body:                                          ; preds = %for.body.i23, %entry
  %indvars.iv30 = phi i64 [ 0, %entry ], [ %indvars.iv.next31, %for.body.i23 ]
  %nBuf.0 = phi i32 [ 0, %entry ], [ %inc, %for.body.i23 ]
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %do.body
  %indvars.iv.i = phi i64 [ 7, %do.body ], [ %indvars.iv.next.i, %for.body.i ]
  %rem.012.i = phi i32 [ 0, %do.body ], [ %rem6.i, %for.body.i ]
  %mul.i = shl nuw nsw i32 %rem.012.i, 8
  %arrayidx.i = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 %indvars.iv.i
  %2 = load i8* %arrayidx.i, align 1, !tbaa !1
  %conv.i = zext i8 %2 to i32
  %add.i = or i32 %conv.i, %mul.i
  %div.i = udiv i32 %add.i, 10
  %conv2.i = trunc i32 %div.i to i8
  store i8 %conv2.i, i8* %arrayidx.i, align 1, !tbaa !1
  %rem6.i = urem i32 %add.i, 10
  %indvars.iv.next.i = add i64 %indvars.iv.i, -1
  %3 = trunc i64 %indvars.iv.i to i32
  %cmp.i = icmp sgt i32 %3, 0
  br i1 %cmp.i, label %for.body.i, label %uInt64_qrm10.exit

uInt64_qrm10.exit:                                ; preds = %for.body.i
  %add27 = or i32 %rem6.i, 48
  %conv = trunc i32 %add27 to i8
  %arrayidx = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 %indvars.iv30
  store i8 %conv, i8* %arrayidx, align 1, !tbaa !1
  %indvars.iv.next31 = add i64 %indvars.iv30, 1
  %inc = add nsw i32 %nBuf.0, 1
  br label %for.body.i23

for.cond.i:                                       ; preds = %for.body.i23
  %4 = trunc i64 %indvars.iv.next.i22 to i32
  %cmp.i19 = icmp slt i32 %4, 8
  br i1 %cmp.i19, label %for.body.i23, label %do.end

for.body.i23:                                     ; preds = %for.cond.i, %uInt64_qrm10.exit
  %indvars.iv.i20 = phi i64 [ 0, %uInt64_qrm10.exit ], [ %indvars.iv.next.i22, %for.cond.i ]
  %arrayidx.i21 = getelementptr inbounds %struct.UInt64* %tmpcast, i64 0, i32 0, i64 %indvars.iv.i20
  %5 = load i8* %arrayidx.i21, align 1, !tbaa !1
  %cmp1.i = icmp eq i8 %5, 0
  %indvars.iv.next.i22 = add i64 %indvars.iv.i20, 1
  br i1 %cmp1.i, label %for.cond.i, label %do.body

do.end:                                           ; preds = %for.cond.i
  %idxprom2 = sext i32 %inc to i64
  %arrayidx3 = getelementptr inbounds i8* %outbuf, i64 %idxprom2
  store i8 0, i8* %arrayidx3, align 1, !tbaa !1
  %cmp28 = icmp sgt i32 %nBuf.0, -1
  br i1 %cmp28, label %for.body, label %for.end

for.body:                                         ; preds = %do.end, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %do.end ]
  %6 = trunc i64 %indvars.iv to i32
  %sub5 = sub i32 %nBuf.0, %6
  %idxprom6 = sext i32 %sub5 to i64
  %arrayidx7 = getelementptr inbounds [32 x i8]* %buf, i64 0, i64 %idxprom6
  %7 = load i8* %arrayidx7, align 1, !tbaa !1
  %arrayidx9 = getelementptr inbounds i8* %outbuf, i64 %indvars.iv
  store i8 %7, i8* %arrayidx9, align 1, !tbaa !1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %8 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %8, %inc
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %do.end
  ret void
}
