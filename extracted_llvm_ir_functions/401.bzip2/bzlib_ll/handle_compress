define internal fastcc zeroext i8 @handle_compress(%struct.bz_stream* nocapture readonly %strm) #4 {
  %1 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  %2 = bitcast i8** %1 to %struct.EState**
  %3 = load %struct.EState** %2, align 8, !tbaa !27
  %4 = getelementptr inbounds %struct.EState* %3, i64 0, i32 2
  %5 = getelementptr inbounds %struct.EState* %3, i64 0, i32 20
  %6 = getelementptr inbounds %struct.EState* %3, i64 0, i32 0
  %7 = getelementptr inbounds %struct.EState* %3, i64 0, i32 19
  %8 = getelementptr inbounds %struct.EState* %3, i64 0, i32 1
  %9 = getelementptr inbounds %struct.EState* %3, i64 0, i32 3
  %10 = getelementptr inbounds %struct.EState* %3, i64 0, i32 13
  %11 = getelementptr inbounds %struct.EState* %3, i64 0, i32 14
  %12 = getelementptr inbounds %struct.EState* %3, i64 0, i32 17
  %13 = getelementptr inbounds %struct.EState* %3, i64 0, i32 26
  %scevgep.i = getelementptr %struct.EState* %3, i64 0, i32 22, i64 0
  %14 = getelementptr inbounds %struct.EState* %3, i64 0, i32 29
  %15 = getelementptr inbounds %struct.EState* %3, i64 0, i32 11
  %16 = getelementptr inbounds %struct.EState* %3, i64 0, i32 18
  %17 = getelementptr inbounds %struct.EState* %3, i64 0, i32 9
  br label %.outer

.outer:                                           ; preds = %231, %230, %flush_RL.exit, %0
  %progress_out.0.ph = phi i8 [ 0, %0 ], [ %progress_out.16, %flush_RL.exit ], [ %progress_out.16, %230 ], [ %progress_out.16, %231 ]
  %progress_in.0.ph = phi i8 [ 0, %0 ], [ %215, %flush_RL.exit ], [ %215, %230 ], [ %215, %231 ]
  br label %18

; <label>:18                                      ; preds = %18, %.outer
  %19 = load i32* %4, align 4, !tbaa !16
  switch i32 %19, label %18 [
    i32 1, label %20
    i32 2, label %..thread_crit_edge
  ]

; <label>:20                                      ; preds = %18
  %21 = load %struct.bz_stream** %6, align 8, !tbaa !11
  %22 = getelementptr inbounds %struct.bz_stream* %21, i64 0, i32 5
  %23 = load i32* %22, align 4, !tbaa !41
  %24 = icmp eq i32 %23, 0
  %.pre = load i32* %5, align 4, !tbaa !36
  br i1 %24, label %copy_output_until_stop.exit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %20, %.backedge.i
  %25 = phi i32 [ %37, %.backedge.i ], [ %.pre, %20 ]
  %26 = phi %struct.bz_stream* [ %38, %.backedge.i ], [ %21, %20 ]
  %progress_out.01.i = phi i8 [ 1, %.backedge.i ], [ 0, %20 ]
  %27 = load i32* %7, align 4, !tbaa !35
  %28 = icmp slt i32 %25, %27
  br i1 %28, label %29, label %copy_output_until_stop.exit

; <label>:29                                      ; preds = %.lr.ph.i
  %30 = sext i32 %25 to i64
  %31 = load i8** %15, align 8, !tbaa !25
  %32 = getelementptr inbounds i8* %31, i64 %30
  %33 = load i8* %32, align 1, !tbaa !42
  %34 = getelementptr inbounds %struct.bz_stream* %26, i64 0, i32 4
  %35 = load i8** %34, align 8, !tbaa !43
  store i8 %33, i8* %35, align 1, !tbaa !42
  %36 = load i32* %5, align 4, !tbaa !36
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %5, align 4, !tbaa !36
  %38 = load %struct.bz_stream** %6, align 8, !tbaa !11
  %39 = getelementptr inbounds %struct.bz_stream* %38, i64 0, i32 5
  %40 = load i32* %39, align 4, !tbaa !41
  %41 = add i32 %40, -1
  store i32 %41, i32* %39, align 4, !tbaa !41
  %42 = getelementptr inbounds %struct.bz_stream* %38, i64 0, i32 4
  %43 = load i8** %42, align 8, !tbaa !43
  %44 = getelementptr inbounds i8* %43, i64 1
  store i8* %44, i8** %42, align 8, !tbaa !43
  %45 = getelementptr inbounds %struct.bz_stream* %38, i64 0, i32 6
  %46 = load i32* %45, align 4, !tbaa !30
  %47 = add i32 %46, 1
  store i32 %47, i32* %45, align 4, !tbaa !30
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %.backedge.i

; <label>:49                                      ; preds = %29
  %50 = getelementptr inbounds %struct.bz_stream* %38, i64 0, i32 7
  %51 = load i32* %50, align 4, !tbaa !31
  %52 = add i32 %51, 1
  store i32 %52, i32* %50, align 4, !tbaa !31
  br label %.backedge.i

.backedge.i:                                      ; preds = %49, %29
  %53 = icmp eq i32 %41, 0
  br i1 %53, label %copy_output_until_stop.exit, label %.lr.ph.i

copy_output_until_stop.exit:                      ; preds = %.lr.ph.i, %.backedge.i, %20
  %54 = phi i32 [ %.pre, %20 ], [ %25, %.lr.ph.i ], [ %37, %.backedge.i ]
  %progress_out.0.lcssa.i = phi i8 [ 0, %20 ], [ %progress_out.01.i, %.lr.ph.i ], [ 1, %.backedge.i ]
  %55 = or i8 %progress_out.0.lcssa.i, %progress_out.0.ph
  %56 = load i32* %7, align 4, !tbaa !35
  %57 = icmp slt i32 %54, %56
  br i1 %57, label %isempty_RL.exit, label %58

; <label>:58                                      ; preds = %copy_output_until_stop.exit
  %59 = load i32* %8, align 4, !tbaa !17
  %60 = icmp eq i32 %59, 4
  br i1 %60, label %61, label %isempty_RL.exit.thread

; <label>:61                                      ; preds = %58
  %62 = load i32* %9, align 4, !tbaa !39
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %isempty_RL.exit.thread

; <label>:64                                      ; preds = %61
  %65 = load i32* %10, align 4, !tbaa !32
  %66 = icmp ult i32 %65, 256
  br i1 %66, label %67, label %isempty_RL.exit

; <label>:67                                      ; preds = %64
  %68 = load i32* %11, align 4, !tbaa !33
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %isempty_RL.exit.thread, label %isempty_RL.exit

isempty_RL.exit.thread:                           ; preds = %67, %61, %58
  store i32 0, i32* %12, align 4, !tbaa !34
  store i32 0, i32* %7, align 4, !tbaa !35
  store i32 0, i32* %5, align 4, !tbaa !36
  store i32 -1, i32* %13, align 4, !tbaa !37
  tail call void @llvm.memset.p0i8.i64(i8* %scevgep.i, i8 0, i64 256, i32 1, i1 false) #8
  %70 = load i32* %14, align 4, !tbaa !38
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %14, align 4, !tbaa !38
  store i32 2, i32* %4, align 4, !tbaa !16
  %72 = icmp eq i32 %59, 3
  br i1 %72, label %73, label %.thread

; <label>:73                                      ; preds = %isempty_RL.exit.thread
  %74 = load i32* %9, align 4, !tbaa !39
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %..thread_crit_edge

; <label>:76                                      ; preds = %73
  %77 = load i32* %10, align 4, !tbaa !32
  %78 = icmp ult i32 %77, 256
  br i1 %78, label %79, label %isempty_RL.exit

; <label>:79                                      ; preds = %76
  %80 = load i32* %11, align 4, !tbaa !33
  %81 = icmp sgt i32 %80, 0
  br i1 %81, label %..thread_crit_edge, label %isempty_RL.exit

..thread_crit_edge:                               ; preds = %18, %73, %79
  %progress_out.117 = phi i8 [ %55, %79 ], [ %55, %73 ], [ %progress_out.0.ph, %18 ]
  %.pre15 = load i32* %8, align 4, !tbaa !17
  br label %.thread

.thread:                                          ; preds = %..thread_crit_edge, %isempty_RL.exit.thread
  %82 = phi i32 [ %.pre15, %..thread_crit_edge ], [ %59, %isempty_RL.exit.thread ]
  %progress_out.16 = phi i8 [ %progress_out.117, %..thread_crit_edge ], [ %55, %isempty_RL.exit.thread ]
  %83 = icmp eq i32 %82, 2
  %84 = load i32* %12, align 4, !tbaa !34
  %85 = load i32* %16, align 4, !tbaa !20
  %86 = icmp slt i32 %84, %85
  br i1 %83, label %.preheader.i, label %.preheader5.i

.preheader5.i:                                    ; preds = %.thread
  br i1 %86, label %.lr.ph11.i, label %copy_input_until_stop.exit

.lr.ph11.i:                                       ; preds = %.preheader5.i
  %.pre.i1 = load %struct.bz_stream** %6, align 8, !tbaa !11
  %.phi.trans.insert.i = getelementptr inbounds %struct.bz_stream* %.pre.i1, i64 0, i32 1
  %.pre21.i = load i32* %.phi.trans.insert.i, align 4, !tbaa !40
  br label %147

.preheader.i:                                     ; preds = %.thread
  br i1 %86, label %.lr.ph.i2, label %copy_input_until_stop.exit

.lr.ph.i2:                                        ; preds = %.preheader.i
  %.pre20.i = load %struct.bz_stream** %6, align 8, !tbaa !11
  %.phi.trans.insert22.i = getelementptr inbounds %struct.bz_stream* %.pre20.i, i64 0, i32 1
  %.pre23.i = load i32* %.phi.trans.insert22.i, align 4, !tbaa !40
  br label %87

; <label>:87                                      ; preds = %.backedge.i3, %.lr.ph.i2
  %88 = phi i32 [ %85, %.lr.ph.i2 ], [ %145, %.backedge.i3 ]
  %89 = phi i32 [ %.pre23.i, %.lr.ph.i2 ], [ %135, %.backedge.i3 ]
  %90 = phi i32 [ %84, %.lr.ph.i2 ], [ %144, %.backedge.i3 ]
  %91 = phi %struct.bz_stream* [ %.pre20.i, %.lr.ph.i2 ], [ %129, %.backedge.i3 ]
  %progress_in.07.i = phi i8 [ 0, %.lr.ph.i2 ], [ 1, %.backedge.i3 ]
  %92 = icmp eq i32 %89, 0
  br i1 %92, label %copy_input_until_stop.exit, label %93

; <label>:93                                      ; preds = %87
  %94 = getelementptr inbounds %struct.bz_stream* %91, i64 0, i32 0
  %95 = load i8** %94, align 8, !tbaa !44
  %96 = load i8* %95, align 1, !tbaa !42
  %97 = zext i8 %96 to i32
  %98 = load i32* %10, align 4, !tbaa !32
  %99 = icmp eq i32 %97, %98
  %100 = load i32* %11, align 4, !tbaa !33
  br i1 %99, label %121, label %101

; <label>:101                                     ; preds = %93
  %102 = icmp eq i32 %100, 1
  br i1 %102, label %103, label %thread-pre-split.i

; <label>:103                                     ; preds = %101
  %104 = trunc i32 %98 to i8
  %105 = load i32* %13, align 4, !tbaa !37
  %106 = shl i32 %105, 8
  %107 = lshr i32 %105, 24
  %108 = and i32 %98, 255
  %109 = xor i32 %107, %108
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %110
  %112 = load i32* %111, align 4, !tbaa !45
  %113 = xor i32 %106, %112
  store i32 %113, i32* %13, align 4, !tbaa !37
  %114 = zext i32 %98 to i64
  %115 = getelementptr inbounds %struct.EState* %3, i64 0, i32 22, i64 %114
  store i8 1, i8* %115, align 1, !tbaa !42
  %116 = sext i32 %90 to i64
  %117 = load i8** %17, align 8, !tbaa !23
  %118 = getelementptr inbounds i8* %117, i64 %116
  store i8 %104, i8* %118, align 1, !tbaa !42
  %119 = load i32* %12, align 4, !tbaa !34
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %12, align 4, !tbaa !34
  store i32 %97, i32* %10, align 4, !tbaa !32
  br label %128

; <label>:121                                     ; preds = %93
  %122 = icmp eq i32 %100, 255
  br i1 %122, label %thread-pre-split.i, label %126

thread-pre-split.i:                               ; preds = %121, %101
  %123 = icmp ult i32 %98, 256
  br i1 %123, label %124, label %125

; <label>:124                                     ; preds = %thread-pre-split.i
  tail call fastcc void @add_pair_to_block(%struct.EState* %3) #10
  br label %125

; <label>:125                                     ; preds = %124, %thread-pre-split.i
  store i32 %97, i32* %10, align 4, !tbaa !32
  store i32 1, i32* %11, align 4, !tbaa !33
  br label %128

; <label>:126                                     ; preds = %121
  %127 = add nsw i32 %100, 1
  store i32 %127, i32* %11, align 4, !tbaa !33
  br label %128

; <label>:128                                     ; preds = %126, %125, %103
  %129 = load %struct.bz_stream** %6, align 8, !tbaa !11
  %130 = getelementptr inbounds %struct.bz_stream* %129, i64 0, i32 0
  %131 = load i8** %130, align 8, !tbaa !44
  %132 = getelementptr inbounds i8* %131, i64 1
  store i8* %132, i8** %130, align 8, !tbaa !44
  %133 = getelementptr inbounds %struct.bz_stream* %129, i64 0, i32 1
  %134 = load i32* %133, align 4, !tbaa !40
  %135 = add i32 %134, -1
  store i32 %135, i32* %133, align 4, !tbaa !40
  %136 = getelementptr inbounds %struct.bz_stream* %129, i64 0, i32 2
  %137 = load i32* %136, align 4, !tbaa !28
  %138 = add i32 %137, 1
  store i32 %138, i32* %136, align 4, !tbaa !28
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %.backedge.i3

; <label>:140                                     ; preds = %128
  %141 = getelementptr inbounds %struct.bz_stream* %129, i64 0, i32 3
  %142 = load i32* %141, align 4, !tbaa !29
  %143 = add i32 %142, 1
  store i32 %143, i32* %141, align 4, !tbaa !29
  br label %.backedge.i3

.backedge.i3:                                     ; preds = %140, %128
  %144 = load i32* %12, align 4, !tbaa !34
  %145 = load i32* %16, align 4, !tbaa !20
  %146 = icmp slt i32 %144, %145
  br i1 %146, label %87, label %copy_input_until_stop.exit

; <label>:147                                     ; preds = %207, %.lr.ph11.i
  %148 = phi i32 [ %85, %.lr.ph11.i ], [ %211, %207 ]
  %149 = phi i32 [ %.pre21.i, %.lr.ph11.i ], [ %198, %207 ]
  %150 = phi i32 [ %84, %.lr.ph11.i ], [ %210, %207 ]
  %151 = phi %struct.bz_stream* [ %.pre.i1, %.lr.ph11.i ], [ %192, %207 ]
  %progress_in.110.i = phi i8 [ 0, %.lr.ph11.i ], [ 1, %207 ]
  %152 = icmp eq i32 %149, 0
  br i1 %152, label %copy_input_until_stop.exit, label %153

; <label>:153                                     ; preds = %147
  %154 = load i32* %9, align 4, !tbaa !39
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %copy_input_until_stop.exit, label %156

; <label>:156                                     ; preds = %153
  %157 = getelementptr inbounds %struct.bz_stream* %151, i64 0, i32 0
  %158 = load i8** %157, align 8, !tbaa !44
  %159 = load i8* %158, align 1, !tbaa !42
  %160 = zext i8 %159 to i32
  %161 = load i32* %10, align 4, !tbaa !32
  %162 = icmp eq i32 %160, %161
  %163 = load i32* %11, align 4, !tbaa !33
  br i1 %162, label %184, label %164

; <label>:164                                     ; preds = %156
  %165 = icmp eq i32 %163, 1
  br i1 %165, label %166, label %thread-pre-split3.i

; <label>:166                                     ; preds = %164
  %167 = trunc i32 %161 to i8
  %168 = load i32* %13, align 4, !tbaa !37
  %169 = shl i32 %168, 8
  %170 = lshr i32 %168, 24
  %171 = and i32 %161, 255
  %172 = xor i32 %170, %171
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %173
  %175 = load i32* %174, align 4, !tbaa !45
  %176 = xor i32 %169, %175
  store i32 %176, i32* %13, align 4, !tbaa !37
  %177 = zext i32 %161 to i64
  %178 = getelementptr inbounds %struct.EState* %3, i64 0, i32 22, i64 %177
  store i8 1, i8* %178, align 1, !tbaa !42
  %179 = sext i32 %150 to i64
  %180 = load i8** %17, align 8, !tbaa !23
  %181 = getelementptr inbounds i8* %180, i64 %179
  store i8 %167, i8* %181, align 1, !tbaa !42
  %182 = load i32* %12, align 4, !tbaa !34
  %183 = add nsw i32 %182, 1
  store i32 %183, i32* %12, align 4, !tbaa !34
  store i32 %160, i32* %10, align 4, !tbaa !32
  br label %191

; <label>:184                                     ; preds = %156
  %185 = icmp eq i32 %163, 255
  br i1 %185, label %thread-pre-split3.i, label %189

thread-pre-split3.i:                              ; preds = %184, %164
  %186 = icmp ult i32 %161, 256
  br i1 %186, label %187, label %188

; <label>:187                                     ; preds = %thread-pre-split3.i
  tail call fastcc void @add_pair_to_block(%struct.EState* %3) #10
  br label %188

; <label>:188                                     ; preds = %187, %thread-pre-split3.i
  store i32 %160, i32* %10, align 4, !tbaa !32
  store i32 1, i32* %11, align 4, !tbaa !33
  br label %191

; <label>:189                                     ; preds = %184
  %190 = add nsw i32 %163, 1
  store i32 %190, i32* %11, align 4, !tbaa !33
  br label %191

; <label>:191                                     ; preds = %189, %188, %166
  %192 = load %struct.bz_stream** %6, align 8, !tbaa !11
  %193 = getelementptr inbounds %struct.bz_stream* %192, i64 0, i32 0
  %194 = load i8** %193, align 8, !tbaa !44
  %195 = getelementptr inbounds i8* %194, i64 1
  store i8* %195, i8** %193, align 8, !tbaa !44
  %196 = getelementptr inbounds %struct.bz_stream* %192, i64 0, i32 1
  %197 = load i32* %196, align 4, !tbaa !40
  %198 = add i32 %197, -1
  store i32 %198, i32* %196, align 4, !tbaa !40
  %199 = getelementptr inbounds %struct.bz_stream* %192, i64 0, i32 2
  %200 = load i32* %199, align 4, !tbaa !28
  %201 = add i32 %200, 1
  store i32 %201, i32* %199, align 4, !tbaa !28
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %207

; <label>:203                                     ; preds = %191
  %204 = getelementptr inbounds %struct.bz_stream* %192, i64 0, i32 3
  %205 = load i32* %204, align 4, !tbaa !29
  %206 = add i32 %205, 1
  store i32 %206, i32* %204, align 4, !tbaa !29
  br label %207

; <label>:207                                     ; preds = %203, %191
  %208 = load i32* %9, align 4, !tbaa !39
  %209 = add i32 %208, -1
  store i32 %209, i32* %9, align 4, !tbaa !39
  %210 = load i32* %12, align 4, !tbaa !34
  %211 = load i32* %16, align 4, !tbaa !20
  %212 = icmp slt i32 %210, %211
  br i1 %212, label %147, label %copy_input_until_stop.exit

copy_input_until_stop.exit:                       ; preds = %147, %153, %207, %87, %.backedge.i3, %.preheader5.i, %.preheader.i
  %213 = phi i32 [ %85, %.preheader.i ], [ %85, %.preheader5.i ], [ %88, %87 ], [ %145, %.backedge.i3 ], [ %148, %153 ], [ %148, %147 ], [ %211, %207 ]
  %214 = phi i32 [ %84, %.preheader.i ], [ %84, %.preheader5.i ], [ %90, %87 ], [ %144, %.backedge.i3 ], [ %150, %153 ], [ %150, %147 ], [ %210, %207 ]
  %progress_in.2.i = phi i8 [ 0, %.preheader.i ], [ 0, %.preheader5.i ], [ %progress_in.07.i, %87 ], [ 1, %.backedge.i3 ], [ %progress_in.110.i, %153 ], [ %progress_in.110.i, %147 ], [ 1, %207 ]
  %215 = or i8 %progress_in.2.i, %progress_in.0.ph
  %216 = load i32* %8, align 4, !tbaa !17
  %217 = icmp eq i32 %216, 2
  br i1 %217, label %228, label %218

; <label>:218                                     ; preds = %copy_input_until_stop.exit
  %219 = load i32* %9, align 4, !tbaa !39
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %221, label %228

; <label>:221                                     ; preds = %218
  %222 = load i32* %10, align 4, !tbaa !32
  %223 = icmp ult i32 %222, 256
  br i1 %223, label %224, label %flush_RL.exit

; <label>:224                                     ; preds = %221
  tail call fastcc void @add_pair_to_block(%struct.EState* %3) #10
  %.pre16 = load i32* %8, align 4, !tbaa !17
  br label %flush_RL.exit

flush_RL.exit:                                    ; preds = %221, %224
  %225 = phi i32 [ %216, %221 ], [ %.pre16, %224 ]
  store i32 256, i32* %10, align 4, !tbaa !32
  store i32 0, i32* %11, align 4, !tbaa !33
  %226 = icmp eq i32 %225, 4
  %227 = zext i1 %226 to i8
  tail call void @BZ2_compressBlock(%struct.EState* %3, i8 zeroext %227) #10
  store i32 1, i32* %4, align 4, !tbaa !16
  br label %.outer

; <label>:228                                     ; preds = %copy_input_until_stop.exit, %218
  %229 = icmp slt i32 %214, %213
  br i1 %229, label %231, label %230

; <label>:230                                     ; preds = %228
  tail call void @BZ2_compressBlock(%struct.EState* %3, i8 zeroext 0) #10
  store i32 1, i32* %4, align 4, !tbaa !16
  br label %.outer

; <label>:231                                     ; preds = %228
  %232 = load %struct.bz_stream** %6, align 8, !tbaa !11
  %233 = getelementptr inbounds %struct.bz_stream* %232, i64 0, i32 1
  %234 = load i32* %233, align 4, !tbaa !40
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %isempty_RL.exit, label %.outer

isempty_RL.exit:                                  ; preds = %231, %79, %76, %67, %64, %copy_output_until_stop.exit
  %progress_out.2 = phi i8 [ %55, %copy_output_until_stop.exit ], [ %55, %64 ], [ %55, %67 ], [ %55, %76 ], [ %55, %79 ], [ %progress_out.16, %231 ]
  %progress_in.1 = phi i8 [ %progress_in.0.ph, %copy_output_until_stop.exit ], [ %progress_in.0.ph, %64 ], [ %progress_in.0.ph, %67 ], [ %progress_in.0.ph, %76 ], [ %progress_in.0.ph, %79 ], [ %215, %231 ]
  %236 = or i8 %progress_in.1, %progress_out.2
  %237 = icmp ne i8 %236, 0
  %238 = zext i1 %237 to i8
  ret i8 %238
}
