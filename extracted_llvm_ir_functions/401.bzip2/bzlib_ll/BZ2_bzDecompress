define i32 @BZ2_bzDecompress(%struct.bz_stream* readonly %strm) #4 {
  %1 = icmp eq %struct.bz_stream* %strm, null
  br i1 %1, label %unRLE_obuf_to_output_SMALL.exit.thread16, label %2

; <label>:2                                       ; preds = %0
  %3 = getelementptr inbounds %struct.bz_stream* %strm, i64 0, i32 8
  %4 = bitcast i8** %3 to %struct.DState**
  %5 = load %struct.DState** %4, align 8, !tbaa !27
  %6 = icmp eq %struct.DState* %5, null
  br i1 %6, label %unRLE_obuf_to_output_SMALL.exit.thread16, label %7

; <label>:7                                       ; preds = %2
  %8 = getelementptr inbounds %struct.DState* %5, i64 0, i32 0
  %9 = load %struct.bz_stream** %8, align 8, !tbaa !46
  %10 = icmp eq %struct.bz_stream* %9, %strm
  br i1 %10, label %.preheader24, label %unRLE_obuf_to_output_SMALL.exit.thread16

.preheader24:                                     ; preds = %7
  %11 = getelementptr inbounds %struct.DState* %5, i64 0, i32 1
  %12 = getelementptr inbounds %struct.DState* %5, i64 0, i32 10
  %13 = getelementptr inbounds %struct.DState* %5, i64 0, i32 4
  %14 = getelementptr inbounds %struct.DState* %5, i64 0, i32 25
  %15 = getelementptr inbounds %struct.DState* %5, i64 0, i32 2
  %16 = getelementptr inbounds %struct.DState* %5, i64 0, i32 3
  %17 = getelementptr inbounds %struct.DState* %5, i64 0, i32 17
  %18 = getelementptr inbounds %struct.DState* %5, i64 0, i32 15
  %19 = getelementptr inbounds %struct.DState* %5, i64 0, i32 20
  %20 = getelementptr inbounds %struct.DState* %5, i64 0, i32 14
  %21 = getelementptr inbounds %struct.DState* %5, i64 0, i32 51
  %22 = getelementptr inbounds %struct.DState* %5, i64 0, i32 5
  %23 = getelementptr inbounds %struct.DState* %5, i64 0, i32 6
  %24 = getelementptr inbounds %struct.DState* %5, i64 0, i32 12
  %25 = getelementptr inbounds %struct.DState* %5, i64 0, i32 23
  %26 = getelementptr inbounds %struct.DState* %5, i64 0, i32 26
  %27 = getelementptr inbounds %struct.DState* %5, i64 0, i32 21
  %28 = getelementptr inbounds %struct.DState* %5, i64 0, i32 22
  %.pre = load i32* %11, align 4, !tbaa !48
  br label %.backedge.outer

.backedge.outer:                                  ; preds = %820, %.preheader24
  %.ph = phi i32 [ 2, %820 ], [ %.pre, %.preheader24 ]
  br label %.backedge

.backedge:                                        ; preds = %.backedge.outer, %803
  switch i32 %.ph, label %803 [
    i32 1, label %unRLE_obuf_to_output_SMALL.exit.thread16
    i32 2, label %29
  ]

; <label>:29                                      ; preds = %.backedge
  %30 = load i8* %12, align 1, !tbaa !52
  %31 = icmp eq i8 %30, 0
  %32 = load i8* %13, align 1, !tbaa !55
  %33 = icmp eq i8 %32, 0
  br i1 %31, label %498, label %34

; <label>:34                                      ; preds = %29
  %35 = load %struct.bz_stream** %8, align 8, !tbaa !46
  %36 = getelementptr inbounds %struct.bz_stream* %35, i64 0, i32 5
  %37 = load i32* %36, align 4, !tbaa !41
  %38 = icmp eq i32 %37, 0
  br i1 %33, label %.preheader.i, label %.preheader53.i

.preheader53.i:                                   ; preds = %34
  br i1 %38, label %.loopexit, label %.lr.ph61.i

.lr.ph61.i:                                       ; preds = %.preheader53.i
  %.pre.i = load i32* %16, align 4, !tbaa !56
  br label %39

.preheader.i:                                     ; preds = %34
  br i1 %38, label %.loopexit, label %.lr.ph.i

.lr.ph.i:                                         ; preds = %.preheader.i
  %.pre67.i = load i32* %16, align 4, !tbaa !56
  br label %302

; <label>:39                                      ; preds = %.backedge56.i, %.lr.ph61.i
  %40 = phi i32 [ %.pre.i, %.lr.ph61.i ], [ %132, %.backedge56.i ]
  %41 = phi %struct.bz_stream* [ %35, %.lr.ph61.i ], [ %131, %.backedge56.i ]
  %42 = icmp eq i32 %40, 0
  br i1 %42, label %74, label %43

; <label>:43                                      ; preds = %39
  %44 = load i8* %15, align 1, !tbaa !57
  %45 = getelementptr inbounds %struct.bz_stream* %41, i64 0, i32 4
  %46 = load i8** %45, align 8, !tbaa !43
  store i8 %44, i8* %46, align 1, !tbaa !42
  %47 = load i32* %14, align 4, !tbaa !58
  %48 = shl i32 %47, 8
  %49 = lshr i32 %47, 24
  %50 = load i8* %15, align 1, !tbaa !57
  %51 = zext i8 %50 to i32
  %52 = xor i32 %51, %49
  %53 = zext i32 %52 to i64
  %54 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %53
  %55 = load i32* %54, align 4, !tbaa !45
  %56 = xor i32 %55, %48
  store i32 %56, i32* %14, align 4, !tbaa !58
  %57 = load i32* %16, align 4, !tbaa !56
  %58 = add nsw i32 %57, -1
  store i32 %58, i32* %16, align 4, !tbaa !56
  %59 = load %struct.bz_stream** %8, align 8, !tbaa !46
  %60 = getelementptr inbounds %struct.bz_stream* %59, i64 0, i32 4
  %61 = load i8** %60, align 8, !tbaa !43
  %62 = getelementptr inbounds i8* %61, i64 1
  store i8* %62, i8** %60, align 8, !tbaa !43
  %63 = getelementptr inbounds %struct.bz_stream* %59, i64 0, i32 5
  %64 = load i32* %63, align 4, !tbaa !41
  %65 = add i32 %64, -1
  store i32 %65, i32* %63, align 4, !tbaa !41
  %66 = getelementptr inbounds %struct.bz_stream* %59, i64 0, i32 6
  %67 = load i32* %66, align 4, !tbaa !30
  %68 = add i32 %67, 1
  store i32 %68, i32* %66, align 4, !tbaa !30
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %.backedge56.i

; <label>:70                                      ; preds = %43
  %71 = getelementptr inbounds %struct.bz_stream* %59, i64 0, i32 7
  %72 = load i32* %71, align 4, !tbaa !31
  %73 = add i32 %72, 1
  store i32 %73, i32* %71, align 4, !tbaa !31
  br label %.backedge56.i

; <label>:74                                      ; preds = %39
  %75 = load i32* %17, align 4, !tbaa !59
  %76 = load i32* %21, align 4, !tbaa !60
  %77 = add nsw i32 %76, 1
  %78 = icmp eq i32 %75, %77
  br i1 %78, label %.loopexit, label %79

; <label>:79                                      ; preds = %74
  %80 = icmp sgt i32 %75, %77
  br i1 %80, label %unRLE_obuf_to_output_SMALL.exit.thread16, label %81

; <label>:81                                      ; preds = %79
  store i32 1, i32* %16, align 4, !tbaa !56
  %82 = load i32* %18, align 4, !tbaa !61
  %83 = trunc i32 %82 to i8
  store i8 %83, i8* %15, align 1, !tbaa !57
  %84 = load i32* %20, align 4, !tbaa !62
  br label %85

; <label>:85                                      ; preds = %85, %81
  %na.0.i.i = phi i32 [ 256, %81 ], [ %.na.0.i.i, %85 ]
  %nb.0.i.i = phi i32 [ 0, %81 ], [ %nb.0..i.i, %85 ]
  %86 = add nsw i32 %nb.0.i.i, %na.0.i.i
  %87 = ashr i32 %86, 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %88
  %90 = load i32* %89, align 4, !tbaa !45
  %91 = icmp sgt i32 %90, %84
  %.na.0.i.i = select i1 %91, i32 %87, i32 %na.0.i.i
  %nb.0..i.i = select i1 %91, i32 %nb.0.i.i, i32 %87
  %92 = sub nsw i32 %.na.0.i.i, %nb.0..i.i
  %93 = icmp eq i32 %92, 1
  br i1 %93, label %BZ2_indexIntoF.exit.i, label %85

BZ2_indexIntoF.exit.i:                            ; preds = %85
  %94 = zext i32 %84 to i64
  %95 = load i16** %27, align 8, !tbaa !63
  %96 = getelementptr inbounds i16* %95, i64 %94
  %97 = load i16* %96, align 2, !tbaa !64
  %98 = zext i16 %97 to i32
  %99 = lshr i32 %84, 1
  %100 = zext i32 %99 to i64
  %101 = load i8** %28, align 8, !tbaa !66
  %102 = getelementptr inbounds i8* %101, i64 %100
  %103 = load i8* %102, align 1, !tbaa !42
  %104 = zext i8 %103 to i32
  %105 = shl i32 %84, 2
  %106 = and i32 %105, 4
  %107 = lshr i32 %104, %106
  %108 = shl i32 %107, 16
  %109 = and i32 %108, 983040
  %110 = or i32 %109, %98
  store i32 %110, i32* %20, align 4, !tbaa !62
  %111 = load i32* %22, align 4, !tbaa !67
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %113, label %120

; <label>:113                                     ; preds = %BZ2_indexIntoF.exit.i
  %114 = load i32* %23, align 4, !tbaa !68
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %115
  %117 = load i32* %116, align 4, !tbaa !45
  store i32 %117, i32* %22, align 4, !tbaa !67
  %118 = add nsw i32 %114, 1
  %119 = icmp eq i32 %118, 512
  %..i = select i1 %119, i32 0, i32 %118
  store i32 %..i, i32* %23, align 4, !tbaa !68
  br label %120

; <label>:120                                     ; preds = %113, %BZ2_indexIntoF.exit.i
  %121 = phi i32 [ %117, %113 ], [ %111, %BZ2_indexIntoF.exit.i ]
  %122 = add nsw i32 %121, -1
  store i32 %122, i32* %22, align 4, !tbaa !67
  %123 = add nsw i32 %75, 1
  store i32 %123, i32* %17, align 4, !tbaa !59
  %124 = icmp eq i32 %75, %76
  br i1 %124, label %.backedge56.i, label %125

; <label>:125                                     ; preds = %120
  %126 = icmp eq i32 %122, 1
  %127 = zext i1 %126 to i32
  %.masked.i = and i32 %nb.0..i.i, 255
  %128 = xor i32 %127, %.masked.i
  %129 = icmp eq i32 %128, %82
  br i1 %129, label %136, label %130

; <label>:130                                     ; preds = %125
  store i32 %128, i32* %18, align 4, !tbaa !61
  br label %.backedge56.i

.backedge56.i:                                    ; preds = %295, %223, %213, %179, %169, %130, %120, %70, %43
  %131 = phi %struct.bz_stream* [ %41, %130 ], [ %41, %179 ], [ %41, %223 ], [ %41, %295 ], [ %59, %70 ], [ %59, %43 ], [ %41, %120 ], [ %41, %169 ], [ %41, %213 ]
  %132 = phi i32 [ 1, %130 ], [ 2, %179 ], [ 3, %223 ], [ %262, %295 ], [ %58, %70 ], [ %58, %43 ], [ 1, %120 ], [ 2, %169 ], [ 3, %213 ]
  %133 = getelementptr inbounds %struct.bz_stream* %131, i64 0, i32 5
  %134 = load i32* %133, align 4, !tbaa !41
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %.loopexit, label %39

; <label>:136                                     ; preds = %125
  store i32 2, i32* %16, align 4, !tbaa !56
  br label %137

; <label>:137                                     ; preds = %137, %136
  %na.0.i48.i = phi i32 [ 256, %136 ], [ %.na.0.i50.i, %137 ]
  %nb.0.i49.i = phi i32 [ 0, %136 ], [ %nb.0..i51.i, %137 ]
  %138 = add nsw i32 %nb.0.i49.i, %na.0.i48.i
  %139 = ashr i32 %138, 1
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %140
  %142 = load i32* %141, align 4, !tbaa !45
  %143 = icmp sgt i32 %142, %110
  %.na.0.i50.i = select i1 %143, i32 %139, i32 %na.0.i48.i
  %nb.0..i51.i = select i1 %143, i32 %nb.0.i49.i, i32 %139
  %144 = sub nsw i32 %.na.0.i50.i, %nb.0..i51.i
  %145 = icmp eq i32 %144, 1
  br i1 %145, label %BZ2_indexIntoF.exit52.i, label %137

BZ2_indexIntoF.exit52.i:                          ; preds = %137
  %146 = zext i32 %110 to i64
  %147 = getelementptr inbounds i16* %95, i64 %146
  %148 = load i16* %147, align 2, !tbaa !64
  %149 = zext i16 %148 to i32
  %150 = lshr i32 %110, 1
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds i8* %101, i64 %151
  %153 = load i8* %152, align 1, !tbaa !42
  %154 = zext i8 %153 to i32
  %155 = shl nuw nsw i32 %98, 2
  %156 = and i32 %155, 4
  %157 = lshr i32 %154, %156
  %158 = shl i32 %157, 16
  %159 = and i32 %158, 983040
  %160 = or i32 %159, %149
  store i32 %160, i32* %20, align 4, !tbaa !62
  %161 = icmp eq i32 %122, 0
  br i1 %161, label %162, label %169

; <label>:162                                     ; preds = %BZ2_indexIntoF.exit52.i
  %163 = load i32* %23, align 4, !tbaa !68
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %164
  %166 = load i32* %165, align 4, !tbaa !45
  store i32 %166, i32* %22, align 4, !tbaa !67
  %167 = add nsw i32 %163, 1
  %168 = icmp eq i32 %167, 512
  %.4.i = select i1 %168, i32 0, i32 %167
  store i32 %.4.i, i32* %23, align 4, !tbaa !68
  br label %169

; <label>:169                                     ; preds = %162, %BZ2_indexIntoF.exit52.i
  %170 = phi i32 [ %166, %162 ], [ %122, %BZ2_indexIntoF.exit52.i ]
  %171 = add nsw i32 %170, -1
  store i32 %171, i32* %22, align 4, !tbaa !67
  %172 = add nsw i32 %75, 2
  store i32 %172, i32* %17, align 4, !tbaa !59
  %173 = icmp eq i32 %123, %76
  br i1 %173, label %.backedge56.i, label %174

; <label>:174                                     ; preds = %169
  %175 = icmp eq i32 %171, 1
  %176 = zext i1 %175 to i32
  %.masked1.i = and i32 %nb.0..i51.i, 255
  %177 = xor i32 %176, %.masked1.i
  %178 = icmp eq i32 %177, %82
  br i1 %178, label %180, label %179

; <label>:179                                     ; preds = %174
  store i32 %177, i32* %18, align 4, !tbaa !61
  br label %.backedge56.i

; <label>:180                                     ; preds = %174
  store i32 3, i32* %16, align 4, !tbaa !56
  br label %181

; <label>:181                                     ; preds = %181, %180
  %na.0.i43.i = phi i32 [ 256, %180 ], [ %.na.0.i45.i, %181 ]
  %nb.0.i44.i = phi i32 [ 0, %180 ], [ %nb.0..i46.i, %181 ]
  %182 = add nsw i32 %nb.0.i44.i, %na.0.i43.i
  %183 = ashr i32 %182, 1
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %184
  %186 = load i32* %185, align 4, !tbaa !45
  %187 = icmp sgt i32 %186, %160
  %.na.0.i45.i = select i1 %187, i32 %183, i32 %na.0.i43.i
  %nb.0..i46.i = select i1 %187, i32 %nb.0.i44.i, i32 %183
  %188 = sub nsw i32 %.na.0.i45.i, %nb.0..i46.i
  %189 = icmp eq i32 %188, 1
  br i1 %189, label %BZ2_indexIntoF.exit47.i, label %181

BZ2_indexIntoF.exit47.i:                          ; preds = %181
  %190 = zext i32 %160 to i64
  %191 = getelementptr inbounds i16* %95, i64 %190
  %192 = load i16* %191, align 2, !tbaa !64
  %193 = zext i16 %192 to i32
  %194 = lshr i32 %160, 1
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds i8* %101, i64 %195
  %197 = load i8* %196, align 1, !tbaa !42
  %198 = zext i8 %197 to i32
  %199 = shl nuw nsw i32 %149, 2
  %200 = and i32 %199, 4
  %201 = lshr i32 %198, %200
  %202 = shl i32 %201, 16
  %203 = and i32 %202, 983040
  %204 = or i32 %203, %193
  store i32 %204, i32* %20, align 4, !tbaa !62
  %205 = icmp eq i32 %171, 0
  br i1 %205, label %206, label %213

; <label>:206                                     ; preds = %BZ2_indexIntoF.exit47.i
  %207 = load i32* %23, align 4, !tbaa !68
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %208
  %210 = load i32* %209, align 4, !tbaa !45
  store i32 %210, i32* %22, align 4, !tbaa !67
  %211 = add nsw i32 %207, 1
  %212 = icmp eq i32 %211, 512
  %.5.i = select i1 %212, i32 0, i32 %211
  store i32 %.5.i, i32* %23, align 4, !tbaa !68
  br label %213

; <label>:213                                     ; preds = %206, %BZ2_indexIntoF.exit47.i
  %214 = phi i32 [ %210, %206 ], [ %171, %BZ2_indexIntoF.exit47.i ]
  %215 = add nsw i32 %214, -1
  store i32 %215, i32* %22, align 4, !tbaa !67
  %216 = add nsw i32 %75, 3
  store i32 %216, i32* %17, align 4, !tbaa !59
  %217 = icmp eq i32 %172, %76
  br i1 %217, label %.backedge56.i, label %218

; <label>:218                                     ; preds = %213
  %219 = icmp eq i32 %215, 1
  %220 = zext i1 %219 to i32
  %.masked2.i = and i32 %nb.0..i46.i, 255
  %221 = xor i32 %220, %.masked2.i
  %222 = icmp eq i32 %221, %82
  br i1 %222, label %.preheader17, label %223

; <label>:223                                     ; preds = %218
  store i32 %221, i32* %18, align 4, !tbaa !61
  br label %.backedge56.i

.preheader17:                                     ; preds = %218, %.preheader17
  %na.0.i38.i = phi i32 [ %.na.0.i40.i, %.preheader17 ], [ 256, %218 ]
  %nb.0.i39.i = phi i32 [ %nb.0..i41.i, %.preheader17 ], [ 0, %218 ]
  %224 = add nsw i32 %nb.0.i39.i, %na.0.i38.i
  %225 = ashr i32 %224, 1
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %226
  %228 = load i32* %227, align 4, !tbaa !45
  %229 = icmp sgt i32 %228, %204
  %.na.0.i40.i = select i1 %229, i32 %225, i32 %na.0.i38.i
  %nb.0..i41.i = select i1 %229, i32 %nb.0.i39.i, i32 %225
  %230 = sub nsw i32 %.na.0.i40.i, %nb.0..i41.i
  %231 = icmp eq i32 %230, 1
  br i1 %231, label %BZ2_indexIntoF.exit42.i, label %.preheader17

BZ2_indexIntoF.exit42.i:                          ; preds = %.preheader17
  %232 = zext i32 %204 to i64
  %233 = getelementptr inbounds i16* %95, i64 %232
  %234 = load i16* %233, align 2, !tbaa !64
  %235 = zext i16 %234 to i32
  %236 = lshr i32 %204, 1
  %237 = zext i32 %236 to i64
  %238 = getelementptr inbounds i8* %101, i64 %237
  %239 = load i8* %238, align 1, !tbaa !42
  %240 = zext i8 %239 to i32
  %241 = shl nuw nsw i32 %193, 2
  %242 = and i32 %241, 4
  %243 = lshr i32 %240, %242
  %244 = shl i32 %243, 16
  %245 = and i32 %244, 983040
  %246 = or i32 %245, %235
  store i32 %246, i32* %20, align 4, !tbaa !62
  %247 = icmp eq i32 %215, 0
  br i1 %247, label %248, label %255

; <label>:248                                     ; preds = %BZ2_indexIntoF.exit42.i
  %249 = load i32* %23, align 4, !tbaa !68
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %250
  %252 = load i32* %251, align 4, !tbaa !45
  store i32 %252, i32* %22, align 4, !tbaa !67
  %253 = add nsw i32 %249, 1
  %254 = icmp eq i32 %253, 512
  %.6.i = select i1 %254, i32 0, i32 %253
  store i32 %.6.i, i32* %23, align 4, !tbaa !68
  br label %255

; <label>:255                                     ; preds = %248, %BZ2_indexIntoF.exit42.i
  %256 = phi i32 [ %252, %248 ], [ %215, %BZ2_indexIntoF.exit42.i ]
  %257 = add nsw i32 %256, -1
  store i32 %257, i32* %22, align 4, !tbaa !67
  %258 = icmp eq i32 %257, 1
  %259 = zext i1 %258 to i32
  %260 = add nsw i32 %75, 4
  store i32 %260, i32* %17, align 4, !tbaa !59
  %.masked3.i = and i32 %nb.0..i41.i, 255
  %261 = xor i32 %259, %.masked3.i
  %262 = add nuw nsw i32 %261, 4
  store i32 %262, i32* %16, align 4, !tbaa !56
  br label %263

; <label>:263                                     ; preds = %263, %255
  %na.0.i33.i = phi i32 [ 256, %255 ], [ %.na.0.i35.i, %263 ]
  %nb.0.i34.i = phi i32 [ 0, %255 ], [ %nb.0..i36.i, %263 ]
  %264 = add nsw i32 %nb.0.i34.i, %na.0.i33.i
  %265 = ashr i32 %264, 1
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %266
  %268 = load i32* %267, align 4, !tbaa !45
  %269 = icmp sgt i32 %268, %246
  %.na.0.i35.i = select i1 %269, i32 %265, i32 %na.0.i33.i
  %nb.0..i36.i = select i1 %269, i32 %nb.0.i34.i, i32 %265
  %270 = sub nsw i32 %.na.0.i35.i, %nb.0..i36.i
  %271 = icmp eq i32 %270, 1
  br i1 %271, label %BZ2_indexIntoF.exit37.i, label %263

BZ2_indexIntoF.exit37.i:                          ; preds = %263
  store i32 %nb.0..i36.i, i32* %18, align 4, !tbaa !61
  %272 = zext i32 %246 to i64
  %273 = getelementptr inbounds i16* %95, i64 %272
  %274 = load i16* %273, align 2, !tbaa !64
  %275 = zext i16 %274 to i32
  %276 = lshr i32 %246, 1
  %277 = zext i32 %276 to i64
  %278 = getelementptr inbounds i8* %101, i64 %277
  %279 = load i8* %278, align 1, !tbaa !42
  %280 = zext i8 %279 to i32
  %281 = shl nuw nsw i32 %235, 2
  %282 = and i32 %281, 4
  %283 = lshr i32 %280, %282
  %284 = shl i32 %283, 16
  %285 = and i32 %284, 983040
  %286 = or i32 %285, %275
  store i32 %286, i32* %20, align 4, !tbaa !62
  %287 = icmp eq i32 %257, 0
  br i1 %287, label %288, label %295

; <label>:288                                     ; preds = %BZ2_indexIntoF.exit37.i
  %289 = load i32* %23, align 4, !tbaa !68
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %290
  %292 = load i32* %291, align 4, !tbaa !45
  store i32 %292, i32* %22, align 4, !tbaa !67
  %293 = add nsw i32 %289, 1
  %294 = icmp eq i32 %293, 512
  %.7.i = select i1 %294, i32 0, i32 %293
  store i32 %.7.i, i32* %23, align 4, !tbaa !68
  br label %295

; <label>:295                                     ; preds = %288, %BZ2_indexIntoF.exit37.i
  %296 = phi i32 [ %292, %288 ], [ %257, %BZ2_indexIntoF.exit37.i ]
  %297 = add nsw i32 %296, -1
  store i32 %297, i32* %22, align 4, !tbaa !67
  %298 = icmp eq i32 %297, 1
  %299 = zext i1 %298 to i32
  %300 = xor i32 %299, %nb.0..i36.i
  store i32 %300, i32* %18, align 4, !tbaa !61
  %301 = add nsw i32 %75, 5
  store i32 %301, i32* %17, align 4, !tbaa !59
  br label %.backedge56.i

; <label>:302                                     ; preds = %.backedge.i, %.lr.ph.i
  %303 = phi i32 [ %.pre67.i, %.lr.ph.i ], [ %381, %.backedge.i ]
  %304 = phi %struct.bz_stream* [ %35, %.lr.ph.i ], [ %380, %.backedge.i ]
  %305 = icmp eq i32 %303, 0
  br i1 %305, label %337, label %306

; <label>:306                                     ; preds = %302
  %307 = load i8* %15, align 1, !tbaa !57
  %308 = getelementptr inbounds %struct.bz_stream* %304, i64 0, i32 4
  %309 = load i8** %308, align 8, !tbaa !43
  store i8 %307, i8* %309, align 1, !tbaa !42
  %310 = load i32* %14, align 4, !tbaa !58
  %311 = shl i32 %310, 8
  %312 = lshr i32 %310, 24
  %313 = load i8* %15, align 1, !tbaa !57
  %314 = zext i8 %313 to i32
  %315 = xor i32 %314, %312
  %316 = zext i32 %315 to i64
  %317 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %316
  %318 = load i32* %317, align 4, !tbaa !45
  %319 = xor i32 %318, %311
  store i32 %319, i32* %14, align 4, !tbaa !58
  %320 = load i32* %16, align 4, !tbaa !56
  %321 = add nsw i32 %320, -1
  store i32 %321, i32* %16, align 4, !tbaa !56
  %322 = load %struct.bz_stream** %8, align 8, !tbaa !46
  %323 = getelementptr inbounds %struct.bz_stream* %322, i64 0, i32 4
  %324 = load i8** %323, align 8, !tbaa !43
  %325 = getelementptr inbounds i8* %324, i64 1
  store i8* %325, i8** %323, align 8, !tbaa !43
  %326 = getelementptr inbounds %struct.bz_stream* %322, i64 0, i32 5
  %327 = load i32* %326, align 4, !tbaa !41
  %328 = add i32 %327, -1
  store i32 %328, i32* %326, align 4, !tbaa !41
  %329 = getelementptr inbounds %struct.bz_stream* %322, i64 0, i32 6
  %330 = load i32* %329, align 4, !tbaa !30
  %331 = add i32 %330, 1
  store i32 %331, i32* %329, align 4, !tbaa !30
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %.backedge.i

; <label>:333                                     ; preds = %306
  %334 = getelementptr inbounds %struct.bz_stream* %322, i64 0, i32 7
  %335 = load i32* %334, align 4, !tbaa !31
  %336 = add i32 %335, 1
  store i32 %336, i32* %334, align 4, !tbaa !31
  br label %.backedge.i

; <label>:337                                     ; preds = %302
  %338 = load i32* %17, align 4, !tbaa !59
  %339 = load i32* %21, align 4, !tbaa !60
  %340 = add nsw i32 %339, 1
  %341 = icmp eq i32 %338, %340
  br i1 %341, label %.loopexit, label %342

; <label>:342                                     ; preds = %337
  %343 = icmp sgt i32 %338, %340
  br i1 %343, label %unRLE_obuf_to_output_SMALL.exit.thread16, label %344

; <label>:344                                     ; preds = %342
  store i32 1, i32* %16, align 4, !tbaa !56
  %345 = load i32* %18, align 4, !tbaa !61
  %346 = trunc i32 %345 to i8
  store i8 %346, i8* %15, align 1, !tbaa !57
  %347 = load i32* %20, align 4, !tbaa !62
  br label %348

; <label>:348                                     ; preds = %348, %344
  %na.0.i28.i = phi i32 [ 256, %344 ], [ %.na.0.i30.i, %348 ]
  %nb.0.i29.i = phi i32 [ 0, %344 ], [ %nb.0..i31.i, %348 ]
  %349 = add nsw i32 %nb.0.i29.i, %na.0.i28.i
  %350 = ashr i32 %349, 1
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %351
  %353 = load i32* %352, align 4, !tbaa !45
  %354 = icmp sgt i32 %353, %347
  %.na.0.i30.i = select i1 %354, i32 %350, i32 %na.0.i28.i
  %nb.0..i31.i = select i1 %354, i32 %nb.0.i29.i, i32 %350
  %355 = sub nsw i32 %.na.0.i30.i, %nb.0..i31.i
  %356 = icmp eq i32 %355, 1
  br i1 %356, label %BZ2_indexIntoF.exit32.i, label %348

BZ2_indexIntoF.exit32.i:                          ; preds = %348
  %357 = zext i32 %347 to i64
  %358 = load i16** %27, align 8, !tbaa !63
  %359 = getelementptr inbounds i16* %358, i64 %357
  %360 = load i16* %359, align 2, !tbaa !64
  %361 = zext i16 %360 to i32
  %362 = lshr i32 %347, 1
  %363 = zext i32 %362 to i64
  %364 = load i8** %28, align 8, !tbaa !66
  %365 = getelementptr inbounds i8* %364, i64 %363
  %366 = load i8* %365, align 1, !tbaa !42
  %367 = zext i8 %366 to i32
  %368 = shl i32 %347, 2
  %369 = and i32 %368, 4
  %370 = lshr i32 %367, %369
  %371 = shl i32 %370, 16
  %372 = and i32 %371, 983040
  %373 = or i32 %372, %361
  store i32 %373, i32* %20, align 4, !tbaa !62
  %374 = add nsw i32 %338, 1
  store i32 %374, i32* %17, align 4, !tbaa !59
  %375 = icmp eq i32 %338, %339
  br i1 %375, label %.backedge.i, label %376

; <label>:376                                     ; preds = %BZ2_indexIntoF.exit32.i
  %377 = and i32 %nb.0..i31.i, 255
  %378 = icmp eq i32 %377, %345
  br i1 %378, label %385, label %379

; <label>:379                                     ; preds = %376
  store i32 %377, i32* %18, align 4, !tbaa !61
  br label %.backedge.i

.backedge.i:                                      ; preds = %BZ2_indexIntoF.exit12.i, %446, %BZ2_indexIntoF.exit22.i, %415, %BZ2_indexIntoF.exit27.i, %379, %BZ2_indexIntoF.exit32.i, %333, %306
  %380 = phi %struct.bz_stream* [ %304, %379 ], [ %304, %415 ], [ %304, %446 ], [ %304, %BZ2_indexIntoF.exit12.i ], [ %322, %333 ], [ %322, %306 ], [ %304, %BZ2_indexIntoF.exit32.i ], [ %304, %BZ2_indexIntoF.exit27.i ], [ %304, %BZ2_indexIntoF.exit22.i ]
  %381 = phi i32 [ 1, %379 ], [ 2, %415 ], [ 3, %446 ], [ %472, %BZ2_indexIntoF.exit12.i ], [ %321, %333 ], [ %321, %306 ], [ 1, %BZ2_indexIntoF.exit32.i ], [ 2, %BZ2_indexIntoF.exit27.i ], [ 3, %BZ2_indexIntoF.exit22.i ]
  %382 = getelementptr inbounds %struct.bz_stream* %380, i64 0, i32 5
  %383 = load i32* %382, align 4, !tbaa !41
  %384 = icmp eq i32 %383, 0
  br i1 %384, label %.loopexit, label %302

; <label>:385                                     ; preds = %376
  store i32 2, i32* %16, align 4, !tbaa !56
  br label %386

; <label>:386                                     ; preds = %386, %385
  %na.0.i23.i = phi i32 [ 256, %385 ], [ %.na.0.i25.i, %386 ]
  %nb.0.i24.i = phi i32 [ 0, %385 ], [ %nb.0..i26.i, %386 ]
  %387 = add nsw i32 %nb.0.i24.i, %na.0.i23.i
  %388 = ashr i32 %387, 1
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %389
  %391 = load i32* %390, align 4, !tbaa !45
  %392 = icmp sgt i32 %391, %373
  %.na.0.i25.i = select i1 %392, i32 %388, i32 %na.0.i23.i
  %nb.0..i26.i = select i1 %392, i32 %nb.0.i24.i, i32 %388
  %393 = sub nsw i32 %.na.0.i25.i, %nb.0..i26.i
  %394 = icmp eq i32 %393, 1
  br i1 %394, label %BZ2_indexIntoF.exit27.i, label %386

BZ2_indexIntoF.exit27.i:                          ; preds = %386
  %395 = zext i32 %373 to i64
  %396 = getelementptr inbounds i16* %358, i64 %395
  %397 = load i16* %396, align 2, !tbaa !64
  %398 = zext i16 %397 to i32
  %399 = lshr i32 %373, 1
  %400 = zext i32 %399 to i64
  %401 = getelementptr inbounds i8* %364, i64 %400
  %402 = load i8* %401, align 1, !tbaa !42
  %403 = zext i8 %402 to i32
  %404 = shl nuw nsw i32 %361, 2
  %405 = and i32 %404, 4
  %406 = lshr i32 %403, %405
  %407 = shl i32 %406, 16
  %408 = and i32 %407, 983040
  %409 = or i32 %408, %398
  store i32 %409, i32* %20, align 4, !tbaa !62
  %410 = add nsw i32 %338, 2
  store i32 %410, i32* %17, align 4, !tbaa !59
  %411 = icmp eq i32 %374, %339
  br i1 %411, label %.backedge.i, label %412

; <label>:412                                     ; preds = %BZ2_indexIntoF.exit27.i
  %413 = and i32 %nb.0..i26.i, 255
  %414 = icmp eq i32 %413, %345
  br i1 %414, label %416, label %415

; <label>:415                                     ; preds = %412
  store i32 %413, i32* %18, align 4, !tbaa !61
  br label %.backedge.i

; <label>:416                                     ; preds = %412
  store i32 3, i32* %16, align 4, !tbaa !56
  br label %417

; <label>:417                                     ; preds = %417, %416
  %na.0.i18.i = phi i32 [ 256, %416 ], [ %.na.0.i20.i, %417 ]
  %nb.0.i19.i = phi i32 [ 0, %416 ], [ %nb.0..i21.i, %417 ]
  %418 = add nsw i32 %nb.0.i19.i, %na.0.i18.i
  %419 = ashr i32 %418, 1
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %420
  %422 = load i32* %421, align 4, !tbaa !45
  %423 = icmp sgt i32 %422, %409
  %.na.0.i20.i = select i1 %423, i32 %419, i32 %na.0.i18.i
  %nb.0..i21.i = select i1 %423, i32 %nb.0.i19.i, i32 %419
  %424 = sub nsw i32 %.na.0.i20.i, %nb.0..i21.i
  %425 = icmp eq i32 %424, 1
  br i1 %425, label %BZ2_indexIntoF.exit22.i, label %417

BZ2_indexIntoF.exit22.i:                          ; preds = %417
  %426 = zext i32 %409 to i64
  %427 = getelementptr inbounds i16* %358, i64 %426
  %428 = load i16* %427, align 2, !tbaa !64
  %429 = zext i16 %428 to i32
  %430 = lshr i32 %409, 1
  %431 = zext i32 %430 to i64
  %432 = getelementptr inbounds i8* %364, i64 %431
  %433 = load i8* %432, align 1, !tbaa !42
  %434 = zext i8 %433 to i32
  %435 = shl nuw nsw i32 %398, 2
  %436 = and i32 %435, 4
  %437 = lshr i32 %434, %436
  %438 = shl i32 %437, 16
  %439 = and i32 %438, 983040
  %440 = or i32 %439, %429
  store i32 %440, i32* %20, align 4, !tbaa !62
  %441 = add nsw i32 %338, 3
  store i32 %441, i32* %17, align 4, !tbaa !59
  %442 = icmp eq i32 %410, %339
  br i1 %442, label %.backedge.i, label %443

; <label>:443                                     ; preds = %BZ2_indexIntoF.exit22.i
  %444 = and i32 %nb.0..i21.i, 255
  %445 = icmp eq i32 %444, %345
  br i1 %445, label %.preheader, label %446

; <label>:446                                     ; preds = %443
  store i32 %444, i32* %18, align 4, !tbaa !61
  br label %.backedge.i

.preheader:                                       ; preds = %443, %.preheader
  %na.0.i13.i = phi i32 [ %.na.0.i15.i, %.preheader ], [ 256, %443 ]
  %nb.0.i14.i = phi i32 [ %nb.0..i16.i, %.preheader ], [ 0, %443 ]
  %447 = add nsw i32 %nb.0.i14.i, %na.0.i13.i
  %448 = ashr i32 %447, 1
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %449
  %451 = load i32* %450, align 4, !tbaa !45
  %452 = icmp sgt i32 %451, %440
  %.na.0.i15.i = select i1 %452, i32 %448, i32 %na.0.i13.i
  %nb.0..i16.i = select i1 %452, i32 %nb.0.i14.i, i32 %448
  %453 = sub nsw i32 %.na.0.i15.i, %nb.0..i16.i
  %454 = icmp eq i32 %453, 1
  br i1 %454, label %BZ2_indexIntoF.exit17.i, label %.preheader

BZ2_indexIntoF.exit17.i:                          ; preds = %.preheader
  %455 = zext i32 %440 to i64
  %456 = getelementptr inbounds i16* %358, i64 %455
  %457 = load i16* %456, align 2, !tbaa !64
  %458 = zext i16 %457 to i32
  %459 = lshr i32 %440, 1
  %460 = zext i32 %459 to i64
  %461 = getelementptr inbounds i8* %364, i64 %460
  %462 = load i8* %461, align 1, !tbaa !42
  %463 = zext i8 %462 to i32
  %464 = shl nuw nsw i32 %429, 2
  %465 = and i32 %464, 4
  %466 = lshr i32 %463, %465
  %467 = shl i32 %466, 16
  %468 = and i32 %467, 983040
  %469 = or i32 %468, %458
  store i32 %469, i32* %20, align 4, !tbaa !62
  %470 = add nsw i32 %338, 4
  store i32 %470, i32* %17, align 4, !tbaa !59
  %471 = and i32 %nb.0..i16.i, 255
  %472 = add nuw nsw i32 %471, 4
  store i32 %472, i32* %16, align 4, !tbaa !56
  br label %473

; <label>:473                                     ; preds = %473, %BZ2_indexIntoF.exit17.i
  %na.0.i8.i = phi i32 [ 256, %BZ2_indexIntoF.exit17.i ], [ %.na.0.i10.i, %473 ]
  %nb.0.i9.i = phi i32 [ 0, %BZ2_indexIntoF.exit17.i ], [ %nb.0..i11.i, %473 ]
  %474 = add nsw i32 %nb.0.i9.i, %na.0.i8.i
  %475 = ashr i32 %474, 1
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds %struct.DState* %5, i64 0, i32 18, i64 %476
  %478 = load i32* %477, align 4, !tbaa !45
  %479 = icmp sgt i32 %478, %469
  %.na.0.i10.i = select i1 %479, i32 %475, i32 %na.0.i8.i
  %nb.0..i11.i = select i1 %479, i32 %nb.0.i9.i, i32 %475
  %480 = sub nsw i32 %.na.0.i10.i, %nb.0..i11.i
  %481 = icmp eq i32 %480, 1
  br i1 %481, label %BZ2_indexIntoF.exit12.i, label %473

BZ2_indexIntoF.exit12.i:                          ; preds = %473
  store i32 %nb.0..i11.i, i32* %18, align 4, !tbaa !61
  %482 = zext i32 %469 to i64
  %483 = getelementptr inbounds i16* %358, i64 %482
  %484 = load i16* %483, align 2, !tbaa !64
  %485 = zext i16 %484 to i32
  %486 = lshr i32 %469, 1
  %487 = zext i32 %486 to i64
  %488 = getelementptr inbounds i8* %364, i64 %487
  %489 = load i8* %488, align 1, !tbaa !42
  %490 = zext i8 %489 to i32
  %491 = shl nuw nsw i32 %458, 2
  %492 = and i32 %491, 4
  %493 = lshr i32 %490, %492
  %494 = shl i32 %493, 16
  %495 = and i32 %494, 983040
  %496 = or i32 %495, %485
  store i32 %496, i32* %20, align 4, !tbaa !62
  %497 = add nsw i32 %338, 5
  store i32 %497, i32* %17, align 4, !tbaa !59
  br label %.backedge.i

; <label>:498                                     ; preds = %29
  br i1 %33, label %668, label %.preheader11.i

.preheader11.i:                                   ; preds = %498
  %499 = load %struct.bz_stream** %8, align 8, !tbaa !46
  %500 = getelementptr inbounds %struct.bz_stream* %499, i64 0, i32 5
  %501 = load i32* %500, align 4, !tbaa !41
  %502 = icmp eq i32 %501, 0
  br i1 %502, label %.loopexit, label %.lr.ph43.i

.lr.ph43.i:                                       ; preds = %.preheader11.i
  %.pre.i1 = load i32* %16, align 4, !tbaa !56
  br label %503

; <label>:503                                     ; preds = %.backedge13.i, %.lr.ph43.i
  %504 = phi i32 [ %.pre.i1, %.lr.ph43.i ], [ %575, %.backedge13.i ]
  %505 = phi %struct.bz_stream* [ %499, %.lr.ph43.i ], [ %574, %.backedge13.i ]
  %506 = icmp eq i32 %504, 0
  br i1 %506, label %538, label %507

; <label>:507                                     ; preds = %503
  %508 = load i8* %15, align 1, !tbaa !57
  %509 = getelementptr inbounds %struct.bz_stream* %505, i64 0, i32 4
  %510 = load i8** %509, align 8, !tbaa !43
  store i8 %508, i8* %510, align 1, !tbaa !42
  %511 = load i32* %14, align 4, !tbaa !58
  %512 = shl i32 %511, 8
  %513 = lshr i32 %511, 24
  %514 = load i8* %15, align 1, !tbaa !57
  %515 = zext i8 %514 to i32
  %516 = xor i32 %515, %513
  %517 = zext i32 %516 to i64
  %518 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %517
  %519 = load i32* %518, align 4, !tbaa !45
  %520 = xor i32 %519, %512
  store i32 %520, i32* %14, align 4, !tbaa !58
  %521 = load i32* %16, align 4, !tbaa !56
  %522 = add nsw i32 %521, -1
  store i32 %522, i32* %16, align 4, !tbaa !56
  %523 = load %struct.bz_stream** %8, align 8, !tbaa !46
  %524 = getelementptr inbounds %struct.bz_stream* %523, i64 0, i32 4
  %525 = load i8** %524, align 8, !tbaa !43
  %526 = getelementptr inbounds i8* %525, i64 1
  store i8* %526, i8** %524, align 8, !tbaa !43
  %527 = getelementptr inbounds %struct.bz_stream* %523, i64 0, i32 5
  %528 = load i32* %527, align 4, !tbaa !41
  %529 = add i32 %528, -1
  store i32 %529, i32* %527, align 4, !tbaa !41
  %530 = getelementptr inbounds %struct.bz_stream* %523, i64 0, i32 6
  %531 = load i32* %530, align 4, !tbaa !30
  %532 = add i32 %531, 1
  store i32 %532, i32* %530, align 4, !tbaa !30
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %534, label %.backedge13.i

; <label>:534                                     ; preds = %507
  %535 = getelementptr inbounds %struct.bz_stream* %523, i64 0, i32 7
  %536 = load i32* %535, align 4, !tbaa !31
  %537 = add i32 %536, 1
  store i32 %537, i32* %535, align 4, !tbaa !31
  br label %.backedge13.i

; <label>:538                                     ; preds = %503
  %539 = load i32* %17, align 4, !tbaa !59
  %540 = load i32* %21, align 4, !tbaa !60
  %541 = add nsw i32 %540, 1
  %542 = icmp eq i32 %539, %541
  br i1 %542, label %.loopexit, label %543

; <label>:543                                     ; preds = %538
  %544 = icmp sgt i32 %539, %541
  br i1 %544, label %unRLE_obuf_to_output_SMALL.exit.thread16, label %545

; <label>:545                                     ; preds = %543
  store i32 1, i32* %16, align 4, !tbaa !56
  %546 = load i32* %18, align 4, !tbaa !61
  %547 = trunc i32 %546 to i8
  store i8 %547, i8* %15, align 1, !tbaa !57
  %548 = load i32* %20, align 4, !tbaa !62
  %549 = zext i32 %548 to i64
  %550 = load i32** %19, align 8, !tbaa !69
  %551 = getelementptr inbounds i32* %550, i64 %549
  %552 = load i32* %551, align 4, !tbaa !45
  %553 = lshr i32 %552, 8
  store i32 %553, i32* %20, align 4, !tbaa !62
  %554 = load i32* %22, align 4, !tbaa !67
  %555 = icmp eq i32 %554, 0
  br i1 %555, label %556, label %563

; <label>:556                                     ; preds = %545
  %557 = load i32* %23, align 4, !tbaa !68
  %558 = sext i32 %557 to i64
  %559 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %558
  %560 = load i32* %559, align 4, !tbaa !45
  store i32 %560, i32* %22, align 4, !tbaa !67
  %561 = add nsw i32 %557, 1
  %562 = icmp eq i32 %561, 512
  %..i2 = select i1 %562, i32 0, i32 %561
  store i32 %..i2, i32* %23, align 4, !tbaa !68
  br label %563

; <label>:563                                     ; preds = %556, %545
  %564 = phi i32 [ %560, %556 ], [ %554, %545 ]
  %565 = add nsw i32 %564, -1
  store i32 %565, i32* %22, align 4, !tbaa !67
  %566 = add nsw i32 %539, 1
  store i32 %566, i32* %17, align 4, !tbaa !59
  %567 = icmp eq i32 %539, %540
  br i1 %567, label %.backedge13.i, label %568

; <label>:568                                     ; preds = %563
  %569 = icmp eq i32 %565, 1
  %570 = zext i1 %569 to i32
  %.masked.i3 = and i32 %552, 255
  %571 = xor i32 %570, %.masked.i3
  %572 = icmp eq i32 %571, %546
  br i1 %572, label %579, label %573

; <label>:573                                     ; preds = %568
  store i32 %571, i32* %18, align 4, !tbaa !61
  br label %.backedge13.i

.backedge13.i:                                    ; preds = %661, %626, %616, %602, %592, %573, %563, %534, %507
  %574 = phi %struct.bz_stream* [ %505, %573 ], [ %505, %602 ], [ %505, %626 ], [ %505, %661 ], [ %523, %534 ], [ %523, %507 ], [ %505, %563 ], [ %505, %592 ], [ %505, %616 ]
  %575 = phi i32 [ 1, %573 ], [ 2, %602 ], [ 3, %626 ], [ %647, %661 ], [ %522, %534 ], [ %522, %507 ], [ 1, %563 ], [ 2, %592 ], [ 3, %616 ]
  %576 = getelementptr inbounds %struct.bz_stream* %574, i64 0, i32 5
  %577 = load i32* %576, align 4, !tbaa !41
  %578 = icmp eq i32 %577, 0
  br i1 %578, label %.loopexit, label %503

; <label>:579                                     ; preds = %568
  store i32 2, i32* %16, align 4, !tbaa !56
  %580 = zext i32 %553 to i64
  %581 = getelementptr inbounds i32* %550, i64 %580
  %582 = load i32* %581, align 4, !tbaa !45
  %583 = lshr i32 %582, 8
  store i32 %583, i32* %20, align 4, !tbaa !62
  %584 = icmp eq i32 %565, 0
  br i1 %584, label %585, label %592

; <label>:585                                     ; preds = %579
  %586 = load i32* %23, align 4, !tbaa !68
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %587
  %589 = load i32* %588, align 4, !tbaa !45
  store i32 %589, i32* %22, align 4, !tbaa !67
  %590 = add nsw i32 %586, 1
  %591 = icmp eq i32 %590, 512
  %.4.i4 = select i1 %591, i32 0, i32 %590
  store i32 %.4.i4, i32* %23, align 4, !tbaa !68
  br label %592

; <label>:592                                     ; preds = %585, %579
  %593 = phi i32 [ %589, %585 ], [ %565, %579 ]
  %594 = add nsw i32 %593, -1
  store i32 %594, i32* %22, align 4, !tbaa !67
  %595 = add nsw i32 %539, 2
  store i32 %595, i32* %17, align 4, !tbaa !59
  %596 = icmp eq i32 %566, %540
  br i1 %596, label %.backedge13.i, label %597

; <label>:597                                     ; preds = %592
  %598 = icmp eq i32 %594, 1
  %599 = zext i1 %598 to i32
  %.masked1.i5 = and i32 %582, 255
  %600 = xor i32 %599, %.masked1.i5
  %601 = icmp eq i32 %600, %546
  br i1 %601, label %603, label %602

; <label>:602                                     ; preds = %597
  store i32 %600, i32* %18, align 4, !tbaa !61
  br label %.backedge13.i

; <label>:603                                     ; preds = %597
  store i32 3, i32* %16, align 4, !tbaa !56
  %604 = zext i32 %583 to i64
  %605 = getelementptr inbounds i32* %550, i64 %604
  %606 = load i32* %605, align 4, !tbaa !45
  %607 = lshr i32 %606, 8
  store i32 %607, i32* %20, align 4, !tbaa !62
  %608 = icmp eq i32 %594, 0
  br i1 %608, label %609, label %616

; <label>:609                                     ; preds = %603
  %610 = load i32* %23, align 4, !tbaa !68
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %611
  %613 = load i32* %612, align 4, !tbaa !45
  store i32 %613, i32* %22, align 4, !tbaa !67
  %614 = add nsw i32 %610, 1
  %615 = icmp eq i32 %614, 512
  %.5.i6 = select i1 %615, i32 0, i32 %614
  store i32 %.5.i6, i32* %23, align 4, !tbaa !68
  br label %616

; <label>:616                                     ; preds = %609, %603
  %617 = phi i32 [ %613, %609 ], [ %594, %603 ]
  %618 = add nsw i32 %617, -1
  store i32 %618, i32* %22, align 4, !tbaa !67
  %619 = add nsw i32 %539, 3
  store i32 %619, i32* %17, align 4, !tbaa !59
  %620 = icmp eq i32 %595, %540
  br i1 %620, label %.backedge13.i, label %621

; <label>:621                                     ; preds = %616
  %622 = icmp eq i32 %618, 1
  %623 = zext i1 %622 to i32
  %.masked2.i7 = and i32 %606, 255
  %624 = xor i32 %623, %.masked2.i7
  %625 = icmp eq i32 %624, %546
  br i1 %625, label %627, label %626

; <label>:626                                     ; preds = %621
  store i32 %624, i32* %18, align 4, !tbaa !61
  br label %.backedge13.i

; <label>:627                                     ; preds = %621
  %628 = zext i32 %607 to i64
  %629 = getelementptr inbounds i32* %550, i64 %628
  %630 = load i32* %629, align 4, !tbaa !45
  %631 = lshr i32 %630, 8
  store i32 %631, i32* %20, align 4, !tbaa !62
  %632 = icmp eq i32 %618, 0
  br i1 %632, label %633, label %640

; <label>:633                                     ; preds = %627
  %634 = load i32* %23, align 4, !tbaa !68
  %635 = sext i32 %634 to i64
  %636 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %635
  %637 = load i32* %636, align 4, !tbaa !45
  store i32 %637, i32* %22, align 4, !tbaa !67
  %638 = add nsw i32 %634, 1
  %639 = icmp eq i32 %638, 512
  %.6.i8 = select i1 %639, i32 0, i32 %638
  store i32 %.6.i8, i32* %23, align 4, !tbaa !68
  br label %640

; <label>:640                                     ; preds = %633, %627
  %641 = phi i32 [ %637, %633 ], [ %618, %627 ]
  %642 = add nsw i32 %641, -1
  store i32 %642, i32* %22, align 4, !tbaa !67
  %643 = icmp eq i32 %642, 1
  %644 = zext i1 %643 to i32
  %645 = add nsw i32 %539, 4
  store i32 %645, i32* %17, align 4, !tbaa !59
  %.masked3.i9 = and i32 %630, 255
  %646 = xor i32 %644, %.masked3.i9
  %647 = add nuw nsw i32 %646, 4
  store i32 %647, i32* %16, align 4, !tbaa !56
  %648 = zext i32 %631 to i64
  %649 = getelementptr inbounds i32* %550, i64 %648
  %650 = load i32* %649, align 4, !tbaa !45
  %651 = and i32 %650, 255
  store i32 %651, i32* %18, align 4, !tbaa !61
  %652 = lshr i32 %650, 8
  store i32 %652, i32* %20, align 4, !tbaa !62
  %653 = icmp eq i32 %642, 0
  br i1 %653, label %654, label %661

; <label>:654                                     ; preds = %640
  %655 = load i32* %23, align 4, !tbaa !68
  %656 = sext i32 %655 to i64
  %657 = getelementptr inbounds [512 x i32]* @BZ2_rNums, i64 0, i64 %656
  %658 = load i32* %657, align 4, !tbaa !45
  store i32 %658, i32* %22, align 4, !tbaa !67
  %659 = add nsw i32 %655, 1
  %660 = icmp eq i32 %659, 512
  %.7.i10 = select i1 %660, i32 0, i32 %659
  store i32 %.7.i10, i32* %23, align 4, !tbaa !68
  br label %661

; <label>:661                                     ; preds = %654, %640
  %662 = phi i32 [ %658, %654 ], [ %642, %640 ]
  %663 = add nsw i32 %662, -1
  store i32 %663, i32* %22, align 4, !tbaa !67
  %664 = icmp eq i32 %663, 1
  %665 = zext i1 %664 to i32
  %666 = xor i32 %665, %651
  store i32 %666, i32* %18, align 4, !tbaa !61
  %667 = add nsw i32 %539, 5
  store i32 %667, i32* %17, align 4, !tbaa !59
  br label %.backedge13.i

; <label>:668                                     ; preds = %498
  %669 = load i32* %14, align 4, !tbaa !58
  %670 = load i8* %15, align 1, !tbaa !57
  %671 = load i32* %16, align 4, !tbaa !56
  %672 = load i32* %17, align 4, !tbaa !59
  %673 = load i32* %18, align 4, !tbaa !61
  %674 = load i32** %19, align 8, !tbaa !69
  %675 = load i32* %20, align 4, !tbaa !62
  %676 = load %struct.bz_stream** %8, align 8, !tbaa !46
  %677 = getelementptr inbounds %struct.bz_stream* %676, i64 0, i32 4
  %678 = load i8** %677, align 8, !tbaa !43
  %679 = getelementptr inbounds %struct.bz_stream* %676, i64 0, i32 5
  %680 = load i32* %679, align 4, !tbaa !41
  %681 = load i32* %21, align 4, !tbaa !60
  %682 = add nsw i32 %681, 1
  br label %.backedge.i11

.backedge.i11:                                    ; preds = %747, %744, %737, %734, %727, %668
  %c_state_out_len.0.i = phi i32 [ %671, %668 ], [ 2, %727 ], [ 3, %737 ], [ %753, %747 ], [ 2, %734 ], [ 3, %744 ]
  %c_nblock_used.0.i = phi i32 [ %672, %668 ], [ %682, %727 ], [ %682, %737 ], [ %759, %747 ], [ %732, %734 ], [ %742, %744 ]
  %c_k0.0.i = phi i32 [ %673, %668 ], [ %c_k0.2.i, %727 ], [ %c_k0.2.i, %737 ], [ %757, %747 ], [ %735, %734 ], [ %745, %744 ]
  %c_state_out_ch.0.i = phi i8 [ %670, %668 ], [ %717, %727 ], [ %717, %737 ], [ %717, %747 ], [ %717, %734 ], [ %717, %744 ]
  %c_tPos.0.i = phi i32 [ %675, %668 ], [ %731, %727 ], [ %741, %737 ], [ %758, %747 ], [ %731, %734 ], [ %741, %744 ]
  %cs_next_out.0.i = phi i8* [ %678, %668 ], [ %cs_next_out.3.i, %727 ], [ %cs_next_out.3.i, %737 ], [ %cs_next_out.3.i, %747 ], [ %cs_next_out.3.i, %734 ], [ %cs_next_out.3.i, %744 ]
  %cs_avail_out.0.i = phi i32 [ %680, %668 ], [ %cs_avail_out.3.i, %727 ], [ %cs_avail_out.3.i, %737 ], [ %cs_avail_out.3.i, %747 ], [ %cs_avail_out.3.i, %734 ], [ %cs_avail_out.3.i, %744 ]
  %c_calculatedBlockCRC.0.i = phi i32 [ %669, %668 ], [ %c_calculatedBlockCRC.3.i, %727 ], [ %c_calculatedBlockCRC.3.i, %737 ], [ %c_calculatedBlockCRC.3.i, %747 ], [ %c_calculatedBlockCRC.3.i, %734 ], [ %c_calculatedBlockCRC.3.i, %744 ]
  %683 = icmp sgt i32 %c_state_out_len.0.i, 0
  br i1 %683, label %.preheader.i12, label %712

.preheader.i12:                                   ; preds = %.backedge.i11
  %684 = icmp eq i32 %cs_avail_out.0.i, 0
  br i1 %684, label %.loopexit.i, label %.lr.ph.i13

.lr.ph.i13:                                       ; preds = %.preheader.i12
  %685 = zext i8 %c_state_out_ch.0.i to i32
  br label %686

; <label>:686                                     ; preds = %688, %.lr.ph.i13
  %c_calculatedBlockCRC.129.i = phi i32 [ %c_calculatedBlockCRC.0.i, %.lr.ph.i13 ], [ %695, %688 ]
  %cs_avail_out.128.i = phi i32 [ %cs_avail_out.0.i, %.lr.ph.i13 ], [ %698, %688 ]
  %cs_next_out.127.i = phi i8* [ %cs_next_out.0.i, %.lr.ph.i13 ], [ %697, %688 ]
  %c_state_out_len.126.i = phi i32 [ %c_state_out_len.0.i, %.lr.ph.i13 ], [ %696, %688 ]
  %687 = icmp eq i32 %c_state_out_len.126.i, 1
  br i1 %687, label %.loopexit8.i, label %688

; <label>:688                                     ; preds = %686
  store i8 %c_state_out_ch.0.i, i8* %cs_next_out.127.i, align 1, !tbaa !42
  %689 = shl i32 %c_calculatedBlockCRC.129.i, 8
  %690 = lshr i32 %c_calculatedBlockCRC.129.i, 24
  %691 = xor i32 %690, %685
  %692 = zext i32 %691 to i64
  %693 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %692
  %694 = load i32* %693, align 4, !tbaa !45
  %695 = xor i32 %694, %689
  %696 = add nsw i32 %c_state_out_len.126.i, -1
  %697 = getelementptr inbounds i8* %cs_next_out.127.i, i64 1
  %698 = add i32 %cs_avail_out.128.i, -1
  %699 = icmp eq i32 %698, 0
  br i1 %699, label %.loopexit.i, label %686

.loopexit8.i:                                     ; preds = %686, %725, %716
  %c_nblock_used.1.i = phi i32 [ %682, %725 ], [ %722, %716 ], [ %c_nblock_used.0.i, %686 ]
  %c_k0.1.i = phi i32 [ %c_k0.2.i, %725 ], [ %723, %716 ], [ %c_k0.0.i, %686 ]
  %c_state_out_ch.1.i = phi i8 [ %717, %725 ], [ %717, %716 ], [ %c_state_out_ch.0.i, %686 ]
  %c_tPos.1.i = phi i32 [ %721, %725 ], [ %721, %716 ], [ %c_tPos.0.i, %686 ]
  %cs_next_out.2.i = phi i8* [ %cs_next_out.3.i, %725 ], [ %cs_next_out.3.i, %716 ], [ %cs_next_out.127.i, %686 ]
  %cs_avail_out.2.i = phi i32 [ %cs_avail_out.3.i, %725 ], [ %cs_avail_out.3.i, %716 ], [ %cs_avail_out.128.i, %686 ]
  %c_calculatedBlockCRC.2.i = phi i32 [ %c_calculatedBlockCRC.3.i, %725 ], [ %c_calculatedBlockCRC.3.i, %716 ], [ %c_calculatedBlockCRC.129.i, %686 ]
  %700 = icmp eq i32 %cs_avail_out.2.i, 0
  br i1 %700, label %.loopexit.i, label %701

; <label>:701                                     ; preds = %.loopexit8.i
  store i8 %c_state_out_ch.1.i, i8* %cs_next_out.2.i, align 1, !tbaa !42
  %702 = shl i32 %c_calculatedBlockCRC.2.i, 8
  %703 = lshr i32 %c_calculatedBlockCRC.2.i, 24
  %704 = zext i8 %c_state_out_ch.1.i to i32
  %705 = xor i32 %703, %704
  %706 = zext i32 %705 to i64
  %707 = getelementptr inbounds [256 x i32]* @BZ2_crc32Table, i64 0, i64 %706
  %708 = load i32* %707, align 4, !tbaa !45
  %709 = xor i32 %708, %702
  %710 = getelementptr inbounds i8* %cs_next_out.2.i, i64 1
  %711 = add i32 %cs_avail_out.2.i, -1
  br label %712

; <label>:712                                     ; preds = %701, %.backedge.i11
  %c_nblock_used.2.i = phi i32 [ %c_nblock_used.1.i, %701 ], [ %c_nblock_used.0.i, %.backedge.i11 ]
  %c_k0.2.i = phi i32 [ %c_k0.1.i, %701 ], [ %c_k0.0.i, %.backedge.i11 ]
  %c_state_out_ch.2.i = phi i8 [ %c_state_out_ch.1.i, %701 ], [ %c_state_out_ch.0.i, %.backedge.i11 ]
  %c_tPos.2.i = phi i32 [ %c_tPos.1.i, %701 ], [ %c_tPos.0.i, %.backedge.i11 ]
  %cs_next_out.3.i = phi i8* [ %710, %701 ], [ %cs_next_out.0.i, %.backedge.i11 ]
  %cs_avail_out.3.i = phi i32 [ %711, %701 ], [ %cs_avail_out.0.i, %.backedge.i11 ]
  %c_calculatedBlockCRC.3.i = phi i32 [ %709, %701 ], [ %c_calculatedBlockCRC.0.i, %.backedge.i11 ]
  %713 = icmp sgt i32 %c_nblock_used.2.i, %682
  br i1 %713, label %unRLE_obuf_to_output_SMALL.exit.thread16, label %714

; <label>:714                                     ; preds = %712
  %715 = icmp eq i32 %c_nblock_used.2.i, %682
  br i1 %715, label %.loopexit.i, label %716

; <label>:716                                     ; preds = %714
  %717 = trunc i32 %c_k0.2.i to i8
  %718 = zext i32 %c_tPos.2.i to i64
  %719 = getelementptr inbounds i32* %674, i64 %718
  %720 = load i32* %719, align 4, !tbaa !45
  %721 = lshr i32 %720, 8
  %722 = add nsw i32 %c_nblock_used.2.i, 1
  %723 = and i32 %720, 255
  %724 = icmp eq i32 %723, %c_k0.2.i
  br i1 %724, label %725, label %.loopexit8.i

; <label>:725                                     ; preds = %716
  %726 = icmp eq i32 %722, %682
  br i1 %726, label %.loopexit8.i, label %727

; <label>:727                                     ; preds = %725
  %728 = zext i32 %721 to i64
  %729 = getelementptr inbounds i32* %674, i64 %728
  %730 = load i32* %729, align 4, !tbaa !45
  %731 = lshr i32 %730, 8
  %732 = add nsw i32 %c_nblock_used.2.i, 2
  %733 = icmp eq i32 %732, %682
  br i1 %733, label %.backedge.i11, label %734

; <label>:734                                     ; preds = %727
  %735 = and i32 %730, 255
  %736 = icmp eq i32 %735, %c_k0.2.i
  br i1 %736, label %737, label %.backedge.i11

; <label>:737                                     ; preds = %734
  %738 = zext i32 %731 to i64
  %739 = getelementptr inbounds i32* %674, i64 %738
  %740 = load i32* %739, align 4, !tbaa !45
  %741 = lshr i32 %740, 8
  %742 = add nsw i32 %c_nblock_used.2.i, 3
  %743 = icmp eq i32 %742, %682
  br i1 %743, label %.backedge.i11, label %744

; <label>:744                                     ; preds = %737
  %745 = and i32 %740, 255
  %746 = icmp eq i32 %745, %c_k0.2.i
  br i1 %746, label %747, label %.backedge.i11

; <label>:747                                     ; preds = %744
  %748 = zext i32 %741 to i64
  %749 = getelementptr inbounds i32* %674, i64 %748
  %750 = load i32* %749, align 4, !tbaa !45
  %751 = lshr i32 %750, 8
  %752 = and i32 %750, 255
  %753 = add nuw nsw i32 %752, 4
  %754 = zext i32 %751 to i64
  %755 = getelementptr inbounds i32* %674, i64 %754
  %756 = load i32* %755, align 4, !tbaa !45
  %757 = and i32 %756, 255
  %758 = lshr i32 %756, 8
  %759 = add nsw i32 %c_nblock_used.2.i, 5
  br label %.backedge.i11

.loopexit.i:                                      ; preds = %714, %.loopexit8.i, %.preheader.i12, %688
  %c_state_out_len.2.i = phi i32 [ %696, %688 ], [ %c_state_out_len.0.i, %.preheader.i12 ], [ 0, %714 ], [ 1, %.loopexit8.i ]
  %c_nblock_used.3.i = phi i32 [ %c_nblock_used.0.i, %688 ], [ %c_nblock_used.0.i, %.preheader.i12 ], [ %682, %714 ], [ %c_nblock_used.1.i, %.loopexit8.i ]
  %c_k0.3.i = phi i32 [ %c_k0.0.i, %688 ], [ %c_k0.0.i, %.preheader.i12 ], [ %c_k0.2.i, %714 ], [ %c_k0.1.i, %.loopexit8.i ]
  %c_state_out_ch.3.i = phi i8 [ %c_state_out_ch.0.i, %688 ], [ %c_state_out_ch.0.i, %.preheader.i12 ], [ %c_state_out_ch.2.i, %714 ], [ %c_state_out_ch.1.i, %.loopexit8.i ]
  %c_tPos.3.i = phi i32 [ %c_tPos.0.i, %688 ], [ %c_tPos.0.i, %.preheader.i12 ], [ %c_tPos.2.i, %714 ], [ %c_tPos.1.i, %.loopexit8.i ]
  %cs_next_out.4.i = phi i8* [ %697, %688 ], [ %cs_next_out.0.i, %.preheader.i12 ], [ %cs_next_out.3.i, %714 ], [ %cs_next_out.2.i, %.loopexit8.i ]
  %cs_avail_out.4.i = phi i32 [ 0, %688 ], [ 0, %.preheader.i12 ], [ %cs_avail_out.3.i, %714 ], [ 0, %.loopexit8.i ]
  %c_calculatedBlockCRC.4.i = phi i32 [ %695, %688 ], [ %c_calculatedBlockCRC.0.i, %.preheader.i12 ], [ %c_calculatedBlockCRC.3.i, %714 ], [ %c_calculatedBlockCRC.2.i, %.loopexit8.i ]
  %760 = load %struct.bz_stream** %8, align 8, !tbaa !46
  %761 = getelementptr inbounds %struct.bz_stream* %760, i64 0, i32 6
  %762 = load i32* %761, align 4, !tbaa !30
  %763 = sub i32 %680, %cs_avail_out.4.i
  %uadd.i = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %763, i32 %762) #8
  %764 = extractvalue { i32, i1 } %uadd.i, 0
  store i32 %764, i32* %761, align 4, !tbaa !30
  %765 = extractvalue { i32, i1 } %uadd.i, 1
  br i1 %765, label %766, label %770

; <label>:766                                     ; preds = %.loopexit.i
  %767 = getelementptr inbounds %struct.bz_stream* %760, i64 0, i32 7
  %768 = load i32* %767, align 4, !tbaa !31
  %769 = add i32 %768, 1
  store i32 %769, i32* %767, align 4, !tbaa !31
  br label %770

; <label>:770                                     ; preds = %766, %.loopexit.i
  store i32 %c_calculatedBlockCRC.4.i, i32* %14, align 4, !tbaa !58
  store i8 %c_state_out_ch.3.i, i8* %15, align 1, !tbaa !57
  store i32 %c_state_out_len.2.i, i32* %16, align 4, !tbaa !56
  store i32 %c_nblock_used.3.i, i32* %17, align 4, !tbaa !59
  store i32 %c_k0.3.i, i32* %18, align 4, !tbaa !61
  store i32* %674, i32** %19, align 8, !tbaa !69
  store i32 %c_tPos.3.i, i32* %20, align 4, !tbaa !62
  %771 = getelementptr inbounds %struct.bz_stream* %760, i64 0, i32 4
  store i8* %cs_next_out.4.i, i8** %771, align 8, !tbaa !43
  %772 = getelementptr inbounds %struct.bz_stream* %760, i64 0, i32 5
  store i32 %cs_avail_out.4.i, i32* %772, align 4, !tbaa !41
  br label %.loopexit

.loopexit:                                        ; preds = %.backedge56.i, %74, %.backedge.i, %337, %.backedge13.i, %538, %.preheader.i, %.preheader53.i, %770, %.preheader11.i
  %773 = load i32* %17, align 4, !tbaa !59
  %774 = load i32* %21, align 4, !tbaa !60
  %775 = add nsw i32 %774, 1
  %776 = icmp eq i32 %773, %775
  br i1 %776, label %777, label %unRLE_obuf_to_output_SMALL.exit.thread16

; <label>:777                                     ; preds = %.loopexit
  %778 = load i32* %16, align 4, !tbaa !56
  %779 = icmp eq i32 %778, 0
  br i1 %779, label %780, label %unRLE_obuf_to_output_SMALL.exit.thread16

; <label>:780                                     ; preds = %777
  %781 = load i32* %14, align 4, !tbaa !58
  %782 = xor i32 %781, -1
  store i32 %782, i32* %14, align 4, !tbaa !58
  %783 = load i32* %24, align 4, !tbaa !54
  %784 = icmp sgt i32 %783, 2
  br i1 %784, label %785, label %789

; <label>:785                                     ; preds = %780
  %786 = load %struct.__sFILE** @__stderrp, align 8, !tbaa !2
  %787 = load i32* %25, align 4, !tbaa !70
  %788 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %786, i8* getelementptr inbounds ([18 x i8]* @.str2, i64 0, i64 0), i32 %787, i32 %782) #10
  %.pr = load i32* %24, align 4, !tbaa !54
  br label %789

; <label>:789                                     ; preds = %785, %780
  %790 = phi i32 [ %.pr, %785 ], [ %783, %780 ]
  %791 = icmp sgt i32 %790, 1
  br i1 %791, label %792, label %794

; <label>:792                                     ; preds = %789
  %793 = load %struct.__sFILE** @__stderrp, align 8, !tbaa !2
  %fputc = tail call i32 @fputc(i32 93, %struct.__sFILE* %793)
  br label %794

; <label>:794                                     ; preds = %792, %789
  %795 = load i32* %14, align 4, !tbaa !58
  %796 = load i32* %25, align 4, !tbaa !70
  %797 = icmp eq i32 %795, %796
  br i1 %797, label %.thread, label %unRLE_obuf_to_output_SMALL.exit.thread16

.thread:                                          ; preds = %794
  %798 = load i32* %26, align 4, !tbaa !51
  %799 = shl i32 %798, 1
  %800 = lshr i32 %798, 31
  %801 = or i32 %799, %800
  %802 = xor i32 %801, %795
  store i32 %802, i32* %26, align 4, !tbaa !51
  store i32 14, i32* %11, align 4, !tbaa !48
  br label %.loopexit62

; <label>:803                                     ; preds = %.backedge
  %804 = icmp sgt i32 %.ph, 9
  br i1 %804, label %.loopexit62, label %.backedge

.loopexit62:                                      ; preds = %803, %.thread
  %805 = tail call i32 @BZ2_decompress(%struct.DState* %5) #10
  %806 = icmp eq i32 %805, 4
  br i1 %806, label %807, label %820

; <label>:807                                     ; preds = %.loopexit62
  %808 = load i32* %24, align 4, !tbaa !54
  %809 = icmp sgt i32 %808, 2
  br i1 %809, label %810, label %._crit_edge

._crit_edge:                                      ; preds = %807
  %.pre54 = getelementptr inbounds %struct.DState* %5, i64 0, i32 24
  br label %816

; <label>:810                                     ; preds = %807
  %811 = load %struct.__sFILE** @__stderrp, align 8, !tbaa !2
  %812 = getelementptr inbounds %struct.DState* %5, i64 0, i32 24
  %813 = load i32* %812, align 4, !tbaa !71
  %814 = load i32* %26, align 4, !tbaa !51
  %815 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %811, i8* getelementptr inbounds ([55 x i8]* @.str4, i64 0, i64 0), i32 %813, i32 %814) #10
  br label %816

; <label>:816                                     ; preds = %._crit_edge, %810
  %.pre-phi = phi i32* [ %.pre54, %._crit_edge ], [ %812, %810 ]
  %817 = load i32* %26, align 4, !tbaa !51
  %818 = load i32* %.pre-phi, align 4, !tbaa !71
  %819 = icmp eq i32 %817, %818
  %. = select i1 %819, i32 4, i32 -4
  br label %unRLE_obuf_to_output_SMALL.exit.thread16

; <label>:820                                     ; preds = %.loopexit62
  %821 = load i32* %11, align 4, !tbaa !48
  %822 = icmp eq i32 %821, 2
  br i1 %822, label %.backedge.outer, label %unRLE_obuf_to_output_SMALL.exit.thread16

unRLE_obuf_to_output_SMALL.exit.thread16:         ; preds = %.backedge, %820, %.loopexit, %777, %794, %79, %342, %543, %712, %816, %7, %2, %0
  %.0 = phi i32 [ -2, %0 ], [ -2, %2 ], [ -2, %7 ], [ %., %816 ], [ -4, %712 ], [ -4, %543 ], [ -4, %342 ], [ -4, %79 ], [ -1, %.backedge ], [ %805, %820 ], [ 0, %.loopexit ], [ 0, %777 ], [ -4, %794 ]
  ret i32 %.0
}
