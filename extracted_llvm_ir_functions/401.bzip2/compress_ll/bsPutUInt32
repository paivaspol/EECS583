define internal fastcc void @bsPutUInt32(%struct.EState* nocapture %s, i32 %u) #0 {
  %1 = lshr i32 %u, 24
  %2 = getelementptr inbounds %struct.EState* %s, i64 0, i32 25
  %3 = load i32* %2, align 4, !tbaa !2
  %4 = icmp sgt i32 %3, 7
  %5 = getelementptr inbounds %struct.EState* %s, i64 0, i32 24
  br i1 %4, label %.lr.ph.i, label %._crit_edge4.i

._crit_edge4.i:                                   ; preds = %0
  %.pre5.i = load i32* %5, align 4, !tbaa !8
  br label %bsW.exit

.lr.ph.i:                                         ; preds = %0
  %6 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %7 = getelementptr inbounds %struct.EState* %s, i64 0, i32 11
  %.pre.i = load i32* %5, align 4, !tbaa !8
  %.pre3.i = load i32* %6, align 4, !tbaa !13
  br label %8

; <label>:8                                       ; preds = %8, %.lr.ph.i
  %9 = phi i32 [ %.pre3.i, %.lr.ph.i ], [ %17, %8 ]
  %10 = phi i32 [ %.pre.i, %.lr.ph.i ], [ %19, %8 ]
  %11 = lshr i32 %10, 24
  %12 = trunc i32 %11 to i8
  %13 = sext i32 %9 to i64
  %14 = load i8** %7, align 8, !tbaa !17
  %15 = getelementptr inbounds i8* %14, i64 %13
  store i8 %12, i8* %15, align 1, !tbaa !18
  %16 = load i32* %6, align 4, !tbaa !13
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %6, align 4, !tbaa !13
  %18 = load i32* %5, align 4, !tbaa !8
  %19 = shl i32 %18, 8
  store i32 %19, i32* %5, align 4, !tbaa !8
  %20 = load i32* %2, align 4, !tbaa !2
  %21 = add nsw i32 %20, -8
  store i32 %21, i32* %2, align 4, !tbaa !2
  %22 = icmp sgt i32 %21, 7
  br i1 %22, label %8, label %bsW.exit

bsW.exit:                                         ; preds = %8, %._crit_edge4.i
  %23 = phi i32 [ %.pre5.i, %._crit_edge4.i ], [ %19, %8 ]
  %24 = phi i32 [ %3, %._crit_edge4.i ], [ %21, %8 ]
  %25 = sub i32 24, %24
  %26 = shl i32 %1, %25
  %27 = or i32 %26, %23
  store i32 %27, i32* %5, align 4, !tbaa !8
  %28 = add nsw i32 %24, 8
  store i32 %28, i32* %2, align 4, !tbaa !2
  %29 = lshr i32 %u, 16
  %30 = and i32 %29, 255
  %31 = icmp sgt i32 %28, 7
  br i1 %31, label %.lr.ph.i17, label %bsW.exit18

.lr.ph.i17:                                       ; preds = %bsW.exit
  %32 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %33 = getelementptr inbounds %struct.EState* %s, i64 0, i32 11
  %.pre3.i16 = load i32* %32, align 4, !tbaa !13
  br label %34

; <label>:34                                      ; preds = %34, %.lr.ph.i17
  %35 = phi i32 [ %.pre3.i16, %.lr.ph.i17 ], [ %43, %34 ]
  %36 = phi i32 [ %27, %.lr.ph.i17 ], [ %45, %34 ]
  %37 = lshr i32 %36, 24
  %38 = trunc i32 %37 to i8
  %39 = sext i32 %35 to i64
  %40 = load i8** %33, align 8, !tbaa !17
  %41 = getelementptr inbounds i8* %40, i64 %39
  store i8 %38, i8* %41, align 1, !tbaa !18
  %42 = load i32* %32, align 4, !tbaa !13
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %32, align 4, !tbaa !13
  %44 = load i32* %5, align 4, !tbaa !8
  %45 = shl i32 %44, 8
  store i32 %45, i32* %5, align 4, !tbaa !8
  %46 = load i32* %2, align 4, !tbaa !2
  %47 = add nsw i32 %46, -8
  store i32 %47, i32* %2, align 4, !tbaa !2
  %48 = icmp sgt i32 %47, 7
  br i1 %48, label %34, label %bsW.exit18

bsW.exit18:                                       ; preds = %34, %bsW.exit
  %49 = phi i32 [ %27, %bsW.exit ], [ %45, %34 ]
  %50 = phi i32 [ %28, %bsW.exit ], [ %47, %34 ]
  %51 = sub i32 24, %50
  %52 = shl i32 %30, %51
  %53 = or i32 %52, %49
  store i32 %53, i32* %5, align 4, !tbaa !8
  %54 = add nsw i32 %50, 8
  store i32 %54, i32* %2, align 4, !tbaa !2
  %55 = lshr i32 %u, 8
  %56 = and i32 %55, 255
  %57 = icmp sgt i32 %54, 7
  br i1 %57, label %.lr.ph.i11, label %bsW.exit12

.lr.ph.i11:                                       ; preds = %bsW.exit18
  %58 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %59 = getelementptr inbounds %struct.EState* %s, i64 0, i32 11
  %.pre3.i10 = load i32* %58, align 4, !tbaa !13
  br label %60

; <label>:60                                      ; preds = %60, %.lr.ph.i11
  %61 = phi i32 [ %.pre3.i10, %.lr.ph.i11 ], [ %69, %60 ]
  %62 = phi i32 [ %53, %.lr.ph.i11 ], [ %71, %60 ]
  %63 = lshr i32 %62, 24
  %64 = trunc i32 %63 to i8
  %65 = sext i32 %61 to i64
  %66 = load i8** %59, align 8, !tbaa !17
  %67 = getelementptr inbounds i8* %66, i64 %65
  store i8 %64, i8* %67, align 1, !tbaa !18
  %68 = load i32* %58, align 4, !tbaa !13
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %58, align 4, !tbaa !13
  %70 = load i32* %5, align 4, !tbaa !8
  %71 = shl i32 %70, 8
  store i32 %71, i32* %5, align 4, !tbaa !8
  %72 = load i32* %2, align 4, !tbaa !2
  %73 = add nsw i32 %72, -8
  store i32 %73, i32* %2, align 4, !tbaa !2
  %74 = icmp sgt i32 %73, 7
  br i1 %74, label %60, label %bsW.exit12

bsW.exit12:                                       ; preds = %60, %bsW.exit18
  %75 = phi i32 [ %53, %bsW.exit18 ], [ %71, %60 ]
  %76 = phi i32 [ %54, %bsW.exit18 ], [ %73, %60 ]
  %77 = sub i32 24, %76
  %78 = shl i32 %56, %77
  %79 = or i32 %78, %75
  store i32 %79, i32* %5, align 4, !tbaa !8
  %80 = add nsw i32 %76, 8
  store i32 %80, i32* %2, align 4, !tbaa !2
  %81 = and i32 %u, 255
  %82 = icmp sgt i32 %80, 7
  br i1 %82, label %.lr.ph.i5, label %bsW.exit6

.lr.ph.i5:                                        ; preds = %bsW.exit12
  %83 = getelementptr inbounds %struct.EState* %s, i64 0, i32 19
  %84 = getelementptr inbounds %struct.EState* %s, i64 0, i32 11
  %.pre3.i4 = load i32* %83, align 4, !tbaa !13
  br label %85

; <label>:85                                      ; preds = %85, %.lr.ph.i5
  %86 = phi i32 [ %.pre3.i4, %.lr.ph.i5 ], [ %94, %85 ]
  %87 = phi i32 [ %79, %.lr.ph.i5 ], [ %96, %85 ]
  %88 = lshr i32 %87, 24
  %89 = trunc i32 %88 to i8
  %90 = sext i32 %86 to i64
  %91 = load i8** %84, align 8, !tbaa !17
  %92 = getelementptr inbounds i8* %91, i64 %90
  store i8 %89, i8* %92, align 1, !tbaa !18
  %93 = load i32* %83, align 4, !tbaa !13
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %83, align 4, !tbaa !13
  %95 = load i32* %5, align 4, !tbaa !8
  %96 = shl i32 %95, 8
  store i32 %96, i32* %5, align 4, !tbaa !8
  %97 = load i32* %2, align 4, !tbaa !2
  %98 = add nsw i32 %97, -8
  store i32 %98, i32* %2, align 4, !tbaa !2
  %99 = icmp sgt i32 %98, 7
  br i1 %99, label %85, label %bsW.exit6

bsW.exit6:                                        ; preds = %85, %bsW.exit12
  %100 = phi i32 [ %79, %bsW.exit12 ], [ %96, %85 ]
  %101 = phi i32 [ %80, %bsW.exit12 ], [ %98, %85 ]
  %102 = sub i32 24, %101
  %103 = shl i32 %81, %102
  %104 = or i32 %103, %100
  store i32 %104, i32* %5, align 4, !tbaa !8
  %105 = add nsw i32 %101, 8
  store i32 %105, i32* %2, align 4, !tbaa !2
  ret void
}
