define void @byterevn(i32* nocapture %w, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{i32* %w}, i64 0, metadata !12), !dbg !17
  tail call void @llvm.dbg.value(metadata !{i32 %n}, i64 0, metadata !13), !dbg !17
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16), !dbg !18
  %cmp22 = icmp sgt i32 %n, 0, !dbg !18
  br i1 %cmp22, label %for.body, label %for.end, !dbg !18

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32* %w, i64 %indvars.iv, !dbg !20
  %0 = load i32* %arrayidx, align 4, !dbg !20, !tbaa !22
  tail call void @llvm.dbg.value(metadata !{i32 %0}, i64 0, metadata !14), !dbg !20
  %or7 = tail call i32 @llvm.bswap.i32(i32 %0), !dbg !25
  tail call void @llvm.dbg.value(metadata !{i32 %or7}, i64 0, metadata !15), !dbg !25
  store i32 %or7, i32* %arrayidx, align 4, !dbg !26, !tbaa !22
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !18
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !18
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !18
  br i1 %exitcond, label %for.end, label %for.body, !dbg !18

for.end:                                          ; preds = %for.body, %entry
  ret void, !dbg !27
}
