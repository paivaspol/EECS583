define i8* @Perl_bytes_to_utf8(i8* %s, i64* nocapture %len) #0 {
entry:
  %0 = load i64* %len, align 8, !tbaa !3
  %add.ptr = getelementptr inbounds i8* %s, i64 %0
  %mul = shl i64 %0, 1
  %add32 = or i64 %mul, 1
  %call = tail call i8* @Perl_safesysmalloc(i64 %add32) #5
  %1 = load i64* %len, align 8, !tbaa !3
  %mul2 = shl i64 %1, 1
  %add333 = or i64 %mul2, 1
  tail call void @llvm.memset.p0i8.i64(i8* %call, i8 0, i64 %add333, i32 1, i1 false)
  %cmp35 = icmp sgt i64 %0, 0
  br i1 %cmp35, label %while.body, label %while.end

while.body:                                       ; preds = %entry, %while.cond.backedge
  %s.addr.037 = phi i8* [ %incdec.ptr, %while.cond.backedge ], [ %s, %entry ]
  %d.036 = phi i8* [ %d.0.be, %while.cond.backedge ], [ %call, %entry ]
  %incdec.ptr = getelementptr inbounds i8* %s.addr.037, i64 1
  %2 = load i8* %s.addr.037, align 1, !tbaa !1
  %cmp5 = icmp sgt i8 %2, -1
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %incdec.ptr8 = getelementptr inbounds i8* %d.036, i64 1
  store i8 %2, i8* %d.036, align 1, !tbaa !1
  br label %while.cond.backedge

if.else:                                          ; preds = %while.body
  %shr34 = lshr i8 %2, 6
  %or = or i8 %shr34, -64
  %incdec.ptr12 = getelementptr inbounds i8* %d.036, i64 1
  store i8 %or, i8* %d.036, align 1, !tbaa !1
  %and = and i8 %2, 63
  %or15 = or i8 %and, -128
  %incdec.ptr17 = getelementptr inbounds i8* %d.036, i64 2
  store i8 %or15, i8* %incdec.ptr12, align 1, !tbaa !1
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.else, %if.then
  %d.0.be = phi i8* [ %incdec.ptr8, %if.then ], [ %incdec.ptr17, %if.else ]
  %cmp = icmp ult i8* %incdec.ptr, %add.ptr
  br i1 %cmp, label %while.body, label %while.end

while.end:                                        ; preds = %while.cond.backedge, %entry
  %d.0.lcssa = phi i8* [ %call, %entry ], [ %d.0.be, %while.cond.backedge ]
  store i8 0, i8* %d.0.lcssa, align 1, !tbaa !1
  %sub.ptr.lhs.cast = ptrtoint i8* %d.0.lcssa to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %call to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %len, align 8, !tbaa !3
  ret i8* %call
}
