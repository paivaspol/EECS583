define internal fastcc double @S_mulexp10(double %value, i32 %exponent) #0 {
entry:
  %cmp = icmp eq i32 %exponent, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1 = fcmp oeq double %value, 0.000000e+00
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.end
  %cmp4 = icmp slt i32 %exponent, 0
  %sub = sub nsw i32 0, %exponent
  %sub.exponent = select i1 %cmp4, i32 %sub, i32 %exponent
  %tobool28 = icmp eq i32 %sub.exponent, 0
  br i1 %tobool28, label %for.end, label %for.body

for.body:                                         ; preds = %if.end3, %if.end12
  %bit.032 = phi i32 [ %shl, %if.end12 ], [ 1, %if.end3 ]
  %power.031 = phi double [ %mul13, %if.end12 ], [ 1.000000e+01, %if.end3 ]
  %result.030 = phi double [ %result.1, %if.end12 ], [ 1.000000e+00, %if.end3 ]
  %exponent.addr.129 = phi i32 [ %exponent.addr.2, %if.end12 ], [ %sub.exponent, %if.end3 ]
  %and = and i32 %bit.032, %exponent.addr.129
  %tobool7 = icmp eq i32 %and, 0
  br i1 %tobool7, label %if.end12, label %if.then8

if.then8:                                         ; preds = %for.body
  %xor = xor i32 %bit.032, %exponent.addr.129
  %mul = fmul double %result.030, %power.031
  %cmp9 = icmp eq i32 %exponent.addr.129, %bit.032
  br i1 %cmp9, label %for.end, label %if.end12

if.end12:                                         ; preds = %for.body, %if.then8
  %exponent.addr.2 = phi i32 [ %xor, %if.then8 ], [ %exponent.addr.129, %for.body ]
  %result.1 = phi double [ %mul, %if.then8 ], [ %result.030, %for.body ]
  %mul13 = fmul double %power.031, %power.031
  %shl = shl i32 %bit.032, 1
  %tobool = icmp eq i32 %exponent.addr.2, 0
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %if.end12, %if.then8, %if.end3
  %result.2 = phi double [ 1.000000e+00, %if.end3 ], [ %mul, %if.then8 ], [ %result.1, %if.end12 ]
  %tobool14 = icmp sgt i32 %exponent, -1
  br i1 %tobool14, label %cond.false, label %cond.true

cond.true:                                        ; preds = %for.end
  %div = fdiv double %value, %result.2
  br label %return

cond.false:                                       ; preds = %for.end
  %mul15 = fmul double %result.2, %value
  br label %return

return:                                           ; preds = %cond.true, %cond.false, %if.end, %entry
  %retval.0 = phi double [ %value, %entry ], [ 0.000000e+00, %if.end ], [ %div, %cond.true ], [ %mul15, %cond.false ]
  ret double %retval.0
}
