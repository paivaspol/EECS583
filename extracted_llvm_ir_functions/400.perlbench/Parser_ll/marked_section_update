define internal fastcc void @marked_section_update(%struct.p_state* nocapture %p_state) #0 {
entry:
  %len = alloca i64, align 8
  %ms_stack1 = getelementptr inbounds %struct.p_state* %p_state, i64 0, i32 18
  %0 = load %struct.av** %ms_stack1, align 8, !tbaa !0
  %ms = getelementptr inbounds %struct.p_state* %p_state, i64 0, i32 17
  store i32 0, i32* %ms, align 4, !tbaa !6
  %tobool = icmp eq %struct.av* %0, null
  br i1 %tobool, label %if.end45, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 @Perl_av_len(%struct.av* %0) #6
  %cmp71 = icmp slt i32 %call, 0
  br i1 %cmp71, label %if.end45.loopexit, label %for.body

for.body:                                         ; preds = %if.then, %for.inc42
  %stack_idx.072 = phi i32 [ %inc43, %for.inc42 ], [ 0, %if.then ]
  %call2 = call %struct.sv** @Perl_av_fetch(%struct.av* %0, i32 %stack_idx.072, i32 0) #6
  %tobool3 = icmp eq %struct.sv** %call2, null
  br i1 %tobool3, label %for.inc42, label %if.then4

if.then4:                                         ; preds = %for.body
  %1 = load %struct.sv** %call2, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.sv* %1, i64 0, i32 0
  %2 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %2 to %struct.sv**
  %3 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %4 = bitcast %struct.sv* %3 to %struct.av*
  %call5 = call i32 @Perl_av_len(%struct.av* %4) #6
  %cmp769 = icmp slt i32 %call5, 0
  br i1 %cmp769, label %for.inc42, label %for.body8

for.body8:                                        ; preds = %if.then4, %for.inc
  %i.070 = phi i32 [ %inc, %for.inc ], [ 0, %if.then4 ]
  %call10 = call %struct.sv** @Perl_av_fetch(%struct.av* %4, i32 %i.070, i32 0) #6
  %tobool11 = icmp eq %struct.sv** %call10, null
  br i1 %tobool11, label %for.inc, label %if.then12

if.then12:                                        ; preds = %for.body8
  %5 = load %struct.sv** %call10, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %5, i64 0, i32 2
  %6 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %6, 262144
  %cmp13 = icmp eq i32 %and, 0
  br i1 %cmp13, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then12
  %sv_any14 = getelementptr inbounds %struct.sv* %5, i64 0, i32 0
  %7 = load i8** %sv_any14, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %7, i64 8
  %8 = bitcast i8* %xpv_cur to i64*
  %9 = load i64* %8, align 8, !tbaa !4
  store i64 %9, i64* %len, align 8, !tbaa !4
  %xpv_pv = bitcast i8* %7 to i8**
  %10 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.then12
  %call16 = call i8* @Perl_sv_2pv_flags(%struct.sv* %5, i64* %len, i32 2) #6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call16, %cond.false ]
  %call17 = call i32 @strcmp(i8* %cond, i8* getelementptr inbounds ([8 x i8]* @.str97, i64 0, i64 0)) #6
  %tobool18 = icmp eq i32 %call17, 0
  br i1 %tobool18, label %if.end34, label %if.else

if.else:                                          ; preds = %cond.end
  %call20 = call i32 @strcmp(i8* %cond, i8* getelementptr inbounds ([7 x i8]* @.str101, i64 0, i64 0)) #6
  %tobool21 = icmp eq i32 %call20, 0
  br i1 %tobool21, label %if.end34, label %if.else23

if.else23:                                        ; preds = %if.else
  %call24 = call i32 @strcmp(i8* %cond, i8* getelementptr inbounds ([6 x i8]* @.str102, i64 0, i64 0)) #6
  %tobool25 = icmp eq i32 %call24, 0
  br i1 %tobool25, label %if.end34, label %if.else27

if.else27:                                        ; preds = %if.else23
  %call28 = call i32 @strcmp(i8* %cond, i8* getelementptr inbounds ([7 x i8]* @.str103, i64 0, i64 0)) #6
  %tobool29 = icmp eq i32 %call28, 0
  %. = select i1 %tobool29, i32 4, i32 0
  br label %if.end34

if.end34:                                         ; preds = %if.else27, %if.else23, %if.else, %cond.end
  %token.0 = phi i32 [ 1, %cond.end ], [ 2, %if.else ], [ 3, %if.else23 ], [ %., %if.else27 ]
  %11 = load i32* %ms, align 4, !tbaa !6
  %cmp36 = icmp ult i32 %11, %token.0
  br i1 %cmp36, label %if.then37, label %for.inc

if.then37:                                        ; preds = %if.end34
  store i32 %token.0, i32* %ms, align 4, !tbaa !6
  br label %for.inc

for.inc:                                          ; preds = %for.body8, %if.then37, %if.end34
  %inc = add nsw i32 %i.070, 1
  %exitcond = icmp eq i32 %i.070, %call5
  br i1 %exitcond, label %for.inc42, label %for.body8

for.inc42:                                        ; preds = %if.then4, %for.inc, %for.body
  %inc43 = add nsw i32 %stack_idx.072, 1
  %exitcond73 = icmp eq i32 %stack_idx.072, %call
  br i1 %exitcond73, label %if.end45.loopexit, label %for.body

if.end45.loopexit:                                ; preds = %for.inc42, %if.then
  %.pre = load i32* %ms, align 4, !tbaa !6
  %phitmp = icmp eq i32 %.pre, 3
  br label %if.end45

if.end45:                                         ; preds = %if.end45.loopexit, %entry
  %12 = phi i1 [ %phitmp, %if.end45.loopexit ], [ false, %entry ]
  %conv48 = zext i1 %12 to i8
  %is_cdata = getelementptr inbounds %struct.p_state* %p_state, i64 0, i32 8
  store i8 %conv48, i8* %is_cdata, align 1, !tbaa !1
  ret void
}
