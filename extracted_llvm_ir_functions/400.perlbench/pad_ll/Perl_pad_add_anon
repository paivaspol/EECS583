define i64 @Perl_pad_add_anon(%struct.sv* %sv, i16 zeroext %op_type) #0 {
entry:
  %call = tail call %struct.sv* @Perl_newSV(i64 0) #3
  %call1 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %call, i32 6) #3
  tail call void @Perl_sv_setpvn(%struct.sv* %call, i8* getelementptr inbounds ([2 x i8]* @.str1, i64 0, i64 0), i64 1) #3
  %sv_any = getelementptr inbounds %struct.sv* %call, i64 0, i32 0
  %0 = load i8** %sv_any, align 8, !tbaa !3
  %xiv_iv = getelementptr inbounds i8* %0, i64 24
  %1 = bitcast i8* %xiv_iv to i64*
  store i64 -1, i64* %1, align 8, !tbaa !4
  %xnv_nv = getelementptr inbounds i8* %0, i64 32
  %2 = bitcast i8* %xnv_nv to double*
  store double 1.000000e+00, double* %2, align 8, !tbaa !6
  %call3 = tail call i64 @Perl_pad_alloc(i32 undef, i32 1024) #4
  %3 = load %struct.av** @PL_comppad_name, align 8, !tbaa !3
  %conv4 = trunc i64 %call3 to i32
  %call5 = tail call %struct.sv** @Perl_av_store(%struct.av* %3, i32 %conv4, %struct.sv* %call) #3
  %4 = load %struct.av** @PL_comppad, align 8, !tbaa !3
  %call7 = tail call %struct.sv** @Perl_av_store(%struct.av* %4, i32 %conv4, %struct.sv* %sv) #3
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %5 = load i32* %sv_flags, align 4, !tbaa !0
  %or = or i32 %5, 1280
  store i32 %or, i32* %sv_flags, align 4, !tbaa !0
  %sv_any8 = bitcast %struct.sv* %sv to %struct.xpvcv**
  %6 = load %struct.xpvcv** %sv_any8, align 8, !tbaa !3
  %xcv_outside = getelementptr inbounds %struct.xpvcv* %6, i64 0, i32 16
  %7 = load %struct.cv** %xcv_outside, align 8, !tbaa !3
  %tobool = icmp eq %struct.cv* %7, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %xcv_flags = getelementptr inbounds %struct.xpvcv* %6, i64 0, i32 17
  %8 = load i16* %xcv_flags, align 2, !tbaa !5
  %or11 = or i16 %8, 1024
  store i16 %or11, i16* %xcv_flags, align 2, !tbaa !5
  %9 = bitcast %struct.cv* %7 to %struct.sv*
  tail call void @Perl_sv_free(%struct.sv* %9) #3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret i64 %call3
}
