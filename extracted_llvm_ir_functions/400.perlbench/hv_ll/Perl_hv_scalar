define %struct.sv* @Perl_hv_scalar(%struct.hv* %hv) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.hv* %hv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !4
  %and = and i32 %0, 32768
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = bitcast %struct.hv* %hv to %struct.sv*
  %call = tail call %struct.magic* @Perl_mg_find(%struct.sv* %1, i32 80) #4
  %tobool1 = icmp eq %struct.magic* %call, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %call2 = tail call %struct.sv* @Perl_magic_scalarpack(%struct.hv* %hv, %struct.magic* %call) #4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call3 = tail call %struct.sv* @Perl_sv_newmortal() #4
  %sv_any = getelementptr inbounds %struct.hv* %hv, i64 0, i32 0
  %2 = load %struct.xpvhv** %sv_any, align 8, !tbaa !0
  %xhv_fill = getelementptr inbounds %struct.xpvhv* %2, i64 0, i32 1
  %3 = load i64* %xhv_fill, align 8, !tbaa !3
  %tobool4 = icmp eq i64 %3, 0
  br i1 %tobool4, label %if.else, label %if.then5

if.then5:                                         ; preds = %if.end
  %xhv_max = getelementptr inbounds %struct.xpvhv* %2, i64 0, i32 2
  %4 = load i64* %xhv_max, align 8, !tbaa !3
  %add = add nsw i64 %4, 1
  tail call void (%struct.sv*, i8*, ...)* @Perl_sv_setpvf(%struct.sv* %call3, i8* getelementptr inbounds ([8 x i8]* @.str, i64 0, i64 0), i64 %3, i64 %add) #4
  br label %return

if.else:                                          ; preds = %if.end
  tail call void @Perl_sv_setiv(%struct.sv* %call3, i64 0) #4
  br label %return

return:                                           ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi %struct.sv* [ %call2, %if.then ], [ %call3, %if.else ], [ %call3, %if.then5 ]
  ret %struct.sv* %retval.0
}
