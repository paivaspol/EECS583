define %struct.op* @Perl_pp_method_named() #0 {
entry:
  %hash = alloca i32, align 4
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_sv = getelementptr inbounds %struct.op* %1, i64 1
  %2 = bitcast %struct.op* %op_sv to %struct.sv**
  %3 = load %struct.sv** %2, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.sv* %3, i64 0, i32 0
  %4 = load i8** %sv_any, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %4, i64 24
  %5 = bitcast i8* %xuv_uv to i64*
  %6 = load i64* %5, align 8, !tbaa !4
  %conv = trunc i64 %6 to i32
  store i32 %conv, i32* %hash, align 4, !tbaa !3
  %7 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %7 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %0, %struct.sv** %0, i32 1) #8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %sp.0 = phi %struct.sv** [ %call, %if.then ], [ %0, %entry ]
  %call2 = call fastcc %struct.sv* @S_method_common(%struct.sv* %3, i32* %hash) #9
  %incdec.ptr = getelementptr inbounds %struct.sv** %sp.0, i64 1
  store %struct.sv* %call2, %struct.sv** %incdec.ptr, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %8 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %8, i64 0, i32 0
  %9 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %9
}
