define %struct.op* @Perl_pp_aelemfast() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_flags = getelementptr inbounds %struct.op* %1, i64 0, i32 6
  %2 = load i8* %op_flags, align 1, !tbaa !1
  %tobool = icmp slt i8 %2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %op_targ = getelementptr inbounds %struct.op* %1, i64 0, i32 3
  %3 = load i64* %op_targ, align 8, !tbaa !4
  %4 = load %struct.sv*** @PL_curpad, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %4, i64 %3
  %5 = load %struct.sv** %arrayidx, align 8, !tbaa !0
  %6 = bitcast %struct.sv* %5 to %struct.av*
  br label %cond.end

cond.false:                                       ; preds = %entry
  %op_sv = getelementptr inbounds %struct.op* %1, i64 1
  %7 = bitcast %struct.op* %op_sv to %struct.sv**
  %8 = load %struct.sv** %7, align 8, !tbaa !0
  %sv_any = bitcast %struct.sv* %8 to %struct.xpvgv**
  %9 = load %struct.xpvgv** %sv_any, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %9, i64 0, i32 7
  %10 = load %struct.gp** %xgv_gp, align 8, !tbaa !0
  %gp_av = getelementptr inbounds %struct.gp* %10, i64 0, i32 4
  %11 = load %struct.av** %gp_av, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %6, %cond.true ], [ %11, %cond.false ]
  %conv2 = zext i8 %2 to i32
  %and3 = and i32 %conv2, 32
  %op_private = getelementptr inbounds %struct.op* %1, i64 0, i32 7
  %12 = load i8* %op_private, align 1, !tbaa !1
  %conv4 = zext i8 %12 to i32
  %call = tail call %struct.sv** @Perl_av_fetch(%struct.av* %cond, i32 %conv4, i32 %and3) #8
  %tobool5 = icmp eq %struct.sv** %call, null
  br i1 %tobool5, label %cond.end8, label %cond.true6

cond.true6:                                       ; preds = %cond.end
  %13 = load %struct.sv** %call, align 8, !tbaa !0
  br label %cond.end8

cond.end8:                                        ; preds = %cond.end, %cond.true6
  %cond9 = phi %struct.sv* [ %13, %cond.true6 ], [ @PL_sv_undef, %cond.end ]
  %14 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end8
  %call11 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %0, %struct.sv** %0, i32 1) #8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end8
  %sp.0 = phi %struct.sv** [ %call11, %if.then ], [ %0, %cond.end8 ]
  %tobool12 = icmp eq i32 %and3, 0
  br i1 %tobool12, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.end
  %sv_flags = getelementptr inbounds %struct.sv* %cond9, i64 0, i32 2
  %15 = load i32* %sv_flags, align 4, !tbaa !3
  %and13 = and i32 %15, 8192
  %tobool14 = icmp eq i32 %and13, 0
  br i1 %tobool14, label %if.end17, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  %call16 = tail call %struct.sv* @Perl_sv_mortalcopy(%struct.sv* %cond9) #8
  br label %if.end17

if.end17:                                         ; preds = %land.lhs.true, %if.end, %if.then15
  %sv.0 = phi %struct.sv* [ %cond9, %if.end ], [ %call16, %if.then15 ], [ %cond9, %land.lhs.true ]
  %incdec.ptr = getelementptr inbounds %struct.sv** %sp.0, i64 1
  store %struct.sv* %sv.0, %struct.sv** %incdec.ptr, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %16 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %16, i64 0, i32 0
  %17 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %17
}
