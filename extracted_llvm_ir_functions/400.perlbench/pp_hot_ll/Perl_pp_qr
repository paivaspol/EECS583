define %struct.op* @Perl_pp_qr() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %call = tail call %struct.sv* @Perl_sv_newmortal() #8
  %call1 = tail call %struct.sv* @Perl_newSVrv(%struct.sv* %call, i8* getelementptr inbounds ([7 x i8]* @.str11, i64 0, i64 0)) #8
  %op_pmdynflags = getelementptr inbounds %struct.op* %1, i64 2, i32 2
  %2 = bitcast {}** %op_pmdynflags to i8*
  %3 = load i8* %2, align 1, !tbaa !1
  %and = and i8 %3, 2
  %tobool = icmp ne i8 %and, 0
  %4 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool2 = icmp ne i8 %4, 0
  %or.cond = and i1 %tobool, %tobool2
  br i1 %or.cond, label %if.then3, label %if.end4

if.then3:                                         ; preds = %entry
  tail call void @Perl_sv_taint(%struct.sv* %call) #8
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %entry
  %op_pmregexp = getelementptr inbounds %struct.op* %1, i64 2
  %5 = bitcast %struct.op* %op_pmregexp to %struct.regexp**
  %6 = load %struct.regexp** %5, align 8, !tbaa !0
  %tobool5 = icmp eq %struct.regexp* %6, null
  br i1 %tobool5, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end4
  %refcnt = getelementptr inbounds %struct.regexp* %6, i64 0, i32 9
  %7 = load i32* %refcnt, align 4, !tbaa !3
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %refcnt, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %if.end4, %land.rhs
  %8 = bitcast %struct.regexp* %6 to %struct.sv*
  tail call void @Perl_sv_magic(%struct.sv* %call1, %struct.sv* %8, i32 114, i8* null, i32 0) #8
  %incdec.ptr = getelementptr inbounds %struct.sv** %0, i64 1
  store %struct.sv* %call, %struct.sv** %incdec.ptr, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %9 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %9, i64 0, i32 0
  %10 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %10
}
