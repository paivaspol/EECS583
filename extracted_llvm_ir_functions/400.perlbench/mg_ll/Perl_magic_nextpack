define i32 @Perl_magic_nextpack(%struct.sv* %sv, %struct.magic* nocapture %mg, %struct.sv* %key) #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %key, i64 0, i32 2
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %1, 118423552
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i8* getelementptr inbounds ([8 x i8]* @.str28, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8]* @.str29, i64 0, i64 0)
  tail call void @Perl_push_scope() #7
  tail call void @Perl_save_int(i32* @PL_tmps_floor) #7
  %2 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  store i32 %2, i32* @PL_tmps_floor, align 4, !tbaa !3
  %3 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_next = getelementptr inbounds %struct.stackinfo* %3, i64 0, i32 6
  %4 = load %struct.stackinfo** %si_next, align 8, !tbaa !0
  %tobool1 = icmp eq %struct.stackinfo* %4, null
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 13) #7
  %5 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_prev = getelementptr inbounds %struct.stackinfo* %call, i64 0, i32 5
  store %struct.stackinfo* %5, %struct.stackinfo** %si_prev, align 8, !tbaa !0
  %6 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_next2 = getelementptr inbounds %struct.stackinfo* %6, i64 0, i32 6
  store %struct.stackinfo* %call, %struct.stackinfo** %si_next2, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %next.0 = phi %struct.stackinfo* [ %4, %entry ], [ %call, %if.then ]
  %si_type = getelementptr inbounds %struct.stackinfo* %next.0, i64 0, i32 4
  store i32 2, i32* %si_type, align 4, !tbaa !3
  %si_cxix = getelementptr inbounds %struct.stackinfo* %next.0, i64 0, i32 2
  store i32 -1, i32* %si_cxix, align 4, !tbaa !3
  %si_stack = getelementptr inbounds %struct.stackinfo* %next.0, i64 0, i32 0
  %7 = load %struct.av** %si_stack, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.av* %7, i64 0, i32 0
  %8 = load %struct.xpvav** %sv_any, align 8, !tbaa !0
  %xav_fill = getelementptr inbounds %struct.xpvav* %8, i64 0, i32 1
  store i64 0, i64* %xav_fill, align 8, !tbaa !4
  %9 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %0 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 3
  %10 = load %struct.av** @PL_curstack, align 8, !tbaa !0
  %sv_any3 = getelementptr inbounds %struct.av* %10, i64 0, i32 0
  %11 = load %struct.xpvav** %sv_any3, align 8, !tbaa !0
  %xav_fill4 = getelementptr inbounds %struct.xpvav* %11, i64 0, i32 1
  store i64 %sub.ptr.div, i64* %xav_fill4, align 8, !tbaa !4
  %xav_array = getelementptr inbounds %struct.xpvav* %8, i64 0, i32 0
  %12 = load i8** %xav_array, align 8, !tbaa !0
  %13 = bitcast i8* %12 to %struct.sv**
  store %struct.sv** %13, %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %14 = load %struct.av** %si_stack, align 8, !tbaa !0
  %sv_any8 = getelementptr inbounds %struct.av* %14, i64 0, i32 0
  %15 = load %struct.xpvav** %sv_any8, align 8, !tbaa !0
  %xav_max = getelementptr inbounds %struct.xpvav* %15, i64 0, i32 2
  %16 = load i64* %xav_max, align 8, !tbaa !4
  %add.ptr = getelementptr inbounds %struct.sv** %13, i64 %16
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %17 = load %struct.av** %si_stack, align 8, !tbaa !0
  %sv_any10 = getelementptr inbounds %struct.av* %17, i64 0, i32 0
  %18 = load %struct.xpvav** %sv_any10, align 8, !tbaa !0
  %xav_fill11 = getelementptr inbounds %struct.xpvav* %18, i64 0, i32 1
  %19 = load i64* %xav_fill11, align 8, !tbaa !4
  %add.ptr12 = getelementptr inbounds %struct.sv** %13, i64 %19
  store %struct.sv** %add.ptr12, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %20 = load %struct.av** %si_stack, align 8, !tbaa !0
  store %struct.av* %20, %struct.av** @PL_curstack, align 8, !tbaa !0
  store %struct.stackinfo* %next.0, %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %21 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds i32* %21, i64 1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8, !tbaa !0
  %22 = load i32** @PL_markstack_max, align 8, !tbaa !0
  %cmp = icmp eq i32* %incdec.ptr, %22
  br i1 %cmp, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.end
  tail call void @Perl_markstack_grow() #7
  %.pre = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %.pre125 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  %.pre126 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %if.end
  %23 = phi %struct.sv** [ %.pre126, %if.then14 ], [ %add.ptr, %if.end ]
  %24 = phi i32* [ %.pre125, %if.then14 ], [ %incdec.ptr, %if.end ]
  %25 = phi %struct.sv** [ %.pre, %if.then14 ], [ %13, %if.end ]
  %sub.ptr.lhs.cast16 = ptrtoint %struct.sv** %add.ptr12 to i64
  %sub.ptr.rhs.cast17 = ptrtoint %struct.sv** %25 to i64
  %sub.ptr.sub18 = sub i64 %sub.ptr.lhs.cast16, %sub.ptr.rhs.cast17
  %sub.ptr.div19124 = lshr exact i64 %sub.ptr.sub18, 3
  %conv = trunc i64 %sub.ptr.div19124 to i32
  store i32 %conv, i32* %24, align 4, !tbaa !3
  %sub.ptr.lhs.cast20 = ptrtoint %struct.sv** %23 to i64
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.lhs.cast16
  %cmp24 = icmp slt i64 %sub.ptr.sub22, 16
  br i1 %cmp24, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end15
  %call27 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %add.ptr12, %struct.sv** %add.ptr12, i32 2) #7
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end15
  %sp.0 = phi %struct.sv** [ %call27, %if.then26 ], [ %add.ptr12, %if.end15 ]
  %mg_obj = getelementptr inbounds %struct.magic* %mg, i64 0, i32 5
  %26 = load %struct.sv** %mg_obj, align 8, !tbaa !0
  %tobool29 = icmp eq %struct.sv* %26, null
  br i1 %tobool29, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.end28
  %call31 = tail call %struct.sv* @Perl_newRV(%struct.sv* %sv) #7
  %call32 = tail call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call31) #7
  br label %cond.end

cond.end:                                         ; preds = %if.end28, %cond.false
  %cond33 = phi %struct.sv* [ %call32, %cond.false ], [ %26, %if.end28 ]
  %incdec.ptr34 = getelementptr inbounds %struct.sv** %sp.0, i64 1
  store %struct.sv* %cond33, %struct.sv** %incdec.ptr34, align 8, !tbaa !0
  %27 = load i32* %sv_flags, align 4, !tbaa !3
  %and36 = and i32 %27, 118423552
  %tobool37 = icmp eq i32 %and36, 0
  br i1 %tobool37, label %if.end40, label %if.then38

if.then38:                                        ; preds = %cond.end
  %incdec.ptr39 = getelementptr inbounds %struct.sv** %sp.0, i64 2
  store %struct.sv* %key, %struct.sv** %incdec.ptr39, align 8, !tbaa !0
  br label %if.end40

if.end40:                                         ; preds = %cond.end, %if.then38
  %sp.1 = phi %struct.sv** [ %incdec.ptr39, %if.then38 ], [ %incdec.ptr34, %cond.end ]
  store %struct.sv** %sp.1, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %call41 = tail call i32 @Perl_call_method(i8* %cond, i32 0) #7
  %tobool42 = icmp eq i32 %call41, 0
  br i1 %tobool42, label %if.end45, label %if.then43

if.then43:                                        ; preds = %if.end40
  %28 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %incdec.ptr44 = getelementptr inbounds %struct.sv** %28, i64 -1
  store %struct.sv** %incdec.ptr44, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %29 = load %struct.sv** %28, align 8, !tbaa !0
  tail call void @Perl_sv_setsv_flags(%struct.sv* %key, %struct.sv* %29, i32 2) #7
  br label %if.end45

if.end45:                                         ; preds = %if.end40, %if.then43
  %30 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %31 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_prev47 = getelementptr inbounds %struct.stackinfo* %31, i64 0, i32 5
  %32 = load %struct.stackinfo** %si_prev47, align 8, !tbaa !0
  %tobool48 = icmp eq %struct.stackinfo* %32, null
  br i1 %tobool48, label %if.then49, label %if.end75

if.then49:                                        ; preds = %if.end45
  %33 = load %struct.gv** @PL_stderrgv, align 8, !tbaa !0
  %tobool50 = icmp eq %struct.gv* %33, null
  br i1 %tobool50, label %cond.false70, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then49
  %sv_flags51 = getelementptr inbounds %struct.gv* %33, i64 0, i32 2
  %34 = load i32* %sv_flags51, align 4, !tbaa !3
  %and52 = and i32 %34, 255
  %cmp53 = icmp eq i32 %and52, 13
  br i1 %cmp53, label %land.lhs.true55, label %cond.false70

land.lhs.true55:                                  ; preds = %land.lhs.true
  %sv_any56 = getelementptr inbounds %struct.gv* %33, i64 0, i32 0
  %35 = load %struct.xpvgv** %sv_any56, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %35, i64 0, i32 7
  %36 = load %struct.gp** %xgv_gp, align 8, !tbaa !0
  %gp_io = getelementptr inbounds %struct.gp* %36, i64 0, i32 2
  %37 = load %struct.io** %gp_io, align 8, !tbaa !0
  %tobool57 = icmp eq %struct.io* %37, null
  br i1 %tobool57, label %cond.false70, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %land.lhs.true55
  %sv_any62 = getelementptr inbounds %struct.io* %37, i64 0, i32 0
  %38 = load %struct.xpvio** %sv_any62, align 8, !tbaa !0
  %xio_ofp = getelementptr inbounds %struct.xpvio* %38, i64 0, i32 8
  %39 = load %struct._PerlIO*** %xio_ofp, align 8, !tbaa !0
  %tobool63 = icmp eq %struct._PerlIO** %39, null
  br i1 %tobool63, label %cond.false70, label %cond.end72

cond.false70:                                     ; preds = %land.lhs.true58, %land.lhs.true55, %if.then49, %land.lhs.true
  %call71 = tail call %struct._PerlIO** @Perl_PerlIO_stderr() #7
  br label %cond.end72

cond.end72:                                       ; preds = %land.lhs.true58, %cond.false70
  %cond73 = phi %struct._PerlIO** [ %call71, %cond.false70 ], [ %39, %land.lhs.true58 ]
  %call74 = tail call i32 (%struct._PerlIO**, i8*, ...)* @PerlIO_printf(%struct._PerlIO** %cond73, i8* getelementptr inbounds ([17 x i8]* @.str24, i64 0, i64 0)) #7
  tail call void @Perl_my_exit(i32 1) #7
  br label %if.end75

if.end75:                                         ; preds = %if.end45, %cond.end72
  %40 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast76 = ptrtoint %struct.sv** %30 to i64
  %sub.ptr.rhs.cast77 = ptrtoint %struct.sv** %40 to i64
  %sub.ptr.sub78 = sub i64 %sub.ptr.lhs.cast76, %sub.ptr.rhs.cast77
  %sub.ptr.div79 = ashr exact i64 %sub.ptr.sub78, 3
  %41 = load %struct.av** @PL_curstack, align 8, !tbaa !0
  %sv_any80 = getelementptr inbounds %struct.av* %41, i64 0, i32 0
  %42 = load %struct.xpvav** %sv_any80, align 8, !tbaa !0
  %xav_fill81 = getelementptr inbounds %struct.xpvav* %42, i64 0, i32 1
  store i64 %sub.ptr.div79, i64* %xav_fill81, align 8, !tbaa !4
  %si_stack82 = getelementptr inbounds %struct.stackinfo* %32, i64 0, i32 0
  %43 = load %struct.av** %si_stack82, align 8, !tbaa !0
  %sv_any83 = getelementptr inbounds %struct.av* %43, i64 0, i32 0
  %44 = load %struct.xpvav** %sv_any83, align 8, !tbaa !0
  %xav_array84 = getelementptr inbounds %struct.xpvav* %44, i64 0, i32 0
  %45 = load i8** %xav_array84, align 8, !tbaa !0
  %46 = bitcast i8* %45 to %struct.sv**
  store %struct.sv** %46, %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %47 = load %struct.av** %si_stack82, align 8, !tbaa !0
  %sv_any86 = getelementptr inbounds %struct.av* %47, i64 0, i32 0
  %48 = load %struct.xpvav** %sv_any86, align 8, !tbaa !0
  %xav_max87 = getelementptr inbounds %struct.xpvav* %48, i64 0, i32 2
  %49 = load i64* %xav_max87, align 8, !tbaa !4
  %add.ptr88 = getelementptr inbounds %struct.sv** %46, i64 %49
  store %struct.sv** %add.ptr88, %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %50 = load %struct.av** %si_stack82, align 8, !tbaa !0
  %sv_any90 = getelementptr inbounds %struct.av* %50, i64 0, i32 0
  %51 = load %struct.xpvav** %sv_any90, align 8, !tbaa !0
  %xav_fill91 = getelementptr inbounds %struct.xpvav* %51, i64 0, i32 1
  %52 = load i64* %xav_fill91, align 8, !tbaa !4
  %add.ptr92 = getelementptr inbounds %struct.sv** %46, i64 %52
  store %struct.sv** %add.ptr92, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %53 = load %struct.av** %si_stack82, align 8, !tbaa !0
  store %struct.av* %53, %struct.av** @PL_curstack, align 8, !tbaa !0
  store %struct.stackinfo* %32, %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %54 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  %55 = load i32* @PL_tmps_floor, align 4, !tbaa !3
  %cmp94 = icmp sgt i32 %54, %55
  br i1 %cmp94, label %if.then96, label %if.end97

if.then96:                                        ; preds = %if.end75
  tail call void @Perl_free_tmps() #7
  br label %if.end97

if.end97:                                         ; preds = %if.then96, %if.end75
  tail call void @Perl_pop_scope() #7
  ret i32 0
}
