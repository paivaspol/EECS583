define i32 @Perl_magic_sizepack(%struct.sv* %sv, %struct.magic* nocapture %mg) #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  tail call void @Perl_push_scope() #7
  tail call void @Perl_save_int(i32* @PL_tmps_floor) #7
  %1 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  store i32 %1, i32* @PL_tmps_floor, align 4, !tbaa !3
  %2 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_next = getelementptr inbounds %struct.stackinfo* %2, i64 0, i32 6
  %3 = load %struct.stackinfo** %si_next, align 8, !tbaa !0
  %tobool = icmp eq %struct.stackinfo* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.stackinfo* @Perl_new_stackinfo(i32 32, i32 13) #7
  %4 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_prev = getelementptr inbounds %struct.stackinfo* %call, i64 0, i32 5
  store %struct.stackinfo* %4, %struct.stackinfo** %si_prev, align 8, !tbaa !0
  %5 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_next2 = getelementptr inbounds %struct.stackinfo* %5, i64 0, i32 6
  store %struct.stackinfo* %call, %struct.stackinfo** %si_next2, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %next.0 = phi %struct.stackinfo* [ %3, %entry ], [ %call, %if.then ]
  %si_type = getelementptr inbounds %struct.stackinfo* %next.0, i64 0, i32 4
  store i32 2, i32* %si_type, align 4, !tbaa !3
  %si_cxix = getelementptr inbounds %struct.stackinfo* %next.0, i64 0, i32 2
  store i32 -1, i32* %si_cxix, align 4, !tbaa !3
  %si_stack = getelementptr inbounds %struct.stackinfo* %next.0, i64 0, i32 0
  %6 = load %struct.av** %si_stack, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.av* %6, i64 0, i32 0
  %7 = load %struct.xpvav** %sv_any, align 8, !tbaa !0
  %xav_fill = getelementptr inbounds %struct.xpvav* %7, i64 0, i32 1
  store i64 0, i64* %xav_fill, align 8, !tbaa !4
  %8 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %0 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 3
  %9 = load %struct.av** @PL_curstack, align 8, !tbaa !0
  %sv_any3 = getelementptr inbounds %struct.av* %9, i64 0, i32 0
  %10 = load %struct.xpvav** %sv_any3, align 8, !tbaa !0
  %xav_fill4 = getelementptr inbounds %struct.xpvav* %10, i64 0, i32 1
  store i64 %sub.ptr.div, i64* %xav_fill4, align 8, !tbaa !4
  %xav_array = getelementptr inbounds %struct.xpvav* %7, i64 0, i32 0
  %11 = load i8** %xav_array, align 8, !tbaa !0
  %12 = bitcast i8* %11 to %struct.sv**
  store %struct.sv** %12, %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %13 = load %struct.av** %si_stack, align 8, !tbaa !0
  %sv_any8 = getelementptr inbounds %struct.av* %13, i64 0, i32 0
  %14 = load %struct.xpvav** %sv_any8, align 8, !tbaa !0
  %xav_max = getelementptr inbounds %struct.xpvav* %14, i64 0, i32 2
  %15 = load i64* %xav_max, align 8, !tbaa !4
  %add.ptr = getelementptr inbounds %struct.sv** %12, i64 %15
  store %struct.sv** %add.ptr, %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %16 = load %struct.av** %si_stack, align 8, !tbaa !0
  %sv_any10 = getelementptr inbounds %struct.av* %16, i64 0, i32 0
  %17 = load %struct.xpvav** %sv_any10, align 8, !tbaa !0
  %xav_fill11 = getelementptr inbounds %struct.xpvav* %17, i64 0, i32 1
  %18 = load i64* %xav_fill11, align 8, !tbaa !4
  %add.ptr12 = getelementptr inbounds %struct.sv** %12, i64 %18
  store %struct.sv** %add.ptr12, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %19 = load %struct.av** %si_stack, align 8, !tbaa !0
  store %struct.av* %19, %struct.av** @PL_curstack, align 8, !tbaa !0
  store %struct.stackinfo* %next.0, %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %call14 = tail call fastcc i32 @S_magic_methcall(%struct.sv* %sv, %struct.magic* %mg, i8* getelementptr inbounds ([10 x i8]* @.str26, i64 0, i64 0), i32 0, i32 2, %struct.sv* null) #8
  %tobool15 = icmp eq i32 %call14, 0
  br i1 %tobool15, label %if.end20, label %if.then16

if.then16:                                        ; preds = %if.end
  %20 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds %struct.sv** %20, i64 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %21 = load %struct.sv** %20, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %21, i64 0, i32 2
  %22 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %22, 65536
  %tobool17 = icmp eq i32 %and, 0
  br i1 %tobool17, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then16
  %sv_any18 = getelementptr inbounds %struct.sv* %21, i64 0, i32 0
  %23 = load i8** %sv_any18, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %23, i64 24
  %24 = bitcast i8* %xiv_iv to i64*
  %25 = load i64* %24, align 8, !tbaa !4
  br label %cond.end

cond.false:                                       ; preds = %if.then16
  %call19 = tail call i64 @Perl_sv_2iv(%struct.sv* %21) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %25, %cond.true ], [ %call19, %cond.false ]
  %conv = trunc i64 %cond to i32
  %sub = add i32 %conv, -1
  br label %if.end20

if.end20:                                         ; preds = %if.end, %cond.end
  %retval1.0 = phi i32 [ %sub, %cond.end ], [ 0, %if.end ]
  %26 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %27 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_prev22 = getelementptr inbounds %struct.stackinfo* %27, i64 0, i32 5
  %28 = load %struct.stackinfo** %si_prev22, align 8, !tbaa !0
  %tobool23 = icmp eq %struct.stackinfo* %28, null
  br i1 %tobool23, label %if.then24, label %if.end49

if.then24:                                        ; preds = %if.end20
  %29 = load %struct.gv** @PL_stderrgv, align 8, !tbaa !0
  %tobool25 = icmp eq %struct.gv* %29, null
  br i1 %tobool25, label %cond.false44, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then24
  %sv_flags26 = getelementptr inbounds %struct.gv* %29, i64 0, i32 2
  %30 = load i32* %sv_flags26, align 4, !tbaa !3
  %and27 = and i32 %30, 255
  %cmp = icmp eq i32 %and27, 13
  br i1 %cmp, label %land.lhs.true29, label %cond.false44

land.lhs.true29:                                  ; preds = %land.lhs.true
  %sv_any30 = getelementptr inbounds %struct.gv* %29, i64 0, i32 0
  %31 = load %struct.xpvgv** %sv_any30, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %31, i64 0, i32 7
  %32 = load %struct.gp** %xgv_gp, align 8, !tbaa !0
  %gp_io = getelementptr inbounds %struct.gp* %32, i64 0, i32 2
  %33 = load %struct.io** %gp_io, align 8, !tbaa !0
  %tobool31 = icmp eq %struct.io* %33, null
  br i1 %tobool31, label %cond.false44, label %land.lhs.true32

land.lhs.true32:                                  ; preds = %land.lhs.true29
  %sv_any36 = getelementptr inbounds %struct.io* %33, i64 0, i32 0
  %34 = load %struct.xpvio** %sv_any36, align 8, !tbaa !0
  %xio_ofp = getelementptr inbounds %struct.xpvio* %34, i64 0, i32 8
  %35 = load %struct._PerlIO*** %xio_ofp, align 8, !tbaa !0
  %tobool37 = icmp eq %struct._PerlIO** %35, null
  br i1 %tobool37, label %cond.false44, label %cond.end46

cond.false44:                                     ; preds = %land.lhs.true32, %land.lhs.true29, %if.then24, %land.lhs.true
  %call45 = tail call %struct._PerlIO** @Perl_PerlIO_stderr() #7
  br label %cond.end46

cond.end46:                                       ; preds = %land.lhs.true32, %cond.false44
  %cond47 = phi %struct._PerlIO** [ %call45, %cond.false44 ], [ %35, %land.lhs.true32 ]
  %call48 = tail call i32 (%struct._PerlIO**, i8*, ...)* @PerlIO_printf(%struct._PerlIO** %cond47, i8* getelementptr inbounds ([17 x i8]* @.str24, i64 0, i64 0)) #7
  tail call void @Perl_my_exit(i32 1) #7
  br label %if.end49

if.end49:                                         ; preds = %if.end20, %cond.end46
  %36 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast50 = ptrtoint %struct.sv** %26 to i64
  %sub.ptr.rhs.cast51 = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.sub52 = sub i64 %sub.ptr.lhs.cast50, %sub.ptr.rhs.cast51
  %sub.ptr.div53 = ashr exact i64 %sub.ptr.sub52, 3
  %37 = load %struct.av** @PL_curstack, align 8, !tbaa !0
  %sv_any54 = getelementptr inbounds %struct.av* %37, i64 0, i32 0
  %38 = load %struct.xpvav** %sv_any54, align 8, !tbaa !0
  %xav_fill55 = getelementptr inbounds %struct.xpvav* %38, i64 0, i32 1
  store i64 %sub.ptr.div53, i64* %xav_fill55, align 8, !tbaa !4
  %si_stack56 = getelementptr inbounds %struct.stackinfo* %28, i64 0, i32 0
  %39 = load %struct.av** %si_stack56, align 8, !tbaa !0
  %sv_any57 = getelementptr inbounds %struct.av* %39, i64 0, i32 0
  %40 = load %struct.xpvav** %sv_any57, align 8, !tbaa !0
  %xav_array58 = getelementptr inbounds %struct.xpvav* %40, i64 0, i32 0
  %41 = load i8** %xav_array58, align 8, !tbaa !0
  %42 = bitcast i8* %41 to %struct.sv**
  store %struct.sv** %42, %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %43 = load %struct.av** %si_stack56, align 8, !tbaa !0
  %sv_any60 = getelementptr inbounds %struct.av* %43, i64 0, i32 0
  %44 = load %struct.xpvav** %sv_any60, align 8, !tbaa !0
  %xav_max61 = getelementptr inbounds %struct.xpvav* %44, i64 0, i32 2
  %45 = load i64* %xav_max61, align 8, !tbaa !4
  %add.ptr62 = getelementptr inbounds %struct.sv** %42, i64 %45
  store %struct.sv** %add.ptr62, %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %46 = load %struct.av** %si_stack56, align 8, !tbaa !0
  %sv_any64 = getelementptr inbounds %struct.av* %46, i64 0, i32 0
  %47 = load %struct.xpvav** %sv_any64, align 8, !tbaa !0
  %xav_fill65 = getelementptr inbounds %struct.xpvav* %47, i64 0, i32 1
  %48 = load i64* %xav_fill65, align 8, !tbaa !4
  %add.ptr66 = getelementptr inbounds %struct.sv** %42, i64 %48
  store %struct.sv** %add.ptr66, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %49 = load %struct.av** %si_stack56, align 8, !tbaa !0
  store %struct.av* %49, %struct.av** @PL_curstack, align 8, !tbaa !0
  store %struct.stackinfo* %28, %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %50 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  %51 = load i32* @PL_tmps_floor, align 4, !tbaa !3
  %cmp68 = icmp sgt i32 %50, %51
  br i1 %cmp68, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.end49
  tail call void @Perl_free_tmps() #7
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.end49
  tail call void @Perl_pop_scope() #7
  ret i32 %retval1.0
}
