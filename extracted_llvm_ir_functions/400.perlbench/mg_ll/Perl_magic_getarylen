define i32 @Perl_magic_getarylen(%struct.sv* %sv, %struct.magic* nocapture %mg) #0 {
entry:
  %mg_obj = getelementptr inbounds %struct.magic* %mg, i64 0, i32 5
  %0 = load %struct.sv** %mg_obj, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %0, i64 0, i32 2
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %1, 32768
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %call = tail call i32 @Perl_mg_size(%struct.sv* %0) #8
  %conv = sext i32 %call to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %sv_any = bitcast %struct.sv* %0 to %struct.xpvav**
  %2 = load %struct.xpvav** %sv_any, align 8, !tbaa !0
  %xav_fill = getelementptr inbounds %struct.xpvav* %2, i64 0, i32 1
  %3 = load i64* %xav_fill, align 8, !tbaa !4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %3, %cond.false ]
  %4 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_arybase = getelementptr inbounds %struct.cop* %4, i64 0, i32 12
  %5 = load i32* %cop_arybase, align 4, !tbaa !3
  %conv3 = sext i32 %5 to i64
  %add = add nsw i64 %conv3, %cond
  tail call void @Perl_sv_setiv(%struct.sv* %sv, i64 %add) #7
  ret i32 0
}
