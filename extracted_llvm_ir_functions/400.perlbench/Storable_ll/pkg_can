define internal fastcc %struct.sv* @pkg_can(%struct.hv* %cache, %struct.hv* %pkg, i8* %method) #1 {
entry:
  %sv_any = getelementptr inbounds %struct.hv* %pkg, i64 0, i32 0
  %0 = load %struct.xpvhv** %sv_any, align 8, !tbaa !0
  %xhv_name = getelementptr inbounds %struct.xpvhv* %0, i64 0, i32 10
  %1 = load i8** %xhv_name, align 8, !tbaa !0
  %call = tail call i64 @strlen(i8* %1) #7
  %conv = trunc i64 %call to i32
  %call3 = tail call %struct.sv** @Perl_hv_fetch(%struct.hv* %cache, i8* %1, i32 %conv, i32 0) #7
  %tobool = icmp eq %struct.sv** %call3, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.sv** %call3, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %2, i64 0, i32 2
  %3 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %3, 118423552
  %tobool4 = icmp eq i32 %and, 0
  %. = select i1 %tobool4, %struct.sv* null, %struct.sv* %2
  br label %return

if.end:                                           ; preds = %entry
  %call.i = tail call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %pkg, i8* %method, i32 0) #7
  %tobool.i = icmp eq %struct.gv* %call.i, null
  br i1 %tobool.i, label %if.else.i, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %if.end
  %sv_flags.i = getelementptr inbounds %struct.gv* %call.i, i64 0, i32 2
  %4 = load i32* %sv_flags.i, align 4, !tbaa !3
  %and.i = and i32 %4, 255
  %cmp.i = icmp eq i32 %and.i, 13
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %land.lhs.true.i
  %sv_any.i = getelementptr inbounds %struct.gv* %call.i, i64 0, i32 0
  %5 = load %struct.xpvgv** %sv_any.i, align 8, !tbaa !0
  %xgv_gp.i = getelementptr inbounds %struct.xpvgv* %5, i64 0, i32 7
  %6 = load %struct.gp** %xgv_gp.i, align 8, !tbaa !0
  %gp_cv.i = getelementptr inbounds %struct.gp* %6, i64 0, i32 7
  %7 = load %struct.cv** %gp_cv.i, align 8, !tbaa !0
  %8 = bitcast %struct.cv* %7 to %struct.sv*
  %call1.i = tail call %struct.sv* @Perl_newRV(%struct.sv* %8) #7
  br label %pkg_fetchmeth.exit

if.else.i:                                        ; preds = %land.lhs.true.i, %if.end
  %call2.i = tail call %struct.sv* @Perl_newSVsv(%struct.sv* @PL_sv_undef) #7
  br label %pkg_fetchmeth.exit

pkg_fetchmeth.exit:                               ; preds = %if.then.i, %if.else.i
  %sv.0.i = phi %struct.sv* [ %call1.i, %if.then.i ], [ %call2.i, %if.else.i ]
  %9 = load %struct.xpvhv** %sv_any, align 8, !tbaa !0
  %xhv_name.i = getelementptr inbounds %struct.xpvhv* %9, i64 0, i32 10
  %10 = load i8** %xhv_name.i, align 8, !tbaa !0
  %call6.i = tail call i64 @strlen(i8* %10) #7
  %conv.i = trunc i64 %call6.i to i32
  %call7.i = tail call %struct.sv** @Perl_hv_store(%struct.hv* %cache, i8* %10, i32 %conv.i, %struct.sv* %sv.0.i, i32 0) #7
  %sv_flags8.i = getelementptr inbounds %struct.sv* %sv.0.i, i64 0, i32 2
  %11 = load i32* %sv_flags8.i, align 4, !tbaa !3
  %and9.i = and i32 %11, 118423552
  %tobool10.i = icmp ne i32 %and9.i, 0
  %cond.i = select i1 %tobool10.i, %struct.sv* %sv.0.i, %struct.sv* null
  br label %return

return:                                           ; preds = %if.then, %pkg_fetchmeth.exit
  %retval.0 = phi %struct.sv* [ %cond.i, %pkg_fetchmeth.exit ], [ %., %if.then ]
  ret %struct.sv* %retval.0
}
