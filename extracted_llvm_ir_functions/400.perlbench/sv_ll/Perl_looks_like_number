define i32 @Perl_looks_like_number(%struct.sv* %sv) #0 {
entry:
  %len = alloca i64, align 8
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 262144
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %1 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %1 to i8**
  %2 = load i8** %xpv_pv, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %1, i64 8
  %3 = bitcast i8* %xpv_cur to i64*
  %4 = load i64* %3, align 8, !tbaa !5
  store i64 %4, i64* %len, align 8, !tbaa !5
  br label %if.end15

if.else:                                          ; preds = %entry
  %and3 = and i32 %0, 67108864
  %tobool4 = icmp eq i32 %and3, 0
  br i1 %tobool4, label %if.else12, label %cond.false

cond.false:                                       ; preds = %if.else
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %sv, i64* %len, i32 2) #7
  %.pre = load i64* %len, align 8, !tbaa !5
  br label %if.end15

if.else12:                                        ; preds = %if.else
  %and14 = and i32 %0, 50528256
  br label %return

if.end15:                                         ; preds = %cond.false, %if.then
  %5 = phi i64 [ %4, %if.then ], [ %.pre, %cond.false ]
  %sbegin.0 = phi i8* [ %2, %if.then ], [ %call, %cond.false ]
  %call16 = call i32 @Perl_grok_number(i8* %sbegin.0, i64 %5, i64* null) #8
  br label %return

return:                                           ; preds = %if.end15, %if.else12
  %retval.0 = phi i32 [ %call16, %if.end15 ], [ %and14, %if.else12 ]
  ret i32 %retval.0
}
