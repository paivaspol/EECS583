define void @Perl_sv_setiv(%struct.sv* %sv, i64 %i) #0 {
entry:
  %sv_flags = getelementptr inbounds %struct.sv* %sv, i64 0, i32 2
  %0 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %0, 9961472
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @Perl_sv_force_normal_flags(%struct.sv* %sv, i32 0) #8
  %.pre = load i32* %sv_flags, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %1 = phi i32 [ %0, %entry ], [ %.pre, %if.then ]
  %and2 = and i32 %1, 255
  switch i32 %and2, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb3
    i32 3, label %sw.bb5
    i32 4, label %sw.bb5
    i32 13, label %sw.bb7
    i32 10, label %sw.bb7
    i32 11, label %sw.bb7
    i32 12, label %sw.bb7
    i32 14, label %sw.bb7
    i32 15, label %sw.bb7
  ]

sw.bb:                                            ; preds = %if.end
  %call = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 1) #7
  br label %sw.epilog

sw.bb3:                                           ; preds = %if.end
  %call4 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 6) #7
  br label %sw.epilog

sw.bb5:                                           ; preds = %if.end, %if.end
  %call6 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %sv, i32 5) #7
  br label %sw.epilog

sw.bb7:                                           ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %call8 = tail call i8* @Perl_sv_reftype(%struct.sv* %sv, i32 0) #7
  %2 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_type = getelementptr inbounds %struct.op* %2, i64 0, i32 4
  %3 = load i16* %op_type, align 2, !tbaa !4
  %cmp = icmp eq i16 %3, 351
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb7
  %call10 = tail call i8* @Perl_custom_op_desc(%struct.op* %2) #8
  br label %cond.end

cond.false:                                       ; preds = %sw.bb7
  %idxprom = zext i16 %3 to i64
  %arrayidx = getelementptr inbounds [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %4 = load i8** %arrayidx, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call10, %cond.true ], [ %4, %cond.false ]
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([33 x i8]* @.str4, i64 0, i64 0), i8* %call8, i8* %cond) #8
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end, %if.end, %sw.bb5, %sw.bb3, %sw.bb
  %5 = load i32* %sv_flags, align 4, !tbaa !3
  %and13 = and i32 %5, 1223753727
  store i32 %and13, i32* %sv_flags, align 4, !tbaa !3
  %and15 = and i32 %5, 2097152
  %tobool16 = icmp eq i32 %and15, 0
  br i1 %tobool16, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %sw.epilog
  %call17 = tail call i32 @Perl_sv_backoff(%struct.sv* %sv) #7
  %.pre42 = load i32* %sv_flags, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %sw.epilog, %land.rhs
  %6 = phi i32 [ %and13, %sw.epilog ], [ %.pre42, %land.rhs ]
  %or = or i32 %6, 16842752
  store i32 %or, i32* %sv_flags, align 4, !tbaa !3
  %sv_any = getelementptr inbounds %struct.sv* %sv, i64 0, i32 0
  %7 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %7, i64 24
  %8 = bitcast i8* %xiv_iv to i64*
  store i64 %i, i64* %8, align 8, !tbaa !5
  %9 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool20 = icmp ne i8 %9, 0
  %10 = load i8* @PL_tainted, align 1, !tbaa !1
  %tobool22 = icmp ne i8 %10, 0
  %or.cond = and i1 %tobool20, %tobool22
  br i1 %or.cond, label %if.then25, label %if.end28

if.then25:                                        ; preds = %land.end
  tail call void @Perl_sv_magic(%struct.sv* %sv, %struct.sv* null, i32 116, i8* null, i32 0) #8
  br label %if.end28

if.end28:                                         ; preds = %if.then25, %land.end
  ret void
}
