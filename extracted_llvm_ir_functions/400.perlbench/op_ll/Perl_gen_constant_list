define %struct.op* @Perl_gen_constant_list(%struct.op* %o) #0 {
entry:
  %0 = load i32* @PL_tmps_floor, align 4, !tbaa !0
  %call = tail call %struct.op* @Perl_list(%struct.op* %o) #8
  %1 = load i32* @PL_error_count, align 4, !tbaa !0
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %entry
  %op_next = getelementptr inbounds %struct.op* %o, i64 0, i32 0
  %2 = load %struct.op** %op_next, align 8, !tbaa !3
  %tobool1 = icmp eq %struct.op* %2, null
  br i1 %tobool1, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.end
  %call3 = tail call %struct.op* @Perl_linklist(%struct.op* %o) #8
  br label %cond.end

cond.end:                                         ; preds = %if.end, %cond.false
  %cond = phi %struct.op* [ %call3, %cond.false ], [ %2, %if.end ]
  store %struct.op* %cond, %struct.op** @PL_op, align 8, !tbaa !3
  store %struct.op* null, %struct.op** %op_next, align 8, !tbaa !3
  %3 = load void (%struct.op*)** @PL_peepp, align 8, !tbaa !3
  tail call void %3(%struct.op* %cond) #7
  %call5 = tail call %struct.op* @Perl_pp_pushmark() #7
  %4 = load i32 ()** @PL_runops, align 8, !tbaa !3
  %call6 = tail call i32 %4() #7
  store %struct.op* %cond, %struct.op** @PL_op, align 8, !tbaa !3
  %call7 = tail call %struct.op* @Perl_pp_anonlist() #7
  store i32 %0, i32* @PL_tmps_floor, align 4, !tbaa !0
  %op_type = getelementptr inbounds %struct.op* %o, i64 0, i32 4
  store i16 125, i16* %op_type, align 2, !tbaa !4
  %5 = load %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 125), align 8, !tbaa !3
  %op_ppaddr = getelementptr inbounds %struct.op* %o, i64 0, i32 2
  store %struct.op* ()* %5, %struct.op* ()** %op_ppaddr, align 8, !tbaa !3
  %op_flags = getelementptr inbounds %struct.op* %o, i64 0, i32 6
  %6 = load i8* %op_flags, align 1, !tbaa !1
  %and = and i8 %6, -25
  %or = or i8 %and, 8
  store i8 %or, i8* %op_flags, align 1, !tbaa !1
  %op_seq = getelementptr inbounds %struct.op* %o, i64 0, i32 5
  store i16 0, i16* %op_seq, align 2, !tbaa !4
  %7 = getelementptr inbounds %struct.op* %o, i64 1, i32 0
  %8 = load %struct.op** %7, align 8, !tbaa !3
  %9 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !3
  %incdec.ptr = getelementptr inbounds %struct.sv** %9, i64 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8, !tbaa !3
  %10 = load %struct.sv** %9, align 8, !tbaa !3
  store %struct.sv* %10, %struct.sv** @PL_Sv, align 8, !tbaa !3
  %tobool12 = icmp eq %struct.sv* %10, null
  br i1 %tobool12, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %cond.end
  %sv_refcnt = getelementptr inbounds %struct.sv* %10, i64 0, i32 1
  %11 = load i32* %sv_refcnt, align 4, !tbaa !0
  %inc = add i32 %11, 1
  store i32 %inc, i32* %sv_refcnt, align 4, !tbaa !0
  br label %land.end

land.end:                                         ; preds = %cond.end, %land.rhs
  %call14 = tail call %struct.op* @Perl_newSVOP(i32 5, i32 0, %struct.sv* %10) #8
  store %struct.op* %call14, %struct.op** %7, align 8, !tbaa !3
  tail call void @Perl_op_free(%struct.op* %8) #8
  %call16 = tail call %struct.op* @Perl_linklist(%struct.op* %o) #8
  %call17 = tail call %struct.op* @Perl_list(%struct.op* %o) #8
  br label %return

return:                                           ; preds = %entry, %land.end
  %retval.0 = phi %struct.op* [ %call17, %land.end ], [ %o, %entry ]
  ret %struct.op* %retval.0
}
