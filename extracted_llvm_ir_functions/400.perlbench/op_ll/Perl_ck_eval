define %struct.op* @Perl_ck_eval(%struct.op* %o) #0 {
entry:
  %0 = load i32* @PL_hints, align 4, !tbaa !0
  %or = or i32 %0, 256
  store i32 %or, i32* @PL_hints, align 4, !tbaa !0
  %op_flags = getelementptr inbounds %struct.op* %o, i64 0, i32 6
  %1 = load i8* %op_flags, align 1, !tbaa !1
  %and = and i8 %1, 4
  %tobool = icmp eq i8 %and, 0
  br i1 %tobool, label %if.else22, label %if.then

if.then:                                          ; preds = %entry
  %2 = getelementptr inbounds %struct.op* %o, i64 1, i32 0
  %3 = load %struct.op** %2, align 8, !tbaa !3
  %tobool1 = icmp eq %struct.op* %3, null
  br i1 %tobool1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %and5 = and i8 %1, -5
  store i8 %and5, i8* %op_flags, align 1, !tbaa !1
  tail call void @Perl_op_null(%struct.op* %o) #8
  br label %if.end25

if.else:                                          ; preds = %if.then
  %4 = getelementptr inbounds %struct.op* %3, i64 0, i32 4
  %5 = load i16* %4, align 2, !tbaa !4
  switch i16 %5, label %if.else19 [
    i16 173, label %if.then13
    i16 1, label %if.then13
  ]

if.then13:                                        ; preds = %if.else, %if.else
  store %struct.op* null, %struct.op** %2, align 8, !tbaa !3
  tail call void @Perl_op_free(%struct.op* %o) #8
  %call = tail call i8* @Perl_safesysmalloc(i64 56) #7
  tail call void @llvm.memset.p0i8.i64(i8* %call, i8 0, i64 56, i32 1, i1 false)
  %op_type15 = getelementptr inbounds i8* %call, i64 32
  %6 = bitcast i8* %op_type15 to i16*
  store i16 313, i16* %6, align 2, !tbaa !4
  %7 = load %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 313), align 8, !tbaa !3
  %op_ppaddr = getelementptr inbounds i8* %call, i64 16
  %8 = bitcast i8* %op_ppaddr to %struct.op* ()**
  store %struct.op* ()* %7, %struct.op* ()** %8, align 8, !tbaa !3
  %9 = getelementptr inbounds i8* %call, i64 37
  store i8 0, i8* %9, align 1, !tbaa !1
  %10 = bitcast i8* %call to %struct.op*
  %op_next = bitcast i8* %call to %struct.op**
  store %struct.op* %10, %struct.op** %op_next, align 8, !tbaa !3
  %call16 = tail call %struct.op* @Perl_prepend_elem(i32 173, %struct.op* %10, %struct.op* %3) #8
  %op_type17 = getelementptr inbounds %struct.op* %call16, i64 0, i32 4
  store i16 314, i16* %op_type17, align 2, !tbaa !4
  %11 = load %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 314), align 8, !tbaa !3
  %op_ppaddr18 = getelementptr inbounds %struct.op* %call16, i64 0, i32 2
  store %struct.op* ()* %11, %struct.op* ()** %op_ppaddr18, align 8, !tbaa !3
  %op_other = getelementptr inbounds i8* %call, i64 48
  %12 = bitcast i8* %op_other to %struct.op**
  store %struct.op* %call16, %struct.op** %12, align 8, !tbaa !3
  br label %return

if.else19:                                        ; preds = %if.else
  %call20 = tail call %struct.op* @Perl_scalar(%struct.op* %3) #8
  br label %if.end25

if.else22:                                        ; preds = %entry
  tail call void @Perl_op_free(%struct.op* %o) #8
  %13 = load %struct.gv** @PL_defgv, align 8, !tbaa !3
  %14 = bitcast %struct.gv* %13 to %struct.sv*
  store %struct.sv* %14, %struct.sv** @PL_Sv, align 8, !tbaa !3
  %tobool.i = icmp eq %struct.gv* %13, null
  br i1 %tobool.i, label %Perl_newGVOP.exit, label %land.rhs.i

land.rhs.i:                                       ; preds = %if.else22
  %15 = getelementptr inbounds %struct.gv* %13, i64 0, i32 1
  %16 = load i32* %15, align 4, !tbaa !0
  %inc.i = add i32 %16, 1
  store i32 %inc.i, i32* %15, align 4, !tbaa !0
  br label %Perl_newGVOP.exit

Perl_newGVOP.exit:                                ; preds = %if.else22, %land.rhs.i
  %call.i49 = tail call %struct.op* @Perl_newSVOP(i32 7, i32 0, %struct.sv* %14) #7
  %call1.i = tail call %struct.op* @Perl_newSVREF(%struct.op* %call.i49) #7
  %call24 = tail call %struct.op* @Perl_newUNOP(i32 311, i32 0, %struct.op* %call1.i) #8
  br label %if.end25

if.end25:                                         ; preds = %if.then2, %if.else19, %Perl_newGVOP.exit
  %o.addr.0 = phi %struct.op* [ %o, %if.else19 ], [ %o, %if.then2 ], [ %call24, %Perl_newGVOP.exit ]
  %17 = load i32* @PL_hints, align 4, !tbaa !0
  %conv26 = zext i32 %17 to i64
  %op_targ = getelementptr inbounds %struct.op* %o.addr.0, i64 0, i32 3
  store i64 %conv26, i64* %op_targ, align 8, !tbaa !5
  br label %return

return:                                           ; preds = %if.end25, %if.then13
  %retval.0 = phi %struct.op* [ %call16, %if.then13 ], [ %o.addr.0, %if.end25 ]
  ret %struct.op* %retval.0
}
