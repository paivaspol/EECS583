define void @Perl_newFORM(i32 %floor, %struct.op* %o, %struct.op* %block) #0 {
entry:
  %n_a = alloca i64, align 8
  %tobool = icmp eq %struct.op* %o, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %op_sv = getelementptr inbounds %struct.op* %o, i64 1
  %0 = bitcast %struct.op* %op_sv to %struct.sv**
  %1 = load %struct.sv** %0, align 8, !tbaa !3
  store %struct.sv* %1, %struct.sv** @PL_Sv, align 8, !tbaa !3
  %sv_flags = getelementptr inbounds %struct.sv* %1, i64 0, i32 2
  %2 = load i32* %sv_flags, align 4, !tbaa !0
  %and = and i32 %2, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then
  %sv_any = getelementptr inbounds %struct.sv* %1, i64 0, i32 0
  %3 = load i8** %sv_any, align 8, !tbaa !3
  %xpv_cur = getelementptr inbounds i8* %3, i64 8
  %4 = bitcast i8* %xpv_cur to i64*
  %5 = load i64* %4, align 8, !tbaa !5
  store i64 %5, i64* %n_a, align 8, !tbaa !5
  %xpv_pv = bitcast i8* %3 to i8**
  %6 = load i8** %xpv_pv, align 8, !tbaa !3
  br label %if.end

cond.false:                                       ; preds = %if.then
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %1, i64* %n_a, i32 2) #7
  br label %if.end

if.end:                                           ; preds = %entry, %cond.true, %cond.false
  %name.0 = phi i8* [ %6, %cond.true ], [ %call, %cond.false ], [ getelementptr inbounds ([7 x i8]* @.str80, i64 0, i64 0), %entry ]
  %call2 = call %struct.gv* @Perl_gv_fetchpv(i8* %name.0, i32 1, i32 14) #7
  %sv_any3 = getelementptr inbounds %struct.gv* %call2, i64 0, i32 0
  %7 = load %struct.xpvgv** %sv_any3, align 8, !tbaa !3
  %xgv_flags = getelementptr inbounds %struct.xpvgv* %7, i64 0, i32 11
  %8 = load i8* %xgv_flags, align 1, !tbaa !1
  %or = or i8 %8, 2
  store i8 %or, i8* %xgv_flags, align 1, !tbaa !1
  %9 = load %struct.xpvgv** %sv_any3, align 8, !tbaa !3
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %9, i64 0, i32 7
  %10 = load %struct.gp** %xgv_gp, align 8, !tbaa !3
  %gp_form = getelementptr inbounds %struct.gp* %10, i64 0, i32 3
  %11 = load %struct.cv** %gp_form, align 8, !tbaa !3
  %tobool6 = icmp eq %struct.cv* %11, null
  br i1 %tobool6, label %if.end39, label %if.then7

if.then7:                                         ; preds = %if.end
  %12 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_warnings = getelementptr inbounds %struct.cop* %12, i64 0, i32 14
  %13 = load %struct.sv** %cop_warnings, align 8, !tbaa !3
  %cmp8 = icmp eq %struct.sv* %13, null
  br i1 %cmp8, label %lor.lhs.false23, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then7
  %14 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_warnings10 = getelementptr inbounds %struct.cop* %14, i64 0, i32 14
  %15 = load %struct.sv** %cop_warnings10, align 8, !tbaa !3
  %cmp11 = icmp eq %struct.sv* %15, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp11, label %lor.lhs.false23, label %land.lhs.true13

land.lhs.true13:                                  ; preds = %land.lhs.true
  %16 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_warnings14 = getelementptr inbounds %struct.cop* %16, i64 0, i32 14
  %17 = load %struct.sv** %cop_warnings14, align 8, !tbaa !3
  %cmp15 = icmp eq %struct.sv* %17, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp15, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true13
  %18 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_warnings17 = getelementptr inbounds %struct.cop* %18, i64 0, i32 14
  %19 = load %struct.sv** %cop_warnings17, align 8, !tbaa !3
  %sv_any18 = getelementptr inbounds %struct.sv* %19, i64 0, i32 0
  %20 = load i8** %sv_any18, align 8, !tbaa !3
  %xpv_pv19 = bitcast i8* %20 to i8**
  %21 = load i8** %xpv_pv19, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8* %21, i64 4
  %22 = load i8* %arrayidx, align 1, !tbaa !1
  %and21 = and i8 %22, 64
  %tobool22 = icmp eq i8 %and21, 0
  br i1 %tobool22, label %lor.lhs.false23, label %if.then31

lor.lhs.false23:                                  ; preds = %lor.lhs.false, %land.lhs.true, %if.then7
  %23 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_warnings24 = getelementptr inbounds %struct.cop* %23, i64 0, i32 14
  %24 = load %struct.sv** %cop_warnings24, align 8, !tbaa !3
  %cmp25 = icmp eq %struct.sv* %24, null
  br i1 %cmp25, label %land.lhs.true27, label %if.end38

land.lhs.true27:                                  ; preds = %lor.lhs.false23
  %25 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and29 = and i8 %25, 1
  %tobool30 = icmp eq i8 %and29, 0
  br i1 %tobool30, label %if.end38, label %if.then31

if.then31:                                        ; preds = %lor.lhs.false, %land.lhs.true27, %land.lhs.true13
  %26 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_line = getelementptr inbounds %struct.cop* %26, i64 0, i32 13
  %27 = load i32* %cop_line, align 4, !tbaa !0
  %28 = load i32* @PL_copline, align 4, !tbaa !0
  %cmp32 = icmp eq i32 %28, -1
  br i1 %cmp32, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.then31
  %29 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_line35 = getelementptr inbounds %struct.cop* %29, i64 0, i32 13
  store i32 %28, i32* %cop_line35, align 4, !tbaa !0
  br label %if.end36

if.end36:                                         ; preds = %if.then31, %if.then34
  call void (i32, i8*, ...)* @Perl_warner(i32 19, i8* getelementptr inbounds ([20 x i8]* @.str81, i64 0, i64 0), i8* %name.0) #7
  %30 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_line37 = getelementptr inbounds %struct.cop* %30, i64 0, i32 13
  store i32 %27, i32* %cop_line37, align 4, !tbaa !0
  br label %if.end38

if.end38:                                         ; preds = %land.lhs.true27, %if.end36, %lor.lhs.false23
  %31 = bitcast %struct.cv* %11 to %struct.sv*
  call void @Perl_sv_free(%struct.sv* %31) #7
  %.pre = load %struct.xpvgv** %sv_any3, align 8, !tbaa !3
  %xgv_gp41.phi.trans.insert = getelementptr inbounds %struct.xpvgv* %.pre, i64 0, i32 7
  %.pre120 = load %struct.gp** %xgv_gp41.phi.trans.insert, align 8, !tbaa !3
  br label %if.end39

if.end39:                                         ; preds = %if.end, %if.end38
  %32 = phi %struct.gp* [ %10, %if.end ], [ %.pre120, %if.end38 ]
  %33 = load %struct.cv** @PL_compcv, align 8, !tbaa !3
  %gp_form42 = getelementptr inbounds %struct.gp* %32, i64 0, i32 3
  store %struct.cv* %33, %struct.cv** %gp_form42, align 8, !tbaa !3
  %sv_any43 = getelementptr inbounds %struct.cv* %33, i64 0, i32 0
  %34 = load %struct.xpvcv** %sv_any43, align 8, !tbaa !3
  %xcv_gv = getelementptr inbounds %struct.xpvcv* %34, i64 0, i32 12
  store %struct.gv* %call2, %struct.gv** %xcv_gv, align 8, !tbaa !3
  %35 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_filegv = getelementptr inbounds %struct.cop* %35, i64 0, i32 10
  %36 = load %struct.gv** %cop_filegv, align 8, !tbaa !3
  %tobool44 = icmp eq %struct.gv* %36, null
  br i1 %tobool44, label %cond.end65, label %cond.true45

cond.true45:                                      ; preds = %if.end39
  %37 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_filegv46 = getelementptr inbounds %struct.cop* %37, i64 0, i32 10
  %38 = load %struct.gv** %cop_filegv46, align 8, !tbaa !3
  %sv_any47 = getelementptr inbounds %struct.gv* %38, i64 0, i32 0
  %39 = load %struct.xpvgv** %sv_any47, align 8, !tbaa !3
  %xgv_gp48 = getelementptr inbounds %struct.xpvgv* %39, i64 0, i32 7
  %40 = load %struct.gp** %xgv_gp48, align 8, !tbaa !3
  %gp_sv = getelementptr inbounds %struct.gp* %40, i64 0, i32 0
  %41 = load %struct.sv** %gp_sv, align 8, !tbaa !3
  %tobool49 = icmp eq %struct.sv* %41, null
  br i1 %tobool49, label %cond.end65, label %cond.true51

cond.true51:                                      ; preds = %cond.true45
  %42 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %43 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_filegv55 = getelementptr inbounds %struct.cop* %43, i64 0, i32 10
  %44 = load %struct.gv** %cop_filegv55, align 8, !tbaa !3
  %sv_any56 = getelementptr inbounds %struct.gv* %44, i64 0, i32 0
  %45 = load %struct.xpvgv** %sv_any56, align 8, !tbaa !3
  %xgv_gp57 = getelementptr inbounds %struct.xpvgv* %45, i64 0, i32 7
  %46 = load %struct.gp** %xgv_gp57, align 8, !tbaa !3
  %gp_sv58 = getelementptr inbounds %struct.gp* %46, i64 0, i32 0
  %47 = load %struct.sv** %gp_sv58, align 8, !tbaa !3
  %sv_any62 = getelementptr inbounds %struct.sv* %47, i64 0, i32 0
  %48 = load i8** %sv_any62, align 8, !tbaa !3
  %xpv_pv63 = bitcast i8* %48 to i8**
  %49 = load i8** %xpv_pv63, align 8, !tbaa !3
  br label %cond.end65

cond.end65:                                       ; preds = %cond.true45, %if.end39, %cond.true51
  %cond66 = phi i8* [ %49, %cond.true51 ], [ null, %if.end39 ], [ null, %cond.true45 ]
  %50 = load %struct.xpvcv** %sv_any43, align 8, !tbaa !3
  %xcv_file = getelementptr inbounds %struct.xpvcv* %50, i64 0, i32 13
  store i8* %cond66, i8** %xcv_file, align 8, !tbaa !3
  call void @Perl_pad_tidy(i32 2) #7
  %call68 = call %struct.op* @Perl_scalarseq(%struct.op* %block) #8
  %call69 = call %struct.op* @Perl_newUNOP(i32 207, i32 0, %struct.op* %call68) #8
  %51 = load %struct.xpvcv** %sv_any43, align 8, !tbaa !3
  %xcv_root = getelementptr inbounds %struct.xpvcv* %51, i64 0, i32 9
  store %struct.op* %call69, %struct.op** %xcv_root, align 8, !tbaa !3
  %52 = load %struct.xpvcv** %sv_any43, align 8, !tbaa !3
  %xcv_root72 = getelementptr inbounds %struct.xpvcv* %52, i64 0, i32 9
  %53 = load %struct.op** %xcv_root72, align 8, !tbaa !3
  %op_private = getelementptr inbounds %struct.op* %53, i64 0, i32 7
  %54 = load i8* %op_private, align 1, !tbaa !1
  %or74 = or i8 %54, 64
  store i8 %or74, i8* %op_private, align 1, !tbaa !1
  %55 = load %struct.xpvcv** %sv_any43, align 8, !tbaa !3
  %xcv_root77 = getelementptr inbounds %struct.xpvcv* %55, i64 0, i32 9
  %56 = load %struct.op** %xcv_root77, align 8, !tbaa !3
  %op_targ = getelementptr inbounds %struct.op* %56, i64 0, i32 3
  store i64 1, i64* %op_targ, align 8, !tbaa !5
  %op_next = getelementptr inbounds %struct.op* %56, i64 0, i32 0
  %57 = load %struct.op** %op_next, align 8, !tbaa !3
  %tobool80 = icmp eq %struct.op* %57, null
  br i1 %tobool80, label %cond.false85, label %cond.end89

cond.false85:                                     ; preds = %cond.end65
  %call88 = call %struct.op* @Perl_linklist(%struct.op* %56) #8
  %.pre121 = load %struct.xpvcv** %sv_any43, align 8, !tbaa !3
  br label %cond.end89

cond.end89:                                       ; preds = %cond.end65, %cond.false85
  %58 = phi %struct.xpvcv* [ %.pre121, %cond.false85 ], [ %55, %cond.end65 ]
  %cond90 = phi %struct.op* [ %call88, %cond.false85 ], [ %57, %cond.end65 ]
  %xcv_start = getelementptr inbounds %struct.xpvcv* %58, i64 0, i32 8
  store %struct.op* %cond90, %struct.op** %xcv_start, align 8, !tbaa !3
  %59 = load %struct.xpvcv** %sv_any43, align 8, !tbaa !3
  %xcv_root93 = getelementptr inbounds %struct.xpvcv* %59, i64 0, i32 9
  %60 = load %struct.op** %xcv_root93, align 8, !tbaa !3
  %op_next94 = getelementptr inbounds %struct.op* %60, i64 0, i32 0
  store %struct.op* null, %struct.op** %op_next94, align 8, !tbaa !3
  %61 = load void (%struct.op*)** @PL_peepp, align 8, !tbaa !3
  %62 = load %struct.xpvcv** %sv_any43, align 8, !tbaa !3
  %xcv_start96 = getelementptr inbounds %struct.xpvcv* %62, i64 0, i32 8
  %63 = load %struct.op** %xcv_start96, align 8, !tbaa !3
  call void %61(%struct.op* %63) #7
  call void @Perl_op_free(%struct.op* %o) #8
  store i32 -1, i32* @PL_copline, align 4, !tbaa !0
  %64 = load i32* @PL_savestack_ix, align 4, !tbaa !0
  %cmp97 = icmp sgt i32 %64, %floor
  br i1 %cmp97, label %if.then99, label %if.end100

if.then99:                                        ; preds = %cond.end89
  call void @Perl_leave_scope(i32 %floor) #7
  br label %if.end100

if.end100:                                        ; preds = %if.then99, %cond.end89
  ret void
}
