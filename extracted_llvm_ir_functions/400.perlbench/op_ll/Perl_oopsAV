define %struct.op* @Perl_oopsAV(%struct.op* %o) #0 {
entry:
  %op_type = getelementptr inbounds %struct.op* %o, i64 0, i32 4
  %0 = load i16* %op_type, align 2, !tbaa !4
  %conv = zext i16 %0 to i32
  switch i32 %conv, label %sw.default [
    i32 9, label %sw.bb
    i32 15, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  store i16 10, i16* %op_type, align 2, !tbaa !4
  %1 = load %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 10), align 8, !tbaa !3
  %op_ppaddr = getelementptr inbounds %struct.op* %o, i64 0, i32 2
  store %struct.op* ()* %1, %struct.op* ()** %op_ppaddr, align 8, !tbaa !3
  %call = tail call %struct.op* @Perl_ref(%struct.op* %o, i32 125) #8
  br label %return

sw.bb2:                                           ; preds = %entry
  store i16 125, i16* %op_type, align 2, !tbaa !4
  %2 = load %struct.op* ()** getelementptr inbounds ([0 x %struct.op* ()*]* @PL_ppaddr, i64 0, i64 125), align 8, !tbaa !3
  %op_ppaddr4 = getelementptr inbounds %struct.op* %o, i64 0, i32 2
  store %struct.op* ()* %2, %struct.op* ()** %op_ppaddr4, align 8, !tbaa !3
  %call5 = tail call %struct.op* @Perl_ref(%struct.op* %o, i32 125) #8
  br label %return

sw.default:                                       ; preds = %entry
  %3 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_warnings = getelementptr inbounds %struct.cop* %3, i64 0, i32 14
  %4 = load %struct.sv** %cop_warnings, align 8, !tbaa !3
  %cmp = icmp eq %struct.sv* %4, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.default
  %5 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_warnings7 = getelementptr inbounds %struct.cop* %5, i64 0, i32 14
  %6 = load %struct.sv** %cop_warnings7, align 8, !tbaa !3
  %cmp8 = icmp eq %struct.sv* %6, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp8, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %7 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_warnings11 = getelementptr inbounds %struct.cop* %7, i64 0, i32 14
  %8 = load %struct.sv** %cop_warnings11, align 8, !tbaa !3
  %cmp12 = icmp eq %struct.sv* %8, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp12, label %return, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false10
  %9 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !3
  %cop_warnings14 = getelementptr inbounds %struct.cop* %9, i64 0, i32 14
  %10 = load %struct.sv** %cop_warnings14, align 8, !tbaa !3
  %sv_any = getelementptr inbounds %struct.sv* %10, i64 0, i32 0
  %11 = load i8** %sv_any, align 8, !tbaa !3
  %xpv_pv = bitcast i8* %11 to i8**
  %12 = load i8** %xpv_pv, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8* %12, i64 6
  %13 = load i8* %arrayidx, align 1, !tbaa !1
  %and = and i8 %13, 1
  %tobool = icmp eq i8 %and, 0
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %sw.default
  tail call void (i32, i8*, ...)* @Perl_warner(i32 24, i8* getelementptr inbounds ([13 x i8]* @.str82, i64 0, i64 0)) #7
  br label %return

return:                                           ; preds = %sw.bb2, %if.then, %lor.lhs.false10, %land.lhs.true, %sw.bb
  %retval.0 = phi %struct.op* [ %call, %sw.bb ], [ %o, %land.lhs.true ], [ %o, %lor.lhs.false10 ], [ %o, %if.then ], [ %o, %sw.bb2 ]
  ret %struct.op* %retval.0
}
