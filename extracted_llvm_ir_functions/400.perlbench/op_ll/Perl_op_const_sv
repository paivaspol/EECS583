define %struct.sv* @Perl_op_const_sv(%struct.op* %o, %struct.cv* %cv) #0 {
entry:
  %tobool = icmp eq %struct.op* %o, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %op_type = getelementptr inbounds %struct.op* %o, i64 0, i32 4
  %0 = load i16* %op_type, align 2, !tbaa !4
  %cmp = icmp eq i16 %0, 173
  br i1 %cmp, label %land.lhs.true, label %for.body.lr.ph

land.lhs.true:                                    ; preds = %if.end
  %1 = getelementptr inbounds %struct.op* %o, i64 1, i32 0
  %2 = load %struct.op** %1, align 8, !tbaa !3
  %tobool2 = icmp eq %struct.op* %2, null
  br i1 %tobool2, label %for.cond.preheader, label %if.then3

if.then3:                                         ; preds = %land.lhs.true
  %op_sibling = getelementptr inbounds %struct.op* %2, i64 0, i32 1
  %3 = load %struct.op** %op_sibling, align 8, !tbaa !3
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then3, %land.lhs.true
  %o.addr.0.ph = phi %struct.op* [ %o, %land.lhs.true ], [ %3, %if.then3 ]
  %tobool6133 = icmp eq %struct.op* %o.addr.0.ph, null
  br i1 %tobool6133, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end, %for.cond.preheader
  %o.addr.0.ph142 = phi %struct.op* [ %o.addr.0.ph, %for.cond.preheader ], [ %o, %if.end ]
  %tobool63 = icmp eq %struct.cv* %cv, null
  %sv_any = getelementptr inbounds %struct.cv* %cv, i64 0, i32 0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %sv.0135 = phi %struct.sv* [ null, %for.body.lr.ph ], [ %sv.2, %for.inc ]
  %o.addr.0134 = phi %struct.op* [ %o.addr.0.ph142, %for.body.lr.ph ], [ %22, %for.inc ]
  %op_type7 = getelementptr inbounds %struct.op* %o.addr.0134, i64 0, i32 4
  %4 = load i16* %op_type7, align 2, !tbaa !4
  %tobool8 = icmp ne %struct.sv* %sv.0135, null
  %op_next = getelementptr inbounds %struct.op* %o.addr.0134, i64 0, i32 0
  %5 = load %struct.op** %op_next, align 8, !tbaa !3
  %cmp10 = icmp eq %struct.op* %5, %o.addr.0134
  %or.cond144 = and i1 %tobool8, %cmp10
  br i1 %or.cond144, label %return, label %if.end13

if.end13:                                         ; preds = %for.body
  %op_next14 = getelementptr inbounds %struct.op* %o.addr.0134, i64 0, i32 0
  %cmp15 = icmp eq %struct.op* %5, %o.addr.0134
  br i1 %cmp15, label %if.end35, label %if.then17

if.then17:                                        ; preds = %if.end13
  switch i16 %4, label %if.end44 [
    i16 174, label %for.inc
    i16 0, label %for.inc
    i16 3, label %for.inc
    i16 175, label %for.inc
    i16 167, label %for.end
    i16 184, label %for.end
  ]

if.end35:                                         ; preds = %if.end13
  switch i16 %4, label %if.end44 [
    i16 167, label %for.end
    i16 184, label %for.end
  ]

if.end44:                                         ; preds = %if.then17, %if.end35
  br i1 %tobool8, label %return, label %if.end47

if.end47:                                         ; preds = %if.end44
  %cmp49 = icmp eq i16 %4, 5
  br i1 %cmp49, label %land.lhs.true51, label %if.else

land.lhs.true51:                                  ; preds = %if.end47
  %op_sv = getelementptr inbounds %struct.op* %o.addr.0134, i64 1
  %6 = bitcast %struct.op* %op_sv to %struct.sv**
  %7 = load %struct.sv** %6, align 8, !tbaa !3
  %tobool52 = icmp eq %struct.sv* %7, null
  br i1 %tobool52, label %if.else, label %for.inc

if.else:                                          ; preds = %land.lhs.true51, %if.end47
  %cmp56 = icmp eq i16 %4, 9
  %brmerge = or i1 %cmp56, %cmp49
  %brmerge.not = xor i1 %brmerge, true
  %or.cond = or i1 %tobool63, %brmerge.not
  br i1 %or.cond, label %return, label %if.then64

if.then64:                                        ; preds = %if.else
  %8 = load %struct.xpvcv** %sv_any, align 8, !tbaa !3
  %xcv_padlist = getelementptr inbounds %struct.xpvcv* %8, i64 0, i32 15
  %9 = load %struct.av** %xcv_padlist, align 8, !tbaa !3
  %sv_any65 = getelementptr inbounds %struct.av* %9, i64 0, i32 0
  %10 = load %struct.xpvav** %sv_any65, align 8, !tbaa !3
  %xav_array = getelementptr inbounds %struct.xpvav* %10, i64 0, i32 0
  %11 = load i8** %xav_array, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds i8* %11, i64 8
  %12 = bitcast i8* %arrayidx to %struct.sv**
  %13 = load %struct.sv** %12, align 8, !tbaa !3
  %tobool66 = icmp eq %struct.sv* %13, null
  br i1 %tobool66, label %return, label %cond.end

cond.end:                                         ; preds = %if.then64
  %op_targ = getelementptr inbounds %struct.op* %o.addr.0134, i64 0, i32 3
  %14 = load i64* %op_targ, align 8, !tbaa !5
  %sv_any72 = bitcast %struct.sv* %13 to %struct.xpvav**
  %15 = load %struct.xpvav** %sv_any72, align 8, !tbaa !3
  %xav_array73 = getelementptr inbounds %struct.xpvav* %15, i64 0, i32 0
  %16 = load i8** %xav_array73, align 8, !tbaa !3
  %17 = bitcast i8* %16 to %struct.sv**
  %arrayidx74 = getelementptr inbounds %struct.sv** %17, i64 %14
  %18 = load %struct.sv** %arrayidx74, align 8, !tbaa !3
  %tobool75 = icmp eq %struct.sv* %18, null
  br i1 %tobool75, label %return, label %if.end77

if.end77:                                         ; preds = %cond.end
  %xcv_flags = getelementptr inbounds %struct.xpvcv* %8, i64 0, i32 17
  %19 = load i16* %xcv_flags, align 2, !tbaa !4
  %and = and i16 %19, 512
  %tobool80 = icmp eq i16 %and, 0
  br i1 %tobool80, label %if.end82, label %if.then81

if.then81:                                        ; preds = %if.end77
  %call = tail call %struct.sv* @Perl_newSVsv(%struct.sv* %18) #7
  br label %if.end82

if.end82:                                         ; preds = %if.end77, %if.then81
  %sv.1 = phi %struct.sv* [ %call, %if.then81 ], [ %18, %if.end77 ]
  %sv_flags = getelementptr inbounds %struct.sv* %sv.1, i64 0, i32 2
  %20 = load i32* %sv_flags, align 4, !tbaa !0
  %and83 = and i32 %20, 8388608
  %tobool84 = icmp eq i32 %and83, 0
  br i1 %tobool84, label %land.lhs.true85, label %for.inc

land.lhs.true85:                                  ; preds = %if.end82
  %sv_refcnt = getelementptr inbounds %struct.sv* %sv.1, i64 0, i32 1
  %21 = load i32* %sv_refcnt, align 4, !tbaa !0
  %cmp86 = icmp ugt i32 %21, 1
  br i1 %cmp86, label %return, label %for.inc

for.inc:                                          ; preds = %land.lhs.true85, %if.end82, %land.lhs.true51, %if.then17, %if.then17, %if.then17, %if.then17
  %sv.2 = phi %struct.sv* [ %sv.0135, %if.then17 ], [ %sv.0135, %if.then17 ], [ %sv.0135, %if.then17 ], [ %sv.0135, %if.then17 ], [ %7, %land.lhs.true51 ], [ %sv.1, %if.end82 ], [ %sv.1, %land.lhs.true85 ]
  %22 = load %struct.op** %op_next14, align 8, !tbaa !3
  %tobool6 = icmp eq %struct.op* %22, null
  br i1 %tobool6, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.then17, %if.then17, %if.end35, %if.end35
  %sv.0.lcssa = phi %struct.sv* [ %sv.0135, %if.end35 ], [ %sv.0135, %if.end35 ], [ %sv.0135, %if.then17 ], [ %sv.0135, %if.then17 ], [ %sv.2, %for.inc ]
  %tobool94 = icmp eq %struct.sv* %sv.0.lcssa, null
  br i1 %tobool94, label %return, label %if.then95

if.then95:                                        ; preds = %for.end
  %sv_flags96 = getelementptr inbounds %struct.sv* %sv.0.lcssa, i64 0, i32 2
  %23 = load i32* %sv_flags96, align 4, !tbaa !0
  %or = or i32 %23, 8388608
  store i32 %or, i32* %sv_flags96, align 4, !tbaa !0
  br label %return

return:                                           ; preds = %for.body, %for.cond.preheader, %if.then64, %if.else, %land.lhs.true85, %cond.end, %if.end44, %if.then95, %for.end, %entry
  %retval.0 = phi %struct.sv* [ null, %entry ], [ null, %for.end ], [ %sv.0.lcssa, %if.then95 ], [ null, %if.then64 ], [ null, %if.else ], [ null, %land.lhs.true85 ], [ null, %cond.end ], [ null, %if.end44 ], [ null, %for.cond.preheader ], [ %sv.0135, %for.body ]
  ret %struct.sv* %retval.0
}
