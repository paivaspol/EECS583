define %struct.op* @Perl_jmaybe(%struct.op* %o) #0 {
entry:
  %op_type = getelementptr inbounds %struct.op* %o, i64 0, i32 4
  %0 = load i16* %op_type, align 2, !tbaa !4
  %cmp = icmp eq i16 %0, 141
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.gv* @Perl_gv_fetchpv(i8* getelementptr inbounds ([2 x i8]* @.str32, i64 0, i64 0), i32 1, i32 4) #7
  %1 = bitcast %struct.gv* %call to %struct.sv*
  store %struct.sv* %1, %struct.sv** @PL_Sv, align 8, !tbaa !3
  %tobool.i = icmp eq %struct.gv* %call, null
  br i1 %tobool.i, label %Perl_newGVOP.exit, label %land.rhs.i

land.rhs.i:                                       ; preds = %if.then
  %2 = getelementptr inbounds %struct.gv* %call, i64 0, i32 1
  %3 = load i32* %2, align 4, !tbaa !0
  %inc.i = add i32 %3, 1
  store i32 %inc.i, i32* %2, align 4, !tbaa !0
  br label %Perl_newGVOP.exit

Perl_newGVOP.exit:                                ; preds = %if.then, %land.rhs.i
  %call.i = tail call %struct.op* @Perl_newSVOP(i32 7, i32 0, %struct.sv* %1) #7
  %call3 = tail call %struct.op* @Perl_newSVREF(%struct.op* %call.i) #8
  %call4 = tail call %struct.op* @Perl_prepend_elem(i32 141, %struct.op* %call3, %struct.op* %o) #8
  %call5 = tail call %struct.op* @Perl_convert(i32 140, i32 0, %struct.op* %call4) #8
  br label %if.end

if.end:                                           ; preds = %Perl_newGVOP.exit, %entry
  %o.addr.0 = phi %struct.op* [ %call5, %Perl_newGVOP.exit ], [ %o, %entry ]
  ret %struct.op* %o.addr.0
}
