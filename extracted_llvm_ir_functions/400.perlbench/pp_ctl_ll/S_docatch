define internal fastcc %struct.op* @S_docatch(%struct.op* %o) #0 {
entry:
  %cur_env = alloca %struct.jmpenv, align 8
  %0 = load %struct.op** @PL_op, align 8, !tbaa !0
  %1 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %2 = bitcast %struct.jmpenv* %cur_env to i8*
  call void @llvm.lifetime.start(i64 216, i8* %2) #4
  store %struct.op* %o, %struct.op** @PL_op, align 8, !tbaa !0
  %call = call %struct.op* @Perl_pop_return() #7
  call void @Perl_push_return(%struct.op* null) #7
  %3 = load %struct.jmpenv** @PL_top_env, align 8, !tbaa !0
  %je_prev = getelementptr inbounds %struct.jmpenv* %cur_env, i64 0, i32 1
  store %struct.jmpenv* %3, %struct.jmpenv** %je_prev, align 8, !tbaa !0
  %arraydecay = getelementptr inbounds %struct.jmpenv* %cur_env, i64 0, i32 0, i64 0
  %call1 = call i32 @__sigsetjmp(%struct.__jmp_buf_tag* %arraydecay, i32 0) #7
  %je_ret = getelementptr inbounds %struct.jmpenv* %cur_env, i64 0, i32 2
  store i32 %call1, i32* %je_ret, align 8, !tbaa !3
  store %struct.jmpenv* %cur_env, %struct.jmpenv** @PL_top_env, align 8, !tbaa !0
  %je_mustcatch = getelementptr inbounds %struct.jmpenv* %cur_env, i64 0, i32 3
  store i8 0, i8* %je_mustcatch, align 4, !tbaa !1
  switch i32 %call1, label %sw.default [
    i32 0, label %redo_body
    i32 3, label %sw.bb4
  ]

redo_body:                                        ; preds = %entry, %if.then
  %4 = load i32 ()** @PL_runops, align 8, !tbaa !0
  %call.i = call i32 %4() #7
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  %5 = load %struct.op** @PL_restartop, align 8, !tbaa !0
  %tobool = icmp ne %struct.op* %5, null
  %6 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %cmp = icmp eq %struct.stackinfo* %1, %6
  %or.cond = and i1 %tobool, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb4
  store %struct.op* %5, %struct.op** @PL_op, align 8, !tbaa !0
  store %struct.op* null, %struct.op** @PL_restartop, align 8, !tbaa !0
  br label %redo_body

if.end:                                           ; preds = %sw.bb4
  %tobool5 = icmp eq %struct.op* %5, null
  br i1 %tobool5, label %sw.epilog, label %sw.default

sw.default:                                       ; preds = %if.end, %entry
  %7 = load %struct.jmpenv** %je_prev, align 8, !tbaa !0
  store %struct.jmpenv* %7, %struct.jmpenv** @PL_top_env, align 8, !tbaa !0
  store %struct.op* %0, %struct.op** @PL_op, align 8, !tbaa !0
  %je_prev9 = getelementptr inbounds %struct.jmpenv* %7, i64 0, i32 1
  %8 = load %struct.jmpenv** %je_prev9, align 8, !tbaa !0
  %tobool10 = icmp eq %struct.jmpenv* %8, null
  br i1 %tobool10, label %if.end14, label %if.then11

if.then11:                                        ; preds = %sw.default
  %arraydecay13 = getelementptr inbounds %struct.jmpenv* %7, i64 0, i32 0, i64 0
  call void @siglongjmp(%struct.__jmp_buf_tag* %arraydecay13, i32 %call1) #9
  unreachable

if.end14:                                         ; preds = %sw.default
  %cmp15 = icmp eq i32 %call1, 2
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end14
  %9 = load i32* @PL_statusvalue, align 4, !tbaa !3
  call void @exit(i32 %9) #9
  unreachable

if.end17:                                         ; preds = %if.end14
  %call18 = call %struct._PerlIO** @Perl_PerlIO_stderr() #7
  %call19 = call i32 (%struct._PerlIO**, i8*, ...)* @PerlIO_printf(%struct._PerlIO** %call18, i8* getelementptr inbounds ([16 x i8]* @.str74, i64 0, i64 0)) #7
  call void @exit(i32 1) #9
  unreachable

sw.epilog:                                        ; preds = %if.end, %redo_body
  %10 = load %struct.jmpenv** %je_prev, align 8, !tbaa !0
  store %struct.jmpenv* %10, %struct.jmpenv** @PL_top_env, align 8, !tbaa !0
  store %struct.op* %0, %struct.op** @PL_op, align 8, !tbaa !0
  call void @llvm.lifetime.end(i64 216, i8* %2) #4
  ret %struct.op* %call
}
