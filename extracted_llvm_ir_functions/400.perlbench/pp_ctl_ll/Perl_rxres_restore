define void @Perl_rxres_restore(i8** nocapture %rsp, %struct.regexp* nocapture %rx) #0 {
entry:
  %0 = load i8** %rsp, align 8, !tbaa !0
  %1 = bitcast i8* %0 to i64*
  %reganch = getelementptr inbounds %struct.regexp* %rx, i64 0, i32 15
  %2 = load i32* %reganch, align 4, !tbaa !3
  %and = and i32 %2, 262144
  %tobool = icmp eq i32 %and, 0
  %subbeg7.pre = getelementptr inbounds %struct.regexp* %rx, i64 0, i32 6
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i8** %subbeg7.pre, align 8, !tbaa !0
  tail call void @Perl_safesysfree(i8* %3) #7
  %.pre = load i32* %reganch, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %4 = phi i32 [ %.pre, %if.then ], [ %2, %entry ]
  %5 = load i64* %1, align 8, !tbaa !4
  %tobool1 = icmp eq i64 %5, 0
  %and4 = and i32 %4, -262145
  %or = or i32 %4, 262144
  %storemerge = select i1 %tobool1, i32 %and4, i32 %or
  store i32 %storemerge, i32* %reganch, align 4, !tbaa !3
  %incdec.ptr = getelementptr inbounds i8* %0, i64 8
  %6 = bitcast i8* %incdec.ptr to i64*
  store i64 0, i64* %1, align 8, !tbaa !4
  %incdec.ptr5 = getelementptr inbounds i8* %0, i64 16
  %7 = bitcast i8* %incdec.ptr5 to i64*
  %8 = load i64* %6, align 8, !tbaa !4
  %conv = trunc i64 %8 to i32
  %nparens = getelementptr inbounds %struct.regexp* %rx, i64 0, i32 12
  store i32 %conv, i32* %nparens, align 4, !tbaa !3
  %incdec.ptr6 = getelementptr inbounds i8* %0, i64 24
  %9 = bitcast i8* %incdec.ptr6 to i64*
  %10 = load i64* %7, align 8, !tbaa !4
  %11 = inttoptr i64 %10 to i8*
  store i8* %11, i8** %subbeg7.pre, align 8, !tbaa !0
  %incdec.ptr8 = getelementptr inbounds i8* %0, i64 32
  %12 = bitcast i8* %incdec.ptr8 to i64*
  %13 = load i64* %9, align 8, !tbaa !4
  %conv9 = trunc i64 %13 to i32
  %sublen = getelementptr inbounds %struct.regexp* %rx, i64 0, i32 8
  store i32 %conv9, i32* %sublen, align 4, !tbaa !3
  %startp = getelementptr inbounds %struct.regexp* %rx, i64 0, i32 0
  %14 = load i32** %startp, align 8, !tbaa !0
  %endp = getelementptr inbounds %struct.regexp* %rx, i64 0, i32 1
  %15 = load i32** %endp, align 8, !tbaa !0
  br label %for.body

for.body:                                         ; preds = %if.end, %for.body
  %i.036 = phi i32 [ 0, %if.end ], [ %inc, %for.body ]
  %p.035 = phi i64* [ %12, %if.end ], [ %incdec.ptr14, %for.body ]
  %incdec.ptr12 = getelementptr inbounds i64* %p.035, i64 1
  %16 = load i64* %p.035, align 8, !tbaa !4
  %conv13 = trunc i64 %16 to i32
  %idxprom = zext i32 %i.036 to i64
  %arrayidx = getelementptr inbounds i32* %14, i64 %idxprom
  store i32 %conv13, i32* %arrayidx, align 4, !tbaa !3
  %incdec.ptr14 = getelementptr inbounds i64* %p.035, i64 2
  %17 = load i64* %incdec.ptr12, align 8, !tbaa !4
  %conv15 = trunc i64 %17 to i32
  %arrayidx17 = getelementptr inbounds i32* %15, i64 %idxprom
  store i32 %conv15, i32* %arrayidx17, align 4, !tbaa !3
  %inc = add i32 %i.036, 1
  %18 = load i32* %nparens, align 4, !tbaa !3
  %cmp = icmp ugt i32 %inc, %18
  br i1 %cmp, label %for.end, label %for.body

for.end:                                          ; preds = %for.body
  ret void
}
