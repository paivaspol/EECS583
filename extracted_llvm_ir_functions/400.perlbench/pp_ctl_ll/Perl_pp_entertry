define %struct.op* @Perl_pp_entertry() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_flags = getelementptr inbounds %struct.op* %1, i64 0, i32 6
  %2 = load i8* %op_flags, align 1, !tbaa !1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %cond.end18, label %cond.false

cond.false:                                       ; preds = %entry
  %cmp5 = icmp eq i32 %and, 2
  br i1 %cmp5, label %cond.end18, label %cond.false8

cond.false8:                                      ; preds = %cond.false
  %cmp12 = icmp eq i32 %and, 3
  br i1 %cmp12, label %cond.end18, label %cond.false15

cond.false15:                                     ; preds = %cond.false8
  %call = tail call i32 @Perl_block_gimme() #8
  %phitmp = trunc i32 %call to i8
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false, %cond.false8, %cond.false15, %entry
  %cond19 = phi i8 [ -128, %entry ], [ 0, %cond.false ], [ %phitmp, %cond.false15 ], [ 1, %cond.false8 ]
  tail call void @Perl_push_scope() #7
  tail call void @Perl_save_int(i32* @PL_tmps_floor) #7
  %3 = load i32* @PL_tmps_ix, align 4, !tbaa !3
  store i32 %3, i32* @PL_tmps_floor, align 4, !tbaa !3
  %4 = load %struct.op** @PL_op, align 8, !tbaa !0
  %5 = getelementptr inbounds %struct.op* %4, i64 1, i32 1
  %6 = load %struct.op** %5, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %6, i64 0, i32 0
  %7 = load %struct.op** %op_next, align 8, !tbaa !0
  tail call void @Perl_push_return(%struct.op* %7) #7
  %8 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_cxix = getelementptr inbounds %struct.stackinfo* %8, i64 0, i32 2
  %9 = load i32* %si_cxix, align 4, !tbaa !3
  %si_cxmax = getelementptr inbounds %struct.stackinfo* %8, i64 0, i32 3
  %10 = load i32* %si_cxmax, align 4, !tbaa !3
  %cmp20 = icmp slt i32 %9, %10
  br i1 %cmp20, label %cond.true22, label %cond.false24

cond.true22:                                      ; preds = %cond.end18
  %inc = add nsw i32 %9, 1
  store i32 %inc, i32* %si_cxix, align 4, !tbaa !3
  br label %cond.end27

cond.false24:                                     ; preds = %cond.end18
  %call25 = tail call i32 @Perl_cxinc() #7
  %11 = load %struct.stackinfo** @PL_curstackinfo, align 8, !tbaa !0
  %si_cxix26 = getelementptr inbounds %struct.stackinfo* %11, i64 0, i32 2
  store i32 %call25, i32* %si_cxix26, align 4, !tbaa !3
  br label %cond.end27

cond.end27:                                       ; preds = %cond.false24, %cond.true22
  %12 = phi i32 [ %call25, %cond.false24 ], [ %inc, %cond.true22 ]
  %13 = phi %struct.stackinfo* [ %11, %cond.false24 ], [ %8, %cond.true22 ]
  %idxprom = sext i32 %12 to i64
  %si_cxstack = getelementptr inbounds %struct.stackinfo* %13, i64 0, i32 1
  %14 = load %struct.context** %si_cxstack, align 8, !tbaa !0
  %cx_type = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 0
  store i32 514, i32* %cx_type, align 4, !tbaa !3
  %15 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %0 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div96 = lshr exact i64 %sub.ptr.sub, 3
  %conv30 = trunc i64 %sub.ptr.div96 to i32
  %blku_oldsp = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 0
  store i32 %conv30, i32* %blku_oldsp, align 4, !tbaa !3
  %16 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %blku_oldcop = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 1
  store %struct.cop* %16, %struct.cop** %blku_oldcop, align 8, !tbaa !0
  %17 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  %18 = load i32** @PL_markstack, align 8, !tbaa !0
  %sub.ptr.lhs.cast33 = ptrtoint i32* %17 to i64
  %sub.ptr.rhs.cast34 = ptrtoint i32* %18 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %sub.ptr.div3697 = lshr exact i64 %sub.ptr.sub35, 2
  %conv37 = trunc i64 %sub.ptr.div3697 to i32
  %blku_oldmarksp = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 3
  store i32 %conv37, i32* %blku_oldmarksp, align 4, !tbaa !3
  %19 = load i32* @PL_scopestack_ix, align 4, !tbaa !3
  %blku_oldscopesp = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 4
  store i32 %19, i32* %blku_oldscopesp, align 4, !tbaa !3
  %20 = load i32* @PL_retstack_ix, align 4, !tbaa !3
  %blku_oldretsp = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 2
  store i32 %20, i32* %blku_oldretsp, align 4, !tbaa !3
  %21 = load %struct.pmop** @PL_curpm, align 8, !tbaa !0
  %blku_oldpm = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 5
  store %struct.pmop* %21, %struct.pmop** %blku_oldpm, align 8, !tbaa !0
  %blku_gimme = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 6
  store i8 %cond19, i8* %blku_gimme, align 1, !tbaa !1
  %22 = load volatile i32* @PL_in_eval, align 4, !tbaa !3
  %blk_u = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 7
  %blku_eval = bitcast %union.anon.1* %blk_u to %struct.block_eval*
  %old_in_eval = bitcast %union.anon.1* %blk_u to i32*
  store i32 %22, i32* %old_in_eval, align 4, !tbaa !3
  %23 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_type = getelementptr inbounds %struct.op* %23, i64 0, i32 4
  %24 = load i16* %op_type, align 2, !tbaa !6
  %conv51 = zext i16 %24 to i32
  %old_op_type = getelementptr inbounds %struct.block_eval* %blku_eval, i64 0, i32 1
  store i32 %conv51, i32* %old_op_type, align 4, !tbaa !3
  %old_namesv = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 7, i32 0, i32 1
  %25 = bitcast i32* %old_namesv to %struct.sv**
  store %struct.sv* null, %struct.sv** %25, align 8, !tbaa !0
  %26 = load %struct.op** @PL_eval_root, align 8, !tbaa !0
  %27 = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 7, i32 0, i32 2
  store %struct.op* %26, %struct.op** %27, align 8, !tbaa !0
  %28 = load %struct.sv** @PL_linestr, align 8, !tbaa !0
  %cur_text = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 7, i32 0, i32 3
  %.c = bitcast %struct.sv* %28 to %struct.op*
  store %struct.op* %.c, %struct.op** %cur_text, align 8, !tbaa !0
  %cv = getelementptr inbounds %struct.context* %14, i64 %idxprom, i32 1, i32 0, i32 7, i32 0, i32 4
  store %struct.op* null, %struct.op** %cv, align 8, !tbaa !0
  store volatile i32 1, i32* @PL_in_eval, align 4, !tbaa !3
  %29 = load %struct.gv** @PL_errgv, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.gv* %29, i64 0, i32 0
  %30 = load %struct.xpvgv** %sv_any, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %30, i64 0, i32 7
  %31 = load %struct.gp** %xgv_gp, align 8, !tbaa !0
  %gp_sv = getelementptr inbounds %struct.gp* %31, i64 0, i32 0
  %32 = load %struct.sv** %gp_sv, align 8, !tbaa !0
  tail call void @Perl_sv_setpv(%struct.sv* %32, i8* getelementptr inbounds ([1 x i8]* @.str11, i64 0, i64 0)) #7
  store %struct.sv** %0, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %33 = load %struct.jmpenv** @PL_top_env, align 8, !tbaa !0
  %je_mustcatch = getelementptr inbounds %struct.jmpenv* %33, i64 0, i32 3
  %34 = load i8* %je_mustcatch, align 1, !tbaa !1
  %cmp73 = icmp eq i8 %34, 1
  %35 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next76 = getelementptr inbounds %struct.op* %35, i64 0, i32 0
  %36 = load %struct.op** %op_next76, align 8, !tbaa !0
  br i1 %cmp73, label %cond.true75, label %cond.end80

cond.true75:                                      ; preds = %cond.end27
  %call77 = tail call fastcc %struct.op* @S_docatch(%struct.op* %36) #8
  br label %cond.end80

cond.end80:                                       ; preds = %cond.end27, %cond.true75
  %cond81 = phi %struct.op* [ %call77, %cond.true75 ], [ %36, %cond.end27 ]
  ret %struct.op* %cond81
}
