define void @XS_IO__File_new_tmpfile(%struct.cv* nocapture %cv) #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %2 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds i32* %2, i64 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8, !tbaa !0
  %3 = load i32* %2, align 4, !tbaa !3
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv** %1, i64 %idx.ext
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %add.ptr to i64
  %add = add nsw i64 %idx.ext, 1
  %sub.ptr.lhs.cast1 = ptrtoint %struct.sv** %0 to i64
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.lhs.cast
  %sub.ptr.div467 = lshr exact i64 %sub.ptr.sub3, 3
  %conv5 = trunc i64 %sub.ptr.div467 to i32
  %4 = icmp ugt i32 %conv5, 1
  br i1 %4, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([52 x i8]* @.str3, i64 0, i64 0)) #2
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %cmp9 = icmp slt i32 %conv5, 1
  br i1 %cmp9, label %if.end21, label %if.else

if.else:                                          ; preds = %if.end
  %sext = shl i64 %add, 32
  %idxprom = ashr exact i64 %sext, 32
  %5 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %5, i64 %idxprom
  %6 = load %struct.sv** %arrayidx, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %6, i64 0, i32 2
  %7 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %7, 262144
  %cmp13 = icmp eq i32 %and, 0
  br i1 %cmp13, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.else
  %sv_any = getelementptr inbounds %struct.sv* %6, i64 0, i32 0
  %8 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %8 to i8**
  %9 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %if.end21

cond.false:                                       ; preds = %if.else
  %call = tail call i8* @Perl_sv_2pv_nolen(%struct.sv* %6) #2
  br label %if.end21

if.end21:                                         ; preds = %cond.true, %cond.false, %if.end
  %packname.0 = phi i8* [ getelementptr inbounds ([9 x i8]* @.str4, i64 0, i64 0), %if.end ], [ %9, %cond.true ], [ %call, %cond.false ]
  %call22 = tail call %struct._PerlIO** @PerlIO_tmpfile() #2
  %call23 = tail call %struct.gv* @Perl_newGVgen(i8* %packname.0) #2
  %10 = bitcast %struct.gv* %call23 to %struct.sv*
  store %struct.sv* %10, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %tobool = icmp eq %struct.gv* %call23, null
  br i1 %tobool, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end21
  %11 = getelementptr inbounds %struct.gv* %call23, i64 0, i32 1
  %12 = load i32* %11, align 4, !tbaa !3
  %inc = add i32 %12, 1
  store i32 %inc, i32* %11, align 4, !tbaa !3
  br label %land.end

land.end:                                         ; preds = %if.end21, %land.rhs
  %sv_any25 = getelementptr inbounds %struct.gv* %call23, i64 0, i32 0
  %13 = load %struct.xpvgv** %sv_any25, align 8, !tbaa !0
  %xgv_stash = getelementptr inbounds %struct.xpvgv* %13, i64 0, i32 10
  %14 = load %struct.hv** %xgv_stash, align 8, !tbaa !0
  %xgv_name = getelementptr inbounds %struct.xpvgv* %13, i64 0, i32 8
  %15 = load i8** %xgv_name, align 8, !tbaa !0
  %xgv_namelen = getelementptr inbounds %struct.xpvgv* %13, i64 0, i32 9
  %16 = load i64* %xgv_namelen, align 8, !tbaa !4
  %conv28 = trunc i64 %16 to i32
  %call29 = tail call %struct.sv* @Perl_hv_delete(%struct.hv* %14, i8* %15, i32 %conv28, i32 2) #2
  %call30 = tail call signext i8 @Perl_do_open(%struct.gv* %call23, i8* getelementptr inbounds ([4 x i8]* @.str5, i64 0, i64 0), i32 3, i32 0, i32 0, i32 0, %struct._PerlIO** %call22) #2
  %tobool31 = icmp eq i8 %call30, 0
  br i1 %tobool31, label %if.else43, label %if.then32

if.then32:                                        ; preds = %land.end
  %call33 = tail call %struct.sv* @Perl_newRV(%struct.sv* %10) #2
  %call34 = tail call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call33) #2
  %sext70 = shl i64 %add, 32
  %idxprom36 = ashr exact i64 %sext70, 32
  %17 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %arrayidx37 = getelementptr inbounds %struct.sv** %17, i64 %idxprom36
  store %struct.sv* %call34, %struct.sv** %arrayidx37, align 8, !tbaa !0
  %18 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %arrayidx40 = getelementptr inbounds %struct.sv** %18, i64 %idxprom36
  %19 = load %struct.sv** %arrayidx40, align 8, !tbaa !0
  %call41 = tail call %struct.hv* @Perl_gv_stashpv(i8* %packname.0, i32 1) #2
  %call42 = tail call %struct.sv* @Perl_sv_bless(%struct.sv* %19, %struct.hv* %call41) #2
  tail call void @Perl_sv_free(%struct.sv* %10) #2
  br label %if.end47

if.else43:                                        ; preds = %land.end
  %sext68 = shl i64 %add, 32
  %idxprom45 = ashr exact i64 %sext68, 32
  %20 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %arrayidx46 = getelementptr inbounds %struct.sv** %20, i64 %idxprom45
  store %struct.sv* @PL_sv_undef, %struct.sv** %arrayidx46, align 8, !tbaa !0
  tail call void @Perl_sv_free(%struct.sv* %10) #2
  br label %if.end47

if.end47:                                         ; preds = %if.else43, %if.then32
  %21 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %sext69 = shl i64 %add, 32
  %idx.ext48 = ashr exact i64 %sext69, 32
  %add.ptr49 = getelementptr inbounds %struct.sv** %21, i64 %idx.ext48
  store %struct.sv** %add.ptr49, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  ret void
}
