define i32 @Perl_same_dirent(i8* %a, i8* %b) #0 {
entry:
  %tmpstatbuf1 = alloca %struct.stat, align 8
  %tmpstatbuf2 = alloca %struct.stat, align 8
  %call = call i8* @strrchr(i8* %a, i32 47) #8
  %call1 = call i8* @strrchr(i8* %b, i32 47) #8
  %0 = bitcast %struct.stat* %tmpstatbuf1 to i8*
  call void @llvm.lifetime.start(i64 144, i8* %0) #4
  %1 = bitcast %struct.stat* %tmpstatbuf2 to i8*
  call void @llvm.lifetime.start(i64 144, i8* %1) #4
  %call2 = call %struct.sv* @Perl_sv_newmortal() #8
  %tobool = icmp eq i8* %call, null
  %incdec.ptr = getelementptr inbounds i8* %call, i64 1
  %fa.0 = select i1 %tobool, i8* %a, i8* %incdec.ptr
  %tobool3 = icmp eq i8* %call1, null
  %incdec.ptr5 = getelementptr inbounds i8* %call1, i64 1
  %fb.0 = select i1 %tobool3, i8* %b, i8* %incdec.ptr5
  %call8 = call i32 @strcmp(i8* %a, i8* %b) #8
  %tobool9 = icmp eq i32 %call8, 0
  br i1 %tobool9, label %if.end11, label %cleanup

if.end11:                                         ; preds = %entry
  %cmp = icmp eq i8* %fa.0, %a
  br i1 %cmp, label %if.then12, label %if.else13

if.then12:                                        ; preds = %if.end11
  call void @Perl_sv_setpv(%struct.sv* %call2, i8* getelementptr inbounds ([2 x i8]* @.str16, i64 0, i64 0)) #8
  br label %if.end14

if.else13:                                        ; preds = %if.end11
  %sub.ptr.lhs.cast = ptrtoint i8* %fa.0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %a to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  call void @Perl_sv_setpvn(%struct.sv* %call2, i8* %a, i64 %sub.ptr.sub) #8
  br label %if.end14

if.end14:                                         ; preds = %if.else13, %if.then12
  %sv_any = getelementptr inbounds %struct.sv* %call2, i64 0, i32 0
  %2 = load i8** %sv_any, align 8, !tbaa !2
  %xpv_pv = bitcast i8* %2 to i8**
  %3 = load i8** %xpv_pv, align 8, !tbaa !2
  %call15 = call i32 @stat(i8* %3, %struct.stat* %tmpstatbuf1) #8
  %cmp16 = icmp slt i32 %call15, 0
  br i1 %cmp16, label %cleanup, label %if.end18

if.end18:                                         ; preds = %if.end14
  %cmp19 = icmp eq i8* %fb.0, %b
  br i1 %cmp19, label %if.then20, label %if.else21

if.then20:                                        ; preds = %if.end18
  call void @Perl_sv_setpv(%struct.sv* %call2, i8* getelementptr inbounds ([2 x i8]* @.str16, i64 0, i64 0)) #8
  br label %if.end25

if.else21:                                        ; preds = %if.end18
  %sub.ptr.lhs.cast22 = ptrtoint i8* %fb.0 to i64
  %sub.ptr.rhs.cast23 = ptrtoint i8* %b to i64
  %sub.ptr.sub24 = sub i64 %sub.ptr.lhs.cast22, %sub.ptr.rhs.cast23
  call void @Perl_sv_setpvn(%struct.sv* %call2, i8* %b, i64 %sub.ptr.sub24) #8
  br label %if.end25

if.end25:                                         ; preds = %if.else21, %if.then20
  %4 = load i8** %sv_any, align 8, !tbaa !2
  %xpv_pv27 = bitcast i8* %4 to i8**
  %5 = load i8** %xpv_pv27, align 8, !tbaa !2
  %call28 = call i32 @stat(i8* %5, %struct.stat* %tmpstatbuf2) #8
  %cmp29 = icmp slt i32 %call28, 0
  br i1 %cmp29, label %cleanup, label %if.end31

if.end31:                                         ; preds = %if.end25
  %st_dev = getelementptr inbounds %struct.stat* %tmpstatbuf1, i64 0, i32 0
  %6 = load i64* %st_dev, align 8, !tbaa !4
  %st_dev32 = getelementptr inbounds %struct.stat* %tmpstatbuf2, i64 0, i32 0
  %7 = load i64* %st_dev32, align 8, !tbaa !4
  %cmp33 = icmp eq i64 %6, %7
  br i1 %cmp33, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end31
  %st_ino = getelementptr inbounds %struct.stat* %tmpstatbuf1, i64 0, i32 1
  %8 = load i64* %st_ino, align 8, !tbaa !4
  %st_ino34 = getelementptr inbounds %struct.stat* %tmpstatbuf2, i64 0, i32 1
  %9 = load i64* %st_ino34, align 8, !tbaa !4
  %cmp35 = icmp eq i64 %8, %9
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end31
  %10 = phi i1 [ false, %if.end31 ], [ %cmp35, %land.rhs ]
  %land.ext = zext i1 %10 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end25, %if.end14, %entry, %land.end
  %retval.0 = phi i32 [ %land.ext, %land.end ], [ 0, %entry ], [ 0, %if.end14 ], [ 0, %if.end25 ]
  call void @llvm.lifetime.end(i64 144, i8* %1) #4
  call void @llvm.lifetime.end(i64 144, i8* %0) #4
  ret i32 %retval.0
}
