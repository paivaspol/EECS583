define %struct.op* @Perl_pp_rename() #0 {
entry:
  %n_a = alloca i64, align 8
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_targ = getelementptr inbounds %struct.op* %1, i64 0, i32 3
  %2 = load i64* %op_targ, align 8, !tbaa !3
  %3 = load %struct.sv*** @PL_curpad, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %3, i64 %2
  %4 = load %struct.sv** %arrayidx, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds %struct.sv** %0, i64 -1
  %5 = load %struct.sv** %0, align 8, !tbaa !0
  store %struct.sv* %5, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %5, i64 0, i32 2
  %6 = load i32* %sv_flags, align 4, !tbaa !4
  %and = and i32 %6, 262144
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %sv_any = getelementptr inbounds %struct.sv* %5, i64 0, i32 0
  %7 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %7, i64 8
  %8 = bitcast i8* %xpv_cur to i64*
  %9 = load i64* %8, align 8, !tbaa !3
  store i64 %9, i64* %n_a, align 8, !tbaa !3
  %xpv_pv = bitcast i8* %7 to i8**
  %10 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %5, i64* %n_a, i32 2) #6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call, %cond.false ]
  %11 = load %struct.sv** %incdec.ptr, align 8, !tbaa !0
  %sv_flags2 = getelementptr inbounds %struct.sv* %11, i64 0, i32 2
  %12 = load i32* %sv_flags2, align 4, !tbaa !4
  %and3 = and i32 %12, 262144
  %cmp4 = icmp eq i32 %and3, 0
  br i1 %cmp4, label %cond.false10, label %cond.true5

cond.true5:                                       ; preds = %cond.end
  %sv_any6 = getelementptr inbounds %struct.sv* %11, i64 0, i32 0
  %13 = load i8** %sv_any6, align 8, !tbaa !0
  %xpv_cur7 = getelementptr inbounds i8* %13, i64 8
  %14 = bitcast i8* %xpv_cur7 to i64*
  %15 = load i64* %14, align 8, !tbaa !3
  store i64 %15, i64* %n_a, align 8, !tbaa !3
  %xpv_pv9 = bitcast i8* %13 to i8**
  %16 = load i8** %xpv_pv9, align 8, !tbaa !0
  br label %cond.end12

cond.false10:                                     ; preds = %cond.end
  %call11 = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %n_a, i32 2) #6
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false10, %cond.true5
  %cond13 = phi i8* [ %16, %cond.true5 ], [ %call11, %cond.false10 ]
  %17 = load i8* @PL_tainting, align 1, !tbaa !1
  %tobool = icmp eq i8 %17, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end12
  call void @Perl_taint_proper(i8* null, i8* getelementptr inbounds ([7 x i8]* @.str79, i64 0, i64 0)) #6
  br label %if.end

if.end:                                           ; preds = %cond.end12, %if.then
  %call14 = call i32 @stat(i8* %cond13, %struct.stat* @PL_statbuf) #6
  %tobool15 = icmp eq i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.end35

if.then16:                                        ; preds = %if.end
  %call17 = call i32 @Perl_same_dirent(i8* %cond, i8* %cond13) #6
  %tobool18 = icmp eq i32 %call17, 0
  br i1 %tobool18, label %if.else, label %if.end35

if.else:                                          ; preds = %if.then16
  %18 = load i32* @PL_euid, align 4, !tbaa !4
  %tobool20 = icmp eq i32 %18, 0
  br i1 %tobool20, label %lor.lhs.false, label %if.then26

lor.lhs.false:                                    ; preds = %if.else
  %call21 = call i32 @stat(i8* %cond, %struct.stat* @PL_statbuf) #6
  %cmp22 = icmp slt i32 %call21, 0
  br i1 %cmp22, label %if.then26, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %19 = load i32* getelementptr inbounds (%struct.stat* @PL_statbuf, i64 0, i32 3), align 8, !tbaa !4
  %and24 = and i32 %19, 61440
  %cmp25 = icmp eq i32 %and24, 16384
  br i1 %cmp25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.else, %lor.lhs.false23, %lor.lhs.false
  %call27 = call i32 @unlink(i8* %cond) #6
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %lor.lhs.false23
  %call29 = call i32 @link(i8* %cond13, i8* %cond) #6
  %tobool30 = icmp eq i32 %call29, 0
  br i1 %tobool30, label %if.then31, label %if.end35

if.then31:                                        ; preds = %if.end28
  %call32 = call i32 @unlink(i8* %cond13) #6
  br label %if.end35

if.end35:                                         ; preds = %if.then16, %if.end28, %if.end, %if.then31
  %anum.0 = phi i32 [ %call14, %if.end ], [ %call29, %if.end28 ], [ %call32, %if.then31 ], [ 1, %if.then16 ]
  %anum.0.lobit = lshr i32 %anum.0, 31
  %anum.0.lobit.not = xor i32 %anum.0.lobit, 1
  %conv3758 = zext i32 %anum.0.lobit.not to i64
  call void @Perl_sv_setiv(%struct.sv* %4, i64 %conv3758) #6
  %sv_flags38 = getelementptr inbounds %struct.sv* %4, i64 0, i32 2
  %20 = load i32* %sv_flags38, align 4, !tbaa !4
  %and39 = and i32 %20, 16384
  %tobool40 = icmp eq i32 %and39, 0
  br i1 %tobool40, label %if.end43, label %if.then41

if.then41:                                        ; preds = %if.end35
  %call42 = call i32 @Perl_mg_set(%struct.sv* %4) #6
  br label %if.end43

if.end43:                                         ; preds = %if.end35, %if.then41
  store %struct.sv* %4, %struct.sv** %incdec.ptr, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %21 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %21, i64 0, i32 0
  %22 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %22
}
