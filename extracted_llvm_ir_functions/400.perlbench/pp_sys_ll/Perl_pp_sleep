define %struct.op* @Perl_pp_sleep() #0 {
entry:
  %lasttime = alloca i64, align 8
  %when = alloca i64, align 8
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_targ = getelementptr inbounds %struct.op* %1, i64 0, i32 3
  %2 = load i64* %op_targ, align 8, !tbaa !3
  %3 = load %struct.sv*** @PL_curpad, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %3, i64 %2
  %4 = load %struct.sv** %arrayidx, align 8, !tbaa !0
  %call = call i64 @time(i64* %lasttime) #6
  %5 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_private = getelementptr inbounds %struct.op* %5, i64 0, i32 7
  %6 = load i8* %op_private, align 1, !tbaa !1
  %and = and i8 %6, 15
  %cmp = icmp eq i8 %and, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call2 = call i32 @sleep(i32 2147450879) #6
  br label %if.end

if.else:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds %struct.sv** %0, i64 -1
  %7 = load %struct.sv** %0, align 8, !tbaa !0
  store %struct.sv* %7, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %7, i64 0, i32 2
  %8 = load i32* %sv_flags, align 4, !tbaa !4
  %and3 = and i32 %8, 65536
  %tobool = icmp eq i32 %and3, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.else
  %sv_any = getelementptr inbounds %struct.sv* %7, i64 0, i32 0
  %9 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %9, i64 24
  %10 = bitcast i8* %xiv_iv to i64*
  %11 = load i64* %10, align 8, !tbaa !3
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %call4 = call i64 @Perl_sv_2iv(%struct.sv* %7) #6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %11, %cond.true ], [ %call4, %cond.false ]
  %conv5 = trunc i64 %cond to i32
  %call6 = call i32 @sleep(i32 %conv5) #6
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %sp.0 = phi %struct.sv** [ %0, %if.then ], [ %incdec.ptr, %cond.end ]
  %call7 = call i64 @time(i64* %when) #6
  %12 = load i64* %when, align 8, !tbaa !3
  %13 = load i64* %lasttime, align 8, !tbaa !3
  %sub = sub nsw i64 %12, %13
  call void @Perl_sv_setiv(%struct.sv* %4, i64 %sub) #6
  %sv_flags8 = getelementptr inbounds %struct.sv* %4, i64 0, i32 2
  %14 = load i32* %sv_flags8, align 4, !tbaa !4
  %and9 = and i32 %14, 16384
  %tobool10 = icmp eq i32 %and9, 0
  br i1 %tobool10, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.end
  %call12 = call i32 @Perl_mg_set(%struct.sv* %4) #6
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then11
  %15 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %15 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %sp.0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp14 = icmp slt i64 %sub.ptr.sub, 8
  br i1 %cmp14, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end13
  %call17 = call %struct.sv** @Perl_stack_grow(%struct.sv** %sp.0, %struct.sv** %sp.0, i32 1) #6
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.end13
  %sp.1 = phi %struct.sv** [ %call17, %if.then16 ], [ %sp.0, %if.end13 ]
  %incdec.ptr19 = getelementptr inbounds %struct.sv** %sp.1, i64 1
  store %struct.sv* %4, %struct.sv** %incdec.ptr19, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr19, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %16 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %16, i64 0, i32 0
  %17 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %17
}
