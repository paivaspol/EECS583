define %struct.op* @Perl_pp_warn() #0 {
entry:
  %len = alloca i64, align 8
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %2 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds i32* %2, i64 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8, !tbaa !0
  %3 = load i32* %2, align 4, !tbaa !4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv** %1, i64 %idx.ext
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %0 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %add.ptr to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp eq i64 %sub.ptr.sub, 8
  br i1 %cmp, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %4 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_targ = getelementptr inbounds %struct.op* %4, i64 0, i32 3
  %5 = load i64* %op_targ, align 8, !tbaa !3
  %6 = load %struct.sv*** @PL_curpad, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %6, i64 %5
  %7 = load %struct.sv** %arrayidx, align 8, !tbaa !0
  call void @Perl_do_join(%struct.sv* %7, %struct.sv* @PL_sv_no, %struct.sv** %add.ptr, %struct.sv** %0) #6
  %add.ptr.sum = add i64 %idx.ext, 1
  %add.ptr1 = getelementptr inbounds %struct.sv** %1, i64 %add.ptr.sum
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load %struct.sv** %0, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %tmpsv.0 = phi %struct.sv* [ %7, %if.then ], [ %8, %if.else ]
  %sp.0 = phi %struct.sv** [ %add.ptr1, %if.then ], [ %0, %if.else ]
  %sv_flags = getelementptr inbounds %struct.sv* %tmpsv.0, i64 0, i32 2
  %9 = load i32* %sv_flags, align 4, !tbaa !4
  %and = and i32 %9, 262144
  %cmp2 = icmp eq i32 %and, 0
  br i1 %cmp2, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %tmpsv.0, i64 0, i32 0
  %10 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %10, i64 8
  %11 = bitcast i8* %xpv_cur to i64*
  %12 = load i64* %11, align 8, !tbaa !3
  store i64 %12, i64* %len, align 8, !tbaa !3
  %xpv_pv = bitcast i8* %10 to i8**
  %13 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %tmpsv.0, i64* %len, i32 2) #6
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %13, %cond.true ], [ %call, %cond.false ]
  %tobool = icmp eq i8* %cond, null
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %14 = load i64* %len, align 8, !tbaa !3
  %tobool4 = icmp eq i64 %14, 0
  %15 = load %struct.gv** @PL_errgv, align 8, !tbaa !0
  %tobool5 = icmp ne %struct.gv* %15, null
  %or.cond = and i1 %tobool4, %tobool5
  br i1 %or.cond, label %if.then6, label %if.end35

land.lhs.true:                                    ; preds = %cond.end
  %.old = load %struct.gv** @PL_errgv, align 8, !tbaa !0
  %tobool5.old = icmp eq %struct.gv* %.old, null
  br i1 %tobool5.old, label %if.then39, label %if.then6

if.then6:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %16 = phi %struct.gv* [ %.old, %land.lhs.true ], [ %15, %lor.lhs.false ]
  %sv_any7 = getelementptr inbounds %struct.gv* %16, i64 0, i32 0
  %17 = load %struct.xpvgv** %sv_any7, align 8, !tbaa !0
  %xgv_gp = getelementptr inbounds %struct.xpvgv* %17, i64 0, i32 7
  %18 = load %struct.gp** %xgv_gp, align 8, !tbaa !0
  %gp_sv = getelementptr inbounds %struct.gp* %18, i64 0, i32 0
  %19 = load %struct.sv** %gp_sv, align 8, !tbaa !0
  %sv_flags8 = getelementptr inbounds %struct.sv* %19, i64 0, i32 2
  %20 = load i32* %sv_flags8, align 4, !tbaa !4
  %and9 = and i32 %20, 252
  %cmp10 = icmp eq i32 %and9, 0
  br i1 %cmp10, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %if.then6
  %call11 = call signext i8 @Perl_sv_upgrade(%struct.sv* %19, i32 4) #6
  %.pre = load i32* %sv_flags8, align 4, !tbaa !4
  br label %lor.end

lor.end:                                          ; preds = %if.then6, %lor.rhs
  %21 = phi i32 [ %20, %if.then6 ], [ %.pre, %lor.rhs ]
  %and14 = and i32 %21, 262144
  %tobool15 = icmp eq i32 %and14, 0
  br i1 %tobool15, label %if.end21, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %lor.end
  %sv_any17 = getelementptr inbounds %struct.sv* %19, i64 0, i32 0
  %22 = load i8** %sv_any17, align 8, !tbaa !0
  %xpv_cur18 = getelementptr inbounds i8* %22, i64 8
  %23 = bitcast i8* %xpv_cur18 to i64*
  %24 = load i64* %23, align 8, !tbaa !3
  %tobool19 = icmp eq i64 %24, 0
  br i1 %tobool19, label %if.end21, label %if.then20

if.then20:                                        ; preds = %land.lhs.true16
  call void @Perl_sv_catpv(%struct.sv* %19, i8* getelementptr inbounds ([11 x i8]* @.str7, i64 0, i64 0)) #6
  %.pre67 = load i32* %sv_flags8, align 4, !tbaa !4
  br label %if.end21

if.end21:                                         ; preds = %land.lhs.true16, %lor.end, %if.then20
  %25 = phi i32 [ %21, %land.lhs.true16 ], [ %21, %lor.end ], [ %.pre67, %if.then20 ]
  %and23 = and i32 %25, 262144
  %cmp24 = icmp eq i32 %and23, 0
  br i1 %cmp24, label %cond.false31, label %cond.true26

cond.true26:                                      ; preds = %if.end21
  %sv_any27 = getelementptr inbounds %struct.sv* %19, i64 0, i32 0
  %26 = load i8** %sv_any27, align 8, !tbaa !0
  %xpv_cur28 = getelementptr inbounds i8* %26, i64 8
  %27 = bitcast i8* %xpv_cur28 to i64*
  %28 = load i64* %27, align 8, !tbaa !3
  store i64 %28, i64* %len, align 8, !tbaa !3
  %xpv_pv30 = bitcast i8* %26 to i8**
  %29 = load i8** %xpv_pv30, align 8, !tbaa !0
  br label %if.end35

cond.false31:                                     ; preds = %if.end21
  %call32 = call i8* @Perl_sv_2pv_flags(%struct.sv* %19, i64* %len, i32 2) #6
  %.pre68 = load i64* %len, align 8, !tbaa !3
  br label %if.end35

if.end35:                                         ; preds = %cond.true26, %cond.false31, %lor.lhs.false
  %30 = phi i64 [ %14, %lor.lhs.false ], [ %28, %cond.true26 ], [ %.pre68, %cond.false31 ]
  %tmps.0 = phi i8* [ %cond, %lor.lhs.false ], [ %29, %cond.true26 ], [ %call32, %cond.false31 ]
  %tmpsv.1 = phi %struct.sv* [ %tmpsv.0, %lor.lhs.false ], [ %19, %cond.true26 ], [ %19, %cond.false31 ]
  %tobool36 = icmp eq i8* %tmps.0, null
  %tobool38 = icmp eq i64 %30, 0
  %or.cond63 = or i1 %tobool36, %tobool38
  br i1 %or.cond63, label %if.then39, label %if.end42

if.then39:                                        ; preds = %land.lhs.true, %if.end35
  %call40 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([27 x i8]* @.str8, i64 0, i64 0), i64 26) #6
  %call41 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call40) #6
  br label %if.end42

if.end42:                                         ; preds = %if.end35, %if.then39
  %tmpsv.2 = phi %struct.sv* [ %call41, %if.then39 ], [ %tmpsv.1, %if.end35 ]
  call void (i8*, ...)* @Perl_warn(i8* getelementptr inbounds ([3 x i8]* @.str9, i64 0, i64 0), %struct.sv* %tmpsv.2) #6
  store %struct.sv* @PL_sv_yes, %struct.sv** %sp.0, align 8, !tbaa !0
  store %struct.sv** %sp.0, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %31 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %31, i64 0, i32 0
  %32 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %32
}
