define internal fastcc %struct.regnode* @S_reg_node(%struct.RExC_state_t* nocapture %pRExC_state, i8 zeroext %op) #0 {
entry:
  %emit = getelementptr inbounds %struct.RExC_state_t* %pRExC_state, i64 0, i32 8
  %0 = load %struct.regnode** %emit, align 8, !tbaa !0
  %cmp = icmp eq %struct.regnode* %0, @PL_regdummy
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %size = getelementptr inbounds %struct.RExC_state_t* %pRExC_state, i64 0, i32 12
  %1 = load i32* %size, align 4, !tbaa !3
  %add = add nsw i32 %1, 1
  store i32 %add, i32* %size, align 4, !tbaa !3
  br label %return

if.end:                                           ; preds = %entry
  %flags = getelementptr inbounds %struct.regnode* %0, i64 0, i32 0
  store i8 -34, i8* %flags, align 1, !tbaa !1
  %type = getelementptr inbounds %struct.regnode* %0, i64 0, i32 1
  store i8 %op, i8* %type, align 1, !tbaa !1
  %next_off = getelementptr inbounds %struct.regnode* %0, i64 0, i32 2
  store i16 0, i16* %next_off, align 2, !tbaa !4
  %incdec.ptr = getelementptr inbounds %struct.regnode* %0, i64 1
  %rx = getelementptr inbounds %struct.RExC_state_t* %pRExC_state, i64 0, i32 2
  %2 = load %struct.regexp** %rx, align 8, !tbaa !0
  %offsets = getelementptr inbounds %struct.regexp* %2, i64 0, i32 7
  %3 = load i32** %offsets, align 8, !tbaa !0
  %tobool = icmp eq i32* %3, null
  br i1 %tobool, label %if.end31, label %if.then2

if.then2:                                         ; preds = %if.end
  %4 = load %struct.regnode** %emit, align 8, !tbaa !0
  %cmp4 = icmp eq %struct.regnode* %4, @PL_regdummy
  br i1 %cmp4, label %if.end31, label %if.then5

if.then5:                                         ; preds = %if.then2
  %emit_start = getelementptr inbounds %struct.RExC_state_t* %pRExC_state, i64 0, i32 7
  %5 = load %struct.regnode** %emit_start, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.regnode* %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.regnode* %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp7 = icmp slt i64 %sub.ptr.sub, 0
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.then5
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 2
  tail call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([36 x i8]* @.str21, i64 0, i64 0), i64 %sub.ptr.div) #8
  br label %if.end31

if.else:                                          ; preds = %if.then5
  %parse = getelementptr inbounds %struct.RExC_state_t* %pRExC_state, i64 0, i32 5
  %6 = load i8** %parse, align 8, !tbaa !0
  %cmp15 = icmp eq i8 %op, 0
  %idx.ext = zext i1 %cmp15 to i64
  %add.ptr = getelementptr inbounds i8* %6, i64 %idx.ext
  %start = getelementptr inbounds %struct.RExC_state_t* %pRExC_state, i64 0, i32 3
  %7 = load i8** %start, align 8, !tbaa !0
  %sub.ptr.lhs.cast17 = ptrtoint i8* %add.ptr to i64
  %sub.ptr.rhs.cast18 = ptrtoint i8* %7 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  %conv20 = trunc i64 %sub.ptr.sub19 to i32
  %mul = ashr exact i64 %sub.ptr.sub, 1
  %sub = add nsw i64 %mul, -1
  %arrayidx = getelementptr inbounds i32* %3, i64 %sub
  store i32 %conv20, i32* %arrayidx, align 4, !tbaa !3
  br label %if.end31

if.end31:                                         ; preds = %if.end, %if.then2, %if.else, %if.then8
  store %struct.regnode* %incdec.ptr, %struct.regnode** %emit, align 8, !tbaa !0
  br label %return

return:                                           ; preds = %if.end31, %if.then
  ret %struct.regnode* %0
}
