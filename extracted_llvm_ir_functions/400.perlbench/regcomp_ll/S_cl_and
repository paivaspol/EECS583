define internal fastcc void @S_cl_and(%struct.regnode_charclass_class* nocapture %cl, %struct.regnode_charclass_class* nocapture %and_with) #0 {
entry:
  %flags = getelementptr inbounds %struct.regnode_charclass_class* %and_with, i64 0, i32 0
  %0 = load i8* %flags, align 1, !tbaa !1
  %conv = zext i8 %0 to i32
  %and = and i32 %conv, 8
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.end54

land.lhs.true:                                    ; preds = %entry
  %flags1 = getelementptr inbounds %struct.regnode_charclass_class* %cl, i64 0, i32 0
  %1 = load i8* %flags1, align 1, !tbaa !1
  %conv2 = zext i8 %1 to i32
  %and3 = and i32 %conv2, 8
  %tobool4 = icmp eq i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true5, label %if.end54

land.lhs.true5:                                   ; preds = %land.lhs.true
  %2 = xor i8 %1, %0
  %3 = and i8 %2, 1
  %cmp = icmp eq i8 %3, 0
  br i1 %cmp, label %land.lhs.true13, label %if.end54

land.lhs.true13:                                  ; preds = %land.lhs.true5
  %and16 = and i32 %conv, 2
  %tobool17 = icmp eq i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true18, label %if.end54

land.lhs.true18:                                  ; preds = %land.lhs.true13
  %and21 = and i32 %conv2, 2
  %tobool22 = icmp eq i32 %and21, 0
  br i1 %tobool22, label %if.then, label %if.end54

if.then:                                          ; preds = %land.lhs.true18
  %and25 = and i32 %conv, 4
  %tobool26 = icmp eq i32 %and25, 0
  br i1 %tobool26, label %for.body40, label %for.body

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv158 = phi i64 [ %indvars.iv.next159, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %struct.regnode_charclass_class* %and_with, i64 0, i32 4, i64 %indvars.iv158
  %4 = load i8* %arrayidx, align 1, !tbaa !1
  %neg = xor i8 %4, -1
  %arrayidx33 = getelementptr inbounds %struct.regnode_charclass_class* %cl, i64 0, i32 4, i64 %indvars.iv158
  %5 = load i8* %arrayidx33, align 1, !tbaa !1
  %and35 = and i8 %5, %neg
  store i8 %and35, i8* %arrayidx33, align 1, !tbaa !1
  %indvars.iv.next159 = add i64 %indvars.iv158, 1
  %lftr.wideiv160 = trunc i64 %indvars.iv.next159 to i32
  %exitcond161 = icmp eq i32 %lftr.wideiv160, 32
  br i1 %exitcond161, label %if.end54, label %for.body

for.body40:                                       ; preds = %if.then, %for.body40
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body40 ], [ 0, %if.then ]
  %arrayidx43 = getelementptr inbounds %struct.regnode_charclass_class* %and_with, i64 0, i32 4, i64 %indvars.iv
  %6 = load i8* %arrayidx43, align 1, !tbaa !1
  %arrayidx47 = getelementptr inbounds %struct.regnode_charclass_class* %cl, i64 0, i32 4, i64 %indvars.iv
  %7 = load i8* %arrayidx47, align 1, !tbaa !1
  %and49150 = and i8 %7, %6
  store i8 %and49150, i8* %arrayidx47, align 1, !tbaa !1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 32
  br i1 %exitcond, label %if.end54, label %for.body40

if.end54:                                         ; preds = %for.body, %for.body40, %land.lhs.true18, %land.lhs.true13, %land.lhs.true, %entry, %land.lhs.true5
  %8 = load i8* %flags, align 1, !tbaa !1
  %and57 = and i8 %8, 16
  %tobool58 = icmp eq i8 %and57, 0
  %flags60 = getelementptr inbounds %struct.regnode_charclass_class* %cl, i64 0, i32 0
  %9 = load i8* %flags60, align 1, !tbaa !1
  br i1 %tobool58, label %if.then59, label %if.end64

if.then59:                                        ; preds = %if.end54
  %and62 = and i8 %9, -17
  store i8 %and62, i8* %flags60, align 1, !tbaa !1
  br label %if.end64

if.end64:                                         ; preds = %if.end54, %if.then59
  %10 = phi i8 [ %and62, %if.then59 ], [ %9, %if.end54 ]
  %flags65 = getelementptr inbounds %struct.regnode_charclass_class* %cl, i64 0, i32 0
  %and67 = and i8 %10, 64
  %tobool68 = icmp eq i8 %and67, 0
  br i1 %tobool68, label %if.end88, label %land.lhs.true69

land.lhs.true69:                                  ; preds = %if.end64
  %11 = load i8* %flags, align 1, !tbaa !1
  %12 = and i8 %11, 36
  %13 = icmp eq i8 %12, 32
  br i1 %13, label %if.then79, label %if.end88

if.then79:                                        ; preds = %land.lhs.true69
  %and82 = and i8 %10, -97
  %or = or i8 %and82, 32
  store i8 %or, i8* %flags65, align 1, !tbaa !1
  %14 = getelementptr inbounds %struct.regnode_charclass_class* %and_with, i64 0, i32 3
  %15 = load i32* %14, align 4, !tbaa !3
  %16 = getelementptr inbounds %struct.regnode_charclass_class* %cl, i64 0, i32 3
  store i32 %15, i32* %16, align 4, !tbaa !3
  br label %if.end88

if.end88:                                         ; preds = %if.end64, %land.lhs.true69, %if.then79
  %17 = phi i8 [ %10, %land.lhs.true69 ], [ %or, %if.then79 ], [ %10, %if.end64 ]
  %18 = load i8* %flags, align 1, !tbaa !1
  %19 = and i8 %18, 68
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %if.then98, label %if.end103

if.then98:                                        ; preds = %if.end88
  %and101 = and i8 %17, -65
  store i8 %and101, i8* %flags65, align 1, !tbaa !1
  %.pre = load i8* %flags, align 1, !tbaa !1
  br label %if.end103

if.end103:                                        ; preds = %if.end88, %if.then98
  %21 = phi i8 [ %17, %if.end88 ], [ %and101, %if.then98 ]
  %22 = phi i8 [ %18, %if.end88 ], [ %.pre, %if.then98 ]
  %23 = and i8 %22, 100
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %if.then113, label %if.end118

if.then113:                                       ; preds = %if.end103
  %and116 = and i8 %21, -33
  store i8 %and116, i8* %flags65, align 1, !tbaa !1
  br label %if.end118

if.end118:                                        ; preds = %if.end103, %if.then113
  ret void
}
