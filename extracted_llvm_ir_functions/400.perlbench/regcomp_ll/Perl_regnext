define %struct.regnode* @Perl_regnext(%struct.regnode* %p) #4 {
entry:
  %cmp = icmp eq %struct.regnode* %p, @PL_regdummy
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.regnode* %p, i64 0, i32 1
  %0 = load i8* %type, align 1, !tbaa !1
  %idxprom = zext i8 %0 to i64
  %1 = lshr i64 1277896394266378240, %idxprom
  %2 = and i64 %1, 1
  %tobool = icmp eq i64 %2, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end
  %arg1 = getelementptr inbounds %struct.regnode* %p, i64 1
  %3 = bitcast %struct.regnode* %arg1 to i32*
  %4 = load i32* %3, align 4, !tbaa !3
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %next_off = getelementptr inbounds %struct.regnode* %p, i64 0, i32 2
  %5 = load i16* %next_off, align 2, !tbaa !4
  %conv1 = zext i16 %5 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ %conv1, %cond.false ]
  %cmp2 = icmp eq i32 %cond, 0
  br i1 %cmp2, label %return, label %if.end5

if.end5:                                          ; preds = %cond.end
  %idx.ext = sext i32 %cond to i64
  %add.ptr = getelementptr inbounds %struct.regnode* %p, i64 %idx.ext
  br label %return

return:                                           ; preds = %cond.end, %entry, %if.end5
  %retval.0 = phi %struct.regnode* [ %add.ptr, %if.end5 ], [ null, %entry ], [ null, %cond.end ]
  ret %struct.regnode* %retval.0
}
