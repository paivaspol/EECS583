define %struct.op* @Perl_pp_av2arylen() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.sv** %0, align 8, !tbaa !0
  %sv_any = bitcast %struct.sv* %1 to %struct.xpvav**
  %2 = load %struct.xpvav** %sv_any, align 8, !tbaa !0
  %xav_arylen = getelementptr inbounds %struct.xpvav* %2, i64 0, i32 8
  %3 = load %struct.sv** %xav_arylen, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %3, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.sv* @Perl_newSV(i64 0) #7
  %4 = load %struct.xpvav** %sv_any, align 8, !tbaa !0
  %xav_arylen2 = getelementptr inbounds %struct.xpvav* %4, i64 0, i32 8
  store %struct.sv* %call, %struct.sv** %xav_arylen2, align 8, !tbaa !0
  %call3 = tail call signext i8 @Perl_sv_upgrade(%struct.sv* %call, i32 1) #7
  tail call void @Perl_sv_magic(%struct.sv* %call, %struct.sv* %1, i32 35, i8* null, i32 0) #7
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %sv.0 = phi %struct.sv* [ %3, %entry ], [ %call, %if.then ]
  store %struct.sv* %sv.0, %struct.sv** %0, align 8, !tbaa !0
  store %struct.sv** %0, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %5 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %5, i64 0, i32 0
  %6 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %6
}
