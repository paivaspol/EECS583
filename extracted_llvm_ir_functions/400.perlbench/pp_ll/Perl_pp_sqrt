define %struct.op* @Perl_pp_sqrt() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_targ = getelementptr inbounds %struct.op* %1, i64 0, i32 3
  %2 = load i64* %op_targ, align 8, !tbaa !3
  %3 = load %struct.sv*** @PL_curpad, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %3, i64 %2
  %4 = load %struct.sv** %arrayidx, align 8, !tbaa !0
  %5 = load i64* @PL_amagic_generation, align 8, !tbaa !3
  %tobool = icmp eq i64 %5, 0
  br i1 %tobool, label %if.end16, label %if.then

if.then:                                          ; preds = %entry
  %6 = load %struct.sv** %0, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %6, i64 0, i32 2
  %7 = load i32* %sv_flags, align 4, !tbaa !4
  %and = and i32 %7, 268435456
  %tobool2 = icmp eq i32 %and, 0
  br i1 %tobool2, label %if.end16, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %call = tail call %struct.sv* @Perl_amagic_call(%struct.sv* %6, %struct.sv* @PL_sv_undef, i32 51, i32 9) #7
  %tobool3 = icmp eq %struct.sv* %call, null
  br i1 %tobool3, label %if.end16, label %if.then4

if.then4:                                         ; preds = %land.lhs.true
  %8 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %sv_flags5 = getelementptr inbounds %struct.sv* %4, i64 0, i32 2
  %9 = load i32* %sv_flags5, align 4, !tbaa !4
  %and6 = and i32 %9, 1024
  %tobool7 = icmp eq i32 %and6, 0
  br i1 %tobool7, label %if.end14, label %if.then8

if.then8:                                         ; preds = %if.then4
  tail call void @Perl_sv_setsv_flags(%struct.sv* %4, %struct.sv* %call, i32 2) #7
  %10 = load i32* %sv_flags5, align 4, !tbaa !4
  %and10 = and i32 %10, 16384
  %tobool11 = icmp eq i32 %and10, 0
  br i1 %tobool11, label %if.end14, label %if.then12

if.then12:                                        ; preds = %if.then8
  %call13 = tail call i32 @Perl_mg_set(%struct.sv* %4) #7
  br label %if.end14

if.end14:                                         ; preds = %if.then4, %if.then12, %if.then8
  %storemerge = phi %struct.sv* [ %4, %if.then8 ], [ %4, %if.then12 ], [ %call, %if.then4 ]
  store %struct.sv* %storemerge, %struct.sv** %8, align 8, !tbaa !0
  store %struct.sv** %8, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %11 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %11, i64 0, i32 0
  %12 = load %struct.op** %op_next, align 8, !tbaa !0
  br label %return

if.end16:                                         ; preds = %land.lhs.true, %entry, %if.then
  %incdec.ptr = getelementptr inbounds %struct.sv** %0, i64 -1
  %13 = load %struct.sv** %0, align 8, !tbaa !0
  store %struct.sv* %13, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags17 = getelementptr inbounds %struct.sv* %13, i64 0, i32 2
  %14 = load i32* %sv_flags17, align 4, !tbaa !4
  %and18 = and i32 %14, 131072
  %tobool19 = icmp eq i32 %and18, 0
  br i1 %tobool19, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end16
  %sv_any = getelementptr inbounds %struct.sv* %13, i64 0, i32 0
  %15 = load i8** %sv_any, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %15, i64 32
  %16 = bitcast i8* %xnv_nv to double*
  %17 = load double* %16, align 8, !tbaa !6
  br label %cond.end

cond.false:                                       ; preds = %if.end16
  %call20 = tail call double @Perl_sv_2nv(%struct.sv* %13) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %17, %cond.true ], [ %call20, %cond.false ]
  %cmp = fcmp olt double %cond, 0.000000e+00
  br i1 %cmp, label %if.then21, label %if.end23

if.then21:                                        ; preds = %cond.end
  %call22 = tail call %struct.op* (i8*, ...)* @Perl_die(i8* getelementptr inbounds ([22 x i8]* @.str33, i64 0, i64 0), double %cond) #7
  br label %return

if.end23:                                         ; preds = %cond.end
  %call24 = tail call double @sqrt(double %cond) #7
  tail call void @Perl_sv_setnv(%struct.sv* %4, double %call24) #7
  %sv_flags25 = getelementptr inbounds %struct.sv* %4, i64 0, i32 2
  %18 = load i32* %sv_flags25, align 4, !tbaa !4
  %and26 = and i32 %18, 16384
  %tobool27 = icmp eq i32 %and26, 0
  br i1 %tobool27, label %if.end30, label %if.then28

if.then28:                                        ; preds = %if.end23
  %call29 = tail call i32 @Perl_mg_set(%struct.sv* %4) #7
  br label %if.end30

if.end30:                                         ; preds = %if.end23, %if.then28
  %19 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %19 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %incdec.ptr to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp31 = icmp slt i64 %sub.ptr.sub, 8
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end30
  %call33 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %incdec.ptr, %struct.sv** %incdec.ptr, i32 1) #7
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end30
  %sp.0 = phi %struct.sv** [ %call33, %if.then32 ], [ %incdec.ptr, %if.end30 ]
  %incdec.ptr35 = getelementptr inbounds %struct.sv** %sp.0, i64 1
  store %struct.sv* %4, %struct.sv** %incdec.ptr35, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr35, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %20 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next36 = getelementptr inbounds %struct.op* %20, i64 0, i32 0
  %21 = load %struct.op** %op_next36, align 8, !tbaa !0
  br label %return

return:                                           ; preds = %if.end34, %if.then21, %if.end14
  %retval.0 = phi %struct.op* [ %12, %if.end14 ], [ %call22, %if.then21 ], [ %21, %if.end34 ]
  ret %struct.op* %retval.0
}
