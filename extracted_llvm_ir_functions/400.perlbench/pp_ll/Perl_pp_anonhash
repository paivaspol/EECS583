define %struct.op* @Perl_pp_anonhash() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %2 = load i32** @PL_markstack_ptr, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds i32* %2, i64 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8, !tbaa !0
  %3 = load i32* %2, align 4, !tbaa !4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv** %1, i64 %idx.ext
  %call = tail call %struct.hv* @Perl_newHV() #7
  %4 = bitcast %struct.hv* %call to %struct.sv*
  %call1 = tail call %struct.sv* @Perl_sv_2mortal(%struct.sv* %4) #7
  %5 = bitcast %struct.sv* %call1 to %struct.hv*
  %cmp56 = icmp ult %struct.sv** %add.ptr, %0
  br i1 %cmp56, label %while.body, label %while.end

while.body:                                       ; preds = %entry, %if.end28
  %mark.057 = phi %struct.sv** [ %mark.1, %if.end28 ], [ %add.ptr, %entry ]
  %incdec.ptr3 = getelementptr inbounds %struct.sv** %mark.057, i64 1
  %6 = load %struct.sv** %incdec.ptr3, align 8, !tbaa !0
  %call4 = tail call %struct.sv* @Perl_newSV(i64 0) #7
  %cmp5 = icmp ult %struct.sv** %incdec.ptr3, %0
  br i1 %cmp5, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %incdec.ptr7 = getelementptr inbounds %struct.sv** %mark.057, i64 2
  %7 = load %struct.sv** %incdec.ptr7, align 8, !tbaa !0
  tail call void @Perl_sv_setsv_flags(%struct.sv* %call4, %struct.sv* %7, i32 2) #7
  br label %if.end28

if.else:                                          ; preds = %while.body
  %8 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %8, i64 0, i32 14
  %9 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp8 = icmp eq %struct.sv* %9, null
  br i1 %cmp8, label %lor.lhs.false19, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %10 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings10 = getelementptr inbounds %struct.cop* %10, i64 0, i32 14
  %11 = load %struct.sv** %cop_warnings10, align 8, !tbaa !0
  %cmp11 = icmp eq %struct.sv* %11, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp11, label %lor.lhs.false19, label %land.lhs.true13

land.lhs.true13:                                  ; preds = %land.lhs.true
  %12 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings14 = getelementptr inbounds %struct.cop* %12, i64 0, i32 14
  %13 = load %struct.sv** %cop_warnings14, align 8, !tbaa !0
  %cmp15 = icmp eq %struct.sv* %13, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp15, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true13
  %14 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings17 = getelementptr inbounds %struct.cop* %14, i64 0, i32 14
  %15 = load %struct.sv** %cop_warnings17, align 8, !tbaa !0
  %sv_any = getelementptr inbounds %struct.sv* %15, i64 0, i32 0
  %16 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_pv = bitcast i8* %16 to i8**
  %17 = load i8** %xpv_pv, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %17, i64 3
  %18 = load i8* %arrayidx, align 1, !tbaa !1
  %and = and i8 %18, 1
  %tobool = icmp eq i8 %and, 0
  br i1 %tobool, label %lor.lhs.false19, label %if.then27

lor.lhs.false19:                                  ; preds = %lor.lhs.false, %land.lhs.true, %if.else
  %19 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings20 = getelementptr inbounds %struct.cop* %19, i64 0, i32 14
  %20 = load %struct.sv** %cop_warnings20, align 8, !tbaa !0
  %cmp21 = icmp eq %struct.sv* %20, null
  br i1 %cmp21, label %land.lhs.true23, label %if.end28

land.lhs.true23:                                  ; preds = %lor.lhs.false19
  %21 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and25 = and i8 %21, 1
  %tobool26 = icmp eq i8 %and25, 0
  br i1 %tobool26, label %if.end28, label %if.then27

if.then27:                                        ; preds = %lor.lhs.false, %land.lhs.true23, %land.lhs.true13
  tail call void (i32, i8*, ...)* @Perl_warner(i32 12, i8* getelementptr inbounds ([41 x i8]* @.str42, i64 0, i64 0)) #7
  br label %if.end28

if.end28:                                         ; preds = %land.lhs.true23, %lor.lhs.false19, %if.then27, %if.then
  %mark.1 = phi %struct.sv** [ %incdec.ptr7, %if.then ], [ %incdec.ptr3, %if.then27 ], [ %incdec.ptr3, %land.lhs.true23 ], [ %incdec.ptr3, %lor.lhs.false19 ]
  %call29 = tail call %struct.he* @Perl_hv_store_ent(%struct.hv* %5, %struct.sv* %6, %struct.sv* %call4, i32 0) #7
  %cmp = icmp ult %struct.sv** %mark.1, %0
  br i1 %cmp, label %while.body, label %while.end

while.end:                                        ; preds = %if.end28, %entry
  %22 = load %struct.sv*** @PL_stack_base, align 8, !tbaa !0
  %add.ptr31 = getelementptr inbounds %struct.sv** %22, i64 %idx.ext
  %23 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast32 = ptrtoint %struct.sv** %23 to i64
  %sub.ptr.rhs.cast33 = ptrtoint %struct.sv** %add.ptr31 to i64
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast33
  %cmp36 = icmp slt i64 %sub.ptr.sub34, 8
  br i1 %cmp36, label %if.then38, label %if.end40

if.then38:                                        ; preds = %while.end
  %call39 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %add.ptr31, %struct.sv** %add.ptr31, i32 1) #7
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %while.end
  %sp.0 = phi %struct.sv** [ %call39, %if.then38 ], [ %add.ptr31, %while.end ]
  %incdec.ptr41 = getelementptr inbounds %struct.sv** %sp.0, i64 1
  store %struct.sv* %call1, %struct.sv** %incdec.ptr41, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr41, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %24 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %24, i64 0, i32 0
  %25 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %25
}
