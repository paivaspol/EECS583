define %struct.op* @Perl_pp_pow() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_flags = getelementptr inbounds %struct.op* %1, i64 0, i32 6
  %2 = load i8* %op_flags, align 1, !tbaa !1
  %and = and i8 %2, 64
  %tobool = icmp eq i8 %and, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.sv** %0, i64 -1
  br label %cond.end

cond.false:                                       ; preds = %entry
  %op_targ = getelementptr inbounds %struct.op* %1, i64 0, i32 3
  %3 = load i64* %op_targ, align 8, !tbaa !3
  %4 = load %struct.sv*** @PL_curpad, align 8, !tbaa !0
  %arrayidx1 = getelementptr inbounds %struct.sv** %4, i64 %3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi %struct.sv** [ %arrayidx, %cond.true ], [ %arrayidx1, %cond.false ]
  %cond = load %struct.sv** %cond.in, align 8
  %5 = load i64* @PL_amagic_generation, align 8, !tbaa !3
  %tobool2 = icmp eq i64 %5, 0
  br i1 %tobool2, label %cond.end.if.end31_crit_edge, label %if.then

cond.end.if.end31_crit_edge:                      ; preds = %cond.end
  %add.ptr32.pre = getelementptr inbounds %struct.sv** %0, i64 -1
  br label %if.end31

if.then:                                          ; preds = %cond.end
  %6 = load %struct.sv** %0, align 8, !tbaa !0
  %add.ptr = getelementptr inbounds %struct.sv** %0, i64 -1
  %7 = load %struct.sv** %add.ptr, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %7, i64 0, i32 2
  %8 = load i32* %sv_flags, align 4, !tbaa !4
  %and3 = and i32 %8, 268435456
  %tobool4 = icmp eq i32 %and3, 0
  br i1 %tobool4, label %lor.lhs.false, label %land.lhs.true

lor.lhs.false:                                    ; preds = %if.then
  %sv_flags5 = getelementptr inbounds %struct.sv* %6, i64 0, i32 2
  %9 = load i32* %sv_flags5, align 4, !tbaa !4
  %and6 = and i32 %9, 268435456
  %tobool7 = icmp eq i32 %and6, 0
  br i1 %tobool7, label %if.end31, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %tobool11 = icmp ne i8 %and, 0
  %cond12 = select i1 %tobool11, i32 4, i32 0
  %call = tail call %struct.sv* @Perl_amagic_call(%struct.sv* %7, %struct.sv* %6, i32 16, i32 %cond12) #7
  %tobool13 = icmp eq %struct.sv* %call, null
  br i1 %tobool13, label %if.end31, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  %10 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds %struct.sv** %10, i64 -1
  %11 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_flags15 = getelementptr inbounds %struct.op* %11, i64 0, i32 6
  %12 = load i8* %op_flags15, align 1, !tbaa !1
  %and17 = and i8 %12, 64
  %tobool18 = icmp eq i8 %and17, 0
  %sv_flags20 = getelementptr inbounds %struct.sv* %cond, i64 0, i32 2
  br i1 %tobool18, label %lor.lhs.false19, label %if.then23

lor.lhs.false19:                                  ; preds = %if.then14
  %13 = load i32* %sv_flags20, align 4, !tbaa !4
  %and21 = and i32 %13, 1024
  %tobool22 = icmp eq i32 %and21, 0
  br i1 %tobool22, label %if.end29, label %if.then23

if.then23:                                        ; preds = %if.then14, %lor.lhs.false19
  tail call void @Perl_sv_setsv_flags(%struct.sv* %cond, %struct.sv* %call, i32 2) #7
  %14 = load i32* %sv_flags20, align 4, !tbaa !4
  %and25 = and i32 %14, 16384
  %tobool26 = icmp eq i32 %and25, 0
  br i1 %tobool26, label %if.end29, label %if.then27

if.then27:                                        ; preds = %if.then23
  %call28 = tail call i32 @Perl_mg_set(%struct.sv* %cond) #7
  br label %if.end29

if.end29:                                         ; preds = %lor.lhs.false19, %if.then27, %if.then23
  %storemerge = phi %struct.sv* [ %cond, %if.then23 ], [ %cond, %if.then27 ], [ %call, %lor.lhs.false19 ]
  store %struct.sv* %storemerge, %struct.sv** %incdec.ptr, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %15 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %15, i64 0, i32 0
  br label %return

if.end31:                                         ; preds = %land.lhs.true, %cond.end.if.end31_crit_edge, %lor.lhs.false
  %add.ptr32.pre-phi = phi %struct.sv** [ %add.ptr32.pre, %cond.end.if.end31_crit_edge ], [ %add.ptr, %lor.lhs.false ], [ %add.ptr, %land.lhs.true ]
  %16 = load %struct.sv** %add.ptr32.pre-phi, align 8, !tbaa !0
  %sv_flags33 = getelementptr inbounds %struct.sv* %16, i64 0, i32 2
  %17 = load i32* %sv_flags33, align 4, !tbaa !4
  %and34 = and i32 %17, 16777216
  %tobool35 = icmp eq i32 %and34, 0
  br i1 %tobool35, label %land.lhs.true36, label %if.end58

land.lhs.true36:                                  ; preds = %if.end31
  %18 = and i32 %17, 393216
  %or.cond.not = icmp ne i32 %18, 0
  %and49 = and i32 %17, 65536
  %tobool50 = icmp eq i32 %and49, 0
  %or.cond450 = and i1 %or.cond.not, %tobool50
  br i1 %or.cond450, label %cond.false53, label %if.end58

cond.false53:                                     ; preds = %land.lhs.true36
  %call55 = tail call i64 @Perl_sv_2iv(%struct.sv* %16) #7
  %.pre = load %struct.sv** %add.ptr32.pre-phi, align 8, !tbaa !0
  %sv_flags60.phi.trans.insert = getelementptr inbounds %struct.sv* %.pre, i64 0, i32 2
  %.pre470 = load i32* %sv_flags60.phi.trans.insert, align 4, !tbaa !4
  br label %if.end58

if.end58:                                         ; preds = %land.lhs.true36, %if.end31, %cond.false53
  %19 = phi i32 [ %17, %land.lhs.true36 ], [ %17, %if.end31 ], [ %.pre470, %cond.false53 ]
  %20 = phi %struct.sv* [ %16, %land.lhs.true36 ], [ %16, %if.end31 ], [ %.pre, %cond.false53 ]
  %and61 = and i32 %19, 65536
  %tobool62 = icmp eq i32 %and61, 0
  br i1 %tobool62, label %if.end58.float_it_crit_edge, label %if.then63

if.end58.float_it_crit_edge:                      ; preds = %if.end58
  %.pre474 = load %struct.sv** %0, align 8, !tbaa !0
  %sv_flags278.phi.trans.insert = getelementptr inbounds %struct.sv* %.pre474, i64 0, i32 2
  %.pre475 = load i32* %sv_flags278.phi.trans.insert, align 4, !tbaa !4
  br label %float_it

if.then63:                                        ; preds = %if.end58
  %and66 = and i32 %19, -2147418112
  %cmp = icmp eq i32 %and66, -2147418112
  %conv68 = zext i1 %cmp to i8
  %sv_any72 = getelementptr inbounds %struct.sv* %20, i64 0, i32 0
  %21 = load i8** %sv_any72, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %21, i64 24
  %22 = bitcast i8* %xuv_uv to i64*
  %23 = load i64* %22, align 8, !tbaa !3
  br i1 %cmp, label %if.end82, label %if.else73

if.else73:                                        ; preds = %if.then63
  %cmp77 = icmp sgt i64 %23, -1
  %sub = sub nsw i64 0, %23
  %.sub = select i1 %cmp77, i64 %23, i64 %sub
  %.conv68 = select i1 %cmp77, i8 1, i8 %conv68
  br label %if.end82

if.end82:                                         ; preds = %if.then63, %if.else73
  %baseuv.0 = phi i64 [ %.sub, %if.else73 ], [ %23, %if.then63 ]
  %baseuok.0 = phi i8 [ %.conv68, %if.else73 ], [ %conv68, %if.then63 ]
  %24 = load %struct.sv** %0, align 8, !tbaa !0
  %sv_flags83 = getelementptr inbounds %struct.sv* %24, i64 0, i32 2
  %25 = load i32* %sv_flags83, align 4, !tbaa !4
  %and84 = and i32 %25, 16777216
  %tobool85 = icmp eq i32 %and84, 0
  br i1 %tobool85, label %land.lhs.true86, label %if.end105

land.lhs.true86:                                  ; preds = %if.end82
  %26 = and i32 %25, 393216
  %or.cond446.not = icmp ne i32 %26, 0
  %and96 = and i32 %25, 65536
  %tobool97 = icmp eq i32 %and96, 0
  %or.cond451 = and i1 %or.cond446.not, %tobool97
  br i1 %or.cond451, label %cond.false101, label %if.end105

cond.false101:                                    ; preds = %land.lhs.true86
  %call102 = tail call i64 @Perl_sv_2iv(%struct.sv* %24) #7
  %.pre471 = load %struct.sv** %0, align 8, !tbaa !0
  %sv_flags106.phi.trans.insert = getelementptr inbounds %struct.sv* %.pre471, i64 0, i32 2
  %.pre472 = load i32* %sv_flags106.phi.trans.insert, align 4, !tbaa !4
  br label %if.end105

if.end105:                                        ; preds = %land.lhs.true86, %if.end82, %cond.false101
  %27 = phi i32 [ %25, %land.lhs.true86 ], [ %25, %if.end82 ], [ %.pre472, %cond.false101 ]
  %28 = phi %struct.sv* [ %24, %land.lhs.true86 ], [ %24, %if.end82 ], [ %.pre471, %cond.false101 ]
  %and107 = and i32 %27, 65536
  %tobool108 = icmp eq i32 %and107, 0
  br i1 %tobool108, label %float_it, label %if.then109

if.then109:                                       ; preds = %if.end105
  %and111 = and i32 %27, -2147418112
  %cmp112 = icmp eq i32 %and111, -2147418112
  %sv_any115 = getelementptr inbounds %struct.sv* %28, i64 0, i32 0
  %29 = load i8** %sv_any115, align 8, !tbaa !0
  %xuv_uv116 = getelementptr inbounds i8* %29, i64 24
  %30 = bitcast i8* %xuv_uv116 to i64*
  %31 = load i64* %30, align 8, !tbaa !3
  %cmp121 = icmp sgt i64 %31, -1
  %or.cond449 = or i1 %cmp112, %cmp121
  br i1 %or.cond449, label %if.end126, label %float_it

if.end126:                                        ; preds = %if.then109
  %sub127 = add i64 %baseuv.0, -1
  %and128 = and i64 %sub127, %baseuv.0
  %tobool129 = icmp eq i64 %and128, 0
  br i1 %tobool129, label %if.then130, label %while.body

if.then130:                                       ; preds = %if.end126
  %tobool132 = icmp eq i8 %baseuok.0, 0
  %conv134 = uitofp i64 %baseuv.0 to double
  br i1 %tobool132, label %cond.false135, label %for.cond.preheader

cond.false135:                                    ; preds = %if.then130
  %sub137 = fsub double -0.000000e+00, %conv134
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then130, %cond.false135
  %base.0.ph = phi double [ %sub137, %cond.false135 ], [ %conv134, %if.then130 ]
  %tobool140454 = icmp eq i64 %31, 0
  br i1 %tobool140454, label %for.end, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.cond.preheader ]
  %power.1458 = phi i64 [ %power.2, %for.inc ], [ %31, %for.cond.preheader ]
  %base.0456 = phi double [ %mul151, %for.inc ], [ %base.0.ph, %for.cond.preheader ]
  %result.0455 = phi double [ %result.1, %for.inc ], [ 1.000000e+00, %for.cond.preheader ]
  %shl = shl i64 1, %indvars.iv
  %and142 = and i64 %shl, %power.1458
  %tobool143 = icmp eq i64 %and142, 0
  br i1 %tobool143, label %for.inc, label %if.then144

if.then144:                                       ; preds = %for.body
  %mul = fmul double %result.0455, %base.0456
  %sub145 = sub i64 %power.1458, %shl
  %cmp146 = icmp eq i64 %power.1458, %shl
  br i1 %cmp146, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body, %if.then144
  %result.1 = phi double [ %mul, %if.then144 ], [ %result.0455, %for.body ]
  %power.2 = phi i64 [ %sub145, %if.then144 ], [ %power.1458, %for.body ]
  %mul151 = fmul double %base.0456, %base.0456
  %indvars.iv.next = add i64 %indvars.iv, 1
  %tobool140 = icmp eq i64 %power.2, 0
  br i1 %tobool140, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.then144, %for.cond.preheader
  %result.2 = phi double [ 1.000000e+00, %for.cond.preheader ], [ %mul, %if.then144 ], [ %result.1, %for.inc ]
  tail call void @Perl_sv_setnv(%struct.sv* %cond, double %result.2) #7
  %sv_flags153 = getelementptr inbounds %struct.sv* %cond, i64 0, i32 2
  %32 = load i32* %sv_flags153, align 4, !tbaa !4
  %and154 = and i32 %32, 16384
  %tobool155 = icmp eq i32 %and154, 0
  br i1 %tobool155, label %if.end158, label %if.then156

if.then156:                                       ; preds = %for.end
  %call157 = tail call i32 @Perl_mg_set(%struct.sv* %cond) #7
  %.pre473 = load i32* %sv_flags153, align 4, !tbaa !4
  br label %if.end158

if.end158:                                        ; preds = %for.end, %if.then156
  %33 = phi i32 [ %32, %for.end ], [ %.pre473, %if.then156 ]
  store %struct.sv* %cond, %struct.sv** %add.ptr32.pre-phi, align 8, !tbaa !0
  %and160 = and i32 %33, 16777216
  %tobool161 = icmp eq i32 %and160, 0
  br i1 %tobool161, label %land.lhs.true162, label %if.end181

land.lhs.true162:                                 ; preds = %if.end158
  %34 = and i32 %33, 393216
  %or.cond447.not = icmp ne i32 %34, 0
  %and172 = and i32 %33, 65536
  %tobool173 = icmp eq i32 %and172, 0
  %or.cond452 = and i1 %or.cond447.not, %tobool173
  br i1 %or.cond452, label %cond.false177, label %if.end181

cond.false177:                                    ; preds = %land.lhs.true162
  %call178 = tail call i64 @Perl_sv_2iv(%struct.sv* %cond) #7
  br label %if.end181

if.end181:                                        ; preds = %land.lhs.true162, %if.end158, %cond.false177
  store %struct.sv** %add.ptr32.pre-phi, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %35 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next182 = getelementptr inbounds %struct.op* %35, i64 0, i32 0
  br label %return

while.body:                                       ; preds = %if.end126, %while.body
  %shr467 = phi i32 [ %shr, %while.body ], [ 32, %if.end126 ]
  %lowbit.0466 = phi i32 [ %lowbit.0.add, %while.body ], [ 0, %if.end126 ]
  %highbit.0465 = phi i32 [ %sub196.highbit.0, %while.body ], [ 64, %if.end126 ]
  %add = add i32 %shr467, %lowbit.0466
  %neg = shl i32 -1, %add
  %conv190 = sext i32 %neg to i64
  %and191 = and i64 %conv190, %baseuv.0
  %tobool192 = icmp eq i64 %and191, 0
  %sub196 = select i1 %tobool192, i32 %shr467, i32 0
  %sub196.highbit.0 = sub i32 %highbit.0465, %sub196
  %lowbit.0.add = select i1 %tobool192, i32 %lowbit.0466, i32 %add
  %sub186 = sub i32 %sub196.highbit.0, %lowbit.0.add
  %shr = lshr i32 %sub186, 1
  %tobool187 = icmp eq i32 %shr, 0
  br i1 %tobool187, label %while.end, label %while.body

while.end:                                        ; preds = %while.body
  %conv198 = zext i32 %sub196.highbit.0 to i64
  %mul199 = mul i64 %conv198, %31
  %cmp200 = icmp ult i64 %mul199, 65
  br i1 %cmp200, label %for.cond206.preheader, label %float_it

for.cond206.preheader:                            ; preds = %while.end
  %tobool207459 = icmp eq i64 %31, 0
  br i1 %tobool207459, label %for.end225, label %for.body208

for.body208:                                      ; preds = %for.cond206.preheader, %for.inc222
  %indvars.iv468 = phi i64 [ %indvars.iv.next469, %for.inc222 ], [ 0, %for.cond206.preheader ]
  %base204.0462 = phi i64 [ %mul223, %for.inc222 ], [ %baseuv.0, %for.cond206.preheader ]
  %result203.0461 = phi i64 [ %result203.1, %for.inc222 ], [ 1, %for.cond206.preheader ]
  %power.3460 = phi i64 [ %power.4, %for.inc222 ], [ %31, %for.cond206.preheader ]
  %shl211 = shl i64 1, %indvars.iv468
  %and212 = and i64 %shl211, %power.3460
  %tobool213 = icmp eq i64 %and212, 0
  br i1 %tobool213, label %for.inc222, label %if.then214

if.then214:                                       ; preds = %for.body208
  %mul215 = mul i64 %base204.0462, %result203.0461
  %sub216 = sub i64 %power.3460, %shl211
  %cmp217 = icmp eq i64 %power.3460, %shl211
  br i1 %cmp217, label %for.end225, label %for.inc222

for.inc222:                                       ; preds = %for.body208, %if.then214
  %power.4 = phi i64 [ %sub216, %if.then214 ], [ %power.3460, %for.body208 ]
  %result203.1 = phi i64 [ %mul215, %if.then214 ], [ %result203.0461, %for.body208 ]
  %mul223 = mul i64 %base204.0462, %base204.0462
  %indvars.iv.next469 = add i64 %indvars.iv468, 1
  %tobool207 = icmp eq i64 %power.4, 0
  br i1 %tobool207, label %for.end225, label %for.body208

for.end225:                                       ; preds = %for.inc222, %if.then214, %for.cond206.preheader
  %result203.2 = phi i64 [ 1, %for.cond206.preheader ], [ %mul215, %if.then214 ], [ %result203.1, %for.inc222 ]
  %tobool228 = icmp eq i8 %baseuok.0, 0
  br i1 %tobool228, label %lor.lhs.false229, label %if.then231

lor.lhs.false229:                                 ; preds = %for.end225
  %conv185 = and i64 %31, 1
  %tobool230 = icmp eq i64 %conv185, 0
  br i1 %tobool230, label %if.then231, label %if.else238

if.then231:                                       ; preds = %lor.lhs.false229, %for.end225
  tail call void @Perl_sv_setuv(%struct.sv* %cond, i64 %result203.2) #7
  %sv_flags232 = getelementptr inbounds %struct.sv* %cond, i64 0, i32 2
  %36 = load i32* %sv_flags232, align 4, !tbaa !4
  %and233 = and i32 %36, 16384
  %tobool234 = icmp eq i32 %and233, 0
  br i1 %tobool234, label %if.end237, label %if.then235

if.then235:                                       ; preds = %if.then231
  %call236 = tail call i32 @Perl_mg_set(%struct.sv* %cond) #7
  br label %if.end237

if.end237:                                        ; preds = %if.then231, %if.then235
  store %struct.sv* %cond, %struct.sv** %add.ptr32.pre-phi, align 8, !tbaa !0
  br label %if.end270

if.else238:                                       ; preds = %lor.lhs.false229
  %cmp239 = icmp sgt i64 %result203.2, -1
  br i1 %cmp239, label %if.then241, label %if.else249

if.then241:                                       ; preds = %if.else238
  %sub242 = sub nsw i64 0, %result203.2
  tail call void @Perl_sv_setiv(%struct.sv* %cond, i64 %sub242) #7
  %sv_flags243 = getelementptr inbounds %struct.sv* %cond, i64 0, i32 2
  %37 = load i32* %sv_flags243, align 4, !tbaa !4
  %and244 = and i32 %37, 16384
  %tobool245 = icmp eq i32 %and244, 0
  br i1 %tobool245, label %if.end248, label %if.then246

if.then246:                                       ; preds = %if.then241
  %call247 = tail call i32 @Perl_mg_set(%struct.sv* %cond) #7
  br label %if.end248

if.end248:                                        ; preds = %if.then241, %if.then246
  store %struct.sv* %cond, %struct.sv** %add.ptr32.pre-phi, align 8, !tbaa !0
  br label %if.end270

if.else249:                                       ; preds = %if.else238
  %cmp250 = icmp eq i64 %result203.2, -9223372036854775808
  br i1 %cmp250, label %if.then252, label %if.else259

if.then252:                                       ; preds = %if.else249
  tail call void @Perl_sv_setiv(%struct.sv* %cond, i64 -9223372036854775808) #7
  %sv_flags253 = getelementptr inbounds %struct.sv* %cond, i64 0, i32 2
  %38 = load i32* %sv_flags253, align 4, !tbaa !4
  %and254 = and i32 %38, 16384
  %tobool255 = icmp eq i32 %and254, 0
  br i1 %tobool255, label %if.end258, label %if.then256

if.then256:                                       ; preds = %if.then252
  %call257 = tail call i32 @Perl_mg_set(%struct.sv* %cond) #7
  br label %if.end258

if.end258:                                        ; preds = %if.then252, %if.then256
  store %struct.sv* %cond, %struct.sv** %add.ptr32.pre-phi, align 8, !tbaa !0
  br label %if.end270

if.else259:                                       ; preds = %if.else249
  %conv260 = uitofp i64 %result203.2 to double
  %sub261 = fsub double -0.000000e+00, %conv260
  tail call void @Perl_sv_setnv(%struct.sv* %cond, double %sub261) #7
  %sv_flags262 = getelementptr inbounds %struct.sv* %cond, i64 0, i32 2
  %39 = load i32* %sv_flags262, align 4, !tbaa !4
  %and263 = and i32 %39, 16384
  %tobool264 = icmp eq i32 %and263, 0
  br i1 %tobool264, label %if.end267, label %if.then265

if.then265:                                       ; preds = %if.else259
  %call266 = tail call i32 @Perl_mg_set(%struct.sv* %cond) #7
  br label %if.end267

if.end267:                                        ; preds = %if.else259, %if.then265
  store %struct.sv* %cond, %struct.sv** %add.ptr32.pre-phi, align 8, !tbaa !0
  br label %if.end270

if.end270:                                        ; preds = %if.end248, %if.end267, %if.end258, %if.end237
  store %struct.sv** %add.ptr32.pre-phi, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %40 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next271 = getelementptr inbounds %struct.op* %40, i64 0, i32 0
  br label %return

float_it:                                         ; preds = %if.end58.float_it_crit_edge, %if.then109, %if.end105, %while.end
  %41 = phi i32 [ %27, %while.end ], [ %27, %if.end105 ], [ %.pre475, %if.end58.float_it_crit_edge ], [ %27, %if.then109 ]
  %42 = phi %struct.sv* [ %28, %while.end ], [ %28, %if.end105 ], [ %.pre474, %if.end58.float_it_crit_edge ], [ %28, %if.then109 ]
  %is_int.0 = phi i8 [ 1, %while.end ], [ 0, %if.end105 ], [ 0, %if.end58.float_it_crit_edge ], [ 0, %if.then109 ]
  store %struct.sv* %42, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %and279 = and i32 %41, 131072
  %tobool280 = icmp eq i32 %and279, 0
  br i1 %tobool280, label %cond.false283, label %cond.true281

cond.true281:                                     ; preds = %float_it
  %sv_any282 = getelementptr inbounds %struct.sv* %42, i64 0, i32 0
  %43 = load i8** %sv_any282, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %43, i64 32
  %44 = bitcast i8* %xnv_nv to double*
  %45 = load double* %44, align 8, !tbaa !6
  br label %cond.end285

cond.false283:                                    ; preds = %float_it
  %call284 = tail call double @Perl_sv_2nv(%struct.sv* %42) #7
  br label %cond.end285

cond.end285:                                      ; preds = %cond.false283, %cond.true281
  %cond286 = phi double [ %45, %cond.true281 ], [ %call284, %cond.false283 ]
  %46 = load %struct.sv** %add.ptr32.pre-phi, align 8, !tbaa !0
  %sv_flags288 = getelementptr inbounds %struct.sv* %46, i64 0, i32 2
  %47 = load i32* %sv_flags288, align 4, !tbaa !4
  %and289 = and i32 %47, 131072
  %tobool290 = icmp eq i32 %and289, 0
  br i1 %tobool290, label %cond.false294, label %cond.true291

cond.true291:                                     ; preds = %cond.end285
  %sv_any292 = getelementptr inbounds %struct.sv* %46, i64 0, i32 0
  %48 = load i8** %sv_any292, align 8, !tbaa !0
  %xnv_nv293 = getelementptr inbounds i8* %48, i64 32
  %49 = bitcast i8* %xnv_nv293 to double*
  %50 = load double* %49, align 8, !tbaa !6
  br label %cond.end296

cond.false294:                                    ; preds = %cond.end285
  %call295 = tail call double @Perl_sv_2nv(%struct.sv* %46) #7
  br label %cond.end296

cond.end296:                                      ; preds = %cond.false294, %cond.true291
  %cond297 = phi double [ %50, %cond.true291 ], [ %call295, %cond.false294 ]
  %call298 = tail call double @pow(double %cond297, double %cond286) #7
  tail call void @Perl_sv_setnv(%struct.sv* %cond, double %call298) #7
  %sv_flags299 = getelementptr inbounds %struct.sv* %cond, i64 0, i32 2
  %51 = load i32* %sv_flags299, align 4, !tbaa !4
  %and300 = and i32 %51, 16384
  %tobool301 = icmp eq i32 %and300, 0
  br i1 %tobool301, label %if.end304, label %if.then302

if.then302:                                       ; preds = %cond.end296
  %call303 = tail call i32 @Perl_mg_set(%struct.sv* %cond) #7
  br label %if.end304

if.end304:                                        ; preds = %cond.end296, %if.then302
  store %struct.sv* %cond, %struct.sv** %add.ptr32.pre-phi, align 8, !tbaa !0
  %tobool305 = icmp eq i8 %is_int.0, 0
  br i1 %tobool305, label %if.end330, label %if.then306

if.then306:                                       ; preds = %if.end304
  %52 = load i32* %sv_flags299, align 4, !tbaa !4
  %and308 = and i32 %52, 16777216
  %tobool309 = icmp eq i32 %and308, 0
  br i1 %tobool309, label %land.lhs.true310, label %if.end330

land.lhs.true310:                                 ; preds = %if.then306
  %53 = and i32 %52, 393216
  %or.cond448.not = icmp ne i32 %53, 0
  %and320 = and i32 %52, 65536
  %tobool321 = icmp eq i32 %and320, 0
  %or.cond453 = and i1 %or.cond448.not, %tobool321
  br i1 %or.cond453, label %cond.false325, label %if.end330

cond.false325:                                    ; preds = %land.lhs.true310
  %call326 = tail call i64 @Perl_sv_2iv(%struct.sv* %cond) #7
  br label %if.end330

if.end330:                                        ; preds = %land.lhs.true310, %if.then306, %if.end304, %cond.false325
  store %struct.sv** %add.ptr32.pre-phi, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %54 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next331 = getelementptr inbounds %struct.op* %54, i64 0, i32 0
  br label %return

return:                                           ; preds = %if.end330, %if.end270, %if.end181, %if.end29
  %retval.0.in = phi %struct.op** [ %op_next, %if.end29 ], [ %op_next271, %if.end270 ], [ %op_next331, %if.end330 ], [ %op_next182, %if.end181 ]
  %retval.0 = load %struct.op** %retval.0.in, align 8
  ret %struct.op* %retval.0
}
