define %struct.op* @Perl_pp_stub() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_flags = getelementptr inbounds %struct.op* %1, i64 0, i32 6
  %2 = load i8* %op_flags, align 1, !tbaa !1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  switch i32 %and, label %cond.false15 [
    i32 1, label %if.end26
    i32 2, label %if.then
    i32 3, label %if.end26
  ]

cond.false15:                                     ; preds = %entry
  %call = tail call i32 @Perl_block_gimme() #7
  %phitmp = icmp eq i32 %call, 0
  br i1 %phitmp, label %if.then, label %if.end26

if.then:                                          ; preds = %entry, %cond.false15
  %3 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %3 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp22 = icmp slt i64 %sub.ptr.sub, 8
  br i1 %cmp22, label %if.then24, label %if.end

if.then24:                                        ; preds = %if.then
  %call25 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %0, %struct.sv** %0, i32 1) #7
  br label %if.end

if.end:                                           ; preds = %if.then24, %if.then
  %sp.0 = phi %struct.sv** [ %call25, %if.then24 ], [ %0, %if.then ]
  %incdec.ptr = getelementptr inbounds %struct.sv** %sp.0, i64 1
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr, align 8, !tbaa !0
  br label %if.end26

if.end26:                                         ; preds = %cond.false15, %entry, %entry, %if.end
  %sp.1 = phi %struct.sv** [ %incdec.ptr, %if.end ], [ %0, %entry ], [ %0, %entry ], [ %0, %cond.false15 ]
  store %struct.sv** %sp.1, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %4 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %4, i64 0, i32 0
  %5 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %5
}
