define %struct.op* @Perl_pp_rand() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_targ = getelementptr inbounds %struct.op* %1, i64 0, i32 3
  %2 = load i64* %op_targ, align 8, !tbaa !3
  %3 = load %struct.sv*** @PL_curpad, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.sv** %3, i64 %2
  %4 = load %struct.sv** %arrayidx, align 8, !tbaa !0
  %op_private = getelementptr inbounds %struct.op* %1, i64 0, i32 7
  %5 = load i8* %op_private, align 1, !tbaa !1
  %and = and i8 %5, 15
  %cmp = icmp eq i8 %and, 0
  br i1 %cmp, label %if.end, label %if.else

if.else:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds %struct.sv** %0, i64 -1
  %6 = load %struct.sv** %0, align 8, !tbaa !0
  store %struct.sv* %6, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %6, i64 0, i32 2
  %7 = load i32* %sv_flags, align 4, !tbaa !4
  %and2 = and i32 %7, 131072
  %tobool = icmp eq i32 %and2, 0
  br i1 %tobool, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.else
  %sv_any = getelementptr inbounds %struct.sv* %6, i64 0, i32 0
  %8 = load i8** %sv_any, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %8, i64 32
  %9 = bitcast i8* %xnv_nv to double*
  %10 = load double* %9, align 8, !tbaa !6
  br label %if.end

cond.false:                                       ; preds = %if.else
  %call = tail call double @Perl_sv_2nv(%struct.sv* %6) #7
  br label %if.end

if.end:                                           ; preds = %cond.true, %cond.false, %entry
  %sp.0 = phi %struct.sv** [ %0, %entry ], [ %incdec.ptr, %cond.false ], [ %incdec.ptr, %cond.true ]
  %value.0 = phi double [ 1.000000e+00, %entry ], [ %call, %cond.false ], [ %10, %cond.true ]
  %cmp3 = fcmp oeq double %value.0, 0.000000e+00
  %value.1 = select i1 %cmp3, double 1.000000e+00, double %value.0
  %11 = load i8* @PL_srand_called, align 1, !tbaa !1
  %tobool7 = icmp eq i8 %11, 0
  br i1 %tobool7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.end
  %call9 = tail call i32 @Perl_seed() #7
  tail call void @spec_srand(i32 %call9) #7
  store i8 1, i8* @PL_srand_called, align 1, !tbaa !1
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then8
  %call11 = tail call double @spec_rand() #7
  %mul = fmul double %value.1, %call11
  tail call void @Perl_sv_setnv(%struct.sv* %4, double %mul) #7
  %sv_flags12 = getelementptr inbounds %struct.sv* %4, i64 0, i32 2
  %12 = load i32* %sv_flags12, align 4, !tbaa !4
  %and13 = and i32 %12, 16384
  %tobool14 = icmp eq i32 %and13, 0
  br i1 %tobool14, label %if.end17, label %if.then15

if.then15:                                        ; preds = %if.end10
  %call16 = tail call i32 @Perl_mg_set(%struct.sv* %4) #7
  br label %if.end17

if.end17:                                         ; preds = %if.end10, %if.then15
  %13 = load %struct.sv*** @PL_stack_max, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %sp.0 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp18 = icmp slt i64 %sub.ptr.sub, 8
  br i1 %cmp18, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end17
  %call21 = tail call %struct.sv** @Perl_stack_grow(%struct.sv** %sp.0, %struct.sv** %sp.0, i32 1) #7
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %if.end17
  %sp.1 = phi %struct.sv** [ %call21, %if.then20 ], [ %sp.0, %if.end17 ]
  %incdec.ptr23 = getelementptr inbounds %struct.sv** %sp.1, i64 1
  store %struct.sv* %4, %struct.sv** %incdec.ptr23, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr23, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %14 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %14, i64 0, i32 0
  %15 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %15
}
