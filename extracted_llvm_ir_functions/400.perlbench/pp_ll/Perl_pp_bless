define %struct.op* @Perl_pp_bless() #0 {
entry:
  %len = alloca i64, align 8
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_private = getelementptr inbounds %struct.op* %1, i64 0, i32 7
  %2 = load i8* %op_private, align 1, !tbaa !1
  %and = and i8 %2, 15
  %cmp = icmp eq i8 %and, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_stash = getelementptr inbounds %struct.cop* %3, i64 0, i32 9
  %4 = load %struct.hv** %cop_stash, align 8, !tbaa !0
  br label %if.end49

if.else:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds %struct.sv** %0, i64 -1
  %5 = load %struct.sv** %0, align 8, !tbaa !0
  %tobool = icmp eq %struct.sv* %5, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %sv_flags = getelementptr inbounds %struct.sv* %5, i64 0, i32 2
  %6 = load i32* %sv_flags, align 4, !tbaa !4
  %7 = and i32 %6, 268967936
  %8 = icmp eq i32 %7, 524288
  br i1 %8, label %if.then12, label %if.end

if.then12:                                        ; preds = %land.lhs.true
  call void (i8*, ...)* @Perl_croak(i8* getelementptr inbounds ([34 x i8]* @.str13, i64 0, i64 0)) #7
  br label %if.end

if.end:                                           ; preds = %if.else, %land.lhs.true, %if.then12
  %sv_flags13.pre-phi = phi i32* [ %sv_flags, %land.lhs.true ], [ %sv_flags, %if.then12 ], [ inttoptr (i64 12 to i32*), %if.else ]
  %9 = load i32* %sv_flags13.pre-phi, align 4, !tbaa !4
  %and14 = and i32 %9, 262144
  %cmp15 = icmp eq i32 %and14, 0
  br i1 %cmp15, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end
  %sv_any = getelementptr inbounds %struct.sv* %5, i64 0, i32 0
  %10 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %10, i64 8
  %11 = bitcast i8* %xpv_cur to i64*
  %12 = load i64* %11, align 8, !tbaa !3
  store i64 %12, i64* %len, align 8, !tbaa !3
  %xpv_pv = bitcast i8* %10 to i8**
  %13 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %5, i64* %len, i32 2) #7
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %13, %cond.true ], [ %call, %cond.false ]
  %14 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings = getelementptr inbounds %struct.cop* %14, i64 0, i32 14
  %15 = load %struct.sv** %cop_warnings, align 8, !tbaa !0
  %cmp18 = icmp eq %struct.sv* %15, null
  br i1 %cmp18, label %lor.lhs.false34, label %land.lhs.true20

land.lhs.true20:                                  ; preds = %cond.end
  %16 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings21 = getelementptr inbounds %struct.cop* %16, i64 0, i32 14
  %17 = load %struct.sv** %cop_warnings21, align 8, !tbaa !0
  %cmp22 = icmp eq %struct.sv* %17, inttoptr (i64 32 to %struct.sv*)
  br i1 %cmp22, label %lor.lhs.false34, label %land.lhs.true24

land.lhs.true24:                                  ; preds = %land.lhs.true20
  %18 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings25 = getelementptr inbounds %struct.cop* %18, i64 0, i32 14
  %19 = load %struct.sv** %cop_warnings25, align 8, !tbaa !0
  %cmp26 = icmp eq %struct.sv* %19, inttoptr (i64 16 to %struct.sv*)
  br i1 %cmp26, label %land.lhs.true42, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true24
  %20 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings28 = getelementptr inbounds %struct.cop* %20, i64 0, i32 14
  %21 = load %struct.sv** %cop_warnings28, align 8, !tbaa !0
  %sv_any29 = getelementptr inbounds %struct.sv* %21, i64 0, i32 0
  %22 = load i8** %sv_any29, align 8, !tbaa !0
  %xpv_pv30 = bitcast i8* %22 to i8**
  %23 = load i8** %xpv_pv30, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i8* %23, i64 3
  %24 = load i8* %arrayidx, align 1, !tbaa !1
  %and32 = and i8 %24, 1
  %tobool33 = icmp eq i8 %and32, 0
  br i1 %tobool33, label %lor.lhs.false34, label %land.lhs.true42

lor.lhs.false34:                                  ; preds = %lor.lhs.false, %land.lhs.true20, %cond.end
  %25 = load volatile %struct.cop** @PL_curcop, align 8, !tbaa !0
  %cop_warnings35 = getelementptr inbounds %struct.cop* %25, i64 0, i32 14
  %26 = load %struct.sv** %cop_warnings35, align 8, !tbaa !0
  %cmp36 = icmp eq %struct.sv* %26, null
  br i1 %cmp36, label %land.lhs.true38, label %if.end46

land.lhs.true38:                                  ; preds = %lor.lhs.false34
  %27 = load i8* @PL_dowarn, align 1, !tbaa !1
  %and40 = and i8 %27, 1
  %tobool41 = icmp eq i8 %and40, 0
  br i1 %tobool41, label %if.end46, label %land.lhs.true42

land.lhs.true42:                                  ; preds = %lor.lhs.false, %land.lhs.true38, %land.lhs.true24
  %28 = load i64* %len, align 8, !tbaa !3
  %cmp43 = icmp eq i64 %28, 0
  br i1 %cmp43, label %if.then45, label %if.end46

if.then45:                                        ; preds = %land.lhs.true42
  call void (i32, i8*, ...)* @Perl_warner(i32 12, i8* getelementptr inbounds ([48 x i8]* @.str14, i64 0, i64 0)) #7
  br label %if.end46

if.end46:                                         ; preds = %land.lhs.true38, %lor.lhs.false34, %if.then45, %land.lhs.true42
  %29 = load i64* %len, align 8, !tbaa !3
  %conv47 = trunc i64 %29 to i32
  %call48 = call %struct.hv* @Perl_gv_stashpvn(i8* %cond, i32 %conv47, i32 1) #7
  br label %if.end49

if.end49:                                         ; preds = %if.end46, %if.then
  %stash.0 = phi %struct.hv* [ %4, %if.then ], [ %call48, %if.end46 ]
  %sp.0 = phi %struct.sv** [ %0, %if.then ], [ %incdec.ptr, %if.end46 ]
  %30 = load %struct.sv** %sp.0, align 8, !tbaa !0
  %call50 = call %struct.sv* @Perl_sv_bless(%struct.sv* %30, %struct.hv* %stash.0) #7
  store %struct.sv** %sp.0, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %31 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %31, i64 0, i32 0
  %32 = load %struct.op** %op_next, align 8, !tbaa !0
  ret %struct.op* %32
}
