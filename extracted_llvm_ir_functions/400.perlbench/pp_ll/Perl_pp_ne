define %struct.op* @Perl_pp_ne() #0 {
entry:
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load i64* @PL_amagic_generation, align 8, !tbaa !3
  %tobool = icmp eq i64 %1, 0
  br i1 %tobool, label %if.end7, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct.sv** %0, align 8, !tbaa !0
  %add.ptr = getelementptr inbounds %struct.sv** %0, i64 -1
  %3 = load %struct.sv** %add.ptr, align 8, !tbaa !0
  %sv_flags = getelementptr inbounds %struct.sv* %3, i64 0, i32 2
  %4 = load i32* %sv_flags, align 4, !tbaa !4
  %and = and i32 %4, 268435456
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %lor.lhs.false, label %land.lhs.true

lor.lhs.false:                                    ; preds = %if.then
  %sv_flags2 = getelementptr inbounds %struct.sv* %2, i64 0, i32 2
  %5 = load i32* %sv_flags2, align 4, !tbaa !4
  %and3 = and i32 %5, 268435456
  %tobool4 = icmp eq i32 %and3, 0
  br i1 %tobool4, label %if.end7, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.then
  %call = tail call %struct.sv* @Perl_amagic_call(%struct.sv* %3, %struct.sv* %2, i32 33, i32 0) #7
  %tobool5 = icmp eq %struct.sv* %call, null
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %land.lhs.true
  %6 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %incdec.ptr = getelementptr inbounds %struct.sv** %6, i64 -1
  store %struct.sv* %call, %struct.sv** %incdec.ptr, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %7 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %7, i64 0, i32 0
  br label %return

if.end7:                                          ; preds = %land.lhs.true, %entry, %lor.lhs.false
  %8 = load %struct.sv** %0, align 8, !tbaa !0
  %sv_flags8 = getelementptr inbounds %struct.sv* %8, i64 0, i32 2
  %9 = load i32* %sv_flags8, align 4, !tbaa !4
  %10 = and i32 %9, 268959744
  %11 = icmp eq i32 %10, 524288
  br i1 %11, label %land.lhs.true15, label %if.end31

land.lhs.true15:                                  ; preds = %if.end7
  %add.ptr16 = getelementptr inbounds %struct.sv** %0, i64 -1
  %12 = load %struct.sv** %add.ptr16, align 8, !tbaa !0
  %sv_flags17 = getelementptr inbounds %struct.sv* %12, i64 0, i32 2
  %13 = load i32* %sv_flags17, align 4, !tbaa !4
  %14 = and i32 %13, 268959744
  %15 = icmp eq i32 %14, 524288
  br i1 %15, label %if.then25, label %if.end31

if.then25:                                        ; preds = %land.lhs.true15
  %sv_any = getelementptr inbounds %struct.sv* %12, i64 0, i32 0
  %16 = load i8** %sv_any, align 8, !tbaa !0
  %xrv_rv = bitcast i8* %16 to %struct.sv**
  %17 = load %struct.sv** %xrv_rv, align 8, !tbaa !0
  %sv_any28 = getelementptr inbounds %struct.sv* %8, i64 0, i32 0
  %18 = load i8** %sv_any28, align 8, !tbaa !0
  %xrv_rv29 = bitcast i8* %18 to %struct.sv**
  %19 = load %struct.sv** %xrv_rv29, align 8, !tbaa !0
  %cmp = icmp ne %struct.sv* %17, %19
  %cond = select i1 %cmp, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  store %struct.sv* %cond, %struct.sv** %add.ptr16, align 8, !tbaa !0
  store %struct.sv** %add.ptr16, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %20 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next30 = getelementptr inbounds %struct.op* %20, i64 0, i32 0
  br label %return

if.end31:                                         ; preds = %land.lhs.true15, %if.end7
  %and33 = and i32 %9, 16777216
  %tobool34 = icmp eq i32 %and33, 0
  br i1 %tobool34, label %land.lhs.true35, label %if.end50

land.lhs.true35:                                  ; preds = %if.end31
  %21 = and i32 %9, 393216
  %or.cond220.not = icmp ne i32 %21, 0
  %and45 = and i32 %9, 65536
  %tobool46 = icmp eq i32 %and45, 0
  %or.cond222 = and i1 %or.cond220.not, %tobool46
  br i1 %or.cond222, label %cond.false, label %if.end50

cond.false:                                       ; preds = %land.lhs.true35
  %call48 = tail call i64 @Perl_sv_2iv(%struct.sv* %8) #7
  %.pre = load %struct.sv** %0, align 8, !tbaa !0
  %sv_flags51.phi.trans.insert = getelementptr inbounds %struct.sv* %.pre, i64 0, i32 2
  %.pre224 = load i32* %sv_flags51.phi.trans.insert, align 4, !tbaa !4
  br label %if.end50

if.end50:                                         ; preds = %land.lhs.true35, %if.end31, %cond.false
  %22 = phi i32 [ %9, %land.lhs.true35 ], [ %9, %if.end31 ], [ %.pre224, %cond.false ]
  %23 = phi %struct.sv* [ %8, %land.lhs.true35 ], [ %8, %if.end31 ], [ %.pre, %cond.false ]
  %and52 = and i32 %22, 65536
  %tobool53 = icmp eq i32 %and52, 0
  %incdec.ptr144.pre = getelementptr inbounds %struct.sv** %0, i64 -1
  br i1 %tobool53, label %if.end143, label %if.then54

if.then54:                                        ; preds = %if.end50
  %24 = load %struct.sv** %incdec.ptr144.pre, align 8, !tbaa !0
  %sv_flags56 = getelementptr inbounds %struct.sv* %24, i64 0, i32 2
  %25 = load i32* %sv_flags56, align 4, !tbaa !4
  %and57 = and i32 %25, 16777216
  %tobool58 = icmp eq i32 %and57, 0
  br i1 %tobool58, label %land.lhs.true59, label %if.end83

land.lhs.true59:                                  ; preds = %if.then54
  %26 = and i32 %25, 393216
  %or.cond221.not = icmp ne i32 %26, 0
  %and72 = and i32 %25, 65536
  %tobool73 = icmp eq i32 %and72, 0
  %or.cond223 = and i1 %or.cond221.not, %tobool73
  br i1 %or.cond223, label %cond.false78, label %if.end83

cond.false78:                                     ; preds = %land.lhs.true59
  %call80 = tail call i64 @Perl_sv_2iv(%struct.sv* %24) #7
  %.pre225 = load %struct.sv** %incdec.ptr144.pre, align 8, !tbaa !0
  %sv_flags85.phi.trans.insert = getelementptr inbounds %struct.sv* %.pre225, i64 0, i32 2
  %.pre226 = load i32* %sv_flags85.phi.trans.insert, align 4, !tbaa !4
  br label %if.end83

if.end83:                                         ; preds = %land.lhs.true59, %if.then54, %cond.false78
  %27 = phi i32 [ %25, %land.lhs.true59 ], [ %25, %if.then54 ], [ %.pre226, %cond.false78 ]
  %.pn218.pre = phi %struct.sv* [ %24, %land.lhs.true59 ], [ %24, %if.then54 ], [ %.pre225, %cond.false78 ]
  %and86 = and i32 %27, 65536
  %tobool87 = icmp eq i32 %and86, 0
  br i1 %tobool87, label %if.end83.if.end143_crit_edge, label %if.then88

if.end83.if.end143_crit_edge:                     ; preds = %if.end83
  %.pre227 = load %struct.sv** %0, align 8, !tbaa !0
  %sv_flags145.phi.trans.insert = getelementptr inbounds %struct.sv* %.pre227, i64 0, i32 2
  %.pre228 = load i32* %sv_flags145.phi.trans.insert, align 4, !tbaa !4
  br label %if.end143

if.then88:                                        ; preds = %if.end83
  %and91 = and i32 %27, -2147418112
  %cmp92 = icmp eq i32 %and91, -2147418112
  %28 = load %struct.sv** %0, align 8, !tbaa !0
  %sv_flags94 = getelementptr inbounds %struct.sv* %28, i64 0, i32 2
  %29 = load i32* %sv_flags94, align 4, !tbaa !4
  %and95 = and i32 %29, -2147418112
  %cmp96 = icmp eq i32 %and95, -2147418112
  %cmp101tmp = xor i1 %cmp92, %cmp96
  br i1 %cmp101tmp, label %if.end112, label %if.then103

if.then103:                                       ; preds = %if.then88
  %sv_any105 = getelementptr inbounds %struct.sv* %28, i64 0, i32 0
  %30 = load i8** %sv_any105, align 8, !tbaa !0
  %xuv_uv = getelementptr inbounds i8* %30, i64 24
  %31 = bitcast i8* %xuv_uv to i64*
  %32 = load i64* %31, align 8, !tbaa !3
  %sv_any106 = getelementptr inbounds %struct.sv* %.pn218.pre, i64 0, i32 0
  %33 = load i8** %sv_any106, align 8, !tbaa !0
  %xuv_uv107 = getelementptr inbounds i8* %33, i64 24
  %34 = bitcast i8* %xuv_uv107 to i64*
  %35 = load i64* %34, align 8, !tbaa !3
  %cmp108 = icmp ne i64 %35, %32
  %cond110 = select i1 %cmp108, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  store %struct.sv* %cond110, %struct.sv** %incdec.ptr144.pre, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr144.pre, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %36 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next111 = getelementptr inbounds %struct.op* %36, i64 0, i32 0
  br label %return

if.end112:                                        ; preds = %if.then88
  br i1 %cmp92, label %if.then114, label %if.else

if.then114:                                       ; preds = %if.end112
  %sv_any115 = getelementptr inbounds %struct.sv* %28, i64 0, i32 0
  %37 = load i8** %sv_any115, align 8, !tbaa !0
  %xiv_iv116 = getelementptr inbounds i8* %37, i64 24
  %38 = bitcast i8* %xiv_iv116 to i64*
  %39 = load i64* %38, align 8, !tbaa !3
  %cmp118 = icmp slt i64 %39, 0
  br i1 %cmp118, label %if.then120, label %if.end137

if.then120:                                       ; preds = %if.then114
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr144.pre, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr144.pre, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %40 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next121 = getelementptr inbounds %struct.op* %40, i64 0, i32 0
  br label %return

if.else:                                          ; preds = %if.end112
  %sv_any126 = getelementptr inbounds %struct.sv* %.pn218.pre, i64 0, i32 0
  %41 = load i8** %sv_any126, align 8, !tbaa !0
  %xiv_iv127 = getelementptr inbounds i8* %41, i64 24
  %42 = bitcast i8* %xiv_iv127 to i64*
  %43 = load i64* %42, align 8, !tbaa !3
  %cmp129 = icmp slt i64 %43, 0
  br i1 %cmp129, label %if.then131, label %if.end137

if.then131:                                       ; preds = %if.else
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr144.pre, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr144.pre, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %44 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next132 = getelementptr inbounds %struct.op* %44, i64 0, i32 0
  br label %return

if.end137:                                        ; preds = %if.then114, %if.else
  %.pn218 = phi %struct.sv* [ %28, %if.else ], [ %.pn218.pre, %if.then114 ]
  %iv.0 = phi i64 [ %43, %if.else ], [ %39, %if.then114 ]
  %.pn.in = getelementptr inbounds %struct.sv* %.pn218, i64 0, i32 0
  %.pn = load i8** %.pn.in, align 8
  %uv.0.in.in = getelementptr inbounds i8* %.pn, i64 24
  %uv.0.in = bitcast i8* %uv.0.in.in to i64*
  %uv.0 = load i64* %uv.0.in, align 8
  %cmp138 = icmp ne i64 %iv.0, %uv.0
  %cond140 = select i1 %cmp138, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  store %struct.sv* %cond140, %struct.sv** %incdec.ptr144.pre, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr144.pre, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %45 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next141 = getelementptr inbounds %struct.op* %45, i64 0, i32 0
  br label %return

if.end143:                                        ; preds = %if.end50, %if.end83.if.end143_crit_edge
  %46 = phi i32 [ %.pre228, %if.end83.if.end143_crit_edge ], [ %22, %if.end50 ]
  %47 = phi %struct.sv* [ %.pre227, %if.end83.if.end143_crit_edge ], [ %23, %if.end50 ]
  store %struct.sv* %47, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %and146 = and i32 %46, 131072
  %tobool147 = icmp eq i32 %and146, 0
  br i1 %tobool147, label %cond.false150, label %cond.true148

cond.true148:                                     ; preds = %if.end143
  %sv_any149 = getelementptr inbounds %struct.sv* %47, i64 0, i32 0
  %48 = load i8** %sv_any149, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %48, i64 32
  %49 = bitcast i8* %xnv_nv to double*
  %50 = load double* %49, align 8, !tbaa !6
  br label %cond.end152

cond.false150:                                    ; preds = %if.end143
  %call151 = tail call double @Perl_sv_2nv(%struct.sv* %47) #7
  br label %cond.end152

cond.end152:                                      ; preds = %cond.false150, %cond.true148
  %cond153 = phi double [ %50, %cond.true148 ], [ %call151, %cond.false150 ]
  %51 = load %struct.sv** %incdec.ptr144.pre, align 8, !tbaa !0
  %sv_flags154 = getelementptr inbounds %struct.sv* %51, i64 0, i32 2
  %52 = load i32* %sv_flags154, align 4, !tbaa !4
  %and155 = and i32 %52, 131072
  %tobool156 = icmp eq i32 %and155, 0
  br i1 %tobool156, label %cond.false160, label %cond.true157

cond.true157:                                     ; preds = %cond.end152
  %sv_any158 = getelementptr inbounds %struct.sv* %51, i64 0, i32 0
  %53 = load i8** %sv_any158, align 8, !tbaa !0
  %xnv_nv159 = getelementptr inbounds i8* %53, i64 32
  %54 = bitcast i8* %xnv_nv159 to double*
  %55 = load double* %54, align 8, !tbaa !6
  br label %cond.end162

cond.false160:                                    ; preds = %cond.end152
  %call161 = tail call double @Perl_sv_2nv(%struct.sv* %51) #7
  br label %cond.end162

cond.end162:                                      ; preds = %cond.false160, %cond.true157
  %cond163 = phi double [ %55, %cond.true157 ], [ %call161, %cond.false160 ]
  %cmp164 = fcmp une double %cond163, %cond153
  %cond166 = select i1 %cmp164, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  store %struct.sv* %cond166, %struct.sv** %incdec.ptr144.pre, align 8, !tbaa !0
  store %struct.sv** %incdec.ptr144.pre, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %56 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next167 = getelementptr inbounds %struct.op* %56, i64 0, i32 0
  br label %return

return:                                           ; preds = %cond.end162, %if.end137, %if.then131, %if.then120, %if.then103, %if.then25, %if.then6
  %retval.0.in = phi %struct.op** [ %op_next, %if.then6 ], [ %op_next111, %if.then103 ], [ %op_next121, %if.then120 ], [ %op_next141, %if.end137 ], [ %op_next132, %if.then131 ], [ %op_next167, %cond.end162 ], [ %op_next30, %if.then25 ]
  %retval.0 = load %struct.op** %retval.0.in, align 8
  ret %struct.op* %retval.0
}
