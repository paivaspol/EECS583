define %struct.op* @Perl_pp_study() #0 {
entry:
  %len = alloca i64, align 8
  %0 = load %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %1 = load %struct.sv** %0, align 8, !tbaa !0
  %2 = load %struct.sv** @PL_lastscream, align 8, !tbaa !0
  %cmp = icmp eq %struct.sv* %1, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %1, i64 0, i32 2
  %3 = load i32* %sv_flags, align 4, !tbaa !4
  %and = and i32 %3, 134217728
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end10, label %if.then1

if.then1:                                         ; preds = %if.then
  store %struct.sv* @PL_sv_yes, %struct.sv** %0, align 8, !tbaa !0
  store %struct.sv** %0, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %4 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next = getelementptr inbounds %struct.op* %4, i64 0, i32 0
  %5 = load %struct.op** %op_next, align 8, !tbaa !0
  br label %return

if.else:                                          ; preds = %entry
  %tobool3 = icmp eq %struct.sv* %2, null
  br i1 %tobool3, label %if.end7, label %if.then4

if.then4:                                         ; preds = %if.else
  %sv_flags5 = getelementptr inbounds %struct.sv* %2, i64 0, i32 2
  %6 = load i32* %sv_flags5, align 4, !tbaa !4
  %and6 = and i32 %6, -134217729
  store i32 %and6, i32* %sv_flags5, align 4, !tbaa !4
  call void @Perl_sv_free(%struct.sv* %2) #7
  br label %if.end7

if.end7:                                          ; preds = %if.else, %if.then4
  store %struct.sv* %1, %struct.sv** @PL_Sv, align 8, !tbaa !0
  %tobool8 = icmp eq %struct.sv* %1, null
  br i1 %tobool8, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end7
  %sv_refcnt = getelementptr inbounds %struct.sv* %1, i64 0, i32 1
  %7 = load i32* %sv_refcnt, align 4, !tbaa !4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %sv_refcnt, align 4, !tbaa !4
  br label %land.end

land.end:                                         ; preds = %if.end7, %land.rhs
  store %struct.sv* %1, %struct.sv** @PL_lastscream, align 8, !tbaa !0
  %sv_flags11.phi.trans.insert = getelementptr inbounds %struct.sv* %1, i64 0, i32 2
  %.pre = load i32* %sv_flags11.phi.trans.insert, align 4, !tbaa !4
  br label %if.end10

if.end10:                                         ; preds = %if.then, %land.end
  %8 = phi i32 [ %3, %if.then ], [ %.pre, %land.end ]
  %sv_flags11 = getelementptr inbounds %struct.sv* %1, i64 0, i32 2
  %and12 = and i32 %8, 262144
  %cmp13 = icmp eq i32 %and12, 0
  br i1 %cmp13, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end10
  %sv_any = getelementptr inbounds %struct.sv* %1, i64 0, i32 0
  %9 = load i8** %sv_any, align 8, !tbaa !0
  %xpv_cur = getelementptr inbounds i8* %9, i64 8
  %10 = bitcast i8* %xpv_cur to i64*
  %11 = load i64* %10, align 8, !tbaa !3
  store i64 %11, i64* %len, align 8, !tbaa !3
  %xpv_pv = bitcast i8* %9 to i8**
  %12 = load i8** %xpv_pv, align 8, !tbaa !0
  br label %cond.end

cond.false:                                       ; preds = %if.end10
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %1, i64* %len, i32 2) #7
  %.pre107 = load i64* %len, align 8, !tbaa !3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %13 = phi i64 [ %11, %cond.true ], [ %.pre107, %cond.false ]
  %cond = phi i8* [ %12, %cond.true ], [ %call, %cond.false ]
  %conv = trunc i64 %13 to i32
  %cmp15 = icmp slt i32 %conv, 1
  br i1 %cmp15, label %if.then17, label %if.end20

if.then17:                                        ; preds = %cond.end
  store %struct.sv* @PL_sv_no, %struct.sv** %0, align 8, !tbaa !0
  store %struct.sv** %0, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %14 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next19 = getelementptr inbounds %struct.op* %14, i64 0, i32 0
  %15 = load %struct.op** %op_next19, align 8, !tbaa !0
  br label %return

if.end20:                                         ; preds = %cond.end
  %16 = load i32* @PL_maxscream, align 4, !tbaa !4
  %cmp21 = icmp sgt i32 %conv, %16
  br i1 %cmp21, label %if.then23, label %if.end20.if.end36_crit_edge

if.end20.if.end36_crit_edge:                      ; preds = %if.end20
  %.pre108 = load i32** @PL_screamnext, align 8, !tbaa !0
  br label %if.end36

if.then23:                                        ; preds = %if.end20
  %cmp24 = icmp slt i32 %16, 0
  br i1 %cmp24, label %if.then26, label %if.else30

if.then26:                                        ; preds = %if.then23
  %add = add nsw i32 %conv, 80
  store i32 %add, i32* @PL_maxscream, align 4, !tbaa !4
  %call27 = call i8* @Perl_safesysmalloc(i64 1024) #7
  %17 = bitcast i8* %call27 to i32*
  store i32* %17, i32** @PL_screamfirst, align 8, !tbaa !0
  %18 = load i32* @PL_maxscream, align 4, !tbaa !4
  %conv28 = sext i32 %18 to i64
  %mul = shl nsw i64 %conv28, 2
  %call29 = call i8* @Perl_safesysmalloc(i64 %mul) #7
  %19 = bitcast i8* %call29 to i32*
  store i32* %19, i32** @PL_screamnext, align 8, !tbaa !0
  br label %if.end36

if.else30:                                        ; preds = %if.then23
  %div = sdiv i32 %conv, 4
  %add31 = add nsw i32 %div, %conv
  store i32 %add31, i32* @PL_maxscream, align 4, !tbaa !4
  %20 = load i32** @PL_screamnext, align 8, !tbaa !0
  %21 = bitcast i32* %20 to i8*
  %conv32 = sext i32 %add31 to i64
  %mul33 = shl nsw i64 %conv32, 2
  %call34 = call i8* @Perl_safesysrealloc(i8* %21, i64 %mul33) #7
  %22 = bitcast i8* %call34 to i32*
  store i32* %22, i32** @PL_screamnext, align 8, !tbaa !0
  br label %if.end36

if.end36:                                         ; preds = %if.end20.if.end36_crit_edge, %if.then26, %if.else30
  %23 = phi i32* [ %.pre108, %if.end20.if.end36_crit_edge ], [ %19, %if.then26 ], [ %22, %if.else30 ]
  %24 = load i32** @PL_screamfirst, align 8, !tbaa !0
  %tobool37 = icmp eq i32* %24, null
  %tobool38 = icmp eq i32* %23, null
  %or.cond = or i1 %tobool37, %tobool38
  br i1 %or.cond, label %if.then39, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end36
  %25 = bitcast i32* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %25, i8 -1, i64 1024, i32 4, i1 false)
  %cmp45102 = icmp sgt i32 %conv, 0
  br i1 %cmp45102, label %while.body.lr.ph, label %while.end

if.then39:                                        ; preds = %if.end36
  %call40 = call %struct.op* (i8*, ...)* @Perl_die(i8* getelementptr inbounds ([24 x i8]* @.str26, i64 0, i64 0)) #7
  br label %return

while.body.lr.ph:                                 ; preds = %for.cond.preheader
  %sext = shl i64 %13, 32
  %26 = ashr exact i64 %sext, 32
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %if.end61
  %indvars.iv = phi i64 [ %26, %while.body.lr.ph ], [ %indvars.iv.next, %if.end61 ]
  %dec44104.in = phi i32 [ %conv, %while.body.lr.ph ], [ %dec44104, %if.end61 ]
  %indvars.iv.next = add i64 %indvars.iv, -1
  %dec44104 = add nsw i32 %dec44104.in, -1
  %arrayidx = getelementptr inbounds i8* %cond, i64 %indvars.iv.next
  %27 = load i8* %arrayidx, align 1, !tbaa !1
  %idxprom48 = zext i8 %27 to i64
  %add.ptr.sum100 = or i64 %idxprom48, -256
  %scevgep.sum = add i64 %add.ptr.sum100, 256
  %arrayidx49 = getelementptr inbounds i32* %24, i64 %scevgep.sum
  %28 = load i32* %arrayidx49, align 4, !tbaa !4
  %cmp50 = icmp sgt i32 %28, -1
  br i1 %cmp50, label %if.then52, label %if.else57

if.then52:                                        ; preds = %while.body
  %29 = trunc i64 %indvars.iv.next to i32
  %sub = sub nsw i32 %28, %29
  %arrayidx56 = getelementptr inbounds i32* %23, i64 %indvars.iv.next
  store i32 %sub, i32* %arrayidx56, align 4, !tbaa !4
  br label %if.end61

if.else57:                                        ; preds = %while.body
  %sub58 = sub i32 1, %dec44104.in
  %arrayidx60 = getelementptr inbounds i32* %23, i64 %indvars.iv.next
  store i32 %sub58, i32* %arrayidx60, align 4, !tbaa !4
  %.pre109 = trunc i64 %indvars.iv.next to i32
  br label %if.end61

if.end61:                                         ; preds = %if.else57, %if.then52
  %.pre-phi = phi i32 [ %.pre109, %if.else57 ], [ %29, %if.then52 ]
  store i32 %.pre-phi, i32* %arrayidx49, align 4, !tbaa !4
  %cmp45 = icmp sgt i32 %.pre-phi, 0
  br i1 %cmp45, label %while.body, label %while.end

while.end:                                        ; preds = %if.end61, %for.cond.preheader
  %30 = load i32* %sv_flags11, align 4, !tbaa !4
  %or = or i32 %30, 134217728
  store i32 %or, i32* %sv_flags11, align 4, !tbaa !4
  call void @Perl_sv_magic(%struct.sv* %1, %struct.sv* null, i32 103, i8* null, i32 0) #7
  store %struct.sv* @PL_sv_yes, %struct.sv** %0, align 8, !tbaa !0
  store %struct.sv** %0, %struct.sv*** @PL_stack_sp, align 8, !tbaa !0
  %31 = load %struct.op** @PL_op, align 8, !tbaa !0
  %op_next66 = getelementptr inbounds %struct.op* %31, i64 0, i32 0
  %32 = load %struct.op** %op_next66, align 8, !tbaa !0
  br label %return

return:                                           ; preds = %while.end, %if.then39, %if.then17, %if.then1
  %retval.0 = phi %struct.op* [ %5, %if.then1 ], [ %15, %if.then17 ], [ %32, %while.end ], [ %call40, %if.then39 ]
  ret %struct.op* %retval.0
}
