define internal i32 @amagic_ncmp(%struct.sv* %a, %struct.sv* %b) #0 {
entry:
  %0 = load i64* @PL_amagic_generation, align 8, !tbaa !4
  %tobool = icmp eq i64 %0, 0
  br i1 %tobool, label %if.end30, label %if.then

if.then:                                          ; preds = %entry
  %sv_flags = getelementptr inbounds %struct.sv* %a, i64 0, i32 2
  %1 = load i32* %sv_flags, align 4, !tbaa !3
  %and = and i32 %1, 268435456
  %tobool1 = icmp eq i32 %and, 0
  br i1 %tobool1, label %lor.lhs.false, label %if.end6

lor.lhs.false:                                    ; preds = %if.then
  %sv_flags2 = getelementptr inbounds %struct.sv* %b, i64 0, i32 2
  %2 = load i32* %sv_flags2, align 4, !tbaa !3
  %and3 = and i32 %2, 268435456
  %tobool4 = icmp eq i32 %and3, 0
  br i1 %tobool4, label %if.end30, label %if.end6

if.end6:                                          ; preds = %if.then, %lor.lhs.false
  %call = tail call %struct.sv* @Perl_amagic_call(%struct.sv* %a, %struct.sv* %b, i32 34, i32 0) #4
  %tobool7 = icmp eq %struct.sv* %call, null
  br i1 %tobool7, label %if.end30, label %if.then8

if.then8:                                         ; preds = %if.end6
  %sv_flags9 = getelementptr inbounds %struct.sv* %call, i64 0, i32 2
  %3 = load i32* %sv_flags9, align 4, !tbaa !3
  %and10 = and i32 %3, 65536
  %tobool11 = icmp eq i32 %and10, 0
  br i1 %tobool11, label %if.end17, label %if.then12

if.then12:                                        ; preds = %if.then8
  %sv_any = getelementptr inbounds %struct.sv* %call, i64 0, i32 0
  %4 = load i8** %sv_any, align 8, !tbaa !0
  %xiv_iv = getelementptr inbounds i8* %4, i64 24
  %5 = bitcast i8* %xiv_iv to i64*
  %6 = load i64* %5, align 8, !tbaa !4
  %conv = trunc i64 %6 to i32
  %cmp = icmp sgt i32 %conv, 0
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.then12
  %tobool16 = icmp ne i32 %conv, 0
  %cond = sext i1 %tobool16 to i32
  br label %return

if.end17:                                         ; preds = %if.then8
  %and19 = and i32 %3, 131072
  %tobool20 = icmp eq i32 %and19, 0
  br i1 %tobool20, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end17
  %sv_any21 = getelementptr inbounds %struct.sv* %call, i64 0, i32 0
  %7 = load i8** %sv_any21, align 8, !tbaa !0
  %xnv_nv = getelementptr inbounds i8* %7, i64 32
  %8 = bitcast i8* %xnv_nv to double*
  %9 = load double* %8, align 8, !tbaa !5
  br label %cond.end

cond.false:                                       ; preds = %if.end17
  %call22 = tail call double @Perl_sv_2nv(%struct.sv* %call) #4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond23 = phi double [ %9, %cond.true ], [ %call22, %cond.false ]
  %cmp24 = fcmp ogt double %cond23, 0.000000e+00
  br i1 %cmp24, label %return, label %if.end27

if.end27:                                         ; preds = %cond.end
  %tobool28 = fcmp une double %cond23, 0.000000e+00
  %cond29 = sext i1 %tobool28 to i32
  br label %return

if.end30:                                         ; preds = %entry, %lor.lhs.false, %if.end6
  %call31 = tail call i32 @sv_ncmp(%struct.sv* %a, %struct.sv* %b) #5
  br label %return

return:                                           ; preds = %cond.end, %if.then12, %if.end30, %if.end27, %if.end15
  %retval.0 = phi i32 [ %cond, %if.end15 ], [ %cond29, %if.end27 ], [ %call31, %if.end30 ], [ 1, %if.then12 ], [ 1, %cond.end ]
  ret i32 %retval.0
}
