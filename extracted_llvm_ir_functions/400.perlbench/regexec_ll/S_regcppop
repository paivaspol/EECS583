define internal fastcc void @S_regcppop() #0 {
entry:
  %0 = load i32* @PL_savestack_ix, align 4, !tbaa !0
  %dec1 = add nsw i32 %0, -2
  store i32 %dec1, i32* @PL_savestack_ix, align 4, !tbaa !0
  %idxprom2 = sext i32 %dec1 to i64
  %1 = load %union.any** @PL_savestack, align 8, !tbaa !3
  %arrayidx3 = getelementptr inbounds %union.any* %1, i64 %idxprom2
  %any_i324 = bitcast %union.any* %arrayidx3 to i32*
  %2 = load i32* %any_i324, align 4, !tbaa !0
  %dec8 = add nsw i32 %0, -4
  store i32 %dec8, i32* @PL_savestack_ix, align 4, !tbaa !0
  %idxprom9 = sext i32 %dec8 to i64
  %arrayidx10 = getelementptr inbounds %union.any* %1, i64 %idxprom9
  %any_i3211 = bitcast %union.any* %arrayidx10 to i32*
  %3 = load i32* %any_i3211, align 4, !tbaa !0
  %4 = load i32** @PL_reglastcloseparen, align 8, !tbaa !3
  store i32 %3, i32* %4, align 4, !tbaa !0
  %5 = load i32* @PL_savestack_ix, align 4, !tbaa !0
  %dec12 = add nsw i32 %5, -1
  store i32 %dec12, i32* @PL_savestack_ix, align 4, !tbaa !0
  %idxprom13 = sext i32 %dec12 to i64
  %arrayidx14 = getelementptr inbounds %union.any* %1, i64 %idxprom13
  %any_i3215 = bitcast %union.any* %arrayidx14 to i32*
  %6 = load i32* %any_i3215, align 4, !tbaa !0
  %7 = load i32** @PL_reglastparen, align 8, !tbaa !3
  store i32 %6, i32* %7, align 4, !tbaa !0
  %8 = load i32* @PL_savestack_ix, align 4, !tbaa !0
  %dec16 = add nsw i32 %8, -1
  store i32 %dec16, i32* @PL_savestack_ix, align 4, !tbaa !0
  %idxprom17 = sext i32 %dec16 to i64
  %arrayidx18 = getelementptr inbounds %union.any* %1, i64 %idxprom17
  %any_i3219 = bitcast %union.any* %arrayidx18 to i32*
  %9 = load i32* %any_i3219, align 4, !tbaa !0
  store i32 %9, i32* @PL_regsize, align 4, !tbaa !0
  %i.04 = add nsw i32 %2, -4
  %cmp5 = icmp sgt i32 %i.04, 0
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.cond.backedge.for.body_crit_edge
  %10 = phi i32 [ %.pre, %for.cond.backedge.for.body_crit_edge ], [ %dec16, %entry ]
  %11 = phi %union.any* [ %15, %for.cond.backedge.for.body_crit_edge ], [ %1, %entry ]
  %i.06 = phi i32 [ %i.0, %for.cond.backedge.for.body_crit_edge ], [ %i.04, %entry ]
  %dec20 = add nsw i32 %10, -1
  store i32 %dec20, i32* @PL_savestack_ix, align 4, !tbaa !0
  %idxprom21 = sext i32 %dec20 to i64
  %arrayidx22 = getelementptr inbounds %union.any* %11, i64 %idxprom21
  %any_i3223 = bitcast %union.any* %arrayidx22 to i32*
  %12 = load i32* %any_i3223, align 4, !tbaa !0
  %dec24 = add nsw i32 %10, -2
  %idxprom25 = sext i32 %dec24 to i64
  %any_ptr27 = getelementptr inbounds %union.any* %11, i64 %idxprom25, i32 0
  %13 = load i8** %any_ptr27, align 8, !tbaa !3
  %idxprom28 = zext i32 %12 to i64
  %14 = load i8*** @PL_reg_start_tmp, align 8, !tbaa !3
  %arrayidx29 = getelementptr inbounds i8** %14, i64 %idxprom28
  store i8* %13, i8** %arrayidx29, align 8, !tbaa !3
  %dec30 = add nsw i32 %10, -3
  store i32 %dec30, i32* @PL_savestack_ix, align 4, !tbaa !0
  %idxprom31 = sext i32 %dec30 to i64
  %15 = load %union.any** @PL_savestack, align 8, !tbaa !3
  %arrayidx32 = getelementptr inbounds %union.any* %15, i64 %idxprom31
  %any_i3233 = bitcast %union.any* %arrayidx32 to i32*
  %16 = load i32* %any_i3233, align 4, !tbaa !0
  %17 = load i32** @PL_regstartp, align 8, !tbaa !3
  %arrayidx35 = getelementptr inbounds i32* %17, i64 %idxprom28
  store i32 %16, i32* %arrayidx35, align 4, !tbaa !0
  %18 = load i32* @PL_savestack_ix, align 4, !tbaa !0
  %dec36 = add nsw i32 %18, -1
  store i32 %dec36, i32* @PL_savestack_ix, align 4, !tbaa !0
  %19 = load i32** @PL_reglastparen, align 8, !tbaa !3
  %20 = load i32* %19, align 4, !tbaa !0
  %cmp40 = icmp ugt i32 %12, %20
  br i1 %cmp40, label %for.cond.backedge, label %if.then

for.cond.backedge:                                ; preds = %for.body, %if.then
  %i.0 = add nsw i32 %i.06, -4
  %cmp = icmp sgt i32 %i.0, 0
  br i1 %cmp, label %for.cond.backedge.for.body_crit_edge, label %for.end

for.cond.backedge.for.body_crit_edge:             ; preds = %for.cond.backedge
  %.pre = load i32* @PL_savestack_ix, align 4, !tbaa !0
  br label %for.body

if.then:                                          ; preds = %for.body
  %idxprom37 = sext i32 %dec36 to i64
  %arrayidx38 = getelementptr inbounds %union.any* %15, i64 %idxprom37
  %any_i3239 = bitcast %union.any* %arrayidx38 to i32*
  %21 = load i32* %any_i3239, align 4, !tbaa !0
  %22 = load i32** @PL_regendp, align 8, !tbaa !3
  %arrayidx42 = getelementptr inbounds i32* %22, i64 %idxprom28
  store i32 %21, i32* %arrayidx42, align 4, !tbaa !0
  br label %for.cond.backedge

for.end:                                          ; preds = %for.cond.backedge, %entry
  %23 = phi i32* [ %7, %entry ], [ %19, %for.cond.backedge ]
  %24 = load i32* %23, align 4, !tbaa !0
  %paren.01 = add i32 %24, 1
  %25 = load i32* @PL_regnpar, align 4, !tbaa !0
  %cmp452 = icmp sgt i32 %paren.01, %25
  br i1 %cmp452, label %for.end55, label %for.body46.lr.ph

for.body46.lr.ph:                                 ; preds = %for.end
  %26 = load i32** @PL_regstartp, align 8, !tbaa !3
  %27 = load i32** @PL_regendp, align 8, !tbaa !3
  br label %for.body46

for.body46:                                       ; preds = %if.end51, %for.body46.lr.ph
  %paren.03 = phi i32 [ %paren.01, %for.body46.lr.ph ], [ %paren.0, %if.end51 ]
  %28 = load i32* @PL_regsize, align 4, !tbaa !0
  %cmp47 = icmp sgt i32 %paren.03, %28
  %idxprom49 = zext i32 %paren.03 to i64
  br i1 %cmp47, label %if.then48, label %if.end51

if.then48:                                        ; preds = %for.body46
  %arrayidx50 = getelementptr inbounds i32* %26, i64 %idxprom49
  store i32 -1, i32* %arrayidx50, align 4, !tbaa !0
  br label %if.end51

if.end51:                                         ; preds = %for.body46, %if.then48
  %arrayidx53 = getelementptr inbounds i32* %27, i64 %idxprom49
  store i32 -1, i32* %arrayidx53, align 4, !tbaa !0
  %paren.0 = add i32 %paren.03, 1
  %29 = load i32* @PL_regnpar, align 4, !tbaa !0
  %cmp45 = icmp sgt i32 %paren.0, %29
  br i1 %cmp45, label %for.end55, label %for.body46

for.end55:                                        ; preds = %if.end51, %for.end
  ret void
}
