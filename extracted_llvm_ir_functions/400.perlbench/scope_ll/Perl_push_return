define void @Perl_push_return(%struct.op* %retop) #0 {
entry:
  %0 = load i32* @PL_retstack_ix, align 4, !tbaa !4
  %1 = load i32* @PL_retstack_max, align 4, !tbaa !4
  %cmp = icmp eq i32 %0, %1
  br i1 %cmp, label %if.then, label %entry.if.end_crit_edge

entry.if.end_crit_edge:                           ; preds = %entry
  %.pre2 = load %struct.op*** @PL_retstack, align 8, !tbaa !0
  br label %if.end

if.then:                                          ; preds = %entry
  %mul = mul nsw i32 %0, 3
  %div = sdiv i32 %mul, 2
  store i32 %div, i32* @PL_retstack_max, align 4, !tbaa !4
  %2 = load %struct.op*** @PL_retstack, align 8, !tbaa !0
  %3 = bitcast %struct.op** %2 to i8*
  %conv = sext i32 %div to i64
  %mul1 = shl nsw i64 %conv, 3
  %call = tail call i8* @Perl_safesysrealloc(i8* %3, i64 %mul1) #5
  %4 = bitcast i8* %call to %struct.op**
  store %struct.op** %4, %struct.op*** @PL_retstack, align 8, !tbaa !0
  %.pre = load i32* @PL_retstack_ix, align 4, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %5 = phi %struct.op** [ %4, %if.then ], [ %.pre2, %entry.if.end_crit_edge ]
  %6 = phi i32 [ %.pre, %if.then ], [ %0, %entry.if.end_crit_edge ]
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* @PL_retstack_ix, align 4, !tbaa !4
  %idxprom = sext i32 %6 to i64
  %arrayidx = getelementptr inbounds %struct.op** %5, i64 %idxprom
  store %struct.op* %retop, %struct.op** %arrayidx, align 8, !tbaa !0
  ret void
}
