define i32 @fn2ftp(i8* readonly %fn) #5 {
  %1 = icmp eq i8* %fn, null
  br i1 %1, label %.loopexit, label %2

; <label>:2                                       ; preds = %0
  %3 = tail call i64 @strlen(i8* %fn) #9
  %4 = trunc i64 %3 to i32
  %5 = icmp sgt i32 %4, 3
  br i1 %5, label %6, label %.loopexit

; <label>:6                                       ; preds = %2
  %7 = shl i64 %3, 32
  %sext = add i64 %7, -17179869184
  %8 = ashr exact i64 %sext, 32
  %9 = getelementptr inbounds i8* %fn, i64 %8
  %10 = load i8* %9, align 1, !tbaa !13
  %11 = icmp eq i8 %10, 46
  br i1 %11, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %6, %19
  %indvars.iv = phi i64 [ %indvars.iv.next, %19 ], [ 0, %6 ]
  %i.01 = phi i32 [ %20, %19 ], [ 0, %6 ]
  %12 = getelementptr inbounds [46 x %struct.t_deffile]* @deffile, i64 0, i64 %indvars.iv, i32 1
  %13 = load i8** %12, align 8, !tbaa !17
  %14 = icmp eq i8* %13, null
  br i1 %14, label %19, label %15

; <label>:15                                      ; preds = %.preheader
  %16 = tail call i32 @strcasecmp(i8* %9, i8* %13) #9
  %17 = icmp eq i32 %16, 0
  %18 = trunc i64 %indvars.iv to i32
  br i1 %17, label %.loopexit, label %19

; <label>:19                                      ; preds = %.preheader, %15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %20 = add nuw nsw i32 %i.01, 1
  %21 = icmp slt i64 %indvars.iv.next, 46
  br i1 %21, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %19, %15, %2, %6, %0
  %.0 = phi i32 [ 46, %0 ], [ 46, %6 ], [ 46, %2 ], [ %20, %19 ], [ %18, %15 ]
  ret i32 %.0
}
