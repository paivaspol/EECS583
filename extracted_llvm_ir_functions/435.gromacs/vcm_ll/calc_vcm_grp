define void @calc_vcm_grp(%struct.__sFILE* nocapture readnone %fp, i32 %start, i32 %homenr, float* nocapture readonly %mass, [3 x float]* nocapture readonly %x, [3 x float]* nocapture readonly %v, %struct.t_vcm* nocapture readonly %vcm) #4 {
  %j0 = alloca [3 x float], align 4
  %1 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 1
  %2 = load i32* %1, align 4, !tbaa !18
  %3 = icmp eq i32 %2, 2
  br i1 %3, label %.loopexit, label %.preheader1

.preheader1:                                      ; preds = %0
  %4 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 0
  %5 = load i32* %4, align 4, !tbaa !22
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %.lr.ph6, label %.preheader

.lr.ph6:                                          ; preds = %.preheader1
  %7 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 8
  %8 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 2
  %9 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 5
  %10 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 4
  %11 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 6
  %12 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 7
  br label %26

.preheader:                                       ; preds = %52, %.preheader1
  %13 = icmp sgt i32 %homenr, 0
  br i1 %13, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  %14 = add nsw i32 %homenr, %start
  %15 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 10
  %16 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 8
  %17 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 2
  %18 = getelementptr inbounds [3 x float]* %j0, i64 0, i64 0
  %19 = getelementptr inbounds [3 x float]* %j0, i64 0, i64 1
  %20 = getelementptr inbounds [3 x float]* %j0, i64 0, i64 2
  %21 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 5
  %22 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 4
  %23 = getelementptr inbounds %struct.t_vcm* %vcm, i64 0, i32 7
  %24 = sext i32 %start to i64
  %25 = sext i32 %14 to i64
  br label %56

; <label>:26                                      ; preds = %._crit_edge, %.lr.ph6
  %27 = phi i32 [ %5, %.lr.ph6 ], [ %53, %._crit_edge ]
  %28 = phi i32 [ %2, %.lr.ph6 ], [ %.pre, %._crit_edge ]
  %indvars.iv12 = phi i64 [ 0, %.lr.ph6 ], [ %indvars.iv.next13, %._crit_edge ]
  %29 = load float** %7, align 8, !tbaa !29
  %30 = getelementptr inbounds float* %29, i64 %indvars.iv12
  store float 0.000000e+00, float* %30, align 4, !tbaa !14
  %31 = load [3 x float]** %8, align 8, !tbaa !27
  %32 = getelementptr inbounds [3 x float]* %31, i64 %indvars.iv12, i64 0
  store float 0.000000e+00, float* %32, align 4, !tbaa !14
  %33 = getelementptr inbounds [3 x float]* %31, i64 %indvars.iv12, i64 1
  store float 0.000000e+00, float* %33, align 4, !tbaa !14
  %34 = getelementptr inbounds [3 x float]* %31, i64 %indvars.iv12, i64 2
  store float 0.000000e+00, float* %34, align 4, !tbaa !14
  %35 = icmp eq i32 %28, 1
  br i1 %35, label %36, label %52

; <label>:36                                      ; preds = %26
  %37 = load [3 x float]** %9, align 8, !tbaa !23
  %38 = getelementptr inbounds [3 x float]* %37, i64 %indvars.iv12, i64 0
  store float 0.000000e+00, float* %38, align 4, !tbaa !14
  %39 = getelementptr inbounds [3 x float]* %37, i64 %indvars.iv12, i64 1
  store float 0.000000e+00, float* %39, align 4, !tbaa !14
  %40 = getelementptr inbounds [3 x float]* %37, i64 %indvars.iv12, i64 2
  store float 0.000000e+00, float* %40, align 4, !tbaa !14
  %41 = load [3 x float]** %10, align 8, !tbaa !24
  %42 = getelementptr inbounds [3 x float]* %41, i64 %indvars.iv12, i64 0
  store float 0.000000e+00, float* %42, align 4, !tbaa !14
  %43 = getelementptr inbounds [3 x float]* %41, i64 %indvars.iv12, i64 1
  store float 0.000000e+00, float* %43, align 4, !tbaa !14
  %44 = getelementptr inbounds [3 x float]* %41, i64 %indvars.iv12, i64 2
  store float 0.000000e+00, float* %44, align 4, !tbaa !14
  %45 = load [3 x float]** %11, align 8, !tbaa !26
  %46 = getelementptr inbounds [3 x float]* %45, i64 %indvars.iv12, i64 0
  store float 0.000000e+00, float* %46, align 4, !tbaa !14
  %47 = getelementptr inbounds [3 x float]* %45, i64 %indvars.iv12, i64 1
  store float 0.000000e+00, float* %47, align 4, !tbaa !14
  %48 = getelementptr inbounds [3 x float]* %45, i64 %indvars.iv12, i64 2
  store float 0.000000e+00, float* %48, align 4, !tbaa !14
  %49 = load [3 x [3 x float]]** %12, align 8, !tbaa !25
  %50 = getelementptr inbounds [3 x [3 x float]]* %49, i64 %indvars.iv12, i64 0
  %51 = bitcast [3 x float]* %50 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %51, i8 0, i64 36, i32 4, i1 false) #6
  %.pre14 = load i32* %4, align 4, !tbaa !22
  br label %52

; <label>:52                                      ; preds = %26, %36
  %53 = phi i32 [ %27, %26 ], [ %.pre14, %36 ]
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1
  %54 = sext i32 %53 to i64
  %55 = icmp slt i64 %indvars.iv.next13, %54
  br i1 %55, label %._crit_edge, label %.preheader

._crit_edge:                                      ; preds = %52
  %.pre = load i32* %1, align 4, !tbaa !18
  br label %26

; <label>:56                                      ; preds = %.lr.ph, %125
  %indvars.iv10 = phi i64 [ %24, %.lr.ph ], [ %indvars.iv.next11, %125 ]
  %57 = getelementptr inbounds float* %mass, i64 %indvars.iv10
  %58 = load float* %57, align 4, !tbaa !14
  %59 = load i16** %15, align 8, !tbaa !33
  %60 = getelementptr inbounds i16* %59, i64 %indvars.iv10
  %61 = load i16* %60, align 2, !tbaa !35
  %62 = zext i16 %61 to i64
  %63 = load float** %16, align 8, !tbaa !29
  %64 = getelementptr inbounds float* %63, i64 %62
  %65 = load float* %64, align 4, !tbaa !14
  %66 = fadd float %58, %65
  store float %66, float* %64, align 4, !tbaa !14
  %67 = load [3 x float]** %17, align 8, !tbaa !27
  br label %68

; <label>:68                                      ; preds = %68, %56
  %indvars.iv = phi i64 [ 0, %56 ], [ %indvars.iv.next, %68 ]
  %69 = getelementptr inbounds [3 x float]* %v, i64 %indvars.iv10, i64 %indvars.iv
  %70 = load float* %69, align 4, !tbaa !14
  %71 = fmul float %58, %70
  %72 = getelementptr inbounds [3 x float]* %67, i64 %62, i64 %indvars.iv
  %73 = load float* %72, align 4, !tbaa !14
  %74 = fadd float %71, %73
  store float %74, float* %72, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %75, label %68

; <label>:75                                      ; preds = %68
  %76 = load i32* %1, align 4, !tbaa !18
  %77 = icmp eq i32 %76, 1
  br i1 %77, label %78, label %125

; <label>:78                                      ; preds = %75
  %79 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv10, i64 0
  %80 = getelementptr inbounds [3 x float]* %v, i64 %indvars.iv10, i64 0
  %81 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv10, i64 1
  %82 = load float* %81, align 4, !tbaa !14
  %83 = getelementptr inbounds [3 x float]* %v, i64 %indvars.iv10, i64 2
  %84 = load float* %83, align 4, !tbaa !14
  %85 = fmul float %82, %84
  %86 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv10, i64 2
  %87 = load float* %86, align 4, !tbaa !14
  %88 = getelementptr inbounds [3 x float]* %v, i64 %indvars.iv10, i64 1
  %89 = load float* %88, align 4, !tbaa !14
  %90 = fmul float %87, %89
  %91 = fsub float %85, %90
  store float %91, float* %18, align 4, !tbaa !14
  %92 = load float* %80, align 4, !tbaa !14
  %93 = fmul float %87, %92
  %94 = load float* %79, align 4, !tbaa !14
  %95 = fmul float %94, %84
  %96 = fsub float %93, %95
  store float %96, float* %19, align 4, !tbaa !14
  %97 = fmul float %94, %89
  %98 = fmul float %82, %92
  %99 = fsub float %97, %98
  store float %99, float* %20, align 4, !tbaa !14
  %100 = load [3 x float]** %21, align 8, !tbaa !23
  %101 = load [3 x float]** %22, align 8, !tbaa !24
  %102 = fmul float %58, %91
  %103 = getelementptr inbounds [3 x float]* %100, i64 %62, i64 0
  %104 = load float* %103, align 4, !tbaa !14
  %105 = fadd float %102, %104
  store float %105, float* %103, align 4, !tbaa !14
  %106 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv10, i64 0
  %107 = load float* %106, align 4, !tbaa !14
  %108 = fmul float %58, %107
  %109 = getelementptr inbounds [3 x float]* %101, i64 %62, i64 0
  %110 = load float* %109, align 4, !tbaa !14
  %111 = fadd float %108, %110
  store float %111, float* %109, align 4, !tbaa !14
  br label %._crit_edge15

._crit_edge15:                                    ; preds = %78, %._crit_edge15
  %indvars.iv.next817 = phi i64 [ 1, %78 ], [ %indvars.iv.next8, %._crit_edge15 ]
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %j0, i64 0, i64 %indvars.iv.next817
  %.pre16 = load float* %.phi.trans.insert, align 4, !tbaa !14
  %112 = fmul float %58, %.pre16
  %113 = getelementptr inbounds [3 x float]* %100, i64 %62, i64 %indvars.iv.next817
  %114 = load float* %113, align 4, !tbaa !14
  %115 = fadd float %112, %114
  store float %115, float* %113, align 4, !tbaa !14
  %116 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv10, i64 %indvars.iv.next817
  %117 = load float* %116, align 4, !tbaa !14
  %118 = fmul float %58, %117
  %119 = getelementptr inbounds [3 x float]* %101, i64 %62, i64 %indvars.iv.next817
  %120 = load float* %119, align 4, !tbaa !14
  %121 = fadd float %118, %120
  store float %121, float* %119, align 4, !tbaa !14
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv.next817, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 3
  br i1 %exitcond9, label %122, label %._crit_edge15

; <label>:122                                     ; preds = %._crit_edge15
  %123 = load [3 x [3 x float]]** %23, align 8, !tbaa !25
  %124 = getelementptr inbounds [3 x [3 x float]]* %123, i64 %62, i64 0
  tail call fastcc void @update_tensor(float* %79, float %58, [3 x float]* %124) #9
  br label %125

; <label>:125                                     ; preds = %75, %122
  %indvars.iv.next11 = add nsw i64 %indvars.iv10, 1
  %126 = icmp slt i64 %indvars.iv.next11, %25
  br i1 %126, label %56, label %.loopexit

.loopexit:                                        ; preds = %125, %.preheader, %0
  ret void
}
