define float @orires(i32 %nfa, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %ip, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture readonly %fr, %struct.t_graph* nocapture readonly %g, [3 x float]* nocapture readnone %box, float %lambda, float* nocapture readnone %dvdlambda, %struct.t_mdatoms* nocapture readnone %md, i32 %ngrp, float* nocapture readnone %egnb, float* nocapture readnone %egcoul, %struct.t_fcdata* nocapture readonly %fcd) #4 {
  %r = alloca [3 x float], align 4
  %Sr = alloca [3 x float], align 4
  %fij = alloca [3 x float], align 4
  %1 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 1, i32 0
  %2 = load float* %1, align 4, !tbaa !21
  %fabsf = tail call float @fabsf(float %2) #5
  %3 = fpext float %fabsf to double
  %4 = fcmp ogt double %3, 1.200000e-38
  br i1 %4, label %5, label %.loopexit

; <label>:5                                       ; preds = %0
  %6 = fpext float %2 to double
  %7 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 1, i32 1
  %8 = load float* %7, align 4, !tbaa !61
  %fabsf1 = tail call float @fabsf(float %8) #5
  %9 = fpext float %fabsf1 to double
  %10 = fcmp ogt double %9, 1.200000e-38
  %11 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 1, i32 3
  %12 = load float* %11, align 4, !tbaa !28
  %13 = fpext float %12 to double
  %14 = fsub double 1.000000e+00, %13
  %15 = fmul double %6, %14
  %16 = fptrunc double %15 to float
  %17 = icmp sgt i32 %nfa, 0
  br i1 %17, label %.lr.ph11, label %.loopexit

.lr.ph11:                                         ; preds = %5
  %18 = getelementptr inbounds [3 x float]* %r, i64 0, i64 0
  %19 = getelementptr inbounds [3 x float]* %r, i64 0, i64 1
  %20 = getelementptr inbounds [3 x float]* %r, i64 0, i64 2
  %21 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 1, i32 18
  %22 = load float** %21, align 8, !tbaa !38
  %23 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 1, i32 17
  %24 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 1, i32 12
  %25 = load [3 x [3 x float]]** %24, align 8, !tbaa !24
  %26 = getelementptr inbounds [3 x float]* %Sr, i64 0, i64 0
  %27 = getelementptr inbounds [3 x float]* %Sr, i64 0, i64 1
  %28 = getelementptr inbounds [3 x float]* %Sr, i64 0, i64 2
  %29 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %30 = load i32* %29, align 4, !tbaa !67
  %31 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %32 = load [3 x i32]** %31, align 8, !tbaa !69
  %33 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 58
  %34 = load [3 x float]** %33, align 8, !tbaa !70
  %35 = sext i32 %nfa to i64
  br label %36

; <label>:36                                      ; preds = %.lr.ph11, %215
  %indvars.iv20 = phi i64 [ 0, %.lr.ph11 ], [ %indvars.iv.next21, %215 ]
  %indvars.iv18 = phi i64 [ 0, %.lr.ph11 ], [ %indvars.iv.next19, %215 ]
  %vtot.07 = phi float [ 0.000000e+00, %.lr.ph11 ], [ %94, %215 ]
  %37 = getelementptr inbounds i32* %forceatoms, i64 %indvars.iv18
  %38 = load i32* %37, align 4, !tbaa !30
  %39 = add nuw nsw i64 %indvars.iv18, 1
  %40 = getelementptr inbounds i32* %forceatoms, i64 %39
  %41 = load i32* %40, align 4, !tbaa !30
  %42 = add nuw nsw i64 %indvars.iv18, 2
  %43 = getelementptr inbounds i32* %forceatoms, i64 %42
  %44 = load i32* %43, align 4, !tbaa !30
  %45 = sext i32 %41 to i64
  %46 = getelementptr inbounds [3 x float]* %x, i64 %45, i64 0
  %47 = sext i32 %44 to i64
  %48 = getelementptr inbounds [3 x float]* %x, i64 %47, i64 0
  %49 = load float* %46, align 4, !tbaa !14
  %50 = load float* %48, align 4, !tbaa !14
  %51 = fsub float %49, %50
  %52 = getelementptr inbounds [3 x float]* %x, i64 %45, i64 1
  %53 = load float* %52, align 4, !tbaa !14
  %54 = getelementptr inbounds [3 x float]* %x, i64 %47, i64 1
  %55 = load float* %54, align 4, !tbaa !14
  %56 = fsub float %53, %55
  %57 = getelementptr inbounds [3 x float]* %x, i64 %45, i64 2
  %58 = load float* %57, align 4, !tbaa !14
  %59 = getelementptr inbounds [3 x float]* %x, i64 %47, i64 2
  %60 = load float* %59, align 4, !tbaa !14
  %61 = fsub float %58, %60
  store float %51, float* %18, align 4, !tbaa !14
  store float %56, float* %19, align 4, !tbaa !14
  store float %61, float* %20, align 4, !tbaa !14
  %62 = fmul float %51, %51
  %63 = fmul float %56, %56
  %64 = fadd float %62, %63
  %65 = fmul float %61, %61
  %66 = fadd float %65, %64
  %67 = fpext float %66 to double
  %68 = tail call double @sqrt(double %67) #10
  %69 = fdiv double 1.000000e+00, %68
  %70 = fptrunc double %69 to float
  %71 = fmul float %70, %70
  %72 = sext i32 %38 to i64
  %73 = getelementptr inbounds %union.t_iparams* %ip, i64 %72
  %74 = bitcast %union.t_iparams* %73 to i32*
  %75 = load i32* %74, align 4, !tbaa !31
  %76 = getelementptr inbounds %union.t_iparams* %ip, i64 %72, i32 0, i32 1
  %77 = bitcast float* %76 to i32*
  %78 = load i32* %77, align 4, !tbaa !63
  %79 = getelementptr inbounds %union.t_iparams* %ip, i64 %72, i32 0, i32 5
  %80 = load float* %79, align 4, !tbaa !64
  %81 = fmul float %16, %80
  %82 = getelementptr inbounds float* %22, i64 %indvars.iv20
  %83 = load float* %82, align 4, !tbaa !14
  %84 = getelementptr inbounds %union.t_iparams* %ip, i64 %72, i32 0, i32 4
  %85 = load float* %84, align 4, !tbaa !65
  %86 = fsub float %83, %85
  %87 = fpext float %81 to double
  %88 = fmul double %87, 5.000000e-01
  %89 = fmul float %86, %86
  %90 = fpext float %89 to double
  %91 = fmul double %88, %90
  %92 = fpext float %vtot.07 to double
  %93 = fadd double %92, %91
  %94 = fptrunc double %93 to float
  br i1 %10, label %95, label %106

; <label>:95                                      ; preds = %36
  %96 = load float** %23, align 8, !tbaa !37
  %97 = getelementptr inbounds float* %96, i64 %indvars.iv20
  %98 = load float* %97, align 4, !tbaa !14
  %99 = fsub float %98, %85
  %100 = fmul float %86, %99
  %101 = fcmp ugt float %100, 0.000000e+00
  br i1 %101, label %102, label %106

; <label>:102                                     ; preds = %95
  %sqrtf = tail call float @sqrtf(float %100) #5
  %103 = fcmp olt float %99, 0.000000e+00
  br i1 %103, label %104, label %106

; <label>:104                                     ; preds = %102
  %105 = fsub float -0.000000e+00, %sqrtf
  br label %106

; <label>:106                                     ; preds = %95, %104, %102, %36
  %dev.0 = phi float [ %105, %104 ], [ %sqrtf, %102 ], [ %86, %36 ], [ 0.000000e+00, %95 ]
  %107 = getelementptr inbounds %union.t_iparams* %ip, i64 %72, i32 0, i32 3
  %108 = load float* %107, align 4, !tbaa !62
  %109 = fmul float %81, %108
  %110 = fmul float %71, %109
  %111 = icmp sgt i32 %78, 0
  br i1 %111, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %106
  %112 = add i32 %78, -1
  br label %113

; <label>:113                                     ; preds = %113, %.lr.ph
  %pfac.04 = phi float [ %110, %.lr.ph ], [ %114, %113 ]
  %i.03 = phi i32 [ 0, %.lr.ph ], [ %115, %113 ]
  %114 = fmul float %70, %pfac.04
  %115 = add nuw nsw i32 %i.03, 1
  %exitcond = icmp eq i32 %i.03, %112
  br i1 %exitcond, label %._crit_edge, label %113

._crit_edge:                                      ; preds = %113, %106
  %pfac.0.lcssa = phi float [ %110, %106 ], [ %114, %113 ]
  %116 = sext i32 %75 to i64
  %117 = getelementptr inbounds [3 x [3 x float]]* %25, i64 %116, i64 0, i64 0
  %118 = load float* %117, align 4, !tbaa !14
  %119 = fmul float %118, %51
  %120 = getelementptr inbounds [3 x [3 x float]]* %25, i64 %116, i64 0, i64 1
  %121 = load float* %120, align 4, !tbaa !14
  %122 = fmul float %121, %56
  %123 = fadd float %119, %122
  %124 = getelementptr inbounds [3 x [3 x float]]* %25, i64 %116, i64 0, i64 2
  %125 = load float* %124, align 4, !tbaa !14
  %126 = fmul float %125, %61
  %127 = fadd float %123, %126
  store float %127, float* %26, align 4, !tbaa !14
  %128 = getelementptr inbounds [3 x [3 x float]]* %25, i64 %116, i64 1, i64 0
  %129 = load float* %128, align 4, !tbaa !14
  %130 = fmul float %129, %51
  %131 = getelementptr inbounds [3 x [3 x float]]* %25, i64 %116, i64 1, i64 1
  %132 = load float* %131, align 4, !tbaa !14
  %133 = fmul float %132, %56
  %134 = fadd float %130, %133
  %135 = getelementptr inbounds [3 x [3 x float]]* %25, i64 %116, i64 1, i64 2
  %136 = load float* %135, align 4, !tbaa !14
  %137 = fmul float %136, %61
  %138 = fadd float %134, %137
  store float %138, float* %27, align 4, !tbaa !14
  %139 = getelementptr inbounds [3 x [3 x float]]* %25, i64 %116, i64 2, i64 0
  %140 = load float* %139, align 4, !tbaa !14
  %141 = fmul float %140, %51
  %142 = getelementptr inbounds [3 x [3 x float]]* %25, i64 %116, i64 2, i64 1
  %143 = load float* %142, align 4, !tbaa !14
  %144 = fmul float %143, %56
  %145 = fadd float %141, %144
  %146 = getelementptr inbounds [3 x [3 x float]]* %25, i64 %116, i64 2, i64 2
  %147 = load float* %146, align 4, !tbaa !14
  %148 = fmul float %147, %61
  %149 = fadd float %145, %148
  store float %149, float* %28, align 4, !tbaa !14
  %150 = fmul float %dev.0, %pfac.0.lcssa
  %151 = shl i32 %78, 1
  %152 = add i32 %151, 4
  %153 = sitofp i32 %152 to float
  %154 = fmul float %71, %153
  %155 = fmul float %127, %51
  %156 = fmul float %138, %56
  %157 = fadd float %155, %156
  %158 = fmul float %149, %61
  %159 = fadd float %157, %158
  %160 = fmul float %154, %159
  %161 = fmul float %127, 4.000000e+00
  %162 = fmul float %51, %160
  %163 = fsub float %161, %162
  %164 = fmul float %150, %163
  %165 = fsub float -0.000000e+00, %164
  %166 = getelementptr inbounds [3 x float]* %fij, i64 0, i64 0
  store float %165, float* %166, align 4, !tbaa !14
  br label %._crit_edge22

._crit_edge22:                                    ; preds = %._crit_edge, %._crit_edge22
  %indvars.iv.next26 = phi i64 [ 1, %._crit_edge ], [ %indvars.iv.next, %._crit_edge22 ]
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %Sr, i64 0, i64 %indvars.iv.next26
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  %.phi.trans.insert23 = getelementptr inbounds [3 x float]* %r, i64 0, i64 %indvars.iv.next26
  %.pre24 = load float* %.phi.trans.insert23, align 4, !tbaa !14
  %167 = fmul float %.pre, 4.000000e+00
  %168 = fmul float %.pre24, %160
  %169 = fsub float %167, %168
  %170 = fmul float %150, %169
  %171 = fsub float -0.000000e+00, %170
  %172 = getelementptr inbounds [3 x float]* %fij, i64 0, i64 %indvars.iv.next26
  store float %171, float* %172, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next26, 1
  %exitcond14 = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond14, label %173, label %._crit_edge22

; <label>:173                                     ; preds = %._crit_edge22
  %174 = sub nsw i32 %41, %30
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds [3 x i32]* %32, i64 %175, i64 0
  %177 = sub nsw i32 %44, %30
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds [3 x i32]* %32, i64 %178, i64 0
  %180 = load i32* %176, align 4, !tbaa !30
  %181 = load i32* %179, align 4, !tbaa !30
  %182 = getelementptr inbounds [3 x i32]* %32, i64 %175, i64 1
  %183 = load i32* %182, align 4, !tbaa !30
  %184 = getelementptr inbounds [3 x i32]* %32, i64 %178, i64 1
  %185 = load i32* %184, align 4, !tbaa !30
  %186 = getelementptr inbounds [3 x i32]* %32, i64 %175, i64 2
  %187 = load i32* %186, align 4, !tbaa !30
  %188 = getelementptr inbounds [3 x i32]* %32, i64 %178, i64 2
  %189 = load i32* %188, align 4, !tbaa !30
  %190 = sub nsw i32 %187, %189
  %191 = mul i32 %190, 3
  %192 = add i32 %183, 3
  %193 = sub i32 %192, %185
  %194 = add i32 %193, %191
  %195 = mul i32 %194, 3
  %196 = add i32 %180, 4
  %197 = sub i32 %196, %181
  %198 = add i32 %197, %195
  %199 = sext i32 %198 to i64
  br label %200

; <label>:200                                     ; preds = %200, %173
  %indvars.iv15 = phi i64 [ 0, %173 ], [ %indvars.iv.next16, %200 ]
  %201 = getelementptr inbounds [3 x float]* %fij, i64 0, i64 %indvars.iv15
  %202 = load float* %201, align 4, !tbaa !14
  %203 = getelementptr inbounds [3 x float]* %f, i64 %45, i64 %indvars.iv15
  %204 = load float* %203, align 4, !tbaa !14
  %205 = fadd float %202, %204
  store float %205, float* %203, align 4, !tbaa !14
  %206 = getelementptr inbounds [3 x float]* %f, i64 %47, i64 %indvars.iv15
  %207 = load float* %206, align 4, !tbaa !14
  %208 = fsub float %207, %202
  store float %208, float* %206, align 4, !tbaa !14
  %209 = getelementptr inbounds [3 x float]* %34, i64 %199, i64 %indvars.iv15
  %210 = load float* %209, align 4, !tbaa !14
  %211 = fadd float %202, %210
  store float %211, float* %209, align 4, !tbaa !14
  %212 = getelementptr inbounds [3 x float]* %34, i64 13, i64 %indvars.iv15
  %213 = load float* %212, align 4, !tbaa !14
  %214 = fsub float %213, %202
  store float %214, float* %212, align 4, !tbaa !14
  %indvars.iv.next16 = add nuw nsw i64 %indvars.iv15, 1
  %exitcond17 = icmp eq i64 %indvars.iv.next16, 3
  br i1 %exitcond17, label %215, label %200

; <label>:215                                     ; preds = %200
  %indvars.iv.next21 = add nuw nsw i64 %indvars.iv20, 1
  %indvars.iv.next19 = add nuw nsw i64 %indvars.iv18, 3
  %216 = icmp slt i64 %indvars.iv.next19, %35
  br i1 %216, label %36, label %.loopexit

.loopexit:                                        ; preds = %215, %5, %0
  %vtot.1 = phi float [ 0.000000e+00, %0 ], [ 0.000000e+00, %5 ], [ %94, %215 ]
  ret float %vtot.1
}
