define float @water_pol(i32 %nbonds, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %forceparams, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture readnone %fr, %struct.t_graph* nocapture readnone %g, [3 x float]* nocapture readnone %box, float %lambda, float* nocapture readnone %dvdlambda, %struct.t_mdatoms* nocapture readnone %md, i32 %ngrp, float* nocapture readnone %egnb, float* nocapture readnone %egcoul, %struct.t_fcdata* nocapture readnone %fcd) #3 {
  %dHH = alloca [3 x float], align 4
  %dOD = alloca [3 x float], align 4
  %dDS = alloca [3 x float], align 4
  %nW = alloca [3 x float], align 4
  %proj = alloca [3 x float], align 4
  %1 = icmp sgt i32 %nbonds, 0
  br i1 %1, label %2, label %.loopexit1

; <label>:2                                       ; preds = %0
  %3 = load i32* %forceatoms, align 4, !tbaa !36
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %4, i32 0, i32 0
  %6 = load float* %5, align 4, !tbaa !51
  %7 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %4, i32 0, i32 1
  %8 = load float* %7, align 4, !tbaa !53
  %9 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %4, i32 0, i32 2
  %10 = load float* %9, align 4, !tbaa !54
  %11 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %4, i32 0, i32 4
  %12 = load float* %11, align 4, !tbaa !55
  %13 = fdiv float 1.000000e+00, %12
  %14 = load %struct.__sFILE** @debug, align 8, !tbaa !56
  %15 = icmp eq %struct.__sFILE* %14, null
  br i1 %15, label %.lr.ph, label %16

; <label>:16                                      ; preds = %2
  %17 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %4, i32 0, i32 5
  %18 = fpext float %6 to double
  %19 = fpext float %8 to double
  %20 = fpext float %10 to double
  %21 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %14, i8* getelementptr inbounds ([48 x i8]* @.str2, i64 0, i64 0), double %18, double %19, double %20) #9
  %22 = load %struct.__sFILE** @debug, align 8, !tbaa !56
  %23 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %4, i32 0, i32 3
  %24 = load float* %23, align 4, !tbaa !57
  %25 = fpext float %24 to double
  %26 = load float* %11, align 4, !tbaa !55
  %27 = fpext float %26 to double
  %28 = load float* %17, align 4, !tbaa !58
  %29 = fpext float %28 to double
  %30 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %22, i8* getelementptr inbounds ([48 x i8]* @.str3, i64 0, i64 0), double %25, double %27, double %29) #9
  br label %.lr.ph

.lr.ph:                                           ; preds = %16, %2
  %31 = getelementptr inbounds [3 x float]* %dHH, i64 0, i64 0
  %32 = getelementptr inbounds [3 x float]* %dHH, i64 0, i64 1
  %33 = getelementptr inbounds [3 x float]* %dHH, i64 0, i64 2
  %34 = getelementptr inbounds [3 x float]* %dOD, i64 0, i64 0
  %35 = getelementptr inbounds [3 x float]* %dOD, i64 0, i64 1
  %36 = getelementptr inbounds [3 x float]* %dOD, i64 0, i64 2
  %37 = getelementptr inbounds [3 x float]* %dDS, i64 0, i64 0
  %38 = getelementptr inbounds [3 x float]* %dDS, i64 0, i64 1
  %39 = getelementptr inbounds [3 x float]* %dDS, i64 0, i64 2
  %40 = getelementptr inbounds [3 x float]* %nW, i64 0, i64 0
  %41 = getelementptr inbounds [3 x float]* %nW, i64 0, i64 1
  %42 = getelementptr inbounds [3 x float]* %nW, i64 0, i64 2
  %43 = getelementptr inbounds [3 x float]* %proj, i64 0, i64 0
  %44 = getelementptr inbounds [3 x float]* %proj, i64 0, i64 1
  %45 = getelementptr inbounds [3 x float]* %proj, i64 0, i64 2
  %46 = sext i32 %nbonds to i64
  br label %49

.loopexit:                                        ; preds = %186
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 2
  %47 = fadd float %vtot.05, %185
  %48 = icmp slt i64 %indvars.iv.next14, %46
  br i1 %48, label %49, label %.loopexit1.loopexit

; <label>:49                                      ; preds = %.lr.ph, %.loopexit
  %indvars.iv13 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next14, %.loopexit ]
  %vtot.05 = phi float [ 0.000000e+00, %.lr.ph ], [ %47, %.loopexit ]
  %50 = or i64 %indvars.iv13, 1
  %51 = getelementptr inbounds i32* %forceatoms, i64 %50
  %52 = load i32* %51, align 4, !tbaa !36
  %53 = add nsw i32 %52, 1
  %54 = add nsw i32 %52, 2
  %55 = add nsw i32 %52, 3
  %56 = add nsw i32 %52, 4
  %57 = sext i32 %53 to i64
  %58 = getelementptr inbounds [3 x float]* %x, i64 %57, i64 0
  %59 = sext i32 %52 to i64
  %60 = getelementptr inbounds [3 x float]* %x, i64 %59, i64 0
  %61 = load float* %58, align 4, !tbaa !14
  %62 = load float* %60, align 4, !tbaa !14
  %63 = fsub float %61, %62
  %64 = getelementptr inbounds [3 x float]* %x, i64 %57, i64 1
  %65 = load float* %64, align 4, !tbaa !14
  %66 = getelementptr inbounds [3 x float]* %x, i64 %59, i64 1
  %67 = load float* %66, align 4, !tbaa !14
  %68 = fsub float %65, %67
  %69 = getelementptr inbounds [3 x float]* %x, i64 %57, i64 2
  %70 = load float* %69, align 4, !tbaa !14
  %71 = getelementptr inbounds [3 x float]* %x, i64 %59, i64 2
  %72 = load float* %71, align 4, !tbaa !14
  %73 = fsub float %70, %72
  %74 = sext i32 %54 to i64
  %75 = getelementptr inbounds [3 x float]* %x, i64 %74, i64 0
  %76 = load float* %75, align 4, !tbaa !14
  %77 = fsub float %76, %62
  %78 = getelementptr inbounds [3 x float]* %x, i64 %74, i64 1
  %79 = load float* %78, align 4, !tbaa !14
  %80 = fsub float %79, %67
  %81 = getelementptr inbounds [3 x float]* %x, i64 %74, i64 2
  %82 = load float* %81, align 4, !tbaa !14
  %83 = fsub float %82, %72
  %84 = fsub float %76, %61
  %85 = fsub float %79, %65
  %86 = fsub float %82, %70
  %87 = sext i32 %55 to i64
  %88 = getelementptr inbounds [3 x float]* %x, i64 %87, i64 0
  %89 = load float* %88, align 4, !tbaa !14
  %90 = fsub float %89, %62
  %91 = getelementptr inbounds [3 x float]* %x, i64 %87, i64 1
  %92 = load float* %91, align 4, !tbaa !14
  %93 = fsub float %92, %67
  %94 = getelementptr inbounds [3 x float]* %x, i64 %87, i64 2
  %95 = load float* %94, align 4, !tbaa !14
  %96 = fsub float %95, %72
  %97 = sext i32 %56 to i64
  %98 = getelementptr inbounds [3 x float]* %x, i64 %97, i64 0
  %99 = load float* %98, align 4, !tbaa !14
  %100 = fsub float %99, %89
  %101 = getelementptr inbounds [3 x float]* %x, i64 %97, i64 1
  %102 = load float* %101, align 4, !tbaa !14
  %103 = fsub float %102, %92
  %104 = getelementptr inbounds [3 x float]* %x, i64 %97, i64 2
  %105 = load float* %104, align 4, !tbaa !14
  %106 = fsub float %105, %95
  store float %100, float* %37, align 4, !tbaa !14
  store float %103, float* %38, align 4, !tbaa !14
  store float %106, float* %39, align 4, !tbaa !14
  %107 = fmul float %68, %83
  %108 = fmul float %73, %80
  %109 = fsub float %107, %108
  %110 = fmul float %73, %77
  %111 = fmul float %63, %83
  %112 = fsub float %110, %111
  %113 = fmul float %63, %80
  %114 = fmul float %68, %77
  %115 = fsub float %113, %114
  %116 = fmul float %109, %109
  %117 = fmul float %112, %112
  %118 = fadd float %116, %117
  %119 = fmul float %115, %115
  %120 = fadd float %119, %118
  %121 = fpext float %120 to double
  %122 = tail call double @sqrt(double %121) #10
  %123 = fdiv double 1.000000e+00, %122
  %124 = fptrunc double %123 to float
  %125 = fmul float %90, %90
  %126 = fmul float %93, %93
  %127 = fadd float %125, %126
  %128 = fmul float %96, %96
  %129 = fadd float %127, %128
  %130 = fpext float %129 to double
  %131 = tail call double @sqrt(double %130) #10
  %132 = fdiv double 1.000000e+00, %131
  %133 = fptrunc double %132 to float
  %134 = fmul float %109, %124
  store float %134, float* %40, align 4, !tbaa !14
  %135 = fmul float %124, %112
  store float %135, float* %41, align 4, !tbaa !14
  %136 = fmul float %124, %115
  store float %136, float* %42, align 4, !tbaa !14
  %137 = fmul float %13, %84
  store float %137, float* %31, align 4, !tbaa !14
  %138 = fmul float %13, %85
  store float %138, float* %32, align 4, !tbaa !14
  %139 = fmul float %13, %86
  store float %139, float* %33, align 4, !tbaa !14
  %140 = fmul float %133, %90
  store float %140, float* %34, align 4, !tbaa !14
  %141 = fmul float %133, %93
  store float %141, float* %35, align 4, !tbaa !14
  %142 = fmul float %133, %96
  store float %142, float* %36, align 4, !tbaa !14
  %143 = fmul float %100, %140
  %144 = fmul float %103, %141
  %145 = fadd float %143, %144
  %146 = fmul float %142, %106
  %147 = fadd float %145, %146
  %148 = fmul float %147, %140
  %149 = fsub float %100, %148
  %150 = getelementptr inbounds [3 x float]* %proj, i64 0, i64 0
  store float %149, float* %150, align 4, !tbaa !14
  br label %._crit_edge

._crit_edge:                                      ; preds = %49, %._crit_edge
  %indvars.iv.next29 = phi i64 [ 1, %49 ], [ %indvars.iv.next, %._crit_edge ]
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %dDS, i64 0, i64 %indvars.iv.next29
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  %.phi.trans.insert15 = getelementptr inbounds [3 x float]* %dOD, i64 0, i64 %indvars.iv.next29
  %.pre16 = load float* %.phi.trans.insert15, align 4, !tbaa !14
  %151 = fmul float %147, %.pre16
  %152 = fsub float %.pre, %151
  %153 = getelementptr inbounds [3 x float]* %proj, i64 0, i64 %indvars.iv.next29
  store float %152, float* %153, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next29, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %154, label %._crit_edge

; <label>:154                                     ; preds = %._crit_edge
  %155 = load float* %43, align 4, !tbaa !14
  %156 = fmul float %155, %134
  %157 = load float* %44, align 4, !tbaa !14
  %158 = fmul float %157, %135
  %159 = fadd float %156, %158
  %160 = load float* %45, align 4, !tbaa !14
  %161 = fmul float %160, %136
  %162 = fadd float %159, %161
  %163 = fmul float %162, %134
  %164 = getelementptr inbounds [3 x float]* %proj, i64 0, i64 0
  %165 = fsub float %155, %163
  store float %165, float* %164, align 4, !tbaa !14
  br label %._crit_edge17

._crit_edge17:                                    ; preds = %154, %._crit_edge17
  %indvars.iv.next830 = phi i64 [ 1, %154 ], [ %indvars.iv.next8, %._crit_edge17 ]
  %.phi.trans.insert18 = getelementptr inbounds [3 x float]* %nW, i64 0, i64 %indvars.iv.next830
  %.pre19 = load float* %.phi.trans.insert18, align 4, !tbaa !14
  %.phi.trans.insert20 = getelementptr inbounds [3 x float]* %proj, i64 0, i64 %indvars.iv.next830
  %.pre21 = load float* %.phi.trans.insert20, align 4, !tbaa !14
  %166 = fmul float %162, %.pre19
  %167 = getelementptr inbounds [3 x float]* %proj, i64 0, i64 %indvars.iv.next830
  %168 = fsub float %.pre21, %166
  store float %168, float* %167, align 4, !tbaa !14
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv.next830, 1
  %exitcond9 = icmp eq i64 %indvars.iv.next8, 3
  br i1 %exitcond9, label %169, label %._crit_edge17

; <label>:169                                     ; preds = %._crit_edge17
  %170 = load float* %43, align 4, !tbaa !14
  %171 = fmul float %170, %137
  %172 = load float* %44, align 4, !tbaa !14
  %173 = fmul float %172, %138
  %174 = fadd float %171, %173
  %175 = load float* %45, align 4, !tbaa !14
  %176 = fmul float %175, %139
  %177 = fadd float %174, %176
  %178 = fmul float %6, %162
  %179 = fmul float %8, %177
  %180 = fmul float %10, %147
  %181 = fmul float %162, %178
  %182 = fmul float %177, %179
  %183 = fadd float %181, %182
  %184 = fmul float %147, %180
  %185 = fadd float %184, %183
  br label %186

; <label>:186                                     ; preds = %._crit_edge22, %169
  %187 = phi float [ %140, %169 ], [ %.pre28, %._crit_edge22 ]
  %188 = phi float [ %137, %169 ], [ %.pre26, %._crit_edge22 ]
  %189 = phi float [ %134, %169 ], [ %.pre24, %._crit_edge22 ]
  %indvars.iv10 = phi i64 [ 0, %169 ], [ %indvars.iv.next11, %._crit_edge22 ]
  %190 = fmul float %178, %189
  %191 = fmul float %179, %188
  %192 = fmul float %180, %187
  %193 = fsub float -0.000000e+00, %190
  %194 = fsub float %193, %191
  %195 = fsub float %194, %192
  %196 = getelementptr inbounds [3 x float]* %f, i64 %97, i64 %indvars.iv10
  %197 = load float* %196, align 4, !tbaa !14
  %198 = fadd float %197, %195
  store float %198, float* %196, align 4, !tbaa !14
  %199 = getelementptr inbounds [3 x float]* %f, i64 %87, i64 %indvars.iv10
  %200 = load float* %199, align 4, !tbaa !14
  %201 = fsub float %200, %195
  store float %201, float* %199, align 4, !tbaa !14
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1
  %exitcond12 = icmp eq i64 %indvars.iv.next11, 3
  br i1 %exitcond12, label %.loopexit, label %._crit_edge22

._crit_edge22:                                    ; preds = %186
  %.phi.trans.insert23 = getelementptr inbounds [3 x float]* %nW, i64 0, i64 %indvars.iv.next11
  %.pre24 = load float* %.phi.trans.insert23, align 4, !tbaa !14
  %.phi.trans.insert25 = getelementptr inbounds [3 x float]* %dHH, i64 0, i64 %indvars.iv.next11
  %.pre26 = load float* %.phi.trans.insert25, align 4, !tbaa !14
  %.phi.trans.insert27 = getelementptr inbounds [3 x float]* %dOD, i64 0, i64 %indvars.iv.next11
  %.pre28 = load float* %.phi.trans.insert27, align 4, !tbaa !14
  br label %186

.loopexit1.loopexit:                              ; preds = %.loopexit
  %phitmp = fmul float %47, 5.000000e-01
  br label %.loopexit1

.loopexit1:                                       ; preds = %.loopexit1.loopexit, %0
  %vtot.1 = phi float [ 0.000000e+00, %0 ], [ %phitmp, %.loopexit1.loopexit ]
  ret float %vtot.1
}
