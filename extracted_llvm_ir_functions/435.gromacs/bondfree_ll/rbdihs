define float @rbdihs(i32 %nbonds, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %forceparams, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture readonly %fr, %struct.t_graph* nocapture readonly %g, [3 x float]* nocapture readnone %box, float %lambda, float* nocapture readnone %dvdlambda, %struct.t_mdatoms* nocapture readnone %md, i32 %ngrp, float* nocapture readnone %egnb, float* nocapture readnone %egcoul, %struct.t_fcdata* nocapture readnone %fcd) #3 {
  %r_ij = alloca [3 x float], align 4
  %r_kj = alloca [3 x float], align 4
  %r_kl = alloca [3 x float], align 4
  %m = alloca [3 x float], align 4
  %n = alloca [3 x float], align 4
  %parm = alloca [6 x float], align 16
  %parm4 = bitcast [6 x float]* %parm to i8*
  %cos_phi = alloca float, align 4
  %sign = alloca float, align 4
  %1 = icmp sgt i32 %nbonds, 0
  br i1 %1, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %2 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 0
  %3 = getelementptr inbounds [3 x float]* %r_kj, i64 0, i64 0
  %4 = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 0
  %5 = getelementptr inbounds [3 x float]* %m, i64 0, i64 0
  %6 = getelementptr inbounds [3 x float]* %n, i64 0, i64 0
  %7 = getelementptr inbounds [6 x float]* %parm, i64 0, i64 0
  %8 = getelementptr inbounds [6 x float]* %parm, i64 0, i64 1
  %9 = getelementptr inbounds [6 x float]* %parm, i64 0, i64 2
  %10 = getelementptr inbounds [6 x float]* %parm, i64 0, i64 3
  %11 = getelementptr inbounds [6 x float]* %parm, i64 0, i64 4
  %12 = getelementptr inbounds [6 x float]* %parm, i64 0, i64 5
  %13 = sext i32 %nbonds to i64
  br label %14

; <label>:14                                      ; preds = %.lr.ph, %44
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %44 ]
  %vtot.03 = phi float [ 0.000000e+00, %.lr.ph ], [ %86, %44 ]
  %15 = add nuw nsw i64 %indvars.iv, 1
  %16 = getelementptr inbounds i32* %forceatoms, i64 %indvars.iv
  %17 = load i32* %16, align 4, !tbaa !36
  %18 = add nuw nsw i64 %indvars.iv, 2
  %19 = getelementptr inbounds i32* %forceatoms, i64 %15
  %20 = load i32* %19, align 4, !tbaa !36
  %21 = add nuw nsw i64 %indvars.iv, 3
  %22 = getelementptr inbounds i32* %forceatoms, i64 %18
  %23 = load i32* %22, align 4, !tbaa !36
  %24 = add nuw nsw i64 %indvars.iv, 4
  %25 = getelementptr inbounds i32* %forceatoms, i64 %21
  %26 = load i32* %25, align 4, !tbaa !36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 5
  %27 = getelementptr inbounds i32* %forceatoms, i64 %24
  %28 = load i32* %27, align 4, !tbaa !36
  %29 = sext i32 %20 to i64
  %30 = getelementptr inbounds [3 x float]* %x, i64 %29, i64 0
  %31 = sext i32 %23 to i64
  %32 = getelementptr inbounds [3 x float]* %x, i64 %31, i64 0
  %33 = sext i32 %26 to i64
  %34 = getelementptr inbounds [3 x float]* %x, i64 %33, i64 0
  %35 = sext i32 %28 to i64
  %36 = getelementptr inbounds [3 x float]* %x, i64 %35, i64 0
  %37 = call float @dih_angle([3 x float]* undef, float* %30, float* %32, float* %34, float* %36, float* %2, float* %3, float* %4, float* %5, float* %6, float* %cos_phi, float* %sign) #11
  %38 = fcmp olt float %37, 0.000000e+00
  %39 = fpext float %37 to double
  br i1 %38, label %40, label %42

; <label>:40                                      ; preds = %14
  %41 = fadd double %39, 0x400921FB54442D18
  br label %44

; <label>:42                                      ; preds = %14
  %43 = fadd double %39, 0xC00921FB54442D18
  br label %44

; <label>:44                                      ; preds = %42, %40
  %phi.0.in = phi double [ %41, %40 ], [ %43, %42 ]
  %phi.0 = fptrunc double %phi.0.in to float
  %45 = load float* %cos_phi, align 4, !tbaa !14
  %46 = fsub float -0.000000e+00, %45
  store float %46, float* %cos_phi, align 4, !tbaa !14
  %47 = fpext float %phi.0 to double
  %48 = tail call double @sin(double %47) #10
  %49 = sext i32 %17 to i64
  %scevgep = getelementptr %union.t_iparams* %forceparams, i64 %49
  %scevgep5 = bitcast %union.t_iparams* %scevgep to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %parm4, i8* %scevgep5, i64 24, i32 4, i1 false)
  %50 = fptrunc double %48 to float
  %51 = load float* %7, align 16, !tbaa !14
  %52 = load float* %8, align 4, !tbaa !14
  %53 = fadd float %52, 0.000000e+00
  %54 = fmul float %52, %46
  %55 = fadd float %51, %54
  %56 = load float* %9, align 8, !tbaa !14
  %57 = fmul float %56, 2.000000e+00
  %58 = fmul float %57, %46
  %59 = fadd float %53, %58
  %60 = fmul float %45, %45
  %61 = fmul float %60, %56
  %62 = fadd float %55, %61
  %63 = load float* %10, align 4, !tbaa !14
  %64 = fmul float %63, 3.000000e+00
  %65 = fmul float %60, %64
  %66 = fadd float %59, %65
  %67 = fmul float %60, %46
  %68 = fmul float %67, %63
  %69 = fadd float %62, %68
  %70 = load float* %11, align 16, !tbaa !14
  %71 = fmul float %70, 4.000000e+00
  %72 = fmul float %67, %71
  %73 = fadd float %66, %72
  %74 = fmul float %67, %46
  %75 = fmul float %74, %70
  %76 = fadd float %69, %75
  %77 = load float* %12, align 4, !tbaa !14
  %78 = fmul float %77, 5.000000e+00
  %79 = fmul float %74, %78
  %80 = fadd float %73, %79
  %81 = fmul float %74, %46
  %82 = fmul float %81, %77
  %83 = fadd float %76, %82
  %84 = fmul float %50, %80
  %85 = fsub float -0.000000e+00, %84
  call void @do_dih_fup(i32 %20, i32 %23, i32 %26, i32 %28, float %85, float* %2, float* %3, float* %4, float* %5, float* %6, [3 x float]* %f, %struct.t_forcerec* %fr, %struct.t_graph* %g, [3 x float]* undef) #11
  %86 = fadd float %vtot.03, %83
  %87 = icmp slt i64 %indvars.iv.next, %13
  br i1 %87, label %14, label %._crit_edge

._crit_edge:                                      ; preds = %44, %0
  %vtot.0.lcssa = phi float [ 0.000000e+00, %0 ], [ %86, %44 ]
  ret float %vtot.0.lcssa
}
