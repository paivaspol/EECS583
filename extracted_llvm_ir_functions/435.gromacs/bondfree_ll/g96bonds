define float @g96bonds(i32 %nbonds, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %forceparams, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture readonly %fr, %struct.t_graph* nocapture readonly %g, [3 x float]* nocapture readnone %box, float %lambda, float* nocapture %dvdlambda, %struct.t_mdatoms* nocapture readnone %md, i32 %ngrp, float* nocapture readnone %egnb, float* nocapture readnone %egcoul, %struct.t_fcdata* nocapture readnone %fcd) #3 {
  %dx = alloca [3 x float], align 4
  %1 = icmp sgt i32 %nbonds, 0
  br i1 %1, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %2 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 0
  %3 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 1
  %4 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 2
  %5 = fsub float 1.000000e+00, %lambda
  %6 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %7 = load i32* %6, align 4, !tbaa !41
  %8 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %9 = load [3 x i32]** %8, align 8, !tbaa !43
  %10 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 58
  %11 = load [3 x float]** %10, align 8, !tbaa !44
  %12 = sext i32 %nbonds to i64
  br label %15

.loopexit:                                        ; preds = %105
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 3
  %13 = fptrunc double %78 to float
  %14 = icmp slt i64 %indvars.iv.next6, %12
  br i1 %14, label %15, label %._crit_edge

; <label>:15                                      ; preds = %.lr.ph, %.loopexit
  %indvars.iv5 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next6, %.loopexit ]
  %vtot.04 = phi float [ 0.000000e+00, %.lr.ph ], [ %13, %.loopexit ]
  %16 = add nuw nsw i64 %indvars.iv5, 1
  %17 = getelementptr inbounds i32* %forceatoms, i64 %indvars.iv5
  %18 = load i32* %17, align 4, !tbaa !36
  %19 = add nuw nsw i64 %indvars.iv5, 2
  %20 = getelementptr inbounds i32* %forceatoms, i64 %16
  %21 = load i32* %20, align 4, !tbaa !36
  %22 = getelementptr inbounds i32* %forceatoms, i64 %19
  %23 = load i32* %22, align 4, !tbaa !36
  %24 = sext i32 %21 to i64
  %25 = getelementptr inbounds [3 x float]* %x, i64 %24, i64 0
  %26 = sext i32 %23 to i64
  %27 = getelementptr inbounds [3 x float]* %x, i64 %26, i64 0
  %28 = load float* %25, align 4, !tbaa !14
  %29 = load float* %27, align 4, !tbaa !14
  %30 = fsub float %28, %29
  %31 = getelementptr inbounds [3 x float]* %x, i64 %24, i64 1
  %32 = load float* %31, align 4, !tbaa !14
  %33 = getelementptr inbounds [3 x float]* %x, i64 %26, i64 1
  %34 = load float* %33, align 4, !tbaa !14
  %35 = fsub float %32, %34
  %36 = getelementptr inbounds [3 x float]* %x, i64 %24, i64 2
  %37 = load float* %36, align 4, !tbaa !14
  %38 = getelementptr inbounds [3 x float]* %x, i64 %26, i64 2
  %39 = load float* %38, align 4, !tbaa !14
  %40 = fsub float %37, %39
  store float %30, float* %2, align 4, !tbaa !14
  store float %35, float* %3, align 4, !tbaa !14
  store float %40, float* %4, align 4, !tbaa !14
  %41 = fmul float %30, %30
  %42 = fmul float %35, %35
  %43 = fadd float %41, %42
  %44 = fmul float %40, %40
  %45 = fadd float %44, %43
  %46 = sext i32 %18 to i64
  %47 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %46, i32 0, i32 1
  %48 = load float* %47, align 4, !tbaa !46
  %49 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %46, i32 0, i32 3
  %50 = load float* %49, align 4, !tbaa !48
  %51 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %46, i32 0, i32 0
  %52 = load float* %51, align 4, !tbaa !49
  %53 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %46, i32 0, i32 2
  %54 = load float* %53, align 4, !tbaa !50
  %55 = fmul float %5, %48
  %56 = fmul float %50, %lambda
  %57 = fadd float %55, %56
  %58 = fmul float %5, %52
  %59 = fmul float %54, %lambda
  %60 = fadd float %58, %59
  %61 = fsub float %45, %60
  %62 = fmul float %61, %61
  %63 = fmul float %57, %61
  %64 = fmul float %57, 5.000000e-01
  %65 = fmul float %64, %62
  %66 = fsub float %50, %48
  %67 = fmul float %66, 5.000000e-01
  %68 = fmul float %67, %62
  %69 = fsub float %52, %54
  %70 = fmul float %57, %69
  %71 = fmul float %70, %61
  %72 = fadd float %71, %68
  %73 = load float* %dvdlambda, align 4, !tbaa !14
  %74 = fadd float %73, %72
  store float %74, float* %dvdlambda, align 4, !tbaa !14
  %75 = fpext float %65 to double
  %76 = fmul double %75, 5.000000e-01
  %77 = fpext float %vtot.04 to double
  %78 = fadd double %77, %76
  %79 = sub nsw i32 %21, %7
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [3 x i32]* %9, i64 %80, i64 0
  %82 = sub nsw i32 %23, %7
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [3 x i32]* %9, i64 %83, i64 0
  %85 = load i32* %81, align 4, !tbaa !36
  %86 = load i32* %84, align 4, !tbaa !36
  %87 = getelementptr inbounds [3 x i32]* %9, i64 %80, i64 1
  %88 = load i32* %87, align 4, !tbaa !36
  %89 = getelementptr inbounds [3 x i32]* %9, i64 %83, i64 1
  %90 = load i32* %89, align 4, !tbaa !36
  %91 = getelementptr inbounds [3 x i32]* %9, i64 %80, i64 2
  %92 = load i32* %91, align 4, !tbaa !36
  %93 = getelementptr inbounds [3 x i32]* %9, i64 %83, i64 2
  %94 = load i32* %93, align 4, !tbaa !36
  %95 = sub nsw i32 %92, %94
  %96 = mul i32 %95, 3
  %97 = add i32 %88, 3
  %98 = sub i32 %97, %90
  %99 = add i32 %98, %96
  %100 = mul i32 %99, 3
  %101 = add i32 %85, 4
  %102 = sub i32 %101, %86
  %103 = add i32 %102, %100
  %104 = sext i32 %103 to i64
  br label %105

; <label>:105                                     ; preds = %._crit_edge7, %15
  %106 = phi float [ %30, %15 ], [ %.pre, %._crit_edge7 ]
  %indvars.iv = phi i64 [ 0, %15 ], [ %indvars.iv.next, %._crit_edge7 ]
  %107 = fmul float %63, %106
  %108 = getelementptr inbounds [3 x float]* %f, i64 %24, i64 %indvars.iv
  %109 = load float* %108, align 4, !tbaa !14
  %110 = fsub float %109, %107
  store float %110, float* %108, align 4, !tbaa !14
  %111 = getelementptr inbounds [3 x float]* %f, i64 %26, i64 %indvars.iv
  %112 = load float* %111, align 4, !tbaa !14
  %113 = fadd float %107, %112
  store float %113, float* %111, align 4, !tbaa !14
  %114 = getelementptr inbounds [3 x float]* %11, i64 %104, i64 %indvars.iv
  %115 = load float* %114, align 4, !tbaa !14
  %116 = fsub float %115, %107
  store float %116, float* %114, align 4, !tbaa !14
  %117 = getelementptr inbounds [3 x float]* %11, i64 13, i64 %indvars.iv
  %118 = load float* %117, align 4, !tbaa !14
  %119 = fadd float %107, %118
  store float %119, float* %117, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.loopexit, label %._crit_edge7

._crit_edge7:                                     ; preds = %105
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %dx, i64 0, i64 %indvars.iv.next
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  br label %105

._crit_edge:                                      ; preds = %.loopexit, %0
  %vtot.0.lcssa = phi float [ 0.000000e+00, %0 ], [ %13, %.loopexit ]
  ret float %vtot.0.lcssa
}
