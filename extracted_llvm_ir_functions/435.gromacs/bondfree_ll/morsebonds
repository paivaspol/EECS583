define float @morsebonds(i32 %nbonds, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %forceparams, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture readonly %fr, %struct.t_graph* nocapture readonly %g, [3 x float]* nocapture readnone %box, float %lambda, float* nocapture readnone %dvdl, %struct.t_mdatoms* nocapture readnone %md, i32 %ngrp, float* nocapture readnone %egnb, float* nocapture readnone %egcoul, %struct.t_fcdata* nocapture readnone %fcd) #3 {
  %dx = alloca [3 x float], align 4
  %1 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 0
  %2 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 1
  %3 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 2
  %4 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %5 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %6 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 58
  %7 = sext i32 %nbonds to i64
  br label %.outer

.loopexit:                                        ; preds = %103
  %8 = fmul float %65, %66
  %9 = fadd float %vtot.0.ph, %8
  br label %.outer

.outer:                                           ; preds = %.loopexit, %0
  %i.0.ph = phi i32 [ %20, %.loopexit ], [ 0, %0 ]
  %vtot.0.ph = phi float [ %9, %.loopexit ], [ 0.000000e+00, %0 ]
  %10 = sext i32 %i.0.ph to i64
  br label %11

; <label>:11                                      ; preds = %.outer, %13
  %indvars.iv = phi i64 [ %10, %.outer ], [ %indvars.iv.next, %13 ]
  %i.0 = phi i32 [ %i.0.ph, %.outer ], [ %20, %13 ]
  %12 = icmp slt i64 %indvars.iv, %7
  br i1 %12, label %13, label %118

; <label>:13                                      ; preds = %11
  %14 = add nsw i64 %indvars.iv, 1
  %15 = getelementptr inbounds i32* %forceatoms, i64 %indvars.iv
  %16 = load i32* %15, align 4, !tbaa !36
  %17 = add nsw i64 %indvars.iv, 2
  %18 = getelementptr inbounds i32* %forceatoms, i64 %14
  %19 = load i32* %18, align 4, !tbaa !36
  %20 = add nsw i32 %i.0, 3
  %21 = getelementptr inbounds i32* %forceatoms, i64 %17
  %22 = load i32* %21, align 4, !tbaa !36
  %23 = sext i32 %16 to i64
  %24 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %23, i32 0, i32 0
  %25 = load float* %24, align 4, !tbaa !37
  %26 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %23, i32 0, i32 2
  %27 = load float* %26, align 4, !tbaa !39
  %28 = sext i32 %19 to i64
  %29 = getelementptr inbounds [3 x float]* %x, i64 %28, i64 0
  %30 = sext i32 %22 to i64
  %31 = getelementptr inbounds [3 x float]* %x, i64 %30, i64 0
  %32 = load float* %29, align 4, !tbaa !14
  %33 = load float* %31, align 4, !tbaa !14
  %34 = fsub float %32, %33
  %35 = getelementptr inbounds [3 x float]* %x, i64 %28, i64 1
  %36 = load float* %35, align 4, !tbaa !14
  %37 = getelementptr inbounds [3 x float]* %x, i64 %30, i64 1
  %38 = load float* %37, align 4, !tbaa !14
  %39 = fsub float %36, %38
  %40 = getelementptr inbounds [3 x float]* %x, i64 %28, i64 2
  %41 = load float* %40, align 4, !tbaa !14
  %42 = getelementptr inbounds [3 x float]* %x, i64 %30, i64 2
  %43 = load float* %42, align 4, !tbaa !14
  %44 = fsub float %41, %43
  store float %34, float* %1, align 4, !tbaa !14
  store float %39, float* %2, align 4, !tbaa !14
  store float %44, float* %3, align 4, !tbaa !14
  %45 = fmul float %34, %34
  %46 = fmul float %39, %39
  %47 = fadd float %45, %46
  %48 = fmul float %44, %44
  %49 = fadd float %48, %47
  %50 = fpext float %49 to double
  %51 = tail call double @sqrt(double %50) #10
  %52 = fptrunc double %51 to float
  %53 = fsub float %52, %25
  %54 = fmul float %27, %53
  %55 = fsub float -0.000000e+00, %54
  %56 = fpext float %55 to double
  %57 = tail call double @exp(double %56) #10
  %58 = fptrunc double %57 to float
  %59 = fadd float %58, -1.000000e+00
  %fabsf = tail call float @fabsf(float %59) #6
  %60 = fpext float %fabsf to double
  %61 = fcmp olt double %60, 1.200000e-38
  %indvars.iv.next = add i64 %indvars.iv, 3
  br i1 %61, label %11, label %62

; <label>:62                                      ; preds = %13
  %63 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %23, i32 0, i32 1
  %64 = load float* %63, align 4, !tbaa !40
  %65 = fsub float 1.000000e+00, %58
  %66 = fmul float %64, %65
  %67 = fmul float %27, -2.000000e+00
  %68 = fmul float %67, %58
  %69 = fmul float %68, %66
  %70 = fpext float %69 to double
  %71 = fdiv double 1.000000e+00, %51
  %72 = fmul double %70, %71
  %73 = fptrunc double %72 to float
  %74 = load i32* %4, align 4, !tbaa !41
  %75 = sub nsw i32 %19, %74
  %76 = sext i32 %75 to i64
  %77 = load [3 x i32]** %5, align 8, !tbaa !43
  %78 = getelementptr inbounds [3 x i32]* %77, i64 %76, i64 0
  %79 = sub nsw i32 %22, %74
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [3 x i32]* %77, i64 %80, i64 0
  %82 = load i32* %78, align 4, !tbaa !36
  %83 = load i32* %81, align 4, !tbaa !36
  %84 = getelementptr inbounds [3 x i32]* %77, i64 %76, i64 1
  %85 = load i32* %84, align 4, !tbaa !36
  %86 = getelementptr inbounds [3 x i32]* %77, i64 %80, i64 1
  %87 = load i32* %86, align 4, !tbaa !36
  %88 = getelementptr inbounds [3 x i32]* %77, i64 %76, i64 2
  %89 = load i32* %88, align 4, !tbaa !36
  %90 = getelementptr inbounds [3 x i32]* %77, i64 %80, i64 2
  %91 = load i32* %90, align 4, !tbaa !36
  %92 = sub nsw i32 %89, %91
  %93 = mul i32 %92, 3
  %94 = add i32 %85, 3
  %95 = sub i32 %94, %87
  %96 = add i32 %95, %93
  %97 = mul i32 %96, 3
  %98 = add i32 %82, 4
  %99 = sub i32 %98, %83
  %100 = add i32 %99, %97
  %101 = sext i32 %100 to i64
  %102 = load [3 x float]** %6, align 8, !tbaa !44
  br label %103

; <label>:103                                     ; preds = %._crit_edge, %62
  %104 = phi float [ %34, %62 ], [ %.pre, %._crit_edge ]
  %indvars.iv21 = phi i64 [ 0, %62 ], [ %indvars.iv.next22, %._crit_edge ]
  %105 = fmul float %73, %104
  %106 = getelementptr inbounds [3 x float]* %f, i64 %28, i64 %indvars.iv21
  %107 = load float* %106, align 4, !tbaa !14
  %108 = fadd float %107, %105
  store float %108, float* %106, align 4, !tbaa !14
  %109 = getelementptr inbounds [3 x float]* %f, i64 %30, i64 %indvars.iv21
  %110 = load float* %109, align 4, !tbaa !14
  %111 = fsub float %110, %105
  store float %111, float* %109, align 4, !tbaa !14
  %112 = getelementptr inbounds [3 x float]* %102, i64 %101, i64 %indvars.iv21
  %113 = load float* %112, align 4, !tbaa !14
  %114 = fadd float %105, %113
  store float %114, float* %112, align 4, !tbaa !14
  %115 = getelementptr inbounds [3 x float]* %102, i64 13, i64 %indvars.iv21
  %116 = load float* %115, align 4, !tbaa !14
  %117 = fsub float %116, %105
  store float %117, float* %115, align 4, !tbaa !14
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %exitcond = icmp eq i64 %indvars.iv.next22, 3
  br i1 %exitcond, label %.loopexit, label %._crit_edge

._crit_edge:                                      ; preds = %103
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %dx, i64 0, i64 %indvars.iv.next22
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  br label %103

; <label>:118                                     ; preds = %11
  ret float %vtot.0.ph
}
