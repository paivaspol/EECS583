define float @bonds(i32 %nbonds, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %forceparams, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture readonly %fr, %struct.t_graph* nocapture readonly %g, [3 x float]* nocapture readnone %box, float %lambda, float* nocapture %dvdlambda, %struct.t_mdatoms* nocapture readnone %md, i32 %ngrp, float* nocapture readnone %egnb, float* nocapture readnone %egcoul, %struct.t_fcdata* nocapture readnone %fcd) #3 {
  %dx = alloca [3 x float], align 4
  %1 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 0
  %2 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 1
  %3 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 2
  %4 = fsub float 1.000000e+00, %lambda
  %5 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %6 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %7 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 58
  %8 = sext i32 %nbonds to i64
  br label %.outer

.loopexit:                                        ; preds = %113
  %9 = fmul float %77, %65
  %10 = fadd float %vtot.0.ph, %9
  br label %.outer

.outer:                                           ; preds = %.loopexit, %0
  %i.0.ph = phi i32 [ %21, %.loopexit ], [ 0, %0 ]
  %vtot.0.ph = phi float [ %10, %.loopexit ], [ 0.000000e+00, %0 ]
  %11 = sext i32 %i.0.ph to i64
  br label %12

; <label>:12                                      ; preds = %.outer, %14
  %indvars.iv = phi i64 [ %11, %.outer ], [ %indvars.iv.next, %14 ]
  %i.0 = phi i32 [ %i.0.ph, %.outer ], [ %21, %14 ]
  %13 = icmp slt i64 %indvars.iv, %8
  br i1 %13, label %14, label %128

; <label>:14                                      ; preds = %12
  %15 = add nsw i64 %indvars.iv, 1
  %16 = getelementptr inbounds i32* %forceatoms, i64 %indvars.iv
  %17 = load i32* %16, align 4, !tbaa !36
  %18 = add nsw i64 %indvars.iv, 2
  %19 = getelementptr inbounds i32* %forceatoms, i64 %15
  %20 = load i32* %19, align 4, !tbaa !36
  %21 = add nsw i32 %i.0, 3
  %22 = getelementptr inbounds i32* %forceatoms, i64 %18
  %23 = load i32* %22, align 4, !tbaa !36
  %24 = sext i32 %20 to i64
  %25 = getelementptr inbounds [3 x float]* %x, i64 %24, i64 0
  %26 = sext i32 %23 to i64
  %27 = getelementptr inbounds [3 x float]* %x, i64 %26, i64 0
  %28 = load float* %25, align 4, !tbaa !14
  %29 = load float* %27, align 4, !tbaa !14
  %30 = fsub float %28, %29
  %31 = getelementptr inbounds [3 x float]* %x, i64 %24, i64 1
  %32 = load float* %31, align 4, !tbaa !14
  %33 = getelementptr inbounds [3 x float]* %x, i64 %26, i64 1
  %34 = load float* %33, align 4, !tbaa !14
  %35 = fsub float %32, %34
  %36 = getelementptr inbounds [3 x float]* %x, i64 %24, i64 2
  %37 = load float* %36, align 4, !tbaa !14
  %38 = getelementptr inbounds [3 x float]* %x, i64 %26, i64 2
  %39 = load float* %38, align 4, !tbaa !14
  %40 = fsub float %37, %39
  store float %30, float* %1, align 4, !tbaa !14
  store float %35, float* %2, align 4, !tbaa !14
  store float %40, float* %3, align 4, !tbaa !14
  %41 = fmul float %30, %30
  %42 = fmul float %35, %35
  %43 = fadd float %41, %42
  %44 = fmul float %40, %40
  %45 = fadd float %44, %43
  %46 = fpext float %45 to double
  %47 = tail call double @sqrt(double %46) #10
  %48 = fptrunc double %47 to float
  %49 = sext i32 %17 to i64
  %50 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %49, i32 0, i32 1
  %51 = load float* %50, align 4, !tbaa !46
  %52 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %49, i32 0, i32 3
  %53 = load float* %52, align 4, !tbaa !48
  %54 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %49, i32 0, i32 0
  %55 = load float* %54, align 4, !tbaa !49
  %56 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %49, i32 0, i32 2
  %57 = load float* %56, align 4, !tbaa !50
  %58 = fmul float %4, %51
  %59 = fmul float %53, %lambda
  %60 = fadd float %58, %59
  %61 = fmul float %4, %55
  %62 = fmul float %57, %lambda
  %63 = fadd float %61, %62
  %64 = fsub float %48, %63
  %65 = fmul float %64, %64
  %66 = fsub float %53, %51
  %67 = fmul float %66, 5.000000e-01
  %68 = fmul float %67, %65
  %69 = fsub float %55, %57
  %70 = fmul float %60, %69
  %71 = fmul float %70, %64
  %72 = fadd float %71, %68
  %73 = load float* %dvdlambda, align 4, !tbaa !14
  %74 = fadd float %73, %72
  store float %74, float* %dvdlambda, align 4, !tbaa !14
  %75 = fcmp olt double %46, 1.200000e-38
  %indvars.iv.next = add i64 %indvars.iv, 3
  br i1 %75, label %12, label %76

; <label>:76                                      ; preds = %14
  %77 = fmul float %60, 5.000000e-01
  %78 = fmul float %60, %64
  %79 = fsub float -0.000000e+00, %78
  %80 = fdiv double 1.000000e+00, %47
  %81 = fpext float %79 to double
  %82 = fmul double %81, %80
  %83 = fptrunc double %82 to float
  %84 = load i32* %5, align 4, !tbaa !41
  %85 = sub nsw i32 %20, %84
  %86 = sext i32 %85 to i64
  %87 = load [3 x i32]** %6, align 8, !tbaa !43
  %88 = getelementptr inbounds [3 x i32]* %87, i64 %86, i64 0
  %89 = sub nsw i32 %23, %84
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [3 x i32]* %87, i64 %90, i64 0
  %92 = load i32* %88, align 4, !tbaa !36
  %93 = load i32* %91, align 4, !tbaa !36
  %94 = getelementptr inbounds [3 x i32]* %87, i64 %86, i64 1
  %95 = load i32* %94, align 4, !tbaa !36
  %96 = getelementptr inbounds [3 x i32]* %87, i64 %90, i64 1
  %97 = load i32* %96, align 4, !tbaa !36
  %98 = getelementptr inbounds [3 x i32]* %87, i64 %86, i64 2
  %99 = load i32* %98, align 4, !tbaa !36
  %100 = getelementptr inbounds [3 x i32]* %87, i64 %90, i64 2
  %101 = load i32* %100, align 4, !tbaa !36
  %102 = sub nsw i32 %99, %101
  %103 = mul i32 %102, 3
  %104 = add i32 %95, 3
  %105 = sub i32 %104, %97
  %106 = add i32 %105, %103
  %107 = mul i32 %106, 3
  %108 = add i32 %92, 4
  %109 = sub i32 %108, %93
  %110 = add i32 %109, %107
  %111 = sext i32 %110 to i64
  %112 = load [3 x float]** %7, align 8, !tbaa !44
  br label %113

; <label>:113                                     ; preds = %._crit_edge, %76
  %114 = phi float [ %30, %76 ], [ %.pre, %._crit_edge ]
  %indvars.iv19 = phi i64 [ 0, %76 ], [ %indvars.iv.next20, %._crit_edge ]
  %115 = fmul float %83, %114
  %116 = getelementptr inbounds [3 x float]* %f, i64 %24, i64 %indvars.iv19
  %117 = load float* %116, align 4, !tbaa !14
  %118 = fadd float %117, %115
  store float %118, float* %116, align 4, !tbaa !14
  %119 = getelementptr inbounds [3 x float]* %f, i64 %26, i64 %indvars.iv19
  %120 = load float* %119, align 4, !tbaa !14
  %121 = fsub float %120, %115
  store float %121, float* %119, align 4, !tbaa !14
  %122 = getelementptr inbounds [3 x float]* %112, i64 %111, i64 %indvars.iv19
  %123 = load float* %122, align 4, !tbaa !14
  %124 = fadd float %115, %123
  store float %124, float* %122, align 4, !tbaa !14
  %125 = getelementptr inbounds [3 x float]* %112, i64 13, i64 %indvars.iv19
  %126 = load float* %125, align 4, !tbaa !14
  %127 = fsub float %126, %115
  store float %127, float* %125, align 4, !tbaa !14
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %exitcond = icmp eq i64 %indvars.iv.next20, 3
  br i1 %exitcond, label %.loopexit, label %._crit_edge

._crit_edge:                                      ; preds = %113
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %dx, i64 0, i64 %indvars.iv.next20
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  br label %113

; <label>:128                                     ; preds = %12
  ret float %vtot.0.ph
}
