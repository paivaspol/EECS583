define internal fastcc float @cos_angle(float* nocapture readonly %a, float* nocapture readonly %b) #7 {
  br label %1

; <label>:1                                       ; preds = %1, %0
  %indvars.iv = phi i64 [ 0, %0 ], [ %indvars.iv.next, %1 ]
  %ip.02 = phi double [ 0.000000e+00, %0 ], [ %13, %1 ]
  %2 = phi <2 x double> [ zeroinitializer, %0 ], [ %15, %1 ]
  %3 = getelementptr inbounds float* %a, i64 %indvars.iv
  %4 = load float* %3, align 4, !tbaa !14
  %5 = getelementptr inbounds float* %b, i64 %indvars.iv
  %6 = load float* %5, align 4, !tbaa !14
  %7 = insertelement <2 x float> undef, float %6, i32 0
  %8 = insertelement <2 x float> %7, float %4, i32 1
  %9 = fpext <2 x float> %8 to <2 x double>
  %10 = extractelement <2 x double> %9, i32 0
  %11 = extractelement <2 x double> %9, i32 1
  %12 = fmul double %11, %10
  %13 = fadd double %ip.02, %12
  %14 = fmul <2 x double> %9, %9
  %15 = fadd <2 x double> %2, %14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %16, label %1

; <label>:16                                      ; preds = %1
  %17 = extractelement <2 x double> %15, i32 0
  %18 = extractelement <2 x double> %15, i32 1
  %19 = fmul double %18, %17
  %20 = tail call double @sqrt(double %19) #10
  %21 = fdiv double 1.000000e+00, %20
  %22 = fmul double %13, %21
  %23 = fptrunc double %22 to float
  %24 = fcmp ogt float %23, 1.000000e+00
  br i1 %24, label %27, label %25

; <label>:25                                      ; preds = %16
  %26 = fcmp olt float %23, -1.000000e+00
  %. = select i1 %26, float -1.000000e+00, float %23
  br label %27

; <label>:27                                      ; preds = %25, %16
  %.0 = phi float [ 1.000000e+00, %16 ], [ %., %25 ]
  ret float %.0
}
