define internal fastcc float @cos_angle(float* nocapture %a, float* nocapture %b) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{float* %a}, i64 0, metadata !1238), !dbg !1843
  tail call void @llvm.dbg.value(metadata !{float* %b}, i64 0, metadata !1239), !dbg !1843
  tail call void @llvm.dbg.value(metadata !1844, i64 0, metadata !1246), !dbg !1845
  tail call void @llvm.dbg.value(metadata !1844, i64 0, metadata !1245), !dbg !1845
  tail call void @llvm.dbg.value(metadata !1844, i64 0, metadata !1244), !dbg !1845
  tail call void @llvm.dbg.value(metadata !57, i64 0, metadata !1241), !dbg !1846
  br label %for.body, !dbg !1846

for.body:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %ipb.034 = phi double [ 0.000000e+00, %entry ], [ %add7, %for.body ]
  %ipa.033 = phi double [ 0.000000e+00, %entry ], [ %add5, %for.body ]
  %ip.032 = phi double [ 0.000000e+00, %entry ], [ %add, %for.body ]
  %arrayidx = getelementptr inbounds float* %a, i64 %indvars.iv, !dbg !1848
  %0 = load float* %arrayidx, align 4, !dbg !1848, !tbaa !1309
  %conv = fpext float %0 to double, !dbg !1848
  tail call void @llvm.dbg.value(metadata !{double %conv}, i64 0, metadata !1242), !dbg !1848
  %arrayidx2 = getelementptr inbounds float* %b, i64 %indvars.iv, !dbg !1850
  %1 = load float* %arrayidx2, align 4, !dbg !1850, !tbaa !1309
  %conv3 = fpext float %1 to double, !dbg !1850
  tail call void @llvm.dbg.value(metadata !{double %conv3}, i64 0, metadata !1243), !dbg !1850
  %mul = fmul double %conv, %conv3, !dbg !1851
  %add = fadd double %ip.032, %mul, !dbg !1851
  tail call void @llvm.dbg.value(metadata !{double %add}, i64 0, metadata !1244), !dbg !1851
  %mul4 = fmul double %conv, %conv, !dbg !1852
  %add5 = fadd double %ipa.033, %mul4, !dbg !1852
  tail call void @llvm.dbg.value(metadata !{double %add5}, i64 0, metadata !1245), !dbg !1852
  %mul6 = fmul double %conv3, %conv3, !dbg !1853
  %add7 = fadd double %ipb.034, %mul6, !dbg !1853
  tail call void @llvm.dbg.value(metadata !{double %add7}, i64 0, metadata !1246), !dbg !1853
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !1846
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !1846
  %exitcond = icmp eq i32 %lftr.wideiv, 3, !dbg !1846
  br i1 %exitcond, label %for.end, label %for.body, !dbg !1846

for.end:                                          ; preds = %for.body
  %mul8 = fmul double %add5, %add7, !dbg !1854
  %call = tail call double @sqrt(double %mul8) #6, !dbg !1854
  %div = fdiv double 1.000000e+00, %call, !dbg !1854
  %mul9 = fmul double %add, %div, !dbg !1854
  %conv10 = fptrunc double %mul9 to float, !dbg !1854
  tail call void @llvm.dbg.value(metadata !{float %conv10}, i64 0, metadata !1240), !dbg !1854
  %cmp12 = fcmp ogt float %conv10, 1.000000e+00, !dbg !1855
  br i1 %cmp12, label %return, label %if.end, !dbg !1855

if.end:                                           ; preds = %for.end
  %cmp15 = fcmp olt float %conv10, -1.000000e+00, !dbg !1856
  %.conv10 = select i1 %cmp15, float -1.000000e+00, float %conv10, !dbg !1857
  br label %return, !dbg !1857

return:                                           ; preds = %if.end, %for.end
  %retval.0 = phi float [ 1.000000e+00, %for.end ], [ %.conv10, %if.end ]
  ret float %retval.0, !dbg !1858
}
