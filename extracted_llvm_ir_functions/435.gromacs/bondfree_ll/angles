define float @angles(i32 %nbonds, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %forceparams, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture readonly %fr, %struct.t_graph* nocapture readonly %g, [3 x float]* nocapture readnone %box, float %lambda, float* nocapture %dvdlambda, %struct.t_mdatoms* nocapture readnone %md, i32 %ngrp, float* nocapture readnone %egnb, float* nocapture readnone %egcoul, %struct.t_fcdata* nocapture readnone %fcd) #3 {
  %r_ij = alloca [3 x float], align 4
  %r_kj = alloca [3 x float], align 4
  %cos_theta = alloca float, align 4
  %f_i = alloca [3 x float], align 4
  %f_j = alloca [3 x float], align 4
  %f_k = alloca [3 x float], align 4
  %1 = icmp sgt i32 %nbonds, 0
  br i1 %1, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %2 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 0
  %3 = getelementptr inbounds [3 x float]* %r_kj, i64 0, i64 0
  %4 = fsub float 1.000000e+00, %lambda
  %5 = getelementptr inbounds [3 x float]* %r_kj, i64 0, i64 1
  %6 = getelementptr inbounds [3 x float]* %r_kj, i64 0, i64 2
  %7 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 1
  %8 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 2
  %9 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %10 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %11 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 58
  %12 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 0
  %13 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 1
  %14 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 2
  %15 = getelementptr inbounds [3 x float]* %f_j, i64 0, i64 0
  %16 = getelementptr inbounds [3 x float]* %f_j, i64 0, i64 1
  %17 = getelementptr inbounds [3 x float]* %f_j, i64 0, i64 2
  %18 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 0
  %19 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 1
  %20 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 2
  %21 = sext i32 %nbonds to i64
  br label %22

; <label>:22                                      ; preds = %.lr.ph, %133
  %indvars.iv5 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next6, %133 ]
  %vtot.03 = phi float [ 0.000000e+00, %.lr.ph ], [ %135, %133 ]
  %23 = or i64 %indvars.iv5, 1
  %24 = getelementptr inbounds i32* %forceatoms, i64 %indvars.iv5
  %25 = load i32* %24, align 4, !tbaa !36
  %26 = or i64 %indvars.iv5, 2
  %27 = getelementptr inbounds i32* %forceatoms, i64 %23
  %28 = load i32* %27, align 4, !tbaa !36
  %29 = or i64 %indvars.iv5, 3
  %30 = getelementptr inbounds i32* %forceatoms, i64 %26
  %31 = load i32* %30, align 4, !tbaa !36
  %32 = getelementptr inbounds i32* %forceatoms, i64 %29
  %33 = load i32* %32, align 4, !tbaa !36
  %34 = sext i32 %28 to i64
  %35 = getelementptr inbounds [3 x float]* %x, i64 %34, i64 0
  %36 = sext i32 %31 to i64
  %37 = getelementptr inbounds [3 x float]* %x, i64 %36, i64 0
  %38 = sext i32 %33 to i64
  %39 = getelementptr inbounds [3 x float]* %x, i64 %38, i64 0
  %40 = call float @bond_angle([3 x float]* undef, float* %35, float* %37, float* %39, float* %2, float* %3, float* %cos_theta) #11
  %41 = sext i32 %25 to i64
  %42 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %41, i32 0, i32 1
  %43 = load float* %42, align 4, !tbaa !46
  %44 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %41, i32 0, i32 3
  %45 = load float* %44, align 4, !tbaa !48
  %46 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %41, i32 0, i32 0
  %47 = load float* %46, align 4, !tbaa !49
  %48 = fpext float %47 to double
  %49 = fmul double %48, 0x3F91DF46A2529D39
  %50 = fptrunc double %49 to float
  %51 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %41, i32 0, i32 2
  %52 = load float* %51, align 4, !tbaa !50
  %53 = fpext float %52 to double
  %54 = fmul double %53, 0x3F91DF46A2529D39
  %55 = fptrunc double %54 to float
  %56 = fmul float %4, %43
  %57 = fmul float %45, %lambda
  %58 = fadd float %56, %57
  %59 = fmul float %4, %50
  %60 = fmul float %55, %lambda
  %61 = fadd float %59, %60
  %62 = fsub float %40, %61
  %63 = fmul float %62, %62
  %64 = fmul float %58, %62
  %65 = fsub float -0.000000e+00, %64
  %66 = fmul float %58, 5.000000e-01
  %67 = fsub float %45, %43
  %68 = fmul float %67, 5.000000e-01
  %69 = fmul float %68, %63
  %70 = fsub float %50, %55
  %71 = fmul float %58, %70
  %72 = fmul float %71, %62
  %73 = fadd float %72, %69
  %74 = load float* %dvdlambda, align 4, !tbaa !14
  %75 = fadd float %74, %73
  store float %75, float* %dvdlambda, align 4, !tbaa !14
  %76 = fpext float %40 to double
  %77 = tail call double @sin(double %76) #10
  %78 = fptrunc double %77 to float
  %fabsf = tail call float @fabsf(float %78) #6
  %79 = fpext float %fabsf to double
  %80 = fcmp olt double %79, 1.000000e-12
  %snt.0 = select i1 %80, float 0x3D71979980000000, float %78
  %81 = fdiv float %65, %snt.0
  %82 = load float* %cos_theta, align 4, !tbaa !14
  %83 = fmul float %81, %82
  %84 = load float* %3, align 4, !tbaa !14
  %85 = fmul float %84, %84
  %86 = load float* %5, align 4, !tbaa !14
  %87 = fmul float %86, %86
  %88 = fadd float %85, %87
  %89 = load float* %6, align 4, !tbaa !14
  %90 = fmul float %89, %89
  %91 = fadd float %88, %90
  %92 = load float* %2, align 4, !tbaa !14
  %93 = fmul float %92, %92
  %94 = load float* %7, align 4, !tbaa !14
  %95 = fmul float %94, %94
  %96 = fadd float %93, %95
  %97 = load float* %8, align 4, !tbaa !14
  %98 = fmul float %97, %97
  %99 = fadd float %96, %98
  %100 = fpext float %81 to double
  %101 = fmul float %91, %99
  %102 = fpext float %101 to double
  %103 = tail call double @sqrt(double %102) #10
  %104 = fdiv double 1.000000e+00, %103
  %105 = fmul double %100, %104
  %106 = fptrunc double %105 to float
  %107 = fdiv float %83, %99
  %108 = fdiv float %83, %91
  br label %109

; <label>:109                                     ; preds = %._crit_edge7, %22
  %110 = phi float [ %92, %22 ], [ %.pre9, %._crit_edge7 ]
  %111 = phi float [ %84, %22 ], [ %.pre, %._crit_edge7 ]
  %indvars.iv = phi i64 [ 0, %22 ], [ %indvars.iv.next, %._crit_edge7 ]
  %112 = fmul float %106, %111
  %113 = fmul float %107, %110
  %114 = fsub float %112, %113
  %115 = fsub float -0.000000e+00, %114
  %116 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 %indvars.iv
  store float %115, float* %116, align 4, !tbaa !14
  %117 = fmul float %106, %110
  %118 = fmul float %108, %111
  %119 = fsub float %117, %118
  %120 = fsub float -0.000000e+00, %119
  %121 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 %indvars.iv
  store float %120, float* %121, align 4, !tbaa !14
  %122 = fadd float %119, %114
  %123 = getelementptr inbounds [3 x float]* %f_j, i64 0, i64 %indvars.iv
  store float %122, float* %123, align 4, !tbaa !14
  %124 = getelementptr inbounds [3 x float]* %f, i64 %34, i64 %indvars.iv
  %125 = load float* %124, align 4, !tbaa !14
  %126 = fsub float %125, %114
  store float %126, float* %124, align 4, !tbaa !14
  %127 = getelementptr inbounds [3 x float]* %f, i64 %36, i64 %indvars.iv
  %128 = load float* %127, align 4, !tbaa !14
  %129 = fadd float %122, %128
  store float %129, float* %127, align 4, !tbaa !14
  %130 = getelementptr inbounds [3 x float]* %f, i64 %38, i64 %indvars.iv
  %131 = load float* %130, align 4, !tbaa !14
  %132 = fsub float %131, %119
  store float %132, float* %130, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %133, label %._crit_edge7

._crit_edge7:                                     ; preds = %109
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %r_kj, i64 0, i64 %indvars.iv.next
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  %.phi.trans.insert8 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 %indvars.iv.next
  %.pre9 = load float* %.phi.trans.insert8, align 4, !tbaa !14
  br label %109

; <label>:133                                     ; preds = %109
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 4
  %134 = fmul float %66, %63
  %135 = fadd float %vtot.03, %134
  %136 = load i32* %9, align 4, !tbaa !41
  %137 = sub nsw i32 %31, %136
  %138 = sext i32 %137 to i64
  %139 = load [3 x i32]** %10, align 8, !tbaa !43
  %140 = getelementptr inbounds [3 x i32]* %139, i64 %138, i64 0
  %141 = load i32* %140, align 4, !tbaa !36
  %142 = getelementptr inbounds [3 x i32]* %139, i64 %138, i64 1
  %143 = load i32* %142, align 4, !tbaa !36
  %144 = getelementptr inbounds [3 x i32]* %139, i64 %138, i64 2
  %145 = load i32* %144, align 4, !tbaa !36
  %146 = sub nsw i32 %28, %136
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds [3 x i32]* %139, i64 %147, i64 0
  %149 = load i32* %148, align 4, !tbaa !36
  %150 = getelementptr inbounds [3 x i32]* %139, i64 %147, i64 1
  %151 = load i32* %150, align 4, !tbaa !36
  %152 = getelementptr inbounds [3 x i32]* %139, i64 %147, i64 2
  %153 = load i32* %152, align 4, !tbaa !36
  %154 = sub nsw i32 %153, %145
  %155 = sub nsw i32 %33, %136
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [3 x i32]* %139, i64 %156, i64 0
  %158 = load i32* %157, align 4, !tbaa !36
  %159 = getelementptr inbounds [3 x i32]* %139, i64 %156, i64 1
  %160 = load i32* %159, align 4, !tbaa !36
  %161 = getelementptr inbounds [3 x i32]* %139, i64 %156, i64 2
  %162 = load i32* %161, align 4, !tbaa !36
  %163 = sub nsw i32 %162, %145
  %164 = mul i32 %154, 3
  %165 = sub i32 3, %143
  %166 = add i32 %165, %151
  %167 = add i32 %166, %164
  %168 = mul i32 %167, 3
  %169 = sub i32 4, %141
  %170 = add i32 %169, %149
  %171 = add i32 %170, %168
  %172 = mul i32 %163, 3
  %173 = add i32 %165, %160
  %174 = add i32 %173, %172
  %175 = mul i32 %174, 3
  %176 = add i32 %169, %158
  %177 = add i32 %176, %175
  %178 = sext i32 %171 to i64
  %179 = load [3 x float]** %11, align 8, !tbaa !44
  %180 = getelementptr inbounds [3 x float]* %179, i64 %178, i64 0
  %181 = load float* %180, align 4, !tbaa !14
  %182 = load float* %12, align 4, !tbaa !14
  %183 = fadd float %181, %182
  %184 = getelementptr inbounds [3 x float]* %179, i64 %178, i64 1
  %185 = load float* %184, align 4, !tbaa !14
  %186 = load float* %13, align 4, !tbaa !14
  %187 = fadd float %185, %186
  %188 = getelementptr inbounds [3 x float]* %179, i64 %178, i64 2
  %189 = load float* %188, align 4, !tbaa !14
  %190 = load float* %14, align 4, !tbaa !14
  %191 = fadd float %189, %190
  store float %183, float* %180, align 4, !tbaa !14
  store float %187, float* %184, align 4, !tbaa !14
  store float %191, float* %188, align 4, !tbaa !14
  %192 = getelementptr inbounds [3 x float]* %179, i64 13, i64 0
  %193 = load float* %192, align 4, !tbaa !14
  %194 = load float* %15, align 4, !tbaa !14
  %195 = fadd float %193, %194
  %196 = getelementptr inbounds [3 x float]* %179, i64 13, i64 1
  %197 = load float* %196, align 4, !tbaa !14
  %198 = load float* %16, align 4, !tbaa !14
  %199 = fadd float %197, %198
  %200 = getelementptr inbounds [3 x float]* %179, i64 13, i64 2
  %201 = load float* %200, align 4, !tbaa !14
  %202 = load float* %17, align 4, !tbaa !14
  %203 = fadd float %201, %202
  store float %195, float* %192, align 4, !tbaa !14
  store float %199, float* %196, align 4, !tbaa !14
  store float %203, float* %200, align 4, !tbaa !14
  %204 = sext i32 %177 to i64
  %205 = getelementptr inbounds [3 x float]* %179, i64 %204, i64 0
  %206 = load float* %205, align 4, !tbaa !14
  %207 = load float* %18, align 4, !tbaa !14
  %208 = fadd float %206, %207
  %209 = getelementptr inbounds [3 x float]* %179, i64 %204, i64 1
  %210 = load float* %209, align 4, !tbaa !14
  %211 = load float* %19, align 4, !tbaa !14
  %212 = fadd float %210, %211
  %213 = getelementptr inbounds [3 x float]* %179, i64 %204, i64 2
  %214 = load float* %213, align 4, !tbaa !14
  %215 = load float* %20, align 4, !tbaa !14
  %216 = fadd float %214, %215
  store float %208, float* %205, align 4, !tbaa !14
  store float %212, float* %209, align 4, !tbaa !14
  store float %216, float* %213, align 4, !tbaa !14
  %217 = icmp slt i64 %indvars.iv.next6, %21
  br i1 %217, label %22, label %._crit_edge

._crit_edge:                                      ; preds = %133, %0
  %vtot.0.lcssa = phi float [ 0.000000e+00, %0 ], [ %135, %133 ]
  ret float %vtot.0.lcssa
}
