define internal fastcc float @low_angres(i32 %nbonds, i32* nocapture %forceatoms, %union.t_iparams* nocapture %forceparams, [3 x float]* nocapture %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture %fr, %struct.t_graph* nocapture %g, float %lambda, float* nocapture %dvdlambda, i32 %bZAxis) #0 {
entry:
  %r_ij = alloca [3 x float], align 4
  %r_kl = alloca [3 x float], align 4
  %f_i = alloca [3 x float], align 4
  %f_k = alloca [3 x float], align 4
  %cmp85 = icmp sgt i32 %nbonds, 0
  br i1 %cmp85, label %for.body.lr.ph, label %for.end194

for.body.lr.ph:                                   ; preds = %entry
  %arraydecay12 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 0
  %arrayidx9.i.i = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 1
  %arrayidx10.i.i = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 2
  %tobool = icmp ne i32 %bZAxis, 0
  %arrayidx26 = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 0
  %arrayidx27 = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 1
  %arrayidx28 = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 2
  %conv1.i = fsub float 1.000000e+00, %lambda
  %start = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %ishift = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %fshift = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 58
  %arraydecay151 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 0
  %arrayidx3.i30 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 1
  %arrayidx6.i33 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 2
  %arraydecay188 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 0
  %arrayidx3.i2 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 1
  %arrayidx6.i4 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 2
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %i.089 = phi i32 [ 0, %for.body.lr.ph ], [ %i.1, %for.cond.backedge ]
  %ak.088 = phi i32 [ 0, %for.body.lr.ph ], [ %ak.1, %for.cond.backedge ]
  %al.087 = phi i32 [ 0, %for.body.lr.ph ], [ %al.1, %for.cond.backedge ]
  %vtot.086 = phi float [ 0.000000e+00, %for.body.lr.ph ], [ %add48, %for.cond.backedge ]
  %inc = add nsw i32 %i.089, 1
  %idxprom = sext i32 %i.089 to i64
  %arrayidx = getelementptr inbounds i32* %forceatoms, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !3
  %inc1 = add nsw i32 %i.089, 2
  %idxprom2 = sext i32 %inc to i64
  %arrayidx3 = getelementptr inbounds i32* %forceatoms, i64 %idxprom2
  %1 = load i32* %arrayidx3, align 4, !tbaa !3
  %inc4 = add nsw i32 %i.089, 3
  %idxprom5 = sext i32 %inc1 to i64
  %arrayidx6 = getelementptr inbounds i32* %forceatoms, i64 %idxprom5
  %2 = load i32* %arrayidx6, align 4, !tbaa !3
  %idxprom7 = sext i32 %2 to i64
  %arraydecay = getelementptr inbounds [3 x float]* %x, i64 %idxprom7, i64 0
  %idxprom9 = sext i32 %1 to i64
  %arraydecay11 = getelementptr inbounds [3 x float]* %x, i64 %idxprom9, i64 0
  %3 = load float* %arraydecay, align 4, !tbaa !0
  %4 = load float* %arraydecay11, align 4, !tbaa !0
  %sub.i.i = fsub float %3, %4
  %arrayidx2.i.i = getelementptr inbounds [3 x float]* %x, i64 %idxprom7, i64 1
  %5 = load float* %arrayidx2.i.i, align 4, !tbaa !0
  %arrayidx3.i.i = getelementptr inbounds [3 x float]* %x, i64 %idxprom9, i64 1
  %6 = load float* %arrayidx3.i.i, align 4, !tbaa !0
  %sub4.i.i = fsub float %5, %6
  %arrayidx5.i.i = getelementptr inbounds [3 x float]* %x, i64 %idxprom7, i64 2
  %7 = load float* %arrayidx5.i.i, align 4, !tbaa !0
  %arrayidx6.i.i = getelementptr inbounds [3 x float]* %x, i64 %idxprom9, i64 2
  %8 = load float* %arrayidx6.i.i, align 4, !tbaa !0
  %sub7.i.i = fsub float %7, %8
  store float %sub.i.i, float* %arraydecay12, align 4, !tbaa !0
  store float %sub4.i.i, float* %arrayidx9.i.i, align 4, !tbaa !0
  store float %sub7.i.i, float* %arrayidx10.i.i, align 4, !tbaa !0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %inc13 = add nsw i32 %i.089, 4
  %idxprom14 = sext i32 %inc4 to i64
  %arrayidx15 = getelementptr inbounds i32* %forceatoms, i64 %idxprom14
  %9 = load i32* %arrayidx15, align 4, !tbaa !3
  %inc16 = add nsw i32 %i.089, 5
  %idxprom17 = sext i32 %inc13 to i64
  %arrayidx18 = getelementptr inbounds i32* %forceatoms, i64 %idxprom17
  %10 = load i32* %arrayidx18, align 4, !tbaa !3
  %idxprom19 = sext i32 %10 to i64
  %arraydecay21 = getelementptr inbounds [3 x float]* %x, i64 %idxprom19, i64 0
  %idxprom22 = sext i32 %9 to i64
  %arraydecay24 = getelementptr inbounds [3 x float]* %x, i64 %idxprom22, i64 0
  %11 = load float* %arraydecay21, align 4, !tbaa !0
  %12 = load float* %arraydecay24, align 4, !tbaa !0
  %sub.i.i63 = fsub float %11, %12
  %arrayidx2.i.i64 = getelementptr inbounds [3 x float]* %x, i64 %idxprom19, i64 1
  %13 = load float* %arrayidx2.i.i64, align 4, !tbaa !0
  %arrayidx3.i.i65 = getelementptr inbounds [3 x float]* %x, i64 %idxprom22, i64 1
  %14 = load float* %arrayidx3.i.i65, align 4, !tbaa !0
  %sub4.i.i66 = fsub float %13, %14
  %arrayidx5.i.i67 = getelementptr inbounds [3 x float]* %x, i64 %idxprom19, i64 2
  %15 = load float* %arrayidx5.i.i67, align 4, !tbaa !0
  %arrayidx6.i.i68 = getelementptr inbounds [3 x float]* %x, i64 %idxprom22, i64 2
  %16 = load float* %arrayidx6.i.i68, align 4, !tbaa !0
  %sub7.i.i69 = fsub float %15, %16
  br label %if.end

if.end:                                           ; preds = %for.body, %if.then
  %storemerge96 = phi float [ %sub.i.i63, %if.then ], [ 0.000000e+00, %for.body ]
  %storemerge95 = phi float [ %sub4.i.i66, %if.then ], [ 0.000000e+00, %for.body ]
  %storemerge = phi float [ %sub7.i.i69, %if.then ], [ 1.000000e+00, %for.body ]
  %al.1 = phi i32 [ %10, %if.then ], [ %al.087, %for.body ]
  %ak.1 = phi i32 [ %9, %if.then ], [ %ak.088, %for.body ]
  %i.1 = phi i32 [ %inc16, %if.then ], [ %inc4, %for.body ]
  store float %storemerge96, float* %arrayidx26, align 4, !tbaa !0
  store float %storemerge95, float* %arrayidx27, align 4, !tbaa !0
  store float %storemerge, float* %arrayidx28, align 4, !tbaa !0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i.for.body.i_crit_edge, %if.end
  %17 = phi float [ %storemerge96, %if.end ], [ %.pre92, %for.body.i.for.body.i_crit_edge ]
  %18 = phi float [ %sub.i.i, %if.end ], [ %.pre, %for.body.i.for.body.i_crit_edge ]
  %indvars.iv.i = phi i64 [ 1, %if.end ], [ %phitmp, %for.body.i.for.body.i_crit_edge ]
  %ipb.034.i = phi double [ 0.000000e+00, %if.end ], [ %add7.i78, %for.body.i.for.body.i_crit_edge ]
  %ipa.033.i = phi double [ 0.000000e+00, %if.end ], [ %add5.i, %for.body.i.for.body.i_crit_edge ]
  %ip.032.i = phi double [ 0.000000e+00, %if.end ], [ %add.i75, %for.body.i.for.body.i_crit_edge ]
  %conv.i = fpext float %18 to double
  %conv3.i73 = fpext float %17 to double
  %mul.i74 = fmul double %conv.i, %conv3.i73
  %add.i75 = fadd double %ip.032.i, %mul.i74
  %mul4.i76 = fmul double %conv.i, %conv.i
  %add5.i = fadd double %ipa.033.i, %mul4.i76
  %mul6.i77 = fmul double %conv3.i73, %conv3.i73
  %add7.i78 = fadd double %ipb.034.i, %mul6.i77
  %lftr.wideiv = trunc i64 %indvars.iv.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 3
  br i1 %exitcond, label %for.end.i, label %for.body.i.for.body.i_crit_edge

for.body.i.for.body.i_crit_edge:                  ; preds = %for.body.i
  %arrayidx.i.phi.trans.insert = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 %indvars.iv.i
  %.pre = load float* %arrayidx.i.phi.trans.insert, align 4, !tbaa !0
  %arrayidx2.i72.phi.trans.insert = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 %indvars.iv.i
  %.pre92 = load float* %arrayidx2.i72.phi.trans.insert, align 4, !tbaa !0
  %phitmp = add i64 %indvars.iv.i, 1
  br label %for.body.i

for.end.i:                                        ; preds = %for.body.i
  %mul8.i = fmul double %add5.i, %add7.i78
  %call.i79 = call double @sqrt(double %mul8.i) #5
  %div.i = fdiv double 1.000000e+00, %call.i79
  %mul9.i = fmul double %add.i75, %div.i
  %conv10.i = fptrunc double %mul9.i to float
  %cmp12.i = fcmp ogt float %conv10.i, 1.000000e+00
  br i1 %cmp12.i, label %cos_angle.exit, label %if.end.i

if.end.i:                                         ; preds = %for.end.i
  %cmp15.i = fcmp olt float %conv10.i, -1.000000e+00
  %.conv10.i = select i1 %cmp15.i, float -1.000000e+00, float %conv10.i
  br label %cos_angle.exit

cos_angle.exit:                                   ; preds = %for.end.i, %if.end.i
  %retval.0.i = phi float [ 1.000000e+00, %for.end.i ], [ %.conv10.i, %if.end.i ]
  %conv = fpext float %retval.0.i to double
  %call31 = call double @acos(double %conv) #5
  %conv32 = fptrunc double %call31 to float
  %idxprom33 = sext i32 %0 to i64
  %19 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %idxprom33, i32 0, i32 1
  %20 = load float* %19, align 4, !tbaa !0
  %21 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %idxprom33, i32 0, i32 4
  %22 = load float* %21, align 4, !tbaa !0
  %phiA = getelementptr inbounds %union.t_iparams* %forceparams, i64 %idxprom33, i32 0, i32 0
  %23 = load float* %phiA, align 4, !tbaa !0
  %24 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %idxprom33, i32 0, i32 3
  %25 = load float* %24, align 4, !tbaa !0
  %mult = getelementptr inbounds %union.t_iparams* %forceparams, i64 %idxprom33, i32 0, i32 2
  %26 = bitcast float* %mult to i32*
  %27 = load i32* %26, align 4, !tbaa !3
  %mul.i58 = fmul float %conv1.i, %23
  %mul2.i = fmul float %25, %lambda
  %add.i59 = fadd float %mul.i58, %mul2.i
  %conv3.i = fpext float %add.i59 to double
  %mul4.i60 = fmul double %conv3.i, 0x3F91DF46A2529D39
  %conv5.i = fptrunc double %mul4.i60 to float
  %mul6.i = fmul float %conv1.i, %20
  %mul7.i61 = fmul float %22, %lambda
  %add8.i62 = fadd float %mul6.i, %mul7.i61
  %conv9.i = sitofp i32 %27 to float
  %sub10.i = fsub float %conv32, %conv5.i
  %mul11.i = fmul float %conv9.i, %sub10.i
  %conv12.i = fpext float %mul11.i to double
  %call.i = call double @sin(double %conv12.i) #5
  %conv13.i = fptrunc double %call.i to float
  %mul15.i = fmul float %add8.i62, %conv9.i
  %mul16.i = fmul float %mul15.i, %conv13.i
  %call18.i = call double @cos(double %conv12.i) #5
  %sub19.i = fsub double 1.000000e+00, %call18.i
  %conv20.i = fptrunc double %sub19.i to float
  %sub22.i = fsub float %22, %20
  %mul23.i = fmul float %sub22.i, %conv20.i
  %sub24.i = fsub float %23, %25
  %mul25.i = fmul float %add8.i62, %sub24.i
  %mul26.i = fmul float %mul25.i, %conv13.i
  %sub27.i = fsub float %mul23.i, %mul26.i
  %28 = load float* %dvdlambda, align 4, !tbaa !0
  %add = fadd float %28, %sub27.i
  store float %add, float* %dvdlambda, align 4, !tbaa !0
  %conv49 = fpext float %conv32 to double
  %call50 = call double @sin(double %conv49) #5
  %conv51 = fptrunc double %call50 to float
  %fabsf = call float @fabsf(float %conv51) #6
  %29 = fpext float %fabsf to double
  %cmp54 = fcmp olt double %29, 1.000000e-12
  %sin_phi.0 = select i1 %cmp54, float 0x3D71979980000000, float %conv51
  %sub = fsub float -0.000000e+00, %mul16.i
  %div = fdiv float %sub, %sin_phi.0
  %mul = fmul float %retval.0.i, %div
  %mul.i49 = fmul float %sub.i.i, %sub.i.i
  %mul4.i52 = fmul float %sub4.i.i, %sub4.i.i
  %add.i53 = fadd float %mul.i49, %mul4.i52
  %mul7.i56 = fmul float %sub7.i.i, %sub7.i.i
  %add8.i57 = fadd float %add.i53, %mul7.i56
  %mul.i = fmul float %storemerge96, %storemerge96
  %mul4.i = fmul float %storemerge95, %storemerge95
  %add.i46 = fadd float %mul.i, %mul4.i
  %mul7.i = fmul float %storemerge, %storemerge
  %add8.i = fadd float %add.i46, %mul7.i
  %conv64 = fpext float %div to double
  %mul65 = fmul float %add8.i57, %add8.i
  %conv66 = fpext float %mul65 to double
  %call67 = call double @sqrt(double %conv66) #5
  %div68 = fdiv double 1.000000e+00, %call67
  %mul69 = fmul double %conv64, %div68
  %conv70 = fptrunc double %mul69 to float
  %div71 = fdiv float %mul, %add8.i57
  %div72 = fdiv float %mul, %add8.i
  %idxprom114 = sext i32 %ak.1 to i64
  %idxprom121 = sext i32 %al.1 to i64
  br label %for.body76

for.body76:                                       ; preds = %for.inc.for.body76_crit_edge, %cos_angle.exit
  %30 = phi float [ %sub.i.i, %cos_angle.exit ], [ %.pre94, %for.inc.for.body76_crit_edge ]
  %31 = phi float [ %storemerge96, %cos_angle.exit ], [ %.pre93, %for.inc.for.body76_crit_edge ]
  %indvars.iv = phi i64 [ 0, %cos_angle.exit ], [ %indvars.iv.next, %for.inc.for.body76_crit_edge ]
  %mul79 = fmul float %conv70, %31
  %mul82 = fmul float %div71, %30
  %sub83 = fsub float %mul79, %mul82
  %arrayidx85 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 %indvars.iv
  store float %sub83, float* %arrayidx85, align 4, !tbaa !0
  %arrayidx91 = getelementptr inbounds [3 x float]* %f, i64 %idxprom9, i64 %indvars.iv
  %32 = load float* %arrayidx91, align 4, !tbaa !0
  %add92 = fadd float %32, %sub83
  store float %add92, float* %arrayidx91, align 4, !tbaa !0
  %arrayidx98 = getelementptr inbounds [3 x float]* %f, i64 %idxprom7, i64 %indvars.iv
  %33 = load float* %arrayidx98, align 4, !tbaa !0
  %sub99 = fsub float %33, %sub83
  store float %sub99, float* %arrayidx98, align 4, !tbaa !0
  br i1 %tobool, label %for.inc, label %if.then101

if.then101:                                       ; preds = %for.body76
  %mul104 = fmul float %conv70, %30
  %mul107 = fmul float %div72, %31
  %sub108 = fsub float %mul104, %mul107
  %arrayidx110 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 %indvars.iv
  store float %sub108, float* %arrayidx110, align 4, !tbaa !0
  %arrayidx116 = getelementptr inbounds [3 x float]* %f, i64 %idxprom114, i64 %indvars.iv
  %34 = load float* %arrayidx116, align 4, !tbaa !0
  %add117 = fadd float %34, %sub108
  store float %add117, float* %arrayidx116, align 4, !tbaa !0
  %arrayidx123 = getelementptr inbounds [3 x float]* %f, i64 %idxprom121, i64 %indvars.iv
  %35 = load float* %arrayidx123, align 4, !tbaa !0
  %sub124 = fsub float %35, %sub108
  store float %sub124, float* %arrayidx123, align 4, !tbaa !0
  br label %for.inc

for.inc:                                          ; preds = %for.body76, %if.then101
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv90 = trunc i64 %indvars.iv.next to i32
  %exitcond91 = icmp eq i32 %lftr.wideiv90, 3
  br i1 %exitcond91, label %for.end, label %for.inc.for.body76_crit_edge

for.inc.for.body76_crit_edge:                     ; preds = %for.inc
  %arrayidx78.phi.trans.insert = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 %indvars.iv.next
  %.pre93 = load float* %arrayidx78.phi.trans.insert, align 4, !tbaa !0
  %arrayidx81.phi.trans.insert = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 %indvars.iv.next
  %.pre94 = load float* %arrayidx81.phi.trans.insert, align 4, !tbaa !0
  br label %for.body76

for.end:                                          ; preds = %for.inc
  %mul21.i = fmul float %add8.i62, %conv20.i
  %add48 = fadd float %vtot.086, %mul21.i
  %36 = load i32* %start, align 4, !tbaa !3
  %sub127 = sub nsw i32 %1, %36
  %idxprom128 = sext i32 %sub127 to i64
  %37 = load [3 x i32]** %ishift, align 8, !tbaa !4
  %arraydecay130 = getelementptr inbounds [3 x i32]* %37, i64 %idxprom128, i64 0
  %sub132 = sub nsw i32 %2, %36
  %idxprom133 = sext i32 %sub132 to i64
  %arraydecay136 = getelementptr inbounds [3 x i32]* %37, i64 %idxprom133, i64 0
  %38 = load i32* %arraydecay130, align 4, !tbaa !3
  %39 = load i32* %arraydecay136, align 4, !tbaa !3
  %arrayidx2.i36 = getelementptr inbounds [3 x i32]* %37, i64 %idxprom128, i64 1
  %40 = load i32* %arrayidx2.i36, align 4, !tbaa !3
  %arrayidx3.i37 = getelementptr inbounds [3 x i32]* %37, i64 %idxprom133, i64 1
  %41 = load i32* %arrayidx3.i37, align 4, !tbaa !3
  %arrayidx5.i39 = getelementptr inbounds [3 x i32]* %37, i64 %idxprom128, i64 2
  %42 = load i32* %arrayidx5.i39, align 4, !tbaa !3
  %arrayidx6.i40 = getelementptr inbounds [3 x i32]* %37, i64 %idxprom133, i64 2
  %43 = load i32* %arrayidx6.i40, align 4, !tbaa !3
  %sub7.i41 = sub nsw i32 %42, %43
  %44 = mul i32 %sub7.i41, 3
  %sub4.i38 = add i32 %40, 3
  %mul140 = sub i32 %sub4.i38, %41
  %add142 = add i32 %mul140, %44
  %45 = mul i32 %add142, 3
  %mul144 = add i32 %38, 4
  %add146 = sub i32 %mul144, %39
  %add147 = add i32 %add146, %45
  %idxprom148 = sext i32 %add147 to i64
  %46 = load [3 x float]** %fshift, align 8, !tbaa !4
  %arraydecay150 = getelementptr inbounds [3 x float]* %46, i64 %idxprom148, i64 0
  %47 = load float* %arraydecay150, align 4, !tbaa !0
  %48 = load float* %arraydecay151, align 4, !tbaa !0
  %add.i28 = fadd float %47, %48
  %arrayidx2.i29 = getelementptr inbounds [3 x float]* %46, i64 %idxprom148, i64 1
  %49 = load float* %arrayidx2.i29, align 4, !tbaa !0
  %50 = load float* %arrayidx3.i30, align 4, !tbaa !0
  %add4.i31 = fadd float %49, %50
  %arrayidx5.i32 = getelementptr inbounds [3 x float]* %46, i64 %idxprom148, i64 2
  %51 = load float* %arrayidx5.i32, align 4, !tbaa !0
  %52 = load float* %arrayidx6.i33, align 4, !tbaa !0
  %add7.i34 = fadd float %51, %52
  store float %add.i28, float* %arraydecay150, align 4, !tbaa !0
  store float %add4.i31, float* %arrayidx2.i29, align 4, !tbaa !0
  store float %add7.i34, float* %arrayidx5.i32, align 4, !tbaa !0
  %arraydecay154 = getelementptr inbounds [3 x float]* %46, i64 13, i64 0
  %53 = load float* %arraydecay154, align 4, !tbaa !0
  %sub.i21 = fsub float %53, %48
  %arrayidx2.i22 = getelementptr inbounds [3 x float]* %46, i64 13, i64 1
  %54 = load float* %arrayidx2.i22, align 4, !tbaa !0
  %sub4.i24 = fsub float %54, %50
  %arrayidx5.i25 = getelementptr inbounds [3 x float]* %46, i64 13, i64 2
  %55 = load float* %arrayidx5.i25, align 4, !tbaa !0
  %sub7.i27 = fsub float %55, %52
  store float %sub.i21, float* %arraydecay154, align 4, !tbaa !0
  store float %sub4.i24, float* %arrayidx2.i22, align 4, !tbaa !0
  store float %sub7.i27, float* %arrayidx5.i25, align 4, !tbaa !0
  br i1 %tobool, label %for.cond.backedge, label %if.then157

if.then157:                                       ; preds = %for.end
  %arraydecay187 = getelementptr inbounds [3 x float]* %46, i64 0, i64 0
  %56 = load float* %arraydecay187, align 4, !tbaa !0
  %57 = load float* %arraydecay188, align 4, !tbaa !0
  %add.i = fadd float %56, %57
  %arrayidx2.i1 = getelementptr inbounds [3 x float]* %46, i64 0, i64 1
  %58 = load float* %arrayidx2.i1, align 4, !tbaa !0
  %59 = load float* %arrayidx3.i2, align 4, !tbaa !0
  %add4.i = fadd float %58, %59
  %arrayidx5.i3 = getelementptr inbounds [3 x float]* %46, i64 0, i64 2
  %60 = load float* %arrayidx5.i3, align 4, !tbaa !0
  %61 = load float* %arrayidx6.i4, align 4, !tbaa !0
  %add7.i = fadd float %60, %61
  store float %add.i, float* %arraydecay187, align 4, !tbaa !0
  store float %add4.i, float* %arrayidx2.i1, align 4, !tbaa !0
  store float %add7.i, float* %arrayidx5.i3, align 4, !tbaa !0
  %sub.i = fsub float %sub.i21, %57
  %sub4.i = fsub float %sub4.i24, %59
  %sub7.i = fsub float %sub7.i27, %61
  store float %sub.i, float* %arraydecay154, align 4, !tbaa !0
  store float %sub4.i, float* %arrayidx2.i22, align 4, !tbaa !0
  store float %sub7.i, float* %arrayidx5.i25, align 4, !tbaa !0
  br label %for.cond.backedge

for.cond.backedge:                                ; preds = %if.then157, %for.end
  %cmp = icmp slt i32 %i.1, %nbonds
  br i1 %cmp, label %for.body, label %for.end194

for.end194:                                       ; preds = %for.cond.backedge, %entry
  %vtot.0.lcssa = phi float [ 0.000000e+00, %entry ], [ %add48, %for.cond.backedge ]
  ret float %vtot.0.lcssa
}
