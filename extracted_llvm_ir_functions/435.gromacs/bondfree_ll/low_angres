define internal fastcc float @low_angres(i32 %nbonds, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %forceparams, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture readonly %fr, %struct.t_graph* nocapture readonly %g, float %lambda, float* nocapture %dvdlambda, i32 %bZAxis) #3 {
  %r_ij = alloca [3 x float], align 4
  %r_kl = alloca [3 x float], align 4
  %f_i = alloca [3 x float], align 4
  %f_k = alloca [3 x float], align 4
  %1 = icmp sgt i32 %nbonds, 0
  br i1 %1, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %2 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 0
  %3 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 1
  %4 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 2
  %5 = icmp ne i32 %bZAxis, 0
  %6 = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 0
  %7 = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 1
  %8 = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 2
  %9 = fsub float 1.000000e+00, %lambda
  %10 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %11 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %12 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 58
  %13 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 0
  %14 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 1
  %15 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 2
  %16 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 0
  %17 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 1
  %18 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 2
  br label %19

; <label>:19                                      ; preds = %.lr.ph, %.backedge
  %i.06 = phi i32 [ 0, %.lr.ph ], [ %i.1, %.backedge ]
  %ak.05 = phi i32 [ 0, %.lr.ph ], [ %ak.1, %.backedge ]
  %al.04 = phi i32 [ 0, %.lr.ph ], [ %al.1, %.backedge ]
  %vtot.03 = phi float [ 0.000000e+00, %.lr.ph ], [ %176, %.backedge ]
  %20 = add nsw i32 %i.06, 1
  %21 = sext i32 %i.06 to i64
  %22 = getelementptr inbounds i32* %forceatoms, i64 %21
  %23 = load i32* %22, align 4, !tbaa !36
  %24 = add nsw i32 %i.06, 2
  %25 = sext i32 %20 to i64
  %26 = getelementptr inbounds i32* %forceatoms, i64 %25
  %27 = load i32* %26, align 4, !tbaa !36
  %28 = add nsw i32 %i.06, 3
  %29 = sext i32 %24 to i64
  %30 = getelementptr inbounds i32* %forceatoms, i64 %29
  %31 = load i32* %30, align 4, !tbaa !36
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [3 x float]* %x, i64 %32, i64 0
  %34 = sext i32 %27 to i64
  %35 = getelementptr inbounds [3 x float]* %x, i64 %34, i64 0
  %36 = load float* %33, align 4, !tbaa !14
  %37 = load float* %35, align 4, !tbaa !14
  %38 = fsub float %36, %37
  %39 = getelementptr inbounds [3 x float]* %x, i64 %32, i64 1
  %40 = load float* %39, align 4, !tbaa !14
  %41 = getelementptr inbounds [3 x float]* %x, i64 %34, i64 1
  %42 = load float* %41, align 4, !tbaa !14
  %43 = fsub float %40, %42
  %44 = getelementptr inbounds [3 x float]* %x, i64 %32, i64 2
  %45 = load float* %44, align 4, !tbaa !14
  %46 = getelementptr inbounds [3 x float]* %x, i64 %34, i64 2
  %47 = load float* %46, align 4, !tbaa !14
  %48 = fsub float %45, %47
  store float %38, float* %2, align 4, !tbaa !14
  store float %43, float* %3, align 4, !tbaa !14
  store float %48, float* %4, align 4, !tbaa !14
  br i1 %5, label %75, label %49

; <label>:49                                      ; preds = %19
  %50 = add nsw i32 %i.06, 4
  %51 = sext i32 %28 to i64
  %52 = getelementptr inbounds i32* %forceatoms, i64 %51
  %53 = load i32* %52, align 4, !tbaa !36
  %54 = add nsw i32 %i.06, 5
  %55 = sext i32 %50 to i64
  %56 = getelementptr inbounds i32* %forceatoms, i64 %55
  %57 = load i32* %56, align 4, !tbaa !36
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [3 x float]* %x, i64 %58, i64 0
  %60 = sext i32 %53 to i64
  %61 = getelementptr inbounds [3 x float]* %x, i64 %60, i64 0
  %62 = load float* %59, align 4, !tbaa !14
  %63 = load float* %61, align 4, !tbaa !14
  %64 = fsub float %62, %63
  %65 = getelementptr inbounds [3 x float]* %x, i64 %58, i64 1
  %66 = load float* %65, align 4, !tbaa !14
  %67 = getelementptr inbounds [3 x float]* %x, i64 %60, i64 1
  %68 = load float* %67, align 4, !tbaa !14
  %69 = fsub float %66, %68
  %70 = getelementptr inbounds [3 x float]* %x, i64 %58, i64 2
  %71 = load float* %70, align 4, !tbaa !14
  %72 = getelementptr inbounds [3 x float]* %x, i64 %60, i64 2
  %73 = load float* %72, align 4, !tbaa !14
  %74 = fsub float %71, %73
  br label %75

; <label>:75                                      ; preds = %19, %49
  %storemerge11 = phi float [ %64, %49 ], [ 0.000000e+00, %19 ]
  %storemerge10 = phi float [ %69, %49 ], [ 0.000000e+00, %19 ]
  %storemerge = phi float [ %74, %49 ], [ 1.000000e+00, %19 ]
  %al.1 = phi i32 [ %57, %49 ], [ %al.04, %19 ]
  %ak.1 = phi i32 [ %53, %49 ], [ %ak.05, %19 ]
  %i.1 = phi i32 [ %54, %49 ], [ %28, %19 ]
  store float %storemerge11, float* %6, align 4, !tbaa !14
  store float %storemerge10, float* %7, align 4, !tbaa !14
  store float %storemerge, float* %8, align 4, !tbaa !14
  %76 = call fastcc float @cos_angle(float* %2, float* %6) #11
  %77 = fpext float %76 to double
  %78 = tail call double @acos(double %77) #10
  %79 = fptrunc double %78 to float
  %80 = sext i32 %23 to i64
  %81 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %80, i32 0, i32 1
  %82 = load float* %81, align 4, !tbaa !59
  %83 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %80, i32 0, i32 4
  %84 = load float* %83, align 4, !tbaa !61
  %85 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %80, i32 0, i32 0
  %86 = load float* %85, align 4, !tbaa !62
  %87 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %80, i32 0, i32 3
  %88 = load float* %87, align 4, !tbaa !63
  %89 = getelementptr inbounds %union.t_iparams* %forceparams, i64 %80, i32 0, i32 2
  %90 = bitcast float* %89 to i32*
  %91 = load i32* %90, align 4, !tbaa !64
  %92 = fmul float %9, %86
  %93 = fmul float %88, %lambda
  %94 = fadd float %92, %93
  %95 = fpext float %94 to double
  %96 = fmul double %95, 0x3F91DF46A2529D39
  %97 = fptrunc double %96 to float
  %98 = fmul float %9, %82
  %99 = fmul float %84, %lambda
  %100 = fadd float %98, %99
  %101 = sitofp i32 %91 to float
  %102 = fsub float %79, %97
  %103 = fmul float %101, %102
  %104 = fpext float %103 to double
  %105 = tail call double @sin(double %104) #10
  %106 = fptrunc double %105 to float
  %107 = fmul float %100, %101
  %108 = fmul float %107, %106
  %109 = tail call double @cos(double %104) #10
  %110 = fsub double 1.000000e+00, %109
  %111 = fptrunc double %110 to float
  %112 = fsub float %84, %82
  %113 = fmul float %112, %111
  %114 = fsub float %86, %88
  %115 = fmul float %100, %114
  %116 = fmul float %115, %106
  %117 = fsub float %113, %116
  %118 = load float* %dvdlambda, align 4, !tbaa !14
  %119 = fadd float %118, %117
  store float %119, float* %dvdlambda, align 4, !tbaa !14
  %120 = fpext float %79 to double
  %121 = tail call double @sin(double %120) #10
  %122 = fptrunc double %121 to float
  %fabsf = tail call float @fabsf(float %122) #6
  %123 = fpext float %fabsf to double
  %124 = fcmp olt double %123, 1.000000e-12
  %sin_phi.0 = select i1 %124, float 0x3D71979980000000, float %122
  %125 = fsub float -0.000000e+00, %108
  %126 = fdiv float %125, %sin_phi.0
  %127 = fmul float %76, %126
  %128 = fmul float %38, %38
  %129 = fmul float %43, %43
  %130 = fadd float %128, %129
  %131 = fmul float %48, %48
  %132 = fadd float %130, %131
  %133 = fmul float %storemerge11, %storemerge11
  %134 = fmul float %storemerge10, %storemerge10
  %135 = fadd float %133, %134
  %136 = fmul float %storemerge, %storemerge
  %137 = fadd float %135, %136
  %138 = fpext float %126 to double
  %139 = fmul float %132, %137
  %140 = fpext float %139 to double
  %141 = tail call double @sqrt(double %140) #10
  %142 = fdiv double 1.000000e+00, %141
  %143 = fmul double %138, %142
  %144 = fptrunc double %143 to float
  %145 = fdiv float %127, %132
  %146 = fdiv float %127, %137
  %147 = sext i32 %ak.1 to i64
  %148 = sext i32 %al.1 to i64
  br label %149

; <label>:149                                     ; preds = %._crit_edge7, %75
  %150 = phi float [ %38, %75 ], [ %.pre9, %._crit_edge7 ]
  %151 = phi float [ %storemerge11, %75 ], [ %.pre, %._crit_edge7 ]
  %indvars.iv = phi i64 [ 0, %75 ], [ %indvars.iv.next, %._crit_edge7 ]
  %152 = fmul float %144, %151
  %153 = fmul float %145, %150
  %154 = fsub float %152, %153
  %155 = getelementptr inbounds [3 x float]* %f_i, i64 0, i64 %indvars.iv
  store float %154, float* %155, align 4, !tbaa !14
  %156 = getelementptr inbounds [3 x float]* %f, i64 %34, i64 %indvars.iv
  %157 = load float* %156, align 4, !tbaa !14
  %158 = fadd float %157, %154
  store float %158, float* %156, align 4, !tbaa !14
  %159 = getelementptr inbounds [3 x float]* %f, i64 %32, i64 %indvars.iv
  %160 = load float* %159, align 4, !tbaa !14
  %161 = fsub float %160, %154
  store float %161, float* %159, align 4, !tbaa !14
  br i1 %5, label %173, label %162

; <label>:162                                     ; preds = %149
  %163 = fmul float %144, %150
  %164 = fmul float %146, %151
  %165 = fsub float %163, %164
  %166 = getelementptr inbounds [3 x float]* %f_k, i64 0, i64 %indvars.iv
  store float %165, float* %166, align 4, !tbaa !14
  %167 = getelementptr inbounds [3 x float]* %f, i64 %147, i64 %indvars.iv
  %168 = load float* %167, align 4, !tbaa !14
  %169 = fadd float %168, %165
  store float %169, float* %167, align 4, !tbaa !14
  %170 = getelementptr inbounds [3 x float]* %f, i64 %148, i64 %indvars.iv
  %171 = load float* %170, align 4, !tbaa !14
  %172 = fsub float %171, %165
  store float %172, float* %170, align 4, !tbaa !14
  br label %173

; <label>:173                                     ; preds = %149, %162
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %174, label %._crit_edge7

._crit_edge7:                                     ; preds = %173
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 %indvars.iv.next
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  %.phi.trans.insert8 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 %indvars.iv.next
  %.pre9 = load float* %.phi.trans.insert8, align 4, !tbaa !14
  br label %149

; <label>:174                                     ; preds = %173
  %175 = fmul float %100, %111
  %176 = fadd float %vtot.03, %175
  %177 = load i32* %10, align 4, !tbaa !41
  %178 = sub nsw i32 %27, %177
  %179 = sext i32 %178 to i64
  %180 = load [3 x i32]** %11, align 8, !tbaa !43
  %181 = getelementptr inbounds [3 x i32]* %180, i64 %179, i64 0
  %182 = sub nsw i32 %31, %177
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds [3 x i32]* %180, i64 %183, i64 0
  %185 = load i32* %181, align 4, !tbaa !36
  %186 = load i32* %184, align 4, !tbaa !36
  %187 = getelementptr inbounds [3 x i32]* %180, i64 %179, i64 1
  %188 = load i32* %187, align 4, !tbaa !36
  %189 = getelementptr inbounds [3 x i32]* %180, i64 %183, i64 1
  %190 = load i32* %189, align 4, !tbaa !36
  %191 = getelementptr inbounds [3 x i32]* %180, i64 %179, i64 2
  %192 = load i32* %191, align 4, !tbaa !36
  %193 = getelementptr inbounds [3 x i32]* %180, i64 %183, i64 2
  %194 = load i32* %193, align 4, !tbaa !36
  %195 = sub nsw i32 %192, %194
  %196 = mul i32 %195, 3
  %197 = add i32 %188, 3
  %198 = sub i32 %197, %190
  %199 = add i32 %198, %196
  %200 = mul i32 %199, 3
  %201 = add i32 %185, 4
  %202 = sub i32 %201, %186
  %203 = add i32 %202, %200
  %204 = sext i32 %203 to i64
  %205 = load [3 x float]** %12, align 8, !tbaa !44
  %206 = getelementptr inbounds [3 x float]* %205, i64 %204, i64 0
  %207 = load float* %206, align 4, !tbaa !14
  %208 = load float* %13, align 4, !tbaa !14
  %209 = fadd float %207, %208
  %210 = getelementptr inbounds [3 x float]* %205, i64 %204, i64 1
  %211 = load float* %210, align 4, !tbaa !14
  %212 = load float* %14, align 4, !tbaa !14
  %213 = fadd float %211, %212
  %214 = getelementptr inbounds [3 x float]* %205, i64 %204, i64 2
  %215 = load float* %214, align 4, !tbaa !14
  %216 = load float* %15, align 4, !tbaa !14
  %217 = fadd float %215, %216
  store float %209, float* %206, align 4, !tbaa !14
  store float %213, float* %210, align 4, !tbaa !14
  store float %217, float* %214, align 4, !tbaa !14
  %218 = getelementptr inbounds [3 x float]* %205, i64 13, i64 0
  %219 = load float* %218, align 4, !tbaa !14
  %220 = fsub float %219, %208
  %221 = getelementptr inbounds [3 x float]* %205, i64 13, i64 1
  %222 = load float* %221, align 4, !tbaa !14
  %223 = fsub float %222, %212
  %224 = getelementptr inbounds [3 x float]* %205, i64 13, i64 2
  %225 = load float* %224, align 4, !tbaa !14
  %226 = fsub float %225, %216
  store float %220, float* %218, align 4, !tbaa !14
  store float %223, float* %221, align 4, !tbaa !14
  store float %226, float* %224, align 4, !tbaa !14
  br i1 %5, label %.backedge, label %227

; <label>:227                                     ; preds = %174
  %228 = getelementptr inbounds [3 x float]* %205, i64 0, i64 0
  %229 = load float* %228, align 4, !tbaa !14
  %230 = load float* %16, align 4, !tbaa !14
  %231 = fadd float %229, %230
  %232 = getelementptr inbounds [3 x float]* %205, i64 0, i64 1
  %233 = load float* %232, align 4, !tbaa !14
  %234 = load float* %17, align 4, !tbaa !14
  %235 = fadd float %233, %234
  %236 = getelementptr inbounds [3 x float]* %205, i64 0, i64 2
  %237 = load float* %236, align 4, !tbaa !14
  %238 = load float* %18, align 4, !tbaa !14
  %239 = fadd float %237, %238
  store float %231, float* %228, align 4, !tbaa !14
  store float %235, float* %232, align 4, !tbaa !14
  store float %239, float* %236, align 4, !tbaa !14
  %240 = fsub float %220, %230
  %241 = fsub float %223, %234
  %242 = fsub float %226, %238
  store float %240, float* %218, align 4, !tbaa !14
  store float %241, float* %221, align 4, !tbaa !14
  store float %242, float* %224, align 4, !tbaa !14
  br label %.backedge

.backedge:                                        ; preds = %227, %174
  %243 = icmp slt i32 %i.1, %nbonds
  br i1 %243, label %19, label %._crit_edge

._crit_edge:                                      ; preds = %.backedge, %0
  %vtot.0.lcssa = phi float [ 0.000000e+00, %0 ], [ %176, %.backedge ]
  ret float %vtot.0.lcssa
}
