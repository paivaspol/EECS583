define float @shift_LRcorrection(%struct.__sFILE* %fp, %struct.t_nsborder* nocapture readonly %nsb, %struct.t_commrec* nocapture readnone %cr, %struct.t_forcerec* nocapture readonly %fr, float* nocapture readonly %charge, %struct.t_block* nocapture readonly %excl, [3 x float]* nocapture readonly %x, i32 %bOld, [3 x float]* nocapture readonly %box, [3 x float]* nocapture %lr_vir) #1 {
  %df = alloca [3 x float], align 4
  %dx = alloca [3 x float], align 4
  %1 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 22
  %2 = load float* %1, align 4, !tbaa !13
  %3 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 23
  %4 = load float* %3, align 4, !tbaa !15
  %5 = getelementptr inbounds %struct.t_nsborder* %nsb, i64 0, i32 0
  %6 = load i32* %5, align 4, !tbaa !16
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds %struct.t_nsborder* %nsb, i64 0, i32 8, i64 %7
  %9 = load i32* %8, align 4, !tbaa !11
  %10 = getelementptr inbounds %struct.t_nsborder* %nsb, i64 0, i32 7, i64 %7
  %11 = load i32* %10, align 4, !tbaa !11
  %.b8 = load i1* @shift_LRcorrection.bFirst, align 1
  %.pre44 = add nsw i32 %11, %9
  br i1 %.b8, label %._crit_edge43, label %.preheader11

.preheader11:                                     ; preds = %0
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %.lr.ph24, label %._crit_edge25

.lr.ph24:                                         ; preds = %.preheader11
  %13 = sext i32 %9 to i64
  %14 = sext i32 %.pre44 to i64
  br label %15

; <label>:15                                      ; preds = %.lr.ph24, %15
  %indvars.iv38 = phi i64 [ %13, %.lr.ph24 ], [ %indvars.iv.next39, %15 ]
  %qq.022 = phi double [ 0.000000e+00, %.lr.ph24 ], [ %20, %15 ]
  %16 = getelementptr inbounds float* %charge, i64 %indvars.iv38
  %17 = load float* %16, align 4, !tbaa !2
  %18 = fmul float %17, %17
  %19 = fpext float %18 to double
  %20 = fadd double %qq.022, %19
  %indvars.iv.next39 = add nsw i64 %indvars.iv38, 1
  %21 = icmp slt i64 %indvars.iv.next39, %14
  br i1 %21, label %15, label %._crit_edge25

._crit_edge25:                                    ; preds = %15, %.preheader11
  %qq.0.lcssa = phi double [ 0.000000e+00, %.preheader11 ], [ %20, %15 ]
  %22 = load float* @C, align 4, !tbaa !2
  %23 = fpext float %22 to double
  %24 = fmul double %23, 5.000000e-01
  %25 = fmul double %24, 3.320636e+02
  %26 = fmul double %25, 4.184000e+00
  %27 = fmul double %26, 1.000000e-01
  %28 = fmul double %qq.0.lcssa, %27
  %29 = fptrunc double %28 to float
  store float %29, float* @shift_LRcorrection.Vself, align 4, !tbaa !2
  %30 = load %struct.__sFILE** @debug, align 8, !tbaa !6
  %31 = icmp ne %struct.__sFILE* %30, null
  %32 = icmp ne %struct.__sFILE* %fp, null
  %or.cond = and i1 %32, %31
  br i1 %or.cond, label %33, label %._crit_edge43

; <label>:33                                      ; preds = %._crit_edge25
  %34 = tail call i64 @fwrite(i8* getelementptr inbounds ([50 x i8]* @.str5, i64 0, i64 0), i64 49, i64 1, %struct.__sFILE* %fp)
  %35 = fpext float %2 to double
  %36 = fpext float %4 to double
  %37 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %fp, i8* getelementptr inbounds ([16 x i8]* @.str6, i64 0, i64 0), double %35, double %36) #8
  %38 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %fp, i8* getelementptr inbounds ([20 x i8]* @.str7, i64 0, i64 0), i32 %9, i32 %11) #8
  %39 = load float* @shift_LRcorrection.Vself, align 4, !tbaa !2
  %40 = fpext float %39 to double
  %41 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %fp, i8* getelementptr inbounds ([19 x i8]* @.str8, i64 0, i64 0), double %qq.0.lcssa, double %40) #8
  br label %._crit_edge43

._crit_edge43:                                    ; preds = %0, %._crit_edge25, %33
  %42 = getelementptr inbounds %struct.t_block* %excl, i64 0, i32 4
  %43 = load i32** %42, align 8, !tbaa !12
  %44 = icmp sgt i32 %11, 0
  br i1 %44, label %.lr.ph20, label %._crit_edge

.lr.ph20:                                         ; preds = %._crit_edge43
  %45 = getelementptr inbounds %struct.t_block* %excl, i64 0, i32 2
  %46 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 0
  %47 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 1
  %48 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 2
  %49 = getelementptr inbounds [3 x float]* %df, i64 0, i64 0
  %50 = getelementptr inbounds [3 x float]* %df, i64 0, i64 1
  %51 = getelementptr inbounds [3 x float]* %df, i64 0, i64 2
  %52 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 55
  %53 = sext i32 %9 to i64
  %54 = sext i32 %.pre44 to i64
  br label %56

.loopexit10:                                      ; preds = %.loopexit, %56
  %Vexcl.1.lcssa = phi float [ %Vexcl.018, %56 ], [ %Vexcl.2, %.loopexit ]
  %55 = icmp slt i64 %indvars.iv.next37, %54
  br i1 %55, label %56, label %._crit_edge

; <label>:56                                      ; preds = %.lr.ph20, %.loopexit10
  %indvars.iv36 = phi i64 [ %53, %.lr.ph20 ], [ %indvars.iv.next37, %.loopexit10 ]
  %Vexcl.018 = phi float [ 0.000000e+00, %.lr.ph20 ], [ %Vexcl.1.lcssa, %.loopexit10 ]
  %57 = load i32** %45, align 8, !tbaa !8
  %58 = getelementptr inbounds i32* %57, i64 %indvars.iv36
  %59 = load i32* %58, align 4, !tbaa !11
  %indvars.iv.next37 = add nsw i64 %indvars.iv36, 1
  %60 = getelementptr inbounds i32* %57, i64 %indvars.iv.next37
  %61 = load i32* %60, align 4, !tbaa !11
  %62 = getelementptr inbounds float* %charge, i64 %indvars.iv36
  %63 = load float* %62, align 4, !tbaa !2
  %64 = fpext float %63 to double
  %65 = fmul double %64, 3.320636e+02
  %66 = fmul double %65, 4.184000e+00
  %67 = fmul double %66, 1.000000e-01
  %68 = fptrunc double %67 to float
  %69 = icmp slt i32 %59, %61
  br i1 %69, label %.lr.ph, label %.loopexit10

.lr.ph:                                           ; preds = %56
  %70 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv36, i64 0
  %71 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv36, i64 1
  %72 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv36, i64 2
  %73 = sext i32 %59 to i64
  %74 = add i32 %61, -1
  br label %75

; <label>:75                                      ; preds = %.loopexit, %.lr.ph
  %indvars.iv33 = phi i64 [ %73, %.lr.ph ], [ %indvars.iv.next34, %.loopexit ]
  %Vexcl.116 = phi float [ %Vexcl.018, %.lr.ph ], [ %Vexcl.2, %.loopexit ]
  %76 = getelementptr inbounds i32* %43, i64 %indvars.iv33
  %77 = load i32* %76, align 4, !tbaa !11
  %78 = sext i32 %77 to i64
  %79 = icmp sgt i64 %78, %indvars.iv36
  br i1 %79, label %80, label %.loopexit

; <label>:80                                      ; preds = %75
  %81 = getelementptr inbounds float* %charge, i64 %78
  %82 = load float* %81, align 4, !tbaa !2
  %83 = fmul float %68, %82
  %84 = fpext float %83 to double
  %fabsf = tail call float @fabsf(float %83) #5
  %85 = fpext float %fabsf to double
  %86 = fcmp ogt double %85, 1.200000e-38
  br i1 %86, label %87, label %.loopexit

; <label>:87                                      ; preds = %80
  %88 = getelementptr inbounds [3 x float]* %x, i64 %78, i64 0
  %89 = load float* %70, align 4, !tbaa !2
  %90 = load float* %88, align 4, !tbaa !2
  %91 = fsub float %89, %90
  %92 = load float* %71, align 4, !tbaa !2
  %93 = getelementptr inbounds [3 x float]* %x, i64 %78, i64 1
  %94 = load float* %93, align 4, !tbaa !2
  %95 = fsub float %92, %94
  %96 = load float* %72, align 4, !tbaa !2
  %97 = getelementptr inbounds [3 x float]* %x, i64 %78, i64 2
  %98 = load float* %97, align 4, !tbaa !2
  %99 = fsub float %96, %98
  store float %91, float* %46, align 4, !tbaa !2
  store float %95, float* %47, align 4, !tbaa !2
  store float %99, float* %48, align 4, !tbaa !2
  br label %100

; <label>:100                                     ; preds = %._crit_edge40, %87
  %101 = phi float [ %99, %87 ], [ %137, %._crit_edge40 ]
  %102 = phi float [ %95, %87 ], [ %138, %._crit_edge40 ]
  %103 = phi float [ %91, %87 ], [ %139, %._crit_edge40 ]
  %104 = phi float [ %99, %87 ], [ %.pre, %._crit_edge40 ]
  %indvars.iv = phi i64 [ 2, %87 ], [ %indvars.iv.next, %._crit_edge40 ]
  %dr2.012 = phi float [ 0.000000e+00, %87 ], [ %142, %._crit_edge40 ]
  %105 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 %indvars.iv
  %106 = fpext float %104 to double
  %107 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv
  %108 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv, i64 %indvars.iv
  %109 = load float* %108, align 4, !tbaa !2
  %110 = fpext float %109 to double
  %111 = fmul double %110, 5.000000e-01
  %112 = fcmp ogt double %106, %111
  br i1 %112, label %113, label %123

; <label>:113                                     ; preds = %100
  %114 = getelementptr inbounds [3 x float]* %107, i64 0, i64 0
  %115 = load float* %114, align 4, !tbaa !2
  %116 = fsub float %103, %115
  %117 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv, i64 1
  %118 = load float* %117, align 4, !tbaa !2
  %119 = fsub float %102, %118
  %120 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv, i64 2
  %121 = load float* %120, align 4, !tbaa !2
  %122 = fsub float %101, %121
  store float %116, float* %46, align 4, !tbaa !2
  store float %119, float* %47, align 4, !tbaa !2
  store float %122, float* %48, align 4, !tbaa !2
  br label %136

; <label>:123                                     ; preds = %100
  %124 = fmul double %110, -5.000000e-01
  %125 = fcmp olt double %106, %124
  br i1 %125, label %126, label %136

; <label>:126                                     ; preds = %123
  %127 = getelementptr inbounds [3 x float]* %107, i64 0, i64 0
  %128 = load float* %127, align 4, !tbaa !2
  %129 = fadd float %103, %128
  %130 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv, i64 1
  %131 = load float* %130, align 4, !tbaa !2
  %132 = fadd float %102, %131
  %133 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv, i64 2
  %134 = load float* %133, align 4, !tbaa !2
  %135 = fadd float %101, %134
  store float %129, float* %46, align 4, !tbaa !2
  store float %132, float* %47, align 4, !tbaa !2
  store float %135, float* %48, align 4, !tbaa !2
  br label %136

; <label>:136                                     ; preds = %123, %126, %113
  %137 = phi float [ %101, %123 ], [ %135, %126 ], [ %122, %113 ]
  %138 = phi float [ %102, %123 ], [ %132, %126 ], [ %119, %113 ]
  %139 = phi float [ %103, %123 ], [ %129, %126 ], [ %116, %113 ]
  %140 = load float* %105, align 4, !tbaa !2
  %141 = fmul float %140, %140
  %142 = fadd float %dr2.012, %141
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %143 = icmp sgt i64 %indvars.iv, 0
  br i1 %143, label %._crit_edge40, label %144

._crit_edge40:                                    ; preds = %136
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %dx, i64 0, i64 %indvars.iv.next
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !2
  br label %100

; <label>:144                                     ; preds = %136
  %145 = fpext float %142 to double
  %146 = tail call double @sqrt(double %145) #9
  %147 = fdiv double 1.000000e+00, %146
  %148 = fptrunc double %147 to float
  %149 = fdiv float 1.000000e+00, %148
  %150 = fmul float %148, %148
  %151 = fmul float %148, %150
  %152 = tail call float @potential(float %2, float %4, float %149) #10
  %153 = fsub float %148, %152
  %154 = fpext float %153 to double
  %155 = fmul double %84, %154
  %156 = fpext float %Vexcl.116 to double
  %157 = fadd double %156, %155
  %158 = fptrunc double %157 to float
  %159 = fcmp ugt float %149, %2
  br i1 %159, label %160, label %shiftfunction.exit

; <label>:160                                     ; preds = %144
  %161 = fcmp ult float %149, %4
  br i1 %161, label %165, label %162

; <label>:162                                     ; preds = %160
  %163 = fmul float %149, %149
  %164 = fdiv float -1.000000e+00, %163
  br label %shiftfunction.exit

; <label>:165                                     ; preds = %160
  %166 = fsub float %149, %2
  %167 = load float* @A, align 4, !tbaa !2
  %168 = fmul float %166, %167
  %169 = fmul float %166, %168
  %170 = load float* @B, align 4, !tbaa !2
  %171 = fmul float %166, %170
  %172 = fmul float %166, %171
  %173 = fmul float %166, %172
  %174 = fadd float %169, %173
  br label %shiftfunction.exit

shiftfunction.exit:                               ; preds = %144, %162, %165
  %.0.i = phi float [ %164, %162 ], [ %174, %165 ], [ 0.000000e+00, %144 ]
  %175 = fsub float -0.000000e+00, %.0.i
  %176 = fpext float %175 to double
  %177 = fmul double %84, %176
  %178 = fpext float %151 to double
  %179 = fmul double %178, %177
  %180 = fptrunc double %179 to float
  %fabsf9 = tail call float @fabsf(float %180) #5
  %181 = fpext float %fabsf9 to double
  %182 = fcmp ogt double %181, 1.200000e-38
  %183 = load %struct.__sFILE** @debug, align 8
  %184 = icmp ne %struct.__sFILE* %183, null
  %or.cond3 = and i1 %182, %184
  br i1 %or.cond3, label %185, label %190

; <label>:185                                     ; preds = %shiftfunction.exit
  %186 = fpext float %180 to double
  %187 = fpext float %149 to double
  %188 = trunc i64 %indvars.iv36 to i32
  %189 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %183, i8* getelementptr inbounds ([36 x i8]* @.str9, i64 0, i64 0), i32 %188, i32 %77, double %187, double %186) #8
  br label %190

; <label>:190                                     ; preds = %185, %shiftfunction.exit
  %191 = fmul float %180, %139
  store float %191, float* %49, align 4, !tbaa !2
  %192 = fmul float %180, %138
  store float %192, float* %50, align 4, !tbaa !2
  %193 = fmul float %180, %137
  store float %193, float* %51, align 4, !tbaa !2
  %194 = load [3 x float]** %52, align 8, !tbaa !18
  %195 = getelementptr inbounds [3 x float]* %194, i64 %78, i64 0
  %196 = load float* %195, align 4, !tbaa !2
  %197 = fadd float %196, %191
  %198 = getelementptr inbounds [3 x float]* %194, i64 %78, i64 1
  %199 = load float* %198, align 4, !tbaa !2
  %200 = fadd float %199, %192
  %201 = getelementptr inbounds [3 x float]* %194, i64 %78, i64 2
  %202 = load float* %201, align 4, !tbaa !2
  %203 = fadd float %193, %202
  store float %197, float* %195, align 4, !tbaa !2
  store float %200, float* %198, align 4, !tbaa !2
  store float %203, float* %201, align 4, !tbaa !2
  %204 = getelementptr inbounds [3 x float]* %194, i64 %indvars.iv36, i64 0
  %205 = load float* %204, align 4, !tbaa !2
  %206 = fsub float %205, %191
  %207 = getelementptr inbounds [3 x float]* %194, i64 %indvars.iv36, i64 1
  %208 = load float* %207, align 4, !tbaa !2
  %209 = fsub float %208, %192
  %210 = getelementptr inbounds [3 x float]* %194, i64 %indvars.iv36, i64 2
  %211 = load float* %210, align 4, !tbaa !2
  %212 = fsub float %211, %193
  store float %206, float* %204, align 4, !tbaa !2
  store float %209, float* %207, align 4, !tbaa !2
  store float %212, float* %210, align 4, !tbaa !2
  br label %.preheader

.preheader:                                       ; preds = %..preheader_crit_edge, %190
  %213 = phi float [ %139, %190 ], [ %.pre42, %..preheader_crit_edge ]
  %indvars.iv30 = phi i64 [ 0, %190 ], [ %indvars.iv.next31, %..preheader_crit_edge ]
  %214 = fpext float %213 to double
  %215 = fmul double %214, 5.000000e-01
  br label %216

; <label>:216                                     ; preds = %216, %.preheader
  %indvars.iv28 = phi i64 [ 0, %.preheader ], [ %indvars.iv.next29, %216 ]
  %217 = getelementptr inbounds [3 x float]* %df, i64 0, i64 %indvars.iv28
  %218 = load float* %217, align 4, !tbaa !2
  %219 = fpext float %218 to double
  %220 = fmul double %215, %219
  %221 = getelementptr inbounds [3 x float]* %lr_vir, i64 %indvars.iv30, i64 %indvars.iv28
  %222 = load float* %221, align 4, !tbaa !2
  %223 = fpext float %222 to double
  %224 = fadd double %223, %220
  %225 = fptrunc double %224 to float
  store float %225, float* %221, align 4, !tbaa !2
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 1
  %exitcond = icmp eq i64 %indvars.iv.next29, 3
  br i1 %exitcond, label %226, label %216

; <label>:226                                     ; preds = %216
  %indvars.iv.next31 = add nuw nsw i64 %indvars.iv30, 1
  %exitcond32 = icmp eq i64 %indvars.iv.next31, 3
  br i1 %exitcond32, label %.loopexit, label %..preheader_crit_edge

..preheader_crit_edge:                            ; preds = %226
  %.phi.trans.insert41 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 %indvars.iv.next31
  %.pre42 = load float* %.phi.trans.insert41, align 4, !tbaa !2
  br label %.preheader

.loopexit:                                        ; preds = %226, %75, %80
  %Vexcl.2 = phi float [ %Vexcl.116, %80 ], [ %Vexcl.116, %75 ], [ %158, %226 ]
  %indvars.iv.next34 = add nsw i64 %indvars.iv33, 1
  %lftr.wideiv = trunc i64 %indvars.iv33 to i32
  %exitcond35 = icmp eq i32 %lftr.wideiv, %74
  br i1 %exitcond35, label %.loopexit10, label %75

._crit_edge:                                      ; preds = %.loopexit10, %._crit_edge43
  %Vexcl.0.lcssa = phi float [ 0.000000e+00, %._crit_edge43 ], [ %Vexcl.1.lcssa, %.loopexit10 ]
  %.b = load i1* @shift_LRcorrection.bFirst, align 1
  %227 = xor i1 %.b, true
  %228 = load %struct.__sFILE** @debug, align 8
  %229 = icmp ne %struct.__sFILE* %228, null
  %or.cond5 = and i1 %229, %227
  %230 = icmp ne %struct.__sFILE* %fp, null
  %or.cond7 = and i1 %230, %or.cond5
  br i1 %or.cond7, label %231, label %234

; <label>:231                                     ; preds = %._crit_edge
  %232 = fpext float %Vexcl.0.lcssa to double
  %233 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %fp, i8* getelementptr inbounds ([33 x i8]* @.str10, i64 0, i64 0), double %232) #8
  br label %234

; <label>:234                                     ; preds = %231, %._crit_edge
  store i1 true, i1* @shift_LRcorrection.bFirst, align 1
  %235 = load float* @shift_LRcorrection.Vself, align 4, !tbaa !2
  %236 = fadd float %Vexcl.0.lcssa, %235
  %237 = fsub float -0.000000e+00, %236
  ret float %237
}
