define float @phi_sr(%struct.__sFILE* %log, i32 %nj, [3 x float]* nocapture readonly %x, float* nocapture readonly %charge, float %rc, float %r1, float* nocapture readonly %box, float* nocapture %phi, %struct.t_block* nocapture readonly %excl, [3 x float]* nocapture %f_sr, i32 %bOld) #1 {
  %dx = alloca [3 x float], align 4
  %1 = fmul float %rc, %rc
  %2 = add i32 %nj, -1
  %3 = icmp sgt i32 %nj, 1
  br i1 %3, label %.lr.ph16, label %._crit_edge17

.lr.ph16:                                         ; preds = %0
  %4 = getelementptr inbounds %struct.t_block* %excl, i64 0, i32 2
  %5 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 0
  %6 = icmp eq i32 %bOld, 0
  %7 = fpext float %rc to double
  %8 = fdiv double 1.250000e-01, %7
  %9 = getelementptr inbounds %struct.t_block* %excl, i64 0, i32 4
  %10 = sext i32 %nj to i64
  %11 = sext i32 %2 to i64
  br label %13

.loopexit:                                        ; preds = %123, %13
  %vsr.1.lcssa = phi float [ %vsr.013, %13 ], [ %vsr.2, %123 ]
  %ni.1.lcssa = phi i32 [ %ni.012, %13 ], [ %ni.2, %123 ]
  %12 = icmp slt i64 %indvars.iv.next29, %11
  %indvars.iv.next24 = add nuw nsw i64 %indvars.iv23, 1
  br i1 %12, label %13, label %._crit_edge17

; <label>:13                                      ; preds = %.lr.ph16, %.loopexit
  %indvars.iv28 = phi i64 [ 0, %.lr.ph16 ], [ %indvars.iv.next29, %.loopexit ]
  %indvars.iv23 = phi i64 [ 1, %.lr.ph16 ], [ %indvars.iv.next24, %.loopexit ]
  %vsr.013 = phi float [ 0.000000e+00, %.lr.ph16 ], [ %vsr.1.lcssa, %.loopexit ]
  %ni.012 = phi i32 [ 0, %.lr.ph16 ], [ %ni.1.lcssa, %.loopexit ]
  %14 = getelementptr inbounds float* %charge, i64 %indvars.iv28
  %15 = load float* %14, align 4, !tbaa !2
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 1
  %16 = icmp slt i64 %indvars.iv.next29, %10
  br i1 %16, label %.lr.ph9, label %.loopexit

.lr.ph9:                                          ; preds = %13
  %17 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv28, i64 0
  %18 = getelementptr inbounds float* %phi, i64 %indvars.iv28
  %19 = fmul float %15, 0x40615DEEE0000000
  br label %20

; <label>:20                                      ; preds = %123, %.lr.ph9
  %indvars.iv25 = phi i64 [ %indvars.iv23, %.lr.ph9 ], [ %indvars.iv.next26, %123 ]
  %vsr.17 = phi float [ %vsr.013, %.lr.ph9 ], [ %vsr.2, %123 ]
  %ni.15 = phi i32 [ %ni.012, %.lr.ph9 ], [ %ni.2, %123 ]
  %21 = load i32** %4, align 8, !tbaa !8
  %22 = getelementptr inbounds i32* %21, i64 %indvars.iv28
  %23 = load i32* %22, align 4, !tbaa !11
  %24 = getelementptr inbounds i32* %21, i64 %indvars.iv.next29
  %25 = load i32* %24, align 4, !tbaa !11
  %26 = icmp slt i32 %23, %25
  br i1 %26, label %.lr.ph, label %39

.lr.ph:                                           ; preds = %20
  %27 = load i32** %9, align 8, !tbaa !12
  %28 = sext i32 %23 to i64
  %29 = sext i32 %25 to i64
  br label %30

; <label>:30                                      ; preds = %.lr.ph, %35
  %indvars.iv = phi i64 [ %28, %.lr.ph ], [ %indvars.iv.next, %35 ]
  %31 = getelementptr inbounds i32* %27, i64 %indvars.iv
  %32 = load i32* %31, align 4, !tbaa !11
  %33 = trunc i64 %indvars.iv25 to i32
  %34 = icmp eq i32 %32, %33
  br i1 %34, label %._crit_edge, label %35

; <label>:35                                      ; preds = %30
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %36 = icmp slt i64 %indvars.iv.next, %29
  br i1 %36, label %30, label %._crit_edge2

._crit_edge:                                      ; preds = %30
  %37 = trunc i64 %indvars.iv to i32
  br label %39

._crit_edge2:                                     ; preds = %35
  %38 = trunc i64 %indvars.iv.next to i32
  br label %39

; <label>:39                                      ; preds = %._crit_edge2, %._crit_edge, %20
  %k.0.lcssa = phi i32 [ %37, %._crit_edge ], [ %38, %._crit_edge2 ], [ %23, %20 ]
  %40 = icmp eq i32 %k.0.lcssa, %25
  br i1 %40, label %41, label %123

; <label>:41                                      ; preds = %39
  %42 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv25, i64 0
  %43 = call float @calc_dx2dx(float* %17, float* %42, float* %box, float* %5) #10
  %44 = fcmp olt float %43, %1
  br i1 %44, label %45, label %123

; <label>:45                                      ; preds = %41
  %46 = getelementptr inbounds float* %charge, i64 %indvars.iv25
  %47 = load float* %46, align 4, !tbaa !2
  %48 = fpext float %43 to double
  %49 = tail call double @sqrt(double %48) #9
  %50 = fdiv double 1.000000e+00, %49
  %51 = fptrunc double %50 to float
  %52 = fmul float %51, %51
  %53 = fpext float %52 to double
  %54 = tail call double @sqrt(double %53) #9
  %55 = fdiv double 1.000000e+00, %54
  %56 = fptrunc double %55 to float
  br i1 %6, label %76, label %57

; <label>:57                                      ; preds = %45
  %58 = fcmp ugt float %56, %r1
  br i1 %58, label %59, label %old_f.exit

; <label>:59                                      ; preds = %57
  %60 = fcmp ult float %56, %rc
  br i1 %60, label %61, label %old_f.exit

; <label>:61                                      ; preds = %59
  %62 = fsub float %56, %r1
  %63 = fmul float %56, %56
  %64 = load float* @A, align 4, !tbaa !2
  %65 = fmul float %63, %64
  %66 = fmul float %62, %65
  %67 = fmul float %62, %66
  %68 = fadd float %67, 1.000000e+00
  %69 = load float* @B, align 4, !tbaa !2
  %70 = fmul float %63, %69
  %71 = fmul float %62, %70
  %72 = fmul float %62, %71
  %73 = fmul float %62, %72
  %74 = fadd float %68, %73
  br label %old_f.exit

old_f.exit:                                       ; preds = %57, %59, %61
  %.0.i = phi float [ %74, %61 ], [ 1.000000e+00, %57 ], [ 0.000000e+00, %59 ]
  %75 = tail call float @old_phi(float %56, float %rc, float %r1) #10
  br label %99

; <label>:76                                      ; preds = %45
  %77 = fdiv float %56, %rc
  %78 = fmul float %77, %77
  %79 = fmul float %77, %78
  %80 = fpext float %78 to double
  %81 = fmul double %80, 1.500000e+00
  %82 = fpext float %79 to double
  %83 = fmul double %81, %82
  %84 = fmul double %82, 2.500000e+00
  %85 = fsub double %83, %84
  %86 = fadd double %85, 1.000000e+00
  %87 = fptrunc double %86 to float
  %88 = fdiv float 1.000000e+00, %56
  %89 = fpext float %88 to double
  %90 = fmul float %78, 3.000000e+00
  %91 = fmul float %78, %90
  %92 = fadd float %91, 1.500000e+01
  %93 = fmul float %78, 1.000000e+01
  %94 = fsub float %92, %93
  %95 = fpext float %94 to double
  %96 = fmul double %8, %95
  %97 = fsub double %89, %96
  %98 = fptrunc double %97 to float
  br label %99

; <label>:99                                      ; preds = %76, %old_f.exit
  %pp.0 = phi float [ %75, %old_f.exit ], [ %98, %76 ]
  %.pn = phi float [ %.0.i, %old_f.exit ], [ %87, %76 ]
  %fscal.0 = fmul float %52, %.pn
  %100 = fmul float %47, 0x40615DEEE0000000
  %101 = fmul float %100, %pp.0
  %102 = load float* %18, align 4, !tbaa !2
  %103 = fadd float %101, %102
  store float %103, float* %18, align 4, !tbaa !2
  %104 = fmul float %19, %pp.0
  %105 = getelementptr inbounds float* %phi, i64 %indvars.iv25
  %106 = load float* %105, align 4, !tbaa !2
  %107 = fadd float %104, %106
  store float %107, float* %105, align 4, !tbaa !2
  %108 = fmul float %15, %100
  %109 = fmul float %108, %pp.0
  br label %110

; <label>:110                                     ; preds = %110, %99
  %indvars.iv21 = phi i64 [ 0, %99 ], [ %indvars.iv.next22, %110 ]
  %111 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 %indvars.iv21
  %112 = load float* %111, align 4, !tbaa !2
  %113 = fmul float %fscal.0, %112
  %114 = getelementptr inbounds [3 x float]* %f_sr, i64 %indvars.iv28, i64 %indvars.iv21
  %115 = load float* %114, align 4, !tbaa !2
  %116 = fadd float %115, %113
  store float %116, float* %114, align 4, !tbaa !2
  %117 = getelementptr inbounds [3 x float]* %f_sr, i64 %indvars.iv25, i64 %indvars.iv21
  %118 = load float* %117, align 4, !tbaa !2
  %119 = fsub float %118, %113
  store float %119, float* %117, align 4, !tbaa !2
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1
  %exitcond = icmp eq i64 %indvars.iv.next22, 3
  br i1 %exitcond, label %120, label %110

; <label>:120                                     ; preds = %110
  %121 = fadd float %vsr.17, %109
  %122 = add nsw i32 %ni.15, 1
  br label %123

; <label>:123                                     ; preds = %39, %120, %41
  %ni.2 = phi i32 [ %122, %120 ], [ %ni.15, %41 ], [ %ni.15, %39 ]
  %vsr.2 = phi float [ %121, %120 ], [ %vsr.17, %41 ], [ %vsr.17, %39 ]
  %indvars.iv.next26 = add nuw nsw i64 %indvars.iv25, 1
  %lftr.wideiv = trunc i64 %indvars.iv25 to i32
  %exitcond27 = icmp eq i32 %lftr.wideiv, %2
  br i1 %exitcond27, label %.loopexit, label %20

._crit_edge17:                                    ; preds = %.loopexit, %0
  %vsr.0.lcssa = phi float [ 0.000000e+00, %0 ], [ %vsr.1.lcssa, %.loopexit ]
  %ni.0.lcssa = phi i32 [ 0, %0 ], [ %ni.1.lcssa, %.loopexit ]
  %124 = icmp eq %struct.__sFILE* %log, null
  br i1 %124, label %128, label %125

; <label>:125                                     ; preds = %._crit_edge17
  %126 = fpext float %vsr.0.lcssa to double
  %127 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %log, i8* getelementptr inbounds ([48 x i8]* @.str4, i64 0, i64 0), i32 %ni.0.lcssa, double %126) #8
  br label %128

; <label>:128                                     ; preds = %._crit_edge17, %125
  ret float %vsr.0.lcssa
}
