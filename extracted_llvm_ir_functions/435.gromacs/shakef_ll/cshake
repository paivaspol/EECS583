define void @cshake(i32* nocapture readonly %iatom, i32 %ncon, i32* nocapture %nnit, i32 %maxnit, float* nocapture readonly %dist2, float* nocapture %xp, float* nocapture readonly %rij, float* nocapture readonly %m2, float %omega, float* nocapture readonly %invmass, float* nocapture readonly %tt, float* nocapture %lagr, i32* nocapture %nerror) #3 {
  %1 = icmp sgt i32 %maxnit, 0
  br i1 %1, label %.preheader.lr.ph, label %.critedge

.preheader.lr.ph:                                 ; preds = %0
  %2 = icmp sgt i32 %ncon, 0
  %3 = sext i32 %ncon to i64
  br label %.preheader

.preheader:                                       ; preds = %.preheader.lr.ph, %.critedge2
  %nit.017 = phi i32 [ 0, %.preheader.lr.ph ], [ %142, %.critedge2 ]
  br i1 %2, label %.lr.ph, label %.critedge2.thread

.critedge2.thread:                                ; preds = %.preheader
  %4 = add nuw nsw i32 %nit.017, 1
  br label %.critedge

.lr.ph:                                           ; preds = %.preheader, %139
  %indvars.iv = phi i64 [ %indvars.iv.next, %139 ], [ 0, %.preheader ]
  %nconv.115 = phi i32 [ %nconv.2, %139 ], [ 0, %.preheader ]
  %5 = mul nsw i64 %indvars.iv, 3
  %6 = getelementptr inbounds float* %rij, i64 %5
  %7 = load float* %6, align 4, !tbaa !14
  %8 = add nuw nsw i64 %5, 1
  %9 = getelementptr inbounds float* %rij, i64 %8
  %10 = load float* %9, align 4, !tbaa !14
  %11 = add nuw nsw i64 %5, 2
  %12 = getelementptr inbounds float* %rij, i64 %11
  %13 = load float* %12, align 4, !tbaa !14
  %14 = getelementptr inbounds i32* %iatom, i64 %8
  %15 = load i32* %14, align 4, !tbaa !16
  %16 = getelementptr inbounds i32* %iatom, i64 %11
  %17 = load i32* %16, align 4, !tbaa !16
  %18 = mul nsw i32 %15, 3
  %19 = mul nsw i32 %17, 3
  %20 = add nsw i32 %18, 1
  %21 = add nsw i32 %18, 2
  %22 = add nsw i32 %19, 1
  %23 = add nsw i32 %19, 2
  %24 = sext i32 %18 to i64
  %25 = getelementptr inbounds float* %xp, i64 %24
  %26 = load float* %25, align 4, !tbaa !14
  %27 = sext i32 %19 to i64
  %28 = getelementptr inbounds float* %xp, i64 %27
  %29 = load float* %28, align 4, !tbaa !14
  %30 = fsub float %26, %29
  %31 = sext i32 %20 to i64
  %32 = getelementptr inbounds float* %xp, i64 %31
  %33 = load float* %32, align 4, !tbaa !14
  %34 = sext i32 %22 to i64
  %35 = getelementptr inbounds float* %xp, i64 %34
  %36 = load float* %35, align 4, !tbaa !14
  %37 = fsub float %33, %36
  %38 = sext i32 %21 to i64
  %39 = getelementptr inbounds float* %xp, i64 %38
  %40 = load float* %39, align 4, !tbaa !14
  %41 = sext i32 %23 to i64
  %42 = getelementptr inbounds float* %xp, i64 %41
  %43 = load float* %42, align 4, !tbaa !14
  %44 = fsub float %40, %43
  %45 = fmul float %30, %30
  %46 = fmul float %37, %37
  %47 = fadd float %45, %46
  %48 = fmul float %44, %44
  %49 = fadd float %47, %48
  %50 = getelementptr inbounds float* %dist2, i64 %indvars.iv
  %51 = load float* %50, align 4, !tbaa !14
  %52 = fsub float %51, %49
  %fabsf = tail call float @fabsf(float %52) #7
  %53 = fpext float %fabsf to double
  %54 = getelementptr inbounds float* %tt, i64 %indvars.iv
  %55 = load float* %54, align 4, !tbaa !14
  %56 = fpext float %55 to double
  %57 = fmul double %53, %56
  %58 = fptosi double %57 to i32
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %139, label %60

; <label>:60                                      ; preds = %.lr.ph
  %61 = add nsw i32 %58, %nconv.115
  %62 = fmul float %7, %30
  %63 = fmul float %10, %37
  %64 = fadd float %62, %63
  %65 = fmul float %13, %44
  %66 = fadd float %64, %65
  %67 = fmul float %51, 0x3EB0C6F7A0000000
  %68 = fcmp olt float %66, %67
  %69 = trunc i64 %indvars.iv to i32
  br i1 %68, label %139, label %70

; <label>:70                                      ; preds = %60
  %71 = fmul float %52, %omega
  %72 = getelementptr inbounds float* %m2, i64 %indvars.iv
  %73 = load float* %72, align 4, !tbaa !14
  %74 = fmul float %71, %73
  %75 = fdiv float %74, %66
  %76 = getelementptr inbounds float* %lagr, i64 %indvars.iv
  %77 = load float* %76, align 4, !tbaa !14
  %78 = fadd float %75, %77
  store float %78, float* %76, align 4, !tbaa !14
  %79 = fmul float %7, %75
  %80 = fmul float %10, %75
  %81 = fmul float %13, %75
  %82 = sext i32 %15 to i64
  %83 = getelementptr inbounds float* %invmass, i64 %82
  %84 = load float* %83, align 4, !tbaa !14
  %85 = sext i32 %17 to i64
  %86 = getelementptr inbounds float* %invmass, i64 %85
  %87 = load float* %86, align 4, !tbaa !14
  %88 = fpext float %84 to double
  %fabsf7 = tail call float @fabsf(float %84) #7
  %89 = fpext float %fabsf7 to double
  %90 = fcmp ogt double %89, 1.200000e-38
  br i1 %90, label %91, label %113

; <label>:91                                      ; preds = %70
  %fabsf10 = tail call float @fabsf(float %87) #7
  %92 = fpext float %fabsf10 to double
  %93 = fcmp ogt double %92, 1.200000e-38
  br i1 %93, label %94, label %113

; <label>:94                                      ; preds = %91
  %95 = fmul float %79, %84
  %96 = load float* %25, align 4, !tbaa !14
  %97 = fadd float %95, %96
  store float %97, float* %25, align 4, !tbaa !14
  %98 = fmul float %80, %84
  %99 = load float* %32, align 4, !tbaa !14
  %100 = fadd float %98, %99
  store float %100, float* %32, align 4, !tbaa !14
  %101 = fmul float %81, %84
  %102 = load float* %39, align 4, !tbaa !14
  %103 = fadd float %101, %102
  store float %103, float* %39, align 4, !tbaa !14
  %104 = fmul float %79, %87
  %105 = load float* %28, align 4, !tbaa !14
  %106 = fsub float %105, %104
  store float %106, float* %28, align 4, !tbaa !14
  %107 = fmul float %80, %87
  %108 = load float* %35, align 4, !tbaa !14
  %109 = fsub float %108, %107
  store float %109, float* %35, align 4, !tbaa !14
  %110 = fmul float %81, %87
  %111 = load float* %42, align 4, !tbaa !14
  %112 = fsub float %111, %110
  store float %112, float* %42, align 4, !tbaa !14
  br label %139

; <label>:113                                     ; preds = %91, %70
  %114 = fcmp olt double %89, 1.200000e-38
  %fabsf9 = tail call float @fabsf(float %87) #7
  %115 = fpext float %fabsf9 to double
  %116 = fcmp ogt double %115, 1.200000e-38
  %or.cond25 = and i1 %114, %116
  br i1 %or.cond25, label %117, label %._crit_edge

; <label>:117                                     ; preds = %113
  %118 = fmul float %79, %87
  %119 = load float* %25, align 4, !tbaa !14
  %120 = fadd float %118, %119
  store float %120, float* %25, align 4, !tbaa !14
  %121 = fmul float %80, %87
  %122 = load float* %32, align 4, !tbaa !14
  %123 = fadd float %121, %122
  store float %123, float* %32, align 4, !tbaa !14
  %124 = fmul float %81, %87
  %125 = load float* %39, align 4, !tbaa !14
  %126 = fadd float %124, %125
  store float %126, float* %39, align 4, !tbaa !14
  br label %139

._crit_edge:                                      ; preds = %113
  %.not = fcmp uge double %115, 1.200000e-38
  %.not11 = xor i1 %90, true
  %brmerge = or i1 %.not, %.not11
  br i1 %brmerge, label %137, label %127

; <label>:127                                     ; preds = %._crit_edge
  %128 = fmul float %79, %84
  %129 = load float* %28, align 4, !tbaa !14
  %130 = fsub float %129, %128
  store float %130, float* %28, align 4, !tbaa !14
  %131 = fmul float %80, %84
  %132 = load float* %35, align 4, !tbaa !14
  %133 = fsub float %132, %131
  store float %133, float* %35, align 4, !tbaa !14
  %134 = fmul float %81, %84
  %135 = load float* %42, align 4, !tbaa !14
  %136 = fsub float %135, %134
  store float %136, float* %42, align 4, !tbaa !14
  br label %139

; <label>:137                                     ; preds = %._crit_edge
  %138 = fpext float %87 to double
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([51 x i8]* @.str, i64 0, i64 0), double %88, double %138) #6
  br label %139

; <label>:139                                     ; preds = %60, %.lr.ph, %94, %127, %137, %117
  %error.2 = phi i32 [ 0, %94 ], [ 0, %117 ], [ 0, %127 ], [ 0, %137 ], [ 0, %.lr.ph ], [ %69, %60 ]
  %nconv.2 = phi i32 [ %61, %94 ], [ %61, %117 ], [ %61, %127 ], [ %61, %137 ], [ %nconv.115, %.lr.ph ], [ %61, %60 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %140 = icmp slt i64 %indvars.iv.next, %3
  %141 = icmp eq i32 %error.2, 0
  %or.cond6 = and i1 %141, %140
  br i1 %or.cond6, label %.lr.ph, label %.critedge2

.critedge2:                                       ; preds = %139
  %142 = add nuw nsw i32 %nit.017, 1
  %143 = icmp slt i32 %142, %maxnit
  %144 = icmp ne i32 %nconv.2, 0
  %or.cond = and i1 %143, %144
  %145 = icmp eq i32 %error.2, 0
  %or.cond4 = and i1 %145, %or.cond
  br i1 %or.cond4, label %.preheader, label %.critedge

.critedge:                                        ; preds = %.critedge2, %.critedge2.thread, %0
  %error.0.lcssa = phi i32 [ 0, %0 ], [ 0, %.critedge2.thread ], [ %error.2, %.critedge2 ]
  %nit.0.lcssa = phi i32 [ 0, %0 ], [ %4, %.critedge2.thread ], [ %142, %.critedge2 ]
  store i32 %nit.0.lcssa, i32* %nnit, align 4, !tbaa !16
  store i32 %error.0.lcssa, i32* %nerror, align 4, !tbaa !16
  ret void
}
