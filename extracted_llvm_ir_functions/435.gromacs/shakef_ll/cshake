define void @cshake(i32* nocapture %iatom, i32 %ncon, i32* nocapture %nnit, i32 %maxnit, float* nocapture %dist2, float* nocapture %xp, float* nocapture %rij, float* nocapture %m2, float %omega, float* nocapture %invmass, float* nocapture %tt, float* nocapture %lagr, i32* nocapture %nerror) #0 {
entry:
  %notlhs284 = icmp sgt i32 %maxnit, 0
  br i1 %notlhs284, label %for.cond3.preheader.lr.ph, label %for.end171

for.cond3.preheader.lr.ph:                        ; preds = %entry
  %cmp4277 = icmp sgt i32 %ncon, 0
  br label %for.cond3.preheader

for.cond3.preheader:                              ; preds = %for.cond3.preheader.lr.ph, %for.inc169
  %nit.0285 = phi i32 [ 0, %for.cond3.preheader.lr.ph ], [ %inc170, %for.inc169 ]
  br i1 %cmp4277, label %for.body8, label %for.inc169.thread

for.inc169.thread:                                ; preds = %for.cond3.preheader
  %inc170289 = add nsw i32 %nit.0285, 1
  br label %for.end171

for.body8:                                        ; preds = %for.cond3.preheader, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %for.cond3.preheader ]
  %nconv.1282 = phi i32 [ %nconv.2, %for.inc ], [ 0, %for.cond3.preheader ]
  %0 = trunc i64 %indvars.iv to i32
  %mul = mul nsw i32 %0, 3
  %idxprom = sext i32 %mul to i64
  %arrayidx = getelementptr inbounds float* %rij, i64 %idxprom
  %1 = load float* %arrayidx, align 4, !tbaa !0
  %add9 = add nsw i32 %mul, 1
  %idxprom10 = sext i32 %add9 to i64
  %arrayidx11 = getelementptr inbounds float* %rij, i64 %idxprom10
  %2 = load float* %arrayidx11, align 4, !tbaa !0
  %add12 = add nsw i32 %mul, 2
  %idxprom13 = sext i32 %add12 to i64
  %arrayidx14 = getelementptr inbounds float* %rij, i64 %idxprom13
  %3 = load float* %arrayidx14, align 4, !tbaa !0
  %arrayidx17 = getelementptr inbounds i32* %iatom, i64 %idxprom10
  %4 = load i32* %arrayidx17, align 4, !tbaa !3
  %arrayidx20 = getelementptr inbounds i32* %iatom, i64 %idxprom13
  %5 = load i32* %arrayidx20, align 4, !tbaa !3
  %mul21 = mul nsw i32 %4, 3
  %mul22 = mul nsw i32 %5, 3
  %add24 = add nsw i32 %mul21, 1
  %add25 = add nsw i32 %mul21, 2
  %add27 = add nsw i32 %mul22, 1
  %add28 = add nsw i32 %mul22, 2
  %idxprom29 = sext i32 %mul21 to i64
  %arrayidx30 = getelementptr inbounds float* %xp, i64 %idxprom29
  %6 = load float* %arrayidx30, align 4, !tbaa !0
  %idxprom31 = sext i32 %mul22 to i64
  %arrayidx32 = getelementptr inbounds float* %xp, i64 %idxprom31
  %7 = load float* %arrayidx32, align 4, !tbaa !0
  %sub = fsub float %6, %7
  %idxprom33 = sext i32 %add24 to i64
  %arrayidx34 = getelementptr inbounds float* %xp, i64 %idxprom33
  %8 = load float* %arrayidx34, align 4, !tbaa !0
  %idxprom35 = sext i32 %add27 to i64
  %arrayidx36 = getelementptr inbounds float* %xp, i64 %idxprom35
  %9 = load float* %arrayidx36, align 4, !tbaa !0
  %sub37 = fsub float %8, %9
  %idxprom38 = sext i32 %add25 to i64
  %arrayidx39 = getelementptr inbounds float* %xp, i64 %idxprom38
  %10 = load float* %arrayidx39, align 4, !tbaa !0
  %idxprom40 = sext i32 %add28 to i64
  %arrayidx41 = getelementptr inbounds float* %xp, i64 %idxprom40
  %11 = load float* %arrayidx41, align 4, !tbaa !0
  %sub42 = fsub float %10, %11
  %mul43 = fmul float %sub, %sub
  %mul44 = fmul float %sub37, %sub37
  %add45 = fadd float %mul43, %mul44
  %mul46 = fmul float %sub42, %sub42
  %add47 = fadd float %add45, %mul46
  %arrayidx49 = getelementptr inbounds float* %dist2, i64 %indvars.iv
  %12 = load float* %arrayidx49, align 4, !tbaa !0
  %sub50 = fsub float %12, %add47
  %fabsf = tail call float @fabsf(float %sub50) #4
  %13 = fpext float %fabsf to double
  %arrayidx52 = getelementptr inbounds float* %tt, i64 %indvars.iv
  %14 = load float* %arrayidx52, align 4, !tbaa !0
  %conv53 = fpext float %14 to double
  %mul54 = fmul double %13, %conv53
  %conv55 = fptosi double %mul54 to i32
  %cmp56 = icmp eq i32 %conv55, 0
  br i1 %cmp56, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body8
  %add58 = add nsw i32 %conv55, %nconv.1282
  %mul59 = fmul float %1, %sub
  %mul60 = fmul float %2, %sub37
  %add61 = fadd float %mul59, %mul60
  %mul62 = fmul float %3, %sub42
  %add63 = fadd float %add61, %mul62
  %mul64 = fmul float %12, 0x3EB0C6F7A0000000
  %cmp65 = fcmp olt float %add63, %mul64
  br i1 %cmp65, label %for.inc, label %if.else

if.else:                                          ; preds = %if.then
  %mul68 = fmul float %sub50, %omega
  %arrayidx70 = getelementptr inbounds float* %m2, i64 %indvars.iv
  %15 = load float* %arrayidx70, align 4, !tbaa !0
  %mul71 = fmul float %mul68, %15
  %div = fdiv float %mul71, %add63
  %arrayidx73 = getelementptr inbounds float* %lagr, i64 %indvars.iv
  %16 = load float* %arrayidx73, align 4, !tbaa !0
  %add74 = fadd float %div, %16
  store float %add74, float* %arrayidx73, align 4, !tbaa !0
  %mul75 = fmul float %1, %div
  %mul76 = fmul float %2, %div
  %mul77 = fmul float %3, %div
  %idxprom78 = sext i32 %4 to i64
  %arrayidx79 = getelementptr inbounds float* %invmass, i64 %idxprom78
  %17 = load float* %arrayidx79, align 4, !tbaa !0
  %idxprom80 = sext i32 %5 to i64
  %arrayidx81 = getelementptr inbounds float* %invmass, i64 %idxprom80
  %18 = load float* %arrayidx81, align 4, !tbaa !0
  %conv82 = fpext float %17 to double
  %fabsf271 = tail call float @fabsf(float %17) #4
  %19 = fpext float %fabsf271 to double
  %cmp84 = fcmp ogt double %19, 1.200000e-38
  br i1 %cmp84, label %land.lhs.true86, label %if.else116

land.lhs.true86:                                  ; preds = %if.else
  %fabsf274 = tail call float @fabsf(float %18) #4
  %20 = fpext float %fabsf274 to double
  %cmp89 = fcmp ogt double %20, 1.200000e-38
  br i1 %cmp89, label %if.then91, label %if.else116

if.then91:                                        ; preds = %land.lhs.true86
  %mul92 = fmul float %mul75, %17
  %21 = load float* %arrayidx30, align 4, !tbaa !0
  %add95 = fadd float %mul92, %21
  store float %add95, float* %arrayidx30, align 4, !tbaa !0
  %mul96 = fmul float %mul76, %17
  %22 = load float* %arrayidx34, align 4, !tbaa !0
  %add99 = fadd float %mul96, %22
  store float %add99, float* %arrayidx34, align 4, !tbaa !0
  %mul100 = fmul float %mul77, %17
  %23 = load float* %arrayidx39, align 4, !tbaa !0
  %add103 = fadd float %mul100, %23
  store float %add103, float* %arrayidx39, align 4, !tbaa !0
  %mul104 = fmul float %mul75, %18
  %24 = load float* %arrayidx32, align 4, !tbaa !0
  %sub107 = fsub float %24, %mul104
  store float %sub107, float* %arrayidx32, align 4, !tbaa !0
  %mul108 = fmul float %mul76, %18
  %25 = load float* %arrayidx36, align 4, !tbaa !0
  %sub111 = fsub float %25, %mul108
  store float %sub111, float* %arrayidx36, align 4, !tbaa !0
  %mul112 = fmul float %mul77, %18
  %26 = load float* %arrayidx41, align 4, !tbaa !0
  %sub115 = fsub float %26, %mul112
  store float %sub115, float* %arrayidx41, align 4, !tbaa !0
  br label %for.inc

if.else116:                                       ; preds = %land.lhs.true86, %if.else
  %cmp119 = fcmp olt double %19, 1.200000e-38
  %fabsf273 = tail call float @fabsf(float %18) #4
  %27 = fpext float %fabsf273 to double
  %cmp124 = fcmp ogt double %27, 1.200000e-38
  %or.cond = and i1 %cmp119, %cmp124
  br i1 %or.cond, label %if.then126, label %if.else139

if.then126:                                       ; preds = %if.else116
  %mul127 = fmul float %mul75, %18
  %28 = load float* %arrayidx30, align 4, !tbaa !0
  %add130 = fadd float %mul127, %28
  store float %add130, float* %arrayidx30, align 4, !tbaa !0
  %mul131 = fmul float %mul76, %18
  %29 = load float* %arrayidx34, align 4, !tbaa !0
  %add134 = fadd float %mul131, %29
  store float %add134, float* %arrayidx34, align 4, !tbaa !0
  %mul135 = fmul float %mul77, %18
  %30 = load float* %arrayidx39, align 4, !tbaa !0
  %add138 = fadd float %mul135, %30
  store float %add138, float* %arrayidx39, align 4, !tbaa !0
  br label %for.inc

if.else139:                                       ; preds = %if.else116
  %cmp142.not = fcmp uge double %27, 1.200000e-38
  %cmp84.not = xor i1 %cmp84, true
  %brmerge = or i1 %cmp142.not, %cmp84.not
  br i1 %brmerge, label %if.else162, label %if.then149

if.then149:                                       ; preds = %if.else139
  %mul150 = fmul float %mul75, %17
  %31 = load float* %arrayidx32, align 4, !tbaa !0
  %sub153 = fsub float %31, %mul150
  store float %sub153, float* %arrayidx32, align 4, !tbaa !0
  %mul154 = fmul float %mul76, %17
  %32 = load float* %arrayidx36, align 4, !tbaa !0
  %sub157 = fsub float %32, %mul154
  store float %sub157, float* %arrayidx36, align 4, !tbaa !0
  %mul158 = fmul float %mul77, %17
  %33 = load float* %arrayidx41, align 4, !tbaa !0
  %sub161 = fsub float %33, %mul158
  store float %sub161, float* %arrayidx41, align 4, !tbaa !0
  br label %for.inc

if.else162:                                       ; preds = %if.else139
  %conv140 = fpext float %18 to double
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([51 x i8]* @.str, i64 0, i64 0), double %conv82, double %conv140) #5
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body8, %if.then91, %if.then149, %if.else162, %if.then126
  %error.2 = phi i32 [ 0, %if.then91 ], [ 0, %if.then126 ], [ 0, %if.then149 ], [ 0, %if.else162 ], [ 0, %for.body8 ], [ %0, %if.then ]
  %nconv.2 = phi i32 [ %add58, %if.then91 ], [ %add58, %if.then126 ], [ %add58, %if.then149 ], [ %add58, %if.else162 ], [ %nconv.1282, %for.body8 ], [ %add58, %if.then ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %34 = trunc i64 %indvars.iv.next to i32
  %cmp4 = icmp slt i32 %34, %ncon
  %cmp6 = icmp eq i32 %error.2, 0
  %or.cond276 = and i1 %cmp4, %cmp6
  br i1 %or.cond276, label %for.body8, label %for.inc169

for.inc169:                                       ; preds = %for.inc
  %inc170 = add nsw i32 %nit.0285, 1
  %notlhs = icmp slt i32 %inc170, %maxnit
  %notrhs = icmp ne i32 %nconv.2, 0
  %or.cond.not = and i1 %notrhs, %notlhs
  %cmp2 = icmp eq i32 %error.2, 0
  %or.cond275 = and i1 %or.cond.not, %cmp2
  br i1 %or.cond275, label %for.cond3.preheader, label %for.end171

for.end171:                                       ; preds = %for.inc169, %for.inc169.thread, %entry
  %error.0.lcssa = phi i32 [ 0, %entry ], [ 0, %for.inc169.thread ], [ %error.2, %for.inc169 ]
  %nit.0.lcssa = phi i32 [ 0, %entry ], [ %inc170289, %for.inc169.thread ], [ %inc170, %for.inc169 ]
  store i32 %nit.0.lcssa, i32* %nnit, align 4, !tbaa !3
  store i32 %error.0.lcssa, i32* %nerror, align 4, !tbaa !3
  ret void
}
