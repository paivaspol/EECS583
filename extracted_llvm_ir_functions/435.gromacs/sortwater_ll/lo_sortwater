define internal fastcc void @lo_sortwater(i32 %astart, i32 %nwater, i32 %nwatom, [3 x float]* %x, [3 x float]* nocapture %v, i32 %bBlock) #4 {
  %1 = tail call i8* @save_calloc(i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([69 x i8]* @.str1, i64 0, i64 0), i32 128, i32 %nwater, i32 4) #8
  %2 = bitcast i8* %1 to i32*
  %3 = icmp sgt i32 %nwater, 0
  br i1 %3, label %.lr.ph24, label %._crit_edge25

.lr.ph24:                                         ; preds = %0
  %4 = add i32 %nwater, -1
  br label %5

; <label>:5                                       ; preds = %5, %.lr.ph24
  %indvars.iv50 = phi i64 [ 0, %.lr.ph24 ], [ %indvars.iv.next51, %5 ]
  %6 = getelementptr inbounds i32* %2, i64 %indvars.iv50
  %7 = trunc i64 %indvars.iv50 to i32
  store i32 %7, i32* %6, align 4, !tbaa !18
  %indvars.iv.next51 = add nuw nsw i64 %indvars.iv50, 1
  %exitcond53 = icmp eq i32 %7, %4
  br i1 %exitcond53, label %._crit_edge25, label %5

._crit_edge25:                                    ; preds = %5, %0
  %8 = sext i32 %astart to i64
  %9 = getelementptr inbounds [3 x float]* %x, i64 %8
  store [3 x float]* %9, [3 x float]** @xptr, align 8, !tbaa !19
  store i32 %nwatom, i32* @nwat, align 4, !tbaa !18
  %10 = sext i32 %nwater to i64
  %11 = icmp ne i32 %bBlock, 0
  %12 = select i1 %11, i32 (i8*, i8*)* @blockcomp, i32 (i8*, i8*)* @rvcomp
  tail call void @qsort(i8* %1, i64 %10, i64 4, i32 (i8*, i8*)* %12) #8
  %13 = load %struct.__sFILE** @debug, align 8, !tbaa !19
  %14 = icmp eq %struct.__sFILE* %13, null
  br i1 %14, label %.loopexit, label %.preheader3

.preheader3:                                      ; preds = %._crit_edge25
  br i1 %3, label %.lr.ph21, label %.loopexit.thread

.loopexit.thread:                                 ; preds = %.preheader3
  %15 = mul i32 %nwatom, %nwater
  %16 = tail call i8* @save_calloc(i8* getelementptr inbounds ([4 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([69 x i8]* @.str1, i64 0, i64 0), i32 141, i32 %15, i32 12) #8
  %17 = bitcast i8* %16 to [3 x float]*
  br label %.preheader2

.lr.ph21:                                         ; preds = %.preheader3
  %18 = add i32 %nwater, -1
  br label %19

; <label>:19                                      ; preds = %._crit_edge54, %.lr.ph21
  %20 = phi %struct.__sFILE* [ %13, %.lr.ph21 ], [ %.pre, %._crit_edge54 ]
  %indvars.iv46 = phi i64 [ 0, %.lr.ph21 ], [ %indvars.iv.next47, %._crit_edge54 ]
  %21 = getelementptr inbounds i32* %2, i64 %indvars.iv46
  %22 = load i32* %21, align 4, !tbaa !18
  %23 = mul nsw i32 %22, %nwatom
  %24 = add nsw i32 %23, %astart
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [3 x float]* %x, i64 %25, i64 0
  %27 = load float* %26, align 4, !tbaa !14
  %28 = fpext float %27 to double
  %29 = getelementptr inbounds [3 x float]* %x, i64 %25, i64 1
  %30 = load float* %29, align 4, !tbaa !14
  %31 = fpext float %30 to double
  %32 = getelementptr inbounds [3 x float]* %x, i64 %25, i64 2
  %33 = load float* %32, align 4, !tbaa !14
  %34 = fpext float %33 to double
  %35 = trunc i64 %indvars.iv46 to i32
  %36 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %20, i8* getelementptr inbounds ([46 x i8]* @.str3, i64 0, i64 0), i32 %35, i32 %23, double %28, double %31, double %34) #8
  %exitcond49 = icmp eq i32 %35, %18
  br i1 %exitcond49, label %.loopexit, label %._crit_edge54

._crit_edge54:                                    ; preds = %19
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 1
  %.pre = load %struct.__sFILE** @debug, align 8, !tbaa !19
  br label %19

.loopexit:                                        ; preds = %19, %._crit_edge25
  %37 = mul i32 %nwatom, %nwater
  %38 = tail call i8* @save_calloc(i8* getelementptr inbounds ([4 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([69 x i8]* @.str1, i64 0, i64 0), i32 141, i32 %37, i32 12) #8
  %39 = bitcast i8* %38 to [3 x float]*
  br i1 %3, label %.lr.ph19, label %.preheader2

.lr.ph19:                                         ; preds = %.loopexit
  %40 = icmp sgt i32 %nwatom, 0
  %41 = add i32 %nwatom, -1
  %42 = sext i32 %nwatom to i64
  %43 = add i32 %nwater, -1
  br label %49

.preheader2:                                      ; preds = %._crit_edge16, %.loopexit.thread, %.loopexit
  %44 = phi [3 x float]* [ %17, %.loopexit.thread ], [ %39, %.loopexit ], [ %39, %._crit_edge16 ]
  %45 = phi i8* [ %16, %.loopexit.thread ], [ %38, %.loopexit ], [ %38, %._crit_edge16 ]
  %46 = phi i32 [ %15, %.loopexit.thread ], [ %37, %.loopexit ], [ %37, %._crit_edge16 ]
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %.lr.ph12, label %.preheader1

.lr.ph12:                                         ; preds = %.preheader2
  %48 = add i32 %46, -1
  br label %78

; <label>:49                                      ; preds = %._crit_edge16, %.lr.ph19
  %indvars.iv42 = phi i64 [ 0, %.lr.ph19 ], [ %indvars.iv.next43, %._crit_edge16 ]
  br i1 %40, label %.lr.ph15, label %._crit_edge16

.lr.ph15:                                         ; preds = %49
  %50 = getelementptr inbounds i32* %2, i64 %indvars.iv42
  %51 = load i32* %50, align 4, !tbaa !18
  %52 = mul nsw i32 %51, %nwatom
  %53 = add nsw i32 %52, %astart
  %54 = mul nsw i64 %indvars.iv42, %42
  %55 = sext i32 %53 to i64
  br label %56

; <label>:56                                      ; preds = %56, %.lr.ph15
  %indvars.iv38 = phi i64 [ 0, %.lr.ph15 ], [ %indvars.iv.next39, %56 ]
  %57 = add nsw i64 %55, %indvars.iv38
  %58 = getelementptr inbounds [3 x float]* %x, i64 %57, i64 0
  %59 = add nsw i64 %indvars.iv38, %54
  %60 = getelementptr inbounds [3 x float]* %39, i64 %59, i64 0
  %61 = bitcast float* %58 to i32*
  %62 = load i32* %61, align 4, !tbaa !14
  %63 = bitcast float* %60 to i32*
  store i32 %62, i32* %63, align 4, !tbaa !14
  %64 = getelementptr inbounds [3 x float]* %x, i64 %57, i64 1
  %65 = bitcast float* %64 to i32*
  %66 = load i32* %65, align 4, !tbaa !14
  %67 = getelementptr inbounds [3 x float]* %39, i64 %59, i64 1
  %68 = bitcast float* %67 to i32*
  store i32 %66, i32* %68, align 4, !tbaa !14
  %69 = getelementptr inbounds [3 x float]* %x, i64 %57, i64 2
  %70 = bitcast float* %69 to i32*
  %71 = load i32* %70, align 4, !tbaa !14
  %72 = getelementptr inbounds [3 x float]* %39, i64 %59, i64 2
  %73 = bitcast float* %72 to i32*
  store i32 %71, i32* %73, align 4, !tbaa !14
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1
  %lftr.wideiv40 = trunc i64 %indvars.iv38 to i32
  %exitcond41 = icmp eq i32 %lftr.wideiv40, %41
  br i1 %exitcond41, label %._crit_edge16, label %56

._crit_edge16:                                    ; preds = %56, %49
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1
  %lftr.wideiv44 = trunc i64 %indvars.iv42 to i32
  %exitcond45 = icmp eq i32 %lftr.wideiv44, %43
  br i1 %exitcond45, label %.preheader2, label %49

.preheader1:                                      ; preds = %78, %.preheader2
  br i1 %3, label %.lr.ph10, label %.preheader

.lr.ph10:                                         ; preds = %.preheader1
  %74 = icmp sgt i32 %nwatom, 0
  %75 = add i32 %nwatom, -1
  %76 = sext i32 %nwatom to i64
  %77 = add i32 %nwater, -1
  br label %96

; <label>:78                                      ; preds = %78, %.lr.ph12
  %indvars.iv34 = phi i64 [ 0, %.lr.ph12 ], [ %indvars.iv.next35, %78 ]
  %79 = getelementptr inbounds [3 x float]* %44, i64 %indvars.iv34, i64 0
  %80 = add nsw i64 %indvars.iv34, %8
  %81 = getelementptr inbounds [3 x float]* %x, i64 %80, i64 0
  %82 = bitcast float* %79 to i32*
  %83 = load i32* %82, align 4, !tbaa !14
  %84 = bitcast float* %81 to i32*
  store i32 %83, i32* %84, align 4, !tbaa !14
  %85 = getelementptr inbounds [3 x float]* %44, i64 %indvars.iv34, i64 1
  %86 = bitcast float* %85 to i32*
  %87 = load i32* %86, align 4, !tbaa !14
  %88 = getelementptr inbounds [3 x float]* %x, i64 %80, i64 1
  %89 = bitcast float* %88 to i32*
  store i32 %87, i32* %89, align 4, !tbaa !14
  %90 = getelementptr inbounds [3 x float]* %44, i64 %indvars.iv34, i64 2
  %91 = bitcast float* %90 to i32*
  %92 = load i32* %91, align 4, !tbaa !14
  %93 = getelementptr inbounds [3 x float]* %x, i64 %80, i64 2
  %94 = bitcast float* %93 to i32*
  store i32 %92, i32* %94, align 4, !tbaa !14
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1
  %lftr.wideiv36 = trunc i64 %indvars.iv34 to i32
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %48
  br i1 %exitcond37, label %.preheader1, label %78

.preheader:                                       ; preds = %._crit_edge8, %.preheader1
  br i1 %47, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %95 = add i32 %46, -1
  br label %121

; <label>:96                                      ; preds = %._crit_edge8, %.lr.ph10
  %indvars.iv30 = phi i64 [ 0, %.lr.ph10 ], [ %indvars.iv.next31, %._crit_edge8 ]
  br i1 %74, label %.lr.ph7, label %._crit_edge8

.lr.ph7:                                          ; preds = %96
  %97 = getelementptr inbounds i32* %2, i64 %indvars.iv30
  %98 = load i32* %97, align 4, !tbaa !18
  %99 = mul nsw i32 %98, %nwatom
  %100 = add nsw i32 %99, %astart
  %101 = mul nsw i64 %indvars.iv30, %76
  %102 = sext i32 %100 to i64
  br label %103

; <label>:103                                     ; preds = %103, %.lr.ph7
  %indvars.iv26 = phi i64 [ 0, %.lr.ph7 ], [ %indvars.iv.next27, %103 ]
  %104 = add nsw i64 %102, %indvars.iv26
  %105 = getelementptr inbounds [3 x float]* %v, i64 %104, i64 0
  %106 = add nsw i64 %indvars.iv26, %101
  %107 = getelementptr inbounds [3 x float]* %44, i64 %106, i64 0
  %108 = bitcast float* %105 to i32*
  %109 = load i32* %108, align 4, !tbaa !14
  %110 = bitcast float* %107 to i32*
  store i32 %109, i32* %110, align 4, !tbaa !14
  %111 = getelementptr inbounds [3 x float]* %v, i64 %104, i64 1
  %112 = bitcast float* %111 to i32*
  %113 = load i32* %112, align 4, !tbaa !14
  %114 = getelementptr inbounds [3 x float]* %44, i64 %106, i64 1
  %115 = bitcast float* %114 to i32*
  store i32 %113, i32* %115, align 4, !tbaa !14
  %116 = getelementptr inbounds [3 x float]* %v, i64 %104, i64 2
  %117 = bitcast float* %116 to i32*
  %118 = load i32* %117, align 4, !tbaa !14
  %119 = getelementptr inbounds [3 x float]* %44, i64 %106, i64 2
  %120 = bitcast float* %119 to i32*
  store i32 %118, i32* %120, align 4, !tbaa !14
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  %lftr.wideiv28 = trunc i64 %indvars.iv26 to i32
  %exitcond29 = icmp eq i32 %lftr.wideiv28, %75
  br i1 %exitcond29, label %._crit_edge8, label %103

._crit_edge8:                                     ; preds = %103, %96
  %indvars.iv.next31 = add nuw nsw i64 %indvars.iv30, 1
  %lftr.wideiv32 = trunc i64 %indvars.iv30 to i32
  %exitcond33 = icmp eq i32 %lftr.wideiv32, %77
  br i1 %exitcond33, label %.preheader, label %96

; <label>:121                                     ; preds = %121, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %121 ]
  %122 = getelementptr inbounds [3 x float]* %44, i64 %indvars.iv, i64 0
  %123 = add nsw i64 %indvars.iv, %8
  %124 = getelementptr inbounds [3 x float]* %v, i64 %123, i64 0
  %125 = bitcast float* %122 to i32*
  %126 = load i32* %125, align 4, !tbaa !14
  %127 = bitcast float* %124 to i32*
  store i32 %126, i32* %127, align 4, !tbaa !14
  %128 = getelementptr inbounds [3 x float]* %44, i64 %indvars.iv, i64 1
  %129 = bitcast float* %128 to i32*
  %130 = load i32* %129, align 4, !tbaa !14
  %131 = getelementptr inbounds [3 x float]* %v, i64 %123, i64 1
  %132 = bitcast float* %131 to i32*
  store i32 %130, i32* %132, align 4, !tbaa !14
  %133 = getelementptr inbounds [3 x float]* %44, i64 %indvars.iv, i64 2
  %134 = bitcast float* %133 to i32*
  %135 = load i32* %134, align 4, !tbaa !14
  %136 = getelementptr inbounds [3 x float]* %v, i64 %123, i64 2
  %137 = bitcast float* %136 to i32*
  store i32 %135, i32* %137, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %95
  br i1 %exitcond, label %._crit_edge, label %121

._crit_edge:                                      ; preds = %121, %.preheader
  tail call void @save_free(i8* getelementptr inbounds ([4 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([69 x i8]* @.str1, i64 0, i64 0), i32 159, i8* %45) #8
  tail call void @save_free(i8* getelementptr inbounds ([8 x i8]* @.str2, i64 0, i64 0), i8* getelementptr inbounds ([69 x i8]* @.str1, i64 0, i64 0), i32 160, i8* %1) #8
  ret void
}
