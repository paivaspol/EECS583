define void @rotate_conf(i32 %natom, [3 x float]* %x, [3 x float]* %v, float %alfa, float %beta, float %gamma) #2 {
entry:
  tail call void @llvm.dbg.value(metadata !{i32 %natom}, i64 0, metadata !23), !dbg !214
  tail call void @llvm.dbg.value(metadata !{[3 x float]* %x}, i64 0, metadata !24), !dbg !214
  tail call void @llvm.dbg.value(metadata !{[3 x float]* %v}, i64 0, metadata !25), !dbg !214
  tail call void @llvm.dbg.value(metadata !{float %alfa}, i64 0, metadata !26), !dbg !214
  tail call void @llvm.dbg.value(metadata !{float %beta}, i64 0, metadata !27), !dbg !214
  tail call void @llvm.dbg.value(metadata !{float %gamma}, i64 0, metadata !28), !dbg !214
  %tobool = icmp eq [3 x float]* %x, null, !dbg !215
  br i1 %tobool, label %if.end, label %if.then, !dbg !215

if.then:                                          ; preds = %entry
  tail call fastcc void @low_rotate_conf(i32 %natom, [3 x float]* %x, float %alfa, float %beta, float %gamma) #6, !dbg !216
  br label %if.end, !dbg !216

if.end:                                           ; preds = %entry, %if.then
  %tobool1 = icmp eq [3 x float]* %v, null, !dbg !217
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !217

if.then2:                                         ; preds = %if.end
  tail call fastcc void @low_rotate_conf(i32 %natom, [3 x float]* %v, float %alfa, float %beta, float %gamma) #6, !dbg !218
  br label %if.end3, !dbg !218

if.end3:                                          ; preds = %if.end, %if.then2
  ret void, !dbg !219
}
