define internal fastcc void @low_rotate_conf(i32 %natom, [3 x float]* nocapture %x, float %alfa, float %beta, float %gamma) #1 {
entry:
  %cmp160 = icmp sgt i32 %natom, 0
  br i1 %cmp160, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %conv7 = fpext float %alfa to double
  %conv37 = fpext float %beta to double
  %conv75 = fpext float %gamma to double
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arraydecay = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 0
  %arrayidx2.i = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 1
  %0 = load float* %arrayidx2.i, align 4, !tbaa !0
  %arrayidx4.i = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 2
  %1 = load float* %arrayidx4.i, align 4, !tbaa !0
  %conv = fpext float %0 to double
  %call = tail call double @cos(double %conv7) #6
  %mul = fmul double %conv, %call
  %conv9 = fpext float %1 to double
  %call11 = tail call double @sin(double %conv7) #6
  %mul12 = fmul double %conv9, %call11
  %add = fadd double %mul, %mul12
  %conv13 = fptrunc double %add to float
  store float %conv13, float* %arrayidx2.i, align 4, !tbaa !0
  %call20 = tail call double @cos(double %conv7) #6
  %mul21 = fmul double %conv9, %call20
  %call25 = tail call double @sin(double %conv7) #6
  %mul26 = fmul double %conv, %call25
  %sub = fsub double %mul21, %mul26
  %conv27 = fptrunc double %sub to float
  store float %conv27, float* %arrayidx4.i, align 4, !tbaa !0
  %2 = load float* %arraydecay, align 4, !tbaa !0
  %3 = load float* %arrayidx2.i, align 4, !tbaa !0
  %conv36 = fpext float %2 to double
  %call38 = tail call double @cos(double %conv37) #6
  %mul39 = fmul double %conv36, %call38
  %conv41 = fpext float %conv27 to double
  %call43 = tail call double @sin(double %conv37) #6
  %mul44 = fmul double %conv41, %call43
  %sub45 = fsub double %mul39, %mul44
  %conv46 = fptrunc double %sub45 to float
  store float %conv46, float* %arraydecay, align 4, !tbaa !0
  store float %3, float* %arrayidx2.i, align 4, !tbaa !0
  %call57 = tail call double @cos(double %conv37) #6
  %mul58 = fmul double %conv41, %call57
  %call62 = tail call double @sin(double %conv37) #6
  %mul63 = fmul double %conv36, %call62
  %add64 = fadd double %mul58, %mul63
  %conv65 = fptrunc double %add64 to float
  store float %conv65, float* %arrayidx4.i, align 4, !tbaa !0
  %4 = load float* %arraydecay, align 4, !tbaa !0
  %5 = load float* %arrayidx2.i, align 4, !tbaa !0
  %conv74 = fpext float %4 to double
  %call76 = tail call double @cos(double %conv75) #6
  %mul77 = fmul double %conv74, %call76
  %conv79 = fpext float %5 to double
  %call81 = tail call double @sin(double %conv75) #6
  %mul82 = fmul double %conv79, %call81
  %add83 = fadd double %mul77, %mul82
  %conv84 = fptrunc double %add83 to float
  store float %conv84, float* %arraydecay, align 4, !tbaa !0
  %call91 = tail call double @cos(double %conv75) #6
  %mul92 = fmul double %conv79, %call91
  %call96 = tail call double @sin(double %conv75) #6
  %mul97 = fmul double %conv74, %call96
  %sub98 = fsub double %mul92, %mul97
  %conv99 = fptrunc double %sub98 to float
  store float %conv99, float* %arrayidx2.i, align 4, !tbaa !0
  store float %conv65, float* %arrayidx4.i, align 4, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %natom
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  ret void
}
