define internal fastcc void @low_rotate_conf(i32 %natom, [3 x float]* nocapture %x, float %alfa, float %beta, float %gamma) #4 {
  %1 = icmp sgt i32 %natom, 0
  br i1 %1, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %2 = fpext float %alfa to double
  %3 = tail call double @cos(double %2) #9
  %4 = tail call double @sin(double %2) #9
  %5 = fpext float %beta to double
  %6 = tail call double @cos(double %5) #9
  %7 = tail call double @sin(double %5) #9
  %8 = fpext float %gamma to double
  %9 = tail call double @cos(double %8) #9
  %10 = tail call double @sin(double %8) #9
  %11 = add i32 %natom, -1
  br label %12

; <label>:12                                      ; preds = %12, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %12 ]
  %13 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv
  %14 = getelementptr inbounds [3 x float]* %13, i64 0, i64 0
  %15 = getelementptr inbounds [3 x float]* %13, i64 0, i64 0
  %16 = load float* %15, align 4, !tbaa !14
  %17 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 1
  %18 = load float* %17, align 4, !tbaa !14
  %19 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 2
  %20 = load float* %19, align 4, !tbaa !14
  %21 = fpext float %18 to double
  %22 = fmul double %21, %3
  %23 = fpext float %20 to double
  %24 = fmul double %23, %4
  %25 = fadd double %22, %24
  %26 = fptrunc double %25 to float
  %27 = fmul double %23, %3
  %28 = fmul double %21, %4
  %29 = fsub double %27, %28
  %30 = fptrunc double %29 to float
  %31 = fpext float %16 to double
  %32 = fmul double %31, %6
  %33 = fpext float %30 to double
  %34 = fmul double %33, %7
  %35 = fsub double %32, %34
  %36 = fptrunc double %35 to float
  %37 = fmul double %6, %33
  %38 = fmul double %31, %7
  %39 = fadd double %37, %38
  %40 = fptrunc double %39 to float
  %41 = fpext float %36 to double
  %42 = fmul double %41, %9
  %43 = fpext float %26 to double
  %44 = fmul double %43, %10
  %45 = fadd double %42, %44
  %46 = fptrunc double %45 to float
  store float %46, float* %14, align 4, !tbaa !14
  %47 = fmul double %43, %9
  %48 = fmul double %41, %10
  %49 = fsub double %47, %48
  %50 = fptrunc double %49 to float
  store float %50, float* %17, align 4, !tbaa !14
  store float %40, float* %19, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %11
  br i1 %exitcond, label %._crit_edge, label %12

._crit_edge:                                      ; preds = %12, %0
  ret void
}
