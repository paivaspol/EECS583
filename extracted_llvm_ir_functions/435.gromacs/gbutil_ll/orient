define void @orient(i32 %natom, [3 x float]* %x, [3 x float]* %v, float* nocapture %angle, [3 x float]* nocapture readnone %box) #4 {
  %dx.i = alloca [3 x float], align 4
  %origin = alloca [3 x float], align 4
  %origin38 = bitcast [3 x float]* %origin to i8*
  %1 = getelementptr inbounds [3 x float]* %x, i64 0, i64 0
  %2 = getelementptr inbounds [3 x float]* %x, i64 1, i64 0
  %3 = bitcast [3 x float]* %dx.i to i8*
  call void @llvm.lifetime.start(i64 12, i8* %3)
  %4 = getelementptr inbounds [3 x float]* %dx.i, i64 0, i64 0
  call void @pbc_dx(float* %1, float* %2, float* %4) #7
  %5 = load float* %4, align 4, !tbaa !14
  %6 = getelementptr inbounds [3 x float]* %dx.i, i64 0, i64 1
  %7 = load float* %6, align 4, !tbaa !14
  %8 = getelementptr inbounds [3 x float]* %dx.i, i64 0, i64 2
  %9 = load float* %8, align 4, !tbaa !14
  call void @llvm.lifetime.end(i64 12, i8* %3)
  %10 = icmp sgt i32 %natom, 0
  br i1 %10, label %.preheader3.lr.ph, label %.preheader2

.preheader3.lr.ph:                                ; preds = %0
  %11 = fmul float %5, %5
  %12 = fmul float %7, %7
  %13 = fadd float %11, %12
  %14 = fmul float %9, %9
  %15 = fadd float %13, %14
  %16 = add i32 %natom, -1
  br label %.lr.ph15

.lr.ph15:                                         ; preds = %.preheader3.lr.ph, %._crit_edge16
  %indvars.iv44 = phi i64 [ 0, %.preheader3.lr.ph ], [ %indvars.iv.next45, %._crit_edge16 ]
  %longest.024 = phi float [ %15, %.preheader3.lr.ph ], [ %longest.2, %._crit_edge16 ]
  %max_j.023 = phi i32 [ 0, %.preheader3.lr.ph ], [ %max_j.2, %._crit_edge16 ]
  %max_i.022 = phi i32 [ 0, %.preheader3.lr.ph ], [ %max_i.2, %._crit_edge16 ]
  %17 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv44, i64 0
  br label %18

; <label>:18                                      ; preds = %18, %.lr.ph15
  %indvars.iv40 = phi i64 [ 0, %.lr.ph15 ], [ %indvars.iv.next41, %18 ]
  %longest.114 = phi float [ %longest.024, %.lr.ph15 ], [ %longest.2, %18 ]
  %max_j.113 = phi i32 [ %max_j.023, %.lr.ph15 ], [ %max_j.2, %18 ]
  %max_i.112 = phi i32 [ %max_i.022, %.lr.ph15 ], [ %max_i.2, %18 ]
  %19 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv40, i64 0
  call void @llvm.lifetime.start(i64 12, i8* %3)
  call void @pbc_dx(float* %17, float* %19, float* %4) #7
  %20 = load float* %4, align 4, !tbaa !14
  %21 = fmul float %20, %20
  %22 = load float* %6, align 4, !tbaa !14
  %23 = fmul float %22, %22
  %24 = fadd float %21, %23
  %25 = load float* %8, align 4, !tbaa !14
  %26 = fmul float %25, %25
  %27 = fadd float %24, %26
  call void @llvm.lifetime.end(i64 12, i8* %3)
  %28 = fcmp ogt float %27, %longest.114
  %29 = trunc i64 %indvars.iv44 to i32
  %max_i.2 = select i1 %28, i32 %29, i32 %max_i.112
  %30 = trunc i64 %indvars.iv40 to i32
  %max_j.2 = select i1 %28, i32 %30, i32 %max_j.113
  %longest.2 = select i1 %28, float %27, float %longest.114
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 1
  %exitcond43 = icmp eq i32 %30, %16
  br i1 %exitcond43, label %._crit_edge16, label %18

._crit_edge16:                                    ; preds = %18
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 1
  %exitcond47 = icmp eq i32 %29, %16
  br i1 %exitcond47, label %.preheader2, label %.lr.ph15

.preheader2:                                      ; preds = %._crit_edge16, %0
  %max_j.0.lcssa = phi i32 [ 0, %0 ], [ %max_j.2, %._crit_edge16 ]
  %max_i.0.lcssa = phi i32 [ 0, %0 ], [ %max_i.2, %._crit_edge16 ]
  %31 = sext i32 %max_i.0.lcssa to i64
  %32 = getelementptr inbounds [3 x float]* %x, i64 %31, i64 2
  %33 = load float* %32, align 4, !tbaa !14
  %34 = sext i32 %max_j.0.lcssa to i64
  %35 = getelementptr inbounds [3 x float]* %x, i64 %34, i64 2
  %36 = load float* %35, align 4, !tbaa !14
  %37 = fcmp ogt float %33, %36
  %max_i.3 = select i1 %37, i32 %max_j.0.lcssa, i32 %max_i.0.lcssa
  %38 = sext i32 %max_i.3 to i64
  %scevgep = getelementptr [3 x float]* %x, i64 %38, i64 0
  %scevgep39 = bitcast float* %scevgep to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %origin38, i8* %scevgep39, i64 12, i32 4, i1 false)
  %max_j.3 = select i1 %37, i32 %max_i.0.lcssa, i32 %max_j.0.lcssa
  br i1 %10, label %.preheader.lr.ph, label %._crit_edge9

.preheader.lr.ph:                                 ; preds = %.preheader2
  %39 = add i32 %natom, -1
  br label %.preheader

.preheader:                                       ; preds = %46, %.preheader.lr.ph
  %indvars.iv31 = phi i64 [ 0, %.preheader.lr.ph ], [ %indvars.iv.next32, %46 ]
  br label %40

; <label>:40                                      ; preds = %40, %.preheader
  %indvars.iv28 = phi i64 [ 0, %.preheader ], [ %indvars.iv.next29, %40 ]
  %41 = getelementptr inbounds [3 x float]* %origin, i64 0, i64 %indvars.iv28
  %42 = load float* %41, align 4, !tbaa !14
  %43 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv31, i64 %indvars.iv28
  %44 = load float* %43, align 4, !tbaa !14
  %45 = fsub float %44, %42
  store float %45, float* %43, align 4, !tbaa !14
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 1
  %exitcond30 = icmp eq i64 %indvars.iv.next29, 3
  br i1 %exitcond30, label %46, label %40

; <label>:46                                      ; preds = %40
  %indvars.iv.next32 = add nuw nsw i64 %indvars.iv31, 1
  %lftr.wideiv33 = trunc i64 %indvars.iv31 to i32
  %exitcond34 = icmp eq i32 %lftr.wideiv33, %39
  br i1 %exitcond34, label %._crit_edge9, label %.preheader

._crit_edge9:                                     ; preds = %46, %.preheader2
  %47 = sext i32 %max_j.3 to i64
  %48 = getelementptr inbounds [3 x float]* %x, i64 %47, i64 2
  %49 = load float* %48, align 4, !tbaa !14
  %50 = getelementptr inbounds [3 x float]* %x, i64 %47, i64 1
  %51 = load float* %50, align 4, !tbaa !14
  %52 = fdiv float %49, %51
  %53 = fpext float %52 to double
  %54 = call double @atan(double %53) #9
  %55 = fadd double %54, 0xBFF921FB54442D18
  %56 = fptrunc double %55 to float
  %57 = getelementptr inbounds [3 x float]* %x, i64 %47, i64 0
  %58 = load float* %57, align 4, !tbaa !14
  %59 = fdiv float %49, %58
  %60 = fpext float %59 to double
  %61 = call double @atan(double %60) #9
  %62 = fsub double 0x3FF921FB54442D18, %61
  %63 = fptrunc double %62 to float
  call void @rotate_conf(i32 %natom, [3 x float]* %x, [3 x float]* %v, float %56, float %63, float 0.000000e+00) #8
  %64 = load float* %1, align 4, !tbaa !14
  %65 = getelementptr inbounds [3 x float]* %x, i64 0, i64 1
  %66 = load float* %65, align 4, !tbaa !14
  %67 = icmp sgt i32 %natom, 1
  br i1 %67, label %.lr.ph, label %82

.lr.ph:                                           ; preds = %._crit_edge9
  %68 = fmul float %64, %64
  %69 = fmul float %66, %66
  %70 = fadd float %68, %69
  %71 = add i32 %natom, -1
  br label %72

; <label>:72                                      ; preds = %72, %.lr.ph
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %72 ]
  %longest.36 = phi float [ %70, %.lr.ph ], [ %longest.4, %72 ]
  %max_i.45 = phi i32 [ 0, %.lr.ph ], [ %max_i.5, %72 ]
  %73 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 0
  %74 = bitcast float* %73 to <2 x float>*
  %75 = load <2 x float>* %74, align 4, !tbaa !14
  %76 = fmul <2 x float> %75, %75
  %77 = extractelement <2 x float> %76, i32 0
  %78 = extractelement <2 x float> %76, i32 1
  %79 = fadd float %77, %78
  %80 = fcmp ogt float %79, %longest.36
  %81 = trunc i64 %indvars.iv to i32
  %max_i.5 = select i1 %80, i32 %81, i32 %max_i.45
  %longest.4 = select i1 %80, float %79, float %longest.36
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i32 %81, %71
  br i1 %exitcond, label %._crit_edge, label %72

._crit_edge:                                      ; preds = %72
  %phitmp = sext i32 %max_i.5 to i64
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %x, i64 %phitmp, i64 1
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  %.phi.trans.insert48 = getelementptr inbounds [3 x float]* %x, i64 %phitmp, i64 0
  %.pre49 = load float* %.phi.trans.insert48, align 4, !tbaa !14
  br label %82

; <label>:82                                      ; preds = %._crit_edge, %._crit_edge9
  %83 = phi float [ %.pre49, %._crit_edge ], [ %64, %._crit_edge9 ]
  %84 = phi float [ %.pre, %._crit_edge ], [ %66, %._crit_edge9 ]
  %85 = fdiv float %84, %83
  %86 = fpext float %85 to double
  %87 = call double @atan(double %86) #9
  %88 = fadd double %87, 0xBFF921FB54442D18
  %89 = fptrunc double %88 to float
  call void @rotate_conf(i32 %natom, [3 x float]* %x, [3 x float]* %v, float 0.000000e+00, float 0.000000e+00, float %89) #8
  store float %56, float* %angle, align 4, !tbaa !14
  %90 = getelementptr inbounds float* %angle, i64 1
  store float %63, float* %90, align 4, !tbaa !14
  %91 = getelementptr inbounds float* %angle, i64 2
  store float %89, float* %91, align 4, !tbaa !14
  ret void
}
