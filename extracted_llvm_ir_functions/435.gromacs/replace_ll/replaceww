define i8* @replaceww(i8* %string, i8* nocapture readonly %search, i8* nocapture readonly %replace) #3 {
  %1 = tail call i64 @strlen(i8* %search) #7
  %2 = trunc i64 %1 to i32
  %3 = tail call i64 @strlen(i8* %string) #7
  %4 = trunc i64 %3 to i32
  %5 = icmp eq i8* %string, null
  %6 = icmp eq i32 %2, 0
  %or.cond = or i1 %5, %6
  %7 = icmp eq i32 %4, 0
  %or.cond3 = or i1 %or.cond, %7
  br i1 %or.cond3, label %8, label %11

; <label>:8                                       ; preds = %0
  br i1 %5, label %.loopexit15, label %9

; <label>:9                                       ; preds = %8
  %10 = tail call i8* @strdup(i8* %string) #7
  br label %.loopexit15

; <label>:11                                      ; preds = %0
  %12 = tail call i64 @strlen(i8* %replace) #7
  %13 = trunc i64 %12 to i32
  %14 = mul nsw i32 %13, %4
  %15 = sdiv i32 %14, %2
  %16 = icmp sgt i32 %4, %15
  %. = select i1 %16, i32 %4, i32 %15
  %17 = add nsw i32 %., 1
  %18 = tail call i8* @save_calloc(i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8]* @.str1, i64 0, i64 0), i32 98, i32 %17, i32 1) #7
  %19 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %18, i1 false)
  %20 = tail call i8* @__strcpy_chk(i8* %18, i8* %string, i64 %19) #7
  %21 = tail call i8* @strstr(i8* %18, i8* %search) #7
  %22 = icmp eq i8* %21, null
  br i1 %22, label %.loopexit15, label %.lr.ph28

.lr.ph28:                                         ; preds = %11
  %sext = shl i64 %1, 32
  %23 = ashr exact i64 %sext, 32
  %24 = icmp slt i32 %2, %13
  %25 = icmp sgt i32 %13, 0
  %26 = sub i64 %12, %1
  %27 = icmp sgt i32 %2, %13
  %28 = sub i32 %2, %13
  %29 = add i32 %13, -1
  %sext39 = shl i64 %26, 32
  %30 = ashr exact i64 %sext39, 32
  %sext40 = shl i64 %1, 32
  %31 = ashr exact i64 %sext40, 32
  br label %32

; <label>:32                                      ; preds = %.lr.ph28, %.backedge
  %33 = phi i8* [ %21, %.lr.ph28 ], [ %91, %.backedge ]
  %bufptr.026 = phi i8* [ %18, %.lr.ph28 ], [ %bufptr.0.be, %.backedge ]
  %34 = icmp eq i8* %33, %bufptr.026
  br i1 %34, label %46, label %35

; <label>:35                                      ; preds = %32
  %36 = getelementptr inbounds i8* %33, i64 -1
  %37 = load i8* %36, align 1, !tbaa !13
  %isascii.i.i10 = icmp sgt i8 %37, -1
  br i1 %isascii.i.i10, label %38, label %43

; <label>:38                                      ; preds = %35
  %39 = sext i8 %37 to i64
  %40 = getelementptr inbounds %struct._RuneLocale* @_DefaultRuneLocale, i64 0, i32 5, i64 %39
  %41 = load i32* %40, align 4, !tbaa !14
  %42 = and i32 %41, 1280
  br label %isalnum.exit

; <label>:43                                      ; preds = %35
  %44 = sext i8 %37 to i32
  %45 = tail call i32 @__maskrune(i32 %44, i64 1280) #7
  br label %isalnum.exit

isalnum.exit:                                     ; preds = %38, %43
  %.sink.i.in.i = phi i32 [ %42, %38 ], [ %45, %43 ]
  %.sink.i.i = icmp eq i32 %.sink.i.in.i, 0
  br i1 %.sink.i.i, label %46, label %.backedge

; <label>:46                                      ; preds = %isalnum.exit, %32
  %47 = getelementptr inbounds i8* %33, i64 %23
  %48 = load i8* %47, align 1, !tbaa !13
  %isascii.i.i611 = icmp sgt i8 %48, -1
  br i1 %isascii.i.i611, label %49, label %54

; <label>:49                                      ; preds = %46
  %50 = sext i8 %48 to i64
  %51 = getelementptr inbounds %struct._RuneLocale* @_DefaultRuneLocale, i64 0, i32 5, i64 %50
  %52 = load i32* %51, align 4, !tbaa !14
  %53 = and i32 %52, 1280
  br label %isalnum.exit9

; <label>:54                                      ; preds = %46
  %55 = sext i8 %48 to i32
  %56 = tail call i32 @__maskrune(i32 %55, i64 1280) #7
  br label %isalnum.exit9

isalnum.exit9:                                    ; preds = %49, %54
  %.sink.i.in.i7 = phi i32 [ %53, %49 ], [ %56, %54 ]
  %.sink.i.i8 = icmp eq i32 %.sink.i.in.i7, 0
  br i1 %.sink.i.i8, label %57, label %.backedge

; <label>:57                                      ; preds = %isalnum.exit9
  br i1 %24, label %77, label %.preheader14

.preheader14:                                     ; preds = %57
  br i1 %25, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader14, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.preheader14 ]
  %58 = getelementptr inbounds i8* %replace, i64 %indvars.iv
  %59 = load i8* %58, align 1, !tbaa !13
  %60 = getelementptr inbounds i8* %33, i64 %indvars.iv
  store i8 %59, i8* %60, align 1, !tbaa !13
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %29
  br i1 %exitcond, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %.preheader14
  %i.0.lcssa = phi i32 [ 0, %.preheader14 ], [ %13, %.lr.ph ]
  br i1 %27, label %.preheader13, label %.backedge

.preheader13:                                     ; preds = %._crit_edge
  %61 = add i32 %28, %i.0.lcssa
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8* %33, i64 %62
  %64 = load i8* %63, align 1, !tbaa !13
  %65 = icmp eq i8 %64, 0
  %66 = sext i32 %i.0.lcssa to i64
  %67 = getelementptr inbounds i8* %33, i64 %66
  br i1 %65, label %._crit_edge19, label %.lr.ph18

.lr.ph18:                                         ; preds = %.preheader13, %.lr.ph18
  %indvars.iv31 = phi i64 [ %indvars.iv.next32, %.lr.ph18 ], [ %66, %.preheader13 ]
  %68 = phi i8* [ %76, %.lr.ph18 ], [ %67, %.preheader13 ]
  %69 = phi i8 [ %74, %.lr.ph18 ], [ %64, %.preheader13 ]
  store i8 %69, i8* %68, align 1, !tbaa !13
  %indvars.iv.next32 = add nsw i64 %indvars.iv31, 1
  %70 = trunc i64 %indvars.iv.next32 to i32
  %71 = add i32 %28, %70
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8* %33, i64 %72
  %74 = load i8* %73, align 1, !tbaa !13
  %75 = icmp eq i8 %74, 0
  %76 = getelementptr inbounds i8* %33, i64 %indvars.iv.next32
  br i1 %75, label %._crit_edge19, label %.lr.ph18

._crit_edge19:                                    ; preds = %.lr.ph18, %.preheader13
  %.lcssa = phi i8* [ %67, %.preheader13 ], [ %76, %.lr.ph18 ]
  store i8 0, i8* %.lcssa, align 1, !tbaa !13
  br label %.backedge

; <label>:77                                      ; preds = %57
  %78 = tail call i64 @strlen(i8* %33) #7
  %79 = trunc i64 %78 to i32
  %80 = icmp slt i32 %79, %2
  br i1 %80, label %.preheader, label %.lr.ph23

.lr.ph23:                                         ; preds = %77
  %sext41 = shl i64 %78, 32
  %81 = ashr exact i64 %sext41, 32
  br label %82

.preheader:                                       ; preds = %82, %77
  br i1 %25, label %.lr.ph25, label %.backedge

; <label>:82                                      ; preds = %82, %.lr.ph23
  %indvars.iv33 = phi i64 [ %indvars.iv.next34, %82 ], [ %81, %.lr.ph23 ]
  %83 = getelementptr inbounds i8* %33, i64 %indvars.iv33
  %84 = load i8* %83, align 1, !tbaa !13
  %85 = add nsw i64 %30, %indvars.iv33
  %86 = getelementptr inbounds i8* %33, i64 %85
  store i8 %84, i8* %86, align 1, !tbaa !13
  %indvars.iv.next34 = add nsw i64 %indvars.iv33, -1
  %87 = icmp sgt i64 %indvars.iv33, %31
  br i1 %87, label %82, label %.preheader

.lr.ph25:                                         ; preds = %.preheader, %.lr.ph25
  %indvars.iv35 = phi i64 [ %indvars.iv.next36, %.lr.ph25 ], [ 0, %.preheader ]
  %88 = getelementptr inbounds i8* %replace, i64 %indvars.iv35
  %89 = load i8* %88, align 1, !tbaa !13
  %90 = getelementptr inbounds i8* %33, i64 %indvars.iv35
  store i8 %89, i8* %90, align 1, !tbaa !13
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %lftr.wideiv37 = trunc i64 %indvars.iv35 to i32
  %exitcond38 = icmp eq i32 %lftr.wideiv37, %29
  br i1 %exitcond38, label %.backedge, label %.lr.ph25

.backedge:                                        ; preds = %.lr.ph25, %isalnum.exit, %isalnum.exit9, %._crit_edge19, %._crit_edge, %.preheader
  %.pn.in.in = phi i64 [ %12, %.preheader ], [ %12, %._crit_edge ], [ %12, %._crit_edge19 ], [ %1, %isalnum.exit9 ], [ %1, %isalnum.exit ], [ %12, %.lr.ph25 ]
  %.pn.in = shl i64 %.pn.in.in, 32
  %.pn = ashr exact i64 %.pn.in, 32
  %bufptr.0.be = getelementptr inbounds i8* %33, i64 %.pn
  %91 = tail call i8* @strstr(i8* %bufptr.0.be, i8* %search) #7
  %92 = icmp eq i8* %91, null
  br i1 %92, label %.loopexit15, label %32

.loopexit15:                                      ; preds = %.backedge, %11, %9, %8
  %.0 = phi i8* [ %10, %9 ], [ null, %8 ], [ %18, %11 ], [ %18, %.backedge ]
  ret i8* %.0
}
