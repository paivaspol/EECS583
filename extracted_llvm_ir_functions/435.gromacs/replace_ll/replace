define i8* @replace(i8* %string, i8* nocapture readonly %search, i8* nocapture readonly %replace) #3 {
  %1 = tail call i64 @strlen(i8* %search) #7
  %2 = trunc i64 %1 to i32
  %3 = tail call i64 @strlen(i8* %string) #7
  %4 = trunc i64 %3 to i32
  %5 = icmp eq i8* %string, null
  %6 = icmp eq i32 %2, 0
  %or.cond = or i1 %5, %6
  %7 = icmp eq i32 %4, 0
  %or.cond3 = or i1 %or.cond, %7
  br i1 %or.cond3, label %8, label %11

; <label>:8                                       ; preds = %0
  br i1 %5, label %.loopexit7, label %9

; <label>:9                                       ; preds = %8
  %10 = tail call i8* @strdup(i8* %string) #7
  br label %.loopexit7

; <label>:11                                      ; preds = %0
  %12 = tail call i64 @strlen(i8* %replace) #7
  %13 = trunc i64 %12 to i32
  %14 = mul nsw i32 %13, %4
  %15 = sdiv i32 %14, %2
  %16 = icmp sgt i32 %4, %15
  %. = select i1 %16, i32 %4, i32 %15
  %17 = add nsw i32 %., 1
  %18 = tail call i8* @save_calloc(i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8]* @.str1, i64 0, i64 0), i32 54, i32 %17, i32 1) #7
  %19 = tail call i64 @llvm.objectsize.i64.p0i8(i8* %18, i1 false)
  %20 = tail call i8* @__strcpy_chk(i8* %18, i8* %string, i64 %19) #7
  %21 = tail call i8* @strstr(i8* %18, i8* %search) #7
  %22 = icmp eq i8* %21, null
  br i1 %22, label %.loopexit7, label %.lr.ph19

.lr.ph19:                                         ; preds = %11
  %23 = icmp slt i32 %2, %13
  %24 = icmp sgt i32 %13, 0
  %25 = sub i64 %12, %1
  %sext = shl i64 %12, 32
  %26 = ashr exact i64 %sext, 32
  %27 = icmp sgt i32 %2, %13
  %28 = sub i32 %2, %13
  %29 = add i32 %13, -1
  %sext30 = shl i64 %25, 32
  %30 = ashr exact i64 %sext30, 32
  %sext31 = shl i64 %1, 32
  %31 = ashr exact i64 %sext31, 32
  br label %32

; <label>:32                                      ; preds = %.lr.ph19, %.loopexit
  %33 = phi i8* [ %21, %.lr.ph19 ], [ %68, %.loopexit ]
  br i1 %23, label %53, label %.preheader6

.preheader6:                                      ; preds = %32
  br i1 %24, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader6, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %.preheader6 ]
  %34 = getelementptr inbounds i8* %replace, i64 %indvars.iv
  %35 = load i8* %34, align 1, !tbaa !13
  %36 = getelementptr inbounds i8* %33, i64 %indvars.iv
  store i8 %35, i8* %36, align 1, !tbaa !13
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %29
  br i1 %exitcond, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %.preheader6
  %i.0.lcssa = phi i32 [ 0, %.preheader6 ], [ %13, %.lr.ph ]
  br i1 %27, label %.preheader5, label %.loopexit

.preheader5:                                      ; preds = %._crit_edge
  %37 = add i32 %28, %i.0.lcssa
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i8* %33, i64 %38
  %40 = load i8* %39, align 1, !tbaa !13
  %41 = icmp eq i8 %40, 0
  %42 = sext i32 %i.0.lcssa to i64
  %43 = getelementptr inbounds i8* %33, i64 %42
  br i1 %41, label %._crit_edge11, label %.lr.ph10

.lr.ph10:                                         ; preds = %.preheader5, %.lr.ph10
  %indvars.iv22 = phi i64 [ %indvars.iv.next23, %.lr.ph10 ], [ %42, %.preheader5 ]
  %44 = phi i8* [ %52, %.lr.ph10 ], [ %43, %.preheader5 ]
  %45 = phi i8 [ %50, %.lr.ph10 ], [ %40, %.preheader5 ]
  store i8 %45, i8* %44, align 1, !tbaa !13
  %indvars.iv.next23 = add nsw i64 %indvars.iv22, 1
  %46 = trunc i64 %indvars.iv.next23 to i32
  %47 = add i32 %28, %46
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8* %33, i64 %48
  %50 = load i8* %49, align 1, !tbaa !13
  %51 = icmp eq i8 %50, 0
  %52 = getelementptr inbounds i8* %33, i64 %indvars.iv.next23
  br i1 %51, label %._crit_edge11, label %.lr.ph10

._crit_edge11:                                    ; preds = %.lr.ph10, %.preheader5
  %.lcssa = phi i8* [ %43, %.preheader5 ], [ %52, %.lr.ph10 ]
  store i8 0, i8* %.lcssa, align 1, !tbaa !13
  br label %.loopexit

; <label>:53                                      ; preds = %32
  %54 = tail call i64 @strlen(i8* %33) #7
  %55 = trunc i64 %54 to i32
  %56 = icmp slt i32 %55, %2
  br i1 %56, label %.preheader, label %.lr.ph15

.lr.ph15:                                         ; preds = %53
  %sext32 = shl i64 %54, 32
  %57 = ashr exact i64 %sext32, 32
  br label %58

.preheader:                                       ; preds = %58, %53
  br i1 %24, label %.lr.ph17, label %.loopexit

; <label>:58                                      ; preds = %58, %.lr.ph15
  %indvars.iv24 = phi i64 [ %indvars.iv.next25, %58 ], [ %57, %.lr.ph15 ]
  %59 = getelementptr inbounds i8* %33, i64 %indvars.iv24
  %60 = load i8* %59, align 1, !tbaa !13
  %61 = add nsw i64 %30, %indvars.iv24
  %62 = getelementptr inbounds i8* %33, i64 %61
  store i8 %60, i8* %62, align 1, !tbaa !13
  %indvars.iv.next25 = add nsw i64 %indvars.iv24, -1
  %63 = icmp sgt i64 %indvars.iv24, %31
  br i1 %63, label %58, label %.preheader

.lr.ph17:                                         ; preds = %.preheader, %.lr.ph17
  %indvars.iv26 = phi i64 [ %indvars.iv.next27, %.lr.ph17 ], [ 0, %.preheader ]
  %64 = getelementptr inbounds i8* %replace, i64 %indvars.iv26
  %65 = load i8* %64, align 1, !tbaa !13
  %66 = getelementptr inbounds i8* %33, i64 %indvars.iv26
  store i8 %65, i8* %66, align 1, !tbaa !13
  %indvars.iv.next27 = add nuw nsw i64 %indvars.iv26, 1
  %lftr.wideiv28 = trunc i64 %indvars.iv26 to i32
  %exitcond29 = icmp eq i32 %lftr.wideiv28, %29
  br i1 %exitcond29, label %.loopexit, label %.lr.ph17

.loopexit:                                        ; preds = %.lr.ph17, %.preheader, %._crit_edge, %._crit_edge11
  %67 = getelementptr inbounds i8* %33, i64 %26
  %68 = tail call i8* @strstr(i8* %67, i8* %search) #7
  %69 = icmp eq i8* %68, null
  br i1 %69, label %.loopexit7, label %32

.loopexit7:                                       ; preds = %.loopexit, %11, %9, %8
  %.0 = phi i8* [ %10, %9 ], [ null, %8 ], [ %18, %11 ], [ %18, %.loopexit ]
  ret i8* %.0
}
