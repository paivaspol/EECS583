define float @mol_dipole(i32 %k0, i32 %k1, i32* nocapture %ma, [3 x float]* nocapture %x, float* nocapture %q) #0 {
entry:
  %mu = alloca [3 x float], align 4
  %arraydecay = getelementptr inbounds [3 x float]* %mu, i64 0, i64 0
  store float 0.000000e+00, float* %arraydecay, align 4, !tbaa !0
  %arrayidx1.i = getelementptr inbounds [3 x float]* %mu, i64 0, i64 1
  store float 0.000000e+00, float* %arrayidx1.i, align 4, !tbaa !0
  %arrayidx2.i = getelementptr inbounds [3 x float]* %mu, i64 0, i64 2
  store float 0.000000e+00, float* %arrayidx2.i, align 4, !tbaa !0
  %cmp24 = icmp slt i32 %k0, %k1
  br i1 %cmp24, label %for.body.lr.ph, label %for.end14

for.body.lr.ph:                                   ; preds = %entry
  %0 = sext i32 %k0 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc12
  %indvars.iv26 = phi i64 [ %0, %for.body.lr.ph ], [ %indvars.iv.next27, %for.inc12 ]
  %arrayidx = getelementptr inbounds i32* %ma, i64 %indvars.iv26
  %1 = load i32* %arrayidx, align 4, !tbaa !3
  %idxprom4 = sext i32 %1 to i64
  %arrayidx5 = getelementptr inbounds float* %q, i64 %idxprom4
  %2 = load float* %arrayidx5, align 4, !tbaa !0
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next, %for.body3 ]
  %arrayidx9 = getelementptr inbounds [3 x float]* %x, i64 %idxprom4, i64 %indvars.iv
  %3 = load float* %arrayidx9, align 4, !tbaa !0
  %mul = fmul float %2, %3
  %arrayidx11 = getelementptr inbounds [3 x float]* %mu, i64 0, i64 %indvars.iv
  %4 = load float* %arrayidx11, align 4, !tbaa !0
  %add = fadd float %4, %mul
  store float %add, float* %arrayidx11, align 4, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 3
  br i1 %exitcond, label %for.inc12, label %for.body3

for.inc12:                                        ; preds = %for.body3
  %indvars.iv.next27 = add i64 %indvars.iv26, 1
  %5 = trunc i64 %indvars.iv.next27 to i32
  %cmp = icmp slt i32 %5, %k1
  br i1 %cmp, label %for.body, label %for.cond.for.end14_crit_edge

for.cond.for.end14_crit_edge:                     ; preds = %for.inc12
  %.pre = load float* %arraydecay, align 4, !tbaa !0
  %.pre28 = load float* %arrayidx1.i, align 4, !tbaa !0
  %.pre29 = load float* %arrayidx2.i, align 4, !tbaa !0
  br label %for.end14

for.end14:                                        ; preds = %for.cond.for.end14_crit_edge, %entry
  %6 = phi float [ %.pre29, %for.cond.for.end14_crit_edge ], [ 0.000000e+00, %entry ]
  %7 = phi float [ %.pre28, %for.cond.for.end14_crit_edge ], [ 0.000000e+00, %entry ]
  %8 = phi float [ %.pre, %for.cond.for.end14_crit_edge ], [ 0.000000e+00, %entry ]
  %mul.i = fmul float %8, %8
  %mul4.i = fmul float %7, %7
  %add.i = fadd float %mul.i, %mul4.i
  %mul7.i = fmul float %6, %6
  %add8.i = fadd float %add.i, %mul7.i
  %conv9.i = call float @sqrtf(float %add8.i) #3
  ret float %conv9.i
}
