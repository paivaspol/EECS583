define void @calc_disres_R_6(%struct.t_commrec* %mcr, i32 %nfa, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %ip, [3 x float]* nocapture readonly %x, %struct.t_fcdata* nocapture %fcd) #3 {
  %1 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 4
  %2 = load float* %1, align 4, !tbaa !44
  %3 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 5
  %4 = load float* %3, align 4, !tbaa !26
  %5 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 10
  %6 = load float** %5, align 8, !tbaa !36
  %7 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 11
  %8 = load float** %7, align 8, !tbaa !37
  %9 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 12
  %10 = load float** %9, align 8, !tbaa !40
  %11 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 13
  %12 = load float** %11, align 8, !tbaa !38
  %13 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 14
  %14 = load float** %13, align 8, !tbaa !39
  %15 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 6
  %16 = load float* %15, align 4, !tbaa !27
  %17 = fmul float %2, %16
  store float %17, float* %15, align 4, !tbaa !27
  %18 = fpext float %17 to double
  %19 = fsub double 1.000000e+00, %18
  %20 = fdiv double 1.000000e+00, %19
  %21 = fptrunc double %20 to float
  %22 = icmp ne %struct.t_commrec* %mcr, null
  br i1 %22, label %23, label %29

; <label>:23                                      ; preds = %0
  %24 = getelementptr inbounds %struct.t_commrec* %mcr, i64 0, i32 1
  %25 = load i32* %24, align 4, !tbaa !45
  %26 = sitofp i32 %25 to double
  %27 = fdiv double 1.000000e+00, %26
  %28 = fptrunc double %27 to float
  br label %29

; <label>:29                                      ; preds = %23, %0
  %invn.0 = phi float [ %28, %23 ], [ 0.000000e+00, %0 ]
  %30 = icmp sgt i32 %nfa, 0
  br i1 %30, label %.lr.ph6, label %._crit_edge

.lr.ph6:                                          ; preds = %29
  %31 = fsub float %2, %17
  br label %32

; <label>:32                                      ; preds = %.lr.ph6, %107
  %indvars.iv8 = phi i64 [ 0, %.lr.ph6 ], [ %indvars.iv.next9, %107 ]
  %fa.05 = phi i32 [ 0, %.lr.ph6 ], [ %fa.1.lcssa, %107 ]
  %33 = sext i32 %fa.05 to i64
  %34 = getelementptr inbounds i32* %forceatoms, i64 %33
  %35 = load i32* %34, align 4, !tbaa !29
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %union.t_iparams* %ip, i64 %36, i32 0, i32 5
  %38 = bitcast float* %37 to i32*
  %39 = load i32* %38, align 4, !tbaa !30
  %40 = getelementptr inbounds float* %14, i64 %indvars.iv8
  store float 0.000000e+00, float* %40, align 4, !tbaa !47
  %41 = getelementptr inbounds float* %12, i64 %indvars.iv8
  store float 0.000000e+00, float* %41, align 4, !tbaa !47
  %42 = icmp slt i32 %fa.05, %nfa
  br i1 %42, label %.lr.ph.preheader, label %.critedge

.lr.ph.preheader:                                 ; preds = %32, %._crit_edge10
  %43 = phi i32 [ %97, %._crit_edge10 ], [ %fa.05, %32 ]
  %fa.1116 = phi i32 [ %94, %._crit_edge10 ], [ %fa.05, %32 ]
  %indvars.iv15 = phi i64 [ %indvars.iv.next, %._crit_edge10 ], [ %33, %32 ]
  %44 = sdiv i32 %43, 3
  %45 = add nsw i64 %indvars.iv15, 1
  %46 = getelementptr inbounds i32* %forceatoms, i64 %45
  %47 = load i32* %46, align 4, !tbaa !29
  %48 = add nsw i64 %indvars.iv15, 2
  %49 = getelementptr inbounds i32* %forceatoms, i64 %48
  %50 = load i32* %49, align 4, !tbaa !29
  %51 = sext i32 %47 to i64
  %52 = getelementptr inbounds [3 x float]* %x, i64 %51, i64 0
  %53 = sext i32 %50 to i64
  %54 = getelementptr inbounds [3 x float]* %x, i64 %53, i64 0
  %55 = load float* %52, align 4, !tbaa !47
  %56 = load float* %54, align 4, !tbaa !47
  %57 = fsub float %55, %56
  %58 = getelementptr inbounds [3 x float]* %x, i64 %51, i64 1
  %59 = load float* %58, align 4, !tbaa !47
  %60 = getelementptr inbounds [3 x float]* %x, i64 %53, i64 1
  %61 = load float* %60, align 4, !tbaa !47
  %62 = fsub float %59, %61
  %63 = getelementptr inbounds [3 x float]* %x, i64 %51, i64 2
  %64 = load float* %63, align 4, !tbaa !47
  %65 = getelementptr inbounds [3 x float]* %x, i64 %53, i64 2
  %66 = load float* %65, align 4, !tbaa !47
  %67 = fsub float %64, %66
  %68 = fmul float %57, %57
  %69 = fmul float %62, %62
  %70 = fadd float %68, %69
  %71 = fmul float %67, %67
  %72 = fadd float %70, %71
  %73 = fpext float %72 to double
  %74 = tail call double @sqrt(double %73) #8
  %75 = fdiv double 1.000000e+00, %74
  %76 = fptrunc double %75 to float
  %77 = fmul float %76, %76
  %78 = fmul float %76, %77
  %79 = fptrunc double %74 to float
  %80 = sext i32 %44 to i64
  %81 = getelementptr inbounds float* %6, i64 %80
  store float %79, float* %81, align 4, !tbaa !47
  %82 = getelementptr inbounds float* %8, i64 %80
  %83 = load float* %82, align 4, !tbaa !47
  %84 = fmul float %31, %83
  %85 = fmul float %4, %78
  %86 = fadd float %84, %85
  %87 = fmul float %21, %86
  store float %87, float* %82, align 4, !tbaa !47
  %88 = fmul float %78, %78
  %89 = load float* %41, align 4, !tbaa !47
  %90 = fadd float %89, %88
  store float %90, float* %41, align 4, !tbaa !47
  %91 = fmul float %87, %87
  %92 = load float* %40, align 4, !tbaa !47
  %93 = fadd float %92, %91
  store float %93, float* %40, align 4, !tbaa !47
  %94 = add nsw i32 %fa.1116, 3
  %95 = icmp slt i32 %94, %nfa
  %indvars.iv.next = add i64 %indvars.iv15, 3
  br i1 %95, label %._crit_edge10, label %.critedge

._crit_edge10:                                    ; preds = %.lr.ph.preheader
  %.phi.trans.insert = getelementptr inbounds i32* %forceatoms, i64 %indvars.iv.next
  %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !29
  %.phi.trans.insert11 = sext i32 %.pre to i64
  %.phi.trans.insert12 = getelementptr inbounds %union.t_iparams* %ip, i64 %.phi.trans.insert11, i32 0, i32 5
  %.phi.trans.insert13 = bitcast float* %.phi.trans.insert12 to i32*
  %.pre14 = load i32* %.phi.trans.insert13, align 4, !tbaa !30
  %96 = icmp eq i32 %.pre14, %39
  %97 = trunc i64 %indvars.iv.next to i32
  br i1 %96, label %.lr.ph.preheader, label %.critedge

.critedge:                                        ; preds = %._crit_edge10, %.lr.ph.preheader, %32
  %fa.1.lcssa = phi i32 [ %fa.05, %32 ], [ %97, %._crit_edge10 ], [ %94, %.lr.ph.preheader ]
  br i1 %22, label %98, label %107

; <label>:98                                      ; preds = %.critedge
  %99 = bitcast float* %41 to i32*
  %100 = load i32* %99, align 4, !tbaa !47
  %101 = getelementptr inbounds float* %10, i64 %indvars.iv8
  %102 = bitcast float* %101 to i32*
  store i32 %100, i32* %102, align 4, !tbaa !47
  %103 = load float* %41, align 4, !tbaa !47
  %104 = fmul float %invn.0, %103
  store float %104, float* %41, align 4, !tbaa !47
  %105 = load float* %40, align 4, !tbaa !47
  %106 = fmul float %invn.0, %105
  store float %106, float* %40, align 4, !tbaa !47
  br label %107

; <label>:107                                     ; preds = %98, %.critedge
  %indvars.iv.next9 = add nuw i64 %indvars.iv8, 1
  %108 = icmp slt i32 %fa.1.lcssa, %nfa
  br i1 %108, label %32, label %._crit_edge

._crit_edge:                                      ; preds = %107, %29
  br i1 %22, label %109, label %121

; <label>:109                                     ; preds = %._crit_edge
  %110 = getelementptr inbounds %struct.t_commrec* %mcr, i64 0, i32 1
  %111 = load i32* %110, align 4, !tbaa !45
  %112 = icmp sgt i32 %111, 1
  br i1 %112, label %117, label %113

; <label>:113                                     ; preds = %109
  %114 = getelementptr inbounds %struct.t_commrec* %mcr, i64 0, i32 5
  %115 = load i32* %114, align 4, !tbaa !48
  %116 = icmp sgt i32 %115, 1
  br i1 %116, label %117, label %121

; <label>:117                                     ; preds = %113, %109
  %118 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 7
  %119 = load i32* %118, align 4, !tbaa !28
  %120 = shl nsw i32 %119, 1
  tail call void @gmx_sumf(i32 %120, float* %12, %struct.t_commrec* %mcr) #7
  br label %121

; <label>:121                                     ; preds = %117, %113, %._crit_edge
  ret void
}
