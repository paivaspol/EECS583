define float @ta_disres(i32 %nfa, i32* nocapture readonly %forceatoms, %union.t_iparams* nocapture readonly %ip, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, %struct.t_forcerec* nocapture readonly %fr, %struct.t_graph* nocapture readonly %g, [3 x float]* nocapture readnone %box, float %lambda, float* nocapture readnone %dvdlambda, %struct.t_mdatoms* nocapture readnone %md, i32 %ngrp, float* nocapture readnone %egnb, float* nocapture readnone %egcoul, %struct.t_fcdata* nocapture %fcd) #3 {
  %dx = alloca [3 x float], align 4
  %1 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 1
  %2 = load i32* %1, align 4, !tbaa !49
  %3 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 2
  %4 = load float* %3, align 4, !tbaa !21
  %5 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 12
  %6 = load float** %5, align 8, !tbaa !40
  %7 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 13
  %8 = load float** %7, align 8, !tbaa !38
  %9 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 14
  %10 = load float** %9, align 8, !tbaa !39
  %11 = fpext float %4 to double
  %12 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 6
  %13 = load float* %12, align 4, !tbaa !27
  %14 = fpext float %13 to double
  %15 = fsub double 1.000000e+00, %14
  %16 = fmul double %11, %15
  %17 = fptrunc double %16 to float
  %18 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 58
  %19 = load [3 x float]** %18, align 8, !tbaa !50
  %20 = icmp sgt i32 %nfa, 0
  br i1 %20, label %.lr.ph48, label %._crit_edge

.lr.ph48:                                         ; preds = %0
  %21 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 0
  %22 = load i32* %21, align 4, !tbaa !18
  %23 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 0
  %24 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 1
  %25 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 2
  %26 = icmp eq i32 %2, 0
  %27 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 11
  %28 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 10
  %29 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %30 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %31 = icmp eq i32 %22, 0
  %32 = sext i32 %nfa to i64
  br label %33

; <label>:33                                      ; preds = %.lr.ph48, %.thread11
  %indvars.iv62 = phi i64 [ 0, %.lr.ph48 ], [ %indvars.iv.next63, %.thread11 ]
  %fa.047 = phi i32 [ 0, %.lr.ph48 ], [ %fa.2, %.thread11 ]
  %instant_viol_Rav7.044 = phi float [ 0.000000e+00, %.lr.ph48 ], [ %instant_viol_Rav7.2, %.thread11 ]
  %tav_viol_Rav7.043 = phi float [ 0.000000e+00, %.lr.ph48 ], [ %tav_viol_Rav7.2, %.thread11 ]
  %vtot.042 = phi float [ 0.000000e+00, %.lr.ph48 ], [ %vtot.116, %.thread11 ]
  %violtot.041 = phi float [ 0.000000e+00, %.lr.ph48 ], [ %violtot.115, %.thread11 ]
  %mixed_viol.040 = phi float [ 0.000000e+00, %.lr.ph48 ], [ %mixed_viol.114, %.thread11 ]
  %instant_viol.039 = phi float [ 0.000000e+00, %.lr.ph48 ], [ %instant_viol.213, %.thread11 ]
  %34 = sext i32 %fa.047 to i64
  %35 = getelementptr inbounds i32* %forceatoms, i64 %34
  %36 = load i32* %35, align 4, !tbaa !29
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %union.t_iparams* %ip, i64 %37, i32 0, i32 5
  %39 = bitcast float* %38 to i32*
  %40 = load i32* %39, align 4, !tbaa !30
  %41 = getelementptr inbounds %union.t_iparams* %ip, i64 %37, i32 0, i32 1
  %42 = load float* %41, align 4, !tbaa !52
  %43 = getelementptr inbounds %union.t_iparams* %ip, i64 %37, i32 0, i32 2
  %44 = load float* %43, align 4, !tbaa !53
  %45 = getelementptr inbounds %union.t_iparams* %ip, i64 %37, i32 0, i32 0
  %46 = load float* %45, align 4, !tbaa !54
  %47 = getelementptr inbounds %union.t_iparams* %ip, i64 %37, i32 0, i32 3
  %48 = load float* %47, align 4, !tbaa !55
  %49 = fmul float %17, %48
  %50 = add nsw i32 %fa.047, 3
  %51 = icmp slt i32 %50, %nfa
  br i1 %51, label %.lr.ph, label %.critedge

.lr.ph:                                           ; preds = %33, %61
  %indvars.iv = phi i64 [ %indvars.iv.next, %61 ], [ 1, %33 ]
  %52 = phi i32 [ %65, %61 ], [ %50, %33 ]
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i32* %forceatoms, i64 %53
  %55 = load i32* %54, align 4, !tbaa !29
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %union.t_iparams* %ip, i64 %56, i32 0, i32 5
  %58 = bitcast float* %57 to i32*
  %59 = load i32* %58, align 4, !tbaa !30
  %60 = icmp eq i32 %59, %40
  br i1 %60, label %61, label %..critedge_crit_edge30

; <label>:61                                      ; preds = %.lr.ph
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %62 = mul nsw i64 %indvars.iv.next, 3
  %63 = add nsw i64 %62, %34
  %64 = icmp slt i64 %63, %32
  %65 = trunc i64 %63 to i32
  br i1 %64, label %.lr.ph, label %..critedge_crit_edge

..critedge_crit_edge:                             ; preds = %61
  %66 = trunc i64 %indvars.iv.next to i32
  br label %.critedge

..critedge_crit_edge30:                           ; preds = %.lr.ph
  %67 = trunc i64 %indvars.iv to i32
  br label %.critedge

.critedge:                                        ; preds = %..critedge_crit_edge30, %..critedge_crit_edge, %33
  %.lcssa = phi i32 [ %65, %..critedge_crit_edge ], [ %52, %..critedge_crit_edge30 ], [ %50, %33 ]
  %npairs.0.lcssa = phi i32 [ %66, %..critedge_crit_edge ], [ %67, %..critedge_crit_edge30 ], [ 1, %33 ]
  %68 = getelementptr inbounds %union.t_iparams* %ip, i64 %37, i32 0, i32 4
  %69 = bitcast float* %68 to i32*
  %70 = load i32* %69, align 4, !tbaa !56
  %71 = icmp eq i32 %70, 2
  %72 = icmp sgt i32 %npairs.0.lcssa, 1
  br i1 %71, label %85, label %73

; <label>:73                                      ; preds = %.critedge
  %. = and i1 %31, %72
  %74 = zext i1 %. to i32
  %75 = getelementptr inbounds float* %8, i64 %indvars.iv62
  %76 = load float* %75, align 4, !tbaa !47
  %77 = fpext float %76 to double
  %78 = tail call double @llvm.pow.f64(double %77, double 0xBFC5555560000000)
  %79 = fptrunc double %78 to float
  %80 = getelementptr inbounds float* %10, i64 %indvars.iv62
  %81 = load float* %80, align 4, !tbaa !47
  %82 = fpext float %81 to double
  %83 = tail call double @llvm.pow.f64(double %82, double 0xBFC5555560000000)
  %84 = fptrunc double %83 to float
  br label %92

; <label>:85                                      ; preds = %.critedge
  %86 = zext i1 %72 to i32
  %87 = getelementptr inbounds float* %6, i64 %indvars.iv62
  %88 = load float* %87, align 4, !tbaa !47
  %89 = fpext float %88 to double
  %90 = tail call double @llvm.pow.f64(double %89, double 0xBFC5555560000000)
  %91 = fptrunc double %90 to float
  br label %92

; <label>:92                                      ; preds = %85, %73
  %Rav.0 = phi float [ %84, %73 ], [ %91, %85 ]
  %Rt.0 = phi float [ %79, %73 ], [ %91, %85 ]
  %bConservative.0 = phi i32 [ %74, %73 ], [ %86, %85 ]
  %bMixed.0 = phi i32 [ %2, %73 ], [ 0, %85 ]
  %93 = fcmp ogt float %Rav.0, %42
  br i1 %93, label %96, label %94

; <label>:94                                      ; preds = %92
  %95 = fcmp olt float %Rav.0, %46
  br i1 %95, label %96, label %.thread11

; <label>:96                                      ; preds = %92, %94
  %.sink = phi float [ %46, %94 ], [ %42, %92 ]
  %97 = fsub float %Rav.0, %.sink
  %98 = fpext float %49 to double
  %99 = fmul double %98, 5.000000e-01
  %100 = fmul float %97, %97
  %101 = fpext float %100 to double
  %102 = fmul double %99, %101
  %103 = fpext float %vtot.042 to double
  %104 = fadd double %103, %102
  %105 = fptrunc double %104 to float
  %106 = fdiv float 1.000000e+00, %105
  %fabsf = tail call float @fabsf(float %106) #4
  %107 = fpext float %fabsf to double
  %108 = fcmp olt double %107, 1.200000e-38
  br i1 %108, label %109, label %112

; <label>:109                                     ; preds = %96
  %110 = fpext float %105 to double
  %111 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @.str8, i64 0, i64 0), double %110) #7
  br label %112

; <label>:112                                     ; preds = %109, %96
  %113 = icmp eq i32 %bMixed.0, 0
  br i1 %113, label %114, label %115

; <label>:114                                     ; preds = %112
  %fabsf1 = tail call float @fabsf(float %97) #4
  br label %125

; <label>:115                                     ; preds = %112
  %116 = fcmp ogt float %Rt.0, %42
  br i1 %116, label %117, label %119

; <label>:117                                     ; preds = %115
  %118 = fcmp ogt float %97, 0.000000e+00
  br i1 %118, label %122, label %.thread11

; <label>:119                                     ; preds = %115
  %120 = fcmp olt float %Rt.0, %46
  %121 = fcmp olt float %97, 0.000000e+00
  %or.cond = and i1 %120, %121
  br i1 %or.cond, label %122, label %.thread11

; <label>:122                                     ; preds = %117, %119
  %.sink25 = phi float [ %46, %119 ], [ %42, %117 ]
  %123 = fsub float %Rt.0, %.sink25
  %124 = fmul float %97, %123
  %sqrtf = tail call float @sqrtf(float %124) #4
  br label %125

; <label>:125                                     ; preds = %122, %114
  %fabsf1.sink = phi float [ %fabsf1, %114 ], [ %sqrtf, %122 ]
  %.pn26 = phi float [ %97, %114 ], [ %sqrtf, %122 ]
  %instant_viol.2.ph = phi float [ %instant_viol.039, %114 ], [ %123, %122 ]
  %mixed_viol.1.ph = phi float [ %mixed_viol.040, %114 ], [ %sqrtf, %122 ]
  %.pn = fmul float %49, %.pn26
  %f_scal.1.ph = fsub float -0.000000e+00, %.pn
  %126 = fadd float %violtot.041, %fabsf1.sink
  %127 = fsub float %44, %42
  %128 = fmul float %127, %49
  %129 = fsub float -0.000000e+00, %128
  %130 = icmp ne i32 %bConservative.0, 0
  br i1 %130, label %131, label %148

; <label>:131                                     ; preds = %125
  %132 = fcmp olt float %.pn, %128
  %133 = select i1 %132, float %f_scal.1.ph, float %129
  %134 = getelementptr inbounds float* %10, i64 %indvars.iv62
  %135 = load float* %134, align 4
  br i1 %113, label %136, label %139

; <label>:136                                     ; preds = %131
  %137 = fdiv float %Rav.0, %135
  %138 = fmul float %133, %137
  br label %153

; <label>:139                                     ; preds = %131
  %140 = fmul float %mixed_viol.1.ph, 2.000000e+00
  %141 = fdiv float %133, %140
  %142 = fmul float %Rav.0, %97
  %143 = fdiv float %142, %135
  %144 = fmul float %Rt.0, %instant_viol.2.ph
  %145 = getelementptr inbounds float* %8, i64 %indvars.iv62
  %146 = load float* %145, align 4, !tbaa !47
  %147 = fdiv float %144, %146
  br label %153

; <label>:148                                     ; preds = %125
  %149 = sitofp i32 %npairs.0.lcssa to float
  %150 = fdiv float %f_scal.1.ph, %149
  %151 = fcmp ogt float %150, %129
  %152 = select i1 %151, float %150, float %129
  br label %153

; <label>:153                                     ; preds = %136, %139, %148
  %f_scal.2 = phi float [ %141, %139 ], [ %138, %136 ], [ %152, %148 ]
  %tav_viol_Rav7.1 = phi float [ %143, %139 ], [ %tav_viol_Rav7.043, %136 ], [ %tav_viol_Rav7.043, %148 ]
  %instant_viol_Rav7.1 = phi float [ %147, %139 ], [ %instant_viol_Rav7.044, %136 ], [ %instant_viol_Rav7.044, %148 ]
  %154 = icmp sgt i32 %npairs.0.lcssa, 0
  br i1 %154, label %.lr.ph36, label %.thread11

.lr.ph36:                                         ; preds = %153
  %155 = fpext float %tav_viol_Rav7.1 to double
  %156 = fpext float %instant_viol_Rav7.1 to double
  %157 = load i32* %29, align 4, !tbaa !57
  %158 = load [3 x i32]** %30, align 8, !tbaa !59
  %159 = add i32 %npairs.0.lcssa, -1
  %160 = mul i32 %159, 3
  %161 = add i32 %160, 3
  br label %162

; <label>:162                                     ; preds = %263, %.lr.ph36
  %indvars.iv59 = phi i64 [ %34, %.lr.ph36 ], [ %indvars.iv.next60, %263 ]
  %p.034 = phi i32 [ 0, %.lr.ph36 ], [ %264, %263 ]
  %163 = add nsw i64 %indvars.iv59, 1
  %164 = getelementptr inbounds i32* %forceatoms, i64 %163
  %165 = load i32* %164, align 4, !tbaa !29
  %166 = add nsw i64 %indvars.iv59, 2
  %167 = getelementptr inbounds i32* %forceatoms, i64 %166
  %168 = load i32* %167, align 4, !tbaa !29
  %169 = sext i32 %165 to i64
  %170 = getelementptr inbounds [3 x float]* %x, i64 %169, i64 0
  %171 = sext i32 %168 to i64
  %172 = getelementptr inbounds [3 x float]* %x, i64 %171, i64 0
  %173 = load float* %170, align 4, !tbaa !47
  %174 = load float* %172, align 4, !tbaa !47
  %175 = fsub float %173, %174
  %176 = getelementptr inbounds [3 x float]* %x, i64 %169, i64 1
  %177 = load float* %176, align 4, !tbaa !47
  %178 = getelementptr inbounds [3 x float]* %x, i64 %171, i64 1
  %179 = load float* %178, align 4, !tbaa !47
  %180 = fsub float %177, %179
  %181 = getelementptr inbounds [3 x float]* %x, i64 %169, i64 2
  %182 = load float* %181, align 4, !tbaa !47
  %183 = getelementptr inbounds [3 x float]* %x, i64 %171, i64 2
  %184 = load float* %183, align 4, !tbaa !47
  %185 = fsub float %182, %184
  store float %175, float* %23, align 4, !tbaa !47
  store float %180, float* %24, align 4, !tbaa !47
  store float %185, float* %25, align 4, !tbaa !47
  %186 = fmul float %175, %175
  %187 = fmul float %180, %180
  %188 = fadd float %186, %187
  %189 = fmul float %185, %185
  %190 = fadd float %189, %188
  %191 = fpext float %190 to double
  %192 = tail call double @sqrt(double %191) #8
  %193 = fdiv double 1.000000e+00, %192
  %194 = fptrunc double %193 to float
  br i1 %130, label %195, label %220

; <label>:195                                     ; preds = %162
  %196 = trunc i64 %indvars.iv59 to i32
  %197 = sdiv i32 %196, 3
  %198 = sext i32 %197 to i64
  %199 = load float** %27, align 8, !tbaa !37
  %200 = getelementptr inbounds float* %199, i64 %198
  %201 = load float* %200, align 4, !tbaa !47
  %202 = fpext float %201 to double
  %203 = tail call double @llvm.pow.f64(double %202, double 0x4002AAAAA0000000)
  br i1 %26, label %204, label %208

; <label>:204                                     ; preds = %195
  %205 = fpext float %194 to double
  %206 = fmul double %205, %203
  %207 = fptrunc double %206 to float
  br label %220

; <label>:208                                     ; preds = %195
  %209 = fmul double %155, %203
  %210 = load float** %28, align 8, !tbaa !36
  %211 = getelementptr inbounds float* %210, i64 %198
  %212 = load float* %211, align 4, !tbaa !47
  %213 = fpext float %212 to double
  %214 = tail call double @llvm.pow.f64(double %213, double -7.000000e+00)
  %215 = fmul double %156, %214
  %216 = fadd double %209, %215
  %217 = fpext float %194 to double
  %218 = fmul double %217, %216
  %219 = fptrunc double %218 to float
  br label %220

; <label>:220                                     ; preds = %204, %208, %162
  %weight_rt_1.0 = phi float [ %219, %208 ], [ %207, %204 ], [ %194, %162 ]
  %221 = fmul float %f_scal.2, %weight_rt_1.0
  %222 = sub nsw i32 %165, %157
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [3 x i32]* %158, i64 %223, i64 0
  %225 = sub nsw i32 %168, %157
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds [3 x i32]* %158, i64 %226, i64 0
  %228 = load i32* %224, align 4, !tbaa !29
  %229 = load i32* %227, align 4, !tbaa !29
  %230 = getelementptr inbounds [3 x i32]* %158, i64 %223, i64 1
  %231 = load i32* %230, align 4, !tbaa !29
  %232 = getelementptr inbounds [3 x i32]* %158, i64 %226, i64 1
  %233 = load i32* %232, align 4, !tbaa !29
  %234 = getelementptr inbounds [3 x i32]* %158, i64 %223, i64 2
  %235 = load i32* %234, align 4, !tbaa !29
  %236 = getelementptr inbounds [3 x i32]* %158, i64 %226, i64 2
  %237 = load i32* %236, align 4, !tbaa !29
  %238 = sub nsw i32 %235, %237
  %239 = mul i32 %238, 3
  %240 = add i32 %231, 3
  %241 = sub i32 %240, %233
  %242 = add i32 %241, %239
  %243 = mul i32 %242, 3
  %244 = add i32 %228, 4
  %245 = sub i32 %244, %229
  %246 = add i32 %245, %243
  %247 = sext i32 %246 to i64
  br label %248

; <label>:248                                     ; preds = %._crit_edge64, %220
  %249 = phi float [ %175, %220 ], [ %.pre, %._crit_edge64 ]
  %indvars.iv57 = phi i64 [ 0, %220 ], [ %indvars.iv.next58, %._crit_edge64 ]
  %250 = fmul float %221, %249
  %251 = getelementptr inbounds [3 x float]* %f, i64 %169, i64 %indvars.iv57
  %252 = load float* %251, align 4, !tbaa !47
  %253 = fadd float %252, %250
  store float %253, float* %251, align 4, !tbaa !47
  %254 = getelementptr inbounds [3 x float]* %f, i64 %171, i64 %indvars.iv57
  %255 = load float* %254, align 4, !tbaa !47
  %256 = fsub float %255, %250
  store float %256, float* %254, align 4, !tbaa !47
  %257 = getelementptr inbounds [3 x float]* %19, i64 %247, i64 %indvars.iv57
  %258 = load float* %257, align 4, !tbaa !47
  %259 = fadd float %250, %258
  store float %259, float* %257, align 4, !tbaa !47
  %260 = getelementptr inbounds [3 x float]* %19, i64 13, i64 %indvars.iv57
  %261 = load float* %260, align 4, !tbaa !47
  %262 = fsub float %261, %250
  store float %262, float* %260, align 4, !tbaa !47
  %indvars.iv.next58 = add nuw nsw i64 %indvars.iv57, 1
  %exitcond = icmp eq i64 %indvars.iv.next58, 3
  br i1 %exitcond, label %263, label %._crit_edge64

._crit_edge64:                                    ; preds = %248
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %dx, i64 0, i64 %indvars.iv.next58
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !47
  br label %248

; <label>:263                                     ; preds = %248
  %indvars.iv.next60 = add nsw i64 %indvars.iv59, 3
  %264 = add nuw nsw i32 %p.034, 1
  %exitcond61 = icmp eq i32 %p.034, %159
  br i1 %exitcond61, label %..thread11.loopexit_crit_edge, label %162

..thread11.loopexit_crit_edge:                    ; preds = %263
  %265 = add i32 %161, %fa.047
  br label %.thread11

.thread11:                                        ; preds = %153, %..thread11.loopexit_crit_edge, %119, %117, %94
  %vtot.116 = phi float [ %vtot.042, %94 ], [ %105, %117 ], [ %105, %119 ], [ %105, %..thread11.loopexit_crit_edge ], [ %105, %153 ]
  %violtot.115 = phi float [ %violtot.041, %94 ], [ %violtot.041, %117 ], [ %violtot.041, %119 ], [ %126, %..thread11.loopexit_crit_edge ], [ %126, %153 ]
  %mixed_viol.114 = phi float [ %mixed_viol.040, %94 ], [ %mixed_viol.040, %117 ], [ %mixed_viol.040, %119 ], [ %mixed_viol.1.ph, %..thread11.loopexit_crit_edge ], [ %mixed_viol.1.ph, %153 ]
  %instant_viol.213 = phi float [ %instant_viol.039, %94 ], [ %instant_viol.039, %117 ], [ %instant_viol.039, %119 ], [ %instant_viol.2.ph, %..thread11.loopexit_crit_edge ], [ %instant_viol.2.ph, %153 ]
  %tav_viol_Rav7.2 = phi float [ %tav_viol_Rav7.043, %94 ], [ %tav_viol_Rav7.043, %117 ], [ %tav_viol_Rav7.043, %119 ], [ %tav_viol_Rav7.1, %..thread11.loopexit_crit_edge ], [ %tav_viol_Rav7.1, %153 ]
  %instant_viol_Rav7.2 = phi float [ %instant_viol_Rav7.044, %94 ], [ %instant_viol_Rav7.044, %117 ], [ %instant_viol_Rav7.044, %119 ], [ %instant_viol_Rav7.1, %..thread11.loopexit_crit_edge ], [ %instant_viol_Rav7.1, %153 ]
  %fa.2 = phi i32 [ %.lcssa, %94 ], [ %.lcssa, %117 ], [ %.lcssa, %119 ], [ %265, %..thread11.loopexit_crit_edge ], [ %fa.047, %153 ]
  %indvars.iv.next63 = add nuw i64 %indvars.iv62, 1
  %266 = icmp slt i32 %fa.2, %nfa
  br i1 %266, label %33, label %._crit_edge

._crit_edge:                                      ; preds = %.thread11, %0
  %vtot.0.lcssa = phi float [ 0.000000e+00, %0 ], [ %vtot.116, %.thread11 ]
  %violtot.0.lcssa = phi float [ 0.000000e+00, %0 ], [ %violtot.115, %.thread11 ]
  %267 = getelementptr inbounds %struct.t_fcdata* %fcd, i64 0, i32 0, i32 9
  store float %violtot.0.lcssa, float* %267, align 4, !tbaa !60
  ret float %vtot.0.lcssa
}
