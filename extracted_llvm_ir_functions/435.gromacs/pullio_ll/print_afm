define void @print_afm(%struct.t_pull* nocapture %pull, i32 %step) #0 {
entry:
  %n = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 1, i32 0
  %0 = load i32* %n, align 4, !tbaa !0
  %cmp27 = icmp sgt i32 %0, 0
  br i1 %cmp27, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %bVerbose = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 25
  %out = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 19
  %f12 = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 1, i32 12
  %spring = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 1, i32 13
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %1 = load i32* %bVerbose, align 4, !tbaa !0
  %tobool = icmp eq i32 %1, 0
  %2 = load %struct._IO_FILE** %out, align 8, !tbaa !3
  %3 = load [3 x float]** %f12, align 8, !tbaa !3
  %arrayidx14 = getelementptr inbounds [3 x float]* %3, i64 %indvars.iv, i64 2
  %4 = load float* %arrayidx14, align 4, !tbaa !4
  %conv15 = fpext float %4 to double
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  %5 = load [3 x float]** %spring, align 8, !tbaa !3
  %arrayidx7 = getelementptr inbounds [3 x float]* %5, i64 %indvars.iv, i64 2
  %6 = load float* %arrayidx7, align 4, !tbaa !4
  %conv8 = fpext float %6 to double
  %7 = trunc i64 %indvars.iv to i32
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([24 x i8]* @.str4, i64 0, i64 0), i32 %step, i32 %7, double %conv15, double %conv8) #4
  br label %for.inc

if.else:                                          ; preds = %for.body
  %call16 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([7 x i8]* @.str5, i64 0, i64 0), double %conv15) #4
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else
  %indvars.iv.next = add i64 %indvars.iv, 1
  %8 = load i32* %n, align 4, !tbaa !0
  %9 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %9, %8
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %entry
  ret void
}
