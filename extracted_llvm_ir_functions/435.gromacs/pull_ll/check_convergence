define internal fastcc i32 @check_convergence(%struct.t_pull* nocapture readonly %pull) #6 {
  %dr = alloca [3 x float], align 4
  %1 = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 14
  %2 = load float* %1, align 4, !tbaa !63
  %3 = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 1, i32 0
  %4 = load i32* %3, align 4, !tbaa !24
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %6 = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 2, i32 9
  %7 = load [3 x float]** %6, align 8, !tbaa !39
  %8 = getelementptr inbounds [3 x float]* %7, i64 0, i64 0
  %9 = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 1, i32 9
  %10 = load [3 x float]** %9, align 8, !tbaa !28
  %11 = load float* %8, align 4, !tbaa !14
  %12 = getelementptr inbounds [3 x float]* %7, i64 0, i64 1
  %13 = load float* %12, align 4, !tbaa !14
  %14 = getelementptr inbounds [3 x float]* %7, i64 0, i64 2
  %15 = load float* %14, align 4, !tbaa !14
  %16 = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 1, i32 16
  %17 = load [3 x float]** %16, align 8, !tbaa !41
  %18 = getelementptr inbounds [3 x float]* %dr, i64 0, i64 0
  %19 = getelementptr inbounds [3 x float]* %dr, i64 0, i64 1
  %20 = getelementptr inbounds [3 x float]* %dr, i64 0, i64 2
  %21 = sext i32 %4 to i64
  br label %22

; <label>:22                                      ; preds = %.lr.ph, %61
  %indvars.iv4 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next5, %61 ]
  %bTest.02 = phi i32 [ 1, %.lr.ph ], [ %63, %61 ]
  %23 = getelementptr inbounds [3 x float]* %10, i64 %indvars.iv4, i64 0
  %24 = load float* %23, align 4, !tbaa !14
  %25 = fsub float %11, %24
  %26 = getelementptr inbounds [3 x float]* %10, i64 %indvars.iv4, i64 1
  %27 = load float* %26, align 4, !tbaa !14
  %28 = fsub float %13, %27
  %29 = getelementptr inbounds [3 x float]* %10, i64 %indvars.iv4, i64 2
  %30 = load float* %29, align 4, !tbaa !14
  %31 = fsub float %15, %30
  %32 = getelementptr inbounds [3 x float]* %17, i64 %indvars.iv4, i64 0
  %33 = load float* %32, align 4, !tbaa !14
  %34 = fadd float %25, %33
  %35 = getelementptr inbounds [3 x float]* %17, i64 %indvars.iv4, i64 1
  %36 = load float* %35, align 4, !tbaa !14
  %37 = fadd float %28, %36
  %38 = getelementptr inbounds [3 x float]* %17, i64 %indvars.iv4, i64 2
  %39 = load float* %38, align 4, !tbaa !14
  %40 = fadd float %31, %39
  store float %34, float* %18, align 4, !tbaa !14
  store float %37, float* %19, align 4, !tbaa !14
  store float %40, float* %20, align 4, !tbaa !14
  %41 = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 5, i64 0
  %42 = load float* %41, align 4, !tbaa !14
  %43 = getelementptr inbounds [3 x float]* %dr, i64 0, i64 0
  %44 = fmul float %42, %34
  store float %44, float* %43, align 4, !tbaa !14
  br label %._crit_edge6

._crit_edge6:                                     ; preds = %22, %._crit_edge6
  %indvars.iv.next7 = phi i64 [ 1, %22 ], [ %indvars.iv.next, %._crit_edge6 ]
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %dr, i64 0, i64 %indvars.iv.next7
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  %45 = getelementptr inbounds %struct.t_pull* %pull, i64 0, i32 5, i64 %indvars.iv.next7
  %46 = load float* %45, align 4, !tbaa !14
  %47 = getelementptr inbounds [3 x float]* %dr, i64 0, i64 %indvars.iv.next7
  %48 = fmul float %46, %.pre
  store float %48, float* %47, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next7, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %49, label %._crit_edge6

; <label>:49                                      ; preds = %._crit_edge6
  %50 = icmp eq i32 %bTest.02, 0
  br i1 %50, label %61, label %51

; <label>:51                                      ; preds = %49
  %52 = load float* %18, align 4, !tbaa !14
  %53 = fmul float %52, %52
  %54 = load float* %19, align 4, !tbaa !14
  %55 = fmul float %54, %54
  %56 = fadd float %53, %55
  %57 = load float* %20, align 4, !tbaa !14
  %58 = fmul float %57, %57
  %59 = fadd float %56, %58
  %sqrtf.i = tail call float @sqrtf(float %59) #7
  %60 = fcmp olt float %sqrtf.i, %2
  br label %61

; <label>:61                                      ; preds = %49, %51
  %62 = phi i1 [ false, %49 ], [ %60, %51 ]
  %63 = zext i1 %62 to i32
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1
  %64 = icmp slt i64 %indvars.iv.next5, %21
  br i1 %64, label %22, label %._crit_edge

._crit_edge:                                      ; preds = %61, %0
  %bTest.0.lcssa = phi i32 [ 1, %0 ], [ %63, %61 ]
  ret i32 %bTest.0.lcssa
}
