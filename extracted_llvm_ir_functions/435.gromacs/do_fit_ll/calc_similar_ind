define float @calc_similar_ind(i32 %bRho, i32 %nind, i32* %index, float* nocapture %mass, [3 x float]* nocapture %x, [3 x float]* nocapture %xp) #0 {
entry:
  %cmp67 = icmp sgt i32 %nind, 0
  br i1 %cmp67, label %for.body.lr.ph, label %for.end32

for.body.lr.ph:                                   ; preds = %entry
  %tobool = icmp eq i32* %index, null
  %tobool15 = icmp eq i32 %bRho, 0
  br label %for.body

for.body:                                         ; preds = %for.inc30, %for.body.lr.ph
  %indvars.iv74 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next75, %for.inc30 ]
  %rd.071 = phi float [ 0.000000e+00, %for.body.lr.ph ], [ %add14, %for.inc30 ]
  %rs.070 = phi float [ 0.000000e+00, %for.body.lr.ph ], [ %rs.2, %for.inc30 ]
  %tm.069 = phi float [ 0.000000e+00, %for.body.lr.ph ], [ %add, %for.inc30 ]
  %0 = trunc i64 %indvars.iv74 to i32
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %arrayidx = getelementptr inbounds i32* %index, i64 %indvars.iv74
  %1 = load i32* %arrayidx, align 4, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %for.body, %if.then
  %i.0 = phi i32 [ %1, %if.then ], [ %0, %for.body ]
  %idxprom1 = sext i32 %i.0 to i64
  %arrayidx2 = getelementptr inbounds float* %mass, i64 %idxprom1
  %2 = load float* %arrayidx2, align 4, !tbaa !3
  br label %for.body5

for.body5:                                        ; preds = %for.inc, %if.end
  %indvars.iv = phi i64 [ 0, %if.end ], [ %indvars.iv.next, %for.inc ]
  %rd.166 = phi float [ %rd.071, %if.end ], [ %add14, %for.inc ]
  %rs.165 = phi float [ %rs.070, %if.end ], [ %rs.2, %for.inc ]
  %arrayidx9 = getelementptr inbounds [3 x float]* %x, i64 %idxprom1, i64 %indvars.iv
  %3 = load float* %arrayidx9, align 4, !tbaa !3
  %arrayidx13 = getelementptr inbounds [3 x float]* %xp, i64 %idxprom1, i64 %indvars.iv
  %4 = load float* %arrayidx13, align 4, !tbaa !3
  %sub = fsub float %3, %4
  %mul.i = fmul float %sub, %sub
  %mul = fmul float %2, %mul.i
  %add14 = fadd float %rd.166, %mul
  br i1 %tobool15, label %for.inc, label %if.then16

if.then16:                                        ; preds = %for.body5
  %add25 = fadd float %3, %4
  %mul.i63 = fmul float %add25, %add25
  %mul27 = fmul float %2, %mul.i63
  %add28 = fadd float %rs.165, %mul27
  br label %for.inc

for.inc:                                          ; preds = %for.body5, %if.then16
  %rs.2 = phi float [ %add28, %if.then16 ], [ %rs.165, %for.body5 ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 3
  br i1 %exitcond, label %for.inc30, label %for.body5

for.inc30:                                        ; preds = %for.inc
  %add = fadd float %tm.069, %2
  %indvars.iv.next75 = add i64 %indvars.iv74, 1
  %lftr.wideiv76 = trunc i64 %indvars.iv.next75 to i32
  %exitcond77 = icmp eq i32 %lftr.wideiv76, %nind
  br i1 %exitcond77, label %for.end32, label %for.body

for.end32:                                        ; preds = %for.inc30, %entry
  %rd.0.lcssa = phi float [ 0.000000e+00, %entry ], [ %add14, %for.inc30 ]
  %rs.0.lcssa = phi float [ 0.000000e+00, %entry ], [ %rs.2, %for.inc30 ]
  %tm.0.lcssa = phi float [ 0.000000e+00, %entry ], [ %add, %for.inc30 ]
  %tobool33 = icmp eq i32 %bRho, 0
  br i1 %tobool33, label %if.else38, label %if.then34

if.then34:                                        ; preds = %for.end32
  %div = fdiv float %rd.0.lcssa, %rs.0.lcssa
  %conv = fpext float %div to double
  %call35 = tail call double @sqrt(double %conv) #4
  %mul36 = fmul double %call35, 2.000000e+00
  %conv37 = fptrunc double %mul36 to float
  br label %return

if.else38:                                        ; preds = %for.end32
  %div39 = fdiv float %rd.0.lcssa, %tm.0.lcssa
  %conv42 = tail call float @sqrtf(float %div39) #1
  br label %return

return:                                           ; preds = %if.else38, %if.then34
  %retval.0 = phi float [ %conv37, %if.then34 ], [ %conv42, %if.else38 ]
  ret float %retval.0
}
