define void @inl0402(i32 %nri, i32* nocapture %iinr, i32* nocapture %jindex, i32* nocapture %jjnr, i32* nocapture %shift, float* nocapture %shiftvec, float* nocapture %fshift, i32* nocapture %gid, float* nocapture %pos, float* nocapture %faction, i32* nocapture %type, i32 %ntype, float* nocapture %nbfp, float* nocapture %Vnb, float %tabscale, float* nocapture %VFtab, float %exptabscale, float %lambda, float* nocapture %dvdlambda, i32* nocapture %typeB, float %Alpha, float %defsigma6) #0 {
entry:
  %sub = fsub float 1.000000e+00, %lambda
  %cmp625 = icmp sgt i32 %nri, 0
  br i1 %cmp625, label %for.body.lr.ph, label %for.end347

for.body.lr.ph:                                   ; preds = %entry
  %mul1 = fmul float %sub, %sub
  %mul = fmul float %lambda, %lambda
  %mul29 = mul nsw i32 %ntype, 3
  %mul91 = fmul float %Alpha, %defsigma6
  %mul92 = fmul float %mul, %mul91
  %mul171 = fmul float %mul1, %mul91
  %mul265 = fmul float %Alpha, 0x3FD5555560000000
  %mul266 = fmul float %mul265, %lambda
  %mul267 = fmul float %sub, %mul266
  br label %for.body

for.body:                                         ; preds = %for.end, %for.body.lr.ph
  %indvars.iv629 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next630, %for.end ]
  %dvdl.0626 = phi float [ 0.000000e+00, %for.body.lr.ph ], [ %dvdl.1.lcssa, %for.end ]
  %arrayidx = getelementptr inbounds i32* %shift, i64 %indvars.iv629
  %0 = load i32* %arrayidx, align 4, !tbaa !0
  %mul2 = mul nsw i32 %0, 3
  %idxprom3 = sext i32 %mul2 to i64
  %arrayidx4 = getelementptr inbounds float* %shiftvec, i64 %idxprom3
  %1 = load float* %arrayidx4, align 4, !tbaa !3
  %add = add nsw i32 %mul2, 1
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds float* %shiftvec, i64 %idxprom5
  %2 = load float* %arrayidx6, align 4, !tbaa !3
  %add7 = add nsw i32 %mul2, 2
  %idxprom8 = sext i32 %add7 to i64
  %arrayidx9 = getelementptr inbounds float* %shiftvec, i64 %idxprom8
  %3 = load float* %arrayidx9, align 4, !tbaa !3
  %arrayidx11 = getelementptr inbounds i32* %iinr, i64 %indvars.iv629
  %4 = load i32* %arrayidx11, align 4, !tbaa !0
  %mul12 = mul nsw i32 %4, 3
  %arrayidx14 = getelementptr inbounds i32* %jindex, i64 %indvars.iv629
  %5 = load i32* %arrayidx14, align 4, !tbaa !0
  %indvars.iv.next630 = add i64 %indvars.iv629, 1
  %arrayidx17 = getelementptr inbounds i32* %jindex, i64 %indvars.iv.next630
  %6 = load i32* %arrayidx17, align 4, !tbaa !0
  %idxprom18 = sext i32 %mul12 to i64
  %arrayidx19 = getelementptr inbounds float* %pos, i64 %idxprom18
  %7 = load float* %arrayidx19, align 4, !tbaa !3
  %add20 = fadd float %1, %7
  %add21 = add nsw i32 %mul12, 1
  %idxprom22 = sext i32 %add21 to i64
  %arrayidx23 = getelementptr inbounds float* %pos, i64 %idxprom22
  %8 = load float* %arrayidx23, align 4, !tbaa !3
  %add24 = fadd float %2, %8
  %add25 = add nsw i32 %mul12, 2
  %idxprom26 = sext i32 %add25 to i64
  %arrayidx27 = getelementptr inbounds float* %pos, i64 %idxprom26
  %9 = load float* %arrayidx27, align 4, !tbaa !3
  %add28 = fadd float %3, %9
  %idxprom30 = sext i32 %4 to i64
  %arrayidx31 = getelementptr inbounds i32* %type, i64 %idxprom30
  %10 = load i32* %arrayidx31, align 4, !tbaa !0
  %mul32 = mul nsw i32 %10, %mul29
  %arrayidx35 = getelementptr inbounds i32* %typeB, i64 %idxprom30
  %11 = load i32* %arrayidx35, align 4, !tbaa !0
  %mul36 = mul nsw i32 %11, %mul29
  %cmp38614 = icmp slt i32 %5, %6
  br i1 %cmp38614, label %for.body39.lr.ph, label %for.end

for.body39.lr.ph:                                 ; preds = %for.body
  %12 = sext i32 %5 to i64
  br label %for.body39

for.body39:                                       ; preds = %for.body39.lr.ph, %if.end244
  %indvars.iv = phi i64 [ %12, %for.body39.lr.ph ], [ %indvars.iv.next, %if.end244 ]
  %fiz1.0619 = phi float [ 0.000000e+00, %for.body39.lr.ph ], [ %add280, %if.end244 ]
  %fiy1.0618 = phi float [ 0.000000e+00, %for.body39.lr.ph ], [ %add279, %if.end244 ]
  %fix1.0617 = phi float [ 0.000000e+00, %for.body39.lr.ph ], [ %add278, %if.end244 ]
  %dvdl.1616 = phi float [ %dvdl.0626, %for.body39.lr.ph ], [ %add274, %if.end244 ]
  %vnbtot.0615 = phi float [ 0.000000e+00, %for.body39.lr.ph ], [ %add250, %if.end244 ]
  %arrayidx41 = getelementptr inbounds i32* %jjnr, i64 %indvars.iv
  %13 = load i32* %arrayidx41, align 4, !tbaa !0
  %mul42 = mul nsw i32 %13, 3
  %idxprom43 = sext i32 %mul42 to i64
  %arrayidx44 = getelementptr inbounds float* %pos, i64 %idxprom43
  %14 = load float* %arrayidx44, align 4, !tbaa !3
  %add45 = add nsw i32 %mul42, 1
  %idxprom46 = sext i32 %add45 to i64
  %arrayidx47 = getelementptr inbounds float* %pos, i64 %idxprom46
  %15 = load float* %arrayidx47, align 4, !tbaa !3
  %add48 = add nsw i32 %mul42, 2
  %idxprom49 = sext i32 %add48 to i64
  %arrayidx50 = getelementptr inbounds float* %pos, i64 %idxprom49
  %16 = load float* %arrayidx50, align 4, !tbaa !3
  %sub51 = fsub float %add20, %14
  %sub52 = fsub float %add24, %15
  %sub53 = fsub float %add28, %16
  %mul54 = fmul float %sub51, %sub51
  %mul55 = fmul float %sub52, %sub52
  %add56 = fadd float %mul54, %mul55
  %mul57 = fmul float %sub53, %sub53
  %add58 = fadd float %add56, %mul57
  %conv = fpext float %add58 to double
  %call = tail call double @sqrt(double %conv) #2
  %idxprom61 = sext i32 %13 to i64
  %arrayidx62 = getelementptr inbounds i32* %type, i64 %idxprom61
  %17 = load i32* %arrayidx62, align 4, !tbaa !0
  %mul63 = mul nsw i32 %17, 3
  %add64 = add nsw i32 %mul63, %mul32
  %arrayidx66 = getelementptr inbounds i32* %typeB, i64 %idxprom61
  %18 = load i32* %arrayidx66, align 4, !tbaa !0
  %mul67 = mul nsw i32 %18, 3
  %add68 = add nsw i32 %mul67, %mul36
  %idxprom69 = sext i32 %add64 to i64
  %arrayidx70 = getelementptr inbounds float* %nbfp, i64 %idxprom69
  %19 = load float* %arrayidx70, align 4, !tbaa !3
  %idxprom71 = sext i32 %add68 to i64
  %arrayidx72 = getelementptr inbounds float* %nbfp, i64 %idxprom71
  %20 = load float* %arrayidx72, align 4, !tbaa !3
  %add73 = add nsw i32 %add64, 1
  %idxprom74 = sext i32 %add73 to i64
  %arrayidx75 = getelementptr inbounds float* %nbfp, i64 %idxprom74
  %21 = load float* %arrayidx75, align 4, !tbaa !3
  %add76 = add nsw i32 %add68, 1
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds float* %nbfp, i64 %idxprom77
  %22 = load float* %arrayidx78, align 4, !tbaa !3
  %add79 = add nsw i32 %add64, 2
  %idxprom80 = sext i32 %add79 to i64
  %arrayidx81 = getelementptr inbounds float* %nbfp, i64 %idxprom80
  %23 = load float* %arrayidx81, align 4, !tbaa !3
  %add82 = add nsw i32 %add68, 2
  %idxprom83 = sext i32 %add82 to i64
  %arrayidx84 = getelementptr inbounds float* %nbfp, i64 %idxprom83
  %24 = load float* %arrayidx84, align 4, !tbaa !3
  %mul85 = fmul float %add58, %add58
  %mul86 = fmul float %add58, %mul85
  %cmp87 = fcmp ogt float %19, 0.000000e+00
  %cmp89 = fcmp ogt float %21, 0.000000e+00
  %or.cond = or i1 %cmp87, %cmp89
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %for.body39
  %add93 = fadd float %mul92, %mul86
  %conv94 = fpext float %add93 to double
  %call95 = tail call double @pow(double %conv94, double 0x3FC5555560000000) #2
  %conv96 = fptrunc double %call95 to float
  %conv99 = fdiv float 1.000000e+00, %conv96
  %mul100 = fmul float %conv99, %conv99
  %mul101 = fmul float %mul100, %mul100
  %mul102 = fmul float %conv99, %mul101
  %mul103 = fmul float %conv96, %tabscale
  %conv104 = fptosi float %mul103 to i32
  %conv105 = sitofp i32 %conv104 to float
  %sub106 = fsub float %mul103, %conv105
  %mul107 = fmul float %sub106, %sub106
  %mul108 = shl nsw i32 %conv104, 3
  %idxprom109 = sext i32 %mul108 to i64
  %arrayidx110 = getelementptr inbounds float* %VFtab, i64 %idxprom109
  %25 = load float* %arrayidx110, align 4, !tbaa !3
  %add111606 = or i32 %mul108, 1
  %idxprom112 = sext i32 %add111606 to i64
  %arrayidx113 = getelementptr inbounds float* %VFtab, i64 %idxprom112
  %26 = load float* %arrayidx113, align 4, !tbaa !3
  %add114607 = or i32 %mul108, 2
  %idxprom115 = sext i32 %add114607 to i64
  %arrayidx116 = getelementptr inbounds float* %VFtab, i64 %idxprom115
  %27 = load float* %arrayidx116, align 4, !tbaa !3
  %mul117 = fmul float %27, %sub106
  %add118608 = or i32 %mul108, 3
  %idxprom119 = sext i32 %add118608 to i64
  %arrayidx120 = getelementptr inbounds float* %VFtab, i64 %idxprom119
  %28 = load float* %arrayidx120, align 4, !tbaa !3
  %mul121 = fmul float %28, %mul107
  %add122 = fadd float %26, %mul117
  %add123 = fadd float %add122, %mul121
  %mul124 = fmul float %sub106, %add123
  %add125 = fadd float %25, %mul124
  %add126 = fadd float %mul117, %add123
  %mul127 = fmul float %mul121, 2.000000e+00
  %add128 = fadd float %mul127, %add126
  %mul129 = fmul float %19, %add125
  %mul130 = fmul float %19, %tabscale
  %mul131 = fmul float %mul130, %add128
  %mul132 = fmul float %23, %conv96
  %mul133 = fmul float %mul132, %tabscale
  %conv134 = fptosi float %mul133 to i32
  %conv135 = sitofp i32 %conv134 to float
  %sub136 = fsub float %mul133, %conv135
  %mul137 = fmul float %sub136, %sub136
  %mul138 = shl nsw i32 %conv134, 3
  %add139609 = or i32 %mul138, 4
  %idxprom140 = sext i32 %add139609 to i64
  %arrayidx141 = getelementptr inbounds float* %VFtab, i64 %idxprom140
  %29 = load float* %arrayidx141, align 4, !tbaa !3
  %add142610 = or i32 %mul138, 5
  %idxprom143 = sext i32 %add142610 to i64
  %arrayidx144 = getelementptr inbounds float* %VFtab, i64 %idxprom143
  %30 = load float* %arrayidx144, align 4, !tbaa !3
  %add145611 = or i32 %mul138, 6
  %idxprom146 = sext i32 %add145611 to i64
  %arrayidx147 = getelementptr inbounds float* %VFtab, i64 %idxprom146
  %31 = load float* %arrayidx147, align 4, !tbaa !3
  %mul148 = fmul float %sub136, %31
  %add149612 = or i32 %mul138, 7
  %idxprom150 = sext i32 %add149612 to i64
  %arrayidx151 = getelementptr inbounds float* %VFtab, i64 %idxprom150
  %32 = load float* %arrayidx151, align 4, !tbaa !3
  %mul152 = fmul float %mul137, %32
  %add153 = fadd float %30, %mul148
  %add154 = fadd float %add153, %mul152
  %mul155 = fmul float %sub136, %add154
  %add156 = fadd float %29, %mul155
  %add157 = fadd float %mul148, %add154
  %mul158 = fmul float %mul152, 2.000000e+00
  %add159 = fadd float %mul158, %add157
  %mul160 = fmul float %21, %add156
  %mul161 = fmul float %21, %23
  %mul162 = fmul float %mul161, %exptabscale
  %mul163 = fmul float %mul162, %add159
  br label %if.end

if.end:                                           ; preds = %for.body39, %if.then
  %FFRa.0 = phi float [ %mul163, %if.then ], [ 0.000000e+00, %for.body39 ]
  %VVRa.0 = phi float [ %mul160, %if.then ], [ 0.000000e+00, %for.body39 ]
  %FFDa.0 = phi float [ %mul131, %if.then ], [ 0.000000e+00, %for.body39 ]
  %VVDa.0 = phi float [ %mul129, %if.then ], [ 0.000000e+00, %for.body39 ]
  %rinv5a.0 = phi float [ %mul102, %if.then ], [ 0.000000e+00, %for.body39 ]
  %cmp164 = fcmp ogt float %20, 0.000000e+00
  %cmp167 = fcmp ogt float %22, 0.000000e+00
  %or.cond613 = or i1 %cmp164, %cmp167
  br i1 %or.cond613, label %if.then169, label %if.end244

if.then169:                                       ; preds = %if.end
  %add172 = fadd float %mul171, %mul86
  %conv173 = fpext float %add172 to double
  %call174 = tail call double @pow(double %conv173, double 0x3FC5555560000000) #2
  %conv175 = fptrunc double %call174 to float
  %conv178 = fdiv float 1.000000e+00, %conv175
  %mul179 = fmul float %conv178, %conv178
  %mul180 = fmul float %mul179, %mul179
  %mul181 = fmul float %conv178, %mul180
  %mul182 = fmul float %conv175, %tabscale
  %conv183 = fptosi float %mul182 to i32
  %conv184 = sitofp i32 %conv183 to float
  %sub185 = fsub float %mul182, %conv184
  %mul186 = fmul float %sub185, %sub185
  %mul187 = shl nsw i32 %conv183, 3
  %idxprom188 = sext i32 %mul187 to i64
  %arrayidx189 = getelementptr inbounds float* %VFtab, i64 %idxprom188
  %33 = load float* %arrayidx189, align 4, !tbaa !3
  %add190599 = or i32 %mul187, 1
  %idxprom191 = sext i32 %add190599 to i64
  %arrayidx192 = getelementptr inbounds float* %VFtab, i64 %idxprom191
  %34 = load float* %arrayidx192, align 4, !tbaa !3
  %add193600 = or i32 %mul187, 2
  %idxprom194 = sext i32 %add193600 to i64
  %arrayidx195 = getelementptr inbounds float* %VFtab, i64 %idxprom194
  %35 = load float* %arrayidx195, align 4, !tbaa !3
  %mul196 = fmul float %35, %sub185
  %add197601 = or i32 %mul187, 3
  %idxprom198 = sext i32 %add197601 to i64
  %arrayidx199 = getelementptr inbounds float* %VFtab, i64 %idxprom198
  %36 = load float* %arrayidx199, align 4, !tbaa !3
  %mul200 = fmul float %36, %mul186
  %add201 = fadd float %34, %mul196
  %add202 = fadd float %add201, %mul200
  %mul203 = fmul float %sub185, %add202
  %add204 = fadd float %33, %mul203
  %add205 = fadd float %mul196, %add202
  %mul206 = fmul float %mul200, 2.000000e+00
  %add207 = fadd float %mul206, %add205
  %mul208 = fmul float %20, %add204
  %mul209 = fmul float %20, %tabscale
  %mul210 = fmul float %mul209, %add207
  %mul211 = fmul float %24, %conv175
  %mul212 = fmul float %mul211, %tabscale
  %conv213 = fptosi float %mul212 to i32
  %conv214 = sitofp i32 %conv213 to float
  %sub215 = fsub float %mul212, %conv214
  %mul216 = fmul float %sub215, %sub215
  %mul217 = shl nsw i32 %conv213, 3
  %add218602 = or i32 %mul217, 4
  %idxprom219 = sext i32 %add218602 to i64
  %arrayidx220 = getelementptr inbounds float* %VFtab, i64 %idxprom219
  %37 = load float* %arrayidx220, align 4, !tbaa !3
  %add221603 = or i32 %mul217, 5
  %idxprom222 = sext i32 %add221603 to i64
  %arrayidx223 = getelementptr inbounds float* %VFtab, i64 %idxprom222
  %38 = load float* %arrayidx223, align 4, !tbaa !3
  %add224604 = or i32 %mul217, 6
  %idxprom225 = sext i32 %add224604 to i64
  %arrayidx226 = getelementptr inbounds float* %VFtab, i64 %idxprom225
  %39 = load float* %arrayidx226, align 4, !tbaa !3
  %mul227 = fmul float %sub215, %39
  %add228605 = or i32 %mul217, 7
  %idxprom229 = sext i32 %add228605 to i64
  %arrayidx230 = getelementptr inbounds float* %VFtab, i64 %idxprom229
  %40 = load float* %arrayidx230, align 4, !tbaa !3
  %mul231 = fmul float %mul216, %40
  %add232 = fadd float %38, %mul227
  %add233 = fadd float %add232, %mul231
  %mul234 = fmul float %sub215, %add233
  %add235 = fadd float %37, %mul234
  %add236 = fadd float %mul227, %add233
  %mul237 = fmul float %mul231, 2.000000e+00
  %add238 = fadd float %mul237, %add236
  %mul239 = fmul float %22, %add235
  %mul240 = fmul float %22, %24
  %mul241 = fmul float %mul240, %exptabscale
  %mul242 = fmul float %mul241, %add238
  br label %if.end244

if.end244:                                        ; preds = %if.end, %if.then169
  %FFRb.0 = phi float [ %mul242, %if.then169 ], [ 0.000000e+00, %if.end ]
  %VVRb.0 = phi float [ %mul239, %if.then169 ], [ 0.000000e+00, %if.end ]
  %FFDb.0 = phi float [ %mul210, %if.then169 ], [ 0.000000e+00, %if.end ]
  %VVDb.0 = phi float [ %mul208, %if.then169 ], [ 0.000000e+00, %if.end ]
  %rinv5b.0 = phi float [ %mul181, %if.then169 ], [ 0.000000e+00, %if.end ]
  %add245 = fadd float %VVRb.0, %VVDb.0
  %mul246 = fmul float %add245, %lambda
  %add247 = fadd float %vnbtot.0615, %mul246
  %add248 = fadd float %VVRa.0, %VVDa.0
  %mul249 = fmul float %sub, %add248
  %add250 = fadd float %mul249, %add247
  %add251 = fadd float %FFRa.0, %FFDa.0
  %sub252 = fsub float -0.000000e+00, %add251
  %add253 = fadd float %FFRb.0, %FFDb.0
  %sub254 = fsub float -0.000000e+00, %add253
  %mul255 = fmul float %sub, %sub252
  %mul256 = fmul float %rinv5a.0, %mul255
  %mul257 = fmul float %lambda, %sub254
  %mul258 = fmul float %rinv5b.0, %mul257
  %add259 = fadd float %mul256, %mul258
  %mul260 = fmul float %mul85, %add259
  %add261 = fadd float %dvdl.1616, %VVDb.0
  %add262 = fadd float %VVRb.0, %add261
  %sub263 = fsub float %add262, %VVDa.0
  %sub264 = fsub float %sub263, %VVRa.0
  %mul268 = fmul float %defsigma6, %sub254
  %mul269 = fmul float %rinv5b.0, %mul268
  %mul270 = fmul float %defsigma6, %sub252
  %mul271 = fmul float %rinv5a.0, %mul270
  %sub272 = fsub float %mul269, %mul271
  %mul273 = fmul float %mul267, %sub272
  %add274 = fadd float %sub264, %mul273
  %mul275 = fmul float %sub51, %mul260
  %mul276 = fmul float %sub52, %mul260
  %mul277 = fmul float %sub53, %mul260
  %add278 = fadd float %fix1.0617, %mul275
  %add279 = fadd float %fiy1.0618, %mul276
  %add280 = fadd float %fiz1.0619, %mul277
  %arrayidx282 = getelementptr inbounds float* %faction, i64 %idxprom43
  %41 = load float* %arrayidx282, align 4, !tbaa !3
  %sub283 = fsub float %41, %mul275
  store float %sub283, float* %arrayidx282, align 4, !tbaa !3
  %arrayidx288 = getelementptr inbounds float* %faction, i64 %idxprom46
  %42 = load float* %arrayidx288, align 4, !tbaa !3
  %sub289 = fsub float %42, %mul276
  store float %sub289, float* %arrayidx288, align 4, !tbaa !3
  %arrayidx295 = getelementptr inbounds float* %faction, i64 %idxprom49
  %43 = load float* %arrayidx295, align 4, !tbaa !3
  %sub296 = fsub float %43, %mul277
  store float %sub296, float* %arrayidx295, align 4, !tbaa !3
  %indvars.iv.next = add i64 %indvars.iv, 1
  %44 = trunc i64 %indvars.iv.next to i32
  %cmp38 = icmp slt i32 %44, %6
  br i1 %cmp38, label %for.body39, label %for.end

for.end:                                          ; preds = %if.end244, %for.body
  %fiz1.0.lcssa = phi float [ 0.000000e+00, %for.body ], [ %add280, %if.end244 ]
  %fiy1.0.lcssa = phi float [ 0.000000e+00, %for.body ], [ %add279, %if.end244 ]
  %fix1.0.lcssa = phi float [ 0.000000e+00, %for.body ], [ %add278, %if.end244 ]
  %dvdl.1.lcssa = phi float [ %dvdl.0626, %for.body ], [ %add274, %if.end244 ]
  %vnbtot.0.lcssa = phi float [ 0.000000e+00, %for.body ], [ %add250, %if.end244 ]
  %arrayidx301 = getelementptr inbounds float* %faction, i64 %idxprom18
  %45 = load float* %arrayidx301, align 4, !tbaa !3
  %add302 = fadd float %fix1.0.lcssa, %45
  store float %add302, float* %arrayidx301, align 4, !tbaa !3
  %arrayidx307 = getelementptr inbounds float* %faction, i64 %idxprom22
  %46 = load float* %arrayidx307, align 4, !tbaa !3
  %add308 = fadd float %fiy1.0.lcssa, %46
  store float %add308, float* %arrayidx307, align 4, !tbaa !3
  %arrayidx314 = getelementptr inbounds float* %faction, i64 %idxprom26
  %47 = load float* %arrayidx314, align 4, !tbaa !3
  %add315 = fadd float %fiz1.0.lcssa, %47
  store float %add315, float* %arrayidx314, align 4, !tbaa !3
  %arrayidx320 = getelementptr inbounds float* %fshift, i64 %idxprom3
  %48 = load float* %arrayidx320, align 4, !tbaa !3
  %add321 = fadd float %fix1.0.lcssa, %48
  store float %add321, float* %arrayidx320, align 4, !tbaa !3
  %arrayidx326 = getelementptr inbounds float* %fshift, i64 %idxprom5
  %49 = load float* %arrayidx326, align 4, !tbaa !3
  %add327 = fadd float %fiy1.0.lcssa, %49
  store float %add327, float* %arrayidx326, align 4, !tbaa !3
  %arrayidx333 = getelementptr inbounds float* %fshift, i64 %idxprom8
  %50 = load float* %arrayidx333, align 4, !tbaa !3
  %add334 = fadd float %fiz1.0.lcssa, %50
  store float %add334, float* %arrayidx333, align 4, !tbaa !3
  %arrayidx339 = getelementptr inbounds i32* %gid, i64 %indvars.iv629
  %51 = load i32* %arrayidx339, align 4, !tbaa !0
  %idxprom340 = sext i32 %51 to i64
  %arrayidx341 = getelementptr inbounds float* %Vnb, i64 %idxprom340
  %52 = load float* %arrayidx341, align 4, !tbaa !3
  %add342 = fadd float %vnbtot.0.lcssa, %52
  store float %add342, float* %arrayidx341, align 4, !tbaa !3
  %lftr.wideiv = trunc i64 %indvars.iv.next630 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %nri
  br i1 %exitcond, label %for.end347, label %for.body

for.end347:                                       ; preds = %for.end, %entry
  %dvdl.0.lcssa = phi float [ 0.000000e+00, %entry ], [ %dvdl.1.lcssa, %for.end ]
  %53 = load float* %dvdlambda, align 4, !tbaa !3
  %add348 = fadd float %dvdl.0.lcssa, %53
  store float %add348, float* %dvdlambda, align 4, !tbaa !3
  ret void
}
