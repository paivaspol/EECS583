define void @vecinvsqrt(float* nocapture %in, float* nocapture %out, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{float* %in}, i64 0, metadata !13), !dbg !23
  tail call void @llvm.dbg.value(metadata !{float* %out}, i64 0, metadata !14), !dbg !23
  tail call void @llvm.dbg.value(metadata !{i32 %n}, i64 0, metadata !15), !dbg !23
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !16), !dbg !24
  %cmp7 = icmp sgt i32 %n, 0, !dbg !24
  br i1 %cmp7, label %for.body, label %for.end, !dbg !24

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds float* %in, i64 %indvars.iv, !dbg !26
  %0 = load float* %arrayidx, align 4, !dbg !26, !tbaa !27
  %conv = fpext float %0 to double, !dbg !26
  %call = tail call double @sqrt(double %conv) #3, !dbg !26
  %div = fdiv double 1.000000e+00, %call, !dbg !26
  %conv1 = fptrunc double %div to float, !dbg !26
  %arrayidx3 = getelementptr inbounds float* %out, i64 %indvars.iv, !dbg !26
  store float %conv1, float* %arrayidx3, align 4, !dbg !26, !tbaa !27
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !24
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !24
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !24
  br i1 %exitcond, label %for.end, label %for.body, !dbg !24

for.end:                                          ; preds = %for.body, %entry
  ret void, !dbg !30
}
