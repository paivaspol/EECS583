define void @_blocktx(i32 %dest, i32 %nelem, i32 %size, i8* %data) #0 {
entry:
  %size.addr = alloca i32, align 4
  store i32 %size, i32* %size.addr, align 4, !tbaa !0
  %cmp = icmp eq i8* %data, null
  %cmp1 = icmp sgt i32 %size, 0
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then, label %for.cond.preheader

if.then:                                          ; preds = %entry
  call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([29 x i8]* @.str, i64 0, i64 0), i32 %size) #2
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.then, %entry
  %cmp210 = icmp sgt i32 %nelem, 0
  br i1 %cmp210, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %0 = bitcast i32* %size.addr to i8*
  br label %for.body

for.body:                                         ; preds = %if.end5, %for.body.lr.ph
  %buf.012 = phi i8* [ %data, %for.body.lr.ph ], [ %add.ptr, %if.end5 ]
  %i.011 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %if.end5 ]
  call void @gmx_txs(i32 %dest, i8* %0, i32 4) #2
  %1 = load i32* %size.addr, align 4, !tbaa !0
  %cmp3 = icmp sgt i32 %1, 0
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %for.body
  call void @gmx_txs(i32 %dest, i8* %buf.012, i32 %1) #2
  %.pre = load i32* %size.addr, align 4, !tbaa !0
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %for.body
  %2 = phi i32 [ %.pre, %if.then4 ], [ %1, %for.body ]
  %idx.ext = sext i32 %2 to i64
  %add.ptr = getelementptr inbounds i8* %buf.012, i64 %idx.ext
  %inc = add nsw i32 %i.011, 1
  %exitcond = icmp eq i32 %inc, %nelem
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %if.end5, %for.cond.preheader
  ret void
}
