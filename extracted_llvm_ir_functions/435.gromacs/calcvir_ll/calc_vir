define void @calc_vir(%struct.__sFILE* nocapture readnone %log, i32 %nxf, [3 x float]* nocapture readonly %x, [3 x float]* nocapture readonly %f, [3 x float]* nocapture %vir) #4 {
  %1 = icmp sgt i32 %nxf, 0
  br i1 %1, label %.lr.ph, label %51

.lr.ph:                                           ; preds = %0
  %2 = add i32 %nxf, -1
  br label %3

; <label>:3                                       ; preds = %3, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %3 ]
  %dvxx.02 = phi float [ 0.000000e+00, %.lr.ph ], [ %13, %3 ]
  %4 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %42, %3 ]
  %5 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %39, %3 ]
  %6 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %31, %3 ]
  %7 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %23, %3 ]
  %8 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 0
  %9 = load float* %8, align 4, !tbaa !14
  %10 = getelementptr inbounds [3 x float]* %f, i64 %indvars.iv, i64 0
  %11 = load float* %10, align 4, !tbaa !14
  %12 = fmul float %9, %11
  %13 = fadd float %dvxx.02, %12
  %14 = getelementptr inbounds [3 x float]* %f, i64 %indvars.iv, i64 1
  %15 = load float* %14, align 4, !tbaa !14
  %16 = getelementptr inbounds [3 x float]* %f, i64 %indvars.iv, i64 2
  %17 = load float* %16, align 4, !tbaa !14
  %18 = insertelement <2 x float> undef, float %9, i32 0
  %19 = insertelement <2 x float> %18, float %9, i32 1
  %20 = insertelement <2 x float> undef, float %17, i32 0
  %21 = insertelement <2 x float> %20, float %15, i32 1
  %22 = fmul <2 x float> %19, %21
  %23 = fadd <2 x float> %7, %22
  %24 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 1
  %25 = load float* %24, align 4, !tbaa !14
  %26 = insertelement <2 x float> undef, float %15, i32 0
  %27 = insertelement <2 x float> %26, float %11, i32 1
  %28 = insertelement <2 x float> undef, float %25, i32 0
  %29 = insertelement <2 x float> %28, float %25, i32 1
  %30 = fmul <2 x float> %27, %29
  %31 = fadd <2 x float> %6, %30
  %32 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 2
  %33 = load float* %32, align 4, !tbaa !14
  %34 = insertelement <2 x float> undef, float %11, i32 0
  %35 = insertelement <2 x float> %34, float %17, i32 1
  %36 = insertelement <2 x float> undef, float %33, i32 0
  %37 = insertelement <2 x float> %36, float %25, i32 1
  %38 = fmul <2 x float> %35, %37
  %39 = fadd <2 x float> %5, %38
  %40 = insertelement <2 x float> %36, float %33, i32 1
  %41 = fmul <2 x float> %21, %40
  %42 = fadd <2 x float> %4, %41
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %2
  br i1 %exitcond, label %._crit_edge, label %3

._crit_edge:                                      ; preds = %3
  %phitmp = fpext float %13 to double
  %phitmp19 = fmul double %phitmp, 5.000000e-01
  %43 = fpext <2 x float> %23 to <2 x double>
  %44 = fmul <2 x double> %43, <double 5.000000e-01, double 5.000000e-01>
  %45 = fpext <2 x float> %31 to <2 x double>
  %46 = fmul <2 x double> %45, <double 5.000000e-01, double 5.000000e-01>
  %47 = fpext <2 x float> %39 to <2 x double>
  %48 = fmul <2 x double> %47, <double 5.000000e-01, double 5.000000e-01>
  %49 = fpext <2 x float> %42 to <2 x double>
  %50 = fmul <2 x double> %49, <double 5.000000e-01, double 5.000000e-01>
  br label %51

; <label>:51                                      ; preds = %._crit_edge, %0
  %dvxx.0.lcssa = phi double [ %phitmp19, %._crit_edge ], [ 0.000000e+00, %0 ]
  %52 = phi <2 x double> [ %50, %._crit_edge ], [ zeroinitializer, %0 ]
  %53 = phi <2 x double> [ %48, %._crit_edge ], [ zeroinitializer, %0 ]
  %54 = phi <2 x double> [ %46, %._crit_edge ], [ zeroinitializer, %0 ]
  %55 = phi <2 x double> [ %44, %._crit_edge ], [ zeroinitializer, %0 ]
  %56 = getelementptr inbounds [3 x float]* %vir, i64 0, i64 0
  %57 = load float* %56, align 4, !tbaa !14
  %58 = fpext float %57 to double
  %59 = fsub double %58, %dvxx.0.lcssa
  %60 = fptrunc double %59 to float
  store float %60, float* %56, align 4, !tbaa !14
  %61 = getelementptr inbounds [3 x float]* %vir, i64 0, i64 1
  %62 = load float* %61, align 4, !tbaa !14
  %63 = fpext float %62 to double
  %64 = extractelement <2 x double> %55, i32 1
  %65 = fsub double %63, %64
  %66 = fptrunc double %65 to float
  store float %66, float* %61, align 4, !tbaa !14
  %67 = getelementptr inbounds [3 x float]* %vir, i64 0, i64 2
  %68 = load float* %67, align 4, !tbaa !14
  %69 = fpext float %68 to double
  %70 = extractelement <2 x double> %55, i32 0
  %71 = fsub double %69, %70
  %72 = fptrunc double %71 to float
  store float %72, float* %67, align 4, !tbaa !14
  %73 = getelementptr inbounds [3 x float]* %vir, i64 1, i64 0
  %74 = load float* %73, align 4, !tbaa !14
  %75 = fpext float %74 to double
  %76 = extractelement <2 x double> %54, i32 1
  %77 = fsub double %75, %76
  %78 = fptrunc double %77 to float
  store float %78, float* %73, align 4, !tbaa !14
  %79 = getelementptr inbounds [3 x float]* %vir, i64 1, i64 1
  %80 = load float* %79, align 4, !tbaa !14
  %81 = fpext float %80 to double
  %82 = extractelement <2 x double> %54, i32 0
  %83 = fsub double %81, %82
  %84 = fptrunc double %83 to float
  store float %84, float* %79, align 4, !tbaa !14
  %85 = getelementptr inbounds [3 x float]* %vir, i64 1, i64 2
  %86 = load float* %85, align 4, !tbaa !14
  %87 = fpext float %86 to double
  %88 = extractelement <2 x double> %53, i32 1
  %89 = fsub double %87, %88
  %90 = fptrunc double %89 to float
  store float %90, float* %85, align 4, !tbaa !14
  %91 = getelementptr inbounds [3 x float]* %vir, i64 2, i64 0
  %92 = load float* %91, align 4, !tbaa !14
  %93 = fpext float %92 to double
  %94 = extractelement <2 x double> %53, i32 0
  %95 = fsub double %93, %94
  %96 = fptrunc double %95 to float
  store float %96, float* %91, align 4, !tbaa !14
  %97 = getelementptr inbounds [3 x float]* %vir, i64 2, i64 1
  %98 = load float* %97, align 4, !tbaa !14
  %99 = fpext float %98 to double
  %100 = extractelement <2 x double> %52, i32 1
  %101 = fsub double %99, %100
  %102 = fptrunc double %101 to float
  store float %102, float* %97, align 4, !tbaa !14
  %103 = getelementptr inbounds [3 x float]* %vir, i64 2, i64 2
  %104 = load float* %103, align 4, !tbaa !14
  %105 = fpext float %104 to double
  %106 = extractelement <2 x double> %52, i32 0
  %107 = fsub double %105, %106
  %108 = fptrunc double %107 to float
  store float %108, float* %103, align 4, !tbaa !14
  ret void
}
