define void @f_calc_vir(%struct.__sFILE* nocapture readnone %log, i32 %i0, i32 %i1, [3 x float]* nocapture readonly %x, [3 x float]* nocapture readonly %f, [3 x float]* nocapture %vir, %struct.t_graph* nocapture readonly %g, [3 x float]* nocapture readonly %box) #4 {
  %1 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 1
  %2 = load i32* %1, align 4, !tbaa !18
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %4, label %215

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %6 = load i32* %5, align 4, !tbaa !20
  %7 = icmp slt i32 %6, %i0
  %i0. = select i1 %7, i32 %i0, i32 %6
  %8 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 4
  %9 = load i32* %8, align 4, !tbaa !21
  %10 = icmp slt i32 %9, %i1
  %11 = add nsw i32 %9, 1
  %12 = select i1 %10, i32 %11, i32 %i1
  %13 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %14 = load [3 x i32]** %13, align 8, !tbaa !22
  %15 = getelementptr inbounds [3 x float]* %box, i64 0, i64 0
  %16 = getelementptr inbounds [3 x float]* %box, i64 1, i64 0
  %17 = load float* %16, align 4, !tbaa !14
  %fabsf = tail call float @fabsf(float %17) #7
  %18 = fpext float %fabsf to double
  %19 = fcmp ogt double %18, 1.200000e-38
  br i1 %19, label %.thread, label %20

; <label>:20                                      ; preds = %4
  %21 = getelementptr inbounds [3 x float]* %box, i64 2, i64 0
  %22 = load float* %21, align 4, !tbaa !14
  %fabsf1 = tail call float @fabsf(float %22) #7
  %23 = fpext float %fabsf1 to double
  %24 = fcmp ogt double %23, 1.200000e-38
  br i1 %24, label %.thread, label %26

.thread:                                          ; preds = %20, %4
  %25 = icmp slt i32 %i0., %12
  br i1 %25, label %.lr.ph33.i, label %lo_fcv.exit

; <label>:26                                      ; preds = %20
  %27 = getelementptr inbounds [3 x float]* %box, i64 2, i64 1
  %28 = load float* %27, align 4, !tbaa !14
  %fabsf2 = tail call float @fabsf(float %28) #7
  %29 = fpext float %fabsf2 to double
  %30 = fcmp ogt double %29, 1.200000e-38
  %31 = icmp slt i32 %i0., %12
  br i1 %30, label %.preheader1.i, label %.preheader.i

.preheader1.i:                                    ; preds = %26
  br i1 %31, label %.lr.ph33.i, label %lo_fcv.exit

.lr.ph33.i:                                       ; preds = %.thread, %.preheader1.i
  %32 = load float* %15, align 4, !tbaa !14
  %33 = getelementptr inbounds [3 x float]* %box, i64 0, i64 6
  %34 = load float* %33, align 4, !tbaa !14
  %35 = getelementptr inbounds [3 x float]* %box, i64 0, i64 4
  %36 = load float* %35, align 4, !tbaa !14
  %37 = getelementptr inbounds [3 x float]* %box, i64 0, i64 7
  %38 = load float* %37, align 4, !tbaa !14
  %39 = getelementptr inbounds [3 x float]* %box, i64 0, i64 8
  %40 = load float* %39, align 4, !tbaa !14
  %41 = sext i32 %i0. to i64
  %42 = add i32 %12, -1
  %43 = icmp sgt i32 %6, %i0
  %smax = select i1 %43, i32 %6, i32 %i0
  %44 = sub i32 %42, %smax
  br label %54

.preheader.i:                                     ; preds = %26
  br i1 %31, label %.lr.ph.i, label %lo_fcv.exit

.lr.ph.i:                                         ; preds = %.preheader.i
  %45 = load float* %15, align 4, !tbaa !14
  %46 = getelementptr inbounds [3 x float]* %box, i64 0, i64 4
  %47 = load float* %46, align 4, !tbaa !14
  %48 = getelementptr inbounds [3 x float]* %box, i64 0, i64 8
  %49 = load float* %48, align 4, !tbaa !14
  %50 = sext i32 %i0. to i64
  %51 = add i32 %12, -1
  %52 = icmp sgt i32 %6, %i0
  %smax38 = select i1 %52, i32 %6, i32 %i0
  %53 = sub i32 %51, %smax38
  br label %118

; <label>:54                                      ; preds = %54, %.lr.ph33.i
  %indvars.iv64.i = phi i64 [ %41, %.lr.ph33.i ], [ %indvars.iv.next65.i, %54 ]
  %indvars.iv62.i = phi i64 [ 0, %.lr.ph33.i ], [ %indvars.iv.next63.i, %54 ]
  %dvzz.032.i = phi float [ 0.000000e+00, %.lr.ph33.i ], [ %117, %54 ]
  %55 = phi <4 x float> [ zeroinitializer, %.lr.ph33.i ], [ %101, %54 ]
  %56 = phi <4 x float> [ zeroinitializer, %.lr.ph33.i ], [ %115, %54 ]
  %57 = mul nsw i64 %indvars.iv64.i, 3
  %58 = mul nsw i64 %indvars.iv62.i, 3
  %59 = getelementptr inbounds [3 x i32]* %14, i64 0, i64 %58
  %60 = load i32* %59, align 4, !tbaa !23
  %61 = add nuw nsw i64 %58, 1
  %62 = getelementptr inbounds [3 x i32]* %14, i64 0, i64 %61
  %63 = load i32* %62, align 4, !tbaa !23
  %64 = add nuw nsw i64 %58, 2
  %65 = getelementptr inbounds [3 x i32]* %14, i64 0, i64 %64
  %66 = load i32* %65, align 4, !tbaa !23
  %67 = getelementptr inbounds [3 x float]* %x, i64 0, i64 %57
  %68 = load float* %67, align 4, !tbaa !14
  %69 = sitofp i32 %60 to float
  %70 = fmul float %32, %69
  %71 = fsub float %68, %70
  %72 = sitofp i32 %63 to float
  %73 = fmul float %17, %72
  %74 = fsub float %71, %73
  %75 = sitofp i32 %66 to float
  %76 = fmul float %34, %75
  %77 = fsub float %74, %76
  %78 = getelementptr inbounds [3 x float]* %f, i64 0, i64 %57
  %79 = load float* %78, align 4, !tbaa !14
  %80 = add nsw i64 %57, 1
  %81 = getelementptr inbounds [3 x float]* %f, i64 0, i64 %80
  %82 = load float* %81, align 4, !tbaa !14
  %83 = add nsw i64 %57, 2
  %84 = getelementptr inbounds [3 x float]* %f, i64 0, i64 %83
  %85 = load float* %84, align 4, !tbaa !14
  %86 = getelementptr inbounds [3 x float]* %x, i64 0, i64 %80
  %87 = load float* %86, align 4, !tbaa !14
  %88 = fmul float %36, %72
  %89 = fsub float %87, %88
  %90 = fmul float %38, %75
  %91 = fsub float %89, %90
  %92 = insertelement <4 x float> undef, float %77, i32 0
  %93 = insertelement <4 x float> %92, float %77, i32 1
  %94 = insertelement <4 x float> %93, float %77, i32 2
  %95 = insertelement <4 x float> %94, float %91, i32 3
  %96 = insertelement <4 x float> undef, float %79, i32 0
  %97 = insertelement <4 x float> %96, float %82, i32 1
  %98 = insertelement <4 x float> %97, float %85, i32 2
  %99 = insertelement <4 x float> %98, float %79, i32 3
  %100 = fmul <4 x float> %95, %99
  %101 = fadd <4 x float> %55, %100
  %102 = getelementptr inbounds [3 x float]* %x, i64 0, i64 %83
  %103 = load float* %102, align 4, !tbaa !14
  %104 = fmul float %40, %75
  %105 = fsub float %103, %104
  %106 = insertelement <4 x float> undef, float %82, i32 0
  %107 = insertelement <4 x float> %106, float %85, i32 1
  %108 = insertelement <4 x float> %107, float %79, i32 2
  %109 = insertelement <4 x float> %108, float %82, i32 3
  %110 = insertelement <4 x float> undef, float %91, i32 0
  %111 = insertelement <4 x float> %110, float %91, i32 1
  %112 = insertelement <4 x float> %111, float %105, i32 2
  %113 = insertelement <4 x float> %112, float %105, i32 3
  %114 = fmul <4 x float> %109, %113
  %115 = fadd <4 x float> %56, %114
  %116 = fmul float %85, %105
  %117 = fadd float %dvzz.032.i, %116
  %indvars.iv.next65.i = add nsw i64 %indvars.iv64.i, 1
  %indvars.iv.next63.i = add nuw nsw i64 %indvars.iv62.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv62.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %44
  br i1 %exitcond, label %lo_fcv.exit, label %54

; <label>:118                                     ; preds = %118, %.lr.ph.i
  %indvars.iv60.i = phi i64 [ %50, %.lr.ph.i ], [ %indvars.iv.next61.i, %118 ]
  %indvars.iv.i = phi i64 [ 0, %.lr.ph.i ], [ %indvars.iv.next.i, %118 ]
  %dvzz.113.i = phi float [ 0.000000e+00, %.lr.ph.i ], [ %175, %118 ]
  %119 = phi <4 x float> [ zeroinitializer, %.lr.ph.i ], [ %158, %118 ]
  %120 = phi <4 x float> [ zeroinitializer, %.lr.ph.i ], [ %173, %118 ]
  %121 = mul nsw i64 %indvars.iv60.i, 3
  %122 = mul nsw i64 %indvars.iv.i, 3
  %123 = getelementptr inbounds [3 x i32]* %14, i64 0, i64 %122
  %124 = load i32* %123, align 4, !tbaa !23
  %125 = add nuw nsw i64 %122, 1
  %126 = getelementptr inbounds [3 x i32]* %14, i64 0, i64 %125
  %127 = load i32* %126, align 4, !tbaa !23
  %128 = add nuw nsw i64 %122, 2
  %129 = getelementptr inbounds [3 x i32]* %14, i64 0, i64 %128
  %130 = load i32* %129, align 4, !tbaa !23
  %131 = getelementptr inbounds [3 x float]* %x, i64 0, i64 %121
  %132 = load float* %131, align 4, !tbaa !14
  %133 = sitofp i32 %124 to float
  %134 = fmul float %45, %133
  %135 = fsub float %132, %134
  %136 = getelementptr inbounds [3 x float]* %f, i64 0, i64 %121
  %137 = load float* %136, align 4, !tbaa !14
  %138 = add nsw i64 %121, 1
  %139 = getelementptr inbounds [3 x float]* %f, i64 0, i64 %138
  %140 = load float* %139, align 4, !tbaa !14
  %141 = add nsw i64 %121, 2
  %142 = getelementptr inbounds [3 x float]* %f, i64 0, i64 %141
  %143 = load float* %142, align 4, !tbaa !14
  %144 = getelementptr inbounds [3 x float]* %x, i64 0, i64 %138
  %145 = load float* %144, align 4, !tbaa !14
  %146 = sitofp i32 %127 to float
  %147 = fmul float %47, %146
  %148 = fsub float %145, %147
  %149 = insertelement <4 x float> undef, float %135, i32 0
  %150 = insertelement <4 x float> %149, float %135, i32 1
  %151 = insertelement <4 x float> %150, float %135, i32 2
  %152 = insertelement <4 x float> %151, float %148, i32 3
  %153 = insertelement <4 x float> undef, float %137, i32 0
  %154 = insertelement <4 x float> %153, float %140, i32 1
  %155 = insertelement <4 x float> %154, float %143, i32 2
  %156 = insertelement <4 x float> %155, float %137, i32 3
  %157 = fmul <4 x float> %152, %156
  %158 = fadd <4 x float> %119, %157
  %159 = getelementptr inbounds [3 x float]* %x, i64 0, i64 %141
  %160 = load float* %159, align 4, !tbaa !14
  %161 = sitofp i32 %130 to float
  %162 = fmul float %49, %161
  %163 = fsub float %160, %162
  %164 = insertelement <4 x float> undef, float %140, i32 0
  %165 = insertelement <4 x float> %164, float %143, i32 1
  %166 = insertelement <4 x float> %165, float %137, i32 2
  %167 = insertelement <4 x float> %166, float %140, i32 3
  %168 = insertelement <4 x float> undef, float %148, i32 0
  %169 = insertelement <4 x float> %168, float %148, i32 1
  %170 = insertelement <4 x float> %169, float %163, i32 2
  %171 = insertelement <4 x float> %170, float %163, i32 3
  %172 = fmul <4 x float> %167, %171
  %173 = fadd <4 x float> %120, %172
  %174 = fmul float %143, %163
  %175 = fadd float %dvzz.113.i, %174
  %indvars.iv.next61.i = add nsw i64 %indvars.iv60.i, 1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %lftr.wideiv39 = trunc i64 %indvars.iv.i to i32
  %exitcond40 = icmp eq i32 %lftr.wideiv39, %53
  br i1 %exitcond40, label %lo_fcv.exit, label %118

lo_fcv.exit:                                      ; preds = %118, %54, %.thread, %.preheader1.i, %.preheader.i
  %dvzz.2.i = phi float [ 0.000000e+00, %.preheader.i ], [ 0.000000e+00, %.preheader1.i ], [ 0.000000e+00, %.thread ], [ %117, %54 ], [ %175, %118 ]
  %176 = phi <4 x float> [ zeroinitializer, %.preheader.i ], [ zeroinitializer, %.preheader1.i ], [ zeroinitializer, %.thread ], [ %101, %54 ], [ %158, %118 ]
  %177 = phi <4 x float> [ zeroinitializer, %.preheader.i ], [ zeroinitializer, %.preheader1.i ], [ zeroinitializer, %.thread ], [ %115, %54 ], [ %173, %118 ]
  %178 = fpext <4 x float> %176 to <4 x double>
  %179 = fmul <4 x double> %178, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %180 = bitcast [3 x float]* %vir to <4 x float>*
  %181 = load <4 x float>* %180, align 4, !tbaa !14
  %182 = fpext <4 x float> %181 to <4 x double>
  %183 = fsub <4 x double> %182, %179
  %184 = fptrunc <4 x double> %183 to <4 x float>
  %185 = bitcast [3 x float]* %vir to <4 x float>*
  store <4 x float> %184, <4 x float>* %185, align 4, !tbaa !14
  %186 = getelementptr inbounds [3 x float]* %vir, i64 1, i64 1
  %187 = fpext <4 x float> %177 to <4 x double>
  %188 = fmul <4 x double> %187, <double 5.000000e-01, double 5.000000e-01, double 5.000000e-01, double 5.000000e-01>
  %189 = bitcast float* %186 to <4 x float>*
  %190 = load <4 x float>* %189, align 4, !tbaa !14
  %191 = fpext <4 x float> %190 to <4 x double>
  %192 = fsub <4 x double> %191, %188
  %193 = fptrunc <4 x double> %192 to <4 x float>
  %194 = bitcast float* %186 to <4 x float>*
  store <4 x float> %193, <4 x float>* %194, align 4, !tbaa !14
  %195 = fpext float %dvzz.2.i to double
  %196 = fmul double %195, 5.000000e-01
  %197 = getelementptr inbounds [3 x float]* %vir, i64 2, i64 2
  %198 = load float* %197, align 4, !tbaa !14
  %199 = fpext float %198 to double
  %200 = fsub double %199, %196
  %201 = fptrunc double %200 to float
  store float %201, float* %197, align 4, !tbaa !14
  %202 = icmp sgt i32 %i0., %i0
  br i1 %202, label %203, label %208

; <label>:203                                     ; preds = %lo_fcv.exit
  %204 = sub nsw i32 %i0., %i0
  %205 = sext i32 %i0 to i64
  %206 = getelementptr inbounds [3 x float]* %x, i64 %205
  %207 = getelementptr inbounds [3 x float]* %f, i64 %205
  tail call void @calc_vir(%struct.__sFILE* undef, i32 %204, [3 x float]* %206, [3 x float]* %207, [3 x float]* %vir) #8
  br label %208

; <label>:208                                     ; preds = %203, %lo_fcv.exit
  %209 = icmp slt i32 %12, %i1
  br i1 %209, label %210, label %220

; <label>:210                                     ; preds = %208
  %211 = sub nsw i32 %i1, %12
  %212 = sext i32 %12 to i64
  %213 = getelementptr inbounds [3 x float]* %x, i64 %212
  %214 = getelementptr inbounds [3 x float]* %f, i64 %212
  tail call void @calc_vir(%struct.__sFILE* undef, i32 %211, [3 x float]* %213, [3 x float]* %214, [3 x float]* %vir) #8
  br label %220

; <label>:215                                     ; preds = %0
  %216 = sub nsw i32 %i1, %i0
  %217 = sext i32 %i0 to i64
  %218 = getelementptr inbounds [3 x float]* %x, i64 %217
  %219 = getelementptr inbounds [3 x float]* %f, i64 %217
  tail call void @calc_vir(%struct.__sFILE* undef, i32 %216, [3 x float]* %218, [3 x float]* %219, [3 x float]* %vir) #8
  br label %220

; <label>:220                                     ; preds = %208, %210, %215
  ret void
}
