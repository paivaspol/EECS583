define internal fastcc float @gather_f(%struct.__sFILE* nocapture %log, i32 %start, i32 %nr, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %f, float* nocapture readonly %charge, float* nocapture readonly %box, float* nocapture %pot, %struct.t_fftgrid* %grid, float* nocapture readonly %beta, %struct.t_nrnb* nocapture %nrnb) #1 {
  %ixyz = alloca [3 x i32], align 4
  %invh = alloca [3 x float], align 4
  %c1 = alloca [3 x float], align 4
  %c2 = alloca [3 x float], align 4
  %WXYZ = alloca [27 x float], align 16
  %ixw = alloca [7 x i32], align 16
  %iyw = alloca [7 x i32], align 16
  %izw = alloca [7 x i32], align 16
  %nx = alloca i32, align 4
  %ny = alloca i32, align 4
  %nz = alloca i32, align 4
  %la2 = alloca i32, align 4
  %la12 = alloca i32, align 4
  %ptr = alloca float*, align 8
  %1 = bitcast [27 x float]* %WXYZ to i8*
  call void @llvm.lifetime.start(i64 108, i8* %1) #2
  call void @unpack_fftgrid(%struct.t_fftgrid* %grid, i32* %nx, i32* %ny, i32* %nz, i32* %la2, i32* %la12, i32 1, float** %ptr) #6
  %2 = load i32* %nx, align 4, !tbaa !6
  %3 = load i32* %ny, align 4, !tbaa !6
  %4 = load i32* %nz, align 4, !tbaa !6
  %5 = getelementptr inbounds [3 x float]* %invh, i64 0, i64 0
  %6 = sitofp i32 %2 to float
  %7 = load float* %box, align 4, !tbaa !2
  %8 = fdiv float %6, %7
  store float %8, float* %5, align 4, !tbaa !2
  %9 = sitofp i32 %3 to float
  %10 = getelementptr inbounds float* %box, i64 1
  %11 = load float* %10, align 4, !tbaa !2
  %12 = fdiv float %9, %11
  %13 = getelementptr inbounds [3 x float]* %invh, i64 0, i64 1
  store float %12, float* %13, align 4, !tbaa !2
  %14 = sitofp i32 %4 to float
  %15 = getelementptr inbounds float* %box, i64 2
  %16 = load float* %15, align 4, !tbaa !2
  %17 = fdiv float %14, %16
  %18 = getelementptr inbounds [3 x float]* %invh, i64 0, i64 2
  store float %17, float* %18, align 4, !tbaa !2
  br label %19

; <label>:19                                      ; preds = %._crit_edge22, %0
  %20 = phi float [ %8, %0 ], [ %.pre, %._crit_edge22 ]
  %indvars.iv19 = phi i64 [ 0, %0 ], [ %indvars.iv.next20, %._crit_edge22 ]
  %21 = getelementptr inbounds float* %beta, i64 %indvars.iv19
  %22 = load float* %21, align 4, !tbaa !2
  %23 = fpext float %22 to double
  %24 = fmul double %23, 5.000000e-01
  %25 = fpext float %20 to double
  %26 = fmul double %24, %25
  %27 = fptrunc double %26 to float
  %28 = getelementptr inbounds [3 x float]* %c1, i64 0, i64 %indvars.iv19
  store float %27, float* %28, align 4, !tbaa !2
  %29 = fsub double 1.000000e+00, %23
  %30 = fmul double %29, 2.500000e-01
  %31 = fmul double %25, %30
  %32 = fptrunc double %31 to float
  %33 = getelementptr inbounds [3 x float]* %c2, i64 0, i64 %indvars.iv19
  store float %32, float* %33, align 4, !tbaa !2
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %exitcond21 = icmp eq i64 %indvars.iv.next20, 3
  br i1 %exitcond21, label %34, label %._crit_edge22

._crit_edge22:                                    ; preds = %19
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %invh, i64 0, i64 %indvars.iv.next20
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !2
  br label %19

; <label>:34                                      ; preds = %19
  %ixw6 = bitcast [7 x i32]* %ixw to i8*
  %iyw9 = bitcast [7 x i32]* %iyw to i8*
  %izw13 = bitcast [7 x i32]* %izw to i8*
  %35 = getelementptr inbounds [3 x float]* %c1, i64 0, i64 0
  %36 = load float* %35, align 4, !tbaa !2
  %37 = getelementptr inbounds [3 x float]* %c1, i64 0, i64 1
  %38 = load float* %37, align 4, !tbaa !2
  %39 = getelementptr inbounds [3 x float]* %c1, i64 0, i64 2
  %40 = load float* %39, align 4, !tbaa !2
  %41 = getelementptr inbounds [3 x float]* %c2, i64 0, i64 0
  %42 = load float* %41, align 4, !tbaa !2
  %43 = getelementptr inbounds [3 x float]* %c2, i64 0, i64 1
  %44 = load float* %43, align 4, !tbaa !2
  %45 = getelementptr inbounds [3 x float]* %c2, i64 0, i64 2
  %46 = load float* %45, align 4, !tbaa !2
  %.b = load i1* @gather_f.bFirst, align 1
  br i1 %.b, label %.preheader, label %47

; <label>:47                                      ; preds = %34
  %48 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %log, i8* getelementptr inbounds ([57 x i8]* @.str24, i64 0, i64 0), i32 %2, i32 %3, i32 %4) #6
  %49 = load float* %beta, align 4, !tbaa !2
  %50 = fpext float %49 to double
  %51 = getelementptr inbounds float* %beta, i64 1
  %52 = load float* %51, align 4, !tbaa !2
  %53 = fpext float %52 to double
  %54 = getelementptr inbounds float* %beta, i64 2
  %55 = load float* %54, align 4, !tbaa !2
  %56 = fpext float %55 to double
  %57 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %log, i8* getelementptr inbounds ([23 x i8]* @.str25, i64 0, i64 0), double %50, double %53, double %56) #6
  %58 = fpext float %36 to double
  %59 = fpext float %38 to double
  %60 = fpext float %40 to double
  %61 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %log, i8* getelementptr inbounds ([23 x i8]* @.str26, i64 0, i64 0), double %58, double %59, double %60) #6
  %62 = fpext float %42 to double
  %63 = fpext float %44 to double
  %64 = fpext float %46 to double
  %65 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %log, i8* getelementptr inbounds ([23 x i8]* @.str27, i64 0, i64 0), double %62, double %63, double %64) #6
  %66 = fpext float %8 to double
  %67 = fpext float %12 to double
  %68 = fpext float %17 to double
  %69 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %log, i8* getelementptr inbounds ([23 x i8]* @.str2, i64 0, i64 0), double %66, double %67, double %68) #6
  %70 = load i32* %nx, align 4, !tbaa !6
  %71 = load i32* %ny, align 4, !tbaa !6
  %72 = load i32* %nz, align 4, !tbaa !6
  call fastcc void @calc_nxyz(i32 %70, i32 %71, i32 %72, i32** @gather_f.nnx, i32** @gather_f.nny, i32** @gather_f.nnz) #7
  br label %73

; <label>:73                                      ; preds = %73, %47
  %indvars.iv17 = phi i64 [ 0, %47 ], [ %indvars.iv.next18, %73 ]
  %74 = trunc i64 %indvars.iv17 to i32
  %75 = sdiv i32 %74, 9
  %76 = add nsw i32 %75, 2
  %77 = mul nsw i64 %indvars.iv17, 3
  %78 = getelementptr inbounds [81 x i32]* @gather_f.JCXYZ, i64 0, i64 %77
  store i32 %76, i32* %78, align 4, !tbaa !6
  %79 = sdiv i32 %74, 3
  %80 = srem i32 %79, 3
  %81 = add nsw i32 %80, 2
  %82 = add nuw nsw i64 %77, 1
  %83 = getelementptr inbounds [81 x i32]* @gather_f.JCXYZ, i64 0, i64 %82
  store i32 %81, i32* %83, align 4, !tbaa !6
  %84 = srem i32 %74, 3
  %85 = add nsw i32 %84, 2
  %86 = add nuw nsw i64 %77, 2
  %87 = getelementptr inbounds [81 x i32]* @gather_f.JCXYZ, i64 0, i64 %86
  store i32 %85, i32* %87, align 4, !tbaa !6
  %indvars.iv.next18 = add nuw nsw i64 %indvars.iv17, 1
  %exitcond = icmp eq i64 %indvars.iv.next18, 27
  br i1 %exitcond, label %88, label %73

; <label>:88                                      ; preds = %73
  store i1 true, i1* @gather_f.bFirst, align 1
  br label %.preheader

.preheader:                                       ; preds = %34, %88
  %89 = icmp sgt i32 %nr, 0
  br i1 %89, label %.lr.ph, label %135

.lr.ph:                                           ; preds = %.preheader
  %90 = add nsw i32 %nr, %start
  %91 = getelementptr inbounds [3 x i32]* %ixyz, i64 0, i64 0
  %92 = getelementptr inbounds [27 x float]* %WXYZ, i64 0, i64 0
  %93 = getelementptr inbounds [3 x i32]* %ixyz, i64 0, i64 1
  %94 = getelementptr inbounds [3 x i32]* %ixyz, i64 0, i64 2
  %95 = getelementptr inbounds [7 x i32]* %ixw, i64 0, i64 0
  %96 = getelementptr inbounds [7 x i32]* %iyw, i64 0, i64 0
  %97 = getelementptr inbounds [7 x i32]* %izw, i64 0, i64 0
  %98 = sext i32 %start to i64
  %99 = sext i32 %90 to i64
  br label %100

; <label>:100                                     ; preds = %.lr.ph, %100
  %indvars.iv = phi i64 [ %98, %.lr.ph ], [ %indvars.iv.next, %100 ]
  %energy.02 = phi float [ 0.000000e+00, %.lr.ph ], [ %132, %100 ]
  %101 = load i32* %nx, align 4, !tbaa !6
  %102 = load i32* %ny, align 4, !tbaa !6
  %103 = load i32* %nz, align 4, !tbaa !6
  %104 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 0
  %105 = trunc i64 %indvars.iv to i32
  call void @calc_weights(i32 %105, i32 %101, i32 %102, i32 %103, float* %104, float* undef, float* %5, i32* %91, float* %92) #7
  %106 = load i32* %91, align 4, !tbaa !6
  %107 = load i32* %nx, align 4, !tbaa !6
  %108 = load i32** @gather_f.nnx, align 8, !tbaa !8
  %109 = load i32* %93, align 4, !tbaa !6
  %110 = load i32* %ny, align 4, !tbaa !6
  %111 = load i32** @gather_f.nny, align 8, !tbaa !8
  %112 = load i32* %94, align 4, !tbaa !6
  %113 = load i32* %nz, align 4, !tbaa !6
  %114 = load i32** @gather_f.nnz, align 8, !tbaa !8
  %115 = sext i32 %106 to i64
  %116 = sext i32 %107 to i64
  %117 = add nsw i64 %115, %116
  %scevgep.sum = add nsw i64 %117, -3
  %scevgep7 = getelementptr i32* %108, i64 %scevgep.sum
  %scevgep78 = bitcast i32* %scevgep7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %ixw6, i8* %scevgep78, i64 28, i32 4, i1 false)
  %118 = sext i32 %109 to i64
  %119 = sext i32 %110 to i64
  %120 = add nsw i64 %118, %119
  %scevgep10.sum = add nsw i64 %120, -3
  %scevgep11 = getelementptr i32* %111, i64 %scevgep10.sum
  %scevgep1112 = bitcast i32* %scevgep11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %iyw9, i8* %scevgep1112, i64 28, i32 4, i1 false)
  %121 = sext i32 %112 to i64
  %122 = sext i32 %113 to i64
  %123 = add nsw i64 %121, %122
  %scevgep14.sum = add nsw i64 %123, -3
  %scevgep15 = getelementptr i32* %114, i64 %scevgep14.sum
  %scevgep1516 = bitcast i32* %scevgep15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %izw13, i8* %scevgep1516, i64 28, i32 4, i1 false)
  %124 = getelementptr inbounds float* %charge, i64 %indvars.iv
  %125 = load float* %124, align 4, !tbaa !2
  %126 = load i32* %la2, align 4, !tbaa !6
  %127 = load i32* %la12, align 4, !tbaa !6
  %128 = getelementptr inbounds [3 x float]* %f, i64 %indvars.iv, i64 0
  %129 = load float** %ptr, align 8, !tbaa !8
  %130 = call float @gather_inner(i32* getelementptr inbounds ([81 x i32]* @gather_f.JCXYZ, i64 0, i64 0), float* %92, i32* %95, i32* %96, i32* %97, i32 %126, i32 %127, float %36, float %38, float %40, float %42, float %44, float %46, float %125, float* %128, float* %129) #7
  %131 = fmul float %125, %130
  %132 = fadd float %energy.02, %131
  %133 = getelementptr inbounds float* %pot, i64 %indvars.iv
  store float %130, float* %133, align 4, !tbaa !2
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %134 = icmp slt i64 %indvars.iv.next, %99
  br i1 %134, label %100, label %._crit_edge

._crit_edge:                                      ; preds = %100
  %phitmp = fmul float %132, 5.000000e-01
  br label %135

; <label>:135                                     ; preds = %._crit_edge, %.preheader
  %energy.0.lcssa = phi float [ %phitmp, %._crit_edge ], [ 0.000000e+00, %.preheader ]
  %136 = mul nsw i32 %nr, 27
  %137 = sitofp i32 %136 to double
  %138 = getelementptr inbounds %struct.t_nrnb* %nrnb, i64 0, i32 0, i64 82
  %139 = load double* %138, align 8, !tbaa !12
  %140 = fadd double %137, %139
  store double %140, double* %138, align 8, !tbaa !12
  %141 = mul nsw i32 %nr, 3
  %142 = sitofp i32 %141 to double
  %143 = getelementptr inbounds %struct.t_nrnb* %nrnb, i64 0, i32 0, i64 79
  %144 = load double* %143, align 8, !tbaa !12
  %145 = fadd double %142, %144
  store double %145, double* %143, align 8, !tbaa !12
  call void @llvm.lifetime.end(i64 108, i8* %1) #2
  ret float %energy.0.lcssa
}
