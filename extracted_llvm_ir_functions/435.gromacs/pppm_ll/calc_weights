define void @calc_weights(i32 %iatom, i32 %nx, i32 %ny, i32 %nz, float* nocapture readonly %x, float* nocapture readnone %box, float* nocapture readonly %invh, i32* nocapture %ixyz, float* nocapture %WXYZ) #1 {
  %wxyz = alloca [3 x [3 x float]], align 16
  %nxyz = alloca [3 x i32], align 4
  %1 = bitcast [3 x [3 x float]]* %wxyz to i8*
  call void @llvm.lifetime.start(i64 36, i8* %1) #2
  %2 = getelementptr inbounds [3 x i32]* %nxyz, i64 0, i64 0
  store i32 %nx, i32* %2, align 4, !tbaa !6
  %3 = getelementptr inbounds [3 x i32]* %nxyz, i64 0, i64 1
  store i32 %ny, i32* %3, align 4, !tbaa !6
  %4 = getelementptr inbounds [3 x i32]* %nxyz, i64 0, i64 2
  store i32 %nz, i32* %4, align 4, !tbaa !6
  br label %5

; <label>:5                                       ; preds = %._crit_edge, %0
  %6 = phi i32 [ %nx, %0 ], [ %.pre, %._crit_edge ]
  %indvars.iv19 = phi i64 [ 0, %0 ], [ %indvars.iv.next20, %._crit_edge ]
  %7 = getelementptr inbounds float* %x, i64 %indvars.iv19
  %8 = load float* %7, align 4, !tbaa !2
  %9 = getelementptr inbounds float* %invh, i64 %indvars.iv19
  %10 = load float* %9, align 4, !tbaa !2
  %11 = fmul float %8, %10
  %12 = fpext float %11 to double
  %13 = fadd double %12, 5.000000e-01
  %14 = fptosi double %13 to i32
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %20

; <label>:16                                      ; preds = %5
  %17 = sitofp i32 %6 to float
  %18 = fadd float %11, %17
  %19 = add nsw i32 %14, %6
  br label %26

; <label>:20                                      ; preds = %5
  %21 = icmp slt i32 %14, %6
  br i1 %21, label %.thread, label %22

; <label>:22                                      ; preds = %20
  %23 = sitofp i32 %6 to float
  %24 = fsub float %11, %23
  %25 = sub nsw i32 %14, %6
  br label %26

; <label>:26                                      ; preds = %22, %16
  %it.0 = phi i32 [ %19, %16 ], [ %25, %22 ]
  %ttt.0 = phi float [ %18, %16 ], [ %24, %22 ]
  %27 = icmp slt i32 %it.0, 0
  br i1 %27, label %29, label %.thread

.thread:                                          ; preds = %20, %26
  %ttt.04 = phi float [ %ttt.0, %26 ], [ %11, %20 ]
  %it.01 = phi i32 [ %it.0, %26 ], [ %14, %20 ]
  %28 = icmp slt i32 %it.01, %6
  br i1 %28, label %32, label %29

; <label>:29                                      ; preds = %.thread, %26
  %ttt.05 = phi float [ %ttt.04, %.thread ], [ %ttt.0, %26 ]
  %it.02 = phi i32 [ %it.01, %.thread ], [ %it.0, %26 ]
  %30 = fpext float %8 to double
  %31 = fpext float %ttt.05 to double
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([34 x i8]* @.str, i64 0, i64 0), i32 %iatom, i32 %it.02, double %30, double %31) #6
  br label %32

; <label>:32                                      ; preds = %.thread, %29
  %ttt.06 = phi float [ %ttt.04, %.thread ], [ %ttt.05, %29 ]
  %it.03 = phi i32 [ %it.01, %.thread ], [ %it.02, %29 ]
  %33 = getelementptr inbounds i32* %ixyz, i64 %indvars.iv19
  store i32 %it.03, i32* %33, align 4, !tbaa !6
  %34 = sitofp i32 %it.03 to float
  %35 = fsub float %ttt.06, %34
  %36 = fsub float 5.000000e-01, %35
  %37 = fmul float %36, %36
  %38 = getelementptr inbounds [3 x [3 x float]]* %wxyz, i64 0, i64 %indvars.iv19, i64 0
  store float %37, float* %38, align 4, !tbaa !2
  %39 = fmul float %35, %35
  %40 = fpext float %39 to double
  %41 = fmul double %40, 2.000000e+00
  %42 = fsub double 1.500000e+00, %41
  %43 = fptrunc double %42 to float
  %44 = getelementptr inbounds [3 x [3 x float]]* %wxyz, i64 0, i64 %indvars.iv19, i64 1
  store float %43, float* %44, align 4, !tbaa !2
  %45 = fadd float %35, 5.000000e-01
  %46 = fmul float %45, %45
  %47 = getelementptr inbounds [3 x [3 x float]]* %wxyz, i64 0, i64 %indvars.iv19, i64 2
  store float %46, float* %47, align 4, !tbaa !2
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %exitcond21 = icmp eq i64 %indvars.iv.next20, 3
  br i1 %exitcond21, label %48, label %._crit_edge

._crit_edge:                                      ; preds = %32
  %.phi.trans.insert = getelementptr inbounds [3 x i32]* %nxyz, i64 0, i64 %indvars.iv.next20
  %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !6
  br label %5

; <label>:48                                      ; preds = %32
  %49 = getelementptr inbounds [3 x [3 x float]]* %wxyz, i64 0, i64 2, i64 0
  %50 = load float* %49, align 8, !tbaa !2
  %51 = getelementptr inbounds [3 x [3 x float]]* %wxyz, i64 0, i64 2, i64 1
  %52 = load float* %51, align 4, !tbaa !2
  %53 = getelementptr inbounds [3 x [3 x float]]* %wxyz, i64 0, i64 2, i64 2
  %54 = load float* %53, align 8, !tbaa !2
  br label %55

; <label>:55                                      ; preds = %71, %48
  %indvars.iv16 = phi i64 [ 0, %48 ], [ %indvars.iv.next17, %71 ]
  %indvars.iv14 = phi i64 [ 0, %48 ], [ %indvars.iv.next15, %71 ]
  %56 = getelementptr inbounds [3 x [3 x float]]* %wxyz, i64 0, i64 0, i64 %indvars.iv14
  %57 = load float* %56, align 4, !tbaa !2
  %58 = fmul float %57, 1.250000e-01
  br label %59

; <label>:59                                      ; preds = %59, %55
  %indvars.iv12 = phi i64 [ %indvars.iv16, %55 ], [ %indvars.iv.next13, %59 ]
  %indvars.iv = phi i64 [ 0, %55 ], [ %indvars.iv.next, %59 ]
  %60 = getelementptr inbounds [3 x [3 x float]]* %wxyz, i64 0, i64 1, i64 %indvars.iv
  %61 = load float* %60, align 4, !tbaa !2
  %62 = fmul float %58, %61
  %63 = fmul float %50, %62
  %64 = getelementptr inbounds float* %WXYZ, i64 %indvars.iv12
  store float %63, float* %64, align 4, !tbaa !2
  %65 = fmul float %52, %62
  %66 = add nsw i64 %indvars.iv12, 1
  %67 = getelementptr inbounds float* %WXYZ, i64 %66
  store float %65, float* %67, align 4, !tbaa !2
  %68 = fmul float %54, %62
  %69 = add nsw i64 %indvars.iv12, 2
  %70 = getelementptr inbounds float* %WXYZ, i64 %69
  store float %68, float* %70, align 4, !tbaa !2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %indvars.iv.next13 = add nsw i64 %indvars.iv12, 3
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %71, label %59

; <label>:71                                      ; preds = %59
  %indvars.iv.next15 = add nuw nsw i64 %indvars.iv14, 1
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 9
  %exitcond18 = icmp eq i64 %indvars.iv.next15, 3
  br i1 %exitcond18, label %72, label %55

; <label>:72                                      ; preds = %71
  call void @llvm.lifetime.end(i64 36, i8* %1) #2
  ret void
}
