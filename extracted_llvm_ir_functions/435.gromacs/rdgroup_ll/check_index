define void @check_index(i8* %gname, i32 %n, i32* nocapture %index, i8* %traj, i32 %natoms) #0 {
entry:
  %cmp18 = icmp sgt i32 %n, 0
  br i1 %cmp18, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %tobool = icmp ne i8* %gname, null
  %cond = select i1 %tobool, i8* %gname, i8* getelementptr inbounds ([6 x i8]* @.str1, i64 0, i64 0)
  %tobool5 = icmp ne i8* %traj, null
  %cond9 = select i1 %tobool5, i8* %traj, i8* getelementptr inbounds ([15 x i8]* @.str2, i64 0, i64 0)
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next.pre, %for.inc ]
  %arrayidx = getelementptr inbounds i32* %index, i64 %indvars.iv
  %0 = load i32* %arrayidx, align 4, !tbaa !0
  %cmp1 = icmp slt i32 %0, %natoms
  %indvars.iv.next.pre = add i64 %indvars.iv, 1
  br i1 %cmp1, label %for.body.for.inc_crit_edge, label %if.then

for.body.for.inc_crit_edge:                       ; preds = %for.body
  %lftr.wideiv.pre = trunc i64 %indvars.iv.next.pre to i32
  br label %for.inc

if.then:                                          ; preds = %for.body
  %add4 = add nsw i32 %0, 1
  %1 = trunc i64 %indvars.iv.next.pre to i32
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([76 x i8]* @.str, i64 0, i64 0), i8* %cond, i32 %1, i32 %add4, i8* %cond9, i32 %natoms) #5
  br label %for.inc

for.inc:                                          ; preds = %for.body.for.inc_crit_edge, %if.then
  %lftr.wideiv.pre-phi = phi i32 [ %lftr.wideiv.pre, %for.body.for.inc_crit_edge ], [ %1, %if.then ]
  %exitcond = icmp eq i32 %lftr.wideiv.pre-phi, %n
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  ret void
}
