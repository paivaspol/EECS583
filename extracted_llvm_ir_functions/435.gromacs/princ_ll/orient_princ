define void @orient_princ(%struct.t_atoms* nocapture %atoms, i32 %isize, i32* nocapture %index, i32 %natoms, [3 x float]* nocapture %x, [3 x float]* %v, float* %d) #0 {
entry:
  %xcm = alloca [3 x float], align 4
  %prcomp = alloca [3 x float], align 4
  %trans = alloca [3 x [3 x float]], align 16
  %0 = bitcast [3 x [3 x float]]* %trans to i8*
  call void @llvm.lifetime.start(i64 36, i8* %0) #3
  %atom = getelementptr inbounds %struct.t_atoms* %atoms, i64 0, i32 1
  %1 = load %struct.t_atom** %atom, align 8, !tbaa !0
  %arraydecay = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 0
  %arraydecay1 = getelementptr inbounds [3 x float]* %prcomp, i64 0, i64 0
  call void @principal_comp(i32 %isize, i32* %index, %struct.t_atom* %1, [3 x float]* %x, [3 x float]* %arraydecay, float* %arraydecay1) #6
  %tobool = icmp eq float* %d, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load float* %arraydecay1, align 4, !tbaa !5
  store float %2, float* %d, align 4, !tbaa !5
  %arrayidx2.i = getelementptr inbounds [3 x float]* %prcomp, i64 0, i64 1
  %3 = load float* %arrayidx2.i, align 4, !tbaa !5
  %arrayidx3.i = getelementptr inbounds float* %d, i64 1
  store float %3, float* %arrayidx3.i, align 4, !tbaa !5
  %arrayidx4.i = getelementptr inbounds [3 x float]* %prcomp, i64 0, i64 2
  %4 = load float* %arrayidx4.i, align 4, !tbaa !5
  %arrayidx5.i = getelementptr inbounds float* %d, i64 2
  store float %4, float* %arrayidx5.i, align 4, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %arrayidx1.i = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 0, i64 0
  %5 = load float* %arrayidx1.i, align 16, !tbaa !5
  %arrayidx3.i26 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 1, i64 1
  %6 = load float* %arrayidx3.i26, align 4, !tbaa !5
  %arrayidx5.i27 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 2
  %7 = load float* %arrayidx5.i27, align 8, !tbaa !5
  %mul.i = fmul float %6, %7
  %arrayidx7.i = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 1
  %8 = load float* %arrayidx7.i, align 4, !tbaa !5
  %arrayidx9.i = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 1, i64 2
  %9 = load float* %arrayidx9.i, align 4, !tbaa !5
  %mul10.i = fmul float %8, %9
  %sub.i = fsub float %mul.i, %mul10.i
  %mul11.i = fmul float %5, %sub.i
  %arrayidx13.i = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 1, i64 0
  %10 = load float* %arrayidx13.i, align 4, !tbaa !5
  %arrayidx15.i = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 0, i64 1
  %11 = load float* %arrayidx15.i, align 4, !tbaa !5
  %mul18.i = fmul float %7, %11
  %arrayidx22.i = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 0, i64 2
  %12 = load float* %arrayidx22.i, align 8, !tbaa !5
  %mul23.i = fmul float %8, %12
  %sub24.i = fsub float %mul18.i, %mul23.i
  %mul25.i = fmul float %10, %sub24.i
  %sub26.i = fsub float %mul11.i, %mul25.i
  %arrayidx28.i = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 0
  %13 = load float* %arrayidx28.i, align 8, !tbaa !5
  %mul33.i = fmul float %9, %11
  %mul38.i = fmul float %6, %12
  %sub39.i = fsub float %mul33.i, %mul38.i
  %mul40.i = fmul float %13, %sub39.i
  %add.i = fadd float %mul40.i, %sub26.i
  %cmp = fcmp olt float %add.i, 0.000000e+00
  br i1 %cmp, label %for.body, label %if.end10

for.body:                                         ; preds = %if.end, %for.body.for.body_crit_edge
  %14 = phi float [ %.pre, %for.body.for.body_crit_edge ], [ %13, %if.end ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body.for.body_crit_edge ], [ 0, %if.end ]
  %arrayidx6 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 %indvars.iv
  %sub = fsub float -0.000000e+00, %14
  store float %sub, float* %arrayidx6, align 4, !tbaa !5
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 3
  br i1 %exitcond, label %if.end10, label %for.body.for.body_crit_edge

for.body.for.body_crit_edge:                      ; preds = %for.body
  %arrayidx6.phi.trans.insert = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 %indvars.iv.next
  %.pre = load float* %arrayidx6.phi.trans.insert, align 4, !tbaa !5
  br label %for.body

if.end10:                                         ; preds = %for.body, %if.end
  call void @rotate_atoms(i32 %natoms, i32* null, [3 x float]* %x, [3 x float]* %arraydecay) #6
  %tobool12 = icmp eq [3 x float]* %v, null
  br i1 %tobool12, label %if.end15, label %if.then13

if.then13:                                        ; preds = %if.end10
  call void @rotate_atoms(i32 %natoms, i32* null, [3 x float]* %v, [3 x float]* %arraydecay) #6
  br label %if.end15

if.end15:                                         ; preds = %if.end10, %if.then13
  %arraydecay16 = getelementptr inbounds [3 x float]* %xcm, i64 0, i64 0
  call void @add_xcm([3 x float]* %x, i32 %natoms, i32* null, float* %arraydecay16) #6
  call void @llvm.lifetime.end(i64 36, i8* %0) #3
  ret void
}
