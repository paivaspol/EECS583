define void @orient_princ(%struct.t_atoms* nocapture readonly %atoms, i32 %isize, i32* nocapture readonly %index, i32 %natoms, [3 x float]* nocapture %x, [3 x float]* %v, float* %d) #4 {
  %xcm = alloca [3 x float], align 4
  %prcomp = alloca [3 x float], align 4
  %trans = alloca [3 x [3 x float]], align 16
  %1 = bitcast [3 x [3 x float]]* %trans to i8*
  call void @llvm.lifetime.start(i64 36, i8* %1) #6
  %2 = getelementptr inbounds %struct.t_atoms* %atoms, i64 0, i32 1
  %3 = load %struct.t_atom** %2, align 8, !tbaa !23
  %4 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 0
  %5 = getelementptr inbounds [3 x float]* %prcomp, i64 0, i64 0
  call void @principal_comp(i32 %isize, i32* %index, %struct.t_atom* %3, [3 x float]* %x, [3 x float]* %4, float* %5) #10
  %6 = icmp eq float* %d, null
  br i1 %6, label %21, label %7

; <label>:7                                       ; preds = %0
  %8 = bitcast [3 x float]* %prcomp to i32*
  %9 = load i32* %8, align 4, !tbaa !14
  %10 = bitcast float* %d to i32*
  store i32 %9, i32* %10, align 4, !tbaa !14
  %11 = getelementptr inbounds [3 x float]* %prcomp, i64 0, i64 1
  %12 = bitcast float* %11 to i32*
  %13 = load i32* %12, align 4, !tbaa !14
  %14 = getelementptr inbounds float* %d, i64 1
  %15 = bitcast float* %14 to i32*
  store i32 %13, i32* %15, align 4, !tbaa !14
  %16 = getelementptr inbounds [3 x float]* %prcomp, i64 0, i64 2
  %17 = bitcast float* %16 to i32*
  %18 = load i32* %17, align 4, !tbaa !14
  %19 = getelementptr inbounds float* %d, i64 2
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4, !tbaa !14
  br label %21

; <label>:21                                      ; preds = %0, %7
  %22 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 0, i64 0
  %23 = load float* %22, align 16, !tbaa !14
  %24 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 1, i64 1
  %25 = load float* %24, align 4, !tbaa !14
  %26 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 2
  %27 = load float* %26, align 8, !tbaa !14
  %28 = fmul float %25, %27
  %29 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 1
  %30 = load float* %29, align 4, !tbaa !14
  %31 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 1, i64 2
  %32 = load float* %31, align 4, !tbaa !14
  %33 = fmul float %30, %32
  %34 = fsub float %28, %33
  %35 = fmul float %23, %34
  %36 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 1, i64 0
  %37 = load float* %36, align 4, !tbaa !14
  %38 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 0, i64 1
  %39 = load float* %38, align 4, !tbaa !14
  %40 = fmul float %27, %39
  %41 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 0, i64 2
  %42 = load float* %41, align 8, !tbaa !14
  %43 = fmul float %30, %42
  %44 = fsub float %40, %43
  %45 = fmul float %37, %44
  %46 = fsub float %35, %45
  %47 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 0
  %48 = load float* %47, align 8, !tbaa !14
  %49 = fmul float %32, %39
  %50 = fmul float %25, %42
  %51 = fsub float %49, %50
  %52 = fmul float %48, %51
  %53 = fadd float %52, %46
  %54 = fcmp olt float %53, 0.000000e+00
  br i1 %54, label %.preheader.preheader, label %.loopexit

.preheader.preheader:                             ; preds = %21
  %55 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 0
  %56 = fsub float -0.000000e+00, %48
  store float %56, float* %55, align 8, !tbaa !14
  br label %._crit_edge

._crit_edge:                                      ; preds = %.preheader.preheader, %._crit_edge
  %indvars.iv.next2 = phi i64 [ 1, %.preheader.preheader ], [ %indvars.iv.next, %._crit_edge ]
  %.phi.trans.insert = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 %indvars.iv.next2
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !14
  %57 = getelementptr inbounds [3 x [3 x float]]* %trans, i64 0, i64 2, i64 %indvars.iv.next2
  %58 = fsub float -0.000000e+00, %.pre
  store float %58, float* %57, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next2, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %.loopexit, label %._crit_edge

.loopexit:                                        ; preds = %._crit_edge, %21
  call void @rotate_atoms(i32 %natoms, i32* null, [3 x float]* %x, [3 x float]* %4) #10
  %59 = icmp eq [3 x float]* %v, null
  br i1 %59, label %61, label %60

; <label>:60                                      ; preds = %.loopexit
  call void @rotate_atoms(i32 %natoms, i32* null, [3 x float]* %v, [3 x float]* %4) #10
  br label %61

; <label>:61                                      ; preds = %.loopexit, %60
  %62 = getelementptr inbounds [3 x float]* %xcm, i64 0, i64 0
  call void @add_xcm([3 x float]* %x, i32 %natoms, i32* null, float* %62) #10
  call void @llvm.lifetime.end(i64 36, i8* %1) #6
  ret void
}
