define internal fastcc void @receiveints(i32* nocapture %buf, i32 %num_of_bits, i32* nocapture %sizes, i32* nocapture %nums) #0 {
entry:
  %bytes = alloca [32 x i32], align 16
  %0 = bitcast [32 x i32]* %bytes to i8*
  call void @llvm.lifetime.start(i64 128, i8* %0) #3
  %arrayidx = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 3
  store i32 0, i32* %arrayidx, align 4, !tbaa !3
  %arrayidx1 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 2
  store i32 0, i32* %arrayidx1, align 8, !tbaa !3
  %arrayidx2 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 1
  store i32 0, i32* %arrayidx2, align 4, !tbaa !3
  %cmp6 = icmp sgt i32 %num_of_bits, 8
  br i1 %cmp6, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %entry
  %1 = add i32 %num_of_bits, -8
  %2 = add i32 %num_of_bits, -9
  %3 = lshr i32 %2, 3
  %4 = shl nuw i32 %3, 3
  %5 = sub i32 %1, %4
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %indvars.iv13 = phi i64 [ 0, %while.body.lr.ph ], [ %indvars.iv.next14, %while.body ]
  %num_of_bits.addr.08 = phi i32 [ %num_of_bits, %while.body.lr.ph ], [ %sub, %while.body ]
  %call = call fastcc i32 @receivebits(i32* %buf, i32 8) #8
  %indvars.iv.next14 = add i64 %indvars.iv13, 1
  %arrayidx3 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %indvars.iv13
  store i32 %call, i32* %arrayidx3, align 4, !tbaa !3
  %sub = add nsw i32 %num_of_bits.addr.08, -8
  %cmp = icmp sgt i32 %sub, 8
  br i1 %cmp, label %while.body, label %while.cond.while.end_crit_edge

while.cond.while.end_crit_edge:                   ; preds = %while.body
  %6 = add i32 %3, 1
  br label %while.end

while.end:                                        ; preds = %while.cond.while.end_crit_edge, %entry
  %num_of_bits.addr.0.lcssa = phi i32 [ %5, %while.cond.while.end_crit_edge ], [ %num_of_bits, %entry ]
  %num_of_bytes.0.lcssa = phi i32 [ %6, %while.cond.while.end_crit_edge ], [ 0, %entry ]
  %cmp4 = icmp sgt i32 %num_of_bits.addr.0.lcssa, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %call5 = call fastcc i32 @receivebits(i32* %buf, i32 %num_of_bits.addr.0.lcssa) #8
  %inc6 = add nsw i32 %num_of_bytes.0.lcssa, 1
  %idxprom7 = sext i32 %num_of_bytes.0.lcssa to i64
  %arrayidx8 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %idxprom7
  store i32 %call5, i32* %arrayidx8, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %num_of_bytes.1 = phi i32 [ %inc6, %if.then ], [ %num_of_bytes.0.lcssa, %while.end ]
  %cmp132 = icmp sgt i32 %num_of_bytes.1, 0
  %7 = sext i32 %num_of_bytes.1 to i64
  br label %for.cond12.preheader

for.cond12.preheader:                             ; preds = %if.end, %for.end
  %indvars.iv11 = phi i64 [ 2, %if.end ], [ %indvars.iv.next12, %for.end ]
  br i1 %cmp132, label %for.body14.lr.ph, label %for.end

for.body14.lr.ph:                                 ; preds = %for.cond12.preheader
  %arrayidx18 = getelementptr inbounds i32* %sizes, i64 %indvars.iv11
  %8 = load i32* %arrayidx18, align 4, !tbaa !3
  br label %for.body14

for.body14:                                       ; preds = %for.body14.lr.ph, %for.body14
  %indvars.iv = phi i64 [ %7, %for.body14.lr.ph ], [ %indvars.iv.next, %for.body14 ]
  %num.03 = phi i32 [ 0, %for.body14.lr.ph ], [ %sub23, %for.body14 ]
  %indvars.iv.next = add i64 %indvars.iv, -1
  %shl = shl i32 %num.03, 8
  %arrayidx16 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %indvars.iv.next
  %9 = load i32* %arrayidx16, align 4, !tbaa !3
  %or = or i32 %9, %shl
  %div = udiv i32 %or, %8
  store i32 %div, i32* %arrayidx16, align 4, !tbaa !3
  %mul = mul i32 %8, %div
  %sub23 = sub i32 %or, %mul
  %10 = trunc i64 %indvars.iv.next to i32
  %cmp13 = icmp sgt i32 %10, 0
  br i1 %cmp13, label %for.body14, label %for.end

for.end:                                          ; preds = %for.body14, %for.cond12.preheader
  %num.0.lcssa = phi i32 [ 0, %for.cond12.preheader ], [ %sub23, %for.body14 ]
  %arrayidx25 = getelementptr inbounds i32* %nums, i64 %indvars.iv11
  store i32 %num.0.lcssa, i32* %arrayidx25, align 4, !tbaa !3
  %indvars.iv.next12 = add i64 %indvars.iv11, -1
  %11 = trunc i64 %indvars.iv.next12 to i32
  %cmp10 = icmp sgt i32 %11, 0
  br i1 %cmp10, label %for.cond12.preheader, label %for.end28

for.end28:                                        ; preds = %for.end
  %12 = bitcast [32 x i32]* %bytes to i64*
  %13 = load i64* %12, align 16
  %14 = trunc i64 %13 to i32
  %15 = lshr i64 %13, 24
  %.tr = trunc i64 %15 to i32
  %shl31 = and i32 %.tr, -256
  %or32 = or i32 %shl31, %14
  %16 = bitcast i32* %arrayidx1 to i64*
  %17 = load i64* %16, align 8
  %18 = trunc i64 %17 to i32
  %shl34 = shl i32 %18, 16
  %or35 = or i32 %or32, %shl34
  %19 = lshr i64 %17, 8
  %.tr17 = trunc i64 %19 to i32
  %shl37 = and i32 %.tr17, -16777216
  %or38 = or i32 %or35, %shl37
  store i32 %or38, i32* %nums, align 4, !tbaa !3
  call void @llvm.lifetime.end(i64 128, i8* %0) #3
  ret void
}
