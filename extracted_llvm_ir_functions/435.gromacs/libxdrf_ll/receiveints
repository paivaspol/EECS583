define internal fastcc void @receiveints(i32* nocapture %buf, i32 %num_of_bits, i32* nocapture readonly %sizes, i32* nocapture %nums) #4 {
  %bytes = alloca [32 x i32], align 16
  %1 = bitcast [32 x i32]* %bytes to i8*
  call void @llvm.lifetime.start(i64 128, i8* %1) #7
  %2 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 3
  store i32 0, i32* %2, align 4, !tbaa !23
  %3 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 2
  store i32 0, i32* %3, align 8, !tbaa !23
  %4 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 1
  store i32 0, i32* %4, align 4, !tbaa !23
  %5 = icmp sgt i32 %num_of_bits, 8
  br i1 %5, label %.lr.ph8, label %17

.lr.ph8:                                          ; preds = %0
  %6 = add i32 %num_of_bits, -9
  %7 = lshr i32 %6, 3
  %8 = shl nuw i32 %7, 3
  br label %9

; <label>:9                                       ; preds = %.lr.ph8, %9
  %indvars.iv16 = phi i64 [ 0, %.lr.ph8 ], [ %indvars.iv.next17, %9 ]
  %.06 = phi i32 [ %num_of_bits, %.lr.ph8 ], [ %12, %9 ]
  %10 = tail call fastcc i32 @receivebits(i32* %buf, i32 8) #13
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %11 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %indvars.iv16
  store i32 %10, i32* %11, align 4, !tbaa !23
  %12 = add nsw i32 %.06, -8
  %13 = icmp sgt i32 %12, 8
  br i1 %13, label %9, label %._crit_edge9

._crit_edge9:                                     ; preds = %9
  %14 = add i32 %num_of_bits, -8
  %15 = sub i32 %14, %8
  %16 = add nuw nsw i32 %7, 1
  br label %17

; <label>:17                                      ; preds = %._crit_edge9, %0
  %.0.lcssa = phi i32 [ %15, %._crit_edge9 ], [ %num_of_bits, %0 ]
  %num_of_bytes.0.lcssa = phi i32 [ %16, %._crit_edge9 ], [ 0, %0 ]
  %18 = icmp sgt i32 %.0.lcssa, 0
  br i1 %18, label %19, label %24

; <label>:19                                      ; preds = %17
  %20 = tail call fastcc i32 @receivebits(i32* %buf, i32 %.0.lcssa) #13
  %21 = add nsw i32 %num_of_bytes.0.lcssa, 1
  %22 = sext i32 %num_of_bytes.0.lcssa to i64
  %23 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %22
  store i32 %20, i32* %23, align 4, !tbaa !23
  br label %24

; <label>:24                                      ; preds = %19, %17
  %num_of_bytes.1 = phi i32 [ %21, %19 ], [ %num_of_bytes.0.lcssa, %17 ]
  %25 = icmp sgt i32 %num_of_bytes.1, 0
  %26 = sext i32 %num_of_bytes.1 to i64
  br label %.preheader

.preheader:                                       ; preds = %24, %._crit_edge
  %indvars.iv14 = phi i64 [ 2, %24 ], [ %indvars.iv.next15, %._crit_edge ]
  br i1 %25, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %27 = getelementptr inbounds i32* %sizes, i64 %indvars.iv14
  %28 = load i32* %27, align 4, !tbaa !23
  br label %29

; <label>:29                                      ; preds = %.lr.ph, %29
  %indvars.iv = phi i64 [ %26, %.lr.ph ], [ %indvars.iv.next, %29 ]
  %num.02 = phi i32 [ 0, %.lr.ph ], [ %36, %29 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %30 = shl i32 %num.02, 8
  %31 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %indvars.iv.next
  %32 = load i32* %31, align 4, !tbaa !23
  %33 = or i32 %32, %30
  %34 = udiv i32 %33, %28
  store i32 %34, i32* %31, align 4, !tbaa !23
  %35 = mul i32 %28, %34
  %36 = sub i32 %33, %35
  %37 = icmp sgt i64 %indvars.iv, 1
  br i1 %37, label %29, label %._crit_edge

._crit_edge:                                      ; preds = %29, %.preheader
  %num.0.lcssa = phi i32 [ 0, %.preheader ], [ %36, %29 ]
  %38 = getelementptr inbounds i32* %nums, i64 %indvars.iv14
  store i32 %num.0.lcssa, i32* %38, align 4, !tbaa !23
  %indvars.iv.next15 = add nsw i64 %indvars.iv14, -1
  %39 = icmp sgt i64 %indvars.iv14, 1
  br i1 %39, label %.preheader, label %40

; <label>:40                                      ; preds = %._crit_edge
  %41 = bitcast [32 x i32]* %bytes to i64*
  %42 = load i64* %41, align 16
  %43 = trunc i64 %42 to i32
  %44 = lshr i64 %42, 24
  %.tr = trunc i64 %44 to i32
  %45 = and i32 %.tr, -256
  %46 = or i32 %45, %43
  %47 = bitcast i32* %3 to i64*
  %48 = load i64* %47, align 8
  %49 = trunc i64 %48 to i32
  %50 = shl i32 %49, 16
  %51 = or i32 %46, %50
  %52 = lshr i64 %48, 8
  %.tr18 = trunc i64 %52 to i32
  %53 = and i32 %.tr18, -16777216
  %54 = or i32 %51, %53
  store i32 %54, i32* %nums, align 4, !tbaa !23
  call void @llvm.lifetime.end(i64 128, i8* %1) #7
  ret void
}
