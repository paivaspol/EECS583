define internal fastcc void @sendints(i32* nocapture %buf, i32 %num_of_bits, i32* nocapture readonly %sizes, i32* nocapture readonly %nums) #4 {
  %bytes = alloca [32 x i32], align 16
  %1 = bitcast [32 x i32]* %bytes to i8*
  call void @llvm.lifetime.start(i64 128, i8* %1) #7
  %2 = load i32* %nums, align 4, !tbaa !23
  br label %3

; <label>:3                                       ; preds = %3, %0
  %num_of_bytes.0 = phi i32 [ 0, %0 ], [ %5, %3 ]
  %tmp.0 = phi i32 [ %2, %0 ], [ %8, %3 ]
  %4 = and i32 %tmp.0, 255
  %5 = add i32 %num_of_bytes.0, 1
  %6 = zext i32 %num_of_bytes.0 to i64
  %7 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %6
  store i32 %4, i32* %7, align 4, !tbaa !23
  %8 = lshr i32 %tmp.0, 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %.preheader4, label %3

.preheader4:                                      ; preds = %3, %._crit_edge22
  %indvars.iv42 = phi i64 [ %indvars.iv.next43, %._crit_edge22 ], [ 1, %3 ]
  %num_of_bytes.125 = phi i32 [ %bytecnt.1.lcssa, %._crit_edge22 ], [ %5, %3 ]
  %10 = getelementptr inbounds i32* %nums, i64 %indvars.iv42
  %11 = load i32* %10, align 4, !tbaa !23
  %12 = getelementptr inbounds i32* %sizes, i64 %indvars.iv42
  %13 = load i32* %12, align 4, !tbaa !23
  %14 = icmp ult i32 %11, %13
  br i1 %14, label %.preheader3, label %17

.preheader3:                                      ; preds = %.preheader4
  %15 = icmp eq i32 %num_of_bytes.125, 0
  br i1 %15, label %.preheader2, label %.lr.ph16

.lr.ph16:                                         ; preds = %.preheader3
  %16 = add i32 %num_of_bytes.125, -1
  br label %21

; <label>:17                                      ; preds = %.preheader4
  %18 = load %struct.__sFILE** @__stderrp, align 8, !tbaa !18
  %19 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %18, i8* getelementptr inbounds ([58 x i8]* @.str9, i64 0, i64 0), i32 %11, i32 %13) #10
  tail call void @exit(i32 1) #11
  unreachable

.preheader2:                                      ; preds = %21, %.preheader3
  %tmp.1.lcssa = phi i32 [ %11, %.preheader3 ], [ %27, %21 ]
  %bytecnt.0.lcssa = phi i32 [ 0, %.preheader3 ], [ %num_of_bytes.125, %21 ]
  %20 = icmp eq i32 %tmp.1.lcssa, 0
  br i1 %20, label %._crit_edge22, label %.lr.ph21

; <label>:21                                      ; preds = %21, %.lr.ph16
  %indvars.iv38 = phi i64 [ 0, %.lr.ph16 ], [ %indvars.iv.next39, %21 ]
  %tmp.115 = phi i32 [ %11, %.lr.ph16 ], [ %27, %21 ]
  %22 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %indvars.iv38
  %23 = load i32* %22, align 4, !tbaa !23
  %24 = mul i32 %13, %23
  %25 = add i32 %24, %tmp.115
  %26 = and i32 %25, 255
  store i32 %26, i32* %22, align 4, !tbaa !23
  %27 = lshr i32 %25, 8
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1
  %lftr.wideiv40 = trunc i64 %indvars.iv38 to i32
  %exitcond41 = icmp eq i32 %lftr.wideiv40, %16
  br i1 %exitcond41, label %.preheader2, label %21

.lr.ph21:                                         ; preds = %.preheader2, %.lr.ph21
  %tmp.220 = phi i32 [ %32, %.lr.ph21 ], [ %tmp.1.lcssa, %.preheader2 ]
  %bytecnt.119 = phi i32 [ %29, %.lr.ph21 ], [ %bytecnt.0.lcssa, %.preheader2 ]
  %28 = and i32 %tmp.220, 255
  %29 = add i32 %bytecnt.119, 1
  %30 = zext i32 %bytecnt.119 to i64
  %31 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %30
  store i32 %28, i32* %31, align 4, !tbaa !23
  %32 = lshr i32 %tmp.220, 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %._crit_edge22, label %.lr.ph21

._crit_edge22:                                    ; preds = %.lr.ph21, %.preheader2
  %bytecnt.1.lcssa = phi i32 [ %bytecnt.0.lcssa, %.preheader2 ], [ %29, %.lr.ph21 ]
  %indvars.iv.next43 = add nuw nsw i64 %indvars.iv42, 1
  %34 = icmp slt i64 %indvars.iv.next43, 3
  br i1 %34, label %.preheader4, label %35

; <label>:35                                      ; preds = %._crit_edge22
  %36 = shl i32 %bytecnt.1.lcssa, 3
  %37 = icmp ugt i32 %36, %num_of_bits
  br i1 %37, label %.preheader, label %.preheader1

.preheader1:                                      ; preds = %35
  %38 = icmp eq i32 %bytecnt.1.lcssa, 0
  br i1 %38, label %._crit_edge13, label %.lr.ph12

.lr.ph12:                                         ; preds = %.preheader1
  %39 = add i32 %bytecnt.1.lcssa, -1
  br label %43

.preheader:                                       ; preds = %35
  %40 = add i32 %bytecnt.1.lcssa, -1
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %51, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader
  %42 = add i32 %bytecnt.1.lcssa, -2
  br label %47

; <label>:43                                      ; preds = %43, %.lr.ph12
  %indvars.iv34 = phi i64 [ 0, %.lr.ph12 ], [ %indvars.iv.next35, %43 ]
  %44 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %indvars.iv34
  %45 = load i32* %44, align 4, !tbaa !23
  tail call fastcc void @sendbits(i32* %buf, i32 8, i32 %45) #13
  %indvars.iv.next35 = add nuw nsw i64 %indvars.iv34, 1
  %lftr.wideiv36 = trunc i64 %indvars.iv34 to i32
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %39
  br i1 %exitcond37, label %._crit_edge13, label %43

._crit_edge13:                                    ; preds = %43, %.preheader1
  %46 = sub i32 %num_of_bits, %36
  tail call fastcc void @sendbits(i32* %buf, i32 %46, i32 0) #13
  br label %56

; <label>:47                                      ; preds = %47, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %47 ]
  %48 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %indvars.iv
  %49 = load i32* %48, align 4, !tbaa !23
  tail call fastcc void @sendbits(i32* %buf, i32 8, i32 %49) #13
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %42
  br i1 %exitcond, label %._crit_edge, label %47

._crit_edge:                                      ; preds = %47
  %50 = add i32 %bytecnt.1.lcssa, -1
  %phitmp = sext i32 %50 to i64
  br label %51

; <label>:51                                      ; preds = %.preheader, %._crit_edge
  %i.2.lcssa = phi i64 [ %phitmp, %._crit_edge ], [ 0, %.preheader ]
  %52 = shl i32 %40, 3
  %53 = sub i32 %num_of_bits, %52
  %54 = getelementptr inbounds [32 x i32]* %bytes, i64 0, i64 %i.2.lcssa
  %55 = load i32* %54, align 4, !tbaa !23
  tail call fastcc void @sendbits(i32* %buf, i32 %53, i32 %55) #13
  br label %56

; <label>:56                                      ; preds = %51, %._crit_edge13
  call void @llvm.lifetime.end(i64 128, i8* %1) #7
  ret void
}
