define internal fastcc void @init_em(%struct._IO_FILE* %log, i8* %title, %struct.t_parm* %parm, float* nocapture %lambda, %struct.t_nrnb* %mynrnb, float* nocapture %mu_tot, float* %box_size, %struct.t_forcerec* nocapture %fr, %struct.t_mdatoms* %mdatoms, %struct.t_topology* %top, %struct.t_nsborder* nocapture %nsb, %struct.t_commrec* %cr, %struct.t_vcm** nocapture %vcm, i32* nocapture %start, i32* nocapture %end) #0 {
entry:
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %log, i8* getelementptr inbounds ([15 x i8]* @.str43, i64 0, i64 0), i8* %title) #5
  %efep = getelementptr inbounds %struct.t_parm* %parm, i64 0, i32 0, i32 46
  %0 = load i32* %efep, align 4, !tbaa !0
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %init_lambda = getelementptr inbounds %struct.t_parm* %parm, i64 0, i32 0, i32 47
  %1 = load float* %init_lambda, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %storemerge = phi float [ %1, %if.then ], [ 0.000000e+00, %entry ]
  store float %storemerge, float* %lambda, align 4, !tbaa !3
  tail call void @init_nrnb(%struct.t_nrnb* %mynrnb) #5
  store float 0.000000e+00, float* %mu_tot, align 4, !tbaa !3
  %arrayidx1.i = getelementptr inbounds float* %mu_tot, i64 1
  store float 0.000000e+00, float* %arrayidx1.i, align 4, !tbaa !3
  %arrayidx2.i = getelementptr inbounds float* %mu_tot, i64 2
  store float 0.000000e+00, float* %arrayidx2.i, align 4, !tbaa !3
  %arraydecay = getelementptr inbounds %struct.t_parm* %parm, i64 0, i32 1, i64 0
  %shift_vec = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 48
  %2 = load [3 x float]** %shift_vec, align 8, !tbaa !4
  tail call void @calc_shifts([3 x float]* %arraydecay, float* %box_size, [3 x float]* %2) #5
  %nodeid = getelementptr inbounds %struct.t_commrec* %cr, i64 0, i32 0
  %3 = load i32* %nodeid, align 4, !tbaa !0
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr inbounds %struct.t_nsborder* %nsb, i64 0, i32 8, i64 %idxprom
  %4 = load i32* %arrayidx, align 4, !tbaa !0
  store i32 %4, i32* %start, align 4, !tbaa !0
  %5 = load i32* %nodeid, align 4, !tbaa !0
  %idxprom3 = sext i32 %5 to i64
  %arrayidx4 = getelementptr inbounds %struct.t_nsborder* %nsb, i64 0, i32 7, i64 %idxprom3
  %6 = load i32* %arrayidx4, align 4, !tbaa !0
  %add = add nsw i32 %6, %4
  store i32 %add, i32* %end, align 4, !tbaa !0
  %7 = load float* %lambda, align 4, !tbaa !3
  tail call void @init_mdatoms(%struct.t_mdatoms* %mdatoms, float %7, i32 1) #5
  %8 = load i32* %start, align 4, !tbaa !0
  %nodeid5 = getelementptr inbounds %struct.t_nsborder* %nsb, i64 0, i32 0
  %9 = load i32* %nodeid5, align 4, !tbaa !0
  %idxprom6 = sext i32 %9 to i64
  %arrayidx8 = getelementptr inbounds %struct.t_nsborder* %nsb, i64 0, i32 7, i64 %idxprom6
  %10 = load i32* %arrayidx8, align 4, !tbaa !0
  %nstcomm = getelementptr inbounds %struct.t_parm* %parm, i64 0, i32 0, i32 7
  %11 = load i32* %nstcomm, align 4, !tbaa !0
  %call10 = tail call %struct.t_vcm* @init_vcm(%struct._IO_FILE* %log, %struct.t_topology* %top, %struct.t_commrec* %cr, %struct.t_mdatoms* %mdatoms, i32 %8, i32 %10, i32 %11) #5
  store %struct.t_vcm* %call10, %struct.t_vcm** %vcm, align 8, !tbaa !4
  ret void
}
