define internal fastcc float @f_norm(%struct.t_commrec* %cr, %struct.t_grpopts* nocapture readonly %opts, %struct.t_mdatoms* nocapture readonly %mdatoms, i32 %start, i32 %end, [3 x float]* nocapture readonly %grad) #3 {
  %fnorm2 = alloca double, align 8
  store double 0.000000e+00, double* %fnorm2, align 8, !tbaa !39
  %1 = icmp slt i32 %start, %end
  br i1 %1, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %2 = getelementptr inbounds %struct.t_mdatoms* %mdatoms, i64 0, i32 17
  %3 = load i16** %2, align 8, !tbaa !41
  %4 = getelementptr inbounds %struct.t_grpopts* %opts, i64 0, i32 8
  %5 = load [3 x i32]** %4, align 8, !tbaa !59
  %6 = sext i32 %start to i64
  %7 = add i32 %end, -1
  br label %8

; <label>:8                                       ; preds = %26, %.lr.ph
  %9 = phi double [ 0.000000e+00, %.lr.ph ], [ %25, %26 ]
  %indvars.iv3 = phi i64 [ %6, %.lr.ph ], [ %indvars.iv.next4, %26 ]
  %10 = getelementptr inbounds i16* %3, i64 %indvars.iv3
  %11 = load i16* %10, align 2, !tbaa !43
  %12 = zext i16 %11 to i64
  br label %13

; <label>:13                                      ; preds = %24, %8
  %14 = phi double [ %9, %8 ], [ %25, %24 ]
  %indvars.iv = phi i64 [ 0, %8 ], [ %indvars.iv.next, %24 ]
  %15 = getelementptr inbounds [3 x i32]* %5, i64 %12, i64 %indvars.iv
  %16 = load i32* %15, align 4, !tbaa !25
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %24

; <label>:18                                      ; preds = %13
  %19 = getelementptr inbounds [3 x float]* %grad, i64 %indvars.iv3, i64 %indvars.iv
  %20 = load float* %19, align 4, !tbaa !19
  %21 = fmul float %20, %20
  %22 = fpext float %21 to double
  %23 = fadd double %14, %22
  store double %23, double* %fnorm2, align 8, !tbaa !39
  br label %24

; <label>:24                                      ; preds = %13, %18
  %25 = phi double [ %14, %13 ], [ %23, %18 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %26, label %13

; <label>:26                                      ; preds = %24
  %indvars.iv.next4 = add nsw i64 %indvars.iv3, 1
  %lftr.wideiv = trunc i64 %indvars.iv3 to i32
  %exitcond5 = icmp eq i32 %lftr.wideiv, %7
  br i1 %exitcond5, label %._crit_edge, label %8

._crit_edge:                                      ; preds = %26, %0
  %27 = phi double [ 0.000000e+00, %0 ], [ %25, %26 ]
  %28 = getelementptr inbounds %struct.t_commrec* %cr, i64 0, i32 1
  %29 = load i32* %28, align 4, !tbaa !35
  %30 = icmp sgt i32 %29, 1
  br i1 %30, label %35, label %31

; <label>:31                                      ; preds = %._crit_edge
  %32 = getelementptr inbounds %struct.t_commrec* %cr, i64 0, i32 5
  %33 = load i32* %32, align 4, !tbaa !36
  %34 = icmp sgt i32 %33, 1
  br i1 %34, label %35, label %36

; <label>:35                                      ; preds = %31, %._crit_edge
  call void @gmx_sumd(i32 1, double* %fnorm2, %struct.t_commrec* %cr) #7
  %.pre = load double* %fnorm2, align 8, !tbaa !39
  br label %36

; <label>:36                                      ; preds = %35, %31
  %37 = phi double [ %.pre, %35 ], [ %27, %31 ]
  %38 = call double @sqrt(double %37) #9
  %39 = fptrunc double %38 to float
  ret float %39
}
