define internal fastcc float @f_norm(%struct.t_commrec* %cr, %struct.t_grpopts* nocapture %opts, %struct.t_mdatoms* nocapture %mdatoms, i32 %start, i32 %end, [3 x float]* nocapture %grad) #0 {
entry:
  %fnorm2 = alloca double, align 8
  store double 0.000000e+00, double* %fnorm2, align 8, !tbaa !5
  %cmp34 = icmp slt i32 %start, %end
  br i1 %cmp34, label %for.body.lr.ph, label %for.end16

for.body.lr.ph:                                   ; preds = %entry
  %cFREEZE = getelementptr inbounds %struct.t_mdatoms* %mdatoms, i64 0, i32 17
  %0 = load i16** %cFREEZE, align 8, !tbaa !4
  %nFreeze = getelementptr inbounds %struct.t_grpopts* %opts, i64 0, i32 8
  %1 = load [3 x i32]** %nFreeze, align 8, !tbaa !4
  %2 = sext i32 %start to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc14
  %3 = phi double [ 0.000000e+00, %for.body.lr.ph ], [ %8, %for.inc14 ]
  %indvars.iv36 = phi i64 [ %2, %for.body.lr.ph ], [ %indvars.iv.next37, %for.inc14 ]
  %arrayidx = getelementptr inbounds i16* %0, i64 %indvars.iv36
  %4 = load i16* %arrayidx, align 2, !tbaa !6
  %idxprom6 = zext i16 %4 to i64
  br label %for.body4

for.body4:                                        ; preds = %for.inc, %for.body
  %5 = phi double [ %3, %for.body ], [ %8, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next, %for.inc ]
  %arrayidx8 = getelementptr inbounds [3 x i32]* %1, i64 %idxprom6, i64 %indvars.iv
  %6 = load i32* %arrayidx8, align 4, !tbaa !0
  %tobool = icmp eq i32 %6, 0
  br i1 %tobool, label %if.then, label %for.inc

if.then:                                          ; preds = %for.body4
  %arrayidx12 = getelementptr inbounds [3 x float]* %grad, i64 %indvars.iv36, i64 %indvars.iv
  %7 = load float* %arrayidx12, align 4, !tbaa !3
  %mul.i = fmul float %7, %7
  %conv13 = fpext float %mul.i to double
  %add = fadd double %5, %conv13
  store double %add, double* %fnorm2, align 8, !tbaa !5
  br label %for.inc

for.inc:                                          ; preds = %for.body4, %if.then
  %8 = phi double [ %5, %for.body4 ], [ %add, %if.then ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 3
  br i1 %exitcond, label %for.inc14, label %for.body4

for.inc14:                                        ; preds = %for.inc
  %indvars.iv.next37 = add i64 %indvars.iv36, 1
  %9 = trunc i64 %indvars.iv.next37 to i32
  %cmp = icmp slt i32 %9, %end
  br i1 %cmp, label %for.body, label %for.end16

for.end16:                                        ; preds = %for.inc14, %entry
  %10 = phi double [ 0.000000e+00, %entry ], [ %8, %for.inc14 ]
  %nnodes = getelementptr inbounds %struct.t_commrec* %cr, i64 0, i32 1
  %11 = load i32* %nnodes, align 4, !tbaa !0
  %cmp17 = icmp sgt i32 %11, 1
  br i1 %cmp17, label %if.then21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end16
  %nthreads = getelementptr inbounds %struct.t_commrec* %cr, i64 0, i32 5
  %12 = load i32* %nthreads, align 4, !tbaa !0
  %cmp19 = icmp sgt i32 %12, 1
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %lor.lhs.false, %for.end16
  call void @gmx_sumd(i32 1, double* %fnorm2, %struct.t_commrec* %cr) #5
  %.pre = load double* %fnorm2, align 8, !tbaa !5
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %lor.lhs.false
  %13 = phi double [ %.pre, %if.then21 ], [ %10, %lor.lhs.false ]
  %call23 = call double @sqrt(double %13) #5
  %conv24 = fptrunc double %call23 to float
  ret float %conv24
}
