define void @parrinellorahman_pcoupl(%struct.t_inputrec* nocapture readonly %ir, i32 %step, [3 x float]* nocapture readonly %pres, [3 x float]* nocapture readonly %box, [3 x float]* nocapture %boxv, [3 x float]* nocapture %M) #4 {
  %invbox = alloca [3 x [3 x float]], align 16
  %pdiff = alloca [3 x [3 x float]], align 16
  %t1 = alloca [3 x [3 x float]], align 16
  %t2 = alloca [3 x [3 x float]], align 16
  %1 = getelementptr inbounds [3 x float]* %box, i64 0, i64 0
  %2 = load float* %1, align 4, !tbaa !14
  %3 = getelementptr inbounds [3 x float]* %box, i64 1, i64 1
  %4 = load float* %3, align 4, !tbaa !14
  %5 = fmul float %2, %4
  %6 = getelementptr inbounds [3 x float]* %box, i64 2, i64 2
  %7 = load float* %6, align 4, !tbaa !14
  %8 = fmul float %5, %7
  %9 = fpext float %8 to double
  %10 = fdiv double %9, 1.660540e+01
  %11 = fptrunc double %10 to float
  %12 = bitcast [3 x [3 x float]]* %invbox to i8*
  call void @llvm.lifetime.start(i64 36, i8* %12) #6
  %13 = bitcast [3 x [3 x float]]* %pdiff to i8*
  call void @llvm.lifetime.start(i64 36, i8* %13) #6
  %14 = bitcast [3 x [3 x float]]* %t1 to i8*
  call void @llvm.lifetime.start(i64 36, i8* %14) #6
  %15 = bitcast [3 x [3 x float]]* %t2 to i8*
  call void @llvm.lifetime.start(i64 36, i8* %15) #6
  %.b = load i1* @parrinellorahman_pcoupl.bFirst, align 1
  br i1 %.b, label %36, label %16

; <label>:16                                      ; preds = %0
  %17 = fcmp ogt float %2, %4
  %. = select i1 %17, float %2, float %4
  %18 = fcmp ogt float %., %7
  %19 = select i1 %18, float %., float %7
  %20 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 30
  br label %.preheader12

.preheader12:                                     ; preds = %34, %16
  %indvars.iv82 = phi i64 [ 0, %16 ], [ %indvars.iv.next83, %34 ]
  br label %21

; <label>:21                                      ; preds = %21, %.preheader12
  %indvars.iv79 = phi i64 [ 0, %.preheader12 ], [ %indvars.iv.next80, %21 ]
  %22 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 32, i64 %indvars.iv82, i64 %indvars.iv79
  %23 = load float* %22, align 4, !tbaa !14
  %24 = fpext float %23 to double
  %25 = fmul double %24, 0x4043BD3CC9BE45DE
  %26 = load float* %20, align 4, !tbaa !19
  %27 = fmul float %26, 3.000000e+00
  %28 = fmul float %26, %27
  %29 = fmul float %19, %28
  %30 = fpext float %29 to double
  %31 = fdiv double %25, %30
  %32 = fptrunc double %31 to float
  %33 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 %indvars.iv82, i64 %indvars.iv79
  store float %32, float* %33, align 4, !tbaa !14
  %indvars.iv.next80 = add nuw nsw i64 %indvars.iv79, 1
  %exitcond81 = icmp eq i64 %indvars.iv.next80, 3
  br i1 %exitcond81, label %34, label %21

; <label>:34                                      ; preds = %21
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %exitcond84 = icmp eq i64 %indvars.iv.next83, 3
  br i1 %exitcond84, label %35, label %.preheader12

; <label>:35                                      ; preds = %34
  store i1 true, i1* @parrinellorahman_pcoupl.bFirst, align 1
  %.pre = load float* %1, align 4, !tbaa !14
  %.pre85 = load float* %3, align 4, !tbaa !14
  %.pre86 = load float* %6, align 4, !tbaa !14
  br label %36

; <label>:36                                      ; preds = %0, %35
  %37 = phi float [ %7, %0 ], [ %.pre86, %35 ]
  %38 = phi float [ %4, %0 ], [ %.pre85, %35 ]
  %39 = phi float [ %2, %0 ], [ %.pre, %35 ]
  %40 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 0
  %41 = fmul float %38, %37
  %42 = getelementptr inbounds [3 x float]* %box, i64 2, i64 1
  %43 = load float* %42, align 4, !tbaa !14
  %44 = getelementptr inbounds [3 x float]* %box, i64 1, i64 2
  %45 = load float* %44, align 4, !tbaa !14
  %46 = fmul float %43, %45
  %47 = fsub float %41, %46
  %48 = fmul float %39, %47
  %49 = getelementptr inbounds [3 x float]* %box, i64 1, i64 0
  %50 = load float* %49, align 4, !tbaa !14
  %51 = getelementptr inbounds [3 x float]* %box, i64 0, i64 1
  %52 = load float* %51, align 4, !tbaa !14
  %53 = fmul float %37, %52
  %54 = getelementptr inbounds [3 x float]* %box, i64 0, i64 2
  %55 = load float* %54, align 4, !tbaa !14
  %56 = fmul float %43, %55
  %57 = fsub float %53, %56
  %58 = fmul float %50, %57
  %59 = fsub float %48, %58
  %60 = getelementptr inbounds [3 x float]* %box, i64 2, i64 0
  %61 = load float* %60, align 4, !tbaa !14
  %62 = fmul float %45, %52
  %63 = fmul float %38, %55
  %64 = fsub float %62, %63
  %65 = fmul float %61, %64
  %66 = fadd float %65, %59
  %67 = fdiv float 1.000000e+00, %66
  %fabsf.i = tail call float @fabsf(float %67) #8
  %68 = fcmp ole float %fabsf.i, 0x3C32725DE0000000
  %69 = fcmp oge float %fabsf.i, 0x43ABC16D60000000
  %or.cond.i = or i1 %68, %69
  br i1 %or.cond.i, label %70, label %m_inv.exit

; <label>:70                                      ; preds = %36
  %71 = fpext float %67 to double
  %72 = fdiv double 1.000000e+00, %71
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([17 x i8]* @.str15, i64 0, i64 0), double %72) #9
  %.pre.i = load float* %3, align 4, !tbaa !14
  %.pre2.i = load float* %6, align 4, !tbaa !14
  %.pre3.i = load float* %42, align 4, !tbaa !14
  %.pre4.i = load float* %44, align 4, !tbaa !14
  %.pre87 = load float* %51, align 4, !tbaa !14
  %.pre88 = load float* %54, align 4, !tbaa !14
  %.pre89 = load float* %49, align 4, !tbaa !14
  %.pre90 = load float* %60, align 4, !tbaa !14
  %.pre91 = load float* %1, align 4, !tbaa !14
  br label %m_inv.exit

m_inv.exit:                                       ; preds = %36, %70
  %73 = phi float [ %39, %36 ], [ %.pre91, %70 ]
  %74 = phi float [ %61, %36 ], [ %.pre90, %70 ]
  %75 = phi float [ %50, %36 ], [ %.pre89, %70 ]
  %76 = phi float [ %55, %36 ], [ %.pre88, %70 ]
  %77 = phi float [ %52, %36 ], [ %.pre87, %70 ]
  %78 = phi float [ %45, %36 ], [ %.pre4.i, %70 ]
  %79 = phi float [ %43, %36 ], [ %.pre3.i, %70 ]
  %80 = phi float [ %37, %36 ], [ %.pre2.i, %70 ]
  %81 = phi float [ %38, %36 ], [ %.pre.i, %70 ]
  %82 = fmul float %80, %81
  %83 = fmul float %78, %79
  %84 = fsub float %82, %83
  %85 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 0, i64 0
  %86 = fsub float -0.000000e+00, %67
  %87 = fmul float %77, %80
  %88 = fmul float %79, %76
  %89 = fsub float %87, %88
  %90 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 0, i64 1
  %91 = fmul float %77, %78
  %92 = fmul float %81, %76
  %93 = fsub float %91, %92
  %94 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 0, i64 2
  %95 = fmul float %75, %80
  %96 = fmul float %74, %78
  %97 = fsub float %95, %96
  %98 = insertelement <4 x float> undef, float %67, i32 0
  %99 = insertelement <4 x float> %98, float %89, i32 1
  %100 = insertelement <4 x float> %99, float %67, i32 2
  %101 = insertelement <4 x float> %100, float %97, i32 3
  %102 = insertelement <4 x float> undef, float %84, i32 0
  %103 = insertelement <4 x float> %102, float %86, i32 1
  %104 = insertelement <4 x float> %103, float %93, i32 2
  %105 = insertelement <4 x float> %104, float %86, i32 3
  %106 = fmul <4 x float> %101, %105
  %107 = bitcast [3 x [3 x float]]* %invbox to <4 x float>*
  store <4 x float> %106, <4 x float>* %107, align 16, !tbaa !14
  %108 = fmul float %73, %80
  %109 = fmul float %74, %76
  %110 = fsub float %108, %109
  %111 = fmul float %67, %110
  %112 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 1, i64 1
  store float %111, float* %112, align 4, !tbaa !14
  %113 = fmul float %73, %78
  %114 = fmul float %75, %76
  %115 = fsub float %113, %114
  %116 = fmul float %115, %86
  %117 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 1, i64 2
  store float %116, float* %117, align 4, !tbaa !14
  %118 = fmul float %75, %79
  %119 = fmul float %74, %81
  %120 = fsub float %118, %119
  %121 = fmul float %67, %120
  %122 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 2, i64 0
  store float %121, float* %122, align 8, !tbaa !14
  %123 = fmul float %73, %79
  %124 = fmul float %74, %77
  %125 = fsub float %123, %124
  %126 = fmul float %125, %86
  %127 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 2, i64 1
  store float %126, float* %127, align 4, !tbaa !14
  %128 = fmul float %73, %81
  %129 = fmul float %75, %77
  %130 = fsub float %128, %129
  %131 = fmul float %67, %130
  %132 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 2, i64 2
  store float %131, float* %132, align 8, !tbaa !14
  %133 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 31, i64 0, i64 0
  %134 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 0, i64 0
  %135 = bitcast [3 x float]* %pres to <4 x float>*
  %136 = load <4 x float>* %135, align 4, !tbaa !14
  %137 = bitcast float* %133 to <4 x float>*
  %138 = load <4 x float>* %137, align 4, !tbaa !14
  %139 = fsub <4 x float> %136, %138
  %140 = bitcast [3 x [3 x float]]* %pdiff to <4 x float>*
  store <4 x float> %139, <4 x float>* %140, align 16, !tbaa !14
  %141 = getelementptr inbounds [3 x float]* %pres, i64 1, i64 1
  %142 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 31, i64 1, i64 1
  %143 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 1, i64 1
  %144 = bitcast float* %141 to <4 x float>*
  %145 = load <4 x float>* %144, align 4, !tbaa !14
  %146 = bitcast float* %142 to <4 x float>*
  %147 = load <4 x float>* %146, align 4, !tbaa !14
  %148 = fsub <4 x float> %145, %147
  %149 = bitcast float* %143 to <4 x float>*
  store <4 x float> %148, <4 x float>* %149, align 4, !tbaa !14
  %150 = getelementptr inbounds [3 x float]* %pres, i64 2, i64 2
  %151 = load float* %150, align 4, !tbaa !14
  %152 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 31, i64 2, i64 2
  %153 = load float* %152, align 4, !tbaa !14
  %154 = fsub float %151, %153
  %155 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 2, i64 2
  store float %154, float* %155, align 8, !tbaa !14
  %156 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 29
  %157 = load i32* %156, align 4, !tbaa !22
  %158 = icmp eq i32 %157, 3
  %159 = extractelement <4 x float> %139, i32 0
  %160 = extractelement <4 x float> %148, i32 0
  br i1 %158, label %161, label %179

; <label>:161                                     ; preds = %m_inv.exit
  %162 = extractelement <4 x float> %136, i32 0
  %163 = extractelement <4 x float> %145, i32 0
  %164 = fadd float %162, %163
  %165 = fmul float %164, 5.000000e-01
  %166 = getelementptr inbounds [3 x float]* %box, i64 0, i64 0
  %167 = load float* %166, align 4, !tbaa !14
  %168 = extractelement <4 x float> %138, i32 0
  %169 = fdiv float %168, %167
  %170 = fsub float %151, %169
  %171 = fsub float %165, %170
  %172 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 0, i64 0
  store float %171, float* %172, align 16, !tbaa !14
  br label %._crit_edge92

._crit_edge92:                                    ; preds = %161, %._crit_edge92
  %indvars.iv.next77100 = phi i64 [ 1, %161 ], [ %indvars.iv.next77, %._crit_edge92 ]
  %.phi.trans.insert = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 31, i64 %indvars.iv.next77100, i64 %indvars.iv.next77100
  %.pre93 = load float* %.phi.trans.insert, align 4, !tbaa !14
  %173 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv.next77100, i64 %indvars.iv.next77100
  %174 = load float* %173, align 4, !tbaa !14
  %175 = fdiv float %.pre93, %174
  %176 = fsub float %151, %175
  %177 = fsub float %165, %176
  %178 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 %indvars.iv.next77100, i64 %indvars.iv.next77100
  store float %177, float* %178, align 4, !tbaa !14
  %indvars.iv.next77 = add nuw nsw i64 %indvars.iv.next77100, 1
  %exitcond78 = icmp eq i64 %indvars.iv.next77, 2
  br i1 %exitcond78, label %.loopexit, label %._crit_edge92

.loopexit:                                        ; preds = %._crit_edge92
  %.pre94 = load float* %134, align 16, !tbaa !14
  %.pre95 = load float* %143, align 4, !tbaa !14
  %.pre96 = load float* %155, align 8, !tbaa !14
  br label %179

; <label>:179                                     ; preds = %.loopexit, %m_inv.exit
  %180 = phi float [ %.pre96, %.loopexit ], [ %154, %m_inv.exit ]
  %181 = phi float [ %.pre95, %.loopexit ], [ %160, %m_inv.exit ]
  %182 = phi float [ %.pre94, %.loopexit ], [ %159, %m_inv.exit ]
  %183 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 0
  %184 = load float* %85, align 16, !tbaa !14
  %185 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 0, i64 0
  %186 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 0, i64 1
  %187 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 0, i64 2
  %188 = load float* %90, align 4, !tbaa !14
  %189 = insertelement <4 x float> undef, float %184, i32 0
  %190 = insertelement <4 x float> %189, float %184, i32 1
  %191 = insertelement <4 x float> %190, float %184, i32 2
  %192 = insertelement <4 x float> %191, float %188, i32 3
  %193 = insertelement <4 x float> undef, float %182, i32 0
  %194 = extractelement <4 x float> %139, i32 1
  %195 = insertelement <4 x float> %193, float %194, i32 1
  %196 = extractelement <4 x float> %139, i32 2
  %197 = insertelement <4 x float> %195, float %196, i32 2
  %198 = insertelement <4 x float> %197, float %182, i32 3
  %199 = fmul <4 x float> %192, %198
  %200 = extractelement <4 x float> %106, i32 3
  %201 = shufflevector <4 x float> %106, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>
  %202 = insertelement <4 x float> %201, float %200, i32 2
  %203 = insertelement <4 x float> %202, float %111, i32 3
  %204 = extractelement <4 x float> %139, i32 3
  %205 = insertelement <4 x float> undef, float %204, i32 0
  %206 = insertelement <4 x float> %205, float %181, i32 1
  %207 = extractelement <4 x float> %148, i32 1
  %208 = shufflevector <4 x float> %206, <4 x float> %148, <4 x i32> <i32 0, i32 1, i32 5, i32 undef>
  %209 = shufflevector <4 x float> %208, <4 x float> %139, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %210 = fmul <4 x float> %203, %209
  %211 = fadd <4 x float> %199, %210
  %212 = insertelement <4 x float> undef, float %121, i32 0
  %213 = insertelement <4 x float> %212, float %121, i32 1
  %214 = insertelement <4 x float> %213, float %121, i32 2
  %215 = insertelement <4 x float> %214, float %126, i32 3
  %216 = extractelement <4 x float> %148, i32 2
  %217 = insertelement <4 x float> undef, float %216, i32 0
  %218 = extractelement <4 x float> %148, i32 3
  %219 = insertelement <4 x float> %217, float %218, i32 1
  %220 = insertelement <4 x float> %219, float %180, i32 2
  %221 = shufflevector <4 x float> %220, <4 x float> %148, <4 x i32> <i32 0, i32 1, i32 2, i32 6>
  %222 = fmul <4 x float> %215, %221
  %223 = fadd <4 x float> %211, %222
  %224 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 1, i64 0
  %225 = bitcast [3 x [3 x float]]* %t1 to <4 x float>*
  store <4 x float> %223, <4 x float>* %225, align 16, !tbaa !14
  %226 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 1, i64 1
  %227 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 1, i64 2
  %228 = load float* %94, align 8, !tbaa !14
  %229 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 2, i64 0
  %230 = insertelement <4 x float> undef, float %188, i32 0
  %231 = insertelement <4 x float> %230, float %188, i32 1
  %232 = insertelement <4 x float> %231, float %228, i32 2
  %233 = insertelement <4 x float> %232, float %228, i32 3
  %234 = insertelement <4 x float> undef, float %194, i32 0
  %235 = insertelement <4 x float> %234, float %196, i32 1
  %236 = insertelement <4 x float> %235, float %182, i32 2
  %237 = shufflevector <4 x float> %236, <4 x float> %139, <4 x i32> <i32 0, i32 1, i32 2, i32 5>
  %238 = fmul <4 x float> %233, %237
  %239 = insertelement <4 x float> undef, float %111, i32 0
  %240 = insertelement <4 x float> %239, float %111, i32 1
  %241 = insertelement <4 x float> %240, float %116, i32 2
  %242 = insertelement <4 x float> %241, float %116, i32 3
  %243 = insertelement <4 x float> undef, float %181, i32 0
  %244 = insertelement <4 x float> %243, float %207, i32 1
  %245 = insertelement <4 x float> %244, float %204, i32 2
  %246 = insertelement <4 x float> %245, float %181, i32 3
  %247 = fmul <4 x float> %242, %246
  %248 = fadd <4 x float> %238, %247
  %249 = insertelement <4 x float> undef, float %126, i32 0
  %250 = insertelement <4 x float> %249, float %126, i32 1
  %251 = insertelement <4 x float> %250, float %131, i32 2
  %252 = insertelement <4 x float> %251, float %131, i32 3
  %253 = insertelement <4 x float> undef, float %218, i32 0
  %254 = insertelement <4 x float> %253, float %180, i32 1
  %255 = shufflevector <4 x float> %254, <4 x float> %148, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %256 = fmul <4 x float> %252, %255
  %257 = fadd <4 x float> %248, %256
  %258 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 2, i64 1
  %259 = bitcast float* %226 to <4 x float>*
  store <4 x float> %257, <4 x float>* %259, align 4, !tbaa !14
  %260 = fmul float %228, %196
  %261 = fmul float %116, %207
  %262 = fadd float %260, %261
  %263 = fmul float %131, %180
  %264 = fadd float %262, %263
  %265 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 2, i64 2
  store float %264, float* %265, align 8, !tbaa !14
  switch i32 %157, label %324 [
    i32 2, label %.lr.ph20
    i32 0, label %273
    i32 1, label %298
    i32 3, label %298
  ]

.lr.ph20:                                         ; preds = %179, %._crit_edge21
  %indvars.iv52 = phi i64 [ %indvars.iv.next53, %._crit_edge21 ], [ 0, %179 ]
  %indvars.iv48 = phi i32 [ %indvars.iv.next49, %._crit_edge21 ], [ 1, %179 ]
  br label %266

; <label>:266                                     ; preds = %266, %.lr.ph20
  %indvars.iv46 = phi i64 [ %indvars.iv.next47, %266 ], [ 0, %.lr.ph20 ]
  %267 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 %indvars.iv52, i64 %indvars.iv46
  %268 = load float* %267, align 4, !tbaa !14
  %269 = fmul float %11, %268
  %270 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv52, i64 %indvars.iv46
  %271 = load float* %270, align 4, !tbaa !14
  %272 = fmul float %271, %269
  store float %272, float* %270, align 4, !tbaa !14
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 1
  %lftr.wideiv50 = trunc i64 %indvars.iv.next47 to i32
  %exitcond51 = icmp eq i32 %lftr.wideiv50, %indvars.iv48
  br i1 %exitcond51, label %._crit_edge21, label %266

._crit_edge21:                                    ; preds = %266
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %indvars.iv.next49 = add nuw nsw i32 %indvars.iv48, 1
  %exitcond54 = icmp eq i64 %indvars.iv.next53, 3
  br i1 %exitcond54, label %.preheader4, label %.lr.ph20

; <label>:273                                     ; preds = %179
  %274 = load float* %1, align 4, !tbaa !14
  %275 = load float* %3, align 4, !tbaa !14
  %276 = fmul float %274, %275
  %277 = fmul float %276, %264
  %278 = extractelement <4 x float> %257, i32 0
  %279 = fmul float %274, %278
  %280 = load float* %6, align 4, !tbaa !14
  %281 = fmul float %279, %280
  %282 = fadd float %277, %281
  %283 = extractelement <4 x float> %223, i32 0
  %284 = fmul float %275, %283
  %285 = fmul float %280, %284
  %286 = fadd float %282, %285
  %287 = fmul float %8, 3.000000e+00
  %288 = fdiv float %286, %287
  br label %.lr.ph24

.lr.ph24:                                         ; preds = %273, %._crit_edge25
  %indvars.iv61 = phi i64 [ 0, %273 ], [ %indvars.iv.next62, %._crit_edge25 ]
  %indvars.iv57 = phi i32 [ 1, %273 ], [ %indvars.iv.next58, %._crit_edge25 ]
  br label %289

; <label>:289                                     ; preds = %289, %.lr.ph24
  %indvars.iv55 = phi i64 [ %indvars.iv.next56, %289 ], [ 0, %.lr.ph24 ]
  %290 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 %indvars.iv61, i64 %indvars.iv55
  %291 = load float* %290, align 4, !tbaa !14
  %292 = fmul float %11, %291
  %293 = fmul float %288, %292
  %294 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv61, i64 %indvars.iv55
  %295 = load float* %294, align 4, !tbaa !14
  %296 = fmul float %295, %293
  %297 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv61, i64 %indvars.iv55
  store float %296, float* %297, align 4, !tbaa !14
  %indvars.iv.next56 = add nuw nsw i64 %indvars.iv55, 1
  %lftr.wideiv59 = trunc i64 %indvars.iv.next56 to i32
  %exitcond60 = icmp eq i32 %lftr.wideiv59, %indvars.iv57
  br i1 %exitcond60, label %._crit_edge25, label %289

._crit_edge25:                                    ; preds = %289
  %indvars.iv.next62 = add nuw nsw i64 %indvars.iv61, 1
  %indvars.iv.next58 = add nuw nsw i32 %indvars.iv57, 1
  %exitcond63 = icmp eq i64 %indvars.iv.next62, 3
  br i1 %exitcond63, label %.preheader4, label %.lr.ph24

; <label>:298                                     ; preds = %179, %179
  %299 = load float* %1, align 4, !tbaa !14
  %300 = extractelement <4 x float> %257, i32 0
  %301 = fmul float %299, %300
  %302 = load float* %3, align 4, !tbaa !14
  %303 = extractelement <4 x float> %223, i32 0
  %304 = fmul float %303, %302
  %305 = fadd float %301, %304
  %306 = fmul float %299, 2.000000e+00
  %307 = fmul float %306, %302
  %308 = fdiv float %305, %307
  br label %.lr.ph29

.lr.ph29:                                         ; preds = %298, %._crit_edge30
  %indvars.iv73 = phi i64 [ 0, %298 ], [ %indvars.iv.next74, %._crit_edge30 ]
  %indvars.iv69 = phi i32 [ 1, %298 ], [ %indvars.iv.next70, %._crit_edge30 ]
  br label %309

; <label>:309                                     ; preds = %309, %.lr.ph29
  %indvars.iv67 = phi i64 [ %indvars.iv.next68, %309 ], [ 0, %.lr.ph29 ]
  %310 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 %indvars.iv73, i64 %indvars.iv67
  %311 = load float* %310, align 4, !tbaa !14
  %312 = fmul float %11, %311
  %313 = fmul float %308, %312
  %314 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv73, i64 %indvars.iv67
  %315 = load float* %314, align 4, !tbaa !14
  %316 = fmul float %315, %313
  %317 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv73, i64 %indvars.iv67
  store float %316, float* %317, align 4, !tbaa !14
  %indvars.iv.next68 = add nuw nsw i64 %indvars.iv67, 1
  %lftr.wideiv71 = trunc i64 %indvars.iv.next68 to i32
  %exitcond72 = icmp eq i32 %lftr.wideiv71, %indvars.iv69
  br i1 %exitcond72, label %._crit_edge30, label %309

._crit_edge30:                                    ; preds = %309
  %indvars.iv.next74 = add nuw nsw i64 %indvars.iv73, 1
  %indvars.iv.next70 = add nuw nsw i32 %indvars.iv69, 1
  %exitcond75 = icmp eq i64 %indvars.iv.next74, 2
  br i1 %exitcond75, label %.preheader9, label %.lr.ph29

.preheader9:                                      ; preds = %._crit_edge30, %.preheader9
  %indvars.iv64 = phi i64 [ %indvars.iv.next65, %.preheader9 ], [ 0, %._crit_edge30 ]
  %318 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 2, i64 %indvars.iv64
  %319 = load float* %318, align 4, !tbaa !14
  %320 = fmul float %11, %319
  %321 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 2, i64 %indvars.iv64
  %322 = load float* %321, align 4, !tbaa !14
  %323 = fmul float %322, %320
  store float %323, float* %321, align 4, !tbaa !14
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 1
  %exitcond66 = icmp eq i64 %indvars.iv.next65, 3
  br i1 %exitcond66, label %.preheader4, label %.preheader9

; <label>:324                                     ; preds = %179
  %325 = icmp ugt i32 %157, 3
  br i1 %325, label %330, label %326

; <label>:326                                     ; preds = %324
  %327 = sext i32 %157 to i64
  %328 = getelementptr inbounds [5 x i8*]* @epcoupltype_names, i64 0, i64 %327
  %329 = load i8** %328, align 8, !tbaa !18
  br label %330

; <label>:330                                     ; preds = %324, %326
  %331 = phi i8* [ %329, %326 ], [ getelementptr inbounds ([10 x i8]* @.str5, i64 0, i64 0), %324 ]
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([63 x i8]* @.str4, i64 0, i64 0), i8* %331) #9
  br label %.preheader4

.preheader4:                                      ; preds = %.preheader9, %._crit_edge25, %._crit_edge21, %330
  %332 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 15
  br label %.lr.ph

.lr.ph:                                           ; preds = %.preheader4, %._crit_edge
  %indvars.iv43 = phi i64 [ 0, %.preheader4 ], [ %indvars.iv.next44, %._crit_edge ]
  %indvars.iv40 = phi i32 [ 1, %.preheader4 ], [ %indvars.iv.next41, %._crit_edge ]
  %maxchange.017 = phi float [ 0.000000e+00, %.preheader4 ], [ %maxchange.2, %._crit_edge ]
  %333 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv43, i64 %indvars.iv43
  %.pre97 = load float* %332, align 4, !tbaa !23
  br label %334

; <label>:334                                     ; preds = %334, %.lr.ph
  %335 = phi float [ %342, %334 ], [ %.pre97, %.lr.ph ]
  %indvars.iv38 = phi i64 [ %indvars.iv.next39, %334 ], [ 0, %.lr.ph ]
  %maxchange.116 = phi float [ %maxchange.2, %334 ], [ %maxchange.017, %.lr.ph ]
  %336 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv43, i64 %indvars.iv38
  %337 = load float* %336, align 4, !tbaa !14
  %338 = fmul float %335, %337
  %339 = getelementptr inbounds [3 x float]* %boxv, i64 %indvars.iv43, i64 %indvars.iv38
  %340 = load float* %339, align 4, !tbaa !14
  %341 = fadd float %340, %338
  store float %341, float* %339, align 4, !tbaa !14
  %342 = load float* %332, align 4, !tbaa !23
  %343 = fmul float %342, %341
  %344 = load float* %333, align 4, !tbaa !14
  %345 = fdiv float %343, %344
  %fabsf = tail call float @fabsf(float %345) #8
  %346 = fcmp ogt float %fabsf, %maxchange.116
  %maxchange.2 = select i1 %346, float %fabsf, float %maxchange.116
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next39 to i32
  %exitcond42 = icmp eq i32 %lftr.wideiv, %indvars.iv40
  br i1 %exitcond42, label %._crit_edge, label %334

._crit_edge:                                      ; preds = %334
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  %indvars.iv.next41 = add nuw nsw i32 %indvars.iv40, 1
  %exitcond45 = icmp eq i64 %indvars.iv.next44, 3
  br i1 %exitcond45, label %347, label %.lr.ph

; <label>:347                                     ; preds = %._crit_edge
  %348 = fpext float %maxchange.2 to double
  %349 = fcmp ogt double %348, 1.010000e+00
  %350 = load %struct.__sFILE** @stdlog, align 8
  %351 = icmp ne %struct.__sFILE* %350, null
  %or.cond = and i1 %349, %351
  br i1 %or.cond, label %352, label %354

; <label>:352                                     ; preds = %347
  %353 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %350, i8* getelementptr inbounds ([52 x i8]* @.str6, i64 0, i64 0), i32 %step) #9
  br label %354

; <label>:354                                     ; preds = %352, %347
  call fastcc void @mtmul([3 x float]* %boxv, [3 x float]* %box, [3 x float]* %183) #11
  br label %.preheader

.preheader:                                       ; preds = %361, %354
  %indvars.iv35 = phi i64 [ 0, %354 ], [ %indvars.iv.next36, %361 ]
  br label %355

; <label>:355                                     ; preds = %355, %.preheader
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %355 ]
  %356 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv, i64 %indvars.iv35
  %357 = load float* %356, align 4, !tbaa !14
  %358 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv35, i64 %indvars.iv
  %359 = load float* %358, align 4, !tbaa !14
  %360 = fadd float %357, %359
  store float %360, float* %358, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %361, label %355

; <label>:361                                     ; preds = %355
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, 3
  br i1 %exitcond37, label %362, label %.preheader

; <label>:362                                     ; preds = %361
  %363 = getelementptr inbounds [3 x [3 x float]]* %t2, i64 0, i64 0
  %364 = load float* %185, align 16, !tbaa !14
  %365 = load float* %224, align 4, !tbaa !14
  %366 = load float* %229, align 8, !tbaa !14
  %367 = load float* %186, align 4, !tbaa !14
  %368 = load float* %226, align 4, !tbaa !14
  %369 = load float* %258, align 4, !tbaa !14
  %370 = getelementptr inbounds [3 x [3 x float]]* %t2, i64 0, i64 1, i64 1
  %371 = load float* %187, align 8, !tbaa !14
  %372 = shufflevector <4 x float> %191, <4 x float> %106, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %373 = insertelement <4 x float> undef, float %364, i32 0
  %374 = insertelement <4 x float> %373, float %367, i32 1
  %375 = insertelement <4 x float> %374, float %371, i32 2
  %376 = insertelement <4 x float> %375, float %364, i32 3
  %377 = fmul <4 x float> %372, %376
  %378 = load float* %227, align 4, !tbaa !14
  %379 = insertelement <4 x float> %231, float %188, i32 2
  %380 = insertelement <4 x float> %379, float %111, i32 3
  %381 = insertelement <4 x float> undef, float %365, i32 0
  %382 = insertelement <4 x float> %381, float %368, i32 1
  %383 = insertelement <4 x float> %382, float %378, i32 2
  %384 = insertelement <4 x float> %383, float %365, i32 3
  %385 = fmul <4 x float> %380, %384
  %386 = fadd <4 x float> %377, %385
  %387 = load float* %265, align 8, !tbaa !14
  %388 = insertelement <4 x float> undef, float %228, i32 0
  %389 = insertelement <4 x float> %388, float %228, i32 1
  %390 = insertelement <4 x float> %389, float %228, i32 2
  %391 = insertelement <4 x float> %390, float %116, i32 3
  %392 = insertelement <4 x float> undef, float %366, i32 0
  %393 = insertelement <4 x float> %392, float %369, i32 1
  %394 = insertelement <4 x float> %393, float %387, i32 2
  %395 = insertelement <4 x float> %394, float %366, i32 3
  %396 = fmul <4 x float> %391, %395
  %397 = fadd <4 x float> %386, %396
  %398 = bitcast [3 x [3 x float]]* %t2 to <4 x float>*
  store <4 x float> %397, <4 x float>* %398, align 16, !tbaa !14
  %399 = insertelement <4 x float> %201, float %121, i32 2
  %400 = insertelement <4 x float> %399, float %121, i32 3
  %401 = insertelement <4 x float> undef, float %367, i32 0
  %402 = insertelement <4 x float> %401, float %371, i32 1
  %403 = insertelement <4 x float> %402, float %364, i32 2
  %404 = insertelement <4 x float> %403, float %367, i32 3
  %405 = fmul <4 x float> %400, %404
  %406 = insertelement <4 x float> %240, float %126, i32 2
  %407 = insertelement <4 x float> %406, float %126, i32 3
  %408 = insertelement <4 x float> undef, float %368, i32 0
  %409 = insertelement <4 x float> %408, float %378, i32 1
  %410 = insertelement <4 x float> %409, float %365, i32 2
  %411 = insertelement <4 x float> %410, float %368, i32 3
  %412 = fmul <4 x float> %407, %411
  %413 = fadd <4 x float> %405, %412
  %414 = insertelement <4 x float> undef, float %116, i32 0
  %415 = insertelement <4 x float> %414, float %116, i32 1
  %416 = insertelement <4 x float> %415, float %131, i32 2
  %417 = insertelement <4 x float> %416, float %131, i32 3
  %418 = insertelement <4 x float> undef, float %369, i32 0
  %419 = insertelement <4 x float> %418, float %387, i32 1
  %420 = insertelement <4 x float> %419, float %366, i32 2
  %421 = insertelement <4 x float> %420, float %369, i32 3
  %422 = fmul <4 x float> %417, %421
  %423 = fadd <4 x float> %413, %422
  %424 = bitcast float* %370 to <4 x float>*
  store <4 x float> %423, <4 x float>* %424, align 4, !tbaa !14
  %425 = fmul float %121, %371
  %426 = fmul float %126, %378
  %427 = fadd float %425, %426
  %428 = fmul float %131, %387
  %429 = fadd float %427, %428
  %430 = getelementptr inbounds [3 x [3 x float]]* %t2, i64 0, i64 2, i64 2
  store float %429, float* %430, align 8, !tbaa !14
  call fastcc void @mtmul([3 x float]* %363, [3 x float]* %40, [3 x float]* %M) #11
  call void @llvm.lifetime.end(i64 36, i8* %15) #6
  call void @llvm.lifetime.end(i64 36, i8* %14) #6
  call void @llvm.lifetime.end(i64 36, i8* %13) #6
  call void @llvm.lifetime.end(i64 36, i8* %12) #6
  ret void
}
