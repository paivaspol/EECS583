define void @parrinellorahman_pcoupl(%struct.t_inputrec* nocapture readonly %ir, i32 %step, [3 x float]* nocapture readonly %pres, [3 x float]* nocapture readonly %box, [3 x float]* nocapture %boxv, [3 x float]* nocapture %M) #4 {
  %invbox = alloca [3 x [3 x float]], align 16
  %pdiff = alloca [3 x [3 x float]], align 16
  %t1 = alloca [3 x [3 x float]], align 16
  %t2 = alloca [3 x [3 x float]], align 16
  tail call void @llvm.dbg.value(metadata %struct.t_inputrec* %ir, i64 0, metadata !491, metadata !671), !dbg !922
  tail call void @llvm.dbg.value(metadata i32 %step, i64 0, metadata !492, metadata !671), !dbg !923
  tail call void @llvm.dbg.value(metadata [3 x float]* %pres, i64 0, metadata !493, metadata !671), !dbg !924
  tail call void @llvm.dbg.value(metadata [3 x float]* %box, i64 0, metadata !494, metadata !671), !dbg !925
  tail call void @llvm.dbg.value(metadata [3 x float]* %boxv, i64 0, metadata !495, metadata !671), !dbg !926
  tail call void @llvm.dbg.value(metadata [3 x float]* %M, i64 0, metadata !496, metadata !671), !dbg !927
  %1 = getelementptr inbounds [3 x float]* %box, i64 0, i64 0, !dbg !928
  %2 = load float* %1, align 4, !dbg !928, !tbaa !799
  %3 = getelementptr inbounds [3 x float]* %box, i64 1, i64 1, !dbg !929
  %4 = load float* %3, align 4, !dbg !929, !tbaa !799
  %5 = fmul float %2, %4, !dbg !930
  %6 = getelementptr inbounds [3 x float]* %box, i64 2, i64 2, !dbg !931
  %7 = load float* %6, align 4, !dbg !931, !tbaa !799
  %8 = fmul float %5, %7, !dbg !932
  tail call void @llvm.dbg.value(metadata float %8, i64 0, metadata !499, metadata !671), !dbg !933
  %9 = fpext float %8 to double, !dbg !934
  %10 = fdiv double %9, 1.660540e+01, !dbg !935
  %11 = fptrunc double %10 to float, !dbg !934
  tail call void @llvm.dbg.value(metadata float %11, i64 0, metadata !500, metadata !671), !dbg !936
  %12 = bitcast [3 x [3 x float]]* %invbox to i8*, !dbg !937
  call void @llvm.lifetime.start(i64 36, i8* %12) #6, !dbg !937
  tail call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %invbox, metadata !506, metadata !671), !dbg !938
  %13 = bitcast [3 x [3 x float]]* %pdiff to i8*, !dbg !937
  call void @llvm.lifetime.start(i64 36, i8* %13) #6, !dbg !937
  tail call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %pdiff, metadata !507, metadata !671), !dbg !939
  %14 = bitcast [3 x [3 x float]]* %t1 to i8*, !dbg !937
  call void @llvm.lifetime.start(i64 36, i8* %14) #6, !dbg !937
  tail call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %t1, metadata !508, metadata !671), !dbg !940
  %15 = bitcast [3 x [3 x float]]* %t2 to i8*, !dbg !937
  call void @llvm.lifetime.start(i64 36, i8* %15) #6, !dbg !937
  tail call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %t2, metadata !509, metadata !671), !dbg !941
  %.b = load i1* @parrinellorahman_pcoupl.bFirst, align 1
  br i1 %.b, label %36, label %16, !dbg !942

; <label>:16                                      ; preds = %0
  %17 = fcmp ogt float %2, %4, !dbg !943
  %. = select i1 %17, float %2, float %4, !dbg !943
  tail call void @llvm.dbg.value(metadata float %., i64 0, metadata !510, metadata !671), !dbg !944
  %18 = fcmp ogt float %., %7, !dbg !945
  %19 = select i1 %18, float %., float %7, !dbg !945
  %20 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 30, !dbg !946
  br label %.preheader12, !dbg !951

.preheader12:                                     ; preds = %34, %16
  %indvars.iv82 = phi i64 [ 0, %16 ], [ %indvars.iv.next83, %34 ]
  br label %21, !dbg !952

; <label>:21                                      ; preds = %21, %.preheader12
  %indvars.iv79 = phi i64 [ 0, %.preheader12 ], [ %indvars.iv.next80, %21 ]
  %22 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 32, i64 %indvars.iv82, i64 %indvars.iv79, !dbg !953
  %23 = load float* %22, align 4, !dbg !953, !tbaa !799
  %24 = fpext float %23 to double, !dbg !953
  %25 = fmul double %24, 0x4043BD3CC9BE45DE, !dbg !954
  %26 = load float* %20, align 4, !dbg !946, !tbaa !955
  %27 = fmul float %26, 3.000000e+00, !dbg !958
  %28 = fmul float %26, %27, !dbg !959
  %29 = fmul float %19, %28, !dbg !960
  %30 = fpext float %29 to double, !dbg !961
  %31 = fdiv double %25, %30, !dbg !962
  %32 = fptrunc double %31 to float, !dbg !963
  %33 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 %indvars.iv82, i64 %indvars.iv79, !dbg !964
  store float %32, float* %33, align 4, !dbg !965, !tbaa !799
  %indvars.iv.next80 = add nuw nsw i64 %indvars.iv79, 1, !dbg !952
  %exitcond81 = icmp eq i64 %indvars.iv.next80, 3, !dbg !952
  br i1 %exitcond81, label %34, label %21, !dbg !952

; <label>:34                                      ; preds = %21
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1, !dbg !951
  %exitcond84 = icmp eq i64 %indvars.iv.next83, 3, !dbg !951
  br i1 %exitcond84, label %35, label %.preheader12, !dbg !951

; <label>:35                                      ; preds = %34
  store i1 true, i1* @parrinellorahman_pcoupl.bFirst, align 1
  %.pre = load float* %1, align 4, !dbg !966, !tbaa !799
  %.pre85 = load float* %3, align 4, !dbg !969, !tbaa !799
  %.pre86 = load float* %6, align 4, !dbg !970, !tbaa !799
  br label %36, !dbg !971

; <label>:36                                      ; preds = %0, %35
  %37 = phi float [ %7, %0 ], [ %.pre86, %35 ]
  %38 = phi float [ %4, %0 ], [ %.pre85, %35 ]
  %39 = phi float [ %2, %0 ], [ %.pre, %35 ]
  %40 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 0, !dbg !972
  tail call void @llvm.dbg.value(metadata [3 x float]* %box, i64 0, metadata !633, metadata !671) #6, !dbg !973
  tail call void @llvm.dbg.value(metadata [3 x float]* %40, i64 0, metadata !634, metadata !671) #6, !dbg !974
  tail call void @llvm.dbg.value(metadata float 0x3C32725DE0000000, i64 0, metadata !635, metadata !671) #6, !dbg !975
  tail call void @llvm.dbg.value(metadata float 0x43ABC16D60000000, i64 0, metadata !636, metadata !671) #6, !dbg !976
  tail call void @llvm.dbg.value(metadata [3 x float]* %box, i64 0, metadata !628, metadata !671) #6, !dbg !977
  %41 = fmul float %38, %37, !dbg !978
  %42 = getelementptr inbounds [3 x float]* %box, i64 2, i64 1, !dbg !979
  %43 = load float* %42, align 4, !dbg !979, !tbaa !799
  %44 = getelementptr inbounds [3 x float]* %box, i64 1, i64 2, !dbg !980
  %45 = load float* %44, align 4, !dbg !980, !tbaa !799
  %46 = fmul float %43, %45, !dbg !981
  %47 = fsub float %41, %46, !dbg !982
  %48 = fmul float %39, %47, !dbg !983
  %49 = getelementptr inbounds [3 x float]* %box, i64 1, i64 0, !dbg !984
  %50 = load float* %49, align 4, !dbg !984, !tbaa !799
  %51 = getelementptr inbounds [3 x float]* %box, i64 0, i64 1, !dbg !985
  %52 = load float* %51, align 4, !dbg !985, !tbaa !799
  %53 = fmul float %37, %52, !dbg !986
  %54 = getelementptr inbounds [3 x float]* %box, i64 0, i64 2, !dbg !987
  %55 = load float* %54, align 4, !dbg !987, !tbaa !799
  %56 = fmul float %43, %55, !dbg !988
  %57 = fsub float %53, %56, !dbg !989
  %58 = fmul float %50, %57, !dbg !990
  %59 = fsub float %48, %58, !dbg !991
  %60 = getelementptr inbounds [3 x float]* %box, i64 2, i64 0, !dbg !992
  %61 = load float* %60, align 4, !dbg !992, !tbaa !799
  %62 = fmul float %45, %52, !dbg !993
  %63 = fmul float %38, %55, !dbg !994
  %64 = fsub float %62, %63, !dbg !995
  %65 = fmul float %61, %64, !dbg !996
  %66 = fadd float %65, %59, !dbg !997
  tail call void @llvm.dbg.value(metadata float %66, i64 0, metadata !637, metadata !671) #6, !dbg !998
  %67 = fdiv float 1.000000e+00, %66, !dbg !999
  tail call void @llvm.dbg.value(metadata float %67, i64 0, metadata !638, metadata !671) #6, !dbg !1000
  %fabsf.i = tail call float @fabsf(float %67) #8, !dbg !1001
  tail call void @llvm.dbg.value(metadata float %fabsf.i, i64 0, metadata !639, metadata !671) #6, !dbg !1002
  %68 = fcmp ole float %fabsf.i, 0x3C32725DE0000000, !dbg !1003
  %69 = fcmp oge float %fabsf.i, 0x43ABC16D60000000, !dbg !1005
  %or.cond.i = or i1 %68, %69, !dbg !1006
  br i1 %or.cond.i, label %70, label %m_inv.exit, !dbg !1006

; <label>:70                                      ; preds = %36
  %71 = fpext float %67 to double, !dbg !1007
  %72 = fdiv double 1.000000e+00, %71, !dbg !1008
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([17 x i8]* @.str15, i64 0, i64 0), double %72) #9, !dbg !1009
  %.pre.i = load float* %3, align 4, !dbg !1010, !tbaa !799
  %.pre2.i = load float* %6, align 4, !dbg !1011, !tbaa !799
  %.pre3.i = load float* %42, align 4, !dbg !1012, !tbaa !799
  %.pre4.i = load float* %44, align 4, !dbg !1013, !tbaa !799
  %.pre87 = load float* %51, align 4, !dbg !1014, !tbaa !799
  %.pre88 = load float* %54, align 4, !dbg !1015, !tbaa !799
  %.pre89 = load float* %49, align 4, !dbg !1016, !tbaa !799
  %.pre90 = load float* %60, align 4, !dbg !1017, !tbaa !799
  %.pre91 = load float* %1, align 4, !dbg !1018, !tbaa !799
  br label %m_inv.exit, !dbg !1009

m_inv.exit:                                       ; preds = %36, %70
  %73 = phi float [ %39, %36 ], [ %.pre91, %70 ]
  %74 = phi float [ %61, %36 ], [ %.pre90, %70 ]
  %75 = phi float [ %50, %36 ], [ %.pre89, %70 ]
  %76 = phi float [ %55, %36 ], [ %.pre88, %70 ]
  %77 = phi float [ %52, %36 ], [ %.pre87, %70 ]
  %78 = phi float [ %45, %36 ], [ %.pre4.i, %70 ], !dbg !1019
  %79 = phi float [ %43, %36 ], [ %.pre3.i, %70 ], !dbg !1019
  %80 = phi float [ %37, %36 ], [ %.pre2.i, %70 ], !dbg !1019
  %81 = phi float [ %38, %36 ], [ %.pre.i, %70 ], !dbg !1019
  %82 = fmul float %80, %81, !dbg !1020
  %83 = fmul float %78, %79, !dbg !1021
  %84 = fsub float %82, %83, !dbg !1022
  %85 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 0, i64 0, !dbg !1023
  %86 = fsub float -0.000000e+00, %67, !dbg !1024
  %87 = fmul float %77, %80, !dbg !1025
  %88 = fmul float %79, %76, !dbg !1026
  %89 = fsub float %87, %88, !dbg !1027
  %90 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 0, i64 1, !dbg !1028
  %91 = fmul float %77, %78, !dbg !1029
  %92 = fmul float %81, %76, !dbg !1030
  %93 = fsub float %91, %92, !dbg !1031
  %94 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 0, i64 2, !dbg !1032
  %95 = fmul float %75, %80, !dbg !1033
  %96 = fmul float %74, %78, !dbg !1034
  %97 = fsub float %95, %96, !dbg !1035
  %98 = insertelement <4 x float> undef, float %67, i32 0, !dbg !1036
  %99 = insertelement <4 x float> %98, float %89, i32 1, !dbg !1036
  %100 = insertelement <4 x float> %99, float %67, i32 2, !dbg !1036
  %101 = insertelement <4 x float> %100, float %97, i32 3, !dbg !1036
  %102 = insertelement <4 x float> undef, float %84, i32 0, !dbg !1036
  %103 = insertelement <4 x float> %102, float %86, i32 1, !dbg !1036
  %104 = insertelement <4 x float> %103, float %93, i32 2, !dbg !1036
  %105 = insertelement <4 x float> %104, float %86, i32 3, !dbg !1036
  %106 = fmul <4 x float> %101, %105, !dbg !1036
  %107 = bitcast [3 x [3 x float]]* %invbox to <4 x float>*, !dbg !1037
  store <4 x float> %106, <4 x float>* %107, align 16, !dbg !1037, !tbaa !799
  %108 = fmul float %73, %80, !dbg !1038
  %109 = fmul float %74, %76, !dbg !1039
  %110 = fsub float %108, %109, !dbg !1040
  %111 = fmul float %67, %110, !dbg !1041
  %112 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 1, i64 1, !dbg !1042
  store float %111, float* %112, align 4, !dbg !1043, !tbaa !799
  %113 = fmul float %73, %78, !dbg !1044
  %114 = fmul float %75, %76, !dbg !1045
  %115 = fsub float %113, %114, !dbg !1046
  %116 = fmul float %115, %86, !dbg !1047
  %117 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 1, i64 2, !dbg !1048
  store float %116, float* %117, align 4, !dbg !1049, !tbaa !799
  %118 = fmul float %75, %79, !dbg !1050
  %119 = fmul float %74, %81, !dbg !1051
  %120 = fsub float %118, %119, !dbg !1052
  %121 = fmul float %67, %120, !dbg !1053
  %122 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 2, i64 0, !dbg !1054
  store float %121, float* %122, align 8, !dbg !1055, !tbaa !799
  %123 = fmul float %73, %79, !dbg !1056
  %124 = fmul float %74, %77, !dbg !1057
  %125 = fsub float %123, %124, !dbg !1058
  %126 = fmul float %125, %86, !dbg !1059
  %127 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 2, i64 1, !dbg !1060
  store float %126, float* %127, align 4, !dbg !1061, !tbaa !799
  %128 = fmul float %73, %81, !dbg !1062
  %129 = fmul float %75, %77, !dbg !1063
  %130 = fsub float %128, %129, !dbg !1064
  %131 = fmul float %67, %130, !dbg !1065
  %132 = getelementptr inbounds [3 x [3 x float]]* %invbox, i64 0, i64 2, i64 2, !dbg !1066
  store float %131, float* %132, align 8, !dbg !1067, !tbaa !799
  tail call void @llvm.dbg.value(metadata [3 x float]* %pres, i64 0, metadata !644, metadata !671), !dbg !1068
  %133 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 31, i64 0, i64 0, !dbg !1070
  %134 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 0, i64 0, !dbg !1071
  %135 = bitcast [3 x float]* %pres to <4 x float>*, !dbg !1072
  %136 = load <4 x float>* %135, align 4, !dbg !1072, !tbaa !799
  %137 = bitcast float* %133 to <4 x float>*, !dbg !1070
  %138 = load <4 x float>* %137, align 4, !dbg !1070, !tbaa !799
  %139 = fsub <4 x float> %136, %138, !dbg !1073
  %140 = bitcast [3 x [3 x float]]* %pdiff to <4 x float>*, !dbg !1074
  store <4 x float> %139, <4 x float>* %140, align 16, !dbg !1074, !tbaa !799
  %141 = getelementptr inbounds [3 x float]* %pres, i64 1, i64 1, !dbg !1075
  %142 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 31, i64 1, i64 1, !dbg !1076
  %143 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 1, i64 1, !dbg !1077
  %144 = bitcast float* %141 to <4 x float>*, !dbg !1075
  %145 = load <4 x float>* %144, align 4, !dbg !1075, !tbaa !799
  %146 = bitcast float* %142 to <4 x float>*, !dbg !1076
  %147 = load <4 x float>* %146, align 4, !dbg !1076, !tbaa !799
  %148 = fsub <4 x float> %145, %147, !dbg !1078
  %149 = bitcast float* %143 to <4 x float>*, !dbg !1079
  store <4 x float> %148, <4 x float>* %149, align 4, !dbg !1079, !tbaa !799
  %150 = getelementptr inbounds [3 x float]* %pres, i64 2, i64 2, !dbg !1080
  %151 = load float* %150, align 4, !dbg !1080, !tbaa !799
  %152 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 31, i64 2, i64 2, !dbg !1081
  %153 = load float* %152, align 4, !dbg !1081, !tbaa !799
  %154 = fsub float %151, %153, !dbg !1082
  %155 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 2, i64 2, !dbg !1083
  store float %154, float* %155, align 8, !dbg !1084, !tbaa !799
  %156 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 29, !dbg !1085
  %157 = load i32* %156, align 4, !dbg !1085, !tbaa !1087
  %158 = icmp eq i32 %157, 3, !dbg !1088
  %159 = extractelement <4 x float> %139, i32 0, !dbg !1089
  %160 = extractelement <4 x float> %148, i32 0, !dbg !1089
  br i1 %158, label %161, label %179, !dbg !1089

; <label>:161                                     ; preds = %m_inv.exit
  %162 = extractelement <4 x float> %136, i32 0, !dbg !1090
  %163 = extractelement <4 x float> %145, i32 0, !dbg !1090
  %164 = fadd float %162, %163, !dbg !1090
  %165 = fmul float %164, 5.000000e-01, !dbg !1092
  tail call void @llvm.dbg.value(metadata float %165, i64 0, metadata !505, metadata !671), !dbg !1093
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !497, metadata !671), !dbg !1094
  %166 = getelementptr inbounds [3 x float]* %box, i64 0, i64 0, !dbg !1095
  %167 = load float* %166, align 4, !dbg !1095, !tbaa !799
  %168 = extractelement <4 x float> %138, i32 0, !dbg !1098
  %169 = fdiv float %168, %167, !dbg !1098
  %170 = fsub float %151, %169, !dbg !1099
  %171 = fsub float %165, %170, !dbg !1100
  %172 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 0, i64 0, !dbg !1101
  store float %171, float* %172, align 16, !dbg !1102, !tbaa !799
  br label %._crit_edge92, !dbg !1103

._crit_edge92:                                    ; preds = %161, %._crit_edge92
  %indvars.iv.next77100 = phi i64 [ 1, %161 ], [ %indvars.iv.next77, %._crit_edge92 ]
  %.phi.trans.insert = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 31, i64 %indvars.iv.next77100, i64 %indvars.iv.next77100
  %.pre93 = load float* %.phi.trans.insert, align 4, !dbg !1104, !tbaa !799
  %173 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv.next77100, i64 %indvars.iv.next77100, !dbg !1095
  %174 = load float* %173, align 4, !dbg !1095, !tbaa !799
  %175 = fdiv float %.pre93, %174, !dbg !1098
  %176 = fsub float %151, %175, !dbg !1099
  %177 = fsub float %165, %176, !dbg !1100
  %178 = getelementptr inbounds [3 x [3 x float]]* %pdiff, i64 0, i64 %indvars.iv.next77100, i64 %indvars.iv.next77100, !dbg !1101
  store float %177, float* %178, align 4, !dbg !1102, !tbaa !799
  %indvars.iv.next77 = add nuw nsw i64 %indvars.iv.next77100, 1, !dbg !1103
  %exitcond78 = icmp eq i64 %indvars.iv.next77, 2, !dbg !1103
  br i1 %exitcond78, label %.loopexit, label %._crit_edge92, !dbg !1103

.loopexit:                                        ; preds = %._crit_edge92
  %.pre94 = load float* %134, align 16, !dbg !1105, !tbaa !799
  %.pre95 = load float* %143, align 4, !dbg !1107, !tbaa !799
  %.pre96 = load float* %155, align 8, !dbg !1108, !tbaa !799
  br label %179

; <label>:179                                     ; preds = %.loopexit, %m_inv.exit
  %180 = phi float [ %.pre96, %.loopexit ], [ %154, %m_inv.exit ]
  %181 = phi float [ %.pre95, %.loopexit ], [ %160, %m_inv.exit ]
  %182 = phi float [ %.pre94, %.loopexit ], [ %159, %m_inv.exit ]
  %183 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 0, !dbg !1109
  tail call void @llvm.dbg.value(metadata [3 x float]* %40, i64 0, metadata !649, metadata !671), !dbg !1110
  tail call void @llvm.dbg.value(metadata [3 x float]* %183, i64 0, metadata !651, metadata !671), !dbg !1111
  %184 = load float* %85, align 16, !dbg !1112, !tbaa !799
  %185 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 0, i64 0, !dbg !1113
  %186 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 0, i64 1, !dbg !1114
  %187 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 0, i64 2, !dbg !1115
  %188 = load float* %90, align 4, !dbg !1116, !tbaa !799
  %189 = insertelement <4 x float> undef, float %184, i32 0, !dbg !1117
  %190 = insertelement <4 x float> %189, float %184, i32 1, !dbg !1117
  %191 = insertelement <4 x float> %190, float %184, i32 2, !dbg !1117
  %192 = insertelement <4 x float> %191, float %188, i32 3, !dbg !1117
  %193 = insertelement <4 x float> undef, float %182, i32 0, !dbg !1117
  %194 = extractelement <4 x float> %139, i32 1, !dbg !1117
  %195 = insertelement <4 x float> %193, float %194, i32 1, !dbg !1117
  %196 = extractelement <4 x float> %139, i32 2, !dbg !1117
  %197 = insertelement <4 x float> %195, float %196, i32 2, !dbg !1117
  %198 = insertelement <4 x float> %197, float %182, i32 3, !dbg !1117
  %199 = fmul <4 x float> %192, %198, !dbg !1117
  %200 = extractelement <4 x float> %106, i32 3, !dbg !1118
  %201 = shufflevector <4 x float> %106, <4 x float> undef, <4 x i32> <i32 3, i32 3, i32 undef, i32 undef>, !dbg !1118
  %202 = insertelement <4 x float> %201, float %200, i32 2, !dbg !1118
  %203 = insertelement <4 x float> %202, float %111, i32 3, !dbg !1118
  %204 = extractelement <4 x float> %139, i32 3, !dbg !1118
  %205 = insertelement <4 x float> undef, float %204, i32 0, !dbg !1118
  %206 = insertelement <4 x float> %205, float %181, i32 1, !dbg !1118
  %207 = extractelement <4 x float> %148, i32 1, !dbg !1118
  %208 = shufflevector <4 x float> %206, <4 x float> %148, <4 x i32> <i32 0, i32 1, i32 5, i32 undef>, !dbg !1118
  %209 = shufflevector <4 x float> %208, <4 x float> %139, <4 x i32> <i32 0, i32 1, i32 2, i32 7>, !dbg !1118
  %210 = fmul <4 x float> %203, %209, !dbg !1118
  %211 = fadd <4 x float> %199, %210, !dbg !1119
  %212 = insertelement <4 x float> undef, float %121, i32 0, !dbg !1120
  %213 = insertelement <4 x float> %212, float %121, i32 1, !dbg !1120
  %214 = insertelement <4 x float> %213, float %121, i32 2, !dbg !1120
  %215 = insertelement <4 x float> %214, float %126, i32 3, !dbg !1120
  %216 = extractelement <4 x float> %148, i32 2, !dbg !1120
  %217 = insertelement <4 x float> undef, float %216, i32 0, !dbg !1120
  %218 = extractelement <4 x float> %148, i32 3, !dbg !1120
  %219 = insertelement <4 x float> %217, float %218, i32 1, !dbg !1120
  %220 = insertelement <4 x float> %219, float %180, i32 2, !dbg !1120
  %221 = shufflevector <4 x float> %220, <4 x float> %148, <4 x i32> <i32 0, i32 1, i32 2, i32 6>, !dbg !1120
  %222 = fmul <4 x float> %215, %221, !dbg !1120
  %223 = fadd <4 x float> %211, %222, !dbg !1121
  %224 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 1, i64 0, !dbg !1122
  %225 = bitcast [3 x [3 x float]]* %t1 to <4 x float>*, !dbg !1123
  store <4 x float> %223, <4 x float>* %225, align 16, !dbg !1123, !tbaa !799
  %226 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 1, i64 1, !dbg !1124
  %227 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 1, i64 2, !dbg !1125
  %228 = load float* %94, align 8, !dbg !1126, !tbaa !799
  %229 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 2, i64 0, !dbg !1127
  %230 = insertelement <4 x float> undef, float %188, i32 0, !dbg !1128
  %231 = insertelement <4 x float> %230, float %188, i32 1, !dbg !1128
  %232 = insertelement <4 x float> %231, float %228, i32 2, !dbg !1128
  %233 = insertelement <4 x float> %232, float %228, i32 3, !dbg !1128
  %234 = insertelement <4 x float> undef, float %194, i32 0, !dbg !1128
  %235 = insertelement <4 x float> %234, float %196, i32 1, !dbg !1128
  %236 = insertelement <4 x float> %235, float %182, i32 2, !dbg !1128
  %237 = shufflevector <4 x float> %236, <4 x float> %139, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !1128
  %238 = fmul <4 x float> %233, %237, !dbg !1128
  %239 = insertelement <4 x float> undef, float %111, i32 0, !dbg !1129
  %240 = insertelement <4 x float> %239, float %111, i32 1, !dbg !1129
  %241 = insertelement <4 x float> %240, float %116, i32 2, !dbg !1129
  %242 = insertelement <4 x float> %241, float %116, i32 3, !dbg !1129
  %243 = insertelement <4 x float> undef, float %181, i32 0, !dbg !1129
  %244 = insertelement <4 x float> %243, float %207, i32 1, !dbg !1129
  %245 = insertelement <4 x float> %244, float %204, i32 2, !dbg !1129
  %246 = insertelement <4 x float> %245, float %181, i32 3, !dbg !1129
  %247 = fmul <4 x float> %242, %246, !dbg !1129
  %248 = fadd <4 x float> %238, %247, !dbg !1130
  %249 = insertelement <4 x float> undef, float %126, i32 0, !dbg !1131
  %250 = insertelement <4 x float> %249, float %126, i32 1, !dbg !1131
  %251 = insertelement <4 x float> %250, float %131, i32 2, !dbg !1131
  %252 = insertelement <4 x float> %251, float %131, i32 3, !dbg !1131
  %253 = insertelement <4 x float> undef, float %218, i32 0, !dbg !1131
  %254 = insertelement <4 x float> %253, float %180, i32 1, !dbg !1131
  %255 = shufflevector <4 x float> %254, <4 x float> %148, <4 x i32> <i32 0, i32 1, i32 6, i32 7>, !dbg !1131
  %256 = fmul <4 x float> %252, %255, !dbg !1131
  %257 = fadd <4 x float> %248, %256, !dbg !1132
  %258 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 2, i64 1, !dbg !1133
  %259 = bitcast float* %226 to <4 x float>*, !dbg !1134
  store <4 x float> %257, <4 x float>* %259, align 4, !dbg !1134, !tbaa !799
  %260 = fmul float %228, %196, !dbg !1135
  %261 = fmul float %116, %207, !dbg !1136
  %262 = fadd float %260, %261, !dbg !1137
  %263 = fmul float %131, %180, !dbg !1138
  %264 = fadd float %262, %263, !dbg !1139
  %265 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 2, i64 2, !dbg !1140
  store float %264, float* %265, align 8, !dbg !1141, !tbaa !799
  switch i32 %157, label %324 [
    i32 2, label %.lr.ph20
    i32 0, label %273
    i32 1, label %298
    i32 3, label %298
  ], !dbg !1142

.lr.ph20:                                         ; preds = %179, %._crit_edge21
  %indvars.iv52 = phi i64 [ %indvars.iv.next53, %._crit_edge21 ], [ 0, %179 ]
  %indvars.iv48 = phi i32 [ %indvars.iv.next49, %._crit_edge21 ], [ 1, %179 ]
  br label %266, !dbg !1143

; <label>:266                                     ; preds = %266, %.lr.ph20
  %indvars.iv46 = phi i64 [ %indvars.iv.next47, %266 ], [ 0, %.lr.ph20 ]
  %267 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 %indvars.iv52, i64 %indvars.iv46, !dbg !1148
  %268 = load float* %267, align 4, !dbg !1148, !tbaa !799
  %269 = fmul float %11, %268, !dbg !1150
  %270 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv52, i64 %indvars.iv46, !dbg !1151
  %271 = load float* %270, align 4, !dbg !1152, !tbaa !799
  %272 = fmul float %271, %269, !dbg !1152
  store float %272, float* %270, align 4, !dbg !1152, !tbaa !799
  %indvars.iv.next47 = add nuw nsw i64 %indvars.iv46, 1, !dbg !1143
  %lftr.wideiv50 = trunc i64 %indvars.iv.next47 to i32, !dbg !1143
  %exitcond51 = icmp eq i32 %lftr.wideiv50, %indvars.iv48, !dbg !1143
  br i1 %exitcond51, label %._crit_edge21, label %266, !dbg !1143

._crit_edge21:                                    ; preds = %266
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1, !dbg !1153
  %indvars.iv.next49 = add nuw nsw i32 %indvars.iv48, 1, !dbg !1153
  %exitcond54 = icmp eq i64 %indvars.iv.next53, 3, !dbg !1153
  br i1 %exitcond54, label %.preheader4, label %.lr.ph20, !dbg !1153

; <label>:273                                     ; preds = %179
  %274 = load float* %1, align 4, !dbg !1154, !tbaa !799
  %275 = load float* %3, align 4, !dbg !1155, !tbaa !799
  %276 = fmul float %274, %275, !dbg !1156
  %277 = fmul float %276, %264, !dbg !1157
  %278 = extractelement <4 x float> %257, i32 0, !dbg !1158
  %279 = fmul float %274, %278, !dbg !1158
  %280 = load float* %6, align 4, !dbg !1159, !tbaa !799
  %281 = fmul float %279, %280, !dbg !1160
  %282 = fadd float %277, %281, !dbg !1161
  %283 = extractelement <4 x float> %223, i32 0, !dbg !1162
  %284 = fmul float %275, %283, !dbg !1162
  %285 = fmul float %280, %284, !dbg !1163
  %286 = fadd float %282, %285, !dbg !1164
  tail call void @llvm.dbg.value(metadata float %286, i64 0, metadata !501, metadata !671), !dbg !1165
  %287 = fmul float %8, 3.000000e+00, !dbg !1166
  %288 = fdiv float %286, %287, !dbg !1167
  tail call void @llvm.dbg.value(metadata float %288, i64 0, metadata !502, metadata !671), !dbg !1168
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !497, metadata !671), !dbg !1094
  br label %.lr.ph24, !dbg !1169

.lr.ph24:                                         ; preds = %273, %._crit_edge25
  %indvars.iv61 = phi i64 [ 0, %273 ], [ %indvars.iv.next62, %._crit_edge25 ]
  %indvars.iv57 = phi i32 [ 1, %273 ], [ %indvars.iv.next58, %._crit_edge25 ]
  br label %289, !dbg !1171

; <label>:289                                     ; preds = %289, %.lr.ph24
  %indvars.iv55 = phi i64 [ %indvars.iv.next56, %289 ], [ 0, %.lr.ph24 ]
  %290 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 %indvars.iv61, i64 %indvars.iv55, !dbg !1174
  %291 = load float* %290, align 4, !dbg !1174, !tbaa !799
  %292 = fmul float %11, %291, !dbg !1176
  %293 = fmul float %288, %292, !dbg !1177
  %294 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv61, i64 %indvars.iv55, !dbg !1178
  %295 = load float* %294, align 4, !dbg !1178, !tbaa !799
  %296 = fmul float %295, %293, !dbg !1179
  %297 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv61, i64 %indvars.iv55, !dbg !1180
  store float %296, float* %297, align 4, !dbg !1181, !tbaa !799
  %indvars.iv.next56 = add nuw nsw i64 %indvars.iv55, 1, !dbg !1171
  %lftr.wideiv59 = trunc i64 %indvars.iv.next56 to i32, !dbg !1171
  %exitcond60 = icmp eq i32 %lftr.wideiv59, %indvars.iv57, !dbg !1171
  br i1 %exitcond60, label %._crit_edge25, label %289, !dbg !1171

._crit_edge25:                                    ; preds = %289
  %indvars.iv.next62 = add nuw nsw i64 %indvars.iv61, 1, !dbg !1169
  %indvars.iv.next58 = add nuw nsw i32 %indvars.iv57, 1, !dbg !1169
  %exitcond63 = icmp eq i64 %indvars.iv.next62, 3, !dbg !1169
  br i1 %exitcond63, label %.preheader4, label %.lr.ph24, !dbg !1169

; <label>:298                                     ; preds = %179, %179
  %299 = load float* %1, align 4, !dbg !1182, !tbaa !799
  %300 = extractelement <4 x float> %257, i32 0, !dbg !1183
  %301 = fmul float %299, %300, !dbg !1183
  %302 = load float* %3, align 4, !dbg !1184, !tbaa !799
  %303 = extractelement <4 x float> %223, i32 0, !dbg !1185
  %304 = fmul float %303, %302, !dbg !1185
  %305 = fadd float %301, %304, !dbg !1186
  tail call void @llvm.dbg.value(metadata float %305, i64 0, metadata !501, metadata !671), !dbg !1165
  %306 = fmul float %299, 2.000000e+00, !dbg !1187
  %307 = fmul float %306, %302, !dbg !1188
  %308 = fdiv float %305, %307, !dbg !1189
  tail call void @llvm.dbg.value(metadata float %308, i64 0, metadata !502, metadata !671), !dbg !1168
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !497, metadata !671), !dbg !1094
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !498, metadata !671), !dbg !1190
  br label %.lr.ph29, !dbg !1191

.lr.ph29:                                         ; preds = %298, %._crit_edge30
  %indvars.iv73 = phi i64 [ 0, %298 ], [ %indvars.iv.next74, %._crit_edge30 ]
  %indvars.iv69 = phi i32 [ 1, %298 ], [ %indvars.iv.next70, %._crit_edge30 ]
  br label %309, !dbg !1193

; <label>:309                                     ; preds = %309, %.lr.ph29
  %indvars.iv67 = phi i64 [ %indvars.iv.next68, %309 ], [ 0, %.lr.ph29 ]
  %310 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 %indvars.iv73, i64 %indvars.iv67, !dbg !1196
  %311 = load float* %310, align 4, !dbg !1196, !tbaa !799
  %312 = fmul float %11, %311, !dbg !1198
  %313 = fmul float %308, %312, !dbg !1199
  %314 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv73, i64 %indvars.iv67, !dbg !1200
  %315 = load float* %314, align 4, !dbg !1200, !tbaa !799
  %316 = fmul float %315, %313, !dbg !1201
  %317 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv73, i64 %indvars.iv67, !dbg !1202
  store float %316, float* %317, align 4, !dbg !1203, !tbaa !799
  %indvars.iv.next68 = add nuw nsw i64 %indvars.iv67, 1, !dbg !1193
  %lftr.wideiv71 = trunc i64 %indvars.iv.next68 to i32, !dbg !1193
  %exitcond72 = icmp eq i32 %lftr.wideiv71, %indvars.iv69, !dbg !1193
  br i1 %exitcond72, label %._crit_edge30, label %309, !dbg !1193

._crit_edge30:                                    ; preds = %309
  %indvars.iv.next74 = add nuw nsw i64 %indvars.iv73, 1, !dbg !1191
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !498, metadata !671), !dbg !1190
  %indvars.iv.next70 = add nuw nsw i32 %indvars.iv69, 1, !dbg !1191
  %exitcond75 = icmp eq i64 %indvars.iv.next74, 2, !dbg !1191
  br i1 %exitcond75, label %.preheader9, label %.lr.ph29, !dbg !1191

.preheader9:                                      ; preds = %._crit_edge30, %.preheader9
  %indvars.iv64 = phi i64 [ %indvars.iv.next65, %.preheader9 ], [ 0, %._crit_edge30 ]
  %318 = getelementptr inbounds [3 x [3 x float]]* @parrinellorahman_pcoupl.winv, i64 0, i64 2, i64 %indvars.iv64, !dbg !1204
  %319 = load float* %318, align 4, !dbg !1204, !tbaa !799
  %320 = fmul float %11, %319, !dbg !1207
  %321 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 2, i64 %indvars.iv64, !dbg !1208
  %322 = load float* %321, align 4, !dbg !1209, !tbaa !799
  %323 = fmul float %322, %320, !dbg !1209
  store float %323, float* %321, align 4, !dbg !1209, !tbaa !799
  %indvars.iv.next65 = add nuw nsw i64 %indvars.iv64, 1, !dbg !1210
  %exitcond66 = icmp eq i64 %indvars.iv.next65, 3, !dbg !1210
  br i1 %exitcond66, label %.preheader4, label %.preheader9, !dbg !1210

; <label>:324                                     ; preds = %179
  %325 = icmp ugt i32 %157, 3, !dbg !1211
  br i1 %325, label %330, label %326, !dbg !1211

; <label>:326                                     ; preds = %324
  %327 = sext i32 %157 to i64, !dbg !1211
  %328 = getelementptr inbounds [5 x i8*]* @epcoupltype_names, i64 0, i64 %327, !dbg !1211
  %329 = load i8** %328, align 8, !dbg !1211, !tbaa !897
  br label %330, !dbg !1211

; <label>:330                                     ; preds = %324, %326
  %331 = phi i8* [ %329, %326 ], [ getelementptr inbounds ([10 x i8]* @.str5, i64 0, i64 0), %324 ], !dbg !1211
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([63 x i8]* @.str4, i64 0, i64 0), i8* %331) #9, !dbg !1212
  br label %.preheader4, !dbg !1213

.preheader4:                                      ; preds = %.preheader9, %._crit_edge25, %._crit_edge21, %330
  %332 = getelementptr inbounds %struct.t_inputrec* %ir, i64 0, i32 15, !dbg !1214
  br label %.lr.ph, !dbg !1220

.lr.ph:                                           ; preds = %.preheader4, %._crit_edge
  %indvars.iv43 = phi i64 [ 0, %.preheader4 ], [ %indvars.iv.next44, %._crit_edge ]
  %indvars.iv40 = phi i32 [ 1, %.preheader4 ], [ %indvars.iv.next41, %._crit_edge ]
  %maxchange.017 = phi float [ 0.000000e+00, %.preheader4 ], [ %maxchange.2, %._crit_edge ]
  %333 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv43, i64 %indvars.iv43, !dbg !1221
  %.pre97 = load float* %332, align 4, !dbg !1214, !tbaa !1222
  br label %334, !dbg !1223

; <label>:334                                     ; preds = %334, %.lr.ph
  %335 = phi float [ %342, %334 ], [ %.pre97, %.lr.ph ], !dbg !1214
  %indvars.iv38 = phi i64 [ %indvars.iv.next39, %334 ], [ 0, %.lr.ph ]
  %maxchange.116 = phi float [ %maxchange.2, %334 ], [ %maxchange.017, %.lr.ph ]
  %336 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv43, i64 %indvars.iv38, !dbg !1224
  %337 = load float* %336, align 4, !dbg !1224, !tbaa !799
  %338 = fmul float %335, %337, !dbg !1225
  %339 = getelementptr inbounds [3 x float]* %boxv, i64 %indvars.iv43, i64 %indvars.iv38, !dbg !1226
  %340 = load float* %339, align 4, !dbg !1227, !tbaa !799
  %341 = fadd float %340, %338, !dbg !1227
  store float %341, float* %339, align 4, !dbg !1227, !tbaa !799
  %342 = load float* %332, align 4, !dbg !1228, !tbaa !1222
  %343 = fmul float %342, %341, !dbg !1229
  %344 = load float* %333, align 4, !dbg !1221, !tbaa !799
  %345 = fdiv float %343, %344, !dbg !1230
  %fabsf = tail call float @fabsf(float %345) #8, !dbg !1231
  tail call void @llvm.dbg.value(metadata float %fabsf, i64 0, metadata !503, metadata !671), !dbg !1232
  %346 = fcmp ogt float %fabsf, %maxchange.116, !dbg !1233
  tail call void @llvm.dbg.value(metadata float %fabsf, i64 0, metadata !504, metadata !671), !dbg !1235
  %maxchange.2 = select i1 %346, float %fabsf, float %maxchange.116, !dbg !1236
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1, !dbg !1223
  %lftr.wideiv = trunc i64 %indvars.iv.next39 to i32, !dbg !1223
  %exitcond42 = icmp eq i32 %lftr.wideiv, %indvars.iv40, !dbg !1223
  br i1 %exitcond42, label %._crit_edge, label %334, !dbg !1223

._crit_edge:                                      ; preds = %334
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1, !dbg !1220
  %indvars.iv.next41 = add nuw nsw i32 %indvars.iv40, 1, !dbg !1220
  %exitcond45 = icmp eq i64 %indvars.iv.next44, 3, !dbg !1220
  br i1 %exitcond45, label %347, label %.lr.ph, !dbg !1220

; <label>:347                                     ; preds = %._crit_edge
  %348 = fpext float %maxchange.2 to double, !dbg !1237
  %349 = fcmp ogt double %348, 1.010000e+00, !dbg !1239
  %350 = load %struct.__sFILE** @stdlog, align 8
  %351 = icmp ne %struct.__sFILE* %350, null, !dbg !1240
  %or.cond = and i1 %349, %351, !dbg !1241
  br i1 %or.cond, label %352, label %354, !dbg !1241

; <label>:352                                     ; preds = %347
  %353 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %350, i8* getelementptr inbounds ([52 x i8]* @.str6, i64 0, i64 0), i32 %step) #9, !dbg !1242
  br label %354, !dbg !1242

; <label>:354                                     ; preds = %352, %347
  call fastcc void @mtmul([3 x float]* %boxv, [3 x float]* %box, [3 x float]* %183) #11, !dbg !1243
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !497, metadata !671), !dbg !1094
  br label %.preheader, !dbg !1244

.preheader:                                       ; preds = %361, %354
  %indvars.iv35 = phi i64 [ 0, %354 ], [ %indvars.iv.next36, %361 ]
  br label %355, !dbg !1246

; <label>:355                                     ; preds = %355, %.preheader
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %355 ]
  %356 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv, i64 %indvars.iv35, !dbg !1249
  %357 = load float* %356, align 4, !dbg !1249, !tbaa !799
  %358 = getelementptr inbounds [3 x [3 x float]]* %t1, i64 0, i64 %indvars.iv35, i64 %indvars.iv, !dbg !1251
  %359 = load float* %358, align 4, !dbg !1252, !tbaa !799
  %360 = fadd float %357, %359, !dbg !1252
  store float %360, float* %358, align 4, !dbg !1252, !tbaa !799
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !1246
  %exitcond = icmp eq i64 %indvars.iv.next, 3, !dbg !1246
  br i1 %exitcond, label %361, label %355, !dbg !1246

; <label>:361                                     ; preds = %355
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1, !dbg !1244
  %exitcond37 = icmp eq i64 %indvars.iv.next36, 3, !dbg !1244
  br i1 %exitcond37, label %362, label %.preheader, !dbg !1244

; <label>:362                                     ; preds = %361
  %363 = getelementptr inbounds [3 x [3 x float]]* %t2, i64 0, i64 0, !dbg !1253
  tail call void @llvm.dbg.value(metadata [3 x float]* %40, i64 0, metadata !659, metadata !671), !dbg !1254
  tail call void @llvm.dbg.value(metadata [3 x float]* %183, i64 0, metadata !660, metadata !671), !dbg !1256
  tail call void @llvm.dbg.value(metadata [3 x float]* %363, i64 0, metadata !661, metadata !671), !dbg !1257
  %364 = load float* %185, align 16, !dbg !1258, !tbaa !799
  %365 = load float* %224, align 4, !dbg !1259, !tbaa !799
  %366 = load float* %229, align 8, !dbg !1260, !tbaa !799
  %367 = load float* %186, align 4, !dbg !1261, !tbaa !799
  %368 = load float* %226, align 4, !dbg !1262, !tbaa !799
  %369 = load float* %258, align 4, !dbg !1263, !tbaa !799
  %370 = getelementptr inbounds [3 x [3 x float]]* %t2, i64 0, i64 1, i64 1, !dbg !1264
  %371 = load float* %187, align 8, !dbg !1265, !tbaa !799
  %372 = shufflevector <4 x float> %191, <4 x float> %106, <4 x i32> <i32 0, i32 1, i32 2, i32 7>, !dbg !1266
  %373 = insertelement <4 x float> undef, float %364, i32 0, !dbg !1266
  %374 = insertelement <4 x float> %373, float %367, i32 1, !dbg !1266
  %375 = insertelement <4 x float> %374, float %371, i32 2, !dbg !1266
  %376 = insertelement <4 x float> %375, float %364, i32 3, !dbg !1266
  %377 = fmul <4 x float> %372, %376, !dbg !1266
  %378 = load float* %227, align 4, !dbg !1267, !tbaa !799
  %379 = insertelement <4 x float> %231, float %188, i32 2, !dbg !1268
  %380 = insertelement <4 x float> %379, float %111, i32 3, !dbg !1268
  %381 = insertelement <4 x float> undef, float %365, i32 0, !dbg !1268
  %382 = insertelement <4 x float> %381, float %368, i32 1, !dbg !1268
  %383 = insertelement <4 x float> %382, float %378, i32 2, !dbg !1268
  %384 = insertelement <4 x float> %383, float %365, i32 3, !dbg !1268
  %385 = fmul <4 x float> %380, %384, !dbg !1268
  %386 = fadd <4 x float> %377, %385, !dbg !1269
  %387 = load float* %265, align 8, !dbg !1270, !tbaa !799
  %388 = insertelement <4 x float> undef, float %228, i32 0, !dbg !1271
  %389 = insertelement <4 x float> %388, float %228, i32 1, !dbg !1271
  %390 = insertelement <4 x float> %389, float %228, i32 2, !dbg !1271
  %391 = insertelement <4 x float> %390, float %116, i32 3, !dbg !1271
  %392 = insertelement <4 x float> undef, float %366, i32 0, !dbg !1271
  %393 = insertelement <4 x float> %392, float %369, i32 1, !dbg !1271
  %394 = insertelement <4 x float> %393, float %387, i32 2, !dbg !1271
  %395 = insertelement <4 x float> %394, float %366, i32 3, !dbg !1271
  %396 = fmul <4 x float> %391, %395, !dbg !1271
  %397 = fadd <4 x float> %386, %396, !dbg !1272
  %398 = bitcast [3 x [3 x float]]* %t2 to <4 x float>*, !dbg !1273
  store <4 x float> %397, <4 x float>* %398, align 16, !dbg !1273, !tbaa !799
  %399 = insertelement <4 x float> %201, float %121, i32 2, !dbg !1274
  %400 = insertelement <4 x float> %399, float %121, i32 3, !dbg !1274
  %401 = insertelement <4 x float> undef, float %367, i32 0, !dbg !1274
  %402 = insertelement <4 x float> %401, float %371, i32 1, !dbg !1274
  %403 = insertelement <4 x float> %402, float %364, i32 2, !dbg !1274
  %404 = insertelement <4 x float> %403, float %367, i32 3, !dbg !1274
  %405 = fmul <4 x float> %400, %404, !dbg !1274
  %406 = insertelement <4 x float> %240, float %126, i32 2, !dbg !1275
  %407 = insertelement <4 x float> %406, float %126, i32 3, !dbg !1275
  %408 = insertelement <4 x float> undef, float %368, i32 0, !dbg !1275
  %409 = insertelement <4 x float> %408, float %378, i32 1, !dbg !1275
  %410 = insertelement <4 x float> %409, float %365, i32 2, !dbg !1275
  %411 = insertelement <4 x float> %410, float %368, i32 3, !dbg !1275
  %412 = fmul <4 x float> %407, %411, !dbg !1275
  %413 = fadd <4 x float> %405, %412, !dbg !1276
  %414 = insertelement <4 x float> undef, float %116, i32 0, !dbg !1277
  %415 = insertelement <4 x float> %414, float %116, i32 1, !dbg !1277
  %416 = insertelement <4 x float> %415, float %131, i32 2, !dbg !1277
  %417 = insertelement <4 x float> %416, float %131, i32 3, !dbg !1277
  %418 = insertelement <4 x float> undef, float %369, i32 0, !dbg !1277
  %419 = insertelement <4 x float> %418, float %387, i32 1, !dbg !1277
  %420 = insertelement <4 x float> %419, float %366, i32 2, !dbg !1277
  %421 = insertelement <4 x float> %420, float %369, i32 3, !dbg !1277
  %422 = fmul <4 x float> %417, %421, !dbg !1277
  %423 = fadd <4 x float> %413, %422, !dbg !1278
  %424 = bitcast float* %370 to <4 x float>*, !dbg !1279
  store <4 x float> %423, <4 x float>* %424, align 4, !dbg !1279, !tbaa !799
  %425 = fmul float %121, %371, !dbg !1280
  %426 = fmul float %126, %378, !dbg !1281
  %427 = fadd float %425, %426, !dbg !1282
  %428 = fmul float %131, %387, !dbg !1283
  %429 = fadd float %427, %428, !dbg !1284
  %430 = getelementptr inbounds [3 x [3 x float]]* %t2, i64 0, i64 2, i64 2, !dbg !1285
  store float %429, float* %430, align 8, !dbg !1286, !tbaa !799
  call fastcc void @mtmul([3 x float]* %363, [3 x float]* %40, [3 x float]* %M) #11, !dbg !1287
  call void @llvm.lifetime.end(i64 36, i8* %15) #6, !dbg !1288
  call void @llvm.lifetime.end(i64 36, i8* %14) #6, !dbg !1288
  call void @llvm.lifetime.end(i64 36, i8* %13) #6, !dbg !1288
  call void @llvm.lifetime.end(i64 36, i8* %12) #6, !dbg !1288
  ret void, !dbg !1288
}
