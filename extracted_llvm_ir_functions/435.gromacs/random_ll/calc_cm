define float @calc_cm(%struct.__sFILE* nocapture readnone %log, i32 %natoms, float* nocapture readonly %mass, [3 x float]* nocapture readonly %x, [3 x float]* nocapture readonly %v, float* nocapture %xcm, float* nocapture %vcm, float* nocapture %acm, [3 x float]* nocapture %L) #3 {
  %dx = alloca [3 x float], align 4
  %a0 = alloca [3 x float], align 4
  store float 0.000000e+00, float* %xcm, align 4, !tbaa !21
  %1 = getelementptr inbounds float* %xcm, i64 1
  store float 0.000000e+00, float* %1, align 4, !tbaa !21
  %2 = getelementptr inbounds float* %xcm, i64 2
  store float 0.000000e+00, float* %2, align 4, !tbaa !21
  store float 0.000000e+00, float* %vcm, align 4, !tbaa !21
  %3 = getelementptr inbounds float* %vcm, i64 1
  store float 0.000000e+00, float* %3, align 4, !tbaa !21
  %4 = getelementptr inbounds float* %vcm, i64 2
  store float 0.000000e+00, float* %4, align 4, !tbaa !21
  store float 0.000000e+00, float* %acm, align 4, !tbaa !21
  %5 = getelementptr inbounds float* %acm, i64 1
  store float 0.000000e+00, float* %5, align 4, !tbaa !21
  %6 = getelementptr inbounds float* %acm, i64 2
  store float 0.000000e+00, float* %6, align 4, !tbaa !21
  %7 = icmp sgt i32 %natoms, 0
  %8 = getelementptr inbounds [3 x float]* %a0, i64 0, i64 0
  %9 = getelementptr inbounds [3 x float]* %a0, i64 0, i64 1
  %10 = getelementptr inbounds [3 x float]* %a0, i64 0, i64 2
  br i1 %7, label %.lr.ph8, label %._crit_edge9

.lr.ph8:                                          ; preds = %0
  %11 = add i32 %natoms, -1
  br label %12

; <label>:12                                      ; preds = %53, %.lr.ph8
  %indvars.iv19 = phi i64 [ 0, %.lr.ph8 ], [ %indvars.iv.next20, %53 ]
  %tm.05 = phi float [ 0.000000e+00, %.lr.ph8 ], [ %54, %53 ]
  %13 = getelementptr inbounds float* %mass, i64 %indvars.iv19
  %14 = load float* %13, align 4, !tbaa !21
  %15 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv19, i64 0
  %16 = getelementptr inbounds [3 x float]* %v, i64 %indvars.iv19, i64 0
  %17 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv19, i64 1
  %18 = load float* %17, align 4, !tbaa !21
  %19 = getelementptr inbounds [3 x float]* %v, i64 %indvars.iv19, i64 2
  %20 = load float* %19, align 4, !tbaa !21
  %21 = fmul float %18, %20
  %22 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv19, i64 2
  %23 = load float* %22, align 4, !tbaa !21
  %24 = getelementptr inbounds [3 x float]* %v, i64 %indvars.iv19, i64 1
  %25 = load float* %24, align 4, !tbaa !21
  %26 = fmul float %23, %25
  %27 = fsub float %21, %26
  store float %27, float* %8, align 4, !tbaa !21
  %28 = load float* %16, align 4, !tbaa !21
  %29 = fmul float %23, %28
  %30 = load float* %15, align 4, !tbaa !21
  %31 = fmul float %30, %20
  %32 = fsub float %29, %31
  store float %32, float* %9, align 4, !tbaa !21
  %33 = fmul float %30, %25
  %34 = fmul float %18, %28
  %35 = fsub float %33, %34
  store float %35, float* %10, align 4, !tbaa !21
  br label %36

; <label>:36                                      ; preds = %._crit_edge23, %12
  %37 = phi float [ %27, %12 ], [ %.pre25, %._crit_edge23 ]
  %38 = phi float [ %30, %12 ], [ %.pre, %._crit_edge23 ]
  %indvars.iv16 = phi i64 [ 0, %12 ], [ %indvars.iv.next17, %._crit_edge23 ]
  %39 = fmul float %14, %38
  %40 = getelementptr inbounds float* %xcm, i64 %indvars.iv16
  %41 = load float* %40, align 4, !tbaa !21
  %42 = fadd float %41, %39
  store float %42, float* %40, align 4, !tbaa !21
  %43 = getelementptr inbounds [3 x float]* %v, i64 %indvars.iv19, i64 %indvars.iv16
  %44 = load float* %43, align 4, !tbaa !21
  %45 = fmul float %14, %44
  %46 = getelementptr inbounds float* %vcm, i64 %indvars.iv16
  %47 = load float* %46, align 4, !tbaa !21
  %48 = fadd float %47, %45
  store float %48, float* %46, align 4, !tbaa !21
  %49 = fmul float %14, %37
  %50 = getelementptr inbounds float* %acm, i64 %indvars.iv16
  %51 = load float* %50, align 4, !tbaa !21
  %52 = fadd float %51, %49
  store float %52, float* %50, align 4, !tbaa !21
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %exitcond18 = icmp eq i64 %indvars.iv.next17, 3
  br i1 %exitcond18, label %53, label %._crit_edge23

._crit_edge23:                                    ; preds = %36
  %.phi.trans.insert = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv19, i64 %indvars.iv.next17
  %.pre = load float* %.phi.trans.insert, align 4, !tbaa !21
  %.phi.trans.insert24 = getelementptr inbounds [3 x float]* %a0, i64 0, i64 %indvars.iv.next17
  %.pre25 = load float* %.phi.trans.insert24, align 4, !tbaa !21
  br label %36

; <label>:53                                      ; preds = %36
  %54 = fadd float %tm.05, %14
  %indvars.iv.next20 = add nuw nsw i64 %indvars.iv19, 1
  %lftr.wideiv21 = trunc i64 %indvars.iv19 to i32
  %exitcond22 = icmp eq i32 %lftr.wideiv21, %11
  br i1 %exitcond22, label %._crit_edge9, label %12

._crit_edge9:                                     ; preds = %53, %0
  %tm.0.lcssa = phi float [ 0.000000e+00, %0 ], [ %54, %53 ]
  %55 = load float* %1, align 4, !tbaa !21
  %56 = load float* %4, align 4, !tbaa !21
  %57 = fmul float %55, %56
  %58 = load float* %2, align 4, !tbaa !21
  %59 = load float* %3, align 4, !tbaa !21
  %60 = fmul float %58, %59
  %61 = fsub float %57, %60
  store float %61, float* %8, align 4, !tbaa !21
  %62 = load float* %vcm, align 4, !tbaa !21
  %63 = fmul float %58, %62
  %64 = load float* %xcm, align 4, !tbaa !21
  %65 = fmul float %64, %56
  %66 = fsub float %63, %65
  store float %66, float* %9, align 4, !tbaa !21
  %67 = fmul float %64, %59
  %68 = fmul float %55, %62
  %69 = fsub float %67, %68
  store float %69, float* %10, align 4, !tbaa !21
  %70 = fdiv float %64, %tm.0.lcssa
  store float %70, float* %xcm, align 4, !tbaa !21
  %71 = load float* %vcm, align 4, !tbaa !21
  %72 = fdiv float %71, %tm.0.lcssa
  store float %72, float* %vcm, align 4, !tbaa !21
  %73 = fdiv float %61, %tm.0.lcssa
  %74 = load float* %acm, align 4, !tbaa !21
  %75 = fsub float %74, %73
  store float %75, float* %acm, align 4, !tbaa !21
  br label %._crit_edge26

._crit_edge26:                                    ; preds = %._crit_edge9, %._crit_edge26
  %indvars.iv.next1437 = phi i64 [ 1, %._crit_edge9 ], [ %indvars.iv.next14, %._crit_edge26 ]
  %.phi.trans.insert27 = getelementptr inbounds float* %xcm, i64 %indvars.iv.next1437
  %.pre28 = load float* %.phi.trans.insert27, align 4, !tbaa !21
  %.phi.trans.insert29 = getelementptr inbounds [3 x float]* %a0, i64 0, i64 %indvars.iv.next1437
  %.pre30 = load float* %.phi.trans.insert29, align 4, !tbaa !21
  %76 = getelementptr inbounds float* %xcm, i64 %indvars.iv.next1437
  %77 = fdiv float %.pre28, %tm.0.lcssa
  store float %77, float* %76, align 4, !tbaa !21
  %78 = getelementptr inbounds float* %vcm, i64 %indvars.iv.next1437
  %79 = load float* %78, align 4, !tbaa !21
  %80 = fdiv float %79, %tm.0.lcssa
  store float %80, float* %78, align 4, !tbaa !21
  %81 = fdiv float %.pre30, %tm.0.lcssa
  %82 = getelementptr inbounds float* %acm, i64 %indvars.iv.next1437
  %83 = load float* %82, align 4, !tbaa !21
  %84 = fsub float %83, %81
  store float %84, float* %82, align 4, !tbaa !21
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv.next1437, 1
  %exitcond15 = icmp eq i64 %indvars.iv.next14, 3
  br i1 %exitcond15, label %85, label %._crit_edge26

; <label>:85                                      ; preds = %._crit_edge26
  %86 = bitcast [3 x float]* %L to i8*
  tail call void @llvm.memset.p0i8.i64(i8* %86, i8 0, i64 36, i32 4, i1 false) #5
  br i1 %7, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %85
  %87 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 0
  %88 = getelementptr inbounds [3 x float]* %L, i64 0, i64 0
  %89 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 1
  %90 = getelementptr inbounds [3 x float]* %L, i64 0, i64 1
  %91 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 2
  %92 = getelementptr inbounds [3 x float]* %L, i64 0, i64 2
  %93 = getelementptr inbounds [3 x float]* %L, i64 1, i64 1
  %94 = getelementptr inbounds [3 x float]* %L, i64 1, i64 2
  %95 = getelementptr inbounds [3 x float]* %L, i64 2, i64 2
  %96 = add i32 %natoms, -1
  br label %97

; <label>:97                                      ; preds = %109, %.lr.ph
  %indvars.iv10 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next11, %109 ]
  %98 = phi <4 x float> [ zeroinitializer, %.lr.ph ], [ %137, %109 ]
  %99 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %120, %109 ]
  %100 = getelementptr inbounds float* %mass, i64 %indvars.iv10
  %101 = load float* %100, align 4, !tbaa !21
  br label %102

; <label>:102                                     ; preds = %102, %97
  %indvars.iv = phi i64 [ 0, %97 ], [ %indvars.iv.next, %102 ]
  %103 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv10, i64 %indvars.iv
  %104 = load float* %103, align 4, !tbaa !21
  %105 = getelementptr inbounds float* %xcm, i64 %indvars.iv
  %106 = load float* %105, align 4, !tbaa !21
  %107 = fsub float %104, %106
  %108 = getelementptr inbounds [3 x float]* %dx, i64 0, i64 %indvars.iv
  store float %107, float* %108, align 4, !tbaa !21
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %109, label %102

; <label>:109                                     ; preds = %102
  %110 = load float* %87, align 4, !tbaa !21
  %111 = load float* %89, align 4, !tbaa !21
  %112 = insertelement <2 x float> undef, float %110, i32 0
  %113 = insertelement <2 x float> %112, float %110, i32 1
  %114 = insertelement <2 x float> undef, float %111, i32 0
  %115 = insertelement <2 x float> %114, float %110, i32 1
  %116 = fmul <2 x float> %113, %115
  %117 = insertelement <2 x float> undef, float %101, i32 0
  %118 = insertelement <2 x float> %117, float %101, i32 1
  %119 = fmul <2 x float> %116, %118
  %120 = fadd <2 x float> %99, %119
  %121 = extractelement <2 x float> %120, i32 1
  store float %121, float* %88, align 4, !tbaa !21
  %122 = extractelement <2 x float> %120, i32 0
  store float %122, float* %90, align 4, !tbaa !21
  %123 = load float* %91, align 4, !tbaa !21
  %124 = insertelement <4 x float> undef, float %123, i32 0
  %125 = insertelement <4 x float> %124, float %111, i32 1
  %126 = insertelement <4 x float> %125, float %111, i32 2
  %127 = insertelement <4 x float> %126, float %123, i32 3
  %128 = insertelement <4 x float> %124, float %123, i32 1
  %129 = insertelement <4 x float> %128, float %111, i32 2
  %130 = insertelement <4 x float> %129, float %110, i32 3
  %131 = fmul <4 x float> %127, %130
  %132 = insertelement <4 x float> undef, float %101, i32 0
  %133 = insertelement <4 x float> %132, float %101, i32 1
  %134 = insertelement <4 x float> %133, float %101, i32 2
  %135 = insertelement <4 x float> %134, float %101, i32 3
  %136 = fmul <4 x float> %131, %135
  %137 = fadd <4 x float> %98, %136
  %138 = extractelement <4 x float> %137, i32 3
  store float %138, float* %92, align 4, !tbaa !21
  %139 = extractelement <4 x float> %137, i32 2
  store float %139, float* %93, align 4, !tbaa !21
  %140 = extractelement <4 x float> %137, i32 1
  store float %140, float* %94, align 4, !tbaa !21
  %141 = extractelement <4 x float> %137, i32 0
  store float %141, float* %95, align 4, !tbaa !21
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1
  %lftr.wideiv = trunc i64 %indvars.iv10 to i32
  %exitcond12 = icmp eq i32 %lftr.wideiv, %96
  br i1 %exitcond12, label %._crit_edge, label %97

._crit_edge:                                      ; preds = %109, %85
  ret float %tm.0.lcssa
}
