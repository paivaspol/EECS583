define internal fastcc i32 @ld_strings(i32 %src, %struct.t_symtab* %symtab, i8**** nocapture %nm) #0 {
entry:
  %nr = alloca i32, align 4
  %0 = bitcast i32* %nr to i8*
  call void @_blockrx(i32 %src, i32 1, i32 4, i8* %0) #4
  %1 = load i32* %nr, align 4, !tbaa !0
  %call = call i8* @save_calloc(i8* getelementptr inbounds ([7 x i8]* @.str11, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8]* @.str8, i64 0, i64 0), i32 76, i32 %1, i32 4) #4
  %2 = bitcast i8* %call to i32*
  %3 = load i32* %nr, align 4, !tbaa !0
  %mul = shl i32 %3, 2
  call void @_blockrx(i32 %src, i32 1, i32 %mul, i8* %call) #4
  %4 = load i32* %nr, align 4, !tbaa !0
  %call2 = call i8* @save_calloc(i8* getelementptr inbounds ([4 x i8]* @.str17, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8]* @.str8, i64 0, i64 0), i32 79, i32 %4, i32 8) #4
  %5 = bitcast i8* %call2 to i8***
  store i8*** %5, i8**** %nm, align 8, !tbaa !3
  %6 = load i32* %nr, align 4, !tbaa !0
  %cmp14 = icmp sgt i32 %6, 0
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i32* %2, i64 %indvars.iv
  %7 = load i32* %arrayidx, align 4, !tbaa !0
  %call4 = call i8** @get_symtab_handle(%struct.t_symtab* %symtab, i32 %7) #4
  %arrayidx6 = getelementptr inbounds i8*** %5, i64 %indvars.iv
  store i8** %call4, i8*** %arrayidx6, align 8, !tbaa !3
  %indvars.iv.next = add i64 %indvars.iv, 1
  %8 = load i32* %nr, align 4, !tbaa !0
  %9 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %9, %8
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  call void @save_free(i8* getelementptr inbounds ([7 x i8]* @.str11, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8]* @.str8, i64 0, i64 0), i32 83, i8* %call) #4
  %10 = load i32* %nr, align 4, !tbaa !0
  ret i32 %10
}
