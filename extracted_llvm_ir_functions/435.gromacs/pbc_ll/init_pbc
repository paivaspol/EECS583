define void @init_pbc([3 x float]* %box) #4 {
  %try = alloca [3 x float], align 4
  %1 = tail call i8* @check_box([3 x float]* %box) #9
  %2 = icmp eq i8* %1, null
  br i1 %2, label %9, label %3

; <label>:3                                       ; preds = %0
  %4 = load %struct.__sFILE** @__stderrp, align 8, !tbaa !16
  %5 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %4, i8* getelementptr inbounds ([13 x i8]* @.str2, i64 0, i64 0), i8* %1) #7
  %6 = load %struct.__sFILE** @__stderrp, align 8, !tbaa !16
  tail call void @pr_rvecs(%struct.__sFILE* %6, i32 0, i8* getelementptr inbounds ([13 x i8]* @.str3, i64 0, i64 0), [3 x float]* %box, i32 3) #7
  %7 = load %struct.__sFILE** @__stderrp, align 8, !tbaa !16
  %8 = tail call i64 @fwrite(i8* getelementptr inbounds ([27 x i8]* @.str4, i64 0, i64 0), i64 26, i64 1, %struct.__sFILE* %7)
  store i1 false, i1* @bSupported, align 1
  br label %.loopexit

; <label>:9                                       ; preds = %0
  store i1 true, i1* @bSupported, align 1
  br label %10

; <label>:10                                      ; preds = %10, %9
  %indvars.iv16 = phi i64 [ 0, %9 ], [ %indvars.iv.next17, %10 ]
  %11 = getelementptr inbounds [3 x float]* %box, i64 %indvars.iv16, i64 %indvars.iv16
  %12 = load float* %11, align 4, !tbaa !14
  %13 = getelementptr inbounds [3 x float]* @gl_fbox, i64 0, i64 %indvars.iv16
  store float %12, float* %13, align 4, !tbaa !14
  %14 = fmul float %12, 5.000000e-01
  %15 = getelementptr inbounds [3 x float]* @gl_hbox, i64 0, i64 %indvars.iv16
  store float %14, float* %15, align 4, !tbaa !14
  %16 = fsub float -0.000000e+00, %14
  %17 = getelementptr inbounds [3 x float]* @gl_mhbox, i64 0, i64 %indvars.iv16
  store float %16, float* %17, align 4, !tbaa !14
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %exitcond18 = icmp eq i64 %indvars.iv.next17, 3
  br i1 %exitcond18, label %18, label %10

; <label>:18                                      ; preds = %10
  %19 = getelementptr inbounds [3 x float]* %box, i64 1, i64 0
  %20 = load float* %19, align 4, !tbaa !14
  %fabsf = tail call float @fabsf(float %20) #8
  %21 = fpext float %fabsf to double
  %22 = fcmp ogt double %21, 1.200000e-38
  br i1 %22, label %.thread, label %23

; <label>:23                                      ; preds = %18
  %24 = getelementptr inbounds [3 x float]* %box, i64 2, i64 0
  %25 = load float* %24, align 4, !tbaa !14
  %fabsf4 = tail call float @fabsf(float %25) #8
  %26 = fpext float %fabsf4 to double
  %27 = fcmp ogt double %26, 1.200000e-38
  br i1 %27, label %.thread, label %28

.thread:                                          ; preds = %23, %18
  store i32 1, i32* @bTriclinic, align 4, !tbaa !17
  %.pre20 = getelementptr inbounds [3 x float]* %box, i64 2, i64 0
  %.pre21 = getelementptr inbounds [3 x float]* %box, i64 2, i64 1
  br label %34

; <label>:28                                      ; preds = %23
  %29 = getelementptr inbounds [3 x float]* %box, i64 2, i64 1
  %30 = load float* %29, align 4, !tbaa !14
  %fabsf5 = tail call float @fabsf(float %30) #8
  %31 = fpext float %fabsf5 to double
  %32 = fcmp ogt double %31, 1.200000e-38
  %33 = zext i1 %32 to i32
  store i32 %33, i32* @bTriclinic, align 4, !tbaa !17
  br i1 %32, label %34, label %.loopexit

; <label>:34                                      ; preds = %.thread, %28
  %.pre-phi22 = phi float* [ %.pre21, %.thread ], [ %29, %28 ]
  %.pre-phi = phi float* [ %.pre20, %.thread ], [ %24, %28 ]
  %35 = bitcast [3 x float]* %box to i32*
  %36 = load i32* %35, align 4, !tbaa !14
  store i32 %36, i32* bitcast ([3 x [3 x float]]* @gl_box to i32*), align 16, !tbaa !14
  %37 = getelementptr inbounds [3 x float]* %box, i64 0, i64 1
  %38 = bitcast float* %37 to i32*
  %39 = load i32* %38, align 4, !tbaa !14
  store i32 %39, i32* bitcast (float* getelementptr inbounds ([3 x [3 x float]]* @gl_box, i64 0, i64 0, i64 1) to i32*), align 4, !tbaa !14
  %40 = getelementptr inbounds [3 x float]* %box, i64 0, i64 2
  %41 = bitcast float* %40 to i32*
  %42 = load i32* %41, align 4, !tbaa !14
  store i32 %42, i32* bitcast (float* getelementptr inbounds ([3 x [3 x float]]* @gl_box, i64 0, i64 0, i64 2) to i32*), align 8, !tbaa !14
  %43 = bitcast float* %19 to i32*
  %44 = load i32* %43, align 4, !tbaa !14
  store i32 %44, i32* bitcast (float* getelementptr inbounds ([3 x [3 x float]]* @gl_box, i64 0, i64 1, i64 0) to i32*), align 4, !tbaa !14
  %45 = getelementptr inbounds [3 x float]* %box, i64 1, i64 1
  %46 = bitcast float* %45 to i32*
  %47 = load i32* %46, align 4, !tbaa !14
  store i32 %47, i32* bitcast (float* getelementptr inbounds ([3 x [3 x float]]* @gl_box, i64 0, i64 1, i64 1) to i32*), align 4, !tbaa !14
  %48 = getelementptr inbounds [3 x float]* %box, i64 1, i64 2
  %49 = bitcast float* %48 to i32*
  %50 = load i32* %49, align 4, !tbaa !14
  store i32 %50, i32* bitcast (float* getelementptr inbounds ([3 x [3 x float]]* @gl_box, i64 0, i64 1, i64 2) to i32*), align 4, !tbaa !14
  %51 = bitcast float* %.pre-phi to i32*
  %52 = load i32* %51, align 4, !tbaa !14
  store i32 %52, i32* bitcast (float* getelementptr inbounds ([3 x [3 x float]]* @gl_box, i64 0, i64 2, i64 0) to i32*), align 8, !tbaa !14
  %53 = bitcast float* %.pre-phi22 to i32*
  %54 = load i32* %53, align 4, !tbaa !14
  store i32 %54, i32* bitcast (float* getelementptr inbounds ([3 x [3 x float]]* @gl_box, i64 0, i64 2, i64 1) to i32*), align 4, !tbaa !14
  %55 = getelementptr inbounds [3 x float]* %box, i64 2, i64 2
  %56 = bitcast float* %55 to i32*
  %57 = load i32* %56, align 4, !tbaa !14
  store i32 %57, i32* bitcast (float* getelementptr inbounds ([3 x [3 x float]]* @gl_box, i64 0, i64 2, i64 2) to i32*), align 8, !tbaa !14
  %58 = getelementptr inbounds [3 x float]* %box, i64 0, i64 0
  %59 = load float* %58, align 4, !tbaa !14
  %60 = fmul float %59, %59
  %61 = load float* %45, align 4, !tbaa !14
  %62 = fmul float %61, %61
  %63 = load float* %55, align 4, !tbaa !14
  %64 = fmul float %63, %63
  %65 = fcmp olt float %62, %64
  %66 = select i1 %65, float %62, float %64
  %67 = fcmp olt float %60, %66
  %brmerge = or i1 %67, %65
  %.mux = select i1 %67, float %60, float %62
  %68 = select i1 %brmerge, float %.mux, float %64
  %69 = fmul float %68, 2.500000e-01
  store float %69, float* @sure_dist2, align 4, !tbaa !14
  %70 = load float* getelementptr inbounds ([3 x float]* @gl_fbox, i64 0, i64 0), align 4, !tbaa !14
  %71 = fmul float %70, %70
  %72 = load float* getelementptr inbounds ([3 x float]* @gl_fbox, i64 0, i64 1), align 4, !tbaa !14
  %73 = fmul float %72, %72
  %74 = fadd float %71, %73
  %75 = load float* getelementptr inbounds ([3 x float]* @gl_fbox, i64 0, i64 2), align 4, !tbaa !14
  %76 = fmul float %75, %75
  %77 = fadd float %74, %76
  store i32 0, i32* @ntric_vec, align 4, !tbaa !17
  %78 = getelementptr inbounds [3 x float]* %try, i64 0, i64 0
  %79 = getelementptr inbounds [3 x float]* %try, i64 0, i64 1
  %80 = getelementptr inbounds [3 x float]* %try, i64 0, i64 2
  %81 = bitcast float* %79 to i32*
  %82 = bitcast float* %80 to i32*
  br label %.preheader7

.preheader7:                                      ; preds = %142, %34
  %83 = phi i32 [ 0, %34 ], [ %138, %142 ]
  %i.111 = phi i32 [ -2, %34 ], [ %143, %142 ]
  %84 = sitofp i32 %i.111 to float
  br label %.preheader6

.preheader6:                                      ; preds = %140, %.preheader7
  %85 = phi i32 [ %83, %.preheader7 ], [ %138, %140 ]
  %j.010 = phi i32 [ -2, %.preheader7 ], [ %141, %140 ]
  %86 = or i32 %j.010, %i.111
  %87 = sitofp i32 %j.010 to float
  br label %88

; <label>:88                                      ; preds = %137, %.preheader6
  %89 = phi i32 [ %85, %.preheader6 ], [ %138, %137 ]
  %k.09 = phi i32 [ -2, %.preheader6 ], [ %139, %137 ]
  %90 = or i32 %86, %k.09
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %137, label %.preheader

.preheader:                                       ; preds = %88
  %92 = sitofp i32 %k.09 to float
  br label %93

; <label>:93                                      ; preds = %93, %.preheader
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %93 ]
  %94 = getelementptr inbounds [3 x float]* %box, i64 0, i64 %indvars.iv
  %95 = load float* %94, align 4, !tbaa !14
  %96 = fmul float %84, %95
  %97 = getelementptr inbounds [3 x float]* %box, i64 1, i64 %indvars.iv
  %98 = load float* %97, align 4, !tbaa !14
  %99 = fmul float %87, %98
  %100 = fadd float %96, %99
  %101 = getelementptr inbounds [3 x float]* %box, i64 2, i64 %indvars.iv
  %102 = load float* %101, align 4, !tbaa !14
  %103 = fmul float %92, %102
  %104 = fadd float %100, %103
  %105 = getelementptr inbounds [3 x float]* %try, i64 0, i64 %indvars.iv
  store float %104, float* %105, align 4, !tbaa !14
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %106, label %93

; <label>:106                                     ; preds = %93
  %107 = load float* %78, align 4, !tbaa !14
  %108 = fmul float %107, %107
  %109 = load float* %79, align 4, !tbaa !14
  %110 = fmul float %109, %109
  %111 = fadd float %108, %110
  %112 = load float* %80, align 4, !tbaa !14
  %113 = fmul float %112, %112
  %114 = fadd float %111, %113
  %115 = fcmp olt float %114, %77
  br i1 %115, label %116, label %137

; <label>:116                                     ; preds = %106
  %117 = load i32* @init_pbc.nalloc, align 4, !tbaa !17
  %118 = icmp slt i32 %89, %117
  br i1 %118, label %._crit_edge, label %119

._crit_edge:                                      ; preds = %116
  %.pre19 = load [3 x float]** @tric_vec, align 8, !tbaa !16
  br label %125

; <label>:119                                     ; preds = %116
  %120 = add nsw i32 %117, 20
  store i32 %120, i32* @init_pbc.nalloc, align 4, !tbaa !17
  %121 = load i8** bitcast ([3 x float]** @tric_vec to i8**), align 8, !tbaa !16
  %122 = mul i32 %120, 12
  %123 = tail call i8* @save_realloc(i8* getelementptr inbounds ([9 x i8]* @.str5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8]* @.str6, i64 0, i64 0), i32 119, i8* %121, i32 %122) #7
  store i8* %123, i8** bitcast ([3 x float]** @tric_vec to i8**), align 8, !tbaa !16
  %.pre = load i32* @ntric_vec, align 4, !tbaa !17
  %124 = bitcast i8* %123 to [3 x float]*
  br label %125

; <label>:125                                     ; preds = %._crit_edge, %119
  %126 = phi [3 x float]* [ %.pre19, %._crit_edge ], [ %124, %119 ]
  %127 = phi i32 [ %89, %._crit_edge ], [ %.pre, %119 ]
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds [3 x float]* %126, i64 %128, i64 0
  store float %107, float* %129, align 4, !tbaa !14
  %130 = load i32* %81, align 4, !tbaa !14
  %131 = getelementptr inbounds [3 x float]* %126, i64 %128, i64 1
  %132 = bitcast float* %131 to i32*
  store i32 %130, i32* %132, align 4, !tbaa !14
  %133 = load i32* %82, align 4, !tbaa !14
  %134 = getelementptr inbounds [3 x float]* %126, i64 %128, i64 2
  %135 = bitcast float* %134 to i32*
  store i32 %133, i32* %135, align 4, !tbaa !14
  %136 = add nsw i32 %127, 1
  store i32 %136, i32* @ntric_vec, align 4, !tbaa !17
  br label %137

; <label>:137                                     ; preds = %88, %125, %106
  %138 = phi i32 [ %89, %88 ], [ %136, %125 ], [ %89, %106 ]
  %139 = add nsw i32 %k.09, 1
  %exitcond13 = icmp eq i32 %139, 3
  br i1 %exitcond13, label %140, label %88

; <label>:140                                     ; preds = %137
  %141 = add nsw i32 %j.010, 1
  %exitcond14 = icmp eq i32 %141, 3
  br i1 %exitcond14, label %142, label %.preheader6

; <label>:142                                     ; preds = %140
  %143 = add nsw i32 %i.111, 1
  %exitcond15 = icmp eq i32 %143, 3
  br i1 %exitcond15, label %.loopexit, label %.preheader7

.loopexit:                                        ; preds = %142, %28, %3
  store i1 true, i1* @bInit, align 1
  ret void
}
