define internal fastcc void @setexcl(i32 %start, i32 %end, %struct.t_block* nocapture readonly %excl, i32 %b, i64* nocapture %bexcl) #3 {
  %1 = icmp eq i32 %b, 0
  %2 = icmp slt i32 %start, %end
  br i1 %1, label %.preheader, label %.preheader3

.preheader3:                                      ; preds = %0
  br i1 %2, label %.lr.ph13, label %.loopexit1

.lr.ph13:                                         ; preds = %.preheader3
  %3 = getelementptr inbounds %struct.t_block* %excl, i64 0, i32 2
  %4 = load i32** %3, align 8, !tbaa !50
  %5 = getelementptr inbounds %struct.t_block* %excl, i64 0, i32 4
  %6 = sext i32 %start to i64
  %7 = add i32 %end, -1
  %.phi.trans.insert = getelementptr inbounds i32* %4, i64 %6
  %.pre = load i32* %.phi.trans.insert, align 4, !tbaa !17
  br label %13

.preheader:                                       ; preds = %0
  br i1 %2, label %.lr.ph8, label %.loopexit1

.lr.ph8:                                          ; preds = %.preheader
  %8 = getelementptr inbounds %struct.t_block* %excl, i64 0, i32 2
  %9 = load i32** %8, align 8, !tbaa !50
  %10 = getelementptr inbounds %struct.t_block* %excl, i64 0, i32 4
  %11 = sext i32 %start to i64
  %12 = add i32 %end, -1
  %.phi.trans.insert22 = getelementptr inbounds i32* %9, i64 %11
  %.pre23 = load i32* %.phi.trans.insert22, align 4, !tbaa !17
  br label %33

.loopexit2:                                       ; preds = %25, %13
  %lftr.wideiv20 = trunc i64 %indvars.iv18 to i32
  %exitcond21 = icmp eq i32 %lftr.wideiv20, %7
  br i1 %exitcond21, label %.loopexit1, label %13

; <label>:13                                      ; preds = %.loopexit2, %.lr.ph13
  %14 = phi i32 [ %.pre, %.lr.ph13 ], [ %16, %.loopexit2 ]
  %indvars.iv18 = phi i64 [ %6, %.lr.ph13 ], [ %indvars.iv.next19, %.loopexit2 ]
  %indvars.iv.next19 = add nsw i64 %indvars.iv18, 1
  %15 = getelementptr inbounds i32* %4, i64 %indvars.iv.next19
  %16 = load i32* %15, align 4, !tbaa !17
  %17 = icmp slt i32 %14, %16
  br i1 %17, label %.lr.ph10, label %.loopexit2

.lr.ph10:                                         ; preds = %13
  %18 = sub nsw i64 %indvars.iv18, %6
  %19 = trunc i64 %18 to i32
  %20 = shl i32 1, %19
  %21 = sext i32 %20 to i64
  %22 = load i32** %5, align 8, !tbaa !84
  %23 = sext i32 %14 to i64
  %24 = sext i32 %16 to i64
  br label %25

; <label>:25                                      ; preds = %.lr.ph10, %25
  %indvars.iv16 = phi i64 [ %23, %.lr.ph10 ], [ %indvars.iv.next17, %25 ]
  %26 = getelementptr inbounds i32* %22, i64 %indvars.iv16
  %27 = load i32* %26, align 4, !tbaa !17
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i64* %bexcl, i64 %28
  %30 = load i64* %29, align 8, !tbaa !85
  %31 = or i64 %30, %21
  store i64 %31, i64* %29, align 8, !tbaa !85
  %indvars.iv.next17 = add nsw i64 %indvars.iv16, 1
  %32 = icmp slt i64 %indvars.iv.next17, %24
  br i1 %32, label %25, label %.loopexit2

.loopexit:                                        ; preds = %46, %33
  %lftr.wideiv = trunc i64 %indvars.iv14 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %12
  br i1 %exitcond, label %.loopexit1, label %33

; <label>:33                                      ; preds = %.loopexit, %.lr.ph8
  %34 = phi i32 [ %.pre23, %.lr.ph8 ], [ %36, %.loopexit ]
  %indvars.iv14 = phi i64 [ %11, %.lr.ph8 ], [ %indvars.iv.next15, %.loopexit ]
  %indvars.iv.next15 = add nsw i64 %indvars.iv14, 1
  %35 = getelementptr inbounds i32* %9, i64 %indvars.iv.next15
  %36 = load i32* %35, align 4, !tbaa !17
  %37 = icmp slt i32 %34, %36
  br i1 %37, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %33
  %38 = sub nsw i64 %indvars.iv14, %11
  %39 = trunc i64 %38 to i32
  %40 = shl i32 1, %39
  %41 = xor i32 %40, -1
  %42 = sext i32 %41 to i64
  %43 = load i32** %10, align 8, !tbaa !84
  %44 = sext i32 %34 to i64
  %45 = sext i32 %36 to i64
  br label %46

; <label>:46                                      ; preds = %.lr.ph, %46
  %indvars.iv = phi i64 [ %44, %.lr.ph ], [ %indvars.iv.next, %46 ]
  %47 = getelementptr inbounds i32* %43, i64 %indvars.iv
  %48 = load i32* %47, align 4, !tbaa !17
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i64* %bexcl, i64 %49
  %51 = load i64* %50, align 8, !tbaa !85
  %52 = and i64 %51, %42
  store i64 %52, i64* %50, align 8, !tbaa !85
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %53 = icmp slt i64 %indvars.iv.next, %45
  br i1 %53, label %46, label %.loopexit

.loopexit1:                                       ; preds = %.loopexit2, %.loopexit, %.preheader3, %.preheader
  ret void
}
