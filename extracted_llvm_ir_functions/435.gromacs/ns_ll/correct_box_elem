define internal fastcc i32 @correct_box_elem([3 x float]* %box, i32 %v, i32 %d) #3 {
  %1 = sext i32 %d to i64
  %2 = sext i32 %v to i64
  %3 = getelementptr inbounds [3 x float]* %box, i64 %2
  %4 = getelementptr inbounds [3 x float]* %box, i64 %2, i64 %1
  %5 = load float* %4, align 4, !tbaa !21
  %6 = fpext float %5 to double
  %7 = getelementptr inbounds [3 x float]* %box, i64 %1
  %8 = getelementptr inbounds [3 x float]* %box, i64 %1, i64 %1
  %9 = load float* %8, align 4, !tbaa !21
  %10 = fpext float %9 to double
  %11 = fmul double %10, 5.001000e-01
  %12 = fcmp ogt double %6, %11
  br i1 %12, label %.lr.ph10, label %.preheader

.lr.ph10:                                         ; preds = %0
  %13 = getelementptr inbounds [3 x float]* %3, i64 0, i64 0
  %14 = getelementptr inbounds [3 x float]* %7, i64 0, i64 0
  %15 = getelementptr inbounds [3 x float]* %box, i64 %2, i64 1
  %16 = getelementptr inbounds [3 x float]* %box, i64 %1, i64 1
  %17 = getelementptr inbounds [3 x float]* %box, i64 %2, i64 2
  %18 = getelementptr inbounds [3 x float]* %box, i64 %1, i64 2
  br label %32

.preheader:                                       ; preds = %.backedge1, %0
  %19 = phi float [ %9, %0 ], [ %54, %.backedge1 ]
  %20 = phi float [ %5, %0 ], [ %52, %.backedge1 ]
  %shift.0.lcssa = phi i32 [ 0, %0 ], [ %49, %.backedge1 ]
  %21 = fsub float -0.000000e+00, %20
  %22 = fpext float %21 to double
  %23 = fpext float %19 to double
  %24 = fmul double %23, 5.001000e-01
  %25 = fcmp ogt double %22, %24
  br i1 %25, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %26 = getelementptr inbounds [3 x float]* %3, i64 0, i64 0
  %27 = getelementptr inbounds [3 x float]* %7, i64 0, i64 0
  %28 = getelementptr inbounds [3 x float]* %box, i64 %2, i64 1
  %29 = getelementptr inbounds [3 x float]* %box, i64 %1, i64 1
  %30 = getelementptr inbounds [3 x float]* %box, i64 %2, i64 2
  %31 = getelementptr inbounds [3 x float]* %box, i64 %1, i64 2
  br label %58

; <label>:32                                      ; preds = %.lr.ph10, %.backedge1
  %shift.08 = phi i32 [ 0, %.lr.ph10 ], [ %49, %.backedge1 ]
  %33 = load %struct.__sFILE** @stdlog, align 8, !tbaa !23
  %34 = icmp eq %struct.__sFILE* %33, null
  br i1 %34, label %38, label %35

; <label>:35                                      ; preds = %32
  %36 = tail call i64 @fwrite(i8* getelementptr inbounds ([25 x i8]* @.str17, i64 0, i64 0), i64 24, i64 1, %struct.__sFILE* %33)
  %37 = load %struct.__sFILE** @stdlog, align 8, !tbaa !23
  tail call void @pr_rvecs(%struct.__sFILE* %37, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str18, i64 0, i64 0), [3 x float]* %box, i32 3) #8
  %.pre = load %struct.__sFILE** @stdlog, align 8, !tbaa !23
  br label %38

; <label>:38                                      ; preds = %32, %35
  %39 = phi %struct.__sFILE* [ null, %32 ], [ %.pre, %35 ]
  %40 = load float* %13, align 4, !tbaa !21
  %41 = load float* %14, align 4, !tbaa !21
  %42 = fsub float %40, %41
  %43 = load float* %15, align 4, !tbaa !21
  %44 = load float* %16, align 4, !tbaa !21
  %45 = fsub float %43, %44
  %46 = load float* %17, align 4, !tbaa !21
  %47 = load float* %18, align 4, !tbaa !21
  %48 = fsub float %46, %47
  store float %42, float* %13, align 4, !tbaa !21
  store float %45, float* %15, align 4, !tbaa !21
  store float %48, float* %17, align 4, !tbaa !21
  %49 = add nsw i32 %shift.08, -1
  %50 = icmp eq %struct.__sFILE* %39, null
  br i1 %50, label %.backedge1, label %51

; <label>:51                                      ; preds = %38
  tail call void @pr_rvecs(%struct.__sFILE* %39, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str19, i64 0, i64 0), [3 x float]* %box, i32 3) #8
  br label %.backedge1

.backedge1:                                       ; preds = %51, %38
  %52 = load float* %4, align 4, !tbaa !21
  %53 = fpext float %52 to double
  %54 = load float* %8, align 4, !tbaa !21
  %55 = fpext float %54 to double
  %56 = fmul double %55, 5.001000e-01
  %57 = fcmp ogt double %53, %56
  br i1 %57, label %32, label %.preheader

; <label>:58                                      ; preds = %.lr.ph, %.backedge
  %shift.17 = phi i32 [ %shift.0.lcssa, %.lr.ph ], [ %75, %.backedge ]
  %59 = load %struct.__sFILE** @stdlog, align 8, !tbaa !23
  %60 = icmp eq %struct.__sFILE* %59, null
  br i1 %60, label %64, label %61

; <label>:61                                      ; preds = %58
  %62 = tail call i64 @fwrite(i8* getelementptr inbounds ([25 x i8]* @.str17, i64 0, i64 0), i64 24, i64 1, %struct.__sFILE* %59)
  %63 = load %struct.__sFILE** @stdlog, align 8, !tbaa !23
  tail call void @pr_rvecs(%struct.__sFILE* %63, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str18, i64 0, i64 0), [3 x float]* %box, i32 3) #8
  %.pre19 = load %struct.__sFILE** @stdlog, align 8, !tbaa !23
  br label %64

; <label>:64                                      ; preds = %58, %61
  %65 = phi %struct.__sFILE* [ null, %58 ], [ %.pre19, %61 ]
  %66 = load float* %26, align 4, !tbaa !21
  %67 = load float* %27, align 4, !tbaa !21
  %68 = fadd float %66, %67
  %69 = load float* %28, align 4, !tbaa !21
  %70 = load float* %29, align 4, !tbaa !21
  %71 = fadd float %69, %70
  %72 = load float* %30, align 4, !tbaa !21
  %73 = load float* %31, align 4, !tbaa !21
  %74 = fadd float %72, %73
  store float %68, float* %26, align 4, !tbaa !21
  store float %71, float* %28, align 4, !tbaa !21
  store float %74, float* %30, align 4, !tbaa !21
  %75 = add nsw i32 %shift.17, 1
  %76 = icmp eq %struct.__sFILE* %65, null
  br i1 %76, label %.backedge, label %77

; <label>:77                                      ; preds = %64
  tail call void @pr_rvecs(%struct.__sFILE* %65, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str19, i64 0, i64 0), [3 x float]* %box, i32 3) #8
  br label %.backedge

.backedge:                                        ; preds = %77, %64
  %78 = load float* %4, align 4, !tbaa !21
  %79 = fsub float -0.000000e+00, %78
  %80 = fpext float %79 to double
  %81 = load float* %8, align 4, !tbaa !21
  %82 = fpext float %81 to double
  %83 = fmul double %82, 5.001000e-01
  %84 = fcmp ogt double %80, %83
  br i1 %84, label %58, label %._crit_edge

._crit_edge:                                      ; preds = %.backedge, %.preheader
  %shift.1.lcssa = phi i32 [ %shift.0.lcssa, %.preheader ], [ %75, %.backedge ]
  ret i32 %shift.1.lcssa
}
