define void @correct_box([3 x float]* %box, %struct.t_forcerec* nocapture readonly %fr, %struct.t_graph* nocapture readonly %g) #3 {
  %1 = tail call fastcc i32 @correct_box_elem([3 x float]* %box, i32 2, i32 1) #9
  %2 = tail call fastcc i32 @correct_box_elem([3 x float]* %box, i32 2, i32 0) #9
  %3 = tail call fastcc i32 @correct_box_elem([3 x float]* %box, i32 1, i32 0) #9
  %4 = or i32 %2, %1
  %5 = or i32 %4, %3
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %.loopexit, label %.preheader9

.preheader9:                                      ; preds = %0
  %7 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 1
  %8 = load i32* %7, align 4, !tbaa !14
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %.lr.ph13, label %.preheader

.lr.ph13:                                         ; preds = %.preheader9
  %10 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %11 = load [3 x i32]** %10, align 8, !tbaa !16
  br label %12

; <label>:12                                      ; preds = %.lr.ph13, %12
  %indvars.iv16 = phi i64 [ 0, %.lr.ph13 ], [ %indvars.iv.next17, %12 ]
  %13 = getelementptr inbounds [3 x i32]* %11, i64 %indvars.iv16, i64 2
  %14 = load i32* %13, align 4, !tbaa !17
  %15 = mul nsw i32 %14, %1
  %16 = getelementptr inbounds [3 x i32]* %11, i64 %indvars.iv16, i64 1
  %17 = load i32* %16, align 4, !tbaa !17
  %18 = sub nsw i32 %17, %15
  store i32 %18, i32* %16, align 4, !tbaa !17
  %19 = mul nsw i32 %14, %2
  %20 = getelementptr inbounds [3 x i32]* %11, i64 %indvars.iv16, i64 0
  %21 = load i32* %20, align 4, !tbaa !17
  %22 = sub nsw i32 %21, %19
  %23 = mul nsw i32 %18, %3
  %24 = sub nsw i32 %22, %23
  store i32 %24, i32* %20, align 4, !tbaa !17
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1
  %25 = load i32* %7, align 4, !tbaa !14
  %26 = sext i32 %25 to i64
  %27 = icmp slt i64 %indvars.iv.next17, %26
  br i1 %27, label %12, label %.preheader

.preheader:                                       ; preds = %.preheader9, %12, %._crit_edge
  %indvars.iv14 = phi i64 [ %indvars.iv.next15, %._crit_edge ], [ 0, %12 ], [ 0, %.preheader9 ]
  %28 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 49, i64 %indvars.iv14, i32 1
  %29 = load i32* %28, align 4, !tbaa !18
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %.preheader
  %31 = getelementptr inbounds %struct.t_forcerec* %fr, i64 0, i32 49, i64 %indvars.iv14, i32 9
  %.pre = load i32** %31, align 8, !tbaa !20
  br label %32

; <label>:32                                      ; preds = %.lr.ph, %56
  %33 = phi i32* [ %.pre, %.lr.ph ], [ %57, %56 ]
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %56 ]
  %34 = getelementptr inbounds i32* %33, i64 %indvars.iv
  %35 = load i32* %34, align 4, !tbaa !17
  %36 = srem i32 %35, 3
  %37 = sdiv i32 %35, 3
  %38 = srem i32 %37, 3
  %39 = add nsw i32 %38, -1
  %40 = sdiv i32 %35, 9
  %41 = add nsw i32 %40, -1
  %42 = mul nsw i32 %41, %1
  %43 = sub i32 %39, %42
  %44 = mul nsw i32 %41, %2
  %45 = mul nsw i32 %43, %3
  %46 = mul nsw i32 %40, 3
  %47 = add nsw i32 %43, %46
  %48 = mul i32 %47, 3
  %49 = add nsw i32 %36, 2
  %50 = sub i32 %49, %44
  %51 = sub i32 %50, %45
  %52 = add i32 %51, %48
  %53 = add i32 %52, 1
  %54 = icmp ugt i32 %53, 26
  br i1 %54, label %55, label %56

; <label>:55                                      ; preds = %32
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([33 x i8]* @.str, i64 0, i64 0)) #8
  %.pre18 = load i32** %31, align 8, !tbaa !20
  br label %56

; <label>:56                                      ; preds = %32, %55
  %57 = phi i32* [ %33, %32 ], [ %.pre18, %55 ]
  %58 = getelementptr inbounds i32* %57, i64 %indvars.iv
  store i32 %53, i32* %58, align 4, !tbaa !17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %59 = load i32* %28, align 4, !tbaa !18
  %60 = sext i32 %59 to i64
  %61 = icmp slt i64 %indvars.iv.next, %60
  br i1 %61, label %32, label %._crit_edge

._crit_edge:                                      ; preds = %56, %.preheader
  %indvars.iv.next15 = add nuw nsw i64 %indvars.iv14, 1
  %exitcond = icmp eq i64 %indvars.iv.next15, 13
  br i1 %exitcond, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %._crit_edge, %0
  ret void
}
