define float @ptheta_incoh(i32 %Eindex, float %theta) #0 {
entry:
  %conv = fpext float %theta to double
  %idxprom = sext i32 %Eindex to i64
  %arrayidx1 = getelementptr inbounds [6 x [8 x double]]* @ptheta_incoh.ppp, i64 0, i64 %idxprom, i64 7
  %0 = load double* %arrayidx1, align 8, !tbaa !5
  %sub = fsub double %conv, %0
  %arrayidx4 = getelementptr inbounds [6 x [8 x double]]* @ptheta_incoh.ppp, i64 0, i64 %idxprom, i64 1
  %1 = load double* %arrayidx4, align 8, !tbaa !5
  %div = fdiv double %sub, %1
  %conv5 = fptrunc double %div to float
  %mul.i = fmul float %conv5, %conv5
  %conv6 = fpext float %mul.i to double
  %mul = fmul double %conv6, -5.000000e-01
  %cmp.i94 = fcmp olt double %mul, -7.000000e+01
  br i1 %cmp.i94, label %myexp.exit98, label %if.else.i96

if.else.i96:                                      ; preds = %entry
  %call.i95 = tail call double @exp(double %mul) #7
  br label %myexp.exit98

myexp.exit98:                                     ; preds = %entry, %if.else.i96
  %retval.0.i97 = phi double [ %call.i95, %if.else.i96 ], [ 0.000000e+00, %entry ]
  %sub8 = fadd float %theta, -1.800000e+02
  %conv9 = fpext float %sub8 to double
  %add = fadd double %conv9, %0
  %div16 = fdiv double %add, %1
  %conv17 = fptrunc double %div16 to float
  %mul.i99 = fmul float %conv17, %conv17
  %conv19 = fpext float %mul.i99 to double
  %mul20 = fmul double %conv19, -5.000000e-01
  %cmp.i106 = fcmp olt double %mul20, -7.000000e+01
  br i1 %cmp.i106, label %myexp.exit110, label %if.else.i108

if.else.i108:                                     ; preds = %myexp.exit98
  %call.i107 = tail call double @exp(double %mul20) #7
  br label %myexp.exit110

myexp.exit110:                                    ; preds = %myexp.exit98, %if.else.i108
  %retval.0.i109 = phi double [ %call.i107, %if.else.i108 ], [ 0.000000e+00, %myexp.exit98 ]
  %sub22 = fadd float %theta, -9.000000e+01
  %conv23 = fpext float %sub22 to double
  %arrayidx26 = getelementptr inbounds [6 x [8 x double]]* @ptheta_incoh.ppp, i64 0, i64 %idxprom, i64 3
  %2 = load double* %arrayidx26, align 8, !tbaa !5
  %div27 = fdiv double %conv23, %2
  %conv28 = fptrunc double %div27 to float
  %mul.i111 = fmul float %conv28, %conv28
  %conv30 = fpext float %mul.i111 to double
  %mul31 = fmul double %conv30, -5.000000e-01
  %cmp.i113 = fcmp olt double %mul31, -7.000000e+01
  br i1 %cmp.i113, label %myexp.exit117, label %if.else.i115

if.else.i115:                                     ; preds = %myexp.exit110
  %call.i114 = tail call double @exp(double %mul31) #7
  br label %myexp.exit117

myexp.exit117:                                    ; preds = %myexp.exit110, %if.else.i115
  %retval.0.i116 = phi double [ %call.i114, %if.else.i115 ], [ 0.000000e+00, %myexp.exit110 ]
  %arrayidx36 = getelementptr inbounds [6 x [8 x double]]* @ptheta_incoh.ppp, i64 0, i64 %idxprom, i64 6
  %3 = load double* %arrayidx36, align 16, !tbaa !5
  %sub37 = fsub double %conv, %3
  %arrayidx40 = getelementptr inbounds [6 x [8 x double]]* @ptheta_incoh.ppp, i64 0, i64 %idxprom, i64 5
  %4 = load double* %arrayidx40, align 8, !tbaa !5
  %div41 = fdiv double %sub37, %4
  %conv42 = fptrunc double %div41 to float
  %mul.i112 = fmul float %conv42, %conv42
  %conv44 = fpext float %mul.i112 to double
  %mul45 = fmul double %conv44, -5.000000e-01
  %cmp.i101 = fcmp olt double %mul45, -7.000000e+01
  br i1 %cmp.i101, label %myexp.exit105, label %if.else.i103

if.else.i103:                                     ; preds = %myexp.exit117
  %call.i102 = tail call double @exp(double %mul45) #7
  br label %myexp.exit105

myexp.exit105:                                    ; preds = %myexp.exit117, %if.else.i103
  %retval.0.i104 = phi double [ %call.i102, %if.else.i103 ], [ 0.000000e+00, %myexp.exit117 ]
  %add52 = fadd double %conv9, %3
  %div56 = fdiv double %add52, %4
  %conv57 = fptrunc double %div56 to float
  %mul.i100 = fmul float %conv57, %conv57
  %conv59 = fpext float %mul.i100 to double
  %mul60 = fmul double %conv59, -5.000000e-01
  %cmp.i = fcmp olt double %mul60, -7.000000e+01
  br i1 %cmp.i, label %myexp.exit, label %if.else.i

if.else.i:                                        ; preds = %myexp.exit105
  %call.i = tail call double @exp(double %mul60) #7
  br label %myexp.exit

myexp.exit:                                       ; preds = %myexp.exit105, %if.else.i
  %retval.0.i = phi double [ %call.i, %if.else.i ], [ 0.000000e+00, %myexp.exit105 ]
  %arrayidx64 = getelementptr inbounds [6 x [8 x double]]* @ptheta_incoh.ppp, i64 0, i64 %idxprom, i64 0
  %5 = load double* %arrayidx64, align 16, !tbaa !5
  %add65 = fadd double %retval.0.i97, %retval.0.i109
  %mul66 = fmul double %add65, %5
  %arrayidx69 = getelementptr inbounds [6 x [8 x double]]* @ptheta_incoh.ppp, i64 0, i64 %idxprom, i64 2
  %6 = load double* %arrayidx69, align 16, !tbaa !5
  %mul70 = fmul double %retval.0.i116, %6
  %add71 = fadd double %mul66, %mul70
  %arrayidx74 = getelementptr inbounds [6 x [8 x double]]* @ptheta_incoh.ppp, i64 0, i64 %idxprom, i64 4
  %7 = load double* %arrayidx74, align 16, !tbaa !5
  %add75 = fadd double %retval.0.i104, %retval.0.i
  %mul76 = fmul double %add75, %7
  %add77 = fadd double %add71, %mul76
  %conv78 = fptrunc double %add77 to float
  ret float %conv78
}
