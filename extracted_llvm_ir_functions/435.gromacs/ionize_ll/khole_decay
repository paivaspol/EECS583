define i32 @khole_decay(%struct._IO_FILE* nocapture %fp, %struct.t_cross_atom* nocapture %ca, [3 x float]* nocapture %x, [3 x float]* nocapture %v, i32 %ion, i32* %seed, float %dt) #0 {
entry:
  %dv = alloca [3 x float], align 4
  %vAuger = getelementptr inbounds %struct.t_cross_atom* %ca, i64 0, i32 6
  %0 = load float* %vAuger, align 4, !tbaa !4
  %cmp = fcmp olt float %0, 0.000000e+00
  %z.i.phi.trans.insert = getelementptr inbounds %struct.t_cross_atom* %ca, i64 0, i32 0
  %.pre = load i32* %z.i.phi.trans.insert, align 4, !tbaa !0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %idxprom = sext i32 %.pre to i64
  %tau = getelementptr inbounds [27 x %struct.t_recoil]* @recoil, i64 0, i64 %idxprom, i32 3
  %1 = load float* %tau, align 4, !tbaa !4
  %fabsf = call float @fabsf(float %1) #10
  %2 = fpext float %fabsf to double
  %cmp1 = fcmp olt double %2, 1.200000e-38
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %entry, %lor.lhs.false
  %3 = load %struct._IO_FILE** @stderr, align 8, !tbaa !3
  %n.i = getelementptr inbounds %struct.t_cross_atom* %ca, i64 0, i32 1
  %4 = load i32* %n.i, align 4, !tbaa !0
  %k.i = getelementptr inbounds %struct.t_cross_atom* %ca, i64 0, i32 2
  %5 = load i32* %k.i, align 4, !tbaa !0
  %call.i = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([51 x i8]* @.str, i64 0, i64 0), i32 451, i32 %ion, i32 %.pre, i32 %4, i32 %5) #7
  call void @exit(i32 1) #11
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %call3 = call float @rando(i32* %seed) #7
  %6 = load i32* %z.i.phi.trans.insert, align 4, !tbaa !0
  %idxprom5 = sext i32 %6 to i64
  %tau7 = getelementptr inbounds [27 x %struct.t_recoil]* @recoil, i64 0, i64 %idxprom5, i32 3
  %7 = load float* %tau7, align 4, !tbaa !4
  %div = fdiv float %dt, %7
  %cmp8 = fcmp olt float %call3, %div
  br i1 %cmp8, label %if.then10, label %return

if.then10:                                        ; preds = %if.end
  %8 = load %struct._IO_FILE** @debug, align 8, !tbaa !3
  %tobool = icmp eq %struct._IO_FILE* %8, null
  br i1 %tobool, label %if.end13, label %if.then11

if.then11:                                        ; preds = %if.then10
  %9 = call i64 @fwrite(i8* getelementptr inbounds ([32 x i8]* @.str17, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %8)
  br label %if.end13

if.end13:                                         ; preds = %if.then10, %if.then11
  %n = getelementptr inbounds %struct.t_cross_atom* %ca, i64 0, i32 1
  %10 = load i32* %n, align 4, !tbaa !0
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %n, align 4, !tbaa !0
  %k = getelementptr inbounds %struct.t_cross_atom* %ca, i64 0, i32 2
  %11 = load i32* %k, align 4, !tbaa !0
  %dec = add nsw i32 %11, -1
  store i32 %dec, i32* %k, align 4, !tbaa !0
  %arraydecay = getelementptr inbounds [3 x float]* %dv, i64 0, i64 0
  call void @rand_vector(float* %arraydecay, i32* %seed) #9
  %12 = load float* %vAuger, align 4, !tbaa !4
  %13 = load %struct._IO_FILE** @debug, align 8, !tbaa !3
  %tobool15 = icmp eq %struct._IO_FILE* %13, null
  br i1 %tobool15, label %if.end13.if.end25_crit_edge, label %if.then16

if.end13.if.end25_crit_edge:                      ; preds = %if.end13
  %.pre43 = load float* %arraydecay, align 4, !tbaa !4
  %arrayidx2.i.phi.trans.insert = getelementptr inbounds [3 x float]* %dv, i64 0, i64 1
  %.pre44 = load float* %arrayidx2.i.phi.trans.insert, align 4, !tbaa !4
  %arrayidx5.i.phi.trans.insert = getelementptr inbounds [3 x float]* %dv, i64 0, i64 2
  %.pre45 = load float* %arrayidx5.i.phi.trans.insert, align 4, !tbaa !4
  br label %if.end25

if.then16:                                        ; preds = %if.end13
  %conv17 = fpext float %12 to double
  %14 = load float* %arraydecay, align 4, !tbaa !4
  %conv19 = fpext float %14 to double
  %arrayidx20 = getelementptr inbounds [3 x float]* %dv, i64 0, i64 1
  %15 = load float* %arrayidx20, align 4, !tbaa !4
  %conv21 = fpext float %15 to double
  %arrayidx22 = getelementptr inbounds [3 x float]* %dv, i64 0, i64 2
  %16 = load float* %arrayidx22, align 4, !tbaa !4
  %conv23 = fpext float %16 to double
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([48 x i8]* @.str18, i64 0, i64 0), double %conv17, double %conv19, double %conv21, double %conv23) #7
  br label %if.end25

if.end25:                                         ; preds = %if.end13.if.end25_crit_edge, %if.then16
  %17 = phi float [ %.pre45, %if.end13.if.end25_crit_edge ], [ %16, %if.then16 ]
  %18 = phi float [ %.pre44, %if.end13.if.end25_crit_edge ], [ %15, %if.then16 ]
  %19 = phi float [ %.pre43, %if.end13.if.end25_crit_edge ], [ %14, %if.then16 ]
  %mul.i = fmul float %12, %19
  store float %mul.i, float* %arraydecay, align 4, !tbaa !4
  %arrayidx2.i = getelementptr inbounds [3 x float]* %dv, i64 0, i64 1
  %mul3.i = fmul float %12, %18
  store float %mul3.i, float* %arrayidx2.i, align 4, !tbaa !4
  %arrayidx5.i = getelementptr inbounds [3 x float]* %dv, i64 0, i64 2
  %mul6.i = fmul float %12, %17
  store float %mul6.i, float* %arrayidx5.i, align 4, !tbaa !4
  %idxprom28 = sext i32 %ion to i64
  %arraydecay30 = getelementptr inbounds [3 x float]* %v, i64 %idxprom28, i64 0
  %20 = load float* %arraydecay30, align 4, !tbaa !4
  %add.i = fadd float %20, %mul.i
  %arrayidx2.i41 = getelementptr inbounds [3 x float]* %v, i64 %idxprom28, i64 1
  %21 = load float* %arrayidx2.i41, align 4, !tbaa !4
  %add4.i = fadd float %21, %mul3.i
  %arrayidx5.i42 = getelementptr inbounds [3 x float]* %v, i64 %idxprom28, i64 2
  %22 = load float* %arrayidx5.i42, align 4, !tbaa !4
  %add7.i = fadd float %mul6.i, %22
  store float %add.i, float* %arraydecay30, align 4, !tbaa !4
  store float %add4.i, float* %arrayidx2.i41, align 4, !tbaa !4
  store float %add7.i, float* %arrayidx5.i42, align 4, !tbaa !4
  br label %return

return:                                           ; preds = %if.end, %if.end25
  %retval.0 = phi i32 [ 1, %if.end25 ], [ 0, %if.end ]
  ret i32 %retval.0
}
