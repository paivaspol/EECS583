define void @make_bspline_moduli(float** nocapture readonly %bsp_mod, i32 %nx, i32 %ny, i32 %nz, i32 %order) #1 {
  %1 = icmp sgt i32 %ny, %nz
  %2 = select i1 %1, i32 %ny, i32 %nz
  %3 = icmp slt i32 %2, %nx
  %nx. = select i1 %3, i32 %nx, i32 %2
  %4 = tail call i8* @save_calloc(i8* getelementptr inbounds ([5 x i8]* @.str3, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8]* @.str4, i64 0, i64 0), i32 614, i32 %order, i32 4) #6
  %5 = bitcast i8* %4 to float*
  %6 = tail call i8* @save_calloc(i8* getelementptr inbounds ([6 x i8]* @.str5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8]* @.str4, i64 0, i64 0), i32 615, i32 %order, i32 4) #6
  %7 = bitcast i8* %6 to float*
  %8 = tail call i8* @save_calloc(i8* getelementptr inbounds ([9 x i8]* @.str6, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8]* @.str4, i64 0, i64 0), i32 616, i32 %nx., i32 4) #6
  %9 = bitcast i8* %8 to float*
  %10 = add i32 %order, -1
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds float* %5, i64 %11
  store float 0.000000e+00, float* %12, align 4, !tbaa !6
  %13 = getelementptr inbounds i8* %4, i64 4
  %14 = bitcast i8* %13 to float*
  store float 0.000000e+00, float* %14, align 4, !tbaa !6
  store float 1.000000e+00, float* %5, align 4, !tbaa !6
  %15 = icmp sgt i32 %order, 3
  br i1 %15, label %.lr.ph15, label %._crit_edge20

.lr.ph15:                                         ; preds = %0, %._crit_edge16
  %indvars.iv38 = phi i64 [ %indvars.iv.next39, %._crit_edge16 ], [ 3, %0 ]
  %indvars.iv34 = phi i32 [ %indvars.iv.next35, %._crit_edge16 ], [ 2, %0 ]
  %16 = trunc i64 %indvars.iv38 to i32
  %17 = sitofp i32 %16 to double
  %18 = fadd double %17, -1.000000e+00
  %19 = fdiv double 1.000000e+00, %18
  %20 = fptrunc double %19 to float
  %21 = add nsw i64 %indvars.iv38, -1
  %22 = getelementptr inbounds float* %5, i64 %21
  store float 0.000000e+00, float* %22, align 4, !tbaa !6
  br label %23

; <label>:23                                      ; preds = %23, %.lr.ph15
  %indvars.iv32 = phi i64 [ 1, %.lr.ph15 ], [ %indvars.iv.next33, %23 ]
  %24 = trunc i64 %indvars.iv32 to i32
  %25 = sitofp i32 %24 to float
  %26 = sub nsw i64 %indvars.iv38, %indvars.iv32
  %27 = add nsw i64 %26, -2
  %28 = getelementptr inbounds float* %5, i64 %27
  %29 = load float* %28, align 4, !tbaa !6
  %30 = fmul float %25, %29
  %31 = trunc i64 %26 to i32
  %32 = sitofp i32 %31 to float
  %33 = add nsw i64 %26, -1
  %34 = getelementptr inbounds float* %5, i64 %33
  %35 = load float* %34, align 4, !tbaa !6
  %36 = fmul float %32, %35
  %37 = fadd float %30, %36
  %38 = fmul float %20, %37
  store float %38, float* %34, align 4, !tbaa !6
  %indvars.iv.next33 = add nuw nsw i64 %indvars.iv32, 1
  %lftr.wideiv36 = trunc i64 %indvars.iv.next33 to i32
  %exitcond37 = icmp eq i32 %lftr.wideiv36, %indvars.iv34
  br i1 %exitcond37, label %._crit_edge16, label %23

._crit_edge16:                                    ; preds = %23
  %39 = load float* %5, align 4, !tbaa !6
  %40 = fmul float %20, %39
  store float %40, float* %5, align 4, !tbaa !6
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1
  %indvars.iv.next35 = add nuw nsw i32 %indvars.iv34, 1
  %exitcond41 = icmp eq i32 %16, %10
  br i1 %exitcond41, label %._crit_edge20, label %.lr.ph15

._crit_edge20:                                    ; preds = %._crit_edge16, %0
  %41 = phi float [ 1.000000e+00, %0 ], [ %40, %._crit_edge16 ]
  %42 = fsub float -0.000000e+00, %41
  store float %42, float* %7, align 4, !tbaa !6
  %43 = icmp sgt i32 %order, 1
  br i1 %43, label %.lr.ph11, label %._crit_edge12

.lr.ph11:                                         ; preds = %._crit_edge20, %.lr.ph11
  %indvars.iv28 = phi i64 [ %indvars.iv.next29, %.lr.ph11 ], [ 1, %._crit_edge20 ]
  %44 = add nsw i64 %indvars.iv28, -1
  %45 = getelementptr inbounds float* %5, i64 %44
  %46 = load float* %45, align 4, !tbaa !6
  %47 = getelementptr inbounds float* %5, i64 %indvars.iv28
  %48 = load float* %47, align 4, !tbaa !6
  %49 = fsub float %46, %48
  %50 = getelementptr inbounds float* %7, i64 %indvars.iv28
  store float %49, float* %50, align 4, !tbaa !6
  %indvars.iv.next29 = add nuw nsw i64 %indvars.iv28, 1
  %lftr.wideiv30 = trunc i64 %indvars.iv28 to i32
  %exitcond31 = icmp eq i32 %lftr.wideiv30, %10
  br i1 %exitcond31, label %._crit_edge12, label %.lr.ph11

._crit_edge12:                                    ; preds = %.lr.ph11, %._crit_edge20
  %51 = sitofp i32 %10 to double
  %52 = fdiv double 1.000000e+00, %51
  %53 = fptrunc double %52 to float
  store float 0.000000e+00, float* %12, align 4, !tbaa !6
  %54 = icmp sgt i32 %10, 1
  br i1 %54, label %.lr.ph7, label %._crit_edge8

.lr.ph7:                                          ; preds = %._crit_edge12
  %55 = sext i32 %order to i64
  %56 = add i32 %order, -2
  br label %57

; <label>:57                                      ; preds = %57, %.lr.ph7
  %indvars.iv24 = phi i64 [ 1, %.lr.ph7 ], [ %indvars.iv.next25, %57 ]
  %58 = trunc i64 %indvars.iv24 to i32
  %59 = sitofp i32 %58 to float
  %60 = sub nsw i64 %55, %indvars.iv24
  %61 = add nsw i64 %60, -2
  %62 = getelementptr inbounds float* %5, i64 %61
  %63 = load float* %62, align 4, !tbaa !6
  %64 = fmul float %59, %63
  %65 = trunc i64 %60 to i32
  %66 = sitofp i32 %65 to float
  %67 = add nsw i64 %60, -1
  %68 = getelementptr inbounds float* %5, i64 %67
  %69 = load float* %68, align 4, !tbaa !6
  %70 = fmul float %66, %69
  %71 = fadd float %64, %70
  %72 = fmul float %53, %71
  store float %72, float* %68, align 4, !tbaa !6
  %indvars.iv.next25 = add nuw nsw i64 %indvars.iv24, 1
  %exitcond27 = icmp eq i32 %58, %56
  br i1 %exitcond27, label %._crit_edge8, label %57

._crit_edge8:                                     ; preds = %57, %._crit_edge12
  %73 = load float* %5, align 4, !tbaa !6
  %74 = fmul float %53, %73
  store float %74, float* %5, align 4, !tbaa !6
  %75 = icmp sgt i32 %nx., 0
  br i1 %75, label %.lr.ph4, label %.preheader

.lr.ph4:                                          ; preds = %._crit_edge8
  %76 = icmp sgt i32 %nz, %ny
  %smax = select i1 %76, i32 %nz, i32 %ny
  %77 = icmp sgt i32 %smax, %nx
  %smax23 = select i1 %77, i32 %smax, i32 %nx
  %78 = add i32 %smax23, -1
  %79 = zext i32 %78 to i64
  %80 = shl nuw nsw i64 %79, 2
  %81 = add nuw nsw i64 %80, 4
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 %81, i32 4, i1 false)
  br label %.preheader

.preheader:                                       ; preds = %.lr.ph4, %._crit_edge8
  %82 = icmp slt i32 %order, 1
  br i1 %82, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.preheader, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 1, %.preheader ]
  %83 = add nsw i64 %indvars.iv, -1
  %84 = getelementptr inbounds float* %5, i64 %83
  %85 = bitcast float* %84 to i32*
  %86 = load i32* %85, align 4, !tbaa !6
  %87 = getelementptr inbounds float* %9, i64 %indvars.iv
  %88 = bitcast float* %87 to i32*
  store i32 %86, i32* %88, align 4, !tbaa !6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %order
  br i1 %exitcond, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %.preheader
  %89 = load float** %bsp_mod, align 8, !tbaa !2
  tail call void @make_dft_mod(float* %89, float* %9, i32 %nx) #8
  %90 = getelementptr inbounds float** %bsp_mod, i64 1
  %91 = load float** %90, align 8, !tbaa !2
  tail call void @make_dft_mod(float* %91, float* %9, i32 %ny) #8
  %92 = getelementptr inbounds float** %bsp_mod, i64 2
  %93 = load float** %92, align 8, !tbaa !2
  tail call void @make_dft_mod(float* %93, float* %9, i32 %nz) #8
  tail call void @save_free(i8* getelementptr inbounds ([5 x i8]* @.str3, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8]* @.str4, i64 0, i64 0), i32 648, i8* %4) #6
  tail call void @save_free(i8* getelementptr inbounds ([6 x i8]* @.str5, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8]* @.str4, i64 0, i64 0), i32 649, i8* %6) #6
  tail call void @save_free(i8* getelementptr inbounds ([9 x i8]* @.str6, i64 0, i64 0), i8* getelementptr inbounds ([63 x i8]* @.str4, i64 0, i64 0), i32 650, i8* %8) #6
  ret void
}
