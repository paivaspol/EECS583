define void @make_bsplines(float** nocapture readonly %theta, float** nocapture readonly %dtheta, i32 %order, i32 %nx, i32 %ny, i32 %nz, [3 x float]* nocapture readonly %fractx, [3 x i32]* nocapture readnone %idx, float* nocapture readonly %charge, i32 %nr) #1 {
  %1 = icmp sgt i32 %nr, 0
  br i1 %1, label %.lr.ph28, label %._crit_edge29

.lr.ph28:                                         ; preds = %0
  %2 = add i32 %order, -1
  %3 = sext i32 %2 to i64
  %4 = icmp sgt i32 %order, 3
  %5 = icmp sgt i32 %order, 1
  %6 = sitofp i32 %2 to double
  %7 = fdiv double 1.000000e+00, %6
  %8 = fptrunc double %7 to float
  %9 = add nsw i32 %order, -2
  %10 = sext i32 %9 to i64
  %11 = icmp sgt i32 %2, 1
  %12 = sext i32 %order to i64
  %13 = add i32 %nr, -1
  br label %14

; <label>:14                                      ; preds = %.loopexit, %.lr.ph28
  %indvars.iv47 = phi i64 [ 0, %.lr.ph28 ], [ %indvars.iv.next48, %.loopexit ]
  %15 = getelementptr inbounds float* %charge, i64 %indvars.iv47
  %16 = load float* %15, align 4, !tbaa !6
  %fabsf = tail call float @fabsf(float %16) #4
  %17 = fpext float %fabsf to double
  %18 = fcmp ogt double %17, 1.200000e-38
  br i1 %18, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %14
  %19 = mul nsw i64 %indvars.iv47, %12
  %.sum = add nsw i64 %19, %3
  %.sum1 = add nsw i64 %19, 1
  %.sum2 = add nsw i64 %19, %10
  br label %20

; <label>:20                                      ; preds = %._crit_edge24, %.preheader
  %indvars.iv44 = phi i64 [ 0, %.preheader ], [ %indvars.iv.next45, %._crit_edge24 ]
  %21 = getelementptr inbounds [3 x float]* %fractx, i64 %indvars.iv47, i64 %indvars.iv44
  %22 = load float* %21, align 4, !tbaa !6
  %23 = getelementptr inbounds float** %theta, i64 %indvars.iv44
  %24 = load float** %23, align 8, !tbaa !2
  %25 = getelementptr inbounds float* %24, i64 %19
  %26 = getelementptr inbounds float* %24, i64 %.sum
  store float 0.000000e+00, float* %26, align 4, !tbaa !6
  %27 = getelementptr inbounds float* %24, i64 %.sum1
  store float %22, float* %27, align 4, !tbaa !6
  %28 = fsub float 1.000000e+00, %22
  store float %28, float* %25, align 4, !tbaa !6
  br i1 %4, label %.lr.ph, label %._crit_edge16

.lr.ph:                                           ; preds = %20, %._crit_edge
  %indvars.iv32 = phi i64 [ %indvars.iv.next33, %._crit_edge ], [ 3, %20 ]
  %indvars.iv30 = phi i32 [ %indvars.iv.next31, %._crit_edge ], [ 2, %20 ]
  %29 = trunc i64 %indvars.iv32 to i32
  %30 = sitofp i32 %29 to double
  %31 = fadd double %30, -1.000000e+00
  %32 = fdiv double 1.000000e+00, %31
  %33 = fptrunc double %32 to float
  %34 = fmul float %22, %33
  %35 = add nsw i64 %indvars.iv32, -2
  %.sum8 = add nsw i64 %35, %19
  %36 = getelementptr inbounds float* %24, i64 %.sum8
  %37 = load float* %36, align 4, !tbaa !6
  %38 = fmul float %37, %34
  %39 = add nsw i64 %indvars.iv32, -1
  %.sum9 = add nsw i64 %39, %19
  %40 = getelementptr inbounds float* %24, i64 %.sum9
  store float %38, float* %40, align 4, !tbaa !6
  br label %41

; <label>:41                                      ; preds = %41, %.lr.ph
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %41 ]
  %42 = trunc i64 %indvars.iv to i32
  %43 = sitofp i32 %42 to float
  %44 = fadd float %22, %43
  %45 = sub nsw i64 %indvars.iv32, %indvars.iv
  %46 = add nsw i64 %45, -2
  %.sum10 = add nsw i64 %46, %19
  %47 = getelementptr inbounds float* %24, i64 %.sum10
  %48 = load float* %47, align 4, !tbaa !6
  %49 = fmul float %44, %48
  %50 = trunc i64 %45 to i32
  %51 = sitofp i32 %50 to float
  %52 = fsub float %51, %22
  %53 = add nsw i64 %45, -1
  %.sum11 = add nsw i64 %53, %19
  %54 = getelementptr inbounds float* %24, i64 %.sum11
  %55 = load float* %54, align 4, !tbaa !6
  %56 = fmul float %52, %55
  %57 = fadd float %49, %56
  %58 = fmul float %33, %57
  store float %58, float* %54, align 4, !tbaa !6
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %indvars.iv30
  br i1 %exitcond, label %._crit_edge, label %41

._crit_edge:                                      ; preds = %41
  %59 = fmul float %28, %33
  %60 = load float* %25, align 4, !tbaa !6
  %61 = fmul float %59, %60
  store float %61, float* %25, align 4, !tbaa !6
  %indvars.iv.next33 = add nuw nsw i64 %indvars.iv32, 1
  %indvars.iv.next31 = add nuw nsw i32 %indvars.iv30, 1
  %exitcond35 = icmp eq i32 %29, %2
  br i1 %exitcond35, label %._crit_edge16, label %.lr.ph

._crit_edge16:                                    ; preds = %._crit_edge, %20
  %62 = phi float [ %28, %20 ], [ %61, %._crit_edge ]
  %63 = getelementptr inbounds float** %dtheta, i64 %indvars.iv44
  %64 = load float** %63, align 8, !tbaa !2
  %65 = getelementptr inbounds float* %64, i64 %19
  %66 = fsub float -0.000000e+00, %62
  store float %66, float* %65, align 4, !tbaa !6
  br i1 %5, label %.lr.ph19, label %._crit_edge20

.lr.ph19:                                         ; preds = %._crit_edge16, %.lr.ph19
  %indvars.iv36 = phi i64 [ %indvars.iv.next37, %.lr.ph19 ], [ 1, %._crit_edge16 ]
  %67 = add nsw i64 %indvars.iv36, -1
  %.sum5 = add nsw i64 %67, %19
  %68 = getelementptr inbounds float* %24, i64 %.sum5
  %69 = load float* %68, align 4, !tbaa !6
  %.sum6 = add nsw i64 %indvars.iv36, %19
  %70 = getelementptr inbounds float* %24, i64 %.sum6
  %71 = load float* %70, align 4, !tbaa !6
  %72 = fsub float %69, %71
  %73 = getelementptr inbounds float* %64, i64 %.sum6
  store float %72, float* %73, align 4, !tbaa !6
  %indvars.iv.next37 = add nuw nsw i64 %indvars.iv36, 1
  %lftr.wideiv38 = trunc i64 %indvars.iv36 to i32
  %exitcond39 = icmp eq i32 %lftr.wideiv38, %2
  br i1 %exitcond39, label %._crit_edge20, label %.lr.ph19

._crit_edge20:                                    ; preds = %.lr.ph19, %._crit_edge16
  %74 = fmul float %22, %8
  %75 = getelementptr inbounds float* %24, i64 %.sum2
  %76 = load float* %75, align 4, !tbaa !6
  %77 = fmul float %76, %74
  store float %77, float* %26, align 4, !tbaa !6
  br i1 %11, label %.lr.ph23, label %._crit_edge24

.lr.ph23:                                         ; preds = %._crit_edge20, %.lr.ph23
  %indvars.iv40 = phi i64 [ %indvars.iv.next41, %.lr.ph23 ], [ 1, %._crit_edge20 ]
  %78 = trunc i64 %indvars.iv40 to i32
  %79 = sitofp i32 %78 to float
  %80 = fadd float %22, %79
  %81 = sub nsw i64 %12, %indvars.iv40
  %82 = add nsw i64 %81, -2
  %.sum3 = add nsw i64 %82, %19
  %83 = getelementptr inbounds float* %24, i64 %.sum3
  %84 = load float* %83, align 4, !tbaa !6
  %85 = fmul float %80, %84
  %86 = trunc i64 %81 to i32
  %87 = sitofp i32 %86 to float
  %88 = fsub float %87, %22
  %89 = add nsw i64 %81, -1
  %.sum4 = add nsw i64 %89, %19
  %90 = getelementptr inbounds float* %24, i64 %.sum4
  %91 = load float* %90, align 4, !tbaa !6
  %92 = fmul float %88, %91
  %93 = fadd float %85, %92
  %94 = fmul float %8, %93
  store float %94, float* %90, align 4, !tbaa !6
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 1
  %exitcond43 = icmp eq i32 %78, %9
  br i1 %exitcond43, label %._crit_edge24, label %.lr.ph23

._crit_edge24:                                    ; preds = %.lr.ph23, %._crit_edge20
  %95 = fmul float %28, %8
  %96 = load float* %25, align 4, !tbaa !6
  %97 = fmul float %95, %96
  store float %97, float* %25, align 4, !tbaa !6
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 1
  %exitcond46 = icmp eq i64 %indvars.iv.next45, 3
  br i1 %exitcond46, label %.loopexit, label %20

.loopexit:                                        ; preds = %._crit_edge24, %14
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 1
  %lftr.wideiv49 = trunc i64 %indvars.iv47 to i32
  %exitcond50 = icmp eq i32 %lftr.wideiv49, %13
  br i1 %exitcond50, label %._crit_edge29, label %14

._crit_edge29:                                    ; preds = %.loopexit, %0
  ret void
}
