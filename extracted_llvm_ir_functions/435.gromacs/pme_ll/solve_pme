define float @solve_pme(%struct.t_fftgrid* %grid, float %ewaldcoeff, float %vol, float** nocapture readonly %bsp_mod, [3 x float]* nocapture readonly %recipbox, [3 x float]* nocapture %vir, %struct.t_commrec* nocapture readonly %cr) #1 {
  %ptr = alloca %struct.t_fft_c*, align 8
  %nx = alloca i32, align 4
  %ny = alloca i32, align 4
  %nz = alloca i32, align 4
  %la2 = alloca i32, align 4
  %la12 = alloca i32, align 4
  %1 = fmul float %ewaldcoeff, %ewaldcoeff
  %2 = fpext float %1 to double
  %3 = fdiv double 0x4023BD3CC9BE45DE, %2
  %4 = fptrunc double %3 to float
  %5 = getelementptr inbounds %struct.t_commrec* %cr, i64 0, i32 1
  %6 = load i32* %5, align 4, !tbaa !10
  %7 = icmp sgt i32 %6, 1
  br i1 %7, label %12, label %8

; <label>:8                                       ; preds = %0
  %9 = getelementptr inbounds %struct.t_commrec* %cr, i64 0, i32 5
  %10 = load i32* %9, align 4, !tbaa !12
  %11 = icmp sgt i32 %10, 1
  br label %12

; <label>:12                                      ; preds = %8, %0
  %13 = phi i1 [ true, %0 ], [ %11, %8 ]
  %14 = bitcast %struct.t_fft_c** %ptr to float**
  call void @unpack_fftgrid(%struct.t_fftgrid* %grid, i32* %nx, i32* %ny, i32* %nz, i32* %la2, i32* %la12, i32 0, float** %14) #6
  %15 = getelementptr inbounds [3 x float]* %recipbox, i64 0, i64 0
  %16 = load float* %15, align 4, !tbaa !6
  %17 = getelementptr inbounds [3 x float]* %recipbox, i64 1, i64 0
  %18 = load float* %17, align 4, !tbaa !6
  %19 = getelementptr inbounds [3 x float]* %recipbox, i64 1, i64 1
  %20 = load float* %19, align 4, !tbaa !6
  %21 = getelementptr inbounds [3 x float]* %recipbox, i64 2, i64 0
  %22 = load float* %21, align 4, !tbaa !6
  %23 = getelementptr inbounds [3 x float]* %recipbox, i64 2, i64 1
  %24 = load float* %23, align 4, !tbaa !6
  %25 = getelementptr inbounds [3 x float]* %recipbox, i64 2, i64 2
  %26 = load float* %25, align 4, !tbaa !6
  %27 = load i32* %nx, align 4, !tbaa !8
  %28 = add nsw i32 %27, 1
  %29 = sdiv i32 %28, 2
  %30 = load i32* %ny, align 4, !tbaa !8
  %31 = add nsw i32 %30, 1
  %32 = sdiv i32 %31, 2
  %33 = load i32* %nz, align 4, !tbaa !8
  %34 = sdiv i32 %33, 2
  br i1 %13, label %.thread, label %35

.thread:                                          ; preds = %12
  call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([44 x i8]* @.str2, i64 0, i64 0)) #6
  br label %._crit_edge48

; <label>:35                                      ; preds = %12
  %36 = icmp sgt i32 %30, 0
  br i1 %36, label %.lr.ph47, label %._crit_edge48

.lr.ph47:                                         ; preds = %35
  %37 = fpext float %vol to double
  %38 = fmul double %37, 0x400921FB54442D18
  %39 = getelementptr inbounds float** %bsp_mod, i64 1
  %40 = load float** %39, align 8, !tbaa !2
  %41 = load i32* %nx, align 4, !tbaa !8
  %42 = icmp sgt i32 %41, 0
  %43 = load %struct.t_fft_c** %ptr, align 8, !tbaa !2
  %44 = load i32* %la12, align 4, !tbaa !8
  %45 = load i32* %la2, align 4, !tbaa !8
  %46 = icmp sgt i32 %33, -2
  %47 = getelementptr inbounds float** %bsp_mod, i64 2
  %48 = load i32* %nz, align 4, !tbaa !8
  %49 = add nsw i32 %48, 1
  %50 = sdiv i32 %49, 2
  %51 = load i32* %ny, align 4, !tbaa !8
  %52 = sext i32 %50 to i64
  %53 = sext i32 %34 to i64
  %54 = sext i32 %44 to i64
  %55 = sext i32 %45 to i64
  %56 = sext i32 %29 to i64
  %57 = add i32 %41, -1
  %58 = sext i32 %32 to i64
  %59 = add i32 %30, -1
  br label %60

; <label>:60                                      ; preds = %._crit_edge29, %.lr.ph47
  %indvars.iv58 = phi i64 [ 0, %.lr.ph47 ], [ %indvars.iv.next59, %._crit_edge29 ]
  %ky.044 = phi i32 [ 0, %.lr.ph47 ], [ %175, %._crit_edge29 ]
  %virzz.043 = phi float [ 0.000000e+00, %.lr.ph47 ], [ %virzz.1.lcssa, %._crit_edge29 ]
  %virxx.038 = phi float [ 0.000000e+00, %.lr.ph47 ], [ %virxx.1.lcssa, %._crit_edge29 ]
  %energy.037 = phi float [ 0.000000e+00, %.lr.ph47 ], [ %energy.1.lcssa, %._crit_edge29 ]
  %61 = phi <4 x float> [ zeroinitializer, %.lr.ph47 ], [ %174, %._crit_edge29 ]
  %62 = icmp slt i64 %indvars.iv58, %58
  %63 = trunc i64 %indvars.iv58 to i32
  %64 = sub nsw i32 %ky.044, %51
  %. = select i1 %62, i32 %63, i32 %64
  %my.0 = sitofp i32 %. to float
  %65 = getelementptr inbounds float* %40, i64 %indvars.iv58
  %66 = load float* %65, align 4, !tbaa !6
  %67 = fpext float %66 to double
  %68 = fmul double %38, %67
  %69 = fptrunc double %68 to float
  br i1 %42, label %.lr.ph28, label %._crit_edge29

.lr.ph28:                                         ; preds = %60
  %70 = fmul float %20, %my.0
  %71 = load float** %bsp_mod, align 8, !tbaa !2
  %72 = mul nsw i64 %54, %indvars.iv58
  %73 = fmul float %24, %my.0
  %74 = mul nsw i64 %55, %indvars.iv58
  br label %75

; <label>:75                                      ; preds = %._crit_edge, %.lr.ph28
  %indvars.iv56 = phi i64 [ 0, %.lr.ph28 ], [ %indvars.iv.next57, %._crit_edge ]
  %kx.026 = phi i32 [ 0, %.lr.ph28 ], [ %173, %._crit_edge ]
  %virzz.125 = phi float [ %virzz.043, %.lr.ph28 ], [ %virzz.2.lcssa, %._crit_edge ]
  %virxx.120 = phi float [ %virxx.038, %.lr.ph28 ], [ %virxx.2.lcssa, %._crit_edge ]
  %energy.119 = phi float [ %energy.037, %.lr.ph28 ], [ %energy.2.lcssa, %._crit_edge ]
  %76 = phi <4 x float> [ %61, %.lr.ph28 ], [ %172, %._crit_edge ]
  %77 = icmp slt i64 %indvars.iv56, %56
  %78 = select i1 %77, i32 0, i32 %41
  %79 = trunc i64 %indvars.iv56 to i32
  %mx.0.in = sub nsw i32 %79, %78
  %mx.0 = sitofp i32 %mx.0.in to float
  %80 = fmul float %16, %mx.0
  %81 = fmul float %18, %mx.0
  %82 = fadd float %70, %81
  %83 = getelementptr inbounds float* %71, i64 %indvars.iv56
  %84 = load float* %83, align 4, !tbaa !6
  br i1 %13, label %85, label %89

; <label>:85                                      ; preds = %75
  %86 = mul nsw i32 %45, %kx.026
  %87 = trunc i64 %72 to i32
  %88 = add nsw i32 %86, %87
  br label %93

; <label>:89                                      ; preds = %75
  %90 = mul nsw i64 %54, %indvars.iv56
  %91 = add nsw i64 %74, %90
  %92 = trunc i64 %91 to i32
  br label %93

; <label>:93                                      ; preds = %89, %85
  %.pn.in = phi i32 [ %88, %85 ], [ %92, %89 ]
  br i1 %46, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %93
  %.pn = sext i32 %.pn.in to i64
  %p0.0 = getelementptr inbounds %struct.t_fft_c* %43, i64 %.pn
  %94 = or i64 %indvars.iv56, %indvars.iv58
  %95 = fmul float %22, %mx.0
  %96 = fadd float %73, %95
  %97 = fmul float %80, %80
  %98 = fmul float %82, %82
  %99 = fadd float %97, %98
  br label %100

; <label>:100                                     ; preds = %.lr.ph, %168
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %168 ]
  %p0.112 = phi %struct.t_fft_c* [ %p0.0, %.lr.ph ], [ %170, %168 ]
  %virzz.210 = phi float [ %virzz.125, %.lr.ph ], [ %virzz.3, %168 ]
  %virxx.25 = phi float [ %virxx.120, %.lr.ph ], [ %virxx.3, %168 ]
  %energy.24 = phi float [ %energy.119, %.lr.ph ], [ %energy.3, %168 ]
  %101 = phi <4 x float> [ %76, %.lr.ph ], [ %169, %168 ]
  %102 = or i64 %94, %indvars.iv
  %103 = trunc i64 %102 to i32
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %168, label %105

; <label>:105                                     ; preds = %100
  %106 = trunc i64 %indvars.iv to i32
  %107 = getelementptr inbounds %struct.t_fft_c* %p0.112, i64 0, i32 0
  %108 = load float* %107, align 4, !tbaa !13
  %109 = getelementptr inbounds %struct.t_fft_c* %p0.112, i64 0, i32 1
  %110 = load float* %109, align 4, !tbaa !15
  %111 = sitofp i32 %106 to float
  %112 = fmul float %26, %111
  %113 = fadd float %96, %112
  %114 = fmul float %113, %113
  %115 = fadd float %99, %114
  %116 = fmul float %84, %115
  %117 = fmul float %69, %116
  %118 = load float** %47, align 8, !tbaa !2
  %119 = getelementptr inbounds float* %118, i64 %indvars.iv
  %120 = load float* %119, align 4, !tbaa !6
  %121 = fmul float %117, %120
  %122 = fmul float %4, %115
  %123 = fsub float -0.000000e+00, %122
  %124 = fpext float %123 to double
  %125 = call double @exp(double %124) #7
  %126 = fmul double %125, 0x40615DEEE174A498
  %127 = fpext float %121 to double
  %128 = fdiv double %126, %127
  %129 = fptrunc double %128 to float
  %130 = fmul float %108, %129
  store float %130, float* %107, align 4, !tbaa !13
  %131 = fmul float %110, %129
  store float %131, float* %109, align 4, !tbaa !15
  %132 = fmul float %108, %108
  %133 = fmul float %110, %110
  %134 = fadd float %132, %133
  %135 = icmp sgt i64 %indvars.iv, 0
  %136 = icmp slt i64 %indvars.iv, %52
  %or.cond = and i1 %135, %136
  br i1 %or.cond, label %137, label %139

; <label>:137                                     ; preds = %105
  %138 = fmul float %134, 2.000000e+00
  br label %139

; <label>:139                                     ; preds = %137, %105
  %struct2.0 = phi float [ %138, %137 ], [ %134, %105 ]
  %140 = fmul float %129, %struct2.0
  %141 = fadd float %122, 1.000000e+00
  %142 = fpext float %141 to double
  %143 = fmul double %142, 2.000000e+00
  %144 = fpext float %115 to double
  %145 = fdiv double %143, %144
  %146 = fptrunc double %145 to float
  %147 = fadd float %energy.24, %140
  %148 = fmul float %140, %146
  %149 = fmul float %80, %148
  %150 = fmul float %80, %149
  %151 = fsub float %150, %140
  %152 = fadd float %virxx.25, %151
  %153 = fmul float %82, %149
  %154 = fmul float %113, %149
  %155 = fmul float %82, %148
  %156 = fmul float %82, %155
  %157 = fsub float %156, %140
  %158 = fmul float %113, %155
  %159 = insertelement <4 x float> undef, float %154, i32 0
  %160 = insertelement <4 x float> %159, float %153, i32 1
  %161 = insertelement <4 x float> %160, float %157, i32 2
  %162 = insertelement <4 x float> %161, float %158, i32 3
  %163 = fadd <4 x float> %101, %162
  %164 = fmul float %113, %148
  %165 = fmul float %113, %164
  %166 = fsub float %165, %140
  %167 = fadd float %virzz.210, %166
  br label %168

; <label>:168                                     ; preds = %100, %139
  %energy.3 = phi float [ %energy.24, %100 ], [ %147, %139 ]
  %virxx.3 = phi float [ %virxx.25, %100 ], [ %152, %139 ]
  %virzz.3 = phi float [ %virzz.210, %100 ], [ %167, %139 ]
  %169 = phi <4 x float> [ %101, %100 ], [ %163, %139 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %170 = getelementptr inbounds %struct.t_fft_c* %p0.112, i64 1
  %171 = icmp slt i64 %indvars.iv, %53
  br i1 %171, label %100, label %._crit_edge

._crit_edge:                                      ; preds = %168, %93
  %virzz.2.lcssa = phi float [ %virzz.125, %93 ], [ %virzz.3, %168 ]
  %virxx.2.lcssa = phi float [ %virxx.120, %93 ], [ %virxx.3, %168 ]
  %energy.2.lcssa = phi float [ %energy.119, %93 ], [ %energy.3, %168 ]
  %172 = phi <4 x float> [ %76, %93 ], [ %169, %168 ]
  %indvars.iv.next57 = add nuw nsw i64 %indvars.iv56, 1
  %173 = add nuw nsw i32 %kx.026, 1
  %exitcond = icmp eq i32 %79, %57
  br i1 %exitcond, label %._crit_edge29, label %75

._crit_edge29:                                    ; preds = %._crit_edge, %60
  %virzz.1.lcssa = phi float [ %virzz.043, %60 ], [ %virzz.2.lcssa, %._crit_edge ]
  %virxx.1.lcssa = phi float [ %virxx.038, %60 ], [ %virxx.2.lcssa, %._crit_edge ]
  %energy.1.lcssa = phi float [ %energy.037, %60 ], [ %energy.2.lcssa, %._crit_edge ]
  %174 = phi <4 x float> [ %61, %60 ], [ %172, %._crit_edge ]
  %indvars.iv.next59 = add nuw nsw i64 %indvars.iv58, 1
  %175 = add nuw nsw i32 %ky.044, 1
  %exitcond61 = icmp eq i32 %63, %59
  br i1 %exitcond61, label %._crit_edge48, label %60

._crit_edge48:                                    ; preds = %._crit_edge29, %.thread, %35
  %virzz.0.lcssa = phi float [ 0.000000e+00, %35 ], [ 0.000000e+00, %.thread ], [ %virzz.1.lcssa, %._crit_edge29 ]
  %virxx.0.lcssa = phi float [ 0.000000e+00, %35 ], [ 0.000000e+00, %.thread ], [ %virxx.1.lcssa, %._crit_edge29 ]
  %energy.0.lcssa = phi float [ 0.000000e+00, %35 ], [ 0.000000e+00, %.thread ], [ %energy.1.lcssa, %._crit_edge29 ]
  %176 = phi <4 x float> [ zeroinitializer, %35 ], [ zeroinitializer, %.thread ], [ %174, %._crit_edge29 ]
  %177 = fmul float %virxx.0.lcssa, 2.500000e-01
  %178 = getelementptr inbounds [3 x float]* %vir, i64 0, i64 0
  store float %177, float* %178, align 4, !tbaa !6
  %179 = fmul float %virzz.0.lcssa, 2.500000e-01
  %180 = getelementptr inbounds [3 x float]* %vir, i64 2, i64 2
  store float %179, float* %180, align 4, !tbaa !6
  %181 = getelementptr inbounds [3 x float]* %vir, i64 0, i64 1
  %182 = fmul <4 x float> %176, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %183 = extractelement <4 x float> %182, i32 1
  store float %183, float* %181, align 4, !tbaa !6
  %184 = getelementptr inbounds [3 x float]* %vir, i64 2, i64 0
  %185 = extractelement <4 x float> %182, i32 0
  store float %185, float* %184, align 4, !tbaa !6
  %186 = getelementptr inbounds [3 x float]* %vir, i64 0, i64 2
  %187 = getelementptr inbounds [3 x float]* %vir, i64 2, i64 1
  %188 = extractelement <4 x float> %182, i32 3
  store float %188, float* %187, align 4, !tbaa !6
  %189 = bitcast float* %186 to <4 x float>*
  store <4 x float> %182, <4 x float>* %189, align 4, !tbaa !6
  %190 = fmul float %energy.0.lcssa, 5.000000e-01
  ret float %190
}
