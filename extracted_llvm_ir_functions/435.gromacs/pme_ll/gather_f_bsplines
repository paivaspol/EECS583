define void @gather_f_bsplines(%struct.t_fftgrid* %grid, [3 x float]* nocapture readonly %recipbox, [3 x i32]* nocapture readonly %idx, [3 x float]* nocapture %f, float* nocapture readonly %charge, float** nocapture readonly %theta, float** nocapture readonly %dtheta, i32 %nr, i32 %order, i32* nocapture readonly %nnx, i32* nocapture readonly %nny, i32* nocapture readonly %nnz) #1 {
  %nx = alloca i32, align 4
  %ny = alloca i32, align 4
  %nz = alloca i32, align 4
  %la2 = alloca i32, align 4
  %la12 = alloca i32, align 4
  %ptr = alloca float*, align 8
  call void @unpack_fftgrid(%struct.t_fftgrid* %grid, i32* %nx, i32* %ny, i32* %nz, i32* %la2, i32* %la12, i32 1, float** %ptr) #6
  %1 = load float** %theta, align 8, !tbaa !2
  %2 = getelementptr inbounds float** %theta, i64 1
  %3 = load float** %2, align 8, !tbaa !2
  %4 = getelementptr inbounds float** %theta, i64 2
  %5 = load float** %4, align 8, !tbaa !2
  %6 = load float** %dtheta, align 8, !tbaa !2
  %7 = getelementptr inbounds float** %dtheta, i64 1
  %8 = load float** %7, align 8, !tbaa !2
  %9 = getelementptr inbounds float** %dtheta, i64 2
  %10 = load float** %9, align 8, !tbaa !2
  %11 = sext i32 %order to i64
  %12 = load i32* %nz, align 4, !tbaa !8
  %13 = sext i32 %12 to i64
  %.sum4 = sub nsw i64 1, %11
  %.sum5 = add nsw i64 %.sum4, %13
  %14 = getelementptr inbounds [3 x float]* %recipbox, i64 0, i64 0
  %15 = load float* %14, align 4, !tbaa !6
  %16 = getelementptr inbounds [3 x float]* %recipbox, i64 1, i64 0
  %17 = load float* %16, align 4, !tbaa !6
  %18 = getelementptr inbounds [3 x float]* %recipbox, i64 1, i64 1
  %19 = load float* %18, align 4, !tbaa !6
  %20 = getelementptr inbounds [3 x float]* %recipbox, i64 2, i64 0
  %21 = load float* %20, align 4, !tbaa !6
  %22 = getelementptr inbounds [3 x float]* %recipbox, i64 2, i64 1
  %23 = load float* %22, align 4, !tbaa !6
  %24 = getelementptr inbounds [3 x float]* %recipbox, i64 2, i64 2
  %25 = load float* %24, align 4, !tbaa !6
  %26 = icmp sgt i32 %nr, 0
  br i1 %26, label %.lr.ph51, label %._crit_edge52

.lr.ph51:                                         ; preds = %0
  %27 = load i32* %ny, align 4, !tbaa !8
  %28 = sext i32 %27 to i64
  %29 = load i32* %nx, align 4, !tbaa !8
  %30 = sext i32 %29 to i64
  %.sum1 = add nsw i64 %.sum4, %30
  %31 = sitofp i32 %29 to float
  %32 = sitofp i32 %27 to float
  %33 = sitofp i32 %12 to float
  %.sum3 = add nsw i64 %.sum4, %28
  %34 = icmp eq i32 %order, 4
  %35 = load i32* %la12, align 4, !tbaa !8
  %36 = load i32* %la2, align 4, !tbaa !8
  %37 = load float** %ptr, align 8, !tbaa !2
  %38 = add i32 %nr, -1
  br label %39

; <label>:39                                      ; preds = %217, %.lr.ph51
  %indvars.iv74 = phi i64 [ 0, %.lr.ph51 ], [ %indvars.iv.next75, %217 ]
  %indvars.iv70 = phi i32 [ 0, %.lr.ph51 ], [ %indvars.iv.next71, %217 ]
  %40 = sext i32 %indvars.iv70 to i64
  %41 = getelementptr inbounds float* %charge, i64 %indvars.iv74
  %42 = load float* %41, align 4, !tbaa !6
  %fabsf = call float @fabsf(float %42) #4
  %43 = fpext float %fabsf to double
  %44 = fcmp ogt double %43, 1.200000e-38
  br i1 %44, label %45, label %217

; <label>:45                                      ; preds = %39
  %46 = mul nsw i64 %indvars.iv74, %11
  %47 = add nsw i64 %46, %11
  %48 = icmp sgt i32 %order, 0
  br i1 %48, label %.lr.ph44, label %._crit_edge45

.lr.ph44:                                         ; preds = %45
  %49 = getelementptr inbounds [3 x i32]* %idx, i64 %indvars.iv74, i64 2
  %50 = load i32* %49, align 4, !tbaa !8
  %51 = getelementptr inbounds [3 x i32]* %idx, i64 %indvars.iv74, i64 0
  %52 = load i32* %51, align 4, !tbaa !8
  %53 = sext i32 %52 to i64
  %.sum6 = add nsw i64 %.sum1, %53
  %54 = getelementptr inbounds i32* %nnx, i64 %.sum6
  %55 = getelementptr inbounds [3 x i32]* %idx, i64 %indvars.iv74, i64 1
  %56 = load i32* %55, align 4, !tbaa !8
  %57 = sext i32 %56 to i64
  %.sum7 = add nsw i64 %.sum3, %57
  %58 = getelementptr inbounds i32* %nny, i64 %.sum7
  %59 = sext i32 %50 to i64
  %.sum9 = add nsw i64 %59, %.sum5
  %60 = getelementptr inbounds i32* %nnz, i64 %.sum9
  %.sum10 = add nsw i64 %.sum9, 1
  %61 = getelementptr inbounds i32* %nnz, i64 %.sum10
  %.sum11 = add nsw i64 %.sum9, 2
  %62 = getelementptr inbounds i32* %nnz, i64 %.sum11
  %.sum12 = add nsw i64 %.sum9, 3
  %63 = getelementptr inbounds i32* %nnz, i64 %.sum12
  %64 = getelementptr inbounds float* %5, i64 %46
  %65 = getelementptr inbounds float* %10, i64 %46
  %66 = add nsw i64 %46, 1
  %67 = getelementptr inbounds float* %5, i64 %66
  %68 = getelementptr inbounds float* %10, i64 %66
  %69 = add nsw i64 %46, 2
  %70 = getelementptr inbounds float* %5, i64 %69
  %71 = getelementptr inbounds float* %10, i64 %69
  %72 = add nsw i64 %46, 3
  %73 = getelementptr inbounds float* %5, i64 %72
  %74 = getelementptr inbounds float* %10, i64 %72
  %75 = trunc i64 %46 to i32
  br label %76

; <label>:76                                      ; preds = %.lr.ph44, %.loopexit
  %indvars.iv72 = phi i64 [ %40, %.lr.ph44 ], [ %indvars.iv.next73, %.loopexit ]
  %i0.042 = phi i32* [ %54, %.lr.ph44 ], [ %190, %.loopexit ]
  %ithx.041 = phi i32 [ %75, %.lr.ph44 ], [ %189, %.loopexit ]
  %fx.040 = phi float [ 0.000000e+00, %.lr.ph44 ], [ %fx.3, %.loopexit ]
  %fy.039 = phi float [ 0.000000e+00, %.lr.ph44 ], [ %fy.3, %.loopexit ]
  %fz.038 = phi float [ 0.000000e+00, %.lr.ph44 ], [ %fz.3, %.loopexit ]
  %77 = load i32* %i0.042, align 4, !tbaa !8
  %78 = getelementptr inbounds float* %1, i64 %indvars.iv72
  %79 = load float* %78, align 4, !tbaa !6
  %80 = getelementptr inbounds float* %6, i64 %indvars.iv72
  %81 = load float* %80, align 4, !tbaa !6
  %82 = mul nsw i32 %35, %77
  br i1 %34, label %.lr.ph34, label %.lr.ph

.lr.ph34:                                         ; preds = %76
  %83 = load i32* %60, align 4, !tbaa !8
  %84 = load i32* %61, align 4, !tbaa !8
  %85 = load i32* %62, align 4, !tbaa !8
  %86 = load i32* %63, align 4, !tbaa !8
  %87 = load float* %64, align 4, !tbaa !6
  %88 = load float* %65, align 4, !tbaa !6
  %89 = load float* %67, align 4, !tbaa !6
  %90 = load float* %68, align 4, !tbaa !6
  %91 = load float* %70, align 4, !tbaa !6
  %92 = load float* %71, align 4, !tbaa !6
  %93 = load float* %73, align 4, !tbaa !6
  %94 = load float* %74, align 4, !tbaa !6
  br label %95

; <label>:95                                      ; preds = %.lr.ph34, %95
  %indvars.iv68 = phi i64 [ %40, %.lr.ph34 ], [ %indvars.iv.next69, %95 ]
  %j0.033 = phi i32* [ %58, %.lr.ph34 ], [ %143, %95 ]
  %ithy.032 = phi i32 [ %75, %.lr.ph34 ], [ %142, %95 ]
  %fx.131 = phi float [ %fx.040, %.lr.ph34 ], [ %135, %95 ]
  %fy.130 = phi float [ %fy.039, %.lr.ph34 ], [ %138, %95 ]
  %fz.129 = phi float [ %fz.038, %.lr.ph34 ], [ %141, %95 ]
  %96 = load i32* %j0.033, align 4, !tbaa !8
  %97 = getelementptr inbounds float* %3, i64 %indvars.iv68
  %98 = load float* %97, align 4, !tbaa !6
  %99 = getelementptr inbounds float* %8, i64 %indvars.iv68
  %100 = load float* %99, align 4, !tbaa !6
  %101 = mul nsw i32 %36, %96
  %102 = add nsw i32 %101, %82
  %103 = add nsw i32 %102, %83
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds float* %37, i64 %104
  %106 = load float* %105, align 4, !tbaa !6
  %107 = add nsw i32 %84, %102
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds float* %37, i64 %108
  %110 = load float* %109, align 4, !tbaa !6
  %111 = add nsw i32 %85, %102
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds float* %37, i64 %112
  %114 = load float* %113, align 4, !tbaa !6
  %115 = add nsw i32 %86, %102
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float* %37, i64 %116
  %118 = load float* %117, align 4, !tbaa !6
  %119 = fmul float %106, %87
  %120 = fmul float %106, %88
  %121 = fmul float %110, %89
  %122 = fadd float %119, %121
  %123 = fmul float %110, %90
  %124 = fadd float %120, %123
  %125 = fmul float %114, %91
  %126 = fadd float %122, %125
  %127 = fmul float %114, %92
  %128 = fadd float %124, %127
  %129 = fmul float %118, %93
  %130 = fadd float %126, %129
  %131 = fmul float %118, %94
  %132 = fadd float %128, %131
  %133 = fmul float %81, %98
  %134 = fmul float %133, %130
  %135 = fadd float %fx.131, %134
  %136 = fmul float %79, %100
  %137 = fmul float %136, %130
  %138 = fadd float %fy.130, %137
  %139 = fmul float %79, %98
  %140 = fmul float %139, %132
  %141 = fadd float %fz.129, %140
  %142 = add nsw i32 %ithy.032, 1
  %143 = getelementptr inbounds i32* %j0.033, i64 1
  %144 = sext i32 %142 to i64
  %145 = icmp slt i64 %144, %47
  %indvars.iv.next69 = add nsw i64 %indvars.iv68, 1
  br i1 %145, label %95, label %.loopexit

.lr.ph:                                           ; preds = %76, %._crit_edge
  %indvars.iv64 = phi i64 [ %indvars.iv.next65, %._crit_edge ], [ %40, %76 ]
  %j0.124 = phi i32* [ %186, %._crit_edge ], [ %58, %76 ]
  %ithy.123 = phi i32 [ %185, %._crit_edge ], [ %75, %76 ]
  %fx.222 = phi float [ %177, %._crit_edge ], [ %fx.040, %76 ]
  %fy.221 = phi float [ %180, %._crit_edge ], [ %fy.039, %76 ]
  %fz.220 = phi float [ %184, %._crit_edge ], [ %fz.038, %76 ]
  %146 = load i32* %j0.124, align 4, !tbaa !8
  %147 = getelementptr inbounds float* %3, i64 %indvars.iv64
  %148 = load float* %147, align 4, !tbaa !6
  %149 = getelementptr inbounds float* %8, i64 %indvars.iv64
  %150 = load float* %149, align 4, !tbaa !6
  %151 = mul nsw i32 %36, %146
  %152 = add nsw i32 %151, %82
  br label %153

; <label>:153                                     ; preds = %.lr.ph, %153
  %indvars.iv60 = phi i64 [ %40, %.lr.ph ], [ %indvars.iv.next61, %153 ]
  %k0.018 = phi i32* [ %60, %.lr.ph ], [ %171, %153 ]
  %ithz.017 = phi i32 [ %75, %.lr.ph ], [ %170, %153 ]
  %154 = phi <2 x float> [ zeroinitializer, %.lr.ph ], [ %169, %153 ]
  %155 = load i32* %k0.018, align 4, !tbaa !8
  %156 = add nsw i32 %152, %155
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds float* %37, i64 %157
  %159 = load float* %158, align 4, !tbaa !6
  %160 = getelementptr inbounds float* %5, i64 %indvars.iv60
  %161 = load float* %160, align 4, !tbaa !6
  %162 = getelementptr inbounds float* %10, i64 %indvars.iv60
  %163 = load float* %162, align 4, !tbaa !6
  %164 = insertelement <2 x float> undef, float %159, i32 0
  %165 = insertelement <2 x float> %164, float %159, i32 1
  %166 = insertelement <2 x float> undef, float %161, i32 0
  %167 = insertelement <2 x float> %166, float %163, i32 1
  %168 = fmul <2 x float> %165, %167
  %169 = fadd <2 x float> %154, %168
  %170 = add nsw i32 %ithz.017, 1
  %171 = getelementptr inbounds i32* %k0.018, i64 1
  %172 = sext i32 %170 to i64
  %173 = icmp slt i64 %172, %47
  %indvars.iv.next61 = add nsw i64 %indvars.iv60, 1
  br i1 %173, label %153, label %._crit_edge

._crit_edge:                                      ; preds = %153
  %174 = fmul float %81, %148
  %175 = extractelement <2 x float> %169, i32 0
  %176 = fmul float %174, %175
  %177 = fadd float %fx.222, %176
  %178 = fmul float %79, %150
  %179 = fmul float %178, %175
  %180 = fadd float %fy.221, %179
  %181 = fmul float %79, %148
  %182 = extractelement <2 x float> %169, i32 1
  %183 = fmul float %181, %182
  %184 = fadd float %fz.220, %183
  %185 = add nsw i32 %ithy.123, 1
  %186 = getelementptr inbounds i32* %j0.124, i64 1
  %187 = sext i32 %185 to i64
  %188 = icmp slt i64 %187, %47
  %indvars.iv.next65 = add nsw i64 %indvars.iv64, 1
  br i1 %188, label %.lr.ph, label %.loopexit

.loopexit:                                        ; preds = %._crit_edge, %95
  %fz.3 = phi float [ %141, %95 ], [ %184, %._crit_edge ]
  %fy.3 = phi float [ %138, %95 ], [ %180, %._crit_edge ]
  %fx.3 = phi float [ %135, %95 ], [ %177, %._crit_edge ]
  %189 = add nsw i32 %ithx.041, 1
  %190 = getelementptr inbounds i32* %i0.042, i64 1
  %191 = sext i32 %189 to i64
  %192 = icmp slt i64 %191, %47
  %indvars.iv.next73 = add nsw i64 %indvars.iv72, 1
  br i1 %192, label %76, label %._crit_edge45

._crit_edge45:                                    ; preds = %.loopexit, %45
  %fx.0.lcssa = phi float [ 0.000000e+00, %45 ], [ %fx.3, %.loopexit ]
  %fy.0.lcssa = phi float [ 0.000000e+00, %45 ], [ %fy.3, %.loopexit ]
  %fz.0.lcssa = phi float [ 0.000000e+00, %45 ], [ %fz.3, %.loopexit ]
  %193 = fmul float %fx.0.lcssa, %31
  %194 = fmul float %15, %193
  %195 = fmul float %42, %194
  %196 = getelementptr inbounds [3 x float]* %f, i64 %indvars.iv74, i64 0
  %197 = load float* %196, align 4, !tbaa !6
  %198 = fsub float %197, %195
  store float %198, float* %196, align 4, !tbaa !6
  %199 = fmul float %17, %193
  %200 = fmul float %fy.0.lcssa, %32
  %201 = fmul float %19, %200
  %202 = fadd float %199, %201
  %203 = fmul float %42, %202
  %204 = getelementptr inbounds [3 x float]* %f, i64 %indvars.iv74, i64 1
  %205 = load float* %204, align 4, !tbaa !6
  %206 = fsub float %205, %203
  store float %206, float* %204, align 4, !tbaa !6
  %207 = fmul float %21, %193
  %208 = fmul float %23, %200
  %209 = fadd float %207, %208
  %210 = fmul float %fz.0.lcssa, %33
  %211 = fmul float %25, %210
  %212 = fadd float %209, %211
  %213 = fmul float %42, %212
  %214 = getelementptr inbounds [3 x float]* %f, i64 %indvars.iv74, i64 2
  %215 = load float* %214, align 4, !tbaa !6
  %216 = fsub float %215, %213
  store float %216, float* %214, align 4, !tbaa !6
  br label %217

; <label>:217                                     ; preds = %39, %._crit_edge45
  %indvars.iv.next75 = add nuw nsw i64 %indvars.iv74, 1
  %indvars.iv.next71 = add i32 %indvars.iv70, %order
  %lftr.wideiv = trunc i64 %indvars.iv74 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %38
  br i1 %exitcond, label %._crit_edge52, label %39

._crit_edge52:                                    ; preds = %217, %0
  ret void
}
