define internal i32 @xdrstdio_putlong(%struct.XDR* nocapture readonly %xdrs, i64* nocapture readonly %lp) #0 {
  %1 = alloca i32, align 4
  %y.i.i = alloca i32, align 4
  %mycopy = alloca i64, align 8
  %2 = load i64* %lp, align 8, !tbaa !9
  %3 = trunc i64 %2 to i32
  %4 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %4) #1
  %5 = bitcast i32* %y.i.i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %5) #1
  store i32 %3, i32* %1, align 4, !tbaa !8
  br label %6

; <label>:6                                       ; preds = %6, %0
  %indvars.iv.i.i = phi i64 [ 0, %0 ], [ %indvars.iv.next.i.i, %6 ]
  %7 = sub nsw i64 3, %indvars.iv.i.i
  %8 = getelementptr inbounds i8* %4, i64 %7
  %9 = load i8* %8, align 1, !tbaa !17
  %10 = getelementptr inbounds i8* %5, i64 %indvars.iv.i.i
  store i8 %9, i8* %10, align 1, !tbaa !17
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.i.i = icmp eq i64 %indvars.iv.next.i.i, 4
  br i1 %exitcond.i.i, label %xdr_htonl.exit, label %6

xdr_htonl.exit:                                   ; preds = %6
  %11 = load i32* %y.i.i, align 4, !tbaa !8
  call void @llvm.lifetime.end(i64 4, i8* %4) #1
  call void @llvm.lifetime.end(i64 4, i8* %5) #1
  %12 = zext i32 %11 to i64
  store i64 %12, i64* %mycopy, align 8, !tbaa !9
  %13 = bitcast i64* %mycopy to i8*
  %14 = getelementptr inbounds %struct.XDR* %xdrs, i64 0, i32 3
  %15 = bitcast i8** %14 to %struct.__sFILE**
  %16 = load %struct.__sFILE** %15, align 8, !tbaa !21
  %17 = call i64 @"\01_fwrite"(i8* %13, i64 4, i64 1, %struct.__sFILE* %16) #6
  %18 = icmp eq i64 %17, 1
  %. = zext i1 %18 to i32
  ret i32 %.
}
