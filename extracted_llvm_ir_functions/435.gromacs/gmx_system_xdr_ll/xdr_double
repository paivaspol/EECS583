define i32 @xdr_double(%struct.XDR* %xdrs, double* nocapture %dp) #0 {
  %tmp = alloca [2 x i64], align 16
  %tmp2 = alloca [2 x i64], align 16
  %.b6 = load i1* @xdr_double.LSW, align 1
  br i1 %.b6, label %2, label %1

; <label>:1                                       ; preds = %0
  store i1 true, i1* @xdr_double.LSW, align 1
  br label %2

; <label>:2                                       ; preds = %0, %1
  %3 = getelementptr inbounds %struct.XDR* %xdrs, i64 0, i32 0
  %4 = load i32* %3, align 4, !tbaa !2
  switch i32 %4, label %53 [
    i32 0, label %5
    i32 1, label %29
    i32 2, label %54
  ]

; <label>:5                                       ; preds = %2
  %6 = bitcast double* %dp to i32*
  %7 = getelementptr inbounds i32* %6, i64 1
  %8 = load i32* %7, align 4, !tbaa !8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds [2 x i64]* %tmp, i64 0, i64 0
  store i64 %9, i64* %10, align 16, !tbaa !9
  %11 = load i32* %6, align 4, !tbaa !8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [2 x i64]* %tmp, i64 0, i64 1
  store i64 %12, i64* %13, align 8, !tbaa !9
  %14 = getelementptr inbounds %struct.XDR* %xdrs, i64 0, i32 1
  %15 = load %struct.xdr_ops** %14, align 8, !tbaa !11
  %16 = getelementptr inbounds %struct.xdr_ops* %15, i64 0, i32 1
  %17 = load i32 (%struct.XDR*, i64*)** %16, align 8, !tbaa !12
  %18 = call i32 %17(%struct.XDR* %xdrs, i64* %10) #6
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %26, label %20

; <label>:20                                      ; preds = %5
  %21 = load %struct.xdr_ops** %14, align 8, !tbaa !11
  %22 = getelementptr inbounds %struct.xdr_ops* %21, i64 0, i32 1
  %23 = load i32 (%struct.XDR*, i64*)** %22, align 8, !tbaa !12
  %24 = call i32 %23(%struct.XDR* %xdrs, i64* %13) #6
  %25 = icmp ne i32 %24, 0
  br label %26

; <label>:26                                      ; preds = %5, %20
  %27 = phi i1 [ false, %5 ], [ %25, %20 ]
  %28 = zext i1 %27 to i32
  br label %54

; <label>:29                                      ; preds = %2
  %30 = bitcast double* %dp to i32*
  %31 = getelementptr inbounds %struct.XDR* %xdrs, i64 0, i32 1
  %32 = load %struct.xdr_ops** %31, align 8, !tbaa !11
  %33 = getelementptr inbounds %struct.xdr_ops* %32, i64 0, i32 0
  %34 = load i32 (%struct.XDR*, i64*)** %33, align 8, !tbaa !14
  %35 = getelementptr inbounds [2 x i64]* %tmp2, i64 0, i64 1
  %36 = call i32 %34(%struct.XDR* %xdrs, i64* %35) #6
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %53, label %38

; <label>:38                                      ; preds = %29
  %39 = load %struct.xdr_ops** %31, align 8, !tbaa !11
  %40 = getelementptr inbounds %struct.xdr_ops* %39, i64 0, i32 0
  %41 = load i32 (%struct.XDR*, i64*)** %40, align 8, !tbaa !14
  %.b = load i1* @xdr_double.LSW, align 1
  %not..b = xor i1 %.b, true
  %42 = sext i1 %not..b to i64
  %43 = getelementptr inbounds [2 x i64]* %tmp2, i64 0, i64 %42
  %44 = call i32 %41(%struct.XDR* %xdrs, i64* %43) #6
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %53, label %46

; <label>:46                                      ; preds = %38
  %47 = getelementptr inbounds [2 x i64]* %tmp2, i64 0, i64 0
  %48 = load i64* %47, align 16, !tbaa !9
  %49 = trunc i64 %48 to i32
  store i32 %49, i32* %30, align 4, !tbaa !8
  %50 = load i64* %35, align 8, !tbaa !9
  %51 = trunc i64 %50 to i32
  %52 = getelementptr inbounds i32* %30, i64 1
  store i32 %51, i32* %52, align 4, !tbaa !8
  br label %54

; <label>:53                                      ; preds = %38, %29, %2
  br label %54

; <label>:54                                      ; preds = %2, %53, %46, %26
  %.0 = phi i32 [ 0, %53 ], [ 1, %46 ], [ %28, %26 ], [ 1, %2 ]
  ret i32 %.0
}
