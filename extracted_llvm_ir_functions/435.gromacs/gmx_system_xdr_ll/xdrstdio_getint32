define internal i32 @xdrstdio_getint32(%struct.XDR* nocapture readonly %xdrs, i32* nocapture %ip) #0 {
  %1 = alloca i32, align 4
  %y.i.i = alloca i32, align 4
  %mycopy = alloca i32, align 4
  %2 = bitcast i32* %mycopy to i8*
  %3 = getelementptr inbounds %struct.XDR* %xdrs, i64 0, i32 3
  %4 = bitcast i8** %3 to %struct.__sFILE**
  %5 = load %struct.__sFILE** %4, align 8, !tbaa !21
  %6 = call i64 @fread(i8* %2, i64 4, i64 1, %struct.__sFILE* %5) #6
  %7 = icmp eq i64 %6, 1
  br i1 %7, label %8, label %18

; <label>:8                                       ; preds = %0
  %9 = load i32* %mycopy, align 4, !tbaa !8
  %10 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start(i64 4, i8* %10) #1
  %11 = bitcast i32* %y.i.i to i8*
  call void @llvm.lifetime.start(i64 4, i8* %11) #1
  store i32 %9, i32* %1, align 4, !tbaa !8
  br label %12

; <label>:12                                      ; preds = %12, %8
  %indvars.iv.i.i = phi i64 [ 0, %8 ], [ %indvars.iv.next.i.i, %12 ]
  %13 = sub nsw i64 3, %indvars.iv.i.i
  %14 = getelementptr inbounds i8* %10, i64 %13
  %15 = load i8* %14, align 1, !tbaa !17
  %16 = getelementptr inbounds i8* %11, i64 %indvars.iv.i.i
  store i8 %15, i8* %16, align 1, !tbaa !17
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.i.i = icmp eq i64 %indvars.iv.next.i.i, 4
  br i1 %exitcond.i.i, label %xdr_ntohl.exit, label %12

xdr_ntohl.exit:                                   ; preds = %12
  %17 = load i32* %y.i.i, align 4, !tbaa !8
  call void @llvm.lifetime.end(i64 4, i8* %10) #1
  call void @llvm.lifetime.end(i64 4, i8* %11) #1
  store i32 %17, i32* %ip, align 4, !tbaa !8
  br label %18

; <label>:18                                      ; preds = %0, %xdr_ntohl.exit
  %.0 = phi i32 [ 1, %xdr_ntohl.exit ], [ 0, %0 ]
  ret i32 %.0
}
