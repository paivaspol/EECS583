define internal fastcc i32 @pr_block_title(%struct.__sFILE* nocapture %fp, i32 %indent, i8* %title, %struct.t_block* readonly %block) #4 {
  %1 = icmp eq %struct.t_block* %block, null
  br i1 %1, label %available.exit, label %.critedge

available.exit:                                   ; preds = %0
  %2 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %fp, i8* getelementptr inbounds ([19 x i8]* @.str, i64 0, i64 0), i8* %title) #8
  br label %28

.critedge:                                        ; preds = %0
  %3 = tail call i32 @pr_title(%struct.__sFILE* %fp, i32 %indent, i8* %title) #9
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %.lr.ph.i, label %pr_indent.exit

.lr.ph.i:                                         ; preds = %.critedge
  %5 = add i32 %3, -1
  br label %6

; <label>:6                                       ; preds = %6, %.lr.ph.i
  %i.01.i = phi i32 [ 0, %.lr.ph.i ], [ %7, %6 ]
  %fputc.i = tail call i32 @fputc(i32 32, %struct.__sFILE* %fp) #6
  %7 = add nuw nsw i32 %i.01.i, 1
  %exitcond.i = icmp eq i32 %i.01.i, %5
  br i1 %exitcond.i, label %pr_indent.exit, label %6

pr_indent.exit:                                   ; preds = %6, %.critedge
  %8 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8]* @.str174, i64 0, i64 0), i64 34, i64 1, %struct.__sFILE* %fp)
  br label %9

; <label>:9                                       ; preds = %9, %pr_indent.exit
  %indvars.iv = phi i64 [ 0, %pr_indent.exit ], [ %indvars.iv.next, %9 ]
  %10 = getelementptr inbounds %struct.t_block* %block, i64 0, i32 0, i64 %indvars.iv
  %11 = load i32* %10, align 4, !tbaa !8
  %12 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %fp, i8* getelementptr inbounds ([4 x i8]* @.str27, i64 0, i64 0), i32 %11) #8
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 256
  br i1 %exitcond, label %13, label %9

; <label>:13                                      ; preds = %9
  %fputc = tail call i32 @fputc(i32 10, %struct.__sFILE* %fp)
  br i1 %4, label %.lr.ph.i1, label %pr_indent.exit5.thread

pr_indent.exit5.thread:                           ; preds = %13
  %14 = getelementptr inbounds %struct.t_block* %block, i64 0, i32 1
  %15 = load i32* %14, align 4, !tbaa !166
  %16 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %fp, i8* getelementptr inbounds ([7 x i8]* @.str178, i64 0, i64 0), i32 %15) #8
  br label %pr_indent.exit10

.lr.ph.i1:                                        ; preds = %13
  %17 = add i32 %3, -1
  br label %18

; <label>:18                                      ; preds = %18, %.lr.ph.i1
  %i.01.i2 = phi i32 [ 0, %.lr.ph.i1 ], [ %19, %18 ]
  %fputc.i3 = tail call i32 @fputc(i32 32, %struct.__sFILE* %fp) #6
  %19 = add nuw nsw i32 %i.01.i2, 1
  %exitcond.i4 = icmp eq i32 %i.01.i2, %17
  br i1 %exitcond.i4, label %.lr.ph.i6, label %18

.lr.ph.i6:                                        ; preds = %18
  %20 = getelementptr inbounds %struct.t_block* %block, i64 0, i32 1
  %21 = load i32* %20, align 4, !tbaa !166
  %22 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %fp, i8* getelementptr inbounds ([7 x i8]* @.str178, i64 0, i64 0), i32 %21) #8
  br label %23

; <label>:23                                      ; preds = %23, %.lr.ph.i6
  %i.01.i7 = phi i32 [ 0, %.lr.ph.i6 ], [ %24, %23 ]
  %fputc.i8 = tail call i32 @fputc(i32 32, %struct.__sFILE* %fp) #6
  %24 = add nuw nsw i32 %i.01.i7, 1
  %exitcond.i9 = icmp eq i32 %i.01.i7, %17
  br i1 %exitcond.i9, label %pr_indent.exit10, label %23

pr_indent.exit10:                                 ; preds = %23, %pr_indent.exit5.thread
  %25 = getelementptr inbounds %struct.t_block* %block, i64 0, i32 3
  %26 = load i32* %25, align 4, !tbaa !168
  %27 = tail call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %fp, i8* getelementptr inbounds ([8 x i8]* @.str179, i64 0, i64 0), i32 %26) #8
  br label %28

; <label>:28                                      ; preds = %available.exit, %pr_indent.exit10
  %.0 = phi i32 [ %3, %pr_indent.exit10 ], [ %indent, %available.exit ]
  ret i32 %.0
}
