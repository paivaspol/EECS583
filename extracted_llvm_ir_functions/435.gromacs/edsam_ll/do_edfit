define void @do_edfit(i32 %natoms, [3 x float]* nocapture readonly %xp, [3 x float]* nocapture readonly %x, [3 x float]* nocapture %R) #4 {
  %irot = alloca i32, align 4
  %d = alloca [6 x double], align 16
  %1 = bitcast [6 x double]* %d to i8*
  %vh = alloca [3 x [3 x float]], align 16
  %vk = alloca [3 x [3 x float]], align 16
  %u = alloca [3 x [3 x float]], align 16
  call void @llvm.lifetime.start(i64 48, i8* %1) #6
  %2 = bitcast [3 x [3 x float]]* %vh to i8*
  call void @llvm.lifetime.start(i64 36, i8* %2) #6
  %3 = bitcast [3 x [3 x float]]* %vk to i8*
  call void @llvm.lifetime.start(i64 36, i8* %3) #6
  %4 = bitcast [3 x [3 x float]]* %u to i8*
  call void @llvm.lifetime.start(i64 36, i8* %4) #6
  %5 = tail call i8* @save_calloc(i8* getelementptr inbounds ([6 x i8]* @.str43, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8]* @.str3, i64 0, i64 0), i32 453, i32 6, i32 8) #11
  %6 = bitcast i8* %5 to double**
  %7 = tail call i8* @save_calloc(i8* getelementptr inbounds ([3 x i8]* @.str44, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8]* @.str3, i64 0, i64 0), i32 454, i32 6, i32 8) #11
  %8 = bitcast i8* %7 to double**
  br label %9

; <label>:9                                       ; preds = %9, %0
  %indvars.iv71 = phi i64 [ 0, %0 ], [ %indvars.iv.next72, %9 ]
  %10 = tail call i8* @save_calloc(i8* getelementptr inbounds ([9 x i8]* @.str45, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8]* @.str3, i64 0, i64 0), i32 456, i32 6, i32 8) #11
  %11 = getelementptr inbounds double** %6, i64 %indvars.iv71
  %12 = bitcast double** %11 to i8**
  store i8* %10, i8** %12, align 8, !tbaa !8
  %13 = tail call i8* @save_calloc(i8* getelementptr inbounds ([6 x i8]* @.str46, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8]* @.str3, i64 0, i64 0), i32 457, i32 6, i32 8) #11
  %14 = getelementptr inbounds double** %8, i64 %indvars.iv71
  %15 = bitcast double** %14 to i8**
  store i8* %13, i8** %15, align 8, !tbaa !8
  %indvars.iv.next72 = add nuw nsw i64 %indvars.iv71, 1
  %exitcond73 = icmp eq i64 %indvars.iv.next72, 6
  br i1 %exitcond73, label %.preheader10, label %9

.preheader10:                                     ; preds = %9, %24
  %indvars.iv68 = phi i64 [ %indvars.iv.next69, %24 ], [ 0, %9 ]
  %16 = getelementptr inbounds [6 x double]* %d, i64 0, i64 %indvars.iv68
  store double 0.000000e+00, double* %16, align 8, !tbaa !6
  %17 = getelementptr inbounds double** %6, i64 %indvars.iv68
  %18 = load double** %17, align 8, !tbaa !8
  %19 = getelementptr inbounds double** %8, i64 %indvars.iv68
  %20 = load double** %19, align 8, !tbaa !8
  br label %21

; <label>:21                                      ; preds = %21, %.preheader10
  %indvars.iv65 = phi i64 [ 0, %.preheader10 ], [ %indvars.iv.next66, %21 ]
  %22 = getelementptr inbounds double* %18, i64 %indvars.iv65
  store double 0.000000e+00, double* %22, align 8, !tbaa !6
  %23 = getelementptr inbounds double* %20, i64 %indvars.iv65
  store double 0.000000e+00, double* %23, align 8, !tbaa !6
  %indvars.iv.next66 = add nuw nsw i64 %indvars.iv65, 1
  %exitcond67 = icmp eq i64 %indvars.iv.next66, 6
  br i1 %exitcond67, label %24, label %21

; <label>:24                                      ; preds = %21
  %indvars.iv.next69 = add nuw nsw i64 %indvars.iv68, 1
  %exitcond70 = icmp eq i64 %indvars.iv.next69, 6
  br i1 %exitcond70, label %25, label %.preheader10

; <label>:25                                      ; preds = %24
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 36, i32 16, i1 false) #6
  %26 = icmp sgt i32 %natoms, 0
  br i1 %26, label %.preheader9.lr.ph, label %.lr.ph

.preheader9.lr.ph:                                ; preds = %25
  %27 = add i32 %natoms, -1
  br label %.preheader9

.preheader9:                                      ; preds = %43, %.preheader9.lr.ph
  %indvars.iv61 = phi i64 [ 0, %.preheader9.lr.ph ], [ %indvars.iv.next62, %43 ]
  br label %28

; <label>:28                                      ; preds = %42, %.preheader9
  %indvars.iv58 = phi i64 [ 0, %.preheader9 ], [ %indvars.iv.next59, %42 ]
  %29 = getelementptr inbounds [3 x float]* %xp, i64 %indvars.iv61, i64 %indvars.iv58
  %30 = load float* %29, align 4, !tbaa !2
  %31 = fpext float %30 to double
  br label %32

; <label>:32                                      ; preds = %32, %28
  %indvars.iv55 = phi i64 [ 0, %28 ], [ %indvars.iv.next56, %32 ]
  %33 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv61, i64 %indvars.iv55
  %34 = load float* %33, align 4, !tbaa !2
  %35 = fpext float %34 to double
  %36 = fmul double %31, %35
  %37 = getelementptr inbounds [3 x [3 x float]]* %u, i64 0, i64 %indvars.iv58, i64 %indvars.iv55
  %38 = load float* %37, align 4, !tbaa !2
  %39 = fpext float %38 to double
  %40 = fadd double %39, %36
  %41 = fptrunc double %40 to float
  store float %41, float* %37, align 4, !tbaa !2
  %indvars.iv.next56 = add nuw nsw i64 %indvars.iv55, 1
  %exitcond57 = icmp eq i64 %indvars.iv.next56, 3
  br i1 %exitcond57, label %42, label %32

; <label>:42                                      ; preds = %32
  %indvars.iv.next59 = add nuw nsw i64 %indvars.iv58, 1
  %exitcond60 = icmp eq i64 %indvars.iv.next59, 3
  br i1 %exitcond60, label %43, label %28

; <label>:43                                      ; preds = %42
  %indvars.iv.next62 = add nuw nsw i64 %indvars.iv61, 1
  %lftr.wideiv63 = trunc i64 %indvars.iv61 to i32
  %exitcond64 = icmp eq i32 %lftr.wideiv63, %27
  br i1 %exitcond64, label %.lr.ph, label %.preheader9

.lr.ph:                                           ; preds = %25, %43, %._crit_edge
  %indvars.iv52 = phi i64 [ %indvars.iv.next53, %._crit_edge ], [ 0, %43 ], [ 0, %25 ]
  %indvars.iv49 = phi i32 [ %indvars.iv.next50, %._crit_edge ], [ 1, %43 ], [ 1, %25 ]
  %44 = icmp sgt i64 %indvars.iv52, 2
  %45 = add nsw i64 %indvars.iv52, -3
  %46 = getelementptr inbounds double** %6, i64 %indvars.iv52
  br label %47

; <label>:47                                      ; preds = %64, %.lr.ph
  %indvars.iv47 = phi i64 [ %indvars.iv.next48, %64 ], [ 0, %.lr.ph ]
  %48 = icmp slt i64 %indvars.iv47, 3
  %or.cond = and i1 %44, %48
  br i1 %or.cond, label %49, label %58

; <label>:49                                      ; preds = %47
  %50 = getelementptr inbounds [3 x [3 x float]]* %u, i64 0, i64 %45, i64 %indvars.iv47
  %51 = load float* %50, align 4, !tbaa !2
  %52 = fpext float %51 to double
  %53 = load double** %46, align 8, !tbaa !8
  %54 = getelementptr inbounds double* %53, i64 %indvars.iv47
  store double %52, double* %54, align 8, !tbaa !6
  %55 = getelementptr inbounds double** %6, i64 %indvars.iv47
  %56 = load double** %55, align 8, !tbaa !8
  %57 = getelementptr inbounds double* %56, i64 %indvars.iv52
  store double %52, double* %57, align 8, !tbaa !6
  br label %64

; <label>:58                                      ; preds = %47
  %59 = load double** %46, align 8, !tbaa !8
  %60 = getelementptr inbounds double* %59, i64 %indvars.iv47
  store double 0.000000e+00, double* %60, align 8, !tbaa !6
  %61 = getelementptr inbounds double** %6, i64 %indvars.iv47
  %62 = load double** %61, align 8, !tbaa !8
  %63 = getelementptr inbounds double* %62, i64 %indvars.iv52
  store double 0.000000e+00, double* %63, align 8, !tbaa !6
  br label %64

; <label>:64                                      ; preds = %49, %58
  %indvars.iv.next48 = add nuw nsw i64 %indvars.iv47, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next48 to i32
  %exitcond51 = icmp eq i32 %lftr.wideiv, %indvars.iv49
  br i1 %exitcond51, label %._crit_edge, label %47

._crit_edge:                                      ; preds = %64
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %indvars.iv.next50 = add nuw nsw i32 %indvars.iv49, 1
  %exitcond54 = icmp eq i64 %indvars.iv.next53, 6
  br i1 %exitcond54, label %65, label %.lr.ph

; <label>:65                                      ; preds = %._crit_edge
  %66 = getelementptr inbounds [6 x double]* %d, i64 0, i64 0
  call void @jacobi(double** %6, i32 6, double* %66, double** %8, i32* %irot) #11
  %67 = load i32* %irot, align 4, !tbaa !34
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %.preheader5

; <label>:69                                      ; preds = %65
  %70 = load %struct.__sFILE** @__stderrp, align 8, !tbaa !8
  %71 = call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str47, i64 0, i64 0), i64 7, i64 1, %struct.__sFILE* %70)
  br label %.preheader5

.preheader5:                                      ; preds = %65, %69, %100
  %indvars.iv44 = phi i64 [ %indvars.iv.next45, %100 ], [ 0, %69 ], [ 0, %65 ]
  %index.020 = phi i32 [ %index.2, %100 ], [ 0, %69 ], [ 0, %65 ]
  br label %72

; <label>:72                                      ; preds = %80, %.preheader5
  %indvars.iv38 = phi i64 [ 0, %.preheader5 ], [ %indvars.iv.next39, %80 ]
  %max_d.017 = phi float [ -1.000000e+03, %.preheader5 ], [ %max_d.1, %80 ]
  %index.116 = phi i32 [ %index.020, %.preheader5 ], [ %index.2, %80 ]
  %73 = getelementptr inbounds [6 x double]* %d, i64 0, i64 %indvars.iv38
  %74 = load double* %73, align 8, !tbaa !6
  %75 = fpext float %max_d.017 to double
  %76 = fcmp ogt double %74, %75
  br i1 %76, label %77, label %80

; <label>:77                                      ; preds = %72
  %78 = fptrunc double %74 to float
  %79 = trunc i64 %indvars.iv38 to i32
  br label %80

; <label>:80                                      ; preds = %72, %77
  %index.2 = phi i32 [ %79, %77 ], [ %index.116, %72 ]
  %max_d.1 = phi float [ %78, %77 ], [ %max_d.017, %72 ]
  %indvars.iv.next39 = add nuw nsw i64 %indvars.iv38, 1
  %exitcond40 = icmp eq i64 %indvars.iv.next39, 6
  br i1 %exitcond40, label %81, label %72

; <label>:81                                      ; preds = %80
  %82 = sext i32 %index.2 to i64
  %83 = getelementptr inbounds [6 x double]* %d, i64 0, i64 %82
  store double -1.000000e+04, double* %83, align 8, !tbaa !6
  br label %84

; <label>:84                                      ; preds = %84, %81
  %indvars.iv41 = phi i64 [ 0, %81 ], [ %indvars.iv.next42, %84 ]
  %85 = getelementptr inbounds double** %8, i64 %indvars.iv41
  %86 = load double** %85, align 8, !tbaa !8
  %87 = getelementptr inbounds double* %86, i64 %82
  %88 = load double* %87, align 8, !tbaa !6
  %89 = fmul double %88, 0x3FF6A09E667F3BCD
  %90 = fptrunc double %89 to float
  %91 = getelementptr inbounds [3 x [3 x float]]* %vh, i64 0, i64 %indvars.iv44, i64 %indvars.iv41
  store float %90, float* %91, align 4, !tbaa !2
  %92 = add nuw nsw i64 %indvars.iv41, 3
  %93 = getelementptr inbounds double** %8, i64 %92
  %94 = load double** %93, align 8, !tbaa !8
  %95 = getelementptr inbounds double* %94, i64 %82
  %96 = load double* %95, align 8, !tbaa !6
  %97 = fmul double %96, 0x3FF6A09E667F3BCD
  %98 = fptrunc double %97 to float
  %99 = getelementptr inbounds [3 x [3 x float]]* %vk, i64 0, i64 %indvars.iv44, i64 %indvars.iv41
  store float %98, float* %99, align 4, !tbaa !2
  %indvars.iv.next42 = add nuw nsw i64 %indvars.iv41, 1
  %exitcond43 = icmp eq i64 %indvars.iv.next42, 3
  br i1 %exitcond43, label %100, label %84

; <label>:100                                     ; preds = %84
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 1
  %exitcond46 = icmp eq i64 %indvars.iv.next45, 3
  br i1 %exitcond46, label %.preheader3, label %.preheader5

.preheader3:                                      ; preds = %100, %120
  %indvars.iv35 = phi i64 [ %indvars.iv.next36, %120 ], [ 0, %100 ]
  %101 = getelementptr inbounds [3 x [3 x float]]* %vh, i64 0, i64 0, i64 %indvars.iv35
  %102 = load float* %101, align 4, !tbaa !2
  %103 = getelementptr inbounds [3 x [3 x float]]* %vh, i64 0, i64 1, i64 %indvars.iv35
  %104 = load float* %103, align 4, !tbaa !2
  %105 = getelementptr inbounds [3 x [3 x float]]* %vh, i64 0, i64 2, i64 %indvars.iv35
  %106 = load float* %105, align 4, !tbaa !2
  br label %107

; <label>:107                                     ; preds = %107, %.preheader3
  %indvars.iv32 = phi i64 [ 0, %.preheader3 ], [ %indvars.iv.next33, %107 ]
  %108 = getelementptr inbounds [3 x [3 x float]]* %vk, i64 0, i64 0, i64 %indvars.iv32
  %109 = load float* %108, align 4, !tbaa !2
  %110 = fmul float %109, %102
  %111 = getelementptr inbounds [3 x [3 x float]]* %vk, i64 0, i64 1, i64 %indvars.iv32
  %112 = load float* %111, align 4, !tbaa !2
  %113 = fmul float %112, %104
  %114 = fadd float %110, %113
  %115 = getelementptr inbounds [3 x [3 x float]]* %vk, i64 0, i64 2, i64 %indvars.iv32
  %116 = load float* %115, align 4, !tbaa !2
  %117 = fmul float %116, %106
  %118 = fadd float %114, %117
  %119 = getelementptr inbounds [3 x float]* %R, i64 %indvars.iv35, i64 %indvars.iv32
  store float %118, float* %119, align 4, !tbaa !2
  %indvars.iv.next33 = add nuw nsw i64 %indvars.iv32, 1
  %exitcond34 = icmp eq i64 %indvars.iv.next33, 3
  br i1 %exitcond34, label %120, label %107

; <label>:120                                     ; preds = %107
  %indvars.iv.next36 = add nuw nsw i64 %indvars.iv35, 1
  %exitcond37 = icmp eq i64 %indvars.iv.next36, 3
  br i1 %exitcond37, label %121, label %.preheader3

; <label>:121                                     ; preds = %120
  %122 = getelementptr inbounds [3 x float]* %R, i64 0, i64 0
  %123 = load float* %122, align 4, !tbaa !2
  %124 = getelementptr inbounds [3 x float]* %R, i64 1, i64 1
  %125 = load float* %124, align 4, !tbaa !2
  %126 = getelementptr inbounds [3 x float]* %R, i64 2, i64 2
  %127 = load float* %126, align 4, !tbaa !2
  %128 = fmul float %125, %127
  %129 = getelementptr inbounds [3 x float]* %R, i64 2, i64 1
  %130 = load float* %129, align 4, !tbaa !2
  %131 = getelementptr inbounds [3 x float]* %R, i64 1, i64 2
  %132 = load float* %131, align 4, !tbaa !2
  %133 = fmul float %130, %132
  %134 = fsub float %128, %133
  %135 = fmul float %123, %134
  %136 = getelementptr inbounds [3 x float]* %R, i64 1, i64 0
  %137 = load float* %136, align 4, !tbaa !2
  %138 = getelementptr inbounds [3 x float]* %R, i64 0, i64 1
  %139 = load float* %138, align 4, !tbaa !2
  %140 = fmul float %127, %139
  %141 = getelementptr inbounds [3 x float]* %R, i64 0, i64 2
  %142 = load float* %141, align 4, !tbaa !2
  %143 = fmul float %130, %142
  %144 = fsub float %140, %143
  %145 = fmul float %137, %144
  %146 = fsub float %135, %145
  %147 = getelementptr inbounds [3 x float]* %R, i64 2, i64 0
  %148 = load float* %147, align 4, !tbaa !2
  %149 = fmul float %132, %139
  %150 = fmul float %125, %142
  %151 = fsub float %149, %150
  %152 = fmul float %148, %151
  %153 = fadd float %152, %146
  %154 = fcmp olt float %153, 0.000000e+00
  br i1 %154, label %.preheader, label %.loopexit

.preheader:                                       ; preds = %121, %174
  %indvars.iv29 = phi i64 [ %indvars.iv.next30, %174 ], [ 0, %121 ]
  %155 = getelementptr inbounds [3 x [3 x float]]* %vh, i64 0, i64 0, i64 %indvars.iv29
  %156 = load float* %155, align 4, !tbaa !2
  %157 = getelementptr inbounds [3 x [3 x float]]* %vh, i64 0, i64 1, i64 %indvars.iv29
  %158 = load float* %157, align 4, !tbaa !2
  %159 = getelementptr inbounds [3 x [3 x float]]* %vh, i64 0, i64 2, i64 %indvars.iv29
  %160 = load float* %159, align 4, !tbaa !2
  br label %161

; <label>:161                                     ; preds = %161, %.preheader
  %indvars.iv = phi i64 [ 0, %.preheader ], [ %indvars.iv.next, %161 ]
  %162 = getelementptr inbounds [3 x [3 x float]]* %vk, i64 0, i64 0, i64 %indvars.iv
  %163 = load float* %162, align 4, !tbaa !2
  %164 = fmul float %163, %156
  %165 = getelementptr inbounds [3 x [3 x float]]* %vk, i64 0, i64 1, i64 %indvars.iv
  %166 = load float* %165, align 4, !tbaa !2
  %167 = fmul float %166, %158
  %168 = fadd float %164, %167
  %169 = getelementptr inbounds [3 x [3 x float]]* %vk, i64 0, i64 2, i64 %indvars.iv
  %170 = load float* %169, align 4, !tbaa !2
  %171 = fmul float %170, %160
  %172 = fsub float %168, %171
  %173 = getelementptr inbounds [3 x float]* %R, i64 %indvars.iv29, i64 %indvars.iv
  store float %172, float* %173, align 4, !tbaa !2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond, label %174, label %161

; <label>:174                                     ; preds = %161
  %indvars.iv.next30 = add nuw nsw i64 %indvars.iv29, 1
  %exitcond31 = icmp eq i64 %indvars.iv.next30, 3
  br i1 %exitcond31, label %.loopexit, label %.preheader

.loopexit:                                        ; preds = %174, %121
  call void @llvm.lifetime.end(i64 36, i8* %4) #6
  call void @llvm.lifetime.end(i64 36, i8* %3) #6
  call void @llvm.lifetime.end(i64 36, i8* %2) #6
  call void @llvm.lifetime.end(i64 48, i8* %1) #6
  ret void
}
