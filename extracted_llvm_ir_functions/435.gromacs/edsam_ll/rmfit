define void @rmfit(i32 %ned, [3 x float]* nocapture %x, [3 x float]* nocapture readonly %transvec, [3 x float]* nocapture readonly %rotmat) #4 {
  %r_inv = alloca [3 x [3 x float]], align 16
  %xdum = alloca [3 x float], align 4
  %xdum11 = bitcast [3 x float]* %xdum to i8*
  tail call void @llvm.dbg.value(metadata i32 %ned, i64 0, metadata !938, metadata !1112), !dbg !2915
  tail call void @llvm.dbg.value(metadata [3 x float]* %x, i64 0, metadata !939, metadata !1112), !dbg !2916
  tail call void @llvm.dbg.value(metadata [3 x float]* %transvec, i64 0, metadata !940, metadata !1112), !dbg !2917
  tail call void @llvm.dbg.value(metadata [3 x float]* %rotmat, i64 0, metadata !941, metadata !1112), !dbg !2918
  %1 = bitcast [3 x [3 x float]]* %r_inv to i8*, !dbg !2919
  call void @llvm.lifetime.start(i64 36, i8* %1) #6, !dbg !2919
  tail call void @llvm.dbg.declare(metadata [3 x [3 x float]]* %r_inv, metadata !945, metadata !1112), !dbg !2920
  tail call void @llvm.dbg.declare(metadata [3 x float]* %xdum, metadata !946, metadata !1112), !dbg !2921
  tail call void @llvm.dbg.value(metadata [3 x float]* %rotmat, i64 0, metadata !1097, metadata !1112) #6, !dbg !2922
  tail call void @llvm.dbg.value(metadata float 0x3C32725DE0000000, i64 0, metadata !1099, metadata !1112) #6, !dbg !2924
  tail call void @llvm.dbg.value(metadata float 0x43ABC16D60000000, i64 0, metadata !1100, metadata !1112) #6, !dbg !2925
  tail call void @llvm.dbg.value(metadata [3 x float]* %rotmat, i64 0, metadata !1076, metadata !1112) #6, !dbg !2926
  %2 = getelementptr inbounds [3 x float]* %rotmat, i64 0, i64 0, !dbg !2928
  %3 = load float* %2, align 4, !dbg !2928, !tbaa !1208
  %4 = getelementptr inbounds [3 x float]* %rotmat, i64 1, i64 1, !dbg !2929
  %5 = load float* %4, align 4, !dbg !2929, !tbaa !1208
  %6 = getelementptr inbounds [3 x float]* %rotmat, i64 2, i64 2, !dbg !2930
  %7 = load float* %6, align 4, !dbg !2930, !tbaa !1208
  %8 = fmul float %5, %7, !dbg !2931
  %9 = getelementptr inbounds [3 x float]* %rotmat, i64 2, i64 1, !dbg !2932
  %10 = load float* %9, align 4, !dbg !2932, !tbaa !1208
  %11 = getelementptr inbounds [3 x float]* %rotmat, i64 1, i64 2, !dbg !2933
  %12 = load float* %11, align 4, !dbg !2933, !tbaa !1208
  %13 = fmul float %10, %12, !dbg !2934
  %14 = fsub float %8, %13, !dbg !2935
  %15 = fmul float %3, %14, !dbg !2936
  %16 = getelementptr inbounds [3 x float]* %rotmat, i64 1, i64 0, !dbg !2937
  %17 = load float* %16, align 4, !dbg !2937, !tbaa !1208
  %18 = getelementptr inbounds [3 x float]* %rotmat, i64 0, i64 1, !dbg !2938
  %19 = load float* %18, align 4, !dbg !2938, !tbaa !1208
  %20 = fmul float %7, %19, !dbg !2939
  %21 = getelementptr inbounds [3 x float]* %rotmat, i64 0, i64 2, !dbg !2940
  %22 = load float* %21, align 4, !dbg !2940, !tbaa !1208
  %23 = fmul float %10, %22, !dbg !2941
  %24 = fsub float %20, %23, !dbg !2942
  %25 = fmul float %17, %24, !dbg !2943
  %26 = fsub float %15, %25, !dbg !2944
  %27 = getelementptr inbounds [3 x float]* %rotmat, i64 2, i64 0, !dbg !2945
  %28 = load float* %27, align 4, !dbg !2945, !tbaa !1208
  %29 = fmul float %12, %19, !dbg !2946
  %30 = fmul float %5, %22, !dbg !2947
  %31 = fsub float %29, %30, !dbg !2948
  %32 = fmul float %28, %31, !dbg !2949
  %33 = fadd float %32, %26, !dbg !2950
  tail call void @llvm.dbg.value(metadata float %33, i64 0, metadata !1101, metadata !1112) #6, !dbg !2951
  %34 = fdiv float 1.000000e+00, %33, !dbg !2952
  tail call void @llvm.dbg.value(metadata float %34, i64 0, metadata !1102, metadata !1112) #6, !dbg !2953
  %fabsf.i = tail call float @fabsf(float %34) #8, !dbg !2954
  tail call void @llvm.dbg.value(metadata float %fabsf.i, i64 0, metadata !1103, metadata !1112) #6, !dbg !2955
  %35 = fcmp ole float %fabsf.i, 0x3C32725DE0000000, !dbg !2956
  %36 = fcmp oge float %fabsf.i, 0x43ABC16D60000000, !dbg !2958
  %or.cond.i = or i1 %35, %36, !dbg !2959
  br i1 %or.cond.i, label %37, label %m_inv.exit, !dbg !2959

; <label>:37                                      ; preds = %0
  %38 = fpext float %34 to double, !dbg !2960
  %39 = fdiv double 1.000000e+00, %38, !dbg !2961
  tail call void (i32, i8*, ...)* @fatal_error(i32 0, i8* getelementptr inbounds ([17 x i8]* @.str68, i64 0, i64 0), double %39) #11, !dbg !2962
  %.pre.i = load float* %4, align 4, !dbg !2963, !tbaa !1208
  %.pre2.i = load float* %6, align 4, !dbg !2964, !tbaa !1208
  %.pre3.i = load float* %9, align 4, !dbg !2965, !tbaa !1208
  %.pre4.i = load float* %11, align 4, !dbg !2966, !tbaa !1208
  %.pre = load float* %18, align 4, !dbg !2967, !tbaa !1208
  %.pre25 = load float* %21, align 4, !dbg !2968, !tbaa !1208
  %.pre26 = load float* %16, align 4, !dbg !2969, !tbaa !1208
  %.pre27 = load float* %27, align 4, !dbg !2970, !tbaa !1208
  %.pre28 = load float* %2, align 4, !dbg !2971, !tbaa !1208
  br label %m_inv.exit, !dbg !2962

m_inv.exit:                                       ; preds = %0, %37
  %40 = phi float [ %3, %0 ], [ %.pre28, %37 ]
  %41 = phi float [ %28, %0 ], [ %.pre27, %37 ]
  %42 = phi float [ %17, %0 ], [ %.pre26, %37 ]
  %43 = phi float [ %22, %0 ], [ %.pre25, %37 ]
  %44 = phi float [ %19, %0 ], [ %.pre, %37 ]
  %45 = phi float [ %12, %0 ], [ %.pre4.i, %37 ], !dbg !2972
  %46 = phi float [ %10, %0 ], [ %.pre3.i, %37 ], !dbg !2972
  %47 = phi float [ %7, %0 ], [ %.pre2.i, %37 ], !dbg !2972
  %48 = phi float [ %5, %0 ], [ %.pre.i, %37 ], !dbg !2972
  %49 = fmul float %47, %48, !dbg !2973
  %50 = fmul float %45, %46, !dbg !2974
  %51 = fsub float %49, %50, !dbg !2975
  %52 = fsub float -0.000000e+00, %34, !dbg !2976
  %53 = fmul float %44, %47, !dbg !2977
  %54 = fmul float %46, %43, !dbg !2978
  %55 = fsub float %53, %54, !dbg !2979
  %56 = fmul float %44, %45, !dbg !2980
  %57 = fmul float %48, %43, !dbg !2981
  %58 = fsub float %56, %57, !dbg !2982
  %59 = fmul float %42, %47, !dbg !2983
  %60 = fmul float %41, %45, !dbg !2984
  %61 = fsub float %59, %60, !dbg !2985
  %62 = insertelement <4 x float> undef, float %34, i32 0, !dbg !2986
  %63 = insertelement <4 x float> %62, float %55, i32 1, !dbg !2986
  %64 = insertelement <4 x float> %63, float %34, i32 2, !dbg !2986
  %65 = insertelement <4 x float> %64, float %61, i32 3, !dbg !2986
  %66 = insertelement <4 x float> undef, float %51, i32 0, !dbg !2986
  %67 = insertelement <4 x float> %66, float %52, i32 1, !dbg !2986
  %68 = insertelement <4 x float> %67, float %58, i32 2, !dbg !2986
  %69 = insertelement <4 x float> %68, float %52, i32 3, !dbg !2986
  %70 = fmul <4 x float> %65, %69, !dbg !2986
  %71 = bitcast [3 x [3 x float]]* %r_inv to <4 x float>*, !dbg !2987
  store <4 x float> %70, <4 x float>* %71, align 16, !dbg !2987, !tbaa !1208
  %72 = fmul float %40, %47, !dbg !2988
  %73 = fmul float %41, %43, !dbg !2989
  %74 = fsub float %72, %73, !dbg !2990
  %75 = getelementptr inbounds [3 x [3 x float]]* %r_inv, i64 0, i64 1, i64 1, !dbg !2991
  %76 = fmul float %40, %45, !dbg !2992
  %77 = fmul float %42, %43, !dbg !2993
  %78 = fsub float %76, %77, !dbg !2994
  %79 = fmul float %42, %46, !dbg !2995
  %80 = fmul float %41, %48, !dbg !2996
  %81 = fsub float %79, %80, !dbg !2997
  %82 = fmul float %40, %46, !dbg !2998
  %83 = fmul float %41, %44, !dbg !2999
  %84 = fsub float %82, %83, !dbg !3000
  %85 = insertelement <4 x float> %62, float %78, i32 1, !dbg !3001
  %86 = insertelement <4 x float> %85, float %34, i32 2, !dbg !3001
  %87 = insertelement <4 x float> %86, float %84, i32 3, !dbg !3001
  %88 = insertelement <4 x float> undef, float %74, i32 0, !dbg !3001
  %89 = insertelement <4 x float> %88, float %52, i32 1, !dbg !3001
  %90 = insertelement <4 x float> %89, float %81, i32 2, !dbg !3001
  %91 = insertelement <4 x float> %90, float %52, i32 3, !dbg !3001
  %92 = fmul <4 x float> %87, %91, !dbg !3001
  %93 = bitcast float* %75 to <4 x float>*, !dbg !3002
  store <4 x float> %92, <4 x float>* %93, align 4, !dbg !3002, !tbaa !1208
  %94 = fmul float %40, %48, !dbg !3003
  %95 = fmul float %42, %44, !dbg !3004
  %96 = fsub float %94, %95, !dbg !3005
  %97 = fmul float %34, %96, !dbg !3006
  %98 = getelementptr inbounds [3 x [3 x float]]* %r_inv, i64 0, i64 2, i64 2, !dbg !3007
  store float %97, float* %98, align 8, !dbg !3008, !tbaa !1208
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !942, metadata !1112), !dbg !3009
  %99 = icmp sgt i32 %ned, 0, !dbg !3010
  br i1 %99, label %.preheader2.lr.ph, label %._crit_edge, !dbg !3013

.preheader2.lr.ph:                                ; preds = %m_inv.exit
  %100 = add i32 %ned, -1, !dbg !3013
  br label %.preheader2, !dbg !3013

.preheader2:                                      ; preds = %113, %.preheader2.lr.ph
  %indvars.iv21 = phi i64 [ 0, %.preheader2.lr.ph ], [ %indvars.iv.next22, %113 ]
  %scevgep = getelementptr [3 x float]* %x, i64 %indvars.iv21, i64 0
  %scevgep12 = bitcast float* %scevgep to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %xdum11, i8* %scevgep12, i64 12, i32 4, i1 false), !dbg !3014
  br label %102, !dbg !3018

.preheader:                                       ; preds = %113
  br i1 %99, label %.lr.ph, label %._crit_edge, !dbg !3020

.lr.ph:                                           ; preds = %.preheader
  %101 = add i32 %ned, -1, !dbg !3020
  br label %114, !dbg !3020

; <label>:102                                     ; preds = %112, %.preheader2
  %indvars.iv16 = phi i64 [ 0, %.preheader2 ], [ %indvars.iv.next17, %112 ]
  %103 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv21, i64 %indvars.iv16, !dbg !3022
  store float 0.000000e+00, float* %103, align 4, !dbg !3025, !tbaa !1208
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !944, metadata !1112), !dbg !3026
  br label %104, !dbg !3027

; <label>:104                                     ; preds = %104, %102
  %indvars.iv13 = phi i64 [ 0, %102 ], [ %indvars.iv.next14, %104 ]
  %105 = phi float [ 0.000000e+00, %102 ], [ %111, %104 ], !dbg !3029
  %106 = getelementptr inbounds [3 x [3 x float]]* %r_inv, i64 0, i64 %indvars.iv13, i64 %indvars.iv16, !dbg !3029
  %107 = load float* %106, align 4, !dbg !3029, !tbaa !1208
  %108 = getelementptr inbounds [3 x float]* %xdum, i64 0, i64 %indvars.iv13, !dbg !3031
  %109 = load float* %108, align 4, !dbg !3031, !tbaa !1208
  %110 = fmul float %107, %109, !dbg !3032
  %111 = fadd float %105, %110, !dbg !3033
  %indvars.iv.next14 = add nuw nsw i64 %indvars.iv13, 1, !dbg !3027
  %exitcond15 = icmp eq i64 %indvars.iv.next14, 3, !dbg !3027
  br i1 %exitcond15, label %112, label %104, !dbg !3027

; <label>:112                                     ; preds = %104
  store float %111, float* %103, align 4, !dbg !3033, !tbaa !1208
  %indvars.iv.next17 = add nuw nsw i64 %indvars.iv16, 1, !dbg !3018
  %exitcond18 = icmp eq i64 %indvars.iv.next17, 3, !dbg !3018
  br i1 %exitcond18, label %113, label %102, !dbg !3018

; <label>:113                                     ; preds = %112
  %indvars.iv.next22 = add nuw nsw i64 %indvars.iv21, 1, !dbg !3013
  %lftr.wideiv23 = trunc i64 %indvars.iv21 to i32, !dbg !3013
  %exitcond24 = icmp eq i32 %lftr.wideiv23, %100, !dbg !3013
  br i1 %exitcond24, label %.preheader, label %.preheader2, !dbg !3013

; <label>:114                                     ; preds = %114, %.lr.ph
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %114 ]
  %115 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 0, !dbg !3034
  %116 = getelementptr inbounds [3 x float]* %transvec, i64 %indvars.iv, i64 0, !dbg !3036
  tail call void @llvm.dbg.value(metadata float* %115, i64 0, metadata !1081, metadata !1112), !dbg !3037
  tail call void @llvm.dbg.value(metadata float* %116, i64 0, metadata !1082, metadata !1112), !dbg !3039
  %117 = load float* %115, align 4, !dbg !3040, !tbaa !1208
  %118 = load float* %116, align 4, !dbg !3041, !tbaa !1208
  %119 = fsub float %117, %118, !dbg !3042
  tail call void @llvm.dbg.value(metadata float %119, i64 0, metadata !1083, metadata !1112), !dbg !3043
  %120 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 1, !dbg !3044
  %121 = load float* %120, align 4, !dbg !3044, !tbaa !1208
  %122 = getelementptr inbounds [3 x float]* %transvec, i64 %indvars.iv, i64 1, !dbg !3045
  %123 = load float* %122, align 4, !dbg !3045, !tbaa !1208
  %124 = fsub float %121, %123, !dbg !3046
  tail call void @llvm.dbg.value(metadata float %124, i64 0, metadata !1084, metadata !1112), !dbg !3047
  %125 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 2, !dbg !3048
  %126 = load float* %125, align 4, !dbg !3048, !tbaa !1208
  %127 = getelementptr inbounds [3 x float]* %transvec, i64 %indvars.iv, i64 2, !dbg !3049
  %128 = load float* %127, align 4, !dbg !3049, !tbaa !1208
  %129 = fsub float %126, %128, !dbg !3050
  tail call void @llvm.dbg.value(metadata float %129, i64 0, metadata !1085, metadata !1112), !dbg !3051
  store float %119, float* %115, align 4, !dbg !3052, !tbaa !1208
  store float %124, float* %120, align 4, !dbg !3053, !tbaa !1208
  store float %129, float* %125, align 4, !dbg !3054, !tbaa !1208
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !3020
  %lftr.wideiv = trunc i64 %indvars.iv to i32, !dbg !3020
  %exitcond = icmp eq i32 %lftr.wideiv, %101, !dbg !3020
  br i1 %exitcond, label %._crit_edge, label %114, !dbg !3020

._crit_edge:                                      ; preds = %114, %m_inv.exit, %.preheader
  call void @llvm.lifetime.end(i64 36, i8* %1) #6, !dbg !3055
  ret void, !dbg !3055
}
