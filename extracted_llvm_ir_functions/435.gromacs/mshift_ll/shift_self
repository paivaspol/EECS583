define void @shift_self(%struct.t_graph* nocapture readonly %g, [3 x float]* nocapture readonly %box, [3 x float]* nocapture %x) #4 {
  %1 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 3
  %2 = load i32* %1, align 4, !tbaa !22
  %3 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 1
  %4 = load i32* %3, align 4, !tbaa !20
  %5 = getelementptr inbounds %struct.t_graph* %g, i64 0, i32 7
  %6 = load [3 x i32]** %5, align 8, !tbaa !26
  %7 = getelementptr inbounds [3 x float]* %box, i64 1, i64 0
  %8 = load float* %7, align 4, !tbaa !14
  %fabsf = tail call float @fabsf(float %8) #10
  %9 = fpext float %fabsf to double
  %10 = fcmp ogt double %9, 1.200000e-38
  br i1 %10, label %.preheader, label %11

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds [3 x float]* %box, i64 2, i64 0
  %13 = load float* %12, align 4, !tbaa !14
  %fabsf1 = tail call float @fabsf(float %13) #10
  %14 = fpext float %fabsf1 to double
  %15 = fcmp ogt double %14, 1.200000e-38
  br i1 %15, label %.preheader, label %16

; <label>:16                                      ; preds = %11
  %17 = getelementptr inbounds [3 x float]* %box, i64 2, i64 1
  %18 = load float* %17, align 4, !tbaa !14
  %fabsf2 = tail call float @fabsf(float %18) #10
  %19 = fpext float %fabsf2 to double
  %20 = fcmp ogt double %19, 1.200000e-38
  br i1 %20, label %.preheader, label %.preheader3

.preheader3:                                      ; preds = %16
  %21 = icmp sgt i32 %4, 0
  br i1 %21, label %.lr.ph9, label %.loopexit

.lr.ph9:                                          ; preds = %.preheader3
  %22 = getelementptr inbounds [3 x float]* %box, i64 0, i64 0
  %23 = getelementptr inbounds [3 x float]* %box, i64 1, i64 1
  %24 = getelementptr inbounds [3 x float]* %box, i64 2, i64 2
  %25 = sext i32 %2 to i64
  %26 = add i32 %4, -1
  br label %69

.preheader:                                       ; preds = %16, %11, %0
  %27 = icmp sgt i32 %4, 0
  br i1 %27, label %.lr.ph, label %.loopexit

.lr.ph:                                           ; preds = %.preheader
  %28 = getelementptr inbounds [3 x float]* %box, i64 0, i64 0
  %29 = getelementptr inbounds [3 x float]* %box, i64 2, i64 0
  %30 = getelementptr inbounds [3 x float]* %box, i64 1, i64 1
  %31 = getelementptr inbounds [3 x float]* %box, i64 2, i64 1
  %32 = getelementptr inbounds [3 x float]* %box, i64 2, i64 2
  %33 = sext i32 %2 to i64
  %34 = add i32 %4, -1
  br label %35

; <label>:35                                      ; preds = %._crit_edge, %.lr.ph
  %36 = phi float [ %8, %.lr.ph ], [ %.pre, %._crit_edge ]
  %indvars.iv10 = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next11, %._crit_edge ]
  %indvars.iv = phi i64 [ %33, %.lr.ph ], [ %indvars.iv.next, %._crit_edge ]
  %37 = getelementptr inbounds [3 x i32]* %6, i64 %indvars.iv10, i64 0
  %38 = load i32* %37, align 4, !tbaa !25
  %39 = getelementptr inbounds [3 x i32]* %6, i64 %indvars.iv10, i64 1
  %40 = load i32* %39, align 4, !tbaa !25
  %41 = getelementptr inbounds [3 x i32]* %6, i64 %indvars.iv10, i64 2
  %42 = load i32* %41, align 4, !tbaa !25
  %43 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 0
  %44 = load float* %43, align 4, !tbaa !14
  %45 = sitofp i32 %38 to float
  %46 = load float* %28, align 4, !tbaa !14
  %47 = fmul float %45, %46
  %48 = fadd float %44, %47
  %49 = sitofp i32 %40 to float
  %50 = fmul float %49, %36
  %51 = fadd float %48, %50
  %52 = sitofp i32 %42 to float
  %53 = load float* %29, align 4, !tbaa !14
  %54 = fmul float %52, %53
  %55 = fadd float %51, %54
  store float %55, float* %43, align 4, !tbaa !14
  %56 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 1
  %57 = load float* %56, align 4, !tbaa !14
  %58 = load float* %30, align 4, !tbaa !14
  %59 = fmul float %49, %58
  %60 = fadd float %57, %59
  %61 = load float* %31, align 4, !tbaa !14
  %62 = fmul float %52, %61
  %63 = fadd float %60, %62
  store float %63, float* %56, align 4, !tbaa !14
  %64 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv, i64 2
  %65 = load float* %64, align 4, !tbaa !14
  %66 = load float* %32, align 4, !tbaa !14
  %67 = fmul float %52, %66
  %68 = fadd float %65, %67
  store float %68, float* %64, align 4, !tbaa !14
  %lftr.wideiv = trunc i64 %indvars.iv10 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %34
  br i1 %exitcond, label %.loopexit, label %._crit_edge

._crit_edge:                                      ; preds = %35
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1
  %.pre = load float* %7, align 4, !tbaa !14
  br label %35

; <label>:69                                      ; preds = %69, %.lr.ph9
  %indvars.iv14 = phi i64 [ 0, %.lr.ph9 ], [ %indvars.iv.next15, %69 ]
  %indvars.iv12 = phi i64 [ %25, %.lr.ph9 ], [ %indvars.iv.next13, %69 ]
  %70 = getelementptr inbounds [3 x i32]* %6, i64 %indvars.iv14, i64 0
  %71 = load i32* %70, align 4, !tbaa !25
  %72 = getelementptr inbounds [3 x i32]* %6, i64 %indvars.iv14, i64 1
  %73 = load i32* %72, align 4, !tbaa !25
  %74 = getelementptr inbounds [3 x i32]* %6, i64 %indvars.iv14, i64 2
  %75 = load i32* %74, align 4, !tbaa !25
  %76 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv12, i64 0
  %77 = load float* %76, align 4, !tbaa !14
  %78 = sitofp i32 %71 to float
  %79 = load float* %22, align 4, !tbaa !14
  %80 = fmul float %78, %79
  %81 = fadd float %77, %80
  store float %81, float* %76, align 4, !tbaa !14
  %82 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv12, i64 1
  %83 = load float* %82, align 4, !tbaa !14
  %84 = sitofp i32 %73 to float
  %85 = load float* %23, align 4, !tbaa !14
  %86 = fmul float %84, %85
  %87 = fadd float %83, %86
  store float %87, float* %82, align 4, !tbaa !14
  %88 = getelementptr inbounds [3 x float]* %x, i64 %indvars.iv12, i64 2
  %89 = load float* %88, align 4, !tbaa !14
  %90 = sitofp i32 %75 to float
  %91 = load float* %24, align 4, !tbaa !14
  %92 = fmul float %90, %91
  %93 = fadd float %89, %92
  store float %93, float* %88, align 4, !tbaa !14
  %indvars.iv.next15 = add nuw nsw i64 %indvars.iv14, 1
  %indvars.iv.next13 = add nsw i64 %indvars.iv12, 1
  %lftr.wideiv16 = trunc i64 %indvars.iv14 to i32
  %exitcond17 = icmp eq i32 %lftr.wideiv16, %26
  br i1 %exitcond17, label %.loopexit, label %69

.loopexit:                                        ; preds = %69, %35, %.preheader3, %.preheader
  ret void
}
