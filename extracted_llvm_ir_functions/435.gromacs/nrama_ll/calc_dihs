define internal fastcc void @calc_dihs(%struct.t_xrama* %xr) #3 {
  %r_ij = alloca [3 x float], align 4
  %r_kj = alloca [3 x float], align 4
  %r_kl = alloca [3 x float], align 4
  %m = alloca [3 x float], align 4
  %n = alloca [3 x float], align 4
  %cos_phi = alloca float, align 4
  %sign = alloca float, align 4
  %1 = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 11
  %2 = load %struct.t_idef** %1, align 8, !tbaa !19
  %3 = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 5
  %4 = load i32* %3, align 4, !tbaa !17
  %5 = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 10, i64 0
  %6 = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 9
  %7 = load [3 x float]** %6, align 8, !tbaa !18
  tail call void @rm_pbc(%struct.t_idef* %2, i32 %4, [3 x float]* %5, [3 x float]* %7, [3 x float]* %7) #8
  %8 = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 0
  %9 = load i32* %8, align 4, !tbaa !20
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %0
  %11 = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 1
  %12 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 0
  %13 = getelementptr inbounds [3 x float]* %r_kj, i64 0, i64 0
  %14 = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 0
  %15 = getelementptr inbounds [3 x float]* %m, i64 0, i64 0
  %16 = getelementptr inbounds [3 x float]* %n, i64 0, i64 0
  br label %17

; <label>:17                                      ; preds = %.lr.ph, %17
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %17 ]
  %18 = load %struct.t_dih** %11, align 8, !tbaa !21
  %19 = getelementptr inbounds %struct.t_dih* %18, i64 %indvars.iv, i32 0, i64 0
  %20 = load i32* %19, align 4, !tbaa !22
  %21 = sext i32 %20 to i64
  %22 = load [3 x float]** %6, align 8, !tbaa !18
  %23 = getelementptr inbounds [3 x float]* %22, i64 %21, i64 0
  %24 = getelementptr inbounds %struct.t_dih* %18, i64 %indvars.iv, i32 0, i64 1
  %25 = load i32* %24, align 4, !tbaa !22
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [3 x float]* %22, i64 %26, i64 0
  %28 = getelementptr inbounds %struct.t_dih* %18, i64 %indvars.iv, i32 0, i64 2
  %29 = load i32* %28, align 4, !tbaa !22
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [3 x float]* %22, i64 %30, i64 0
  %32 = getelementptr inbounds %struct.t_dih* %18, i64 %indvars.iv, i32 0, i64 3
  %33 = load i32* %32, align 4, !tbaa !22
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [3 x float]* %22, i64 %34, i64 0
  %36 = call float @dih_angle([3 x float]* %5, float* %23, float* %27, float* %31, float* %35, float* %12, float* %13, float* %14, float* %15, float* %16, float* %cos_phi, float* %sign) #8
  %37 = getelementptr inbounds %struct.t_dih* %18, i64 %indvars.iv, i32 3
  store float %36, float* %37, align 4, !tbaa !23
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %38 = load i32* %8, align 4, !tbaa !20
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %indvars.iv.next, %39
  br i1 %40, label %17, label %._crit_edge

._crit_edge:                                      ; preds = %17, %0
  ret void
}
