define internal fastcc void @calc_dihs(%struct.t_xrama* %xr) #0 {
entry:
  %r_ij = alloca [3 x float], align 4
  %r_kj = alloca [3 x float], align 4
  %r_kl = alloca [3 x float], align 4
  %m = alloca [3 x float], align 4
  %n = alloca [3 x float], align 4
  %cos_phi = alloca float, align 4
  %sign = alloca float, align 4
  %idef = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 11
  %0 = load %struct.t_idef** %idef, align 8, !tbaa !3
  %natoms = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 5
  %1 = load i32* %natoms, align 4, !tbaa !0
  %arraydecay = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 10, i64 0
  %x = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 9
  %2 = load [3 x float]** %x, align 8, !tbaa !3
  call void @rm_pbc(%struct.t_idef* %0, i32 %1, [3 x float]* %arraydecay, [3 x float]* %2, [3 x float]* %2) #6
  %ndih = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 0
  %3 = load i32* %ndih, align 4, !tbaa !0
  %cmp49 = icmp sgt i32 %3, 0
  br i1 %cmp49, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %dih = getelementptr inbounds %struct.t_xrama* %xr, i64 0, i32 1
  %arraydecay27 = getelementptr inbounds [3 x float]* %r_ij, i64 0, i64 0
  %arraydecay28 = getelementptr inbounds [3 x float]* %r_kj, i64 0, i64 0
  %arraydecay29 = getelementptr inbounds [3 x float]* %r_kl, i64 0, i64 0
  %arraydecay30 = getelementptr inbounds [3 x float]* %m, i64 0, i64 0
  %arraydecay31 = getelementptr inbounds [3 x float]* %n, i64 0, i64 0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %4 = load %struct.t_dih** %dih, align 8, !tbaa !3
  %arrayidx4 = getelementptr inbounds %struct.t_dih* %4, i64 %indvars.iv, i32 0, i64 0
  %5 = load i32* %arrayidx4, align 4, !tbaa !0
  %idxprom5 = sext i32 %5 to i64
  %6 = load [3 x float]** %x, align 8, !tbaa !3
  %arraydecay8 = getelementptr inbounds [3 x float]* %6, i64 %idxprom5, i64 0
  %arrayidx10 = getelementptr inbounds %struct.t_dih* %4, i64 %indvars.iv, i32 0, i64 1
  %7 = load i32* %arrayidx10, align 4, !tbaa !0
  %idxprom11 = sext i32 %7 to i64
  %arraydecay14 = getelementptr inbounds [3 x float]* %6, i64 %idxprom11, i64 0
  %arrayidx16 = getelementptr inbounds %struct.t_dih* %4, i64 %indvars.iv, i32 0, i64 2
  %8 = load i32* %arrayidx16, align 4, !tbaa !0
  %idxprom17 = sext i32 %8 to i64
  %arraydecay20 = getelementptr inbounds [3 x float]* %6, i64 %idxprom17, i64 0
  %arrayidx22 = getelementptr inbounds %struct.t_dih* %4, i64 %indvars.iv, i32 0, i64 3
  %9 = load i32* %arrayidx22, align 4, !tbaa !0
  %idxprom23 = sext i32 %9 to i64
  %arraydecay26 = getelementptr inbounds [3 x float]* %6, i64 %idxprom23, i64 0
  %call = call float @dih_angle([3 x float]* %arraydecay, float* %arraydecay8, float* %arraydecay14, float* %arraydecay20, float* %arraydecay26, float* %arraydecay27, float* %arraydecay28, float* %arraydecay29, float* %arraydecay30, float* %arraydecay31, float* %cos_phi, float* %sign) #6
  %ang = getelementptr inbounds %struct.t_dih* %4, i64 %indvars.iv, i32 3
  store float %call, float* %ang, align 4, !tbaa !4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %10 = load i32* %ndih, align 4, !tbaa !0
  %11 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %11, %10
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
