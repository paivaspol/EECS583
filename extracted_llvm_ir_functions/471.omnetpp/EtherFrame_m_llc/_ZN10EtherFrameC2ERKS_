define void @_ZN10EtherFrameC2ERKS_(%class.EtherFrame* %this, %class.EtherFrame* dereferenceable(200) %other) unnamed_addr #0 align 2 {
  %1 = getelementptr inbounds %class.EtherFrame* %this, i64 0, i32 0
  tail call void @_ZN8cMessageC2EPKcilib(%class.cMessage* %1, i8* null, i32 0, i64 1, i32 0, i1 zeroext false) #8
  %2 = getelementptr inbounds %class.EtherFrame* %this, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ([25 x i8*]* @_ZTV10EtherFrame, i64 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8, !tbaa !2
  %3 = getelementptr inbounds %class.EtherFrame* %this, i64 0, i32 1
  invoke void @_ZN10MACAddressC1Ev(%class.MACAddress* %3) #8
          to label %4 unwind label %14

; <label>:4                                       ; preds = %0
  %5 = getelementptr inbounds %class.EtherFrame* %this, i64 0, i32 2
  invoke void @_ZN10MACAddressC1Ev(%class.MACAddress* %5) #8
          to label %6 unwind label %18

; <label>:6                                       ; preds = %4
  %7 = getelementptr inbounds %class.EtherFrame* %this, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %class.EtherFrame* %other, i64 0, i32 0, i32 0, i32 1
  %9 = load i8** %8, align 8, !tbaa !5
  %10 = icmp eq i8* %9, null
  %..i = select i1 %10, i8* getelementptr inbounds ([1 x i8]* @.str28, i64 0, i64 0), i8* %9
  invoke void @_ZN7cObject7setNameEPKc(%class.cObject* %7, i8* %..i) #8
          to label %11 unwind label %22

; <label>:11                                      ; preds = %6
  %12 = invoke dereferenceable(200) %class.EtherFrame* @_ZN10EtherFrameaSERKS_(%class.EtherFrame* %this, %class.EtherFrame* dereferenceable(200) %other) #8
          to label %13 unwind label %22

; <label>:13                                      ; preds = %11
  ret void

; <label>:14                                      ; preds = %0
  %15 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %16 = extractvalue { i8*, i32 } %15, 0
  %17 = extractvalue { i8*, i32 } %15, 1
  br label %_ZN10MACAddressD1Ev.exit3

; <label>:18                                      ; preds = %4
  %19 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %20 = extractvalue { i8*, i32 } %19, 0
  %21 = extractvalue { i8*, i32 } %19, 1
  br label %_ZN10MACAddressD1Ev.exit

; <label>:22                                      ; preds = %11, %6
  %23 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          cleanup
  %24 = extractvalue { i8*, i32 } %23, 0
  %25 = extractvalue { i8*, i32 } %23, 1
  %26 = getelementptr inbounds %class.MACAddress* %5, i64 0, i32 0
  invoke void @_ZN15MACAddress_BaseD2Ev(%class.MACAddress_Base* %26) #8
          to label %_ZN10MACAddressD1Ev.exit unwind label %31

_ZN10MACAddressD1Ev.exit:                         ; preds = %22, %18
  %.01 = phi i8* [ %20, %18 ], [ %24, %22 ]
  %.0 = phi i32 [ %21, %18 ], [ %25, %22 ]
  %27 = getelementptr inbounds %class.MACAddress* %3, i64 0, i32 0
  invoke void @_ZN15MACAddress_BaseD2Ev(%class.MACAddress_Base* %27) #8
          to label %_ZN10MACAddressD1Ev.exit3 unwind label %31

_ZN10MACAddressD1Ev.exit3:                        ; preds = %_ZN10MACAddressD1Ev.exit, %14
  %.12 = phi i8* [ %16, %14 ], [ %.01, %_ZN10MACAddressD1Ev.exit ]
  %.1 = phi i32 [ %17, %14 ], [ %.0, %_ZN10MACAddressD1Ev.exit ]
  invoke void @_ZN8cMessageD2Ev(%class.cMessage* %1) #8
          to label %28 unwind label %31

; <label>:28                                      ; preds = %_ZN10MACAddressD1Ev.exit3
  %29 = insertvalue { i8*, i32 } undef, i8* %.12, 0
  %30 = insertvalue { i8*, i32 } %29, i32 %.1, 1
  resume { i8*, i32 } %30

; <label>:31                                      ; preds = %_ZN10MACAddressD1Ev.exit, %22, %_ZN10MACAddressD1Ev.exit3
  %32 = landingpad { i8*, i32 } personality i8* bitcast (i32 (...)* @__gxx_personality_v0 to i8*)
          catch i8* null
  %33 = extractvalue { i8*, i32 } %32, 0
  tail call void @__clang_call_terminate(i8* %33) #10
  unreachable
}
