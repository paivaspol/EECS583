define void @gtp_main_loop(%struct.gtp_command* nocapture %commands, %struct._IO_FILE* nocapture %gtp_input) #0 {
entry:
  %line = alloca [1000 x i8], align 16
  %command = alloca [1000 x i8], align 16
  %n = alloca i32, align 4
  %0 = getelementptr inbounds [1000 x i8]* %line, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1000, i8* %0) #1
  %1 = getelementptr inbounds [1000 x i8]* %command, i64 0, i64 0
  call void @llvm.lifetime.start(i64 1000, i8* %1) #1
  %name116 = getelementptr inbounds %struct.gtp_command* %commands, i64 0, i32 0
  br label %while.body

while.body:                                       ; preds = %if.end79, %if.end42, %entry
  %call = call i8* @fgets(i8* %0, i32 1000, %struct._IO_FILE* %gtp_input) #4
  %tobool = icmp eq i8* %call, null
  br i1 %tobool, label %while.end.split, label %for.cond

for.cond:                                         ; preds = %while.body, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %while.body ]
  %p.0 = phi i8* [ %p.1, %for.inc ], [ %0, %while.body ]
  %arrayidx = getelementptr inbounds [1000 x i8]* %line, i64 0, i64 %indvars.iv
  %2 = load i8* %arrayidx, align 1, !tbaa !0
  switch i8 %2, label %if.else [
    i8 0, label %for.end
    i8 9, label %if.then7
  ]

if.then7:                                         ; preds = %for.cond
  %incdec.ptr = getelementptr inbounds i8* %p.0, i64 1
  store i8 32, i8* %p.0, align 1, !tbaa !0
  br label %for.inc

if.else:                                          ; preds = %for.cond
  %.off = add i8 %2, -1
  %3 = icmp ult i8 %.off, 9
  br i1 %3, label %for.inc, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %.off113 = add i8 %2, -11
  %4 = icmp ult i8 %.off113, 21
  %cmp23 = icmp eq i8 %2, 127
  %or.cond109 = or i1 %4, %cmp23
  br i1 %or.cond109, label %for.inc, label %if.else26

if.else26:                                        ; preds = %lor.lhs.false
  %cmp28 = icmp eq i8 %2, 35
  br i1 %cmp28, label %for.end, label %if.else31

if.else31:                                        ; preds = %if.else26
  %incdec.ptr32 = getelementptr inbounds i8* %p.0, i64 1
  store i8 %2, i8* %p.0, align 1, !tbaa !0
  br label %for.inc

for.inc:                                          ; preds = %lor.lhs.false, %if.else, %if.then7, %if.else31
  %p.1 = phi i8* [ %incdec.ptr, %if.then7 ], [ %incdec.ptr32, %if.else31 ], [ %p.0, %if.else ], [ %p.0, %lor.lhs.false ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond, %if.else26
  store i8 0, i8* %p.0, align 1, !tbaa !0
  %call37 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %0, i8* getelementptr inbounds ([5 x i8]* @.str, i64 0, i64 0), i32* @current_id, i32* %n) #4
  %cmp38 = icmp eq i32 %call37, 1
  br i1 %cmp38, label %if.then40, label %if.else41

if.then40:                                        ; preds = %for.end
  %5 = load i32* %n, align 4, !tbaa !2
  %idx.ext = sext i32 %5 to i64
  %add.ptr = getelementptr inbounds [1000 x i8]* %line, i64 0, i64 %idx.ext
  br label %if.end42

if.else41:                                        ; preds = %for.end
  store i32 -1, i32* @current_id, align 4, !tbaa !2
  br label %if.end42

if.end42:                                         ; preds = %if.else41, %if.then40
  %p.2 = phi i8* [ %add.ptr, %if.then40 ], [ %0, %if.else41 ]
  %call44 = call i32 (i8*, i8*, ...)* @__isoc99_sscanf(i8* %p.2, i8* getelementptr inbounds ([7 x i8]* @.str1, i64 0, i64 0), i8* %1, i32* %n) #4
  %cmp45 = icmp slt i32 %call44, 1
  br i1 %cmp45, label %while.body, label %if.end48

if.end48:                                         ; preds = %if.end42
  %6 = load i32* %n, align 4, !tbaa !2
  %idx.ext49 = sext i32 %6 to i64
  %add.ptr50 = getelementptr inbounds i8* %p.2, i64 %idx.ext49
  %7 = load i8** %name116, align 8, !tbaa !3
  %cmp54117 = icmp eq i8* %7, null
  br i1 %cmp54117, label %if.then77, label %for.body56

for.cond51:                                       ; preds = %for.body56
  %name = getelementptr inbounds %struct.gtp_command* %commands, i64 %indvars.iv.next125, i32 0
  %8 = load i8** %name, align 8, !tbaa !3
  %cmp54 = icmp eq i8* %8, null
  br i1 %cmp54, label %if.then77, label %for.body56

for.body56:                                       ; preds = %if.end48, %for.cond51
  %indvars.iv124 = phi i64 [ %indvars.iv.next125, %for.cond51 ], [ 0, %if.end48 ]
  %9 = phi i8* [ %8, %for.cond51 ], [ %7, %if.end48 ]
  %name120 = phi i8** [ %name, %for.cond51 ], [ %name116, %if.end48 ]
  %call61 = call i32 @strcmp(i8* %1, i8* %9) #5
  %cmp62 = icmp eq i32 %call61, 0
  %indvars.iv.next125 = add i64 %indvars.iv124, 1
  br i1 %cmp62, label %for.end71, label %for.cond51

for.end71:                                        ; preds = %for.body56
  %function = getelementptr inbounds %struct.gtp_command* %commands, i64 %indvars.iv124, i32 1
  %10 = load i32 (i8*)** %function, align 8, !tbaa !3
  %call67 = call i32 %10(i8* %add.ptr50) #4
  %.pr = load i8** %name120, align 8, !tbaa !3
  %cmp75 = icmp eq i8* %.pr, null
  br i1 %cmp75, label %if.then77, label %if.end79

if.then77:                                        ; preds = %if.end48, %for.cond51, %for.end71
  %status.1112 = phi i32 [ %call67, %for.end71 ], [ 0, %for.cond51 ], [ 0, %if.end48 ]
  %call78 = call i32 (i8*, ...)* @gtp_failure(i8* getelementptr inbounds ([16 x i8]* @.str2, i64 0, i64 0)) #6
  br label %if.end79

if.end79:                                         ; preds = %if.then77, %for.end71
  %status.1111 = phi i32 [ %status.1112, %if.then77 ], [ %call67, %for.end71 ]
  switch i32 %status.1111, label %while.end.split [
    i32 1, label %while.cond.outer.backedge.thread
    i32 0, label %while.body
  ]

while.cond.outer.backedge.thread:                 ; preds = %if.end79
  call void (i8*, ...)* @gtp_printf(i8* getelementptr inbounds ([10 x i8]* @.str14, i64 0, i64 0)) #4
  br label %while.end.split

while.end.split:                                  ; preds = %if.end79, %while.body, %while.cond.outer.backedge.thread
  call void @llvm.lifetime.end(i64 1000, i8* %1) #1
  call void @llvm.lifetime.end(i64 1000, i8* %0) #1
  ret void
}
