define void @gtp_mprintf(i8* nocapture %fmt, ...) #0 {
entry:
  %i.addr.i = alloca i32, align 4
  %j.addr.i = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.dbg.value(metadata !{i8* %fmt}, i64 0, metadata !114), !dbg !304
  call void @llvm.dbg.declare(metadata !{[1 x %struct.__va_list_tag]* %ap}, metadata !115), !dbg !305
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*, !dbg !306
  call void @llvm.va_start(i8* %arraydecay1), !dbg !306
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 0, !dbg !307
  %0 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 3, !dbg !307
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 2, !dbg !307
  %fp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 1, !dbg !308
  %1 = bitcast i32* %i.addr.i to i8*, !dbg !309
  %2 = bitcast i32* %j.addr.i to i8*, !dbg !309
  br label %for.cond, !dbg !311

for.cond:                                         ; preds = %for.inc, %entry
  %fmt.addr.0 = phi i8* [ %fmt, %entry ], [ %incdec.ptr99, %for.inc ]
  %3 = load i8* %fmt.addr.0, align 1, !dbg !311, !tbaa !262
  switch i8 %3, label %if.else95 [
    i8 0, label %for.end
    i8 37, label %if.then
  ], !dbg !311

if.then:                                          ; preds = %for.cond
  %incdec.ptr = getelementptr inbounds i8* %fmt.addr.0, i64 1, !dbg !312
  call void @llvm.dbg.value(metadata !{i8* %incdec.ptr}, i64 0, metadata !114), !dbg !312
  %4 = load i8* %incdec.ptr, align 1, !dbg !312, !tbaa !262
  %conv3 = sext i8 %4 to i32, !dbg !312
  switch i32 %conv3, label %sw.default [
    i32 99, label %sw.bb
    i32 100, label %sw.bb5
    i32 102, label %sw.bb19
    i32 115, label %sw.bb30
    i32 109, label %sw.bb44
    i32 67, label %sw.bb69
  ], !dbg !312

sw.bb:                                            ; preds = %if.then
  %gp_offset = load i32* %gp_offset_p, align 16, !dbg !307
  %fits_in_gp = icmp ult i32 %gp_offset, 41, !dbg !307
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !307

vaarg.in_reg:                                     ; preds = %sw.bb
  %reg_save_area = load i8** %0, align 16, !dbg !307
  %5 = sext i32 %gp_offset to i64, !dbg !307
  %6 = getelementptr i8* %reg_save_area, i64 %5, !dbg !307
  %7 = add i32 %gp_offset, 8, !dbg !307
  store i32 %7, i32* %gp_offset_p, align 16, !dbg !307
  br label %vaarg.end, !dbg !307

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8, !dbg !307
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8, !dbg !307
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !307
  br label %vaarg.end, !dbg !307

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %6, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to i32*, !dbg !307
  %8 = load i32* %vaarg.addr, align 4, !dbg !307
  call void @llvm.dbg.value(metadata !{i32 %8}, i64 0, metadata !128), !dbg !307
  %9 = load %struct._IO_FILE** @stdout, align 8, !dbg !313, !tbaa !276
  %call = call i32 @_IO_putc(i32 %8, %struct._IO_FILE* %9) #6, !dbg !313
  br label %for.inc, !dbg !314

sw.bb5:                                           ; preds = %if.then
  %gp_offset8 = load i32* %gp_offset_p, align 16, !dbg !315
  %fits_in_gp9 = icmp ult i32 %gp_offset8, 41, !dbg !315
  br i1 %fits_in_gp9, label %vaarg.in_reg10, label %vaarg.in_mem12, !dbg !315

vaarg.in_reg10:                                   ; preds = %sw.bb5
  %reg_save_area11 = load i8** %0, align 16, !dbg !315
  %10 = sext i32 %gp_offset8 to i64, !dbg !315
  %11 = getelementptr i8* %reg_save_area11, i64 %10, !dbg !315
  %12 = add i32 %gp_offset8, 8, !dbg !315
  store i32 %12, i32* %gp_offset_p, align 16, !dbg !315
  br label %vaarg.end16, !dbg !315

vaarg.in_mem12:                                   ; preds = %sw.bb5
  %overflow_arg_area14 = load i8** %overflow_arg_area_p, align 8, !dbg !315
  %overflow_arg_area.next15 = getelementptr i8* %overflow_arg_area14, i64 8, !dbg !315
  store i8* %overflow_arg_area.next15, i8** %overflow_arg_area_p, align 8, !dbg !315
  br label %vaarg.end16, !dbg !315

vaarg.end16:                                      ; preds = %vaarg.in_mem12, %vaarg.in_reg10
  %vaarg.addr17.in = phi i8* [ %11, %vaarg.in_reg10 ], [ %overflow_arg_area14, %vaarg.in_mem12 ]
  %vaarg.addr17 = bitcast i8* %vaarg.addr17.in to i32*, !dbg !315
  %13 = load i32* %vaarg.addr17, align 4, !dbg !315
  call void @llvm.dbg.value(metadata !{i32 %13}, i64 0, metadata !134), !dbg !315
  %14 = load %struct._IO_FILE** @stdout, align 8, !dbg !316, !tbaa !276
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([3 x i8]* @.str3, i64 0, i64 0), i32 %13) #6, !dbg !316
  br label %for.inc, !dbg !317

sw.bb19:                                          ; preds = %if.then
  %fp_offset = load i32* %fp_offset_p, align 4, !dbg !308
  %fits_in_fp = icmp ult i32 %fp_offset, 161, !dbg !308
  br i1 %fits_in_fp, label %vaarg.in_reg21, label %vaarg.in_mem23, !dbg !308

vaarg.in_reg21:                                   ; preds = %sw.bb19
  %reg_save_area22 = load i8** %0, align 16, !dbg !308
  %15 = sext i32 %fp_offset to i64, !dbg !308
  %16 = getelementptr i8* %reg_save_area22, i64 %15, !dbg !308
  %17 = add i32 %fp_offset, 16, !dbg !308
  store i32 %17, i32* %fp_offset_p, align 4, !dbg !308
  br label %vaarg.end27, !dbg !308

vaarg.in_mem23:                                   ; preds = %sw.bb19
  %overflow_arg_area25 = load i8** %overflow_arg_area_p, align 8, !dbg !308
  %overflow_arg_area.next26 = getelementptr i8* %overflow_arg_area25, i64 8, !dbg !308
  store i8* %overflow_arg_area.next26, i8** %overflow_arg_area_p, align 8, !dbg !308
  br label %vaarg.end27, !dbg !308

vaarg.end27:                                      ; preds = %vaarg.in_mem23, %vaarg.in_reg21
  %vaarg.addr28.in = phi i8* [ %16, %vaarg.in_reg21 ], [ %overflow_arg_area25, %vaarg.in_mem23 ]
  %vaarg.addr28 = bitcast i8* %vaarg.addr28.in to double*, !dbg !308
  %18 = load double* %vaarg.addr28, align 8, !dbg !308
  call void @llvm.dbg.value(metadata !{double %18}, i64 0, metadata !136), !dbg !308
  %19 = load %struct._IO_FILE** @stdout, align 8, !dbg !318, !tbaa !276
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([3 x i8]* @.str4, i64 0, i64 0), double %18) #6, !dbg !318
  br label %for.inc, !dbg !319

sw.bb30:                                          ; preds = %if.then
  %gp_offset33 = load i32* %gp_offset_p, align 16, !dbg !320
  %fits_in_gp34 = icmp ult i32 %gp_offset33, 41, !dbg !320
  br i1 %fits_in_gp34, label %vaarg.in_reg35, label %vaarg.in_mem37, !dbg !320

vaarg.in_reg35:                                   ; preds = %sw.bb30
  %reg_save_area36 = load i8** %0, align 16, !dbg !320
  %20 = sext i32 %gp_offset33 to i64, !dbg !320
  %21 = getelementptr i8* %reg_save_area36, i64 %20, !dbg !320
  %22 = add i32 %gp_offset33, 8, !dbg !320
  store i32 %22, i32* %gp_offset_p, align 16, !dbg !320
  br label %vaarg.end41, !dbg !320

vaarg.in_mem37:                                   ; preds = %sw.bb30
  %overflow_arg_area39 = load i8** %overflow_arg_area_p, align 8, !dbg !320
  %overflow_arg_area.next40 = getelementptr i8* %overflow_arg_area39, i64 8, !dbg !320
  store i8* %overflow_arg_area.next40, i8** %overflow_arg_area_p, align 8, !dbg !320
  br label %vaarg.end41, !dbg !320

vaarg.end41:                                      ; preds = %vaarg.in_mem37, %vaarg.in_reg35
  %vaarg.addr42.in = phi i8* [ %21, %vaarg.in_reg35 ], [ %overflow_arg_area39, %vaarg.in_mem37 ]
  %vaarg.addr42 = bitcast i8* %vaarg.addr42.in to i8**, !dbg !320
  %23 = load i8** %vaarg.addr42, align 8, !dbg !320
  call void @llvm.dbg.value(metadata !{i8* %23}, i64 0, metadata !139), !dbg !320
  %24 = load %struct._IO_FILE** @stdout, align 8, !dbg !321, !tbaa !276
  %call43 = call i32 @fputs(i8* %23, %struct._IO_FILE* %24) #6, !dbg !321
  br label %for.inc, !dbg !322

sw.bb44:                                          ; preds = %if.then
  %gp_offset47 = load i32* %gp_offset_p, align 16, !dbg !323
  %fits_in_gp48 = icmp ult i32 %gp_offset47, 41, !dbg !323
  br i1 %fits_in_gp48, label %vaarg.end55, label %vaarg.end55.thread, !dbg !323

vaarg.end55.thread:                               ; preds = %sw.bb44
  %overflow_arg_area53 = load i8** %overflow_arg_area_p, align 8, !dbg !323
  %overflow_arg_area.next54 = getelementptr i8* %overflow_arg_area53, i64 8, !dbg !323
  store i8* %overflow_arg_area.next54, i8** %overflow_arg_area_p, align 8, !dbg !323
  %vaarg.addr56107 = bitcast i8* %overflow_arg_area53 to i32*, !dbg !323
  %25 = load i32* %vaarg.addr56107, align 4, !dbg !323
  call void @llvm.dbg.value(metadata !{i32 %34}, i64 0, metadata !141), !dbg !323
  br label %vaarg.in_mem63, !dbg !324

vaarg.end55:                                      ; preds = %sw.bb44
  %reg_save_area50 = load i8** %0, align 16, !dbg !323
  %26 = sext i32 %gp_offset47 to i64, !dbg !323
  %27 = getelementptr i8* %reg_save_area50, i64 %26, !dbg !323
  %28 = add i32 %gp_offset47, 8, !dbg !323
  store i32 %28, i32* %gp_offset_p, align 16, !dbg !323
  %vaarg.addr56 = bitcast i8* %27 to i32*, !dbg !323
  %29 = load i32* %vaarg.addr56, align 4, !dbg !323
  call void @llvm.dbg.value(metadata !{i32 %34}, i64 0, metadata !141), !dbg !323
  %fits_in_gp60 = icmp ult i32 %28, 41, !dbg !324
  br i1 %fits_in_gp60, label %vaarg.in_reg61, label %vaarg.in_mem63, !dbg !324

vaarg.in_reg61:                                   ; preds = %vaarg.end55
  %reg_save_area62 = load i8** %0, align 16, !dbg !324
  %30 = sext i32 %28 to i64, !dbg !324
  %31 = getelementptr i8* %reg_save_area62, i64 %30, !dbg !324
  %32 = add i32 %gp_offset47, 16, !dbg !324
  store i32 %32, i32* %gp_offset_p, align 16, !dbg !324
  br label %vaarg.end67, !dbg !324

vaarg.in_mem63:                                   ; preds = %vaarg.end55.thread, %vaarg.end55
  %33 = phi i32 [ %25, %vaarg.end55.thread ], [ %29, %vaarg.end55 ]
  %overflow_arg_area65 = load i8** %overflow_arg_area_p, align 8, !dbg !324
  %overflow_arg_area.next66 = getelementptr i8* %overflow_arg_area65, i64 8, !dbg !324
  store i8* %overflow_arg_area.next66, i8** %overflow_arg_area_p, align 8, !dbg !324
  br label %vaarg.end67, !dbg !324

vaarg.end67:                                      ; preds = %vaarg.in_mem63, %vaarg.in_reg61
  %34 = phi i32 [ %29, %vaarg.in_reg61 ], [ %33, %vaarg.in_mem63 ]
  %vaarg.addr68.in = phi i8* [ %31, %vaarg.in_reg61 ], [ %overflow_arg_area65, %vaarg.in_mem63 ]
  %vaarg.addr68 = bitcast i8* %vaarg.addr68.in to i32*, !dbg !324
  %35 = load i32* %vaarg.addr68, align 4, !dbg !324
  call void @llvm.dbg.value(metadata !{i32 %35}, i64 0, metadata !143), !dbg !324
  call void @llvm.lifetime.start(i64 4, i8* %1) #2, !dbg !309
  call void @llvm.lifetime.start(i64 4, i8* %2) #2, !dbg !309
  call void @llvm.dbg.value(metadata !{i32 %34}, i64 0, metadata !325) #2, !dbg !309
  call void @llvm.dbg.value(metadata !{i32 %34}, i64 0, metadata !233), !dbg !309
  store i32 %34, i32* %i.addr.i, align 4, !tbaa !272
  call void @llvm.dbg.declare(metadata !{i32* %i.addr.i}, metadata !233) #2, !dbg !309
  call void @llvm.dbg.value(metadata !{i32 %35}, i64 0, metadata !326) #2, !dbg !309
  call void @llvm.dbg.value(metadata !{i32 %35}, i64 0, metadata !234), !dbg !309
  store i32 %35, i32* %j.addr.i, align 4, !tbaa !272
  call void @llvm.dbg.declare(metadata !{i32* %j.addr.i}, metadata !234) #2, !dbg !309
  call void @gtp_print_vertices(i32 1, i32* %i.addr.i, i32* %j.addr.i) #6, !dbg !327
  call void @llvm.lifetime.end(i64 4, i8* %1) #2, !dbg !328
  call void @llvm.lifetime.end(i64 4, i8* %2) #2, !dbg !328
  br label %for.inc, !dbg !329

sw.bb69:                                          ; preds = %if.then
  %gp_offset72 = load i32* %gp_offset_p, align 16, !dbg !330
  %fits_in_gp73 = icmp ult i32 %gp_offset72, 41, !dbg !330
  br i1 %fits_in_gp73, label %vaarg.in_reg74, label %vaarg.in_mem76, !dbg !330

vaarg.in_reg74:                                   ; preds = %sw.bb69
  %reg_save_area75 = load i8** %0, align 16, !dbg !330
  %36 = sext i32 %gp_offset72 to i64, !dbg !330
  %37 = getelementptr i8* %reg_save_area75, i64 %36, !dbg !330
  %38 = add i32 %gp_offset72, 8, !dbg !330
  store i32 %38, i32* %gp_offset_p, align 16, !dbg !330
  br label %vaarg.end80, !dbg !330

vaarg.in_mem76:                                   ; preds = %sw.bb69
  %overflow_arg_area78 = load i8** %overflow_arg_area_p, align 8, !dbg !330
  %overflow_arg_area.next79 = getelementptr i8* %overflow_arg_area78, i64 8, !dbg !330
  store i8* %overflow_arg_area.next79, i8** %overflow_arg_area_p, align 8, !dbg !330
  br label %vaarg.end80, !dbg !330

vaarg.end80:                                      ; preds = %vaarg.in_mem76, %vaarg.in_reg74
  %vaarg.addr81.in = phi i8* [ %37, %vaarg.in_reg74 ], [ %overflow_arg_area78, %vaarg.in_mem76 ]
  %vaarg.addr81 = bitcast i8* %vaarg.addr81.in to i32*, !dbg !330
  %39 = load i32* %vaarg.addr81, align 4, !dbg !330
  call void @llvm.dbg.value(metadata !{i32 %39}, i64 0, metadata !144), !dbg !330
  %cmp82 = icmp eq i32 %39, 1, !dbg !331
  br i1 %cmp82, label %if.then84, label %if.else, !dbg !331

if.then84:                                        ; preds = %vaarg.end80
  %40 = load %struct._IO_FILE** @stdout, align 8, !dbg !332, !tbaa !276
  %41 = call i64 @fwrite(i8* getelementptr inbounds ([6 x i8]* @.str5, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %40), !dbg !332
  br label %for.inc, !dbg !332

if.else:                                          ; preds = %vaarg.end80
  %cmp86 = icmp eq i32 %39, 2, !dbg !333
  %42 = load %struct._IO_FILE** @stdout, align 8, !dbg !334, !tbaa !276
  br i1 %cmp86, label %if.then88, label %if.else90, !dbg !333

if.then88:                                        ; preds = %if.else
  %43 = call i64 @fwrite(i8* getelementptr inbounds ([6 x i8]* @.str6, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %42), !dbg !334
  br label %for.inc, !dbg !334

if.else90:                                        ; preds = %if.else
  %44 = call i64 @fwrite(i8* getelementptr inbounds ([6 x i8]* @.str7, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %42), !dbg !335
  br label %for.inc

sw.default:                                       ; preds = %if.then
  %45 = load %struct._IO_FILE** @stdout, align 8, !dbg !336, !tbaa !276
  %call94 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([33 x i8]* @.str8, i64 0, i64 0), i32 %conv3) #6, !dbg !336
  br label %for.inc, !dbg !337

if.else95:                                        ; preds = %for.cond
  %conv = sext i8 %3 to i32, !dbg !338
  %46 = load %struct._IO_FILE** @stdout, align 8, !dbg !339, !tbaa !276
  %call97 = call i32 @_IO_putc(i32 %conv, %struct._IO_FILE* %46) #6, !dbg !339
  br label %for.inc

for.inc:                                          ; preds = %if.else95, %if.then84, %if.else90, %if.then88, %sw.default, %vaarg.end67, %vaarg.end41, %vaarg.end27, %vaarg.end16, %vaarg.end
  %fmt.addr.1 = phi i8* [ %incdec.ptr, %sw.default ], [ %incdec.ptr, %if.then84 ], [ %incdec.ptr, %if.then88 ], [ %incdec.ptr, %if.else90 ], [ %incdec.ptr, %vaarg.end67 ], [ %incdec.ptr, %vaarg.end41 ], [ %incdec.ptr, %vaarg.end27 ], [ %incdec.ptr, %vaarg.end16 ], [ %incdec.ptr, %vaarg.end ], [ %fmt.addr.0, %if.else95 ]
  %incdec.ptr99 = getelementptr inbounds i8* %fmt.addr.1, i64 1, !dbg !311
  call void @llvm.dbg.value(metadata !{i8* %incdec.ptr99}, i64 0, metadata !114), !dbg !311
  br label %for.cond, !dbg !311

for.end:                                          ; preds = %for.cond
  call void @llvm.va_end(i8* %arraydecay1), !dbg !340
  ret void, !dbg !341
}
