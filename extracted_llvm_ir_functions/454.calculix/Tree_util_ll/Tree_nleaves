define i32 @Tree_nleaves(%struct._Tree* %tree) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct._Tree* %tree}, i64 0, metadata !38), !dbg !134
  %cmp = icmp eq %struct._Tree* %tree, null, !dbg !135
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !135

lor.lhs.false:                                    ; preds = %entry
  %n = getelementptr inbounds %struct._Tree* %tree, i64 0, i32 0, !dbg !135
  %0 = load i32* %n, align 4, !dbg !135, !tbaa !95
  %cmp1 = icmp slt i32 %0, 1, !dbg !135
  br i1 %cmp1, label %if.then, label %for.body.lr.ph, !dbg !135

for.body.lr.ph:                                   ; preds = %lor.lhs.false
  %fch = getelementptr inbounds %struct._Tree* %tree, i64 0, i32 3, !dbg !136
  %1 = load i32** %fch, align 8, !dbg !136, !tbaa !100
  br label %for.body, !dbg !139

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct._IO_FILE** @stderr, align 8, !dbg !140, !tbaa !100
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([46 x i8]* @.str4, i64 0, i64 0), %struct._Tree* %tree) #5, !dbg !140
  tail call void @exit(i32 -1) #6, !dbg !142
  unreachable, !dbg !142

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %nleaf.016 = phi i32 [ 0, %for.body.lr.ph ], [ %inc.nleaf.0, %for.body ]
  %arrayidx = getelementptr inbounds i32* %1, i64 %indvars.iv, !dbg !136
  %3 = load i32* %arrayidx, align 4, !dbg !136, !tbaa !95
  %cmp4 = icmp eq i32 %3, -1, !dbg !136
  %inc = zext i1 %cmp4 to i32, !dbg !136
  %inc.nleaf.0 = add nsw i32 %inc, %nleaf.016, !dbg !136
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !139
  %4 = trunc i64 %indvars.iv.next to i32, !dbg !139
  %cmp3 = icmp slt i32 %4, %0, !dbg !139
  br i1 %cmp3, label %for.body, label %for.end, !dbg !139

for.end:                                          ; preds = %for.body
  ret i32 %inc.nleaf.0, !dbg !143
}
