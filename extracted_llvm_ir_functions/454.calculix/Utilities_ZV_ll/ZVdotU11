define void @ZVdotU11(i32 %n, double* nocapture %y0, double* nocapture %x0, double* nocapture %sums) #0 {
entry:
  %cmp30 = icmp sgt i32 %n, 0
  br i1 %cmp30, label %for.body, label %for.end

for.body:                                         ; preds = %entry, %for.body
  %indvars.iv37 = phi i64 [ %indvars.iv.next38, %for.body ], [ 1, %entry ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %entry ]
  %ii.033 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %i00.032 = phi double [ %add11, %for.body ], [ 0.000000e+00, %entry ]
  %r00.031 = phi double [ %add, %for.body ], [ 0.000000e+00, %entry ]
  %arrayidx = getelementptr inbounds double* %y0, i64 %indvars.iv
  %0 = load double* %arrayidx, align 8, !tbaa !0
  %arrayidx2 = getelementptr inbounds double* %y0, i64 %indvars.iv37
  %1 = load double* %arrayidx2, align 8, !tbaa !0
  %arrayidx4 = getelementptr inbounds double* %x0, i64 %indvars.iv
  %2 = load double* %arrayidx4, align 8, !tbaa !0
  %arrayidx6 = getelementptr inbounds double* %x0, i64 %indvars.iv37
  %3 = load double* %arrayidx6, align 8, !tbaa !0
  %mul = fmul double %0, %2
  %mul7 = fmul double %1, %3
  %sub = fsub double %mul, %mul7
  %add = fadd double %r00.031, %sub
  %mul8 = fmul double %0, %3
  %mul9 = fmul double %1, %2
  %add10 = fadd double %mul9, %mul8
  %add11 = fadd double %i00.032, %add10
  %inc = add nsw i32 %ii.033, 1
  %indvars.iv.next = add i64 %indvars.iv, 2
  %indvars.iv.next38 = add i64 %indvars.iv37, 2
  %exitcond = icmp eq i32 %inc, %n
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %i00.0.lcssa = phi double [ 0.000000e+00, %entry ], [ %add11, %for.body ]
  %r00.0.lcssa = phi double [ 0.000000e+00, %entry ], [ %add, %for.body ]
  store double %r00.0.lcssa, double* %sums, align 8, !tbaa !0
  %arrayidx15 = getelementptr inbounds double* %sums, i64 1
  store double %i00.0.lcssa, double* %arrayidx15, align 8, !tbaa !0
  ret void
}
