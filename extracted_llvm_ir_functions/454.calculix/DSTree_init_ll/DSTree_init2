define void @DSTree_init2(%struct._DSTree* %dstree, %struct._Tree* %tree, %struct._IV* %mapIV) #0 {
entry:
  %cmp = icmp eq %struct._DSTree* %dstree, null
  %cmp1 = icmp eq %struct._Tree* %tree, null
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %entry
  %n = getelementptr inbounds %struct._Tree* %tree, i64 0, i32 0
  %0 = load i32* %n, align 4, !tbaa !3
  %cmp3 = icmp slt i32 %0, 1
  %cmp5 = icmp eq %struct._IV* %mapIV, null
  %or.cond21 = or i1 %cmp3, %cmp5
  br i1 %or.cond21, label %if.then, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false2
  %call = tail call i32 @IV_size(%struct._IV* %mapIV) #4
  %cmp7 = icmp slt i32 %call, 1
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false2, %entry
  %1 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call8 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([52 x i8]* @.str1, i64 0, i64 0), %struct._DSTree* %dstree, %struct._Tree* %tree, %struct._IV* %mapIV) #4
  tail call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false6
  tail call void @DSTree_clearData(%struct._DSTree* %dstree) #4
  %tree9 = getelementptr inbounds %struct._DSTree* %dstree, i64 0, i32 0
  store %struct._Tree* %tree, %struct._Tree** %tree9, align 8, !tbaa !0
  %mapIV10 = getelementptr inbounds %struct._DSTree* %dstree, i64 0, i32 1
  store %struct._IV* %mapIV, %struct._IV** %mapIV10, align 8, !tbaa !0
  ret void
}
