define %struct._ChvList* @FrontMtx_aggregateList(%struct._FrontMtx* %frontmtx, %struct._IV* %frontOwnersIV, i32 %lockflag) #0 {
entry:
  %nfront = alloca i32, align 4
  %size = alloca i32, align 4
  %frontOwners = alloca i32*, align 8
  %indices = alloca i32*, align 8
  %cmp = icmp eq %struct._FrontMtx* %frontmtx, null
  %cmp1 = icmp eq %struct._IV* %frontOwnersIV, null
  %or.cond = or i1 %cmp, %cmp1
  %0 = icmp ugt i32 %lockflag, 2
  %or.cond178 = or i1 %or.cond, %0
  br i1 %or.cond178, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([62 x i8]* @.str17, i64 0, i64 0), %struct._FrontMtx* %frontmtx, %struct._IV* %frontOwnersIV, i32 %lockflag) #5
  call void @exit(i32 -1) #7
  unreachable

if.end:                                           ; preds = %entry
  %symbfacIVL6 = getelementptr inbounds %struct._FrontMtx* %frontmtx, i64 0, i32 13
  %2 = load %struct._IVL** %symbfacIVL6, align 8, !tbaa !0
  %frontETree = getelementptr inbounds %struct._FrontMtx* %frontmtx, i64 0, i32 11
  %3 = load %struct._ETree** %frontETree, align 8, !tbaa !0
  %call7 = call i32* @ETree_vtxToFront(%struct._ETree* %3) #5
  call void @IV_sizeAndEntries(%struct._IV* %frontOwnersIV, i32* %nfront, i32** %frontOwners) #5
  %call8 = call i32 @IV_max(%struct._IV* %frontOwnersIV) #5
  %add = add nsw i32 %call8, 1
  %call9 = call i32* @IVinit(i32 %add, i32 -1) #5
  %4 = load i32* %nfront, align 4, !tbaa !3
  %call10 = call i32* @IVinit(i32 %4, i32 -1) #5
  %5 = load i32* %nfront, align 4, !tbaa !3
  %call11 = call i32* @IVinit(i32 %5, i32 -1) #5
  %6 = load i32* %nfront, align 4, !tbaa !3
  %call12 = call i32* @IVinit(i32 %6, i32 0) #5
  %7 = load i32* %nfront, align 4, !tbaa !3
  %call13 = call i32* @IVinit(i32 %7, i32 0) #5
  %cmp14 = icmp sgt i32 %lockflag, 0
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end
  %8 = load i32* %nfront, align 4, !tbaa !3
  %call16 = call i8* @CVinit(i32 %8, i8 signext 78) #5
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then15
  %flags.0 = phi i8* [ %call16, %if.then15 ], [ null, %if.end ]
  %9 = load i32* %nfront, align 4, !tbaa !3
  %cmp18187 = icmp sgt i32 %9, 0
  br i1 %cmp18187, label %for.body.lr.ph, label %for.end101

for.body.lr.ph:                                   ; preds = %if.end17
  %cmp63 = icmp eq i8* %flags.0, null
  br label %for.body

for.body:                                         ; preds = %for.inc99, %for.body.lr.ph
  %indvars.iv193 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next194, %for.inc99 ]
  %10 = load i32** %frontOwners, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds i32* %10, i64 %indvars.iv193
  %11 = load i32* %arrayidx, align 4, !tbaa !3
  %idxprom19 = sext i32 %11 to i64
  %arrayidx20 = getelementptr inbounds i32* %call9, i64 %idxprom19
  %12 = trunc i64 %indvars.iv193 to i32
  store i32 %12, i32* %arrayidx20, align 4, !tbaa !3
  %arrayidx22 = getelementptr inbounds i32* %call10, i64 %indvars.iv193
  %13 = load i32* %arrayidx22, align 4, !tbaa !3
  %cmp23182 = icmp eq i32 %13, -1
  br i1 %cmp23182, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.cond.backedge.while.body_crit_edge
  %14 = phi i32* [ %.pre, %while.cond.backedge.while.body_crit_edge ], [ %10, %for.body ]
  %15 = phi i32 [ %28, %while.cond.backedge.while.body_crit_edge ], [ %13, %for.body ]
  %count.0183 = phi i32 [ %count.1, %while.cond.backedge.while.body_crit_edge ], [ 0, %for.body ]
  %idxprom24 = sext i32 %15 to i64
  %arrayidx25 = getelementptr inbounds i32* %call11, i64 %idxprom24
  %16 = load i32* %arrayidx25, align 4, !tbaa !3
  store i32 %16, i32* %arrayidx22, align 4, !tbaa !3
  %arrayidx29 = getelementptr inbounds i32* %14, i64 %idxprom24
  %17 = load i32* %arrayidx29, align 4, !tbaa !3
  %idxprom30 = sext i32 %17 to i64
  %arrayidx31 = getelementptr inbounds i32* %call9, i64 %idxprom30
  %18 = load i32* %arrayidx31, align 4, !tbaa !3
  %cmp32 = icmp eq i32 %18, %12
  br i1 %cmp32, label %if.end36, label %if.then33

if.then33:                                        ; preds = %while.body
  store i32 %12, i32* %arrayidx31, align 4, !tbaa !3
  %inc = add nsw i32 %count.0183, 1
  br label %if.end36

if.end36:                                         ; preds = %while.body, %if.then33
  %count.1 = phi i32 [ %inc, %if.then33 ], [ %count.0183, %while.body ]
  call void @IVL_listAndSize(%struct._IVL* %2, i32 %15, i32* %size, i32** %indices) #5
  %arrayidx38 = getelementptr inbounds i32* %call12, i64 %idxprom24
  %19 = load i32* %arrayidx38, align 4, !tbaa !3
  %20 = load i32* %size, align 4, !tbaa !3
  %cmp40180 = icmp slt i32 %19, %20
  br i1 %cmp40180, label %for.body41.lr.ph, label %while.cond.backedge

for.body41.lr.ph:                                 ; preds = %if.end36
  %21 = load i32** %indices, align 8, !tbaa !0
  %22 = load i32** %frontOwners, align 8, !tbaa !0
  %23 = sext i32 %19 to i64
  br label %for.body41

for.body41:                                       ; preds = %for.body41.lr.ph, %for.inc
  %indvars.iv = phi i64 [ %23, %for.body41.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %ii.0181 = phi i32 [ %19, %for.body41.lr.ph ], [ %inc60, %for.inc ]
  %arrayidx43 = getelementptr inbounds i32* %21, i64 %indvars.iv
  %24 = load i32* %arrayidx43, align 4, !tbaa !3
  %idxprom44 = sext i32 %24 to i64
  %arrayidx45 = getelementptr inbounds i32* %call7, i64 %idxprom44
  %25 = load i32* %arrayidx45, align 4, !tbaa !3
  %cmp46 = icmp sgt i32 %25, %12
  br i1 %cmp46, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body41
  %idxprom47 = sext i32 %25 to i64
  %arrayidx48 = getelementptr inbounds i32* %22, i64 %idxprom47
  %26 = load i32* %arrayidx48, align 4, !tbaa !3
  %cmp49 = icmp eq i32 %26, %17
  br i1 %cmp49, label %for.inc, label %if.then50

if.then50:                                        ; preds = %land.lhs.true
  store i32 %ii.0181, i32* %arrayidx38, align 4, !tbaa !3
  %arrayidx54 = getelementptr inbounds i32* %call10, i64 %idxprom47
  %27 = load i32* %arrayidx54, align 4, !tbaa !3
  store i32 %27, i32* %arrayidx25, align 4, !tbaa !3
  store i32 %15, i32* %arrayidx54, align 4, !tbaa !3
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.end36, %for.inc, %if.then50
  %28 = load i32* %arrayidx22, align 4, !tbaa !3
  %cmp23 = icmp eq i32 %28, -1
  br i1 %cmp23, label %while.end, label %while.cond.backedge.while.body_crit_edge

while.cond.backedge.while.body_crit_edge:         ; preds = %while.cond.backedge
  %.pre = load i32** %frontOwners, align 8, !tbaa !0
  br label %while.body

for.inc:                                          ; preds = %land.lhs.true, %for.body41
  %indvars.iv.next = add i64 %indvars.iv, 1
  %inc60 = add nsw i32 %ii.0181, 1
  %29 = trunc i64 %indvars.iv.next to i32
  %cmp40 = icmp slt i32 %29, %20
  br i1 %cmp40, label %for.body41, label %while.cond.backedge

while.end:                                        ; preds = %while.cond.backedge, %for.body
  %count.0.lcssa = phi i32 [ 0, %for.body ], [ %count.1, %while.cond.backedge ]
  %arrayidx62 = getelementptr inbounds i32* %call13, i64 %indvars.iv193
  store i32 %count.0.lcssa, i32* %arrayidx62, align 4, !tbaa !3
  br i1 %cmp63, label %if.end73, label %if.then64

if.then64:                                        ; preds = %while.end
  %cmp65 = icmp sgt i32 %count.0.lcssa, 1
  %arrayidx68 = getelementptr inbounds i8* %flags.0, i64 %indvars.iv193
  br i1 %cmp65, label %if.then66, label %if.else69

if.then66:                                        ; preds = %if.then64
  store i8 89, i8* %arrayidx68, align 1, !tbaa !1
  br label %if.end73

if.else69:                                        ; preds = %if.then64
  store i8 78, i8* %arrayidx68, align 1, !tbaa !1
  br label %if.end73

if.end73:                                         ; preds = %while.end, %if.then66, %if.else69
  call void @IVL_listAndSize(%struct._IVL* %2, i32 %12, i32* %size, i32** %indices) #5
  %30 = load i32* %size, align 4, !tbaa !3
  %cmp75185 = icmp sgt i32 %30, 0
  br i1 %cmp75185, label %for.body76.lr.ph, label %for.inc99

for.body76.lr.ph:                                 ; preds = %if.end73
  %31 = load i32** %indices, align 8, !tbaa !0
  %32 = load i32** %frontOwners, align 8, !tbaa !0
  br label %for.body76

for.body76:                                       ; preds = %for.body76.lr.ph, %for.inc96
  %indvars.iv191 = phi i64 [ 0, %for.body76.lr.ph ], [ %indvars.iv.next192, %for.inc96 ]
  %ii.1186 = phi i32 [ 0, %for.body76.lr.ph ], [ %inc97, %for.inc96 ]
  %arrayidx78 = getelementptr inbounds i32* %31, i64 %indvars.iv191
  %33 = load i32* %arrayidx78, align 4, !tbaa !3
  %idxprom79 = sext i32 %33 to i64
  %arrayidx80 = getelementptr inbounds i32* %call7, i64 %idxprom79
  %34 = load i32* %arrayidx80, align 4, !tbaa !3
  %cmp81 = icmp sgt i32 %34, %12
  br i1 %cmp81, label %land.lhs.true82, label %for.inc96

land.lhs.true82:                                  ; preds = %for.body76
  %idxprom83 = sext i32 %34 to i64
  %arrayidx84 = getelementptr inbounds i32* %32, i64 %idxprom83
  %35 = load i32* %arrayidx84, align 4, !tbaa !3
  %cmp85 = icmp eq i32 %35, %11
  br i1 %cmp85, label %for.inc96, label %if.then86

if.then86:                                        ; preds = %land.lhs.true82
  %arrayidx88 = getelementptr inbounds i32* %call12, i64 %indvars.iv193
  store i32 %ii.1186, i32* %arrayidx88, align 4, !tbaa !3
  %arrayidx90 = getelementptr inbounds i32* %call10, i64 %idxprom83
  %36 = load i32* %arrayidx90, align 4, !tbaa !3
  %arrayidx92 = getelementptr inbounds i32* %call11, i64 %indvars.iv193
  store i32 %36, i32* %arrayidx92, align 4, !tbaa !3
  store i32 %12, i32* %arrayidx90, align 4, !tbaa !3
  br label %for.inc99

for.inc96:                                        ; preds = %land.lhs.true82, %for.body76
  %indvars.iv.next192 = add i64 %indvars.iv191, 1
  %inc97 = add nsw i32 %ii.1186, 1
  %37 = trunc i64 %indvars.iv.next192 to i32
  %cmp75 = icmp slt i32 %37, %30
  br i1 %cmp75, label %for.body76, label %for.inc99

for.inc99:                                        ; preds = %if.end73, %for.inc96, %if.then86
  %indvars.iv.next194 = add i64 %indvars.iv193, 1
  %38 = load i32* %nfront, align 4, !tbaa !3
  %39 = trunc i64 %indvars.iv.next194 to i32
  %cmp18 = icmp slt i32 %39, %38
  br i1 %cmp18, label %for.body, label %for.end101

for.end101:                                       ; preds = %for.inc99, %if.end17
  %call102 = call %struct._ChvList* @ChvList_new() #5
  %40 = load i32* %nfront, align 4, !tbaa !3
  call void @ChvList_init(%struct._ChvList* %call102, i32 %40, i32* %call13, i32 %lockflag, i8* %flags.0) #5
  call void @IVfree(i32* %call13) #5
  call void @IVfree(i32* %call10) #5
  call void @IVfree(i32* %call11) #5
  call void @IVfree(i32* %call12) #5
  call void @IVfree(i32* %call9) #5
  %cmp103 = icmp eq i8* %flags.0, null
  br i1 %cmp103, label %if.end105, label %if.then104

if.then104:                                       ; preds = %for.end101
  call void @CVfree(i8* %flags.0) #5
  br label %if.end105

if.end105:                                        ; preds = %for.end101, %if.then104
  ret %struct._ChvList* %call102
}
