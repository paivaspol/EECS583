define void @ETree_initFromGraph(%struct._ETree* %etree, %struct._Graph* %g) #0 {
entry:
  %vsize = alloca i32, align 4
  %vadj = alloca i32*, align 8
  %cmp = icmp eq %struct._ETree* %etree, null
  %cmp1 = icmp eq %struct._Graph* %g, null
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %entry
  %nvtx3 = getelementptr inbounds %struct._Graph* %g, i64 0, i32 1
  %0 = load i32* %nvtx3, align 4, !tbaa !3
  %cmp4 = icmp slt i32 %0, 1
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %entry
  %1 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([56 x i8]* @.str1, i64 0, i64 0), %struct._ETree* %etree, %struct._Graph* %g) #6
  call void @exit(i32 -1) #7
  unreachable

if.end:                                           ; preds = %lor.lhs.false2
  call void @ETree_init1(%struct._ETree* %etree, i32 %0, i32 %0) #8
  %nodwghtsIV = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 3
  %2 = load %struct._IV** %nodwghtsIV, align 8, !tbaa !0
  %call5 = call i32* @IV_entries(%struct._IV* %2) #6
  %bndwghtsIV = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 4
  %3 = load %struct._IV** %bndwghtsIV, align 8, !tbaa !0
  %call6 = call i32* @IV_entries(%struct._IV* %3) #6
  %tree = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 2
  %4 = load %struct._Tree** %tree, align 8, !tbaa !0
  %par7 = getelementptr inbounds %struct._Tree* %4, i64 0, i32 2
  %5 = load i32** %par7, align 8, !tbaa !0
  %vtxToFrontIV = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 5
  %6 = load %struct._IV** %vtxToFrontIV, align 8, !tbaa !0
  call void @IV_ramp(%struct._IV* %6, i32 0, i32 1) #6
  %vwghts = getelementptr inbounds %struct._Graph* %g, i64 0, i32 7
  %7 = load i32** %vwghts, align 8, !tbaa !0
  %cmp8 = icmp eq i32* %7, null
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end
  call void @IVfill(i32 %0, i32* %call5, i32 1) #6
  br label %if.end11

if.else:                                          ; preds = %if.end
  call void @IVcopy(i32 %0, i32* %call5, i32* %7) #6
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then9
  %call12 = call i32* @IVinit(i32 %0, i32 -1) #6
  call void @IVramp(i32 %0, i32* %call12, i32 0, i32 1) #6
  %cmp1384 = icmp sgt i32 %0, 0
  br i1 %cmp1384, label %for.body, label %for.end38

for.body:                                         ; preds = %if.end11, %for.inc36
  %indvars.iv87 = phi i64 [ %indvars.iv.next88, %for.inc36 ], [ 0, %if.end11 ]
  %8 = trunc i64 %indvars.iv87 to i32
  call void @Graph_adjAndSize(%struct._Graph* %g, i32 %8, i32* %vsize, i32** %vadj) #6
  %9 = load i32* %vsize, align 4, !tbaa !3
  %cmp1582 = icmp sgt i32 %9, 0
  br i1 %cmp1582, label %for.body16.lr.ph, label %for.inc36

for.body16.lr.ph:                                 ; preds = %for.body
  %arrayidx22 = getelementptr inbounds i32* %call5, i64 %indvars.iv87
  %.pre = load i32** %vadj, align 8, !tbaa !0
  br label %for.body16

for.body16:                                       ; preds = %for.body16.lr.ph, %for.inc
  %indvars.iv = phi i64 [ 0, %for.body16.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i32* %.pre, i64 %indvars.iv
  %u.079 = load i32* %arrayidx, align 4
  %cmp1780 = icmp slt i32 %u.079, %8
  br i1 %cmp1780, label %land.rhs, label %for.inc

land.rhs:                                         ; preds = %for.body16, %if.end31
  %u.081 = phi i32 [ %u.0, %if.end31 ], [ %u.079, %for.body16 ]
  %idxprom18 = sext i32 %u.081 to i64
  %arrayidx19 = getelementptr inbounds i32* %call12, i64 %idxprom18
  %10 = load i32* %arrayidx19, align 4, !tbaa !3
  %cmp20 = icmp eq i32 %10, %8
  br i1 %cmp20, label %for.inc, label %while.body

while.body:                                       ; preds = %land.rhs
  %11 = load i32* %arrayidx22, align 4, !tbaa !3
  %arrayidx24 = getelementptr inbounds i32* %call6, i64 %idxprom18
  %12 = load i32* %arrayidx24, align 4, !tbaa !3
  %add = add nsw i32 %12, %11
  store i32 %add, i32* %arrayidx24, align 4, !tbaa !3
  %13 = load i32* %arrayidx19, align 4, !tbaa !3
  %cmp27 = icmp eq i32 %13, %u.081
  %arrayidx30 = getelementptr inbounds i32* %5, i64 %idxprom18
  br i1 %cmp27, label %if.then28, label %if.end31

if.then28:                                        ; preds = %while.body
  store i32 %8, i32* %arrayidx30, align 4, !tbaa !3
  br label %if.end31

if.end31:                                         ; preds = %while.body, %if.then28
  store i32 %8, i32* %arrayidx19, align 4, !tbaa !3
  %u.0 = load i32* %arrayidx30, align 4
  %cmp17 = icmp slt i32 %u.0, %8
  br i1 %cmp17, label %land.rhs, label %for.inc

for.inc:                                          ; preds = %if.end31, %land.rhs, %for.body16
  %indvars.iv.next = add i64 %indvars.iv, 1
  %14 = load i32* %vsize, align 4, !tbaa !3
  %15 = trunc i64 %indvars.iv.next to i32
  %cmp15 = icmp slt i32 %15, %14
  br i1 %cmp15, label %for.body16, label %for.inc36

for.inc36:                                        ; preds = %for.inc, %for.body
  %indvars.iv.next88 = add i64 %indvars.iv87, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next88 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %0
  br i1 %exitcond, label %for.end38, label %for.body

for.end38:                                        ; preds = %for.inc36, %if.end11
  call void @IVfree(i32* %call12) #6
  %16 = load %struct._Tree** %tree, align 8, !tbaa !0
  call void @Tree_setFchSibRoot(%struct._Tree* %16) #6
  ret void
}
