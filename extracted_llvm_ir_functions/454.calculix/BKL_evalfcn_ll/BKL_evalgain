define void @BKL_evalgain(%struct._BKL* %bkl, i32 %dom, i32* %pdeltaS, i32* %pdeltaB, i32* %pdeltaW) #0 {
entry:
  %size = alloca i32, align 4
  %adj = alloca i32*, align 8
  %stats = alloca [3 x i32], align 4
  %cmp = icmp eq %struct._BKL* %bkl, null
  %cmp1 = icmp slt i32 %dom, 0
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %entry
  %ndom = getelementptr inbounds %struct._BKL* %bkl, i64 0, i32 1
  %0 = load i32* %ndom, align 4, !tbaa !3
  %cmp3 = icmp sle i32 %0, %dom
  %cmp5 = icmp eq i32* %pdeltaS, null
  %or.cond110 = or i1 %cmp3, %cmp5
  %cmp7 = icmp eq i32* %pdeltaB, null
  %or.cond111 = or i1 %or.cond110, %cmp7
  %cmp9 = icmp eq i32* %pdeltaW, null
  %or.cond112 = or i1 %or.cond111, %cmp9
  br i1 %or.cond112, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %entry
  %1 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([58 x i8]* @.str1, i64 0, i64 0), %struct._BKL* %bkl, i32 %dom, i32* %pdeltaS, i32* %pdeltaB, i32* %pdeltaW) #4
  call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %lor.lhs.false2
  %colors10 = getelementptr inbounds %struct._BKL* %bkl, i64 0, i32 10
  %2 = load i32** %colors10, align 8, !tbaa !0
  %regwghts11 = getelementptr inbounds %struct._BKL* %bkl, i64 0, i32 12
  %3 = load i32** %regwghts11, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds [3 x i32]* %stats, i64 0, i64 2
  store i32 0, i32* %arrayidx, align 4, !tbaa !3
  %arrayidx12 = getelementptr inbounds [3 x i32]* %stats, i64 0, i64 1
  store i32 0, i32* %arrayidx12, align 4, !tbaa !3
  %arrayidx13 = getelementptr inbounds [3 x i32]* %stats, i64 0, i64 0
  store i32 0, i32* %arrayidx13, align 4, !tbaa !3
  %idxprom = sext i32 %dom to i64
  %arrayidx14 = getelementptr inbounds i32* %2, i64 %idxprom
  %4 = load i32* %arrayidx14, align 4, !tbaa !3
  %cmp15 = icmp eq i32 %4, 1
  %arrayidx18 = getelementptr inbounds i32* %3, i64 %idxprom
  %5 = load i32* %arrayidx18, align 4, !tbaa !3
  %sub = sub nsw i32 0, %5
  br i1 %cmp15, label %if.then16, label %if.else

if.then16:                                        ; preds = %if.end
  store i32 %sub, i32* %arrayidx12, align 4, !tbaa !3
  store i32 %5, i32* %arrayidx, align 4, !tbaa !3
  br label %if.end35

if.else:                                          ; preds = %if.end
  store i32 %sub, i32* %arrayidx, align 4, !tbaa !3
  store i32 %5, i32* %arrayidx12, align 4, !tbaa !3
  br label %if.end35

if.end35:                                         ; preds = %if.else, %if.then16
  %6 = phi i32 [ %sub, %if.else ], [ %5, %if.then16 ]
  %7 = phi i32 [ %5, %if.else ], [ %sub, %if.then16 ]
  %storemerge = phi i32 [ 1, %if.else ], [ 2, %if.then16 ]
  store i32 %storemerge, i32* %arrayidx14, align 4, !tbaa !3
  %bpg = getelementptr inbounds %struct._BKL* %bkl, i64 0, i32 0
  %8 = load %struct._BPG** %bpg, align 8, !tbaa !0
  %graph = getelementptr inbounds %struct._BPG* %8, i64 0, i32 2
  %9 = load %struct._Graph** %graph, align 8, !tbaa !0
  call void @Graph_adjAndSize(%struct._Graph* %9, i32 %dom, i32* %size, i32** %adj) #4
  %10 = load i32* %size, align 4, !tbaa !3
  %cmp36113 = icmp sgt i32 %10, 0
  br i1 %cmp36113, label %for.body, label %for.end

for.body:                                         ; preds = %if.end35, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %if.end35 ]
  %11 = load i32** %adj, align 8, !tbaa !0
  %arrayidx38 = getelementptr inbounds i32* %11, i64 %indvars.iv
  %12 = load i32* %arrayidx38, align 4, !tbaa !3
  %idxprom39 = sext i32 %12 to i64
  %arrayidx40 = getelementptr inbounds i32* %2, i64 %idxprom39
  %13 = load i32* %arrayidx40, align 4, !tbaa !3
  %call41 = call i32 @BKL_segColor(%struct._BKL* %bkl, i32 %12) #4
  %cmp42 = icmp eq i32 %13, %call41
  br i1 %cmp42, label %for.inc, label %if.then43

if.then43:                                        ; preds = %for.body
  %arrayidx45 = getelementptr inbounds i32* %3, i64 %idxprom39
  %14 = load i32* %arrayidx45, align 4, !tbaa !3
  %idxprom46 = sext i32 %13 to i64
  %arrayidx47 = getelementptr inbounds [3 x i32]* %stats, i64 0, i64 %idxprom46
  %15 = load i32* %arrayidx47, align 4, !tbaa !3
  %sub48 = sub nsw i32 %15, %14
  store i32 %sub48, i32* %arrayidx47, align 4, !tbaa !3
  %idxprom51 = sext i32 %call41 to i64
  %arrayidx52 = getelementptr inbounds [3 x i32]* %stats, i64 0, i64 %idxprom51
  %16 = load i32* %arrayidx52, align 4, !tbaa !3
  %add53 = add nsw i32 %16, %14
  store i32 %add53, i32* %arrayidx52, align 4, !tbaa !3
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then43
  %indvars.iv.next = add i64 %indvars.iv, 1
  %17 = load i32* %size, align 4, !tbaa !3
  %18 = trunc i64 %indvars.iv.next to i32
  %cmp36 = icmp slt i32 %18, %17
  br i1 %cmp36, label %for.body, label %for.cond.for.end_crit_edge

for.cond.for.end_crit_edge:                       ; preds = %for.inc
  %.pre = load i32* %arrayidx13, align 4, !tbaa !3
  %.pre115 = load i32* %arrayidx12, align 4, !tbaa !3
  %.pre116 = load i32* %arrayidx, align 4, !tbaa !3
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %if.end35
  %19 = phi i32 [ %.pre116, %for.cond.for.end_crit_edge ], [ %6, %if.end35 ]
  %20 = phi i32 [ %.pre115, %for.cond.for.end_crit_edge ], [ %7, %if.end35 ]
  %21 = phi i32 [ %.pre, %for.cond.for.end_crit_edge ], [ 0, %if.end35 ]
  store i32 %21, i32* %pdeltaS, align 4, !tbaa !3
  store i32 %20, i32* %pdeltaB, align 4, !tbaa !3
  store i32 %19, i32* %pdeltaW, align 4, !tbaa !3
  %22 = load i32* %arrayidx14, align 4, !tbaa !3
  %cmp60 = icmp eq i32 %22, 1
  %. = select i1 %cmp60, i32 2, i32 1
  store i32 %., i32* %arrayidx14, align 4, !tbaa !3
  %ngaineval = getelementptr inbounds %struct._BKL* %bkl, i64 0, i32 9
  %23 = load i32* %ngaineval, align 4, !tbaa !3
  %inc68 = add nsw i32 %23, 1
  store i32 %inc68, i32* %ngaineval, align 4, !tbaa !3
  ret void
}
