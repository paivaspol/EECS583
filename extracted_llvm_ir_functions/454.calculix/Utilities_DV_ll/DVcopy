define void @DVcopy(i32 %size, double* %y, double* %x) #0 {
entry:
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.else

if.else:                                          ; preds = %entry
  %cmp1 = icmp eq double* %y, null
  %cmp2 = icmp eq double* %x, null
  %or.cond = or i1 %cmp1, %cmp2
  br i1 %or.cond, label %if.then3, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.else
  %cmp518 = icmp sgt i32 %size, 0
  br i1 %cmp518, label %for.body, label %return

if.then3:                                         ; preds = %if.else
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([67 x i8]* @.str3, i64 0, i64 0), i32 %size, double* %y, double* %x) #5
  tail call void @exit(i32 -1) #6
  unreachable

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.cond.preheader ]
  %arrayidx = getelementptr inbounds double* %x, i64 %indvars.iv
  %1 = load double* %arrayidx, align 8, !tbaa !3
  %arrayidx7 = getelementptr inbounds double* %y, i64 %indvars.iv
  store double %1, double* %arrayidx7, align 8, !tbaa !3
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %size
  br i1 %exitcond, label %return, label %for.body

return:                                           ; preds = %for.cond.preheader, %for.body, %entry
  ret void
}
