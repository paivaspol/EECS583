define void @DVdot33(i32 %n, double* %row0, double* %row1, double* %row2, double* %col0, double* %col1, double* %col2, double* %sums) #0 {
entry:
  %cmp = icmp eq double* %sums, null
  %cmp1 = icmp eq double* %row0, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp3 = icmp eq double* %row1, null
  %or.cond99 = or i1 %or.cond, %cmp3
  %cmp5 = icmp eq double* %row2, null
  %or.cond100 = or i1 %or.cond99, %cmp5
  %cmp7 = icmp eq double* %col0, null
  %or.cond101 = or i1 %or.cond100, %cmp7
  %cmp9 = icmp eq double* %col1, null
  %or.cond102 = or i1 %or.cond101, %cmp9
  %cmp11 = icmp eq double* %col2, null
  %or.cond103 = or i1 %or.cond102, %cmp11
  br i1 %or.cond103, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %cmp12104 = icmp sgt i32 %n, 0
  br i1 %cmp12104, label %for.body, label %for.end

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([62 x i8]* @.str39, i64 0, i64 0), i32 %n, double* %row0, double* %row1, double* %row2, double* %col0, double* %col1, double* %col2, double* %sums) #5
  tail call void @exit(i32 -1) #6
  unreachable

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.cond.preheader ]
  %s00.0114 = phi double [ %add, %for.body ], [ 0.000000e+00, %for.cond.preheader ]
  %s01.0113 = phi double [ %add24, %for.body ], [ 0.000000e+00, %for.cond.preheader ]
  %s02.0112 = phi double [ %add26, %for.body ], [ 0.000000e+00, %for.cond.preheader ]
  %s10.0111 = phi double [ %add28, %for.body ], [ 0.000000e+00, %for.cond.preheader ]
  %s11.0110 = phi double [ %add30, %for.body ], [ 0.000000e+00, %for.cond.preheader ]
  %s12.0109 = phi double [ %add32, %for.body ], [ 0.000000e+00, %for.cond.preheader ]
  %s22.0107 = phi double [ %add38, %for.body ], [ 0.000000e+00, %for.cond.preheader ]
  %s21.0106 = phi double [ %add36, %for.body ], [ 0.000000e+00, %for.cond.preheader ]
  %s20.0105 = phi double [ %add34, %for.body ], [ 0.000000e+00, %for.cond.preheader ]
  %arrayidx = getelementptr inbounds double* %row0, i64 %indvars.iv
  %1 = load double* %arrayidx, align 8, !tbaa !3
  %arrayidx14 = getelementptr inbounds double* %row1, i64 %indvars.iv
  %2 = load double* %arrayidx14, align 8, !tbaa !3
  %arrayidx16 = getelementptr inbounds double* %row2, i64 %indvars.iv
  %3 = load double* %arrayidx16, align 8, !tbaa !3
  %arrayidx18 = getelementptr inbounds double* %col0, i64 %indvars.iv
  %4 = load double* %arrayidx18, align 8, !tbaa !3
  %arrayidx20 = getelementptr inbounds double* %col1, i64 %indvars.iv
  %5 = load double* %arrayidx20, align 8, !tbaa !3
  %arrayidx22 = getelementptr inbounds double* %col2, i64 %indvars.iv
  %6 = load double* %arrayidx22, align 8, !tbaa !3
  %mul = fmul double %1, %4
  %add = fadd double %s00.0114, %mul
  %mul23 = fmul double %1, %5
  %add24 = fadd double %s01.0113, %mul23
  %mul25 = fmul double %1, %6
  %add26 = fadd double %s02.0112, %mul25
  %mul27 = fmul double %2, %4
  %add28 = fadd double %s10.0111, %mul27
  %mul29 = fmul double %2, %5
  %add30 = fadd double %s11.0110, %mul29
  %mul31 = fmul double %2, %6
  %add32 = fadd double %s12.0109, %mul31
  %mul33 = fmul double %3, %4
  %add34 = fadd double %s20.0105, %mul33
  %mul35 = fmul double %3, %5
  %add36 = fadd double %s21.0106, %mul35
  %mul37 = fmul double %3, %6
  %add38 = fadd double %s22.0107, %mul37
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %n
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %for.cond.preheader
  %s00.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add, %for.body ]
  %s01.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add24, %for.body ]
  %s02.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add26, %for.body ]
  %s10.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add28, %for.body ]
  %s11.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add30, %for.body ]
  %s12.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add32, %for.body ]
  %s22.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add38, %for.body ]
  %s21.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add36, %for.body ]
  %s20.0.lcssa = phi double [ 0.000000e+00, %for.cond.preheader ], [ %add34, %for.body ]
  store double %s00.0.lcssa, double* %sums, align 8, !tbaa !3
  %arrayidx40 = getelementptr inbounds double* %sums, i64 1
  store double %s01.0.lcssa, double* %arrayidx40, align 8, !tbaa !3
  %arrayidx41 = getelementptr inbounds double* %sums, i64 2
  store double %s02.0.lcssa, double* %arrayidx41, align 8, !tbaa !3
  %arrayidx42 = getelementptr inbounds double* %sums, i64 3
  store double %s10.0.lcssa, double* %arrayidx42, align 8, !tbaa !3
  %arrayidx43 = getelementptr inbounds double* %sums, i64 4
  store double %s11.0.lcssa, double* %arrayidx43, align 8, !tbaa !3
  %arrayidx44 = getelementptr inbounds double* %sums, i64 5
  store double %s12.0.lcssa, double* %arrayidx44, align 8, !tbaa !3
  %arrayidx45 = getelementptr inbounds double* %sums, i64 6
  store double %s20.0.lcssa, double* %arrayidx45, align 8, !tbaa !3
  %arrayidx46 = getelementptr inbounds double* %sums, i64 7
  store double %s21.0.lcssa, double* %arrayidx46, align 8, !tbaa !3
  %arrayidx47 = getelementptr inbounds double* %sums, i64 8
  store double %s22.0.lcssa, double* %arrayidx47, align 8, !tbaa !3
  ret void
}
