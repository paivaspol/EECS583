define void @Drand_fillDvector(%struct._Drand* %drand, i32 %size, double* %dvec) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct._Drand* %drand}, i64 0, metadata !39), !dbg !112
  tail call void @llvm.dbg.value(metadata !{i32 %size}, i64 0, metadata !40), !dbg !113
  tail call void @llvm.dbg.value(metadata !{double* %dvec}, i64 0, metadata !41), !dbg !114
  %cmp = icmp eq %struct._Drand* %drand, null, !dbg !115
  %cmp1 = icmp slt i32 %size, 0, !dbg !115
  %or.cond = or i1 %cmp, %cmp1, !dbg !115
  %cmp3 = icmp eq double* %dvec, null, !dbg !115
  %or.cond14 = or i1 %or.cond, %cmp3, !dbg !115
  br i1 %or.cond14, label %if.then, label %for.cond.preheader, !dbg !115

for.cond.preheader:                               ; preds = %entry
  %cmp415 = icmp sgt i32 %size, 0, !dbg !116
  br i1 %cmp415, label %for.body, label %for.end, !dbg !116

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @stderr, align 8, !dbg !118, !tbaa !56
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([57 x i8]* @.str2, i64 0, i64 0), %struct._Drand* %drand, i32 %size, double* %dvec) #4, !dbg !118
  tail call void @exit(i32 -1) #5, !dbg !120
  unreachable, !dbg !120

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.cond.preheader ]
  %call5 = tail call double @Drand_value(%struct._Drand* %drand) #6, !dbg !121
  %arrayidx = getelementptr inbounds double* %dvec, i64 %indvars.iv, !dbg !121
  store double %call5, double* %arrayidx, align 8, !dbg !121, !tbaa !64
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !116
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !116
  %exitcond = icmp eq i32 %lftr.wideiv, %size, !dbg !116
  br i1 %exitcond, label %for.end, label %for.body, !dbg !116

for.end:                                          ; preds = %for.body, %for.cond.preheader
  ret void, !dbg !123
}
