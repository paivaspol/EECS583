define internal fastcc void @inputRow(%struct._InpMtx* %inpmtx, i32 %row, i32 %rowsize, i32* %rowind, double* %rowent) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct._InpMtx* %inpmtx}, i64 0, metadata !273), !dbg !417
  tail call void @llvm.dbg.value(metadata !{i32 %row}, i64 0, metadata !274), !dbg !418
  tail call void @llvm.dbg.value(metadata !{i32 %rowsize}, i64 0, metadata !275), !dbg !419
  tail call void @llvm.dbg.value(metadata !{i32* %rowind}, i64 0, metadata !276), !dbg !420
  tail call void @llvm.dbg.value(metadata !{double* %rowent}, i64 0, metadata !277), !dbg !421
  tail call fastcc void @prepareToAddNewEntries(%struct._InpMtx* %inpmtx, i32 %rowsize) #7, !dbg !422
  %nent1 = getelementptr inbounds %struct._InpMtx* %inpmtx, i64 0, i32 4, !dbg !423
  %0 = load i32* %nent1, align 4, !dbg !423, !tbaa !313
  tail call void @llvm.dbg.value(metadata !{i32 %0}, i64 0, metadata !281), !dbg !423
  %ivec1IV = getelementptr inbounds %struct._InpMtx* %inpmtx, i64 0, i32 6, !dbg !424
  %call = tail call i32* @IV_entries(%struct._IV* %ivec1IV) #5, !dbg !424
  tail call void @llvm.dbg.value(metadata !{i32* %call}, i64 0, metadata !282), !dbg !424
  %ivec2IV = getelementptr inbounds %struct._InpMtx* %inpmtx, i64 0, i32 7, !dbg !425
  %call2 = tail call i32* @IV_entries(%struct._IV* %ivec2IV) #5, !dbg !425
  tail call void @llvm.dbg.value(metadata !{i32* %call2}, i64 0, metadata !283), !dbg !425
  %coordType = getelementptr inbounds %struct._InpMtx* %inpmtx, i64 0, i32 0, !dbg !426
  %1 = load i32* %coordType, align 4, !dbg !426, !tbaa !313
  switch i32 %1, label %if.end24 [
    i32 1, label %if.then
    i32 2, label %if.then7
    i32 3, label %for.cond.preheader
  ], !dbg !426

for.cond.preheader:                               ; preds = %entry
  %cmp16105 = icmp sgt i32 %rowsize, 0, !dbg !427
  br i1 %cmp16105, label %for.body, label %if.end24, !dbg !427

if.then:                                          ; preds = %entry
  %idx.ext = sext i32 %0 to i64, !dbg !430
  %add.ptr = getelementptr inbounds i32* %call, i64 %idx.ext, !dbg !430
  tail call void @IVfill(i32 %rowsize, i32* %add.ptr, i32 %row) #5, !dbg !430
  %add.ptr4 = getelementptr inbounds i32* %call2, i64 %idx.ext, !dbg !432
  tail call void @IVcopy(i32 %rowsize, i32* %add.ptr4, i32* %rowind) #5, !dbg !432
  br label %if.end24, !dbg !433

if.then7:                                         ; preds = %entry
  %idx.ext8 = sext i32 %0 to i64, !dbg !434
  %add.ptr9 = getelementptr inbounds i32* %call2, i64 %idx.ext8, !dbg !434
  tail call void @IVfill(i32 %rowsize, i32* %add.ptr9, i32 %row) #5, !dbg !434
  %add.ptr11 = getelementptr inbounds i32* %call, i64 %idx.ext8, !dbg !436
  tail call void @IVcopy(i32 %rowsize, i32* %add.ptr11, i32* %rowind) #5, !dbg !436
  br label %if.end24, !dbg !437

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.cond.preheader ]
  %arrayidx = getelementptr inbounds i32* %rowind, i64 %indvars.iv, !dbg !438
  %2 = load i32* %arrayidx, align 4, !dbg !438, !tbaa !313
  tail call void @llvm.dbg.value(metadata !{i32 %2}, i64 0, metadata !278), !dbg !438
  %cmp17 = icmp sge i32 %2, %row, !dbg !440
  %cond = select i1 %cmp17, i32 %row, i32 %2, !dbg !440
  %arrayidx19 = getelementptr inbounds i32* %call, i64 %indvars.iv, !dbg !440
  store i32 %cond, i32* %arrayidx19, align 4, !dbg !440, !tbaa !313
  %sub = sub nsw i32 %2, %row, !dbg !441
  %arrayidx21 = getelementptr inbounds i32* %call2, i64 %indvars.iv, !dbg !441
  store i32 %sub, i32* %arrayidx21, align 4, !dbg !441, !tbaa !313
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !427
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !427
  %exitcond = icmp eq i32 %lftr.wideiv, %rowsize, !dbg !427
  br i1 %exitcond, label %if.end24, label %for.body, !dbg !427

if.end24:                                         ; preds = %for.cond.preheader, %for.body, %entry, %if.then7, %if.then
  %add = add nsw i32 %0, %rowsize, !dbg !442
  tail call void @IV_setSize(%struct._IV* %ivec1IV, i32 %add) #5, !dbg !442
  tail call void @IV_setSize(%struct._IV* %ivec2IV, i32 %add) #5, !dbg !443
  %inputMode = getelementptr inbounds %struct._InpMtx* %inpmtx, i64 0, i32 2, !dbg !444
  %3 = load i32* %inputMode, align 4, !dbg !444, !tbaa !313
  switch i32 %3, label %if.end48 [
    i32 1, label %if.then29
    i32 2, label %if.then38
  ], !dbg !444

if.then29:                                        ; preds = %if.end24
  %dvecDV = getelementptr inbounds %struct._InpMtx* %inpmtx, i64 0, i32 8, !dbg !445
  %call30 = tail call double* @DV_entries(%struct._DV* %dvecDV) #5, !dbg !445
  tail call void @llvm.dbg.value(metadata !{double* %call30}, i64 0, metadata !284), !dbg !445
  %idx.ext31 = sext i32 %0 to i64, !dbg !446
  %add.ptr32 = getelementptr inbounds double* %call30, i64 %idx.ext31, !dbg !446
  tail call void @DVcopy(i32 %rowsize, double* %add.ptr32, double* %rowent) #5, !dbg !446
  tail call void @DV_setSize(%struct._DV* %dvecDV, i32 %add) #5, !dbg !447
  br label %if.end48, !dbg !448

if.then38:                                        ; preds = %if.end24
  %dvecDV40 = getelementptr inbounds %struct._InpMtx* %inpmtx, i64 0, i32 8, !dbg !449
  %call41 = tail call double* @DV_entries(%struct._DV* %dvecDV40) #5, !dbg !449
  tail call void @llvm.dbg.value(metadata !{double* %call41}, i64 0, metadata !286), !dbg !449
  %mul = shl nsw i32 %0, 1, !dbg !450
  %idx.ext42 = sext i32 %mul to i64, !dbg !450
  %add.ptr43 = getelementptr inbounds double* %call41, i64 %idx.ext42, !dbg !450
  tail call void @ZVcopy(i32 %rowsize, double* %add.ptr43, double* %rowent) #5, !dbg !450
  %mul46 = shl nsw i32 %add, 1, !dbg !451
  tail call void @DV_setSize(%struct._DV* %dvecDV40, i32 %mul46) #5, !dbg !451
  br label %if.end48, !dbg !452

if.end48:                                         ; preds = %if.end24, %if.then38, %if.then29
  %storageMode = getelementptr inbounds %struct._InpMtx* %inpmtx, i64 0, i32 1, !dbg !453
  store i32 1, i32* %storageMode, align 4, !dbg !453, !tbaa !313
  %4 = load i32* %nent1, align 4, !dbg !454, !tbaa !313
  %add50 = add nsw i32 %4, %rowsize, !dbg !454
  store i32 %add50, i32* %nent1, align 4, !dbg !454, !tbaa !313
  ret void, !dbg !455
}
