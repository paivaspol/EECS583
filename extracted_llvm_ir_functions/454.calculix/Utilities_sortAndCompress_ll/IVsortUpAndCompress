define i32 @IVsortUpAndCompress(i32 %n, i32* %ivec) #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  %cmp1 = icmp eq i32* %ivec, null
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([72 x i8]* @.str, i64 0, i64 0), i32 %n, i32* %ivec, i32 %n, i32* %ivec) #4
  tail call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %entry
  %cmp2 = icmp eq i32 %n, 0
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end
  tail call void @IVqsortUp(i32 %n, i32* %ivec) #4
  %cmp531 = icmp sgt i32 %n, 1
  br i1 %cmp531, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %if.end4
  %1 = load i32* %ivec, align 4, !tbaa !3
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv = phi i64 [ 1, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %key.034 = phi i32 [ %1, %for.body.lr.ph ], [ %key.1, %for.inc ]
  %first.032 = phi i32 [ 1, %for.body.lr.ph ], [ %first.1, %for.inc ]
  %arrayidx6 = getelementptr inbounds i32* %ivec, i64 %indvars.iv
  %2 = load i32* %arrayidx6, align 4, !tbaa !3
  %cmp7 = icmp eq i32 %key.034, %2
  br i1 %cmp7, label %for.inc, label %if.then8

if.then8:                                         ; preds = %for.body
  %inc = add nsw i32 %first.032, 1
  %idxprom11 = sext i32 %first.032 to i64
  %arrayidx12 = getelementptr inbounds i32* %ivec, i64 %idxprom11
  store i32 %2, i32* %arrayidx12, align 4, !tbaa !3
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then8
  %first.1 = phi i32 [ %inc, %if.then8 ], [ %first.032, %for.body ]
  %key.1 = phi i32 [ %2, %if.then8 ], [ %key.034, %for.body ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %n
  br i1 %exitcond, label %return, label %for.body

return:                                           ; preds = %if.end4, %for.inc, %if.end
  %retval.0 = phi i32 [ 0, %if.end ], [ 1, %if.end4 ], [ %first.1, %for.inc ]
  ret i32 %retval.0
}
