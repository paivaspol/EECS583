define i32 @IV2sortUpAndCompress(i32 %n, i32* %ivec1, i32* %ivec2) #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  %cmp1 = icmp eq i32* %ivec1, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp3 = icmp eq i32* %ivec2, null
  %or.cond78 = or i1 %or.cond, %cmp3
  br i1 %or.cond78, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([89 x i8]* @.str3, i64 0, i64 0), i32 %n, i32* %ivec1, i32* %ivec2, i32 %n, i32* %ivec1, i32* %ivec2) #4
  tail call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %entry
  %cmp4 = icmp eq i32 %n, 0
  br i1 %cmp4, label %return, label %if.end6

if.end6:                                          ; preds = %if.end
  tail call void @IV2qsortUp(i32 %n, i32* %ivec1, i32* %ivec2) #4
  %1 = load i32* %ivec1, align 4, !tbaa !3
  %cmp779 = icmp sgt i32 %n, 1
  br i1 %cmp779, label %for.body, label %for.end

for.body:                                         ; preds = %if.end6, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 1, %if.end6 ]
  %start.083 = phi i32 [ %start.1, %for.inc ], [ 0, %if.end6 ]
  %key.082 = phi i32 [ %key.1, %for.inc ], [ %1, %if.end6 ]
  %first.080 = phi i32 [ %first.1, %for.inc ], [ 0, %if.end6 ]
  %arrayidx8 = getelementptr inbounds i32* %ivec1, i64 %indvars.iv
  %2 = load i32* %arrayidx8, align 4, !tbaa !3
  %cmp9 = icmp eq i32 %key.082, %2
  br i1 %cmp9, label %for.inc, label %if.then10

if.then10:                                        ; preds = %for.body
  %3 = trunc i64 %indvars.iv to i32
  %sub = sub nsw i32 %3, %start.083
  %idx.ext = sext i32 %start.083 to i64
  %add.ptr = getelementptr inbounds i32* %ivec2, i64 %idx.ext
  %call11 = tail call i32 @IVsortUpAndCompress(i32 %sub, i32* %add.ptr) #6
  %idx.ext12 = sext i32 %first.080 to i64
  %add.ptr13 = getelementptr inbounds i32* %ivec1, i64 %idx.ext12
  tail call void @IVfill(i32 %call11, i32* %add.ptr13, i32 %key.082) #4
  %add.ptr15 = getelementptr inbounds i32* %ivec2, i64 %idx.ext12
  tail call void @IVcopy(i32 %call11, i32* %add.ptr15, i32* %add.ptr) #4
  %add = add nsw i32 %call11, %first.080
  %4 = load i32* %arrayidx8, align 4, !tbaa !3
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then10
  %first.1 = phi i32 [ %add, %if.then10 ], [ %first.080, %for.body ]
  %key.1 = phi i32 [ %4, %if.then10 ], [ %key.082, %for.body ]
  %start.1 = phi i32 [ %3, %if.then10 ], [ %start.083, %for.body ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %n
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %if.end6
  %start.0.lcssa = phi i32 [ 0, %if.end6 ], [ %start.1, %for.inc ]
  %key.0.lcssa = phi i32 [ %1, %if.end6 ], [ %key.1, %for.inc ]
  %first.0.lcssa = phi i32 [ 0, %if.end6 ], [ %first.1, %for.inc ]
  %sub21 = sub nsw i32 %n, %start.0.lcssa
  %idx.ext22 = sext i32 %start.0.lcssa to i64
  %add.ptr23 = getelementptr inbounds i32* %ivec2, i64 %idx.ext22
  %call24 = tail call i32 @IVsortUpAndCompress(i32 %sub21, i32* %add.ptr23) #6
  %idx.ext25 = sext i32 %first.0.lcssa to i64
  %add.ptr26 = getelementptr inbounds i32* %ivec1, i64 %idx.ext25
  tail call void @IVfill(i32 %call24, i32* %add.ptr26, i32 %key.0.lcssa) #4
  %add.ptr28 = getelementptr inbounds i32* %ivec2, i64 %idx.ext25
  tail call void @IVcopy(i32 %call24, i32* %add.ptr28, i32* %add.ptr23) #4
  %add31 = add nsw i32 %call24, %first.0.lcssa
  br label %return

return:                                           ; preds = %if.end, %for.end
  %retval.0 = phi i32 [ %add31, %for.end ], [ 0, %if.end ]
  ret i32 %retval.0
}
