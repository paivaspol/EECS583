define i32 @ETree_readFromBinaryFile(%struct._ETree* %etree, %struct._IO_FILE* %fp) #0 {
entry:
  %itemp = alloca [2 x i32], align 4
  call void @llvm.dbg.value(metadata !{%struct._ETree* %etree}, i64 0, metadata !117), !dbg !203
  call void @llvm.dbg.value(metadata !{%struct._IO_FILE* %fp}, i64 0, metadata !118), !dbg !204
  call void @llvm.dbg.declare(metadata !{[2 x i32]* %itemp}, metadata !120), !dbg !205
  %cmp = icmp eq %struct._ETree* %etree, null, !dbg !206
  %cmp1 = icmp eq %struct._IO_FILE* %fp, null, !dbg !206
  %or.cond = or i1 %cmp, %cmp1, !dbg !206
  br i1 %or.cond, label %if.then, label %if.end, !dbg !206

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @stderr, align 8, !dbg !207, !tbaa !167
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([61 x i8]* @.str7, i64 0, i64 0), %struct._ETree* %etree, %struct._IO_FILE* %fp) #6, !dbg !207
  br label %return, !dbg !209

if.end:                                           ; preds = %entry
  call void @ETree_clearData(%struct._ETree* %etree) #6, !dbg !210
  call void @ETree_init1(%struct._ETree* %etree, i32 0, i32 0) #6, !dbg !211
  %1 = bitcast [2 x i32]* %itemp to i8*, !dbg !212
  %call2 = call i64 @fread(i8* %1, i64 4, i64 2, %struct._IO_FILE* %fp) #6, !dbg !212
  %conv = trunc i64 %call2 to i32, !dbg !212
  call void @llvm.dbg.value(metadata !{i32 %conv}, i64 0, metadata !119), !dbg !212
  %cmp3 = icmp eq i32 %conv, 2, !dbg !212
  br i1 %cmp3, label %if.end7, label %if.then5, !dbg !212

if.then5:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE** @stderr, align 8, !dbg !213, !tbaa !167
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([76 x i8]* @.str8, i64 0, i64 0), %struct._ETree* %etree, %struct._IO_FILE* %fp, i32 %conv, i32 2) #6, !dbg !213
  br label %return, !dbg !215

if.end7:                                          ; preds = %if.end
  %arrayidx = getelementptr inbounds [2 x i32]* %itemp, i64 0, i64 0, !dbg !216
  %3 = load i32* %arrayidx, align 4, !dbg !216, !tbaa !217
  %nfront = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 0, !dbg !216
  store i32 %3, i32* %nfront, align 4, !dbg !216, !tbaa !217
  %arrayidx8 = getelementptr inbounds [2 x i32]* %itemp, i64 0, i64 1, !dbg !218
  %4 = load i32* %arrayidx8, align 4, !dbg !218, !tbaa !217
  %nvtx = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 1, !dbg !218
  store i32 %4, i32* %nvtx, align 4, !dbg !218, !tbaa !217
  %tree = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 2, !dbg !219
  %5 = load %struct._Tree** %tree, align 8, !dbg !219, !tbaa !167
  %call9 = call i32 @Tree_readFromBinaryFile(%struct._Tree* %5, %struct._IO_FILE* %fp) #6, !dbg !219
  %nodwghtsIV = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 3, !dbg !220
  %6 = load %struct._IV** %nodwghtsIV, align 8, !dbg !220, !tbaa !167
  %call10 = call i32 @IV_readFromBinaryFile(%struct._IV* %6, %struct._IO_FILE* %fp) #6, !dbg !220
  %bndwghtsIV = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 4, !dbg !221
  %7 = load %struct._IV** %bndwghtsIV, align 8, !dbg !221, !tbaa !167
  %call11 = call i32 @IV_readFromBinaryFile(%struct._IV* %7, %struct._IO_FILE* %fp) #6, !dbg !221
  %vtxToFrontIV = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 5, !dbg !222
  %8 = load %struct._IV** %vtxToFrontIV, align 8, !dbg !222, !tbaa !167
  %call12 = call i32 @IV_readFromBinaryFile(%struct._IV* %8, %struct._IO_FILE* %fp) #6, !dbg !222
  br label %return, !dbg !223

return:                                           ; preds = %if.end7, %if.then5, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 0, %if.then5 ], [ 1, %if.end7 ]
  ret i32 %retval.0, !dbg !223
}
