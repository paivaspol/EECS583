define i32 @ETree_writeToBinaryFile(%struct._ETree* %etree, %struct._IO_FILE* %fp) #0 {
entry:
  %itemp = alloca [2 x i32], align 4
  %cmp = icmp eq %struct._ETree* %etree, null
  %cmp1 = icmp eq %struct._IO_FILE* %fp, null
  %or.cond = or i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then, label %lor.lhs.false2

lor.lhs.false2:                                   ; preds = %entry
  %tree = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 2
  %0 = load %struct._Tree** %tree, align 8, !tbaa !0
  %cmp3 = icmp eq %struct._Tree* %0, null
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false2, %entry
  %1 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([60 x i8]* @.str21, i64 0, i64 0), %struct._ETree* %etree, %struct._IO_FILE* %fp) #5
  call void @exit(i32 -1) #8
  unreachable

if.end:                                           ; preds = %lor.lhs.false2
  %nfront = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 0
  %2 = load i32* %nfront, align 4, !tbaa !3
  %arrayidx = getelementptr inbounds [2 x i32]* %itemp, i64 0, i64 0
  store i32 %2, i32* %arrayidx, align 4, !tbaa !3
  %nvtx = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 1
  %3 = load i32* %nvtx, align 4, !tbaa !3
  %arrayidx4 = getelementptr inbounds [2 x i32]* %itemp, i64 0, i64 1
  store i32 %3, i32* %arrayidx4, align 4, !tbaa !3
  %4 = bitcast [2 x i32]* %itemp to i8*
  %call5 = call i64 @fwrite(i8* %4, i64 4, i64 2, %struct._IO_FILE* %fp) #5
  %conv = trunc i64 %call5 to i32
  %cmp6 = icmp eq i32 %conv, 2
  br i1 %cmp6, label %if.end10, label %if.then8

if.then8:                                         ; preds = %if.end
  %5 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([74 x i8]* @.str22, i64 0, i64 0), %struct._ETree* %etree, %struct._IO_FILE* %fp, i32 %conv, i32 2) #5
  br label %return

if.end10:                                         ; preds = %if.end
  %6 = load %struct._Tree** %tree, align 8, !tbaa !0
  %call12 = call i32 @Tree_writeToBinaryFile(%struct._Tree* %6, %struct._IO_FILE* %fp) #5
  %cmp13 = icmp slt i32 %call12, 0
  br i1 %cmp13, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end10
  %7 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([92 x i8]* @.str23, i64 0, i64 0), %struct._ETree* %etree, %struct._IO_FILE* %fp, i32 %call12) #5
  br label %return

if.end17:                                         ; preds = %if.end10
  %nodwghtsIV = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 3
  %8 = load %struct._IV** %nodwghtsIV, align 8, !tbaa !0
  %call18 = call i32 @IV_writeToBinaryFile(%struct._IV* %8, %struct._IO_FILE* %fp) #5
  %cmp19 = icmp slt i32 %call18, 0
  br i1 %cmp19, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end17
  %9 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([98 x i8]* @.str24, i64 0, i64 0), %struct._ETree* %etree, %struct._IO_FILE* %fp, i32 %call18) #5
  br label %return

if.end23:                                         ; preds = %if.end17
  %bndwghtsIV = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 4
  %10 = load %struct._IV** %bndwghtsIV, align 8, !tbaa !0
  %call24 = call i32 @IV_writeToBinaryFile(%struct._IV* %10, %struct._IO_FILE* %fp) #5
  %cmp25 = icmp slt i32 %call24, 0
  br i1 %cmp25, label %if.then27, label %if.end29

if.then27:                                        ; preds = %if.end23
  %11 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([98 x i8]* @.str25, i64 0, i64 0), %struct._ETree* %etree, %struct._IO_FILE* %fp, i32 %call24) #5
  br label %return

if.end29:                                         ; preds = %if.end23
  %vtxToFrontIV = getelementptr inbounds %struct._ETree* %etree, i64 0, i32 5
  %12 = load %struct._IV** %vtxToFrontIV, align 8, !tbaa !0
  %call30 = call i32 @IV_writeToBinaryFile(%struct._IV* %12, %struct._IO_FILE* %fp) #5
  %cmp31 = icmp slt i32 %call30, 0
  br i1 %cmp31, label %if.then33, label %return

if.then33:                                        ; preds = %if.end29
  %13 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([100 x i8]* @.str26, i64 0, i64 0), %struct._ETree* %etree, %struct._IO_FILE* %fp, i32 %call30) #5
  br label %return

return:                                           ; preds = %if.end29, %if.then33, %if.then27, %if.then21, %if.then15, %if.then8
  %retval.0 = phi i32 [ 0, %if.then8 ], [ 0, %if.then15 ], [ 0, %if.then21 ], [ 0, %if.then27 ], [ 0, %if.then33 ], [ 1, %if.end29 ]
  ret i32 %retval.0
}
