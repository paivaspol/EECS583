define void @DenseMtx_addVectorIntoRow(%struct._DenseMtx* %mtx, i32 %irow, double* %vec) #0 {
entry:
  %nrow = alloca i32, align 4
  %ncol = alloca i32, align 4
  %colind = alloca i32*, align 8
  %rowind = alloca i32*, align 8
  %cmp = icmp eq %struct._DenseMtx* %mtx, null
  %cmp1 = icmp slt i32 %irow, 0
  %or.cond = or i1 %cmp, %cmp1
  %cmp3 = icmp eq double* %vec, null
  %or.cond82 = or i1 %or.cond, %cmp3
  br i1 %or.cond82, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([82 x i8]* @.str17, i64 0, i64 0), %struct._DenseMtx* %mtx, i32 %irow, double* %vec) #6
  call void @exit(i32 -1) #7
  unreachable

if.end:                                           ; preds = %entry
  call void @DenseMtx_rowIndices(%struct._DenseMtx* %mtx, i32* %nrow, i32** %rowind) #6
  %1 = load i32* %nrow, align 4, !tbaa !3
  %cmp4 = icmp sgt i32 %1, %irow
  br i1 %cmp4, label %if.end7, label %if.then5

if.then5:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([68 x i8]* @.str18, i64 0, i64 0), i32 %irow, i32 %1) #6
  call void @exit(i32 -1) #7
  unreachable

if.end7:                                          ; preds = %if.end
  call void @DenseMtx_columnIndices(%struct._DenseMtx* %mtx, i32* %ncol, i32** %colind) #6
  %call8 = call i32 @DenseMtx_rowIncrement(%struct._DenseMtx* %mtx) #6
  %call9 = call i32 @DenseMtx_columnIncrement(%struct._DenseMtx* %mtx) #6
  %call10 = call double* @DenseMtx_entries(%struct._DenseMtx* %mtx) #6
  %type = getelementptr inbounds %struct._DenseMtx* %mtx, i64 0, i32 0
  %3 = load i32* %type, align 4, !tbaa !3
  switch i32 %3, label %if.end47 [
    i32 1, label %if.then12
    i32 2, label %if.then20
  ]

if.then12:                                        ; preds = %if.end7
  %4 = load i32* %ncol, align 4, !tbaa !3
  %cmp1383 = icmp sgt i32 %4, 0
  br i1 %cmp1383, label %for.body.lr.ph, label %if.end47

for.body.lr.ph:                                   ; preds = %if.then12
  %mul = mul nsw i32 %call8, %irow
  %5 = sext i32 %mul to i64
  %6 = sext i32 %call9 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv92 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next93, %for.body ]
  %indvars.iv = phi i64 [ %5, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %jj.085 = phi i32 [ 0, %for.body.lr.ph ], [ %inc16, %for.body ]
  %arrayidx = getelementptr inbounds double* %vec, i64 %indvars.iv92
  %7 = load double* %arrayidx, align 8, !tbaa !4
  %arrayidx15 = getelementptr inbounds double* %call10, i64 %indvars.iv
  %8 = load double* %arrayidx15, align 8, !tbaa !4
  %add = fadd double %7, %8
  store double %add, double* %arrayidx15, align 8, !tbaa !4
  %inc16 = add nsw i32 %jj.085, 1
  %indvars.iv.next93 = add i64 %indvars.iv92, 1
  %indvars.iv.next = add i64 %indvars.iv, %6
  %cmp13 = icmp slt i32 %inc16, %4
  br i1 %cmp13, label %for.body, label %if.end47

if.then20:                                        ; preds = %if.end7
  %9 = load i32* %ncol, align 4, !tbaa !3
  %cmp2388 = icmp sgt i32 %9, 0
  br i1 %cmp2388, label %for.body24.lr.ph, label %if.end47

for.body24.lr.ph:                                 ; preds = %if.then20
  %mul21 = mul nsw i32 %call8, %irow
  %10 = sext i32 %mul21 to i64
  %11 = sext i32 %call9 to i64
  br label %for.body24

for.body24:                                       ; preds = %for.body24.lr.ph, %for.body24
  %indvars.iv96 = phi i64 [ 0, %for.body24.lr.ph ], [ %indvars.iv.next97, %for.body24 ]
  %indvars.iv94 = phi i64 [ %10, %for.body24.lr.ph ], [ %indvars.iv.next95, %for.body24 ]
  %jj.190 = phi i32 [ 0, %for.body24.lr.ph ], [ %inc43, %for.body24 ]
  %12 = trunc i64 %indvars.iv96 to i32
  %mul25 = shl nsw i32 %12, 1
  %idxprom26 = sext i32 %mul25 to i64
  %arrayidx27 = getelementptr inbounds double* %vec, i64 %idxprom26
  %13 = load double* %arrayidx27, align 8, !tbaa !4
  %14 = trunc i64 %indvars.iv94 to i32
  %mul28 = shl nsw i32 %14, 1
  %idxprom29 = sext i32 %mul28 to i64
  %arrayidx30 = getelementptr inbounds double* %call10, i64 %idxprom29
  %15 = load double* %arrayidx30, align 8, !tbaa !4
  %add31 = fadd double %13, %15
  store double %add31, double* %arrayidx30, align 8, !tbaa !4
  %add3380 = or i32 %mul25, 1
  %idxprom34 = sext i32 %add3380 to i64
  %arrayidx35 = getelementptr inbounds double* %vec, i64 %idxprom34
  %16 = load double* %arrayidx35, align 8, !tbaa !4
  %add3781 = or i32 %mul28, 1
  %idxprom38 = sext i32 %add3781 to i64
  %arrayidx39 = getelementptr inbounds double* %call10, i64 %idxprom38
  %17 = load double* %arrayidx39, align 8, !tbaa !4
  %add40 = fadd double %16, %17
  store double %add40, double* %arrayidx39, align 8, !tbaa !4
  %inc43 = add nsw i32 %jj.190, 1
  %indvars.iv.next97 = add i64 %indvars.iv96, 1
  %indvars.iv.next95 = add i64 %indvars.iv94, %11
  %cmp23 = icmp slt i32 %inc43, %9
  br i1 %cmp23, label %for.body24, label %if.end47

if.end47:                                         ; preds = %if.then20, %for.body24, %if.then12, %for.body, %if.end7
  ret void
}
