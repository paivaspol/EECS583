define void @IVZVisortUp(i32 %n, i32* nocapture %ivec, double* nocapture %zvec) #1 {
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !122, metadata !512), !dbg !767
  tail call void @llvm.dbg.value(metadata i32* %ivec, i64 0, metadata !123, metadata !512), !dbg !768
  tail call void @llvm.dbg.value(metadata double* %zvec, i64 0, metadata !124, metadata !512), !dbg !769
  tail call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !126, metadata !512), !dbg !770
  %1 = icmp sgt i32 %n, 1, !dbg !771
  br i1 %1, label %.preheader.lr.ph, label %._crit_edge, !dbg !774

.preheader.lr.ph:                                 ; preds = %0
  %2 = add i32 %n, -1, !dbg !774
  br label %.lr.ph, !dbg !774

.lr.ph:                                           ; preds = %.preheader.lr.ph, %.critedge
  %indvars.iv = phi i64 [ 1, %.preheader.lr.ph ], [ %indvars.iv.next, %.critedge ]
  %.phi.trans.insert = getelementptr inbounds i32* %ivec, i64 %indvars.iv
  %.pre = load i32* %.phi.trans.insert, align 4, !dbg !775, !tbaa !525
  br label %3, !dbg !779

; <label>:3                                       ; preds = %.lr.ph, %7
  %indvars.iv4 = phi i64 [ %indvars.iv, %.lr.ph ], [ %indvars.iv.next5, %7 ]
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, -1, !dbg !779
  %4 = getelementptr inbounds i32* %ivec, i64 %indvars.iv.next5, !dbg !780
  %5 = load i32* %4, align 4, !dbg !780, !tbaa !525
  %6 = icmp sgt i32 %5, %.pre, !dbg !781
  br i1 %6, label %7, label %.critedge, !dbg !782

; <label>:7                                       ; preds = %3
  %8 = getelementptr inbounds i32* %ivec, i64 %indvars.iv4, !dbg !775
  tail call void @llvm.dbg.value(metadata i32 %5, i64 0, metadata !127, metadata !512), !dbg !783
  store i32 %.pre, i32* %4, align 4, !dbg !784, !tbaa !525
  store i32 %5, i32* %8, align 4, !dbg !784, !tbaa !525
  %9 = trunc i64 %indvars.iv.next5 to i32, !dbg !784
  %10 = shl nsw i32 %9, 1, !dbg !784
  %11 = sext i32 %10 to i64, !dbg !784
  %12 = getelementptr inbounds double* %zvec, i64 %11, !dbg !784
  %13 = bitcast double* %12 to i64*, !dbg !784
  %14 = load i64* %13, align 8, !dbg !784, !tbaa !565
  %15 = trunc i64 %indvars.iv4 to i32, !dbg !784
  %16 = shl nsw i32 %15, 1, !dbg !784
  %17 = sext i32 %16 to i64, !dbg !784
  %18 = getelementptr inbounds double* %zvec, i64 %17, !dbg !784
  %19 = bitcast double* %18 to i64*, !dbg !784
  %20 = load i64* %19, align 8, !dbg !784, !tbaa !565
  store i64 %20, i64* %13, align 8, !dbg !784, !tbaa !565
  store i64 %14, i64* %19, align 8, !dbg !784, !tbaa !565
  %21 = or i32 %10, 1, !dbg !784
  %22 = sext i32 %21 to i64, !dbg !784
  %23 = getelementptr inbounds double* %zvec, i64 %22, !dbg !784
  %24 = bitcast double* %23 to i64*, !dbg !784
  %25 = load i64* %24, align 8, !dbg !784, !tbaa !565
  %26 = or i32 %16, 1, !dbg !784
  %27 = sext i32 %26 to i64, !dbg !784
  %28 = getelementptr inbounds double* %zvec, i64 %27, !dbg !784
  %29 = bitcast double* %28 to i64*, !dbg !784
  %30 = load i64* %29, align 8, !dbg !784, !tbaa !565
  store i64 %30, i64* %24, align 8, !dbg !784, !tbaa !565
  store i64 %25, i64* %29, align 8, !dbg !784, !tbaa !565
  %31 = icmp sgt i64 %indvars.iv4, 1, !dbg !787
  br i1 %31, label %3, label %.critedge, !dbg !779

.critedge:                                        ; preds = %7, %3
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !774
  %lftr.wideiv = trunc i64 %indvars.iv to i32, !dbg !774
  %exitcond = icmp eq i32 %lftr.wideiv, %2, !dbg !774
  br i1 %exitcond, label %._crit_edge, label %.lr.ph, !dbg !774

._crit_edge:                                      ; preds = %.critedge, %0
  ret void, !dbg !788
}
