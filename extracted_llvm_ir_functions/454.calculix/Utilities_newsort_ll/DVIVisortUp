define void @DVIVisortUp(i32 %n, double* nocapture %dvec, i32* nocapture %ivec) #1 {
  tail call void @llvm.dbg.value(metadata i32 %n, i64 0, metadata !196, metadata !512), !dbg !943
  tail call void @llvm.dbg.value(metadata double* %dvec, i64 0, metadata !197, metadata !512), !dbg !944
  tail call void @llvm.dbg.value(metadata i32* %ivec, i64 0, metadata !198, metadata !512), !dbg !945
  tail call void @llvm.dbg.value(metadata i32 1, i64 0, metadata !200, metadata !512), !dbg !946
  %1 = icmp sgt i32 %n, 1, !dbg !947
  br i1 %1, label %.preheader.lr.ph, label %._crit_edge, !dbg !950

.preheader.lr.ph:                                 ; preds = %0
  %2 = add i32 %n, -1, !dbg !950
  br label %.lr.ph, !dbg !950

.lr.ph:                                           ; preds = %.preheader.lr.ph, %.critedge
  %indvars.iv = phi i64 [ 1, %.preheader.lr.ph ], [ %indvars.iv.next, %.critedge ]
  %.phi.trans.insert = getelementptr inbounds double* %dvec, i64 %indvars.iv
  %.pre = load double* %.phi.trans.insert, align 8, !dbg !951, !tbaa !565
  br label %3, !dbg !955

; <label>:3                                       ; preds = %.lr.ph, %8
  %4 = phi double [ %.pre, %.lr.ph ], [ %18, %8 ]
  %indvars.iv4 = phi i64 [ %indvars.iv, %.lr.ph ], [ %indvars.iv.next5, %8 ]
  %indvars.iv.next5 = add nsw i64 %indvars.iv4, -1, !dbg !955
  %5 = getelementptr inbounds double* %dvec, i64 %indvars.iv.next5, !dbg !956
  %6 = load double* %5, align 8, !dbg !956, !tbaa !565
  %7 = fcmp ogt double %6, %4, !dbg !957
  br i1 %7, label %8, label %.critedge, !dbg !958

; <label>:8                                       ; preds = %3
  %9 = getelementptr inbounds double* %dvec, i64 %indvars.iv4, !dbg !951
  %10 = getelementptr inbounds i32* %ivec, i64 %indvars.iv.next5, !dbg !959
  %11 = load i32* %10, align 4, !dbg !959, !tbaa !525
  tail call void @llvm.dbg.value(metadata i32 %11, i64 0, metadata !201, metadata !512), !dbg !962
  %12 = getelementptr inbounds i32* %ivec, i64 %indvars.iv4, !dbg !959
  %13 = load i32* %12, align 4, !dbg !959, !tbaa !525
  store i32 %13, i32* %10, align 4, !dbg !959, !tbaa !525
  store i32 %11, i32* %12, align 4, !dbg !959, !tbaa !525
  %14 = bitcast double* %5 to i64*, !dbg !959
  %15 = bitcast double* %9 to i64*, !dbg !959
  %16 = load i64* %15, align 8, !dbg !959, !tbaa !565
  store i64 %16, i64* %14, align 8, !dbg !959, !tbaa !565
  store double %6, double* %9, align 8, !dbg !959, !tbaa !565
  %17 = icmp sgt i64 %indvars.iv4, 1, !dbg !963
  %18 = bitcast i64 %16 to double
  br i1 %17, label %3, label %.critedge, !dbg !955

.critedge:                                        ; preds = %8, %3
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !950
  %lftr.wideiv = trunc i64 %indvars.iv to i32, !dbg !950
  %exitcond = icmp eq i32 %lftr.wideiv, %2, !dbg !950
  br i1 %exitcond, label %._crit_edge, label %.lr.ph, !dbg !950

._crit_edge:                                      ; preds = %.critedge, %0
  ret void, !dbg !964
}
