define double @Chv_frobNorm(%struct._Chv* %chv) #0 {
entry:
  %cmp = icmp eq %struct._Chv* %chv, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([46 x i8]* @.str5, i64 0, i64 0), %struct._Chv* null) #4
  tail call void @exit(i32 -1) #5
  unreachable

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct._Chv* %chv, i64 0, i32 4
  %1 = load i32* %type, align 4, !tbaa !3
  switch i32 %1, label %if.else31 [
    i32 1, label %if.then2
    i32 2, label %if.then8
  ]

if.then2:                                         ; preds = %if.end
  %call3 = tail call i32 @Chv_nent(%struct._Chv* %chv) #4
  %call4 = tail call double* @Chv_entries(%struct._Chv* %chv) #4
  %cmp557 = icmp sgt i32 %call3, 0
  br i1 %cmp557, label %for.body, label %if.end35

for.body:                                         ; preds = %if.then2, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then2 ]
  %sum.059 = phi double [ %add, %for.body ], [ 0.000000e+00, %if.then2 ]
  %arrayidx = getelementptr inbounds double* %call4, i64 %indvars.iv
  %2 = load double* %arrayidx, align 8, !tbaa !4
  %mul = fmul double %2, %2
  %add = fadd double %sum.059, %mul
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %call3
  br i1 %exitcond, label %if.end35, label %for.body

if.then8:                                         ; preds = %if.end
  %call12 = tail call i32 @Chv_nent(%struct._Chv* %chv) #4
  %call13 = tail call double* @Chv_entries(%struct._Chv* %chv) #4
  %cmp1561 = icmp sgt i32 %call12, 0
  br i1 %cmp1561, label %for.body16, label %if.end35

for.body16:                                       ; preds = %if.then8, %for.body16
  %indvars.iv65 = phi i64 [ %indvars.iv.next66, %for.body16 ], [ 0, %if.then8 ]
  %sum.163 = phi double [ %add27, %for.body16 ], [ 0.000000e+00, %if.then8 ]
  %3 = trunc i64 %indvars.iv65 to i32
  %mul17 = shl nsw i32 %3, 1
  %idxprom18 = sext i32 %mul17 to i64
  %arrayidx19 = getelementptr inbounds double* %call13, i64 %idxprom18
  %4 = load double* %arrayidx19, align 8, !tbaa !4
  %add2156 = or i32 %mul17, 1
  %idxprom22 = sext i32 %add2156 to i64
  %arrayidx23 = getelementptr inbounds double* %call13, i64 %idxprom22
  %5 = load double* %arrayidx23, align 8, !tbaa !4
  %mul24 = fmul double %4, %4
  %mul25 = fmul double %5, %5
  %add26 = fadd double %mul24, %mul25
  %add27 = fadd double %sum.163, %add26
  %indvars.iv.next66 = add i64 %indvars.iv65, 1
  %lftr.wideiv67 = trunc i64 %indvars.iv.next66 to i32
  %exitcond68 = icmp eq i32 %lftr.wideiv67, %call12
  br i1 %exitcond68, label %if.end35, label %for.body16

if.else31:                                        ; preds = %if.end
  %6 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call33 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([88 x i8]* @.str6, i64 0, i64 0), %struct._Chv* %chv, i32 %1) #4
  tail call void @exit(i32 -1) #5
  unreachable

if.end35:                                         ; preds = %if.then8, %for.body16, %if.then2, %for.body
  %sum.2 = phi double [ 0.000000e+00, %if.then2 ], [ %add, %for.body ], [ 0.000000e+00, %if.then8 ], [ %add27, %for.body16 ]
  %call36 = tail call double @sqrt(double %sum.2) #4
  ret double %call36
}
