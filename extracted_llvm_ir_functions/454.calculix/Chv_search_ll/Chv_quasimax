define double @Chv_quasimax(%struct._Chv* %chv, i32* %rowmark, i32* %colmark, i32 %tag, i32* %pirow, i32* %pjcol) #0 {
entry:
  %maxval = alloca double, align 8
  %cmp = icmp eq %struct._Chv* %chv, null
  %cmp1 = icmp eq i32* %rowmark, null
  %or.cond = or i1 %cmp, %cmp1
  %cmp3 = icmp eq i32* %colmark, null
  %or.cond75 = or i1 %or.cond, %cmp3
  %cmp5 = icmp eq i32* %pirow, null
  %or.cond76 = or i1 %or.cond75, %cmp5
  %cmp7 = icmp eq i32* %pjcol, null
  %or.cond77 = or i1 %or.cond76, %cmp7
  br i1 %or.cond77, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([61 x i8]* @.str14, i64 0, i64 0), %struct._Chv* %chv, i32* %rowmark, i32* %colmark, i32 %tag, i32* %pirow, i32* %pjcol) #5
  call void @exit(i32 -1) #6
  unreachable

if.end:                                           ; preds = %entry
  %symflag = getelementptr inbounds %struct._Chv* %chv, i64 0, i32 5
  %1 = load i32* %symflag, align 4, !tbaa !3
  %cmp8 = icmp eq i32 %1, 2
  br i1 %cmp8, label %if.end12, label %if.then9

if.then9:                                         ; preds = %if.end
  %2 = load %struct._IO_FILE** @stderr, align 8, !tbaa !0
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([133 x i8]* @.str15, i64 0, i64 0), %struct._Chv* %chv, i32* %rowmark, i32* %colmark, i32 %tag, i32* %pirow, i32* %pjcol, i32 %1) #5
  call void @exit(i32 -1) #6
  unreachable

if.end12:                                         ; preds = %if.end
  %nD13 = getelementptr inbounds %struct._Chv* %chv, i64 0, i32 1
  %3 = load i32* %nD13, align 4, !tbaa !3
  store i32 -1, i32* %pjcol, align 4, !tbaa !3
  store i32 -1, i32* %pirow, align 4, !tbaa !3
  store double 0.000000e+00, double* %maxval, align 8, !tbaa !4
  %cmp1478 = icmp sgt i32 %3, 0
  br i1 %cmp1478, label %for.body, label %for.end

for.cond:                                         ; preds = %for.body
  %4 = trunc i64 %indvars.iv.next to i32
  %cmp14 = icmp slt i32 %4, %3
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %if.end12, %for.cond
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond ], [ 0, %if.end12 ]
  %jcol.079 = phi i32 [ %inc, %for.cond ], [ 0, %if.end12 ]
  %arrayidx = getelementptr inbounds i32* %colmark, i64 %indvars.iv
  %5 = load i32* %arrayidx, align 4, !tbaa !3
  %cmp15 = icmp eq i32 %5, %tag
  %indvars.iv.next = add i64 %indvars.iv, 1
  %inc = add nsw i32 %jcol.079, 1
  br i1 %cmp15, label %for.end, label %for.cond

for.end:                                          ; preds = %for.cond, %for.body, %if.end12
  %jcol.0.lcssa = phi i32 [ 0, %if.end12 ], [ %jcol.079, %for.body ], [ %inc, %for.cond ]
  %cmp18 = icmp eq i32 %jcol.0.lcssa, %3
  br i1 %cmp18, label %return, label %if.end20

if.end20:                                         ; preds = %for.end
  %call21 = call i32 @Chv_maxabsInColumn11(%struct._Chv* %chv, i32 %jcol.0.lcssa, i32* %rowmark, i32 %tag, double* %maxval) #8
  %cmp22 = icmp eq i32 %call21, -1
  br i1 %cmp22, label %return, label %while.body

while.body:                                       ; preds = %if.end20, %if.end28
  %jcol.1 = phi i32 [ %call25, %if.end28 ], [ %jcol.0.lcssa, %if.end20 ]
  %irow.0 = phi i32 [ %call29, %if.end28 ], [ %call21, %if.end20 ]
  %call25 = call i32 @Chv_maxabsInRow11(%struct._Chv* %chv, i32 %irow.0, i32* %colmark, i32 %tag, double* %maxval) #8
  %cmp26 = icmp eq i32 %call25, %jcol.1
  br i1 %cmp26, label %while.end, label %if.end28

if.end28:                                         ; preds = %while.body
  %call29 = call i32 @Chv_maxabsInColumn11(%struct._Chv* %chv, i32 %call25, i32* %rowmark, i32 %tag, double* %maxval) #8
  %cmp30 = icmp eq i32 %call29, %irow.0
  br i1 %cmp30, label %while.end, label %while.body

while.end:                                        ; preds = %if.end28, %while.body
  %jcol.2 = phi i32 [ %jcol.1, %while.body ], [ %call25, %if.end28 ]
  store i32 %jcol.2, i32* %pjcol, align 4, !tbaa !3
  store i32 %irow.0, i32* %pirow, align 4, !tbaa !3
  br label %return

return:                                           ; preds = %if.end20, %for.end, %while.end
  %retval.0 = load double* %maxval, align 8
  ret double %retval.0
}
