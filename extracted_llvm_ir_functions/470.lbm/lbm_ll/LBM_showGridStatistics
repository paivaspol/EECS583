define void @LBM_showGridStatistics(double* nocapture %grid) #0 {
entry:
  br label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.inc ]
  %mass.0356 = phi double [ 0.000000e+00, %entry ], [ %add77, %for.inc ]
  %nObstacleCells.0355 = phi i32 [ 0, %entry ], [ %nObstacleCells.1, %for.inc ]
  %maxRho.0354 = phi double [ -1.000000e+30, %entry ], [ %maxRho.1, %for.inc ]
  %minRho.0353 = phi double [ 1.000000e+30, %entry ], [ %minRho.1, %for.inc ]
  %nAccelCells.0352 = phi i32 [ 0, %entry ], [ %nAccelCells.2, %for.inc ]
  %maxU2.0351 = phi double [ -1.000000e+30, %entry ], [ %maxU2.1, %for.inc ]
  %minU2.0350 = phi double [ 1.000000e+30, %entry ], [ %minU2.2, %for.inc ]
  %nFluidCells.0349 = phi i32 [ 0, %entry ], [ %nFluidCells.2, %for.inc ]
  %arrayidx = getelementptr inbounds double* %grid, i64 %indvars.iv
  %0 = load double* %arrayidx, align 8, !tbaa !3
  %1 = or i64 %indvars.iv, 1
  %arrayidx3 = getelementptr inbounds double* %grid, i64 %1
  %2 = load double* %arrayidx3, align 8, !tbaa !3
  %add4 = fadd double %0, %2
  %3 = or i64 %indvars.iv, 2
  %arrayidx7 = getelementptr inbounds double* %grid, i64 %3
  %4 = load double* %arrayidx7, align 8, !tbaa !3
  %add8 = fadd double %add4, %4
  %5 = or i64 %indvars.iv, 3
  %arrayidx11 = getelementptr inbounds double* %grid, i64 %5
  %6 = load double* %arrayidx11, align 8, !tbaa !3
  %add12 = fadd double %add8, %6
  %7 = add nsw i64 %indvars.iv, 4
  %arrayidx15 = getelementptr inbounds double* %grid, i64 %7
  %8 = load double* %arrayidx15, align 8, !tbaa !3
  %add16 = fadd double %add12, %8
  %9 = add nsw i64 %indvars.iv, 5
  %arrayidx19 = getelementptr inbounds double* %grid, i64 %9
  %10 = load double* %arrayidx19, align 8, !tbaa !3
  %add20 = fadd double %add16, %10
  %11 = add nsw i64 %indvars.iv, 6
  %arrayidx23 = getelementptr inbounds double* %grid, i64 %11
  %12 = load double* %arrayidx23, align 8, !tbaa !3
  %add24 = fadd double %add20, %12
  %13 = add nsw i64 %indvars.iv, 7
  %arrayidx27 = getelementptr inbounds double* %grid, i64 %13
  %14 = load double* %arrayidx27, align 8, !tbaa !3
  %add28 = fadd double %add24, %14
  %15 = add nsw i64 %indvars.iv, 8
  %arrayidx31 = getelementptr inbounds double* %grid, i64 %15
  %16 = load double* %arrayidx31, align 8, !tbaa !3
  %add32 = fadd double %add28, %16
  %17 = add nsw i64 %indvars.iv, 9
  %arrayidx35 = getelementptr inbounds double* %grid, i64 %17
  %18 = load double* %arrayidx35, align 8, !tbaa !3
  %add36 = fadd double %add32, %18
  %19 = add nsw i64 %indvars.iv, 10
  %arrayidx39 = getelementptr inbounds double* %grid, i64 %19
  %20 = load double* %arrayidx39, align 8, !tbaa !3
  %add40 = fadd double %add36, %20
  %21 = add nsw i64 %indvars.iv, 11
  %arrayidx43 = getelementptr inbounds double* %grid, i64 %21
  %22 = load double* %arrayidx43, align 8, !tbaa !3
  %add44 = fadd double %add40, %22
  %23 = add nsw i64 %indvars.iv, 12
  %arrayidx47 = getelementptr inbounds double* %grid, i64 %23
  %24 = load double* %arrayidx47, align 8, !tbaa !3
  %add48 = fadd double %add44, %24
  %25 = add nsw i64 %indvars.iv, 13
  %arrayidx51 = getelementptr inbounds double* %grid, i64 %25
  %26 = load double* %arrayidx51, align 8, !tbaa !3
  %add52 = fadd double %add48, %26
  %27 = add nsw i64 %indvars.iv, 14
  %arrayidx55 = getelementptr inbounds double* %grid, i64 %27
  %28 = load double* %arrayidx55, align 8, !tbaa !3
  %add56 = fadd double %add52, %28
  %29 = add nsw i64 %indvars.iv, 15
  %arrayidx59 = getelementptr inbounds double* %grid, i64 %29
  %30 = load double* %arrayidx59, align 8, !tbaa !3
  %add60 = fadd double %add56, %30
  %31 = add nsw i64 %indvars.iv, 16
  %arrayidx63 = getelementptr inbounds double* %grid, i64 %31
  %32 = load double* %arrayidx63, align 8, !tbaa !3
  %add64 = fadd double %add60, %32
  %33 = add nsw i64 %indvars.iv, 17
  %arrayidx67 = getelementptr inbounds double* %grid, i64 %33
  %34 = load double* %arrayidx67, align 8, !tbaa !3
  %add68 = fadd double %add64, %34
  %35 = add nsw i64 %indvars.iv, 18
  %arrayidx71 = getelementptr inbounds double* %grid, i64 %35
  %36 = load double* %arrayidx71, align 8, !tbaa !3
  %add72 = fadd double %add68, %36
  %cmp73 = fcmp olt double %add72, %minRho.0353
  %minRho.1 = select i1 %cmp73, double %add72, double %minRho.0353
  %cmp74 = fcmp ogt double %add72, %maxRho.0354
  %maxRho.1 = select i1 %cmp74, double %add72, double %maxRho.0354
  %add77 = fadd double %mass.0356, %add72
  %37 = add nsw i64 %indvars.iv, 19
  %arrayidx80 = getelementptr inbounds double* %grid, i64 %37
  %38 = bitcast double* %arrayidx80 to i32*
  %39 = load i32* %38, align 4, !tbaa !4
  %and = and i32 %39, 1
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.else, label %if.then81

if.then81:                                        ; preds = %for.body
  %inc = add nsw i32 %nObstacleCells.0355, 1
  br label %for.inc

if.else:                                          ; preds = %for.body
  %and85 = lshr i32 %39, 1
  %and85.lobit = and i32 %and85, 1
  %40 = xor i32 %and85.lobit, 1
  %nFluidCells.1 = add nsw i32 %40, %nFluidCells.0349
  %nAccelCells.1 = add nsw i32 %and85.lobit, %nAccelCells.0352
  %sub = fsub double %6, %8
  %add101 = fadd double %sub, %14
  %sub105 = fsub double %add101, %16
  %add109 = fadd double %sub105, %18
  %sub113 = fsub double %add109, %20
  %add117 = fadd double %sub113, %30
  %add121 = fadd double %add117, %32
  %sub125 = fsub double %add121, %34
  %sub129 = fsub double %sub125, %36
  %sub136 = fsub double %2, %4
  %add140 = fadd double %sub136, %14
  %add144 = fadd double %add140, %16
  %sub148 = fsub double %add144, %18
  %sub152 = fsub double %sub148, %20
  %add156 = fadd double %sub152, %22
  %add160 = fadd double %add156, %24
  %sub164 = fsub double %add160, %26
  %sub168 = fsub double %sub164, %28
  %sub175 = fsub double %10, %12
  %add179 = fadd double %sub175, %22
  %sub183 = fsub double %add179, %24
  %add187 = fadd double %sub183, %26
  %sub191 = fsub double %add187, %28
  %add195 = fadd double %sub191, %30
  %sub199 = fsub double %add195, %32
  %add203 = fadd double %sub199, %34
  %sub207 = fsub double %add203, %36
  %mul = fmul double %sub129, %sub129
  %mul208 = fmul double %sub168, %sub168
  %add209 = fadd double %mul208, %mul
  %mul210 = fmul double %sub207, %sub207
  %add211 = fadd double %mul210, %add209
  %mul212 = fmul double %add72, %add72
  %div = fdiv double %add211, %mul212
  %cmp213 = fcmp olt double %div, %minU2.0350
  %minU2.1 = select i1 %cmp213, double %div, double %minU2.0350
  %cmp216 = fcmp ogt double %div, %maxU2.0351
  br i1 %cmp216, label %if.then217, label %for.inc

if.then217:                                       ; preds = %if.else
  br label %for.inc

for.inc:                                          ; preds = %if.then81, %if.then217, %if.else
  %nFluidCells.2 = phi i32 [ %nFluidCells.0349, %if.then81 ], [ %nFluidCells.1, %if.then217 ], [ %nFluidCells.1, %if.else ]
  %minU2.2 = phi double [ %minU2.0350, %if.then81 ], [ %minU2.1, %if.then217 ], [ %minU2.1, %if.else ]
  %maxU2.1 = phi double [ %maxU2.0351, %if.then81 ], [ %div, %if.then217 ], [ %maxU2.0351, %if.else ]
  %nAccelCells.2 = phi i32 [ %nAccelCells.0352, %if.then81 ], [ %nAccelCells.1, %if.then217 ], [ %nAccelCells.1, %if.else ]
  %nObstacleCells.1 = phi i32 [ %inc, %if.then81 ], [ %nObstacleCells.0355, %if.then217 ], [ %nObstacleCells.0355, %if.else ]
  %indvars.iv.next = add i64 %indvars.iv, 20
  %41 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %41, 26000000
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc
  %call = tail call double @sqrt(double %minU2.2) #4
  %call221 = tail call double @sqrt(double %maxU2.1) #4
  %call222 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([138 x i8]* @.str2, i64 0, i64 0), i32 %nObstacleCells.1, i32 %nAccelCells.2, i32 %nFluidCells.2, double %minRho.1, double %maxRho.1, double %add77, double %call, double %call221) #4
  ret void
}
