define %struct.sqd_regexp* @sqd_regcomp(i8* %exp) #0 {
entry:
  %flags = alloca i32, align 4
  %co = alloca %struct.comp, align 8
  %0 = bitcast %struct.comp* %co to i8*
  call void @llvm.lifetime.start(i64 40, i8* %0) #3
  %cmp = icmp eq i8* %exp, null
  br i1 %cmp, label %if.then, label %regc.exit

if.then:                                          ; preds = %entry
  call void @sqd_regerror(i8* getelementptr inbounds ([29 x i8]* @.str3, i64 0, i64 0)) #10
  unreachable

regc.exit:                                        ; preds = %entry
  %regparse = getelementptr inbounds %struct.comp* %co, i64 0, i32 0
  store i8* %exp, i8** %regparse, align 8, !tbaa !0
  %regnpar = getelementptr inbounds %struct.comp* %co, i64 0, i32 1
  store i32 1, i32* %regnpar, align 8, !tbaa !3
  %regsize = getelementptr inbounds %struct.comp* %co, i64 0, i32 4
  %arrayidx = getelementptr inbounds %struct.comp* %co, i64 0, i32 3, i64 0
  store i8 9, i8* %arrayidx, align 8, !tbaa !1
  %arrayidx2 = getelementptr inbounds %struct.comp* %co, i64 0, i32 3, i64 2
  store i8 0, i8* %arrayidx2, align 2, !tbaa !1
  %arrayidx4 = getelementptr inbounds %struct.comp* %co, i64 0, i32 3, i64 1
  store i8 0, i8* %arrayidx4, align 1, !tbaa !1
  %regcode = getelementptr inbounds %struct.comp* %co, i64 0, i32 2
  store i8* %arrayidx, i8** %regcode, align 8, !tbaa !0
  store i64 1, i64* %regsize, align 8, !tbaa !4
  %call = call fastcc i8* @reg(%struct.comp* %co, i32 0, i32* %flags) #10
  %cmp6 = icmp eq i8* %call, null
  br i1 %cmp6, label %cleanup, label %if.end8

if.end8:                                          ; preds = %regc.exit
  %1 = load i64* %regsize, align 8, !tbaa !4
  %cmp10 = icmp sgt i64 %1, 32766
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.end8
  call void @sqd_regerror(i8* getelementptr inbounds ([15 x i8]* @.str4, i64 0, i64 0)) #10
  unreachable

if.end12:                                         ; preds = %if.end8
  %add = add i64 %1, 184
  %call14 = call noalias i8* @malloc(i64 %add) #9
  %2 = bitcast i8* %call14 to %struct.sqd_regexp*
  %cmp15 = icmp eq i8* %call14, null
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end12
  call void @sqd_regerror(i8* getelementptr inbounds ([13 x i8]* @.str5, i64 0, i64 0)) #10
  unreachable

if.end17:                                         ; preds = %if.end12
  store i8* %exp, i8** %regparse, align 8, !tbaa !0
  store i32 1, i32* %regnpar, align 8, !tbaa !3
  %program = getelementptr inbounds i8* %call14, i64 180
  store i8* %program, i8** %regcode, align 8, !tbaa !0
  %cmp.i92 = icmp eq i8* %program, %arrayidx
  br i1 %cmp.i92, label %if.else.i97, label %if.then.i94

if.then.i94:                                      ; preds = %if.end17
  %incdec.ptr.i93 = getelementptr inbounds i8* %call14, i64 181
  store i8* %incdec.ptr.i93, i8** %regcode, align 8, !tbaa !0
  store i8 -100, i8* %program, align 1, !tbaa !1
  br label %regc.exit98

if.else.i97:                                      ; preds = %if.end17
  %inc.i96 = add nsw i64 %1, 1
  store i64 %inc.i96, i64* %regsize, align 8, !tbaa !4
  br label %regc.exit98

regc.exit98:                                      ; preds = %if.then.i94, %if.else.i97
  %call22 = call fastcc i8* @reg(%struct.comp* %co, i32 0, i32* %flags) #10
  %cmp23 = icmp eq i8* %call22, null
  br i1 %cmp23, label %cleanup, label %if.end25

if.end25:                                         ; preds = %regc.exit98
  %3 = getelementptr inbounds i8* %call14, i64 160
  store i8 0, i8* %3, align 1, !tbaa !1
  %4 = getelementptr inbounds i8* %call14, i64 161
  store i8 0, i8* %4, align 1, !tbaa !1
  %regmust = getelementptr inbounds i8* %call14, i64 168
  %5 = bitcast i8* %regmust to i8**
  store i8* null, i8** %5, align 8, !tbaa !0
  %regmlen = getelementptr inbounds i8* %call14, i64 176
  %6 = bitcast i8* %regmlen to i32*
  store i32 0, i32* %6, align 4, !tbaa !3
  %add.ptr = getelementptr inbounds i8* %call14, i64 181
  %call28 = call fastcc i8* @regnext(i8* %add.ptr) #10
  %7 = load i8* %call28, align 1, !tbaa !1
  %cmp29 = icmp eq i8 %7, 0
  br i1 %cmp29, label %if.then31, label %cleanup

if.then31:                                        ; preds = %if.end25
  %add.ptr32 = getelementptr inbounds i8* %call14, i64 184
  %8 = load i8* %add.ptr32, align 1, !tbaa !1
  switch i8 %8, label %if.end45 [
    i8 8, label %if.then36
    i8 1, label %if.then42
  ]

if.then36:                                        ; preds = %if.then31
  %add.ptr37 = getelementptr inbounds i8* %call14, i64 187
  %9 = load i8* %add.ptr37, align 1, !tbaa !1
  store i8 %9, i8* %3, align 1, !tbaa !1
  br label %if.end45

if.then42:                                        ; preds = %if.then31
  store i8 1, i8* %4, align 1, !tbaa !1
  br label %if.end45

if.end45:                                         ; preds = %if.then31, %if.then42, %if.then36
  %10 = load i32* %flags, align 4, !tbaa !3
  %and = and i32 %10, 4
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %cleanup, label %for.body

for.body:                                         ; preds = %if.end45, %for.inc.for.body_crit_edge
  %11 = phi i8 [ %.pre, %for.inc.for.body_crit_edge ], [ %8, %if.end45 ]
  %len.0102 = phi i64 [ %len.1, %for.inc.for.body_crit_edge ], [ 0, %if.end45 ]
  %longest.0101 = phi i8* [ %longest.1, %for.inc.for.body_crit_edge ], [ null, %if.end45 ]
  %scan.0100 = phi i8* [ %call61, %for.inc.for.body_crit_edge ], [ %add.ptr32, %if.end45 ]
  %cmp50 = icmp eq i8 %11, 8
  br i1 %cmp50, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %add.ptr52 = getelementptr inbounds i8* %scan.0100, i64 3
  %call53 = call i64 @strlen(i8* %add.ptr52) #11
  %cmp54 = icmp ult i64 %call53, %len.0102
  %longest.0.add.ptr52 = select i1 %cmp54, i8* %longest.0101, i8* %add.ptr52
  %len.0.call53 = select i1 %cmp54, i64 %len.0102, i64 %call53
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %longest.1 = phi i8* [ %longest.0101, %for.body ], [ %longest.0.add.ptr52, %land.lhs.true ]
  %len.1 = phi i64 [ %len.0102, %for.body ], [ %len.0.call53, %land.lhs.true ]
  %call61 = call fastcc i8* @regnext(i8* %scan.0100) #10
  %cmp47 = icmp eq i8* %call61, null
  br i1 %cmp47, label %for.end, label %for.inc.for.body_crit_edge

for.inc.for.body_crit_edge:                       ; preds = %for.inc
  %.pre = load i8* %call61, align 1, !tbaa !1
  br label %for.body

for.end:                                          ; preds = %for.inc
  store i8* %longest.1, i8** %5, align 8, !tbaa !0
  %conv63 = trunc i64 %len.1 to i32
  store i32 %conv63, i32* %6, align 4, !tbaa !3
  br label %cleanup

cleanup:                                          ; preds = %if.end25, %for.end, %if.end45, %regc.exit98, %regc.exit
  %retval.0 = phi %struct.sqd_regexp* [ null, %regc.exit ], [ null, %regc.exit98 ], [ %2, %if.end45 ], [ %2, %for.end ], [ %2, %if.end25 ]
  call void @llvm.lifetime.end(i64 40, i8* %0) #3
  ret %struct.sqd_regexp* %retval.0
}
