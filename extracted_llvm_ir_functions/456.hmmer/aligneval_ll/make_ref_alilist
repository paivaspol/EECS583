define internal fastcc void @make_ref_alilist(i32* nocapture %ref, i8* nocapture %k1, i8* nocapture %s1, i8* nocapture %s2, i32** nocapture %ret_s1_list, i32* nocapture %ret_listlen) #0 {
entry:
  %call = tail call i64 @strlen(i8* %s1) #9
  %mul = shl i64 %call, 2
  %call1 = tail call i8* @sre_malloc(i8* getelementptr inbounds ([55 x i8]* @.str, i64 0, i64 0), i32 236, i64 %mul) #8
  %call2 = tail call i64 @strlen(i8* %s1) #9
  %mul3 = shl i64 %call2, 2
  %call4 = tail call i8* @sre_malloc(i8* getelementptr inbounds ([55 x i8]* @.str, i64 0, i64 0), i32 237, i64 %mul3) #8
  %0 = bitcast i8* %call4 to i32*
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc ], [ 0, %entry ]
  %r1.0 = phi i32 [ %r1.1, %for.inc ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds i8* %k1, i64 %indvars.iv1
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  switch i8 %1, label %if.then [
    i8 0, label %for.cond39.preheader
    i8 32, label %for.inc
    i8 46, label %for.inc
    i8 95, label %for.inc
    i8 45, label %for.inc
    i8 126, label %for.inc
  ]

for.cond39.preheader:                             ; preds = %for.cond
  %2 = bitcast i8* %call1 to i32*
  br label %for.cond39

if.then:                                          ; preds = %for.cond
  %arrayidx35 = getelementptr inbounds i32* %ref, i64 %indvars.iv1
  %3 = load i32* %arrayidx35, align 4, !tbaa !3
  %tobool = icmp ne i32 %3, 0
  %cond = zext i1 %tobool to i32
  %idxprom36 = sext i32 %r1.0 to i64
  %arrayidx37 = getelementptr inbounds i32* %0, i64 %idxprom36
  store i32 %cond, i32* %arrayidx37, align 4, !tbaa !3
  %inc = add nsw i32 %r1.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %if.then
  %r1.1 = phi i32 [ %inc, %if.then ], [ %r1.0, %for.cond ], [ %r1.0, %for.cond ], [ %r1.0, %for.cond ], [ %r1.0, %for.cond ], [ %r1.0, %for.cond ]
  %indvars.iv.next2 = add i64 %indvars.iv1, 1
  br label %for.cond

for.cond39:                                       ; preds = %for.cond39.preheader, %for.inc177
  %indvars.iv = phi i64 [ 0, %for.cond39.preheader ], [ %indvars.iv.next, %for.inc177 ]
  %r1.2 = phi i32 [ 0, %for.cond39.preheader ], [ %r1.3, %for.inc177 ]
  %r2.0 = phi i32 [ 0, %for.cond39.preheader ], [ %r2.1, %for.inc177 ]
  %lpos.0 = phi i32 [ 0, %for.cond39.preheader ], [ %lpos.1, %for.inc177 ]
  %arrayidx41 = getelementptr inbounds i8* %s1, i64 %indvars.iv
  %4 = load i8* %arrayidx41, align 1, !tbaa !1
  switch i8 %4, label %land.lhs.true [
    i8 0, label %for.end179
    i8 32, label %if.end112
    i8 46, label %if.end112
    i8 95, label %if.end112
    i8 45, label %if.end112
    i8 126, label %if.end112
  ]

land.lhs.true:                                    ; preds = %for.cond39
  %idxprom75 = sext i32 %r1.2 to i64
  %arrayidx76 = getelementptr inbounds i32* %0, i64 %idxprom75
  %5 = load i32* %arrayidx76, align 4, !tbaa !3
  %tobool77 = icmp eq i32 %5, 0
  br i1 %tobool77, label %if.end112, label %if.then78

if.then78:                                        ; preds = %land.lhs.true
  %arrayidx80 = getelementptr inbounds i8* %s2, i64 %indvars.iv
  %6 = load i8* %arrayidx80, align 1, !tbaa !1
  switch i8 %6, label %lor.lhs.false102 [
    i8 32, label %cond.end
    i8 46, label %cond.end
    i8 95, label %cond.end
    i8 45, label %cond.end
  ]

lor.lhs.false102:                                 ; preds = %if.then78
  %cmp106 = icmp eq i8 %6, 126
  %. = select i1 %cmp106, i32 -1, i32 %r2.0
  br label %cond.end

cond.end:                                         ; preds = %if.then78, %if.then78, %if.then78, %if.then78, %lor.lhs.false102
  %cond108 = phi i32 [ -1, %if.then78 ], [ %., %lor.lhs.false102 ], [ -1, %if.then78 ], [ -1, %if.then78 ], [ -1, %if.then78 ]
  %idxprom109 = sext i32 %lpos.0 to i64
  %arrayidx110 = getelementptr inbounds i32* %2, i64 %idxprom109
  store i32 %cond108, i32* %arrayidx110, align 4, !tbaa !3
  %inc111 = add nsw i32 %lpos.0, 1
  %.pr.pre = load i8* %arrayidx41, align 1, !tbaa !1
  br label %if.end112

if.end112:                                        ; preds = %land.lhs.true, %cond.end, %for.cond39, %for.cond39, %for.cond39, %for.cond39, %for.cond39
  %7 = phi i8 [ %4, %for.cond39 ], [ %4, %for.cond39 ], [ %4, %for.cond39 ], [ %4, %for.cond39 ], [ %4, %for.cond39 ], [ %4, %land.lhs.true ], [ %.pr.pre, %cond.end ]
  %lpos.1 = phi i32 [ %lpos.0, %for.cond39 ], [ %lpos.0, %for.cond39 ], [ %lpos.0, %for.cond39 ], [ %lpos.0, %for.cond39 ], [ %lpos.0, %for.cond39 ], [ %lpos.0, %land.lhs.true ], [ %inc111, %cond.end ]
  switch i8 %7, label %if.then142 [
    i8 32, label %if.end144
    i8 46, label %if.end144
    i8 95, label %if.end144
    i8 45, label %if.end144
    i8 126, label %if.end144
  ]

if.then142:                                       ; preds = %if.end112
  %inc143 = add nsw i32 %r1.2, 1
  br label %if.end144

if.end144:                                        ; preds = %if.end112, %if.end112, %if.end112, %if.end112, %if.end112, %if.then142
  %r1.3 = phi i32 [ %r1.2, %if.end112 ], [ %inc143, %if.then142 ], [ %r1.2, %if.end112 ], [ %r1.2, %if.end112 ], [ %r1.2, %if.end112 ], [ %r1.2, %if.end112 ]
  %arrayidx146 = getelementptr inbounds i8* %s2, i64 %indvars.iv
  %8 = load i8* %arrayidx146, align 1, !tbaa !1
  switch i8 %8, label %if.then174 [
    i8 32, label %for.inc177
    i8 46, label %for.inc177
    i8 95, label %for.inc177
    i8 45, label %for.inc177
    i8 126, label %for.inc177
  ]

if.then174:                                       ; preds = %if.end144
  %inc175 = add nsw i32 %r2.0, 1
  br label %for.inc177

for.inc177:                                       ; preds = %if.end144, %if.end144, %if.end144, %if.end144, %if.end144, %if.then174
  %r2.1 = phi i32 [ %r2.0, %if.end144 ], [ %inc175, %if.then174 ], [ %r2.0, %if.end144 ], [ %r2.0, %if.end144 ], [ %r2.0, %if.end144 ], [ %r2.0, %if.end144 ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  br label %for.cond39

for.end179:                                       ; preds = %for.cond39
  tail call void @free(i8* %call4) #8
  store i32 %lpos.0, i32* %ret_listlen, align 4, !tbaa !3
  store i32* %2, i32** %ret_s1_list, align 8, !tbaa !0
  ret void
}
