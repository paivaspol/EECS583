define float @CompareRefMultAlignments(i32* nocapture readonly %ref, i8** nocapture readonly %kseqs, i8** nocapture readonly %tseqs, i32 %N) #0 {
  tail call void @llvm.dbg.value(metadata i32* %ref, i64 0, metadata !57, metadata !176), !dbg !396
  tail call void @llvm.dbg.value(metadata i8** %kseqs, i64 0, metadata !58, metadata !176), !dbg !397
  tail call void @llvm.dbg.value(metadata i8** %tseqs, i64 0, metadata !59, metadata !176), !dbg !398
  tail call void @llvm.dbg.value(metadata i32 %N, i64 0, metadata !60, metadata !176), !dbg !399
  tail call void @llvm.dbg.value(metadata float 0.000000e+00, i64 0, metadata !64, metadata !176), !dbg !400
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !61, metadata !176), !dbg !401
  %1 = icmp sgt i32 %N, 0, !dbg !402
  br i1 %1, label %.lr.ph8, label %._crit_edge, !dbg !405

.lr.ph8:                                          ; preds = %0
  %2 = sext i32 %N to i64, !dbg !405
  br label %3, !dbg !405

.loopexit:                                        ; preds = %17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !405
  br i1 %4, label %3, label %._crit_edge, !dbg !405

; <label>:3                                       ; preds = %.lr.ph8, %.loopexit
  %indvars.iv12 = phi i64 [ 0, %.lr.ph8 ], [ %indvars.iv.next13, %.loopexit ]
  %indvars.iv = phi i64 [ 1, %.lr.ph8 ], [ %indvars.iv.next, %.loopexit ]
  %tot_score.07 = phi float [ 0.000000e+00, %.lr.ph8 ], [ %18, %.loopexit ]
  %indvars.iv.next13 = add nuw nsw i64 %indvars.iv12, 1, !dbg !405
  %4 = icmp slt i64 %indvars.iv.next13, %2, !dbg !406
  br i1 %4, label %.lr.ph, label %._crit_edge, !dbg !409

.lr.ph:                                           ; preds = %3
  %5 = getelementptr inbounds i8** %kseqs, i64 %indvars.iv12, !dbg !410
  %6 = getelementptr inbounds i8** %tseqs, i64 %indvars.iv12, !dbg !412
  %7 = trunc i64 %indvars.iv.next13 to i32, !dbg !409
  br label %8, !dbg !409

; <label>:8                                       ; preds = %.lr.ph, %17
  %indvars.iv10 = phi i64 [ %indvars.iv, %.lr.ph ], [ %indvars.iv.next11, %17 ]
  %tot_score.15 = phi float [ %tot_score.07, %.lr.ph ], [ %18, %17 ]
  %j.04 = phi i32 [ %7, %.lr.ph ], [ %19, %17 ]
  %9 = load i8** %5, align 8, !dbg !410, !tbaa !197
  %10 = getelementptr inbounds i8** %kseqs, i64 %indvars.iv10, !dbg !413
  %11 = load i8** %10, align 8, !dbg !413, !tbaa !197
  %12 = load i8** %6, align 8, !dbg !412, !tbaa !197
  %13 = getelementptr inbounds i8** %tseqs, i64 %indvars.iv10, !dbg !414
  %14 = load i8** %13, align 8, !dbg !414, !tbaa !197
  %15 = tail call float @CompareRefPairAlignments(i32* %ref, i8* %9, i8* %11, i8* %12, i8* %14) #7, !dbg !415
  tail call void @llvm.dbg.value(metadata float %15, i64 0, metadata !63, metadata !176), !dbg !416
  %16 = fcmp olt float %15, 0.000000e+00, !dbg !417
  br i1 %16, label %.loopexit1, label %17, !dbg !419

; <label>:17                                      ; preds = %8
  %18 = fadd float %tot_score.15, %15, !dbg !420
  tail call void @llvm.dbg.value(metadata float %18, i64 0, metadata !64, metadata !176), !dbg !400
  %19 = add nuw nsw i32 %j.04, 1, !dbg !421
  tail call void @llvm.dbg.value(metadata i32 %19, i64 0, metadata !62, metadata !176), !dbg !422
  %20 = icmp slt i32 %19, %N, !dbg !406
  %indvars.iv.next11 = add nuw nsw i64 %indvars.iv10, 1, !dbg !409
  br i1 %20, label %8, label %.loopexit, !dbg !409

._crit_edge:                                      ; preds = %.loopexit, %3, %0
  %tot_score.0.lcssa = phi float [ 0.000000e+00, %0 ], [ %tot_score.07, %3 ], [ %18, %.loopexit ]
  %21 = fpext float %tot_score.0.lcssa to double, !dbg !423
  %22 = fmul double %21, 2.000000e+00, !dbg !424
  %23 = sitofp i32 %N to float, !dbg !425
  %24 = fpext float %23 to double, !dbg !425
  %25 = fadd double %24, -1.000000e+00, !dbg !426
  %26 = fmul double %24, %25, !dbg !427
  %27 = fdiv double %22, %26, !dbg !428
  %28 = fptrunc double %27 to float, !dbg !429
  br label %.loopexit1, !dbg !430

.loopexit1:                                       ; preds = %8, %._crit_edge
  %.0 = phi float [ %28, %._crit_edge ], [ -1.000000e+00, %8 ]
  ret float %.0, !dbg !431
}
