define i32 @coded_revcomp(i8* nocapture %comp, i8* nocapture %seq) #1 {
entry:
  tail call void @llvm.dbg.value(metadata !{i8* %comp}, i64 0, metadata !54), !dbg !116
  tail call void @llvm.dbg.value(metadata !{i8* %seq}, i64 0, metadata !55), !dbg !116
  %call = tail call i64 @strlen(i8* %seq) #8, !dbg !117
  tail call void @llvm.dbg.value(metadata !{i64 %call}, i64 0, metadata !56), !dbg !117
  tail call void @llvm.dbg.value(metadata !{i8* %comp}, i64 0, metadata !59), !dbg !118
  tail call void @llvm.dbg.value(metadata !{i8* %add.ptr1}, i64 0, metadata !58), !dbg !119
  tail call void @llvm.dbg.value(metadata !120, i64 0, metadata !61), !dbg !121
  %cmp29 = icmp sgt i64 %call, 0, !dbg !121
  br i1 %cmp29, label %for.cond2.preheader.lr.ph, label %return, !dbg !121

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %add.ptr.sum = add i64 %call, -1, !dbg !119
  %add.ptr1 = getelementptr inbounds i8* %seq, i64 %add.ptr.sum, !dbg !119
  br label %for.cond2.preheader, !dbg !121

for.cond2.preheader:                              ; preds = %for.cond2.preheader.lr.ph, %if.else
  %pos.032 = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %inc16, %if.else ]
  %fwdp.031 = phi i8* [ %comp, %for.cond2.preheader.lr.ph ], [ %incdec.ptr, %if.else ]
  %bckp.030 = phi i8* [ %add.ptr1, %for.cond2.preheader.lr.ph ], [ %incdec.ptr14, %if.else ]
  %0 = load i8* %bckp.030, align 1, !dbg !123, !tbaa !78
  br label %for.cond2, !dbg !123

for.cond2:                                        ; preds = %for.cond2, %for.cond2.preheader
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond2 ], [ 0, %for.cond2.preheader ]
  %idx.0 = phi i32 [ %inc, %for.cond2 ], [ 0, %for.cond2.preheader ]
  %code = getelementptr inbounds [0 x %struct.iupactype]* @iupac, i64 0, i64 %indvars.iv, i32 2, !dbg !123
  %1 = load i8* %code, align 1, !dbg !123, !tbaa !78
  %cmp4 = icmp ne i8 %0, %1, !dbg !123
  %2 = trunc i64 %indvars.iv to i32, !dbg !123
  %cmp6 = icmp slt i32 %2, 17, !dbg !123
  %or.cond = and i1 %cmp4, %cmp6, !dbg !123
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !123
  %inc = add nsw i32 %idx.0, 1, !dbg !123
  tail call void @llvm.dbg.value(metadata !{i32 %inc}, i64 0, metadata !60), !dbg !123
  br i1 %or.cond, label %for.cond2, label %for.end, !dbg !123

for.end:                                          ; preds = %for.cond2
  %cmp9 = icmp sgt i32 %idx.0, 17, !dbg !126
  br i1 %cmp9, label %return, label %if.else, !dbg !126

if.else:                                          ; preds = %for.end
  %comp13 = getelementptr inbounds [0 x %struct.iupactype]* @iupac, i64 0, i64 %indvars.iv, i32 3, !dbg !127
  %3 = load i8* %comp13, align 1, !dbg !127, !tbaa !78
  store i8 %3, i8* %fwdp.031, align 1, !dbg !127, !tbaa !78
  %incdec.ptr = getelementptr inbounds i8* %fwdp.031, i64 1, !dbg !128
  tail call void @llvm.dbg.value(metadata !{i8* %incdec.ptr}, i64 0, metadata !59), !dbg !128
  %incdec.ptr14 = getelementptr inbounds i8* %bckp.030, i64 -1, !dbg !129
  tail call void @llvm.dbg.value(metadata !{i8* %incdec.ptr14}, i64 0, metadata !58), !dbg !129
  %inc16 = add nsw i64 %pos.032, 1, !dbg !121
  tail call void @llvm.dbg.value(metadata !{i64 %inc16}, i64 0, metadata !61), !dbg !121
  %cmp = icmp slt i64 %inc16, %call, !dbg !121
  br i1 %cmp, label %for.cond2.preheader, label %return, !dbg !121

return:                                           ; preds = %if.else, %for.end, %entry
  %fwdp.0.lcssa = phi i8* [ %comp, %entry ], [ %fwdp.031, %for.end ], [ %incdec.ptr, %if.else ]
  %retval.0 = phi i32 [ 1, %entry ], [ 0, %for.end ], [ 1, %if.else ]
  store i8 0, i8* %fwdp.0.lcssa, align 1, !dbg !130, !tbaa !78
  ret i32 %retval.0, !dbg !132
}
