define i64 @rkcomp(i8* %probe) #0 {
entry:
  %coded = alloca [17 x i8], align 16
  %call = call i64 @strlen(i8* %probe) #4
  %conv = trunc i64 %call to i32
  %sext = shl i64 %call, 32
  %conv1 = ashr exact i64 %sext, 32
  %cmp = icmp ugt i64 %conv1, 16
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %arraydecay = getelementptr inbounds [17 x i8]* %coded, i64 0, i64 0
  %call3 = call i32 @seqencode(i8* %arraydecay, i8* %probe) #5
  %cmp4 = icmp eq i32 %call3, 0
  br i1 %cmp4, label %return, label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end
  %cmp832 = icmp sgt i32 %conv, 0
  br i1 %cmp832, label %for.body, label %for.body15

for.cond11.preheader:                             ; preds = %for.body
  %cmp1329 = icmp ult i32 %conv, 16
  br i1 %cmp1329, label %for.body15, label %return

for.body:                                         ; preds = %for.cond.preheader, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %for.cond.preheader ]
  %hashprobe.033 = phi i64 [ %or, %for.body ], [ 0, %for.cond.preheader ]
  %shl = shl i64 %hashprobe.033, 4
  %arrayidx = getelementptr inbounds [17 x i8]* %coded, i64 0, i64 %indvars.iv
  %0 = load i8* %arrayidx, align 1, !tbaa !0
  %conv10 = sext i8 %0 to i64
  %or = or i64 %conv10, %shl
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond37 = icmp eq i32 %lftr.wideiv, %conv
  br i1 %exitcond37, label %for.cond11.preheader, label %for.body

for.body15:                                       ; preds = %for.cond.preheader, %for.cond11.preheader, %for.body15
  %i.131 = phi i32 [ %inc19, %for.body15 ], [ %conv, %for.cond11.preheader ], [ 0, %for.cond.preheader ]
  %hashprobe.130 = phi i64 [ %or17, %for.body15 ], [ %or, %for.cond11.preheader ], [ 0, %for.cond.preheader ]
  %shl16 = shl i64 %hashprobe.130, 4
  %or17 = or i64 %shl16, 15
  %inc19 = add nsw i32 %i.131, 1
  %exitcond = icmp eq i32 %inc19, 16
  br i1 %exitcond, label %return, label %for.body15

return:                                           ; preds = %for.cond11.preheader, %for.body15, %if.end, %entry
  %retval.0 = phi i64 [ 0, %entry ], [ 0, %if.end ], [ %or, %for.cond11.preheader ], [ %or17, %for.body15 ]
  ret i64 %retval.0
}
