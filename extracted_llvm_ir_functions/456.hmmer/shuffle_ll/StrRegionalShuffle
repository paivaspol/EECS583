define i32 @StrRegionalShuffle(i8* %s1, i8* %s2, i32 %w) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{i8* %s1}, i64 0, metadata !105), !dbg !318
  tail call void @llvm.dbg.value(metadata !{i8* %s2}, i64 0, metadata !106), !dbg !318
  tail call void @llvm.dbg.value(metadata !{i32 %w}, i64 0, metadata !107), !dbg !318
  %cmp = icmp eq i8* %s1, %s2, !dbg !319
  br i1 %cmp, label %if.end, label %if.then, !dbg !319

if.then:                                          ; preds = %entry
  %call = tail call i8* @strcpy(i8* %s1, i8* %s2) #7, !dbg !319
  br label %if.end, !dbg !319

if.end:                                           ; preds = %entry, %if.then
  %call1 = tail call i64 @strlen(i8* %s1) #8, !dbg !320
  %conv = trunc i64 %call1 to i32, !dbg !320
  tail call void @llvm.dbg.value(metadata !{i32 %conv}, i64 0, metadata !108), !dbg !320
  tail call void @llvm.dbg.value(metadata !18, i64 0, metadata !111), !dbg !321
  %cmp253 = icmp sgt i32 %conv, 0, !dbg !321
  br i1 %cmp253, label %for.body.lr.ph, label %for.end27, !dbg !321

for.body.lr.ph:                                   ; preds = %if.end
  %0 = xor i32 %w, -1, !dbg !321
  %1 = xor i32 %conv, -1, !dbg !321
  br label %for.body, !dbg !321

for.cond.loopexit:                                ; preds = %for.body13, %for.body
  %cmp2 = icmp slt i32 %add, %conv, !dbg !321
  %indvars.iv.next = sub i32 %indvars.iv, %w, !dbg !321
  br i1 %cmp2, label %for.body, label %for.end27, !dbg !321

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.loopexit
  %indvars.iv = phi i32 [ %0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.loopexit ]
  %i.054 = phi i32 [ 0, %for.body.lr.ph ], [ %add, %for.cond.loopexit ]
  %add = add nsw i32 %i.054, %w, !dbg !323
  %cmp5 = icmp slt i32 %conv, %add, !dbg !323
  %conv.add = select i1 %cmp5, i32 %conv, i32 %add, !dbg !323
  %j.050 = add nsw i32 %conv.add, -1, !dbg !323
  %cmp1151 = icmp sgt i32 %j.050, %i.054, !dbg !323
  br i1 %cmp1151, label %for.body13.lr.ph, label %for.cond.loopexit, !dbg !323

for.body13.lr.ph:                                 ; preds = %for.body
  %2 = icmp sgt i32 %indvars.iv, %1, !dbg !321
  %smax = select i1 %2, i32 %indvars.iv, i32 %1, !dbg !321
  %3 = sub i32 -2, %smax, !dbg !323
  %4 = sext i32 %3 to i64, !dbg !321
  br label %for.body13, !dbg !323

for.body13:                                       ; preds = %for.body13.lr.ph, %for.body13
  %indvars.iv55 = phi i64 [ %4, %for.body13.lr.ph ], [ %indvars.iv.next56, %for.body13 ], !dbg !321
  %j.052 = phi i32 [ %j.050, %for.body13.lr.ph ], [ %j.0, %for.body13 ]
  %call14 = tail call double @sre_random() #7, !dbg !325
  %5 = trunc i64 %indvars.iv55 to i32, !dbg !325
  %sub15 = sub nsw i32 %5, %i.054, !dbg !325
  %conv16 = sitofp i32 %sub15 to double, !dbg !325
  %mul = fmul double %conv16, %call14, !dbg !325
  %conv17 = fptosi double %mul to i32, !dbg !325
  %add18 = add nsw i32 %conv17, %i.054, !dbg !325
  tail call void @llvm.dbg.value(metadata !{i32 %add18}, i64 0, metadata !110), !dbg !325
  %idxprom = sext i32 %add18 to i64, !dbg !327
  %arrayidx = getelementptr inbounds i8* %s1, i64 %idxprom, !dbg !327
  %6 = load i8* %arrayidx, align 1, !dbg !327, !tbaa !160
  tail call void @llvm.dbg.value(metadata !{i8 %6}, i64 0, metadata !109), !dbg !327
  %arrayidx20 = getelementptr inbounds i8* %s1, i64 %indvars.iv55, !dbg !328
  %7 = load i8* %arrayidx20, align 1, !dbg !328, !tbaa !160
  store i8 %7, i8* %arrayidx, align 1, !dbg !328, !tbaa !160
  store i8 %6, i8* %arrayidx20, align 1, !dbg !329, !tbaa !160
  %j.0 = add nsw i32 %j.052, -1, !dbg !323
  %cmp11 = icmp sgt i32 %j.0, %i.054, !dbg !323
  %indvars.iv.next56 = add i64 %indvars.iv55, -1, !dbg !323
  br i1 %cmp11, label %for.body13, label %for.cond.loopexit, !dbg !323

for.end27:                                        ; preds = %for.cond.loopexit, %if.end
  ret i32 1, !dbg !330
}
