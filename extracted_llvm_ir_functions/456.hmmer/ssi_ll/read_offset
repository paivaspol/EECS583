define internal fastcc i32 @read_offset(%struct._IO_FILE* nocapture %fp, i8 signext %mode, %struct.ssioffset_s* nocapture %ret_offset) #0 {
entry:
  %result.i = alloca i64, align 8
  switch i8 %mode, label %return [
    i8 0, label %if.then
    i8 1, label %if.then7
  ]

if.then:                                          ; preds = %entry
  %mode2 = getelementptr inbounds %struct.ssioffset_s* %ret_offset, i64 0, i32 0
  store i8 0, i8* %mode2, align 1, !tbaa !1
  %off = getelementptr inbounds %struct.ssioffset_s* %ret_offset, i64 0, i32 1
  %i32 = bitcast %union.anon* %off to i32*
  %call = call fastcc i32 @read_i32(%struct._IO_FILE* %fp, i32* %i32) #9
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %return, label %if.end16

if.then7:                                         ; preds = %entry
  %mode8 = getelementptr inbounds %struct.ssioffset_s* %ret_offset, i64 0, i32 0
  store i8 1, i8* %mode8, align 1, !tbaa !1
  %0 = bitcast i64* %result.i to i8*
  call void @llvm.lifetime.start(i64 8, i8* %0) #7
  %call.i = call i64 @fread(i8* %0, i64 8, i64 1, %struct._IO_FILE* %fp) #8
  %cmp.i = icmp eq i64 %call.i, 1
  br i1 %cmp.i, label %read_i64.exit, label %return

read_i64.exit:                                    ; preds = %if.then7
  %i64 = getelementptr inbounds %struct.ssioffset_s* %ret_offset, i64 0, i32 1, i32 0
  %1 = load i64* %result.i, align 8, !tbaa !5
  %call1.i = call i64 @sre_ntoh64(i64 %1) #8
  store i64 %call1.i, i64* %i64, align 8, !tbaa !5
  call void @llvm.lifetime.end(i64 8, i8* %0) #7
  br label %if.end16

if.end16:                                         ; preds = %read_i64.exit, %if.then
  br label %return

return:                                           ; preds = %if.then7, %entry, %if.then, %if.end16
  %retval.0 = phi i32 [ 1, %if.end16 ], [ 0, %if.then ], [ 0, %entry ], [ 0, %if.then7 ]
  ret i32 %retval.0
}
