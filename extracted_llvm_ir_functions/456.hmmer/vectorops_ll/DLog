define void @DLog(double* nocapture %vec, i32 %n) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{double* %vec}, i64 0, metadata !170), !dbg !340
  tail call void @llvm.dbg.value(metadata !{i32 %n}, i64 0, metadata !171), !dbg !340
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !172), !dbg !341
  %cmp14 = icmp sgt i32 %n, 0, !dbg !341
  br i1 %cmp14, label %for.body, label %for.end, !dbg !341

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %entry ]
  %arrayidx = getelementptr inbounds double* %vec, i64 %indvars.iv, !dbg !343
  %0 = load double* %arrayidx, align 8, !dbg !343, !tbaa !205
  %cmp1 = fcmp ogt double %0, 0.000000e+00, !dbg !343
  br i1 %cmp1, label %if.then, label %for.inc, !dbg !343

if.then:                                          ; preds = %for.body
  %call = tail call double @log(double %0) #4, !dbg !343
  br label %for.inc, !dbg !343

for.inc:                                          ; preds = %for.body, %if.then
  %storemerge = phi double [ %call, %if.then ], [ 0xFFEFFFFFFFFFFFFF, %for.body ]
  store double %storemerge, double* %arrayidx, align 8, !dbg !343, !tbaa !205
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !341
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !341
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !341
  br i1 %exitcond, label %for.end, label %for.body, !dbg !341

for.end:                                          ; preds = %for.inc, %entry
  ret void, !dbg !344
}
