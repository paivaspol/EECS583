define void @Lawless416(float* nocapture %x, i32* %y, i32 %n, float %lambda, float* nocapture %ret_f, float* nocapture %ret_df) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{float* %x}, i64 0, metadata !280), !dbg !913
  tail call void @llvm.dbg.value(metadata !{i32* %y}, i64 0, metadata !281), !dbg !913
  tail call void @llvm.dbg.value(metadata !{i32 %n}, i64 0, metadata !282), !dbg !913
  tail call void @llvm.dbg.value(metadata !{float %lambda}, i64 0, metadata !283), !dbg !913
  tail call void @llvm.dbg.value(metadata !{float* %ret_f}, i64 0, metadata !284), !dbg !913
  tail call void @llvm.dbg.value(metadata !{float* %ret_df}, i64 0, metadata !285), !dbg !913
  tail call void @llvm.dbg.value(metadata !755, i64 0, metadata !291), !dbg !914
  tail call void @llvm.dbg.value(metadata !755, i64 0, metadata !288), !dbg !914
  tail call void @llvm.dbg.value(metadata !755, i64 0, metadata !289), !dbg !914
  tail call void @llvm.dbg.value(metadata !755, i64 0, metadata !287), !dbg !914
  tail call void @llvm.dbg.value(metadata !755, i64 0, metadata !286), !dbg !914
  tail call void @llvm.dbg.value(metadata !2, i64 0, metadata !292), !dbg !915
  %cmp94 = icmp sgt i32 %n, 0, !dbg !915
  br i1 %cmp94, label %for.body.lr.ph, label %entry.for.end_crit_edge, !dbg !915

entry.for.end_crit_edge:                          ; preds = %entry
  %conv44.pre = fpext float %lambda to double, !dbg !917
  br label %for.end, !dbg !915

for.body.lr.ph:                                   ; preds = %entry
  %cmp1 = icmp eq i32* %y, null, !dbg !918
  %conv9 = fpext float %lambda to double, !dbg !920
  %mul10 = fmul double %conv9, -1.000000e+00, !dbg !920
  br label %for.body, !dbg !915

for.body:                                         ; preds = %cond.end, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %cond.end ]
  %total.099 = phi double [ 0.000000e+00, %for.body.lr.ph ], [ %add43, %cond.end ]
  %esum.098 = phi double [ 0.000000e+00, %for.body.lr.ph ], [ %add42, %cond.end ]
  %xsum.097 = phi double [ 0.000000e+00, %for.body.lr.ph ], [ %add, %cond.end ]
  %xxesum.096 = phi double [ 0.000000e+00, %for.body.lr.ph ], [ %add33, %cond.end ]
  %xesum.095 = phi double [ 0.000000e+00, %for.body.lr.ph ], [ %add16, %cond.end ]
  br i1 %cmp1, label %cond.end, label %cond.false, !dbg !918

cond.false:                                       ; preds = %for.body
  %arrayidx = getelementptr inbounds i32* %y, i64 %indvars.iv, !dbg !918
  %0 = load i32* %arrayidx, align 4, !dbg !918, !tbaa !362
  %conv = sitofp i32 %0 to double, !dbg !918
  br label %cond.end, !dbg !918

cond.end:                                         ; preds = %for.body, %cond.false
  %cond = phi double [ %conv, %cond.false ], [ 1.000000e+00, %for.body ], !dbg !918
  tail call void @llvm.dbg.value(metadata !{double %cond}, i64 0, metadata !290), !dbg !918
  %arrayidx3 = getelementptr inbounds float* %x, i64 %indvars.iv, !dbg !921
  %1 = load float* %arrayidx3, align 4, !dbg !921, !tbaa !490
  %conv4 = fpext float %1 to double, !dbg !921
  %mul = fmul double %cond, %conv4, !dbg !921
  %add = fadd double %xsum.097, %mul, !dbg !921
  tail call void @llvm.dbg.value(metadata !{double %add}, i64 0, metadata !289), !dbg !921
  %mul14 = fmul double %mul10, %conv4, !dbg !920
  %call = tail call double @exp(double %mul14) #5, !dbg !920
  %mul15 = fmul double %call, %mul, !dbg !920
  %add16 = fadd double %xesum.095, %mul15, !dbg !920
  tail call void @llvm.dbg.value(metadata !{double %add16}, i64 0, metadata !287), !dbg !920
  %2 = load float* %arrayidx3, align 4, !dbg !922, !tbaa !490
  %conv19 = fpext float %2 to double, !dbg !922
  %mul20 = fmul double %cond, %conv19, !dbg !922
  %mul24 = fmul double %conv19, %mul20, !dbg !922
  %mul30 = fmul double %mul10, %conv19, !dbg !922
  %call31 = tail call double @exp(double %mul30) #5, !dbg !922
  %mul32 = fmul double %call31, %mul24, !dbg !922
  %add33 = fadd double %xxesum.096, %mul32, !dbg !922
  tail call void @llvm.dbg.value(metadata !{double %add33}, i64 0, metadata !288), !dbg !922
  %3 = load float* %arrayidx3, align 4, !dbg !923, !tbaa !490
  %conv38 = fpext float %3 to double, !dbg !923
  %mul39 = fmul double %mul10, %conv38, !dbg !923
  %call40 = tail call double @exp(double %mul39) #5, !dbg !923
  %mul41 = fmul double %cond, %call40, !dbg !923
  %add42 = fadd double %esum.098, %mul41, !dbg !923
  tail call void @llvm.dbg.value(metadata !{double %add42}, i64 0, metadata !286), !dbg !923
  %add43 = fadd double %total.099, %cond, !dbg !924
  tail call void @llvm.dbg.value(metadata !{double %add43}, i64 0, metadata !291), !dbg !924
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !915
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !915
  %exitcond = icmp eq i32 %lftr.wideiv, %n, !dbg !915
  br i1 %exitcond, label %for.end, label %for.body, !dbg !915

for.end:                                          ; preds = %cond.end, %entry.for.end_crit_edge
  %conv44.pre-phi = phi double [ %conv44.pre, %entry.for.end_crit_edge ], [ %conv9, %cond.end ], !dbg !917
  %total.0.lcssa = phi double [ 0.000000e+00, %entry.for.end_crit_edge ], [ %add43, %cond.end ]
  %esum.0.lcssa = phi double [ 0.000000e+00, %entry.for.end_crit_edge ], [ %add42, %cond.end ]
  %xsum.0.lcssa = phi double [ 0.000000e+00, %entry.for.end_crit_edge ], [ %add, %cond.end ]
  %xxesum.0.lcssa = phi double [ 0.000000e+00, %entry.for.end_crit_edge ], [ %add33, %cond.end ]
  %xesum.0.lcssa = phi double [ 0.000000e+00, %entry.for.end_crit_edge ], [ %add16, %cond.end ]
  %div = fdiv double 1.000000e+00, %conv44.pre-phi, !dbg !917
  %div45 = fdiv double %xsum.0.lcssa, %total.0.lcssa, !dbg !917
  %sub = fsub double %div, %div45, !dbg !917
  %div46 = fdiv double %xesum.0.lcssa, %esum.0.lcssa, !dbg !917
  %add47 = fadd double %sub, %div46, !dbg !917
  %conv48 = fptrunc double %add47 to float, !dbg !917
  store float %conv48, float* %ret_f, align 4, !dbg !917, !tbaa !490
  %mul51 = fmul double %div46, %div46, !dbg !925
  %div52 = fdiv double %xxesum.0.lcssa, %esum.0.lcssa, !dbg !925
  %sub53 = fsub double %mul51, %div52, !dbg !925
  %mul54 = fmul float %lambda, %lambda, !dbg !925
  %conv55 = fpext float %mul54 to double, !dbg !925
  %div56 = fdiv double 1.000000e+00, %conv55, !dbg !925
  %sub57 = fsub double %sub53, %div56, !dbg !925
  %conv58 = fptrunc double %sub57 to float, !dbg !925
  store float %conv58, float* %ret_df, align 4, !dbg !925, !tbaa !490
  ret void, !dbg !926
}
