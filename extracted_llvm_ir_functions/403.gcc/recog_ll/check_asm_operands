define i32 @check_asm_operands(%struct.rtx_def* %x) #0 {
entry:
  %0 = load i32* @reload_completed, align 4, !tbaa !0
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call %struct.rtx_def* @make_insn_raw(%struct.rtx_def* %x) #6
  call void @extract_insn(%struct.rtx_def* %call) #7
  %call1 = call i32 @constrain_operands(i32 1) #7
  %1 = load i32* @which_alternative, align 4, !tbaa !0
  %.lobit = lshr i32 %1, 31
  %.lobit.not = xor i32 %.lobit, 1
  br label %return

if.end:                                           ; preds = %entry
  %call2 = call i32 @asm_noperands(%struct.rtx_def* %x) #7
  %cmp3 = icmp slt i32 %call2, 0
  br i1 %cmp3, label %return, label %if.end6

if.end6:                                          ; preds = %if.end
  %cmp7 = icmp eq i32 %call2, 0
  br i1 %cmp7, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end6
  %conv11 = sext i32 %call2 to i64
  %2 = alloca %struct.rtx_def*, i64 %conv11, align 1
  %3 = alloca i8*, i64 %conv11, align 1
  %call14 = call i8* @decode_asm_operands(%struct.rtx_def* %x, %struct.rtx_def** %2, %struct.rtx_def*** null, i8** %3, i32* null) #7
  br label %for.body

for.cond:                                         ; preds = %if.end39
  %4 = trunc i64 %indvars.iv.next to i32
  %cmp15 = icmp slt i32 %4, %call2
  br i1 %cmp15, label %for.body, label %return

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %arrayidx = getelementptr inbounds i8** %3, i64 %indvars.iv
  %5 = load i8** %arrayidx, align 8, !tbaa !3
  %6 = load i8* %5, align 1, !tbaa !1
  %cmp19 = icmp eq i8 %6, 37
  %incdec.ptr = getelementptr inbounds i8* %5, i64 1
  %incdec.ptr. = select i1 %cmp19, i8* %incdec.ptr, i8* %5
  %7 = load i8* %incdec.ptr., align 1, !tbaa !1
  %idxprom25 = zext i8 %7 to i64
  %arrayidx26 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom25
  %8 = load i16* %arrayidx26, align 2, !tbaa !4
  %and28 = and i16 %8, 4
  %tobool29 = icmp eq i16 %and28, 0
  br i1 %tobool29, label %if.end39, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %arrayidx30 = getelementptr inbounds i8* %incdec.ptr., i64 1
  %9 = load i8* %arrayidx30, align 1, !tbaa !1
  %cmp32 = icmp eq i8 %9, 0
  br i1 %cmp32, label %if.then34, label %if.end39

if.then34:                                        ; preds = %land.lhs.true
  %conv36 = sext i8 %7 to i64
  %sub = add i64 %conv36, -48
  %arrayidx38 = getelementptr inbounds i8** %3, i64 %sub
  %10 = load i8** %arrayidx38, align 8, !tbaa !3
  br label %if.end39

if.end39:                                         ; preds = %for.body, %if.then34, %land.lhs.true
  %c.1 = phi i8* [ %10, %if.then34 ], [ %incdec.ptr., %land.lhs.true ], [ %incdec.ptr., %for.body ]
  %arrayidx41 = getelementptr inbounds %struct.rtx_def** %2, i64 %indvars.iv
  %11 = load %struct.rtx_def** %arrayidx41, align 8, !tbaa !3
  %call42 = call i32 @asm_operand_ok(%struct.rtx_def* %11, i8* %c.1) #7
  %tobool43 = icmp eq i32 %call42, 0
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %tobool43, label %return, label %for.cond

return:                                           ; preds = %if.end39, %for.cond, %if.end6, %if.end, %if.then
  %retval.0 = phi i32 [ %.lobit.not, %if.then ], [ 0, %if.end ], [ 1, %if.end6 ], [ 0, %if.end39 ], [ 1, %for.cond ]
  ret i32 %retval.0
}
