define i32 @mode_independent_operand(%struct.rtx_def* %op, i32 %mode) #0 {
entry:
  %call = tail call i32 @general_operand(%struct.rtx_def* %op, i32 %mode) #7
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %struct.rtx_def* %op to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.end2, label %return

if.end2:                                          ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load3 = load i32* %2, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %bf.clear4.off = add i32 %bf.clear4, -98
  %not.switch = icmp ugt i32 %bf.clear4.off, 1
  %. = zext i1 %not.switch to i32
  ret i32 %.

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %if.end ]
  ret i32 %retval.0
}
