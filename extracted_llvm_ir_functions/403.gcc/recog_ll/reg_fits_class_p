define i32 @reg_fits_class_p(%struct.rtx_def* nocapture %operand, i32 %class, i32 %offset, i32 %mode) #3 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %operand}, i64 0, metadata !877), !dbg !2048
  tail call void @llvm.dbg.value(metadata !{i32 %class}, i64 0, metadata !878), !dbg !2049
  tail call void @llvm.dbg.value(metadata !{i32 %offset}, i64 0, metadata !879), !dbg !2050
  tail call void @llvm.dbg.value(metadata !{i32 %mode}, i64 0, metadata !880), !dbg !2051
  %arrayidx = getelementptr inbounds %struct.rtx_def* %operand, i64 0, i32 1, i64 0, !dbg !2052
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2052
  %0 = load i32* %rtuint, align 4, !dbg !2052, !tbaa !1168
  tail call void @llvm.dbg.value(metadata !{i32 %0}, i64 0, metadata !881), !dbg !2052
  %cmp = icmp slt i32 %0, 53, !dbg !2053
  br i1 %cmp, label %land.lhs.true, label %return, !dbg !2053

land.lhs.true:                                    ; preds = %entry
  %idxprom = sext i32 %class to i64, !dbg !2053
  %arrayidx1 = getelementptr inbounds [25 x i64]* @reg_class_contents, i64 0, i64 %idxprom, !dbg !2053
  %1 = load i64* %arrayidx1, align 8, !dbg !2053, !tbaa !1329
  %add = add nsw i32 %0, %offset, !dbg !2053
  %sh_prom = zext i32 %add to i64, !dbg !2053
  %shl = shl i64 1, %sh_prom, !dbg !2053
  %and = and i64 %1, %shl, !dbg !2053
  %tobool = icmp eq i64 %and, 0, !dbg !2053
  br i1 %tobool, label %return, label %if.then, !dbg !2053

if.then:                                          ; preds = %land.lhs.true
  tail call void @llvm.dbg.value(metadata !{i32 %add}, i64 0, metadata !881), !dbg !2054
  %add.off = add i32 %add, -8, !dbg !2055
  %2 = icmp ult i32 %add.off, 8, !dbg !2055
  %add.off86 = add i32 %add, -21, !dbg !2055
  %3 = icmp ult i32 %add.off86, 8, !dbg !2055
  %or.cond = or i1 %2, %3, !dbg !2055
  %add.off87 = add i32 %add, -45, !dbg !2055
  %4 = icmp ult i32 %add.off87, 8, !dbg !2055
  %or.cond91 = or i1 %or.cond, %4, !dbg !2055
  %add.off88 = add i32 %add, -29, !dbg !2055
  %5 = icmp ult i32 %add.off88, 8, !dbg !2055
  %or.cond93 = or i1 %or.cond91, %5, !dbg !2055
  br i1 %or.cond93, label %cond.true, label %cond.false, !dbg !2055

cond.true:                                        ; preds = %if.then
  %idxprom17 = sext i32 %mode to i64, !dbg !2055
  %arrayidx18 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom17, !dbg !2055
  %6 = load i32* %arrayidx18, align 4, !dbg !2055, !tbaa !1779
  %cmp19 = icmp eq i32 %6, 5, !dbg !2055
  br i1 %cmp19, label %for.cond, label %lor.rhs, !dbg !2055

lor.rhs:                                          ; preds = %cond.true
  %cmp22 = icmp eq i32 %6, 6, !dbg !2055
  %phitmp = select i1 %cmp22, i32 2, i32 1, !dbg !2055
  br label %for.cond, !dbg !2055

cond.false:                                       ; preds = %if.then
  switch i32 %mode, label %cond.false34 [
    i32 18, label %cond.true24
    i32 24, label %cond.true30
  ], !dbg !2055

cond.true24:                                      ; preds = %cond.false
  %7 = load i32* @target_flags, align 4, !dbg !2055, !tbaa !1168
  %and25 = lshr i32 %7, 25, !dbg !2055
  %8 = and i32 %and25, 1, !dbg !2055
  %9 = xor i32 %8, 3, !dbg !2055
  br label %for.cond, !dbg !2055

cond.true30:                                      ; preds = %cond.false
  %10 = load i32* @target_flags, align 4, !dbg !2055, !tbaa !1168
  %and31 = lshr i32 %10, 24, !dbg !2055
  %11 = and i32 %and31, 2, !dbg !2055
  %12 = xor i32 %11, 6, !dbg !2055
  br label %for.cond, !dbg !2055

cond.false34:                                     ; preds = %cond.false
  %idxprom35 = sext i32 %mode to i64, !dbg !2055
  %arrayidx36 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom35, !dbg !2055
  %13 = load i8* %arrayidx36, align 1, !dbg !2055, !tbaa !1169
  %conv = zext i8 %13 to i32, !dbg !2055
  %14 = load i32* @target_flags, align 4, !dbg !2055, !tbaa !1168
  %and37 = lshr i32 %14, 23, !dbg !2055
  %15 = and i32 %and37, 4, !dbg !2055
  %16 = add i32 %15, 4, !dbg !2055
  %add40 = add i32 %conv, -1, !dbg !2055
  %sub = add i32 %add40, %16, !dbg !2055
  %div = sdiv i32 %sub, %16, !dbg !2055
  br label %for.cond, !dbg !2055

for.cond:                                         ; preds = %cond.true30, %cond.false34, %cond.true24, %lor.rhs, %cond.true, %for.body
  %sr.0.in = phi i32 [ %sr.0, %for.body ], [ %12, %cond.true30 ], [ %div, %cond.false34 ], [ %9, %cond.true24 ], [ %phitmp, %lor.rhs ], [ 2, %cond.true ]
  %sr.0 = add nsw i32 %sr.0.in, -1, !dbg !2055
  %cmp50 = icmp sgt i32 %sr.0, 0, !dbg !2055
  br i1 %cmp50, label %for.body, label %for.end, !dbg !2055

for.body:                                         ; preds = %for.cond
  %add54 = add nsw i32 %sr.0, %add, !dbg !2057
  %sh_prom55 = zext i32 %add54 to i64, !dbg !2057
  %shl56 = shl i64 1, %sh_prom55, !dbg !2057
  %and57 = and i64 %1, %shl56, !dbg !2057
  %tobool58 = icmp eq i64 %and57, 0, !dbg !2057
  br i1 %tobool58, label %for.end, label %for.cond, !dbg !2057

for.end:                                          ; preds = %for.body, %for.cond
  %cmp60 = icmp eq i32 %sr.0, 0, !dbg !2058
  %conv61 = zext i1 %cmp60 to i32, !dbg !2058
  br label %return, !dbg !2058

return:                                           ; preds = %entry, %land.lhs.true, %for.end
  %retval.0 = phi i32 [ %conv61, %for.end ], [ 0, %land.lhs.true ], [ 0, %entry ]
  ret i32 %retval.0, !dbg !2059
}
