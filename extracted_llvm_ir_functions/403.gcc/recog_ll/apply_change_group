define i32 @apply_change_group() #0 {
entry:
  %0 = load i32* @num_changes, align 4, !tbaa !0
  %cmp126 = icmp sgt i32 %0, 0
  br i1 %cmp126, label %for.body, label %for.end94

for.body:                                         ; preds = %for.inc92, %entry
  %indvars.iv131 = phi i64 [ 0, %entry ], [ %indvars.iv.next132, %for.inc92 ]
  %i.0128 = phi i32 [ 0, %entry ], [ %inc93, %for.inc92 ]
  %last_validated.0127 = phi %struct.rtx_def* [ null, %entry ], [ %last_validated.1, %for.inc92 ]
  %1 = load %struct.change_t** @changes, align 8, !tbaa !3
  %object1 = getelementptr inbounds %struct.change_t* %1, i64 %indvars.iv131, i32 0
  %2 = load %struct.rtx_def** %object1, align 8, !tbaa !3
  %cmp2 = icmp eq %struct.rtx_def* %2, null
  %cmp3 = icmp eq %struct.rtx_def* %2, %last_validated.0127
  %or.cond = or i1 %cmp2, %cmp3
  br i1 %or.cond, label %for.inc92, label %if.end

if.end:                                           ; preds = %for.body
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp4 = icmp eq i32 %bf.clear, 66
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.end
  %arrayidx8 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load.i = load i32* %5, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  %cmp.i = icmp eq i32 %bf.clear.i, 70
  br i1 %cmp.i, label %for.inc92, label %memory_address_p.exit

memory_address_p.exit:                            ; preds = %if.then5
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear7 = and i32 %bf.lshr, 255
  %call.i = tail call i32 @legitimate_address_p(i32 %bf.clear7, %struct.rtx_def* %4, i32 0) #6
  %not.tobool.i = icmp eq i32 %call.i, 0
  br i1 %not.tobool.i, label %for.end94split, label %for.inc92

if.else:                                          ; preds = %if.end
  %call11 = tail call i32 @insn_invalid_p(%struct.rtx_def* %2) #7
  %tobool12 = icmp eq i32 %call11, 0
  br i1 %tobool12, label %for.inc92, label %if.then13

if.then13:                                        ; preds = %if.else
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 3
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx16, align 8, !tbaa !3
  %7 = bitcast %struct.rtx_def* %6 to i32*
  %bf.load17 = load i32* %7, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 39
  br i1 %cmp19, label %land.lhs.true, label %if.else80

land.lhs.true:                                    ; preds = %if.then13
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtvec_def**
  %8 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !3
  %num_elem = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 0
  %9 = load i32* %num_elem, align 4, !tbaa !0
  %sub = add nsw i32 %9, -1
  %idxprom22 = sext i32 %sub to i64
  %arrayidx26 = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 1, i64 %idxprom22
  %10 = load %struct.rtx_def** %arrayidx26, align 8, !tbaa !3
  %11 = bitcast %struct.rtx_def* %10 to i32*
  %bf.load27 = load i32* %11, align 8
  %bf.clear28 = and i32 %bf.load27, 65535
  %cmp29 = icmp eq i32 %bf.clear28, 49
  br i1 %cmp29, label %land.lhs.true30, label %for.end94split

land.lhs.true30:                                  ; preds = %land.lhs.true
  %call34 = tail call i32 @asm_noperands(%struct.rtx_def* %6) #7
  %cmp35 = icmp slt i32 %call34, 0
  br i1 %cmp35, label %if.then36, label %if.else80

if.then36:                                        ; preds = %land.lhs.true30
  %cmp41 = icmp eq i32 %9, 2
  br i1 %cmp41, label %if.then42, label %if.else48

if.then42:                                        ; preds = %if.then36
  %arrayidx47 = getelementptr inbounds %struct.rtvec_def* %8, i64 0, i32 1, i64 0
  %12 = load %struct.rtx_def** %arrayidx47, align 8, !tbaa !3
  br label %if.end75

if.else48:                                        ; preds = %if.then36
  %call54 = tail call %struct.rtvec_def* @rtvec_alloc(i32 %sub) #6
  %call55 = tail call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call54) #6
  %arrayidx58 = getelementptr inbounds %struct.rtx_def* %call55, i64 0, i32 1, i64 0
  %rtvec59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtvec_def**
  %13 = load %struct.rtvec_def** %rtvec59, align 8, !tbaa !3
  %num_elem60123 = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 0
  %14 = load i32* %num_elem60123, align 4, !tbaa !0
  %cmp61124 = icmp sgt i32 %14, 0
  br i1 %cmp61124, label %for.body62, label %if.end75

for.body62:                                       ; preds = %if.else48, %for.body62
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body62 ], [ 0, %if.else48 ]
  %15 = phi %struct.rtvec_def* [ %18, %for.body62 ], [ %13, %if.else48 ]
  %16 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !3
  %arrayidx68 = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 1, i64 %indvars.iv
  %17 = load %struct.rtx_def** %arrayidx68, align 8, !tbaa !3
  %arrayidx74 = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %17, %struct.rtx_def** %arrayidx74, align 8, !tbaa !3
  %indvars.iv.next = add i64 %indvars.iv, 1
  %18 = load %struct.rtvec_def** %rtvec59, align 8, !tbaa !3
  %num_elem60 = getelementptr inbounds %struct.rtvec_def* %18, i64 0, i32 0
  %19 = load i32* %num_elem60, align 4, !tbaa !0
  %20 = trunc i64 %indvars.iv.next to i32
  %cmp61 = icmp slt i32 %20, %19
  br i1 %cmp61, label %for.body62, label %if.end75

if.end75:                                         ; preds = %if.else48, %for.body62, %if.then42
  %newpat.0 = phi %struct.rtx_def* [ %12, %if.then42 ], [ %call55, %for.body62 ], [ %call55, %if.else48 ]
  %call79 = tail call i32 @validate_change(%struct.rtx_def* %2, %struct.rtx_def** %rtx16, %struct.rtx_def* %newpat.0, i32 1) #7
  br label %for.inc92

if.else80:                                        ; preds = %land.lhs.true30, %if.then13
  %bf.clear82.off = add i32 %bf.clear18, -48
  %switch = icmp ult i32 %bf.clear82.off, 2
  br i1 %switch, label %for.inc92, label %for.end94split

for.inc92:                                        ; preds = %if.else80, %if.else, %memory_address_p.exit, %if.then5, %for.body, %if.end75
  %last_validated.1 = phi %struct.rtx_def* [ %last_validated.0127, %for.body ], [ %last_validated.0127, %if.end75 ], [ %2, %if.then5 ], [ %2, %memory_address_p.exit ], [ %2, %if.else ], [ %last_validated.0127, %if.else80 ]
  %indvars.iv.next132 = add i64 %indvars.iv131, 1
  %inc93 = add nsw i32 %i.0128, 1
  %21 = load i32* @num_changes, align 4, !tbaa !0
  %22 = trunc i64 %indvars.iv.next132 to i32
  %cmp = icmp slt i32 %22, %21
  br i1 %cmp, label %for.body, label %for.end94

for.end94split:                                   ; preds = %land.lhs.true, %if.else80, %memory_address_p.exit
  %.pre = load i32* @num_changes, align 4, !tbaa !0
  br label %for.end94

for.end94:                                        ; preds = %for.inc92, %for.end94split, %entry
  %23 = phi i32 [ %0, %entry ], [ %.pre, %for.end94split ], [ %21, %for.inc92 ]
  %i.0.lcssa = phi i32 [ 0, %entry ], [ %i.0128, %for.end94split ], [ %inc93, %for.inc92 ]
  %cmp95 = icmp eq i32 %i.0.lcssa, %23
  br i1 %cmp95, label %if.then96, label %if.else97

if.then96:                                        ; preds = %for.end94
  store i32 0, i32* @num_changes, align 4, !tbaa !0
  br label %return

if.else97:                                        ; preds = %for.end94
  tail call void @cancel_changes(i32 0) #7
  br label %return

return:                                           ; preds = %if.else97, %if.then96
  %retval.0 = phi i32 [ 1, %if.then96 ], [ 0, %if.else97 ]
  ret i32 %retval.0
}
