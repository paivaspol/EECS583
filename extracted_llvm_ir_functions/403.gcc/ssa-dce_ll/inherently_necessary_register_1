define internal i32 @inherently_necessary_register_1(%struct.rtx_def** nocapture %current_rtx, i8* nocapture %data) #4 {
entry:
  %0 = load %struct.rtx_def** %current_rtx, align 8, !tbaa !0
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 49, label %return
    i32 59, label %sw.bb1
    i32 61, label %sw.bb2
  ]

sw.bb1:                                           ; preds = %if.end
  br label %return

sw.bb2:                                           ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %2 = load i32* %rtuint, align 4, !tbaa !3
  %cmp3 = icmp ugt i32 %2, 52
  %cmp7 = icmp eq i32 %2, 17
  %or.cond = or i1 %cmp3, %cmp7
  %cmp12 = icmp eq i32 %2, 16
  %or.cond21 = or i1 %or.cond, %cmp12
  %3 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !0
  %cmp14 = icmp eq %struct.rtx_def* %0, %3
  %or.cond22 = or i1 %or.cond21, %cmp14
  %4 = zext i1 %or.cond22 to i32
  %. = xor i32 %4, 1
  ret i32 %.

sw.default:                                       ; preds = %if.end
  br label %return

return:                                           ; preds = %if.end, %entry, %sw.default, %sw.bb1
  %retval.0 = phi i32 [ 0, %sw.default ], [ 0, %sw.bb1 ], [ 0, %entry ], [ -1, %if.end ]
  ret i32 %retval.0
}
