define internal fastcc void @print_int_cst_octal(%union.tree_node* nocapture %c) #0 {
entry:
  %int_cst1 = getelementptr inbounds %union.tree_node* %c, i64 0, i32 0, i32 2
  %high2 = getelementptr inbounds i32* %int_cst1, i64 2
  %0 = bitcast i32* %high2 to i64*
  %1 = load i64* %0, align 8, !tbaa !8
  %low5 = bitcast i32* %int_cst1 to i64*
  %2 = load i64* %low5, align 8, !tbaa !8
  %type = getelementptr inbounds %union.tree_node* %c, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type, align 8, !tbaa !0
  %type6 = bitcast %union.tree_node* %3 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type6, i64 0, i32 6
  %4 = bitcast [4 x i8]* %precision to i32*
  %bf.load = load i32* %4, align 4
  %bf.clear = and i32 %bf.load, 511
  %cmp = icmp eq i32 %bf.clear, 128
  br i1 %cmp, label %if.end19, label %if.else

if.else:                                          ; preds = %entry
  %cmp7 = icmp ugt i32 %bf.clear, 64
  br i1 %cmp7, label %if.then8, label %if.else10

if.then8:                                         ; preds = %if.else
  %sub = add i32 %bf.clear, -64
  %sh_prom = zext i32 %sub to i64
  %shl = shl i64 1, %sh_prom
  %sub9 = add nsw i64 %shl, -1
  %and = and i64 %sub9, %1
  br label %if.end19

if.else10:                                        ; preds = %if.else
  %cmp11 = icmp eq i32 %bf.clear, 64
  br i1 %cmp11, label %if.end19, label %if.else13

if.else13:                                        ; preds = %if.else10
  %sh_prom14 = zext i32 %bf.clear to i64
  %shl15 = shl i64 1, %sh_prom14
  %sub16 = add nsw i64 %shl15, -1
  %and17 = and i64 %sub16, %2
  br label %if.end19

if.end19:                                         ; preds = %if.then8, %if.else10, %if.else13, %entry
  %low.0 = phi i64 [ %2, %entry ], [ %2, %if.then8 ], [ %2, %if.else10 ], [ %and17, %if.else13 ]
  %high.0 = phi i64 [ %1, %entry ], [ %and, %if.then8 ], [ 0, %if.else10 ], [ 0, %if.else13 ]
  %5 = load %struct._IO_FILE** @asmfile, align 8, !tbaa !0
  %fputc = tail call i32 @fputc(i32 48, %struct._IO_FILE* %5) #5
  %6 = load i32* @current_sym_nchars, align 4, !tbaa !3
  %add = add nsw i32 %6, 1
  store i32 %add, i32* @current_sym_nchars, align 4, !tbaa !3
  %shr = lshr i64 %high.0, 2
  %and27 = shl i64 %high.0, 1
  %shl30 = and i64 %and27, 6
  %shr31 = lshr i64 %low.0, 63
  %or = or i64 %shl30, %shr31
  %and32 = and i64 %low.0, 9223372036854775807
  %7 = load %struct._IO_FILE** @asmfile, align 8, !tbaa !0
  %conv = trunc i64 %shr to i32
  %conv33 = trunc i64 %or to i32
  %call34 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([7 x i8]* @.str53, i64 0, i64 0), i32 %conv, i32 %conv33) #6
  %8 = load i32* @current_sym_nchars, align 4, !tbaa !3
  %add35 = add nsw i32 %8, 2
  store i32 %add35, i32* @current_sym_nchars, align 4, !tbaa !3
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %if.end19
  %indvars.iv.i = phi i64 [ 20, %if.end19 ], [ %indvars.iv.next.i, %for.body.i ]
  %9 = load %struct._IO_FILE** @asmfile, align 8, !tbaa !0
  %10 = mul nsw i64 %indvars.iv.i, 3
  %shr.i = lshr i64 %and32, %10
  %shr.tr.i = trunc i64 %shr.i to i32
  %conv.i = and i32 %shr.tr.i, 7
  %call.i = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([5 x i8]* @.str54, i64 0, i64 0), i32 %conv.i) #6
  %11 = trunc i64 %indvars.iv.i to i32
  %cmp.i = icmp sgt i32 %11, 0
  %indvars.iv.next.i = add i64 %indvars.iv.i, -1
  br i1 %cmp.i, label %for.body.i, label %print_octal.exit

print_octal.exit:                                 ; preds = %for.body.i
  %12 = load i32* @current_sym_nchars, align 4, !tbaa !3
  %add.i = add nsw i32 %12, 21
  store i32 %add.i, i32* @current_sym_nchars, align 4, !tbaa !3
  ret void
}
