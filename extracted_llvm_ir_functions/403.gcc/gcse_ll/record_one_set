define internal fastcc void @record_one_set(i32 %regno, %struct.rtx_def* %insn) #0 {
entry:
  %0 = load i32* @reg_set_table_size, align 4, !tbaa !3
  %cmp = icmp sgt i32 %0, %regno
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %add = add nsw i32 %regno, 100
  %1 = load %struct.reg_set*** @reg_set_table, align 8, !tbaa !0
  %2 = bitcast %struct.reg_set** %1 to i8*
  %mul = shl i32 %add, 3
  %conv.i = zext i32 %mul to i64
  %call.i = tail call i8* @xrealloc(i8* %2, i64 %conv.i) #6
  %3 = bitcast i8* %call.i to %struct.reg_set**
  store %struct.reg_set** %3, %struct.reg_set*** @reg_set_table, align 8, !tbaa !0
  %4 = load i32* @reg_set_table_size, align 4, !tbaa !3
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds %struct.reg_set** %3, i64 %idx.ext
  %5 = bitcast %struct.reg_set** %add.ptr to i8*
  %sub = sub nsw i32 %add, %4
  %conv2 = sext i32 %sub to i64
  %mul3 = shl nsw i64 %conv2, 3
  tail call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 %mul3, i32 1, i1 false)
  store i32 %add, i32* @reg_set_table_size, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %6 = load i8** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 4), align 8, !tbaa !0
  %7 = load i8** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 3), align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp5 = icmp slt i64 %sub.ptr.sub, 16
  br i1 %cmp5, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.end
  tail call void @_obstack_newchunk(%struct.obstack* @reg_set_obstack, i32 16) #6
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 3), align 8, !tbaa !0
  br label %if.end8

if.end8:                                          ; preds = %if.then7, %if.end
  %8 = phi i8* [ %.pre, %if.then7 ], [ %7, %if.end ]
  %add.ptr11 = getelementptr inbounds i8* %8, i64 16
  store i8* %add.ptr11, i8** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 3), align 8, !tbaa !0
  %9 = load i8** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 2), align 8, !tbaa !0
  %cmp13 = icmp eq i8* %add.ptr11, %9
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end8
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 10), align 8
  br label %if.end16

if.end16:                                         ; preds = %if.end8, %if.then15
  %sub.ptr.lhs.cast18 = ptrtoint i8* %add.ptr11 to i64
  %10 = load i32* getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 6), align 8, !tbaa !3
  %conv20 = sext i32 %10 to i64
  %add21 = add nsw i64 %conv20, %sub.ptr.lhs.cast18
  %neg = xor i32 %10, -1
  %conv23 = sext i32 %neg to i64
  %and = and i64 %add21, %conv23
  %add.ptr24 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr24, i8** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 3), align 8, !tbaa !0
  %11 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 1), align 8, !tbaa !0
  %sub.ptr.lhs.cast27 = ptrtoint i8* %add.ptr24 to i64
  %sub.ptr.rhs.cast28 = ptrtoint %struct._obstack_chunk* %11 to i64
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28
  %12 = load i8** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 4), align 8, !tbaa !0
  %sub.ptr.lhs.cast32 = ptrtoint i8* %12 to i64
  %sub.ptr.sub34 = sub i64 %sub.ptr.lhs.cast32, %sub.ptr.rhs.cast28
  %cmp35 = icmp sgt i64 %sub.ptr.sub29, %sub.ptr.sub34
  br i1 %cmp35, label %if.then37, label %if.end40

if.then37:                                        ; preds = %if.end16
  store i8* %12, i8** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 3), align 8, !tbaa !0
  br label %if.end40

if.end40:                                         ; preds = %if.then37, %if.end16
  %13 = phi i8* [ %12, %if.then37 ], [ %add.ptr24, %if.end16 ]
  store i8* %13, i8** getelementptr inbounds (%struct.obstack* @reg_set_obstack, i64 0, i32 2), align 8, !tbaa !0
  %14 = bitcast i8* %9 to %struct.reg_set*
  %15 = load i32* @bytes_used, align 4, !tbaa !3
  %add44 = add i32 %15, 16
  store i32 %add44, i32* @bytes_used, align 4, !tbaa !3
  %insn46 = getelementptr inbounds i8* %9, i64 8
  %16 = bitcast i8* %insn46 to %struct.rtx_def**
  store %struct.rtx_def* %insn, %struct.rtx_def** %16, align 8, !tbaa !0
  %idxprom = sext i32 %regno to i64
  %17 = load %struct.reg_set*** @reg_set_table, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.reg_set** %17, i64 %idxprom
  %18 = load %struct.reg_set** %arrayidx, align 8, !tbaa !0
  %next = bitcast i8* %9 to %struct.reg_set**
  store %struct.reg_set* %18, %struct.reg_set** %next, align 8, !tbaa !0
  %19 = load %struct.reg_set*** @reg_set_table, align 8, !tbaa !0
  %arrayidx48 = getelementptr inbounds %struct.reg_set** %19, i64 %idxprom
  store %struct.reg_set* %14, %struct.reg_set** %arrayidx48, align 8, !tbaa !0
  ret void
}
