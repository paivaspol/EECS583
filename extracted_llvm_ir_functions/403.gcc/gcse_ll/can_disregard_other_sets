define internal fastcc i32 @can_disregard_other_sets(%struct.reg_set** nocapture %addr_this_reg, %struct.rtx_def* %insn) #0 {
entry:
  %this_reg.05 = load %struct.reg_set** %addr_this_reg, align 8
  %cmp6 = icmp eq %struct.reg_set* %this_reg.05, null
  br i1 %cmp6, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %arrayidx4.i = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 0
  %rtint5.i = bitcast %union.rtunion_def* %arrayidx4.i to i32*
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %this_reg.09 = phi %struct.reg_set* [ %this_reg.05, %for.body.lr.ph ], [ %this_reg.0, %for.inc ]
  %number_of_reaching_defs.07 = phi i32 [ 0, %for.body.lr.ph ], [ %number_of_reaching_defs.1, %for.inc ]
  %insn1 = getelementptr inbounds %struct.reg_set* %this_reg.09, i64 0, i32 1
  %0 = load %struct.rtx_def** %insn1, align 8, !tbaa !0
  %fld.i = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtint.i = bitcast [1 x %union.rtunion_def]* %fld.i to i32*
  %1 = load i32* %rtint.i, align 4, !tbaa !3
  %idxprom.i = sext i32 %1 to i64
  %2 = load i32** @uid_cuid, align 8, !tbaa !0
  %arrayidx1.i = getelementptr inbounds i32* %2, i64 %idxprom.i
  %3 = load i32* %arrayidx1.i, align 4, !tbaa !3
  %div.i = lshr i32 %3, 6
  %idxprom2.i = zext i32 %div.i to i64
  %4 = load i32* %rtint5.i, align 4, !tbaa !3
  %idxprom6.i = sext i32 %4 to i64
  %5 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !0
  %data.i = getelementptr inbounds %struct.varray_head_tag* %5, i64 0, i32 4
  %bb.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx7.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb.i, i64 0, i64 %idxprom6.i
  %6 = load %struct.basic_block_def** %arrayidx7.i, align 8, !tbaa !0
  %index.i = getelementptr inbounds %struct.basic_block_def* %6, i64 0, i32 11
  %7 = load i32* %index.i, align 4, !tbaa !3
  %idxprom8.i = sext i32 %7 to i64
  %8 = load %struct.simple_bitmap_def*** @reaching_defs, align 8, !tbaa !0
  %arrayidx9.i = getelementptr inbounds %struct.simple_bitmap_def** %8, i64 %idxprom8.i
  %9 = load %struct.simple_bitmap_def** %arrayidx9.i, align 8, !tbaa !0
  %arrayidx10.i = getelementptr inbounds %struct.simple_bitmap_def* %9, i64 0, i32 3, i64 %idxprom2.i
  %10 = load i64* %arrayidx10.i, align 8, !tbaa !5
  %rem.i = and i32 %3, 63
  %sh_prom.i = zext i32 %rem.i to i64
  %11 = shl i64 1, %sh_prom.i
  %and99.i = and i64 %10, %11
  %tobool.i = icmp eq i64 %and99.i, 0
  br i1 %tobool.i, label %if.end.i, label %if.then

if.end.i:                                         ; preds = %for.body
  %arrayidx31.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb.i, i64 0, i64 %idxprom.i
  %12 = load %struct.basic_block_def** %arrayidx31.i, align 8, !tbaa !0
  %index32.i = getelementptr inbounds %struct.basic_block_def* %12, i64 0, i32 11
  %13 = load i32* %index32.i, align 4, !tbaa !3
  %cmp.i = icmp eq i32 %7, %13
  br i1 %cmp.i, label %if.then34.i, label %for.inc

if.then34.i:                                      ; preds = %if.end.i
  %arrayidx44.i = getelementptr inbounds i32* %2, i64 %idxprom6.i
  %14 = load i32* %arrayidx44.i, align 4, !tbaa !3
  %cmp45.i = icmp slt i32 %3, %14
  br i1 %cmp45.i, label %if.then46.i, label %for.inc

if.then46.i:                                      ; preds = %if.then34.i
  %arrayidx48.i = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 3
  %rtx.i = bitcast %union.rtunion_def* %arrayidx48.i to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx.i, align 8, !tbaa !0
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load.i = load i32* %16, align 8
  %bf.clear.i = and i32 %bf.load.i, 65535
  switch i32 %bf.clear.i, label %if.else78.i [
    i32 39, label %if.then
    i32 49, label %def_reaches_here_p.exit
    i32 47, label %def_reaches_here_p.exit
  ]

if.else78.i:                                      ; preds = %if.then46.i
  tail call void @fancy_abort(i8* getelementptr inbounds ([48 x i8]* @.str9, i64 0, i64 0), i32 3382, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.def_reaches_here_p, i64 0, i64 0)) #8
  unreachable

def_reaches_here_p.exit:                          ; preds = %if.then46.i, %if.then46.i
  %reg.0.in.in.i = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 1, i64 0
  %reg.0.in.i = bitcast %union.rtunion_def* %reg.0.in.in.i to %struct.rtx_def**
  %reg.0.i = load %struct.rtx_def** %reg.0.in.i, align 8
  %arrayidx83.i = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 2
  %rtx84.i = bitcast %union.rtunion_def* %arrayidx83.i to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx84.i, align 8, !tbaa !0
  %call.i = tail call i32 @reg_set_between_p(%struct.rtx_def* %reg.0.i, %struct.rtx_def* %17, %struct.rtx_def* %insn) #6
  %lnot.i = icmp eq i32 %call.i, 0
  br i1 %lnot.i, label %def_reaches_here_p.exit.if.then_crit_edge, label %for.inc

def_reaches_here_p.exit.if.then_crit_edge:        ; preds = %def_reaches_here_p.exit
  %.pre = load %struct.rtx_def** %insn1, align 8, !tbaa !0
  br label %if.then

if.then:                                          ; preds = %for.body, %def_reaches_here_p.exit.if.then_crit_edge, %if.then46.i
  %18 = phi %struct.rtx_def* [ %.pre, %def_reaches_here_p.exit.if.then_crit_edge ], [ %0, %if.then46.i ], [ %0, %for.body ]
  %inc = add nsw i32 %number_of_reaching_defs.07, 1
  %arrayidx = getelementptr inbounds %struct.rtx_def* %18, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load = load i32* %20, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %lor.lhs.false [
    i32 39, label %return
    i32 49, label %return
  ]

lor.lhs.false:                                    ; preds = %if.then
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %21 = load %struct.rtx_def** %rtx19, align 8, !tbaa !0
  %22 = load %struct.rtx_def** %rtx22, align 8, !tbaa !0
  %arrayidx24 = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 1, i64 1
  %rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**
  %23 = load %struct.rtx_def** %rtx25, align 8, !tbaa !0
  %call26 = tail call i32 @rtx_equal_p(%struct.rtx_def* %21, %struct.rtx_def* %23) #6
  %tobool27 = icmp eq i32 %call26, 0
  br i1 %tobool27, label %return, label %if.end29

if.end29:                                         ; preds = %lor.lhs.false
  %cmp30 = icmp sgt i32 %number_of_reaching_defs.07, 0
  br i1 %cmp30, label %if.then31, label %if.end58

if.then31:                                        ; preds = %if.end29
  %24 = load %struct.rtx_def** %insn1, align 8, !tbaa !0
  %arrayidx34 = getelementptr inbounds %struct.rtx_def* %24, i64 0, i32 1, i64 3
  %rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**
  %25 = load %struct.rtx_def** %rtx35, align 8, !tbaa !0
  %26 = bitcast %struct.rtx_def* %25 to i32*
  %bf.load36 = load i32* %26, align 8
  %bf.clear37 = and i32 %bf.load36, 65535
  %cmp38 = icmp eq i32 %bf.clear37, 49
  br i1 %cmp38, label %return, label %if.else

if.else:                                          ; preds = %if.then31
  %arrayidx45 = getelementptr inbounds %struct.rtx_def* %25, i64 0, i32 1, i64 1
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %27 = load %struct.rtx_def** %rtx46, align 8, !tbaa !0
  %28 = load %struct.rtx_def** %rtx22, align 8, !tbaa !0
  %arrayidx51 = getelementptr inbounds %struct.rtx_def* %28, i64 0, i32 1, i64 1
  %rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**
  %29 = load %struct.rtx_def** %rtx52, align 8, !tbaa !0
  %call53 = tail call i32 @rtx_equal_p(%struct.rtx_def* %27, %struct.rtx_def* %29) #6
  %tobool54 = icmp eq i32 %call53, 0
  br i1 %tobool54, label %return, label %if.end58

if.end58:                                         ; preds = %if.else, %if.end29
  store %struct.reg_set* %this_reg.09, %struct.reg_set** %addr_this_reg, align 8, !tbaa !0
  br label %for.inc

for.inc:                                          ; preds = %def_reaches_here_p.exit, %if.end.i, %if.then34.i, %if.end58
  %number_of_reaching_defs.1 = phi i32 [ %inc, %if.end58 ], [ %number_of_reaching_defs.07, %def_reaches_here_p.exit ], [ %number_of_reaching_defs.07, %if.then34.i ], [ %number_of_reaching_defs.07, %if.end.i ]
  %next = getelementptr inbounds %struct.reg_set* %this_reg.09, i64 0, i32 0
  %this_reg.0 = load %struct.reg_set** %next, align 8
  %cmp = icmp eq %struct.reg_set* %this_reg.0, null
  br i1 %cmp, label %return, label %for.body

return:                                           ; preds = %for.inc, %if.else, %if.then31, %lor.lhs.false, %if.then, %if.then, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %if.then ], [ 0, %if.then ], [ 0, %lor.lhs.false ], [ 0, %if.then31 ], [ 0, %if.else ], [ %number_of_reaching_defs.1, %for.inc ]
  ret i32 %retval.0
}
