define internal fastcc i32 @try_replace_reg(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn) #0 {
entry:
  %call = tail call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %insn) #6
  %0 = bitcast %struct.rtx_def* %insn to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom97 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom97
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %cond.true, label %cond.end16

cond.true:                                        ; preds = %entry
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load3 = load i32* %3, align 8
  %bf.clear4 = and i32 %bf.load3, 65535
  %cmp5 = icmp eq i32 %bf.clear4, 47
  br i1 %cmp5, label %cond.end16, label %cond.false

cond.false:                                       ; preds = %cond.true
  %call14 = tail call %struct.rtx_def* @single_set_2(%struct.rtx_def* %insn, %struct.rtx_def* %2) #6
  br label %cond.end16

cond.end16:                                       ; preds = %cond.true, %entry, %cond.false
  %cond17 = phi %struct.rtx_def* [ %call14, %cond.false ], [ null, %entry ], [ %2, %cond.true ]
  %call18 = tail call i32 @validate_replace_src(%struct.rtx_def* %from, %struct.rtx_def* %to, %struct.rtx_def* %insn) #6
  %tobool = icmp ne i32 %call18, 0
  %cmp19 = icmp eq %struct.rtx_def* %cond17, null
  %or.cond = or i1 %tobool, %cmp19
  br i1 %or.cond, label %if.end37, label %if.then

if.then:                                          ; preds = %cond.end16
  %arrayidx22 = getelementptr inbounds %struct.rtx_def* %cond17, i64 0, i32 1, i64 1
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx23, align 8, !tbaa !0
  %call24 = tail call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %4, %struct.rtx_def* %from, %struct.rtx_def* %to) #6
  %5 = load %struct.rtx_def** %rtx23, align 8, !tbaa !0
  %call28 = tail call i32 @rtx_equal_p(%struct.rtx_def* %call24, %struct.rtx_def* %5) #6
  %tobool29 = icmp eq i32 %call28, 0
  br i1 %tobool29, label %land.lhs.true30, label %if.end37

land.lhs.true30:                                  ; preds = %if.then
  %call34 = tail call i32 @validate_change(%struct.rtx_def* %insn, %struct.rtx_def** %rtx23, %struct.rtx_def* %call24, i32 0) #6
  %not.tobool35 = icmp ne i32 %call34, 0
  %call18. = zext i1 %not.tobool35 to i32
  br label %if.end37

if.end37:                                         ; preds = %land.lhs.true30, %cond.end16, %if.then
  %src.0 = phi %struct.rtx_def* [ null, %cond.end16 ], [ %call24, %if.then ], [ %call24, %land.lhs.true30 ]
  %success.0 = phi i32 [ %call18, %cond.end16 ], [ 0, %if.then ], [ %call18., %land.lhs.true30 ]
  %tobool38 = icmp eq i32 %success.0, 0
  %cmp40 = icmp eq %struct.rtx_def* %call, null
  %or.cond98 = and i1 %tobool38, %cmp40
  %or.cond98.not = xor i1 %or.cond98, true
  %or.cond99 = or i1 %cmp19, %or.cond98.not
  br i1 %or.cond99, label %if.else, label %if.end59

if.else:                                          ; preds = %if.end37
  br i1 %cmp40, label %if.end70, label %if.end59.thread101

if.end59.thread101:                               ; preds = %if.else
  %arrayidx52 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx53, align 8, !tbaa !0
  %call54 = tail call %struct.rtx_def* @simplify_replace_rtx(%struct.rtx_def* %6, %struct.rtx_def* %from, %struct.rtx_def* %to) #6
  %7 = getelementptr inbounds %union.rtunion_def* %arrayidx52, i64 0, i32 0
  %call54.c = ptrtoint %struct.rtx_def* %call54 to i64
  store i64 %call54.c, i64* %7, align 8, !tbaa !0
  br label %land.lhs.true61

if.end59:                                         ; preds = %if.end37
  %call46 = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %src.0) #6
  %call47 = tail call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %insn, i32 4, %struct.rtx_def* %call46) #6
  %tobool60 = icmp eq %struct.rtx_def* %call47, null
  br i1 %tobool60, label %if.end70, label %if.end59.land.lhs.true61_crit_edge

if.end59.land.lhs.true61_crit_edge:               ; preds = %if.end59
  %arrayidx63.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %call47, i64 0, i32 1, i64 0
  %rtx64.phi.trans.insert = bitcast %union.rtunion_def* %arrayidx63.phi.trans.insert to %struct.rtx_def**
  %.pre = load %struct.rtx_def** %rtx64.phi.trans.insert, align 8, !tbaa !0
  br label %land.lhs.true61

land.lhs.true61:                                  ; preds = %if.end59.land.lhs.true61_crit_edge, %if.end59.thread101
  %8 = phi %struct.rtx_def* [ %call54, %if.end59.thread101 ], [ %.pre, %if.end59.land.lhs.true61_crit_edge ]
  %note.0103 = phi %struct.rtx_def* [ %call, %if.end59.thread101 ], [ %call47, %if.end59.land.lhs.true61_crit_edge ]
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load65 = load i32* %9, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  %cmp67 = icmp eq i32 %bf.clear66, 61
  br i1 %cmp67, label %if.then69, label %if.end70

if.then69:                                        ; preds = %land.lhs.true61
  tail call void @remove_note(%struct.rtx_def* %insn, %struct.rtx_def* %note.0103) #6
  br label %if.end70

if.end70:                                         ; preds = %if.else, %if.end59, %if.then69, %land.lhs.true61
  ret i32 %success.0
}
