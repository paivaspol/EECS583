define internal fastcc void @ix86_expand_store_builtin(i32 %icode, %union.tree_node* nocapture %arglist) #1 {
entry:
  %value = getelementptr inbounds %union.tree_node* %arglist, i64 0, i32 0, i32 2
  %0 = bitcast i32* %value to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !4
  %chain = getelementptr inbounds %union.tree_node* %arglist, i64 0, i32 0, i32 0, i32 0
  %2 = load %union.tree_node** %chain, align 8, !tbaa !4
  %value2 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 2
  %3 = bitcast i32* %value2 to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !4
  %call = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %1, %struct.rtx_def* null, i32 0, i32 0) #9
  %call3 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %4, %struct.rtx_def* null, i32 0, i32 0) #9
  %idxprom = zext i32 %icode to i64
  %operand = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, i32 3
  %5 = load %struct.insn_operand_data** %operand, align 8, !tbaa !4
  %mode = getelementptr inbounds %struct.insn_operand_data* %5, i64 0, i32 2
  %6 = bitcast [2 x i8]* %mode to i16*
  %bf.load = load i16* %6, align 8
  %bf.cast = zext i16 %bf.load to i32
  %mode9 = getelementptr inbounds %struct.insn_operand_data* %5, i64 1, i32 2
  %7 = bitcast [2 x i8]* %mode9 to i16*
  %bf.load10 = load i16* %7, align 8
  %bf.cast11 = zext i16 %bf.load10 to i32
  %idxprom12 = zext i16 %bf.load10 to i64
  %arrayidx13 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom12
  %8 = load i32* %arrayidx13, align 4, !tbaa !9
  %.off = add i32 %8, -7
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call17 = tail call fastcc %struct.rtx_def* @safe_vector_operand(%struct.rtx_def* %call3, i32 %bf.cast11) #10
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %op1.0 = phi %struct.rtx_def* [ %call17, %if.then ], [ %call3, %entry ]
  %9 = load i32* @target_flags, align 4, !tbaa !0
  %and = lshr i32 %9, 25
  %10 = and i32 %and, 1
  %11 = or i32 %10, 4
  %call18 = tail call %struct.rtx_def* @copy_to_mode_reg(i32 %11, %struct.rtx_def* %call) #9
  %call19 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast, %struct.rtx_def* %call18) #9
  %predicate = getelementptr inbounds %struct.insn_operand_data* %5, i64 1, i32 0
  %12 = load i32 (%struct.rtx_def*, i32)** %predicate, align 8, !tbaa !4
  %call24 = tail call i32 %12(%struct.rtx_def* %op1.0, i32 %bf.cast11) #9
  %tobool25 = icmp eq i32 %call24, 0
  br i1 %tobool25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end
  %call27 = tail call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast11, %struct.rtx_def* %op1.0) #9
  br label %if.end28

if.end28:                                         ; preds = %if.end, %if.then26
  %op1.1 = phi %struct.rtx_def* [ %op1.0, %if.end ], [ %call27, %if.then26 ]
  %idxprom29 = sext i32 %icode to i64
  %genfun = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom29, i32 2
  %13 = load %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !tbaa !4
  %call31 = tail call %struct.rtx_def* (%struct.rtx_def*, ...)* %13(%struct.rtx_def* %call19, %struct.rtx_def* %op1.1) #9
  %tobool32 = icmp eq %struct.rtx_def* %call31, null
  br i1 %tobool32, label %if.end35, label %if.then33

if.then33:                                        ; preds = %if.end28
  %call34 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call31) #9
  br label %if.end35

if.end35:                                         ; preds = %if.end28, %if.then33
  ret void
}
