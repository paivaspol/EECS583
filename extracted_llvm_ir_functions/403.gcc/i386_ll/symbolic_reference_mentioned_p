define i32 @symbolic_reference_mentioned_p(%struct.rtx_def* nocapture %op) #2 {
entry:
  %0 = bitcast %struct.rtx_def* %op to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %bf.clear.off = add i32 %bf.clear, -67
  %switch = icmp ult i32 %bf.clear.off, 2
  br i1 %switch, label %return, label %if.end

if.end:                                           ; preds = %entry
  %idxprom63 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom63
  %1 = load i8** %arrayidx, align 8, !tbaa !4
  %arrayidx9 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom63
  %2 = load i8* %arrayidx9, align 1, !tbaa !1
  %cmp1066 = icmp eq i8 %2, 0
  br i1 %cmp1066, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %3 = zext i8 %2 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv68 = phi i64 [ %3, %for.body.lr.ph ], [ %indvars.iv.next69, %for.cond.backedge ]
  %indvars.iv.next69 = add i64 %indvars.iv68, -1
  %arrayidx13 = getelementptr inbounds i8* %1, i64 %indvars.iv.next69
  %4 = load i8* %arrayidx13, align 1, !tbaa !1
  switch i8 %4, label %for.cond.backedge [
    i8 69, label %if.then17
    i8 101, label %land.lhs.true
  ]

for.cond.backedge:                                ; preds = %for.cond21, %for.body, %land.lhs.true
  %5 = trunc i64 %indvars.iv.next69 to i32
  %cmp10 = icmp sgt i32 %5, 0
  br i1 %cmp10, label %for.body, label %return

if.then17:                                        ; preds = %for.body
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 %indvars.iv.next69
  %rtvec = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !4
  %num_elem = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 0
  %7 = load i32* %num_elem, align 4, !tbaa !0
  %8 = sext i32 %7 to i64
  br label %for.cond21

for.cond21:                                       ; preds = %for.body24, %if.then17
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body24 ], [ %8, %if.then17 ]
  %indvars.iv.next = add i64 %indvars.iv, -1
  %9 = trunc i64 %indvars.iv to i32
  %cmp22 = icmp sgt i32 %9, 0
  br i1 %cmp22, label %for.body24, label %for.cond.backedge

for.body24:                                       ; preds = %for.cond21
  %arrayidx30 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 1, i64 %indvars.iv.next
  %10 = load %struct.rtx_def** %arrayidx30, align 8, !tbaa !4
  %call = tail call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %10) #10
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %for.cond21, label %return

land.lhs.true:                                    ; preds = %for.body
  %arrayidx40 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 %indvars.iv.next69
  %rtx = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %call41 = tail call i32 @symbolic_reference_mentioned_p(%struct.rtx_def* %11) #10
  %tobool42 = icmp eq i32 %call41, 0
  br i1 %tobool42, label %for.cond.backedge, label %return

return:                                           ; preds = %if.end, %land.lhs.true, %for.cond.backedge, %for.body24, %entry
  %retval.0 = phi i32 [ 1, %entry ], [ 1, %for.body24 ], [ 0, %if.end ], [ 1, %land.lhs.true ], [ 0, %for.cond.backedge ]
  ret i32 %retval.0
}
