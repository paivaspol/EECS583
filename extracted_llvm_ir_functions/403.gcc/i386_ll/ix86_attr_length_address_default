define i32 @ix86_attr_length_address_default(%struct.rtx_def* %insn) #1 {
entry:
  tail call void @extract_insn_cached(%struct.rtx_def* %insn) #9
  %0 = load i8* getelementptr inbounds (%struct.recog_data* @recog_data, i64 0, i32 7), align 4, !tbaa !1
  %1 = sext i8 %0 to i64
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ %1, %entry ]
  %indvars.iv.next = add i64 %indvars.iv, -1
  %2 = trunc i64 %indvars.iv to i32
  %cmp = icmp sgt i32 %2, 0
  br i1 %cmp, label %for.body, label %return

for.body:                                         ; preds = %for.cond
  %arrayidx = getelementptr inbounds %struct.recog_data* @recog_data, i64 0, i32 0, i64 %indvars.iv.next
  %3 = load %struct.rtx_def** %arrayidx, align 8, !tbaa !4
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load = load i32* %4, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 66
  br i1 %cmp2, label %if.then, label %for.cond

if.then:                                          ; preds = %for.body
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %call = tail call fastcc i32 @memory_address_length(%struct.rtx_def* %5) #10
  br label %return

return:                                           ; preds = %for.cond, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %for.cond ]
  ret i32 %retval.0
}
