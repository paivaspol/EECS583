define void @ix86_asm_file_end(%struct._IO_FILE* %file) #1 {
entry:
  %xops = alloca [2 x %struct.rtx_def*], align 16
  %0 = load i32* @ix86_cpu, align 4, !tbaa !3
  %shl = shl i32 1, %0
  %and = and i32 %shl, 120
  %tobool = icmp eq i32 %and, 0
  %1 = load i8* getelementptr inbounds ([32 x i8]* @pic_label_name, i64 0, i64 0), align 16, !tbaa !1
  %cmp = icmp eq i8 %1, 0
  %or.cond = or i1 %tobool, %cmp
  br i1 %or.cond, label %return, label %if.end

if.end:                                           ; preds = %entry
  call void @text_section() #9
  call void @assemble_name(%struct._IO_FILE* %file, i8* getelementptr inbounds ([32 x i8]* @pic_label_name, i64 0, i64 0)) #9
  %2 = call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str77, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %file)
  %3 = load %struct.rtx_def** @pic_offset_table_rtx, align 8, !tbaa !4
  %arrayidx = getelementptr inbounds [2 x %struct.rtx_def*]* %xops, i64 0, i64 0
  store %struct.rtx_def* %3, %struct.rtx_def** %arrayidx, align 16, !tbaa !4
  %4 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !4
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %4) #9
  %arrayidx3 = getelementptr inbounds [2 x %struct.rtx_def*]* %xops, i64 0, i64 1
  store %struct.rtx_def* %call2, %struct.rtx_def** %arrayidx3, align 8, !tbaa !4
  call void @output_asm_insn(i8* getelementptr inbounds ([23 x i8]* @.str78, i64 0, i64 0), %struct.rtx_def** %arrayidx) #9
  call void @output_asm_insn(i8* getelementptr inbounds ([4 x i8]* @.str79, i64 0, i64 0), %struct.rtx_def** %arrayidx) #9
  br label %return

return:                                           ; preds = %entry, %if.end
  ret void
}
