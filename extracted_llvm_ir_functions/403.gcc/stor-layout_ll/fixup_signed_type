define void @fixup_signed_type(%union.tree_node* %type) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%union.tree_node* %type}, i64 0, metadata !1123), !dbg !1860
  %type1 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !1861
  %precision2 = getelementptr inbounds %struct.tree_type* %type1, i64 0, i32 6, !dbg !1861
  %0 = bitcast [4 x i8]* %precision2 to i32*, !dbg !1861
  %bf.load = load i32* %0, align 4, !dbg !1861
  %bf.clear = and i32 %bf.load, 511, !dbg !1861
  tail call void @llvm.dbg.value(metadata !{i32 %bf.clear}, i64 0, metadata !1124), !dbg !1861
  %cmp = icmp ugt i32 %bf.clear, 128, !dbg !1862
  %.bf.clear = select i1 %cmp, i32 128, i32 %bf.clear, !dbg !1862
  tail call void @llvm.dbg.value(metadata !{i32 %.bf.clear}, i64 0, metadata !1124), !dbg !1863
  %sub = add nsw i32 %.bf.clear, -64, !dbg !1864
  %cmp3 = icmp sgt i32 %sub, 0, !dbg !1864
  br i1 %cmp3, label %cond.end, label %cond.false, !dbg !1864

cond.false:                                       ; preds = %entry
  %sub4 = add nsw i32 %.bf.clear, -1, !dbg !1864
  %sh_prom = zext i32 %sub4 to i64, !dbg !1864
  %shl = shl i64 -1, %sh_prom, !dbg !1864
  br label %cond.end, !dbg !1864

cond.end:                                         ; preds = %entry, %cond.false
  %cond = phi i64 [ %shl, %cond.false ], [ 0, %entry ], !dbg !1864
  %sub6 = add nsw i32 %.bf.clear, -65, !dbg !1864
  %cmp7 = icmp sgt i32 %sub6, 0, !dbg !1864
  %phitmp = zext i32 %sub6 to i64, !dbg !1864
  %phitmp.op = shl i64 -1, %phitmp, !dbg !1864
  %shl15 = select i1 %cmp7, i64 %phitmp.op, i64 -1, !dbg !1864
  %call = tail call %union.tree_node* @build_int_2_wide(i64 %cond, i64 %shl15) #8, !dbg !1864
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 12, !dbg !1864
  store %union.tree_node* %call, %union.tree_node** %1, align 8, !dbg !1864, !tbaa !1183
  br i1 %cmp3, label %cond.end25, label %cond.false20, !dbg !1865

cond.false20:                                     ; preds = %cond.end
  %sub21 = add nsw i32 %.bf.clear, -1, !dbg !1865
  %sh_prom22 = zext i32 %sub21 to i64, !dbg !1865
  %shl23 = shl i64 1, %sh_prom22, !dbg !1865
  %sub24 = add nsw i64 %shl23, -1, !dbg !1865
  br label %cond.end25, !dbg !1865

cond.end25:                                       ; preds = %cond.end, %cond.false20
  %cond26 = phi i64 [ %sub24, %cond.false20 ], [ -1, %cond.end ], !dbg !1865
  br i1 %cmp7, label %cond.true30, label %cond.end37, !dbg !1865

cond.true30:                                      ; preds = %cond.end25
  %shl34 = shl i64 1, %phitmp, !dbg !1865
  %sub35 = add nsw i64 %shl34, -1, !dbg !1865
  br label %cond.end37, !dbg !1865

cond.end37:                                       ; preds = %cond.end25, %cond.true30
  %cond38 = phi i64 [ %sub35, %cond.true30 ], [ 0, %cond.end25 ], !dbg !1865
  %call39 = tail call %union.tree_node* @build_int_2_wide(i64 %cond26, i64 %cond38) #8, !dbg !1865
  %2 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 13, !dbg !1865
  store %union.tree_node* %call39, %union.tree_node** %2, align 8, !dbg !1865, !tbaa !1183
  %3 = load %union.tree_node** %1, align 8, !dbg !1866, !tbaa !1183
  %type43 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1, !dbg !1866
  store %union.tree_node* %type, %union.tree_node** %type43, align 8, !dbg !1866, !tbaa !1183
  %4 = load %union.tree_node** %2, align 8, !dbg !1867, !tbaa !1183
  %type47 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 1, !dbg !1867
  store %union.tree_node* %type, %union.tree_node** %type47, align 8, !dbg !1867, !tbaa !1183
  tail call void @layout_type(%union.tree_node* %type) #10, !dbg !1868
  ret void, !dbg !1869
}
