define internal fastcc void @close_dump_file(i32 %index, void (%struct._IO_FILE*, %struct.rtx_def*)* %func, %struct.rtx_def* %insns) #0 {
entry:
  %seq = alloca [16 x i8], align 16
  %0 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !4
  %tobool = icmp eq %struct._IO_FILE* %0, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  call void @timevar_push(i32 2) #11
  %tobool1 = icmp ne %struct.rtx_def* %insns, null
  %1 = load i32* @graph_dump_format, align 4, !tbaa !6
  %cmp = icmp ne i32 %1, 0
  %or.cond = and i1 %tobool1, %cmp
  br i1 %or.cond, label %land.lhs.true2, label %if.end9

land.lhs.true2:                                   ; preds = %if.end
  %idxprom = zext i32 %index to i64
  %graph_dump_p = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %idxprom, i32 2
  %2 = load i8* %graph_dump_p, align 1, !tbaa !1
  %tobool3 = icmp eq i8 %2, 0
  br i1 %tobool3, label %if.end9, label %if.then4

if.then4:                                         ; preds = %land.lhs.true2
  %arraydecay = getelementptr inbounds [16 x i8]* %seq, i64 0, i64 0
  %call = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([7 x i8]* @.str16, i64 0, i64 0), i32 %index) #11
  %extension = getelementptr inbounds [32 x %struct.dump_file_info]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @dump_file to [32 x %struct.dump_file_info]*), i64 0, i64 %idxprom, i32 0
  %3 = load i8** %extension, align 16, !tbaa !4
  %call8 = call noalias i8* (i8*, ...)* @concat(i8* %arraydecay, i8* %3, i8* null) #11
  %4 = load i8** @dump_base_name, align 8, !tbaa !4
  call void @print_rtl_graph_with_bb(i8* %4, i8* %call8, %struct.rtx_def* %insns) #11
  call void @free(i8* %call8) #11
  br label %if.end9

if.end9:                                          ; preds = %land.lhs.true2, %if.then4, %if.end
  %tobool10 = icmp eq void (%struct._IO_FILE*, %struct.rtx_def*)* %func, null
  %tobool1.not = xor i1 %tobool1, true
  %brmerge = or i1 %tobool10, %tobool1.not
  br i1 %brmerge, label %if.end14, label %if.then13

if.then13:                                        ; preds = %if.end9
  %5 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !4
  call void %func(%struct._IO_FILE* %5, %struct.rtx_def* %insns) #11
  br label %if.end14

if.end14:                                         ; preds = %if.end9, %if.then13
  %6 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !4
  %call15 = call i32 @fflush(%struct._IO_FILE* %6) #11
  %7 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !4
  %call16 = call i32 @fclose(%struct._IO_FILE* %7) #11
  store %struct._IO_FILE* null, %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !4
  call void @timevar_pop(i32 2) #11
  br label %return

return:                                           ; preds = %entry, %if.end14
  ret void
}
