define internal i8* @output_805(%struct.rtx_def** %operands, %struct.rtx_def* nocapture %insn) #1 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def** %operands}, i64 0, metadata !397), !dbg !2679
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %insn}, i64 0, metadata !398), !dbg !2680
  %0 = load i32* @target_flags, align 4, !dbg !2681, !tbaa !1229
  %and = lshr i32 %0, 25, !dbg !2681
  %1 = and i32 %and, 1, !dbg !2681
  %2 = or i32 %1, 4, !dbg !2681
  %3 = load %struct.rtx_def** %operands, align 8, !dbg !2682, !tbaa !1226
  %arrayidx4 = getelementptr inbounds %struct.rtx_def** %operands, i64 4, !dbg !2682
  %4 = load %struct.rtx_def** %arrayidx4, align 8, !dbg !2682, !tbaa !1226
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %2, %struct.rtx_def* %3, %struct.rtx_def* %4) #7, !dbg !2682
  %call5 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 %2, %struct.rtx_def* %call) #7, !dbg !2682
  store %struct.rtx_def* %call5, %struct.rtx_def** %operands, align 8, !dbg !2682, !tbaa !1226
  tail call void @output_asm_insn(i8* getelementptr inbounds ([8 x i8]* @.str1645, i64 0, i64 0), %struct.rtx_def** %operands) #7, !dbg !2683
  %5 = load i32* @target_flags, align 4, !dbg !2684, !tbaa !1229
  %and7 = lshr i32 %5, 22, !dbg !2684
  %6 = and i32 %and7, 8, !dbg !2684
  %i.052 = add i32 %6, -1, !dbg !2684
  %conv53 = sext i32 %i.052 to i64, !dbg !2684
  %arrayidx10 = getelementptr inbounds %struct.rtx_def** %operands, i64 2, !dbg !2684
  %7 = load %struct.rtx_def** %arrayidx10, align 8, !dbg !2684, !tbaa !1226
  %rtwint54 = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0, i32 0, !dbg !2684
  %8 = load i64* %rtwint54, align 8, !dbg !2684, !tbaa !1823
  %cmp55 = icmp slt i64 %conv53, %8, !dbg !2684
  br i1 %cmp55, label %do.body, label %for.body.lr.ph, !dbg !2684

for.body.lr.ph:                                   ; preds = %entry
  %arrayidx23 = getelementptr inbounds %struct.rtx_def** %operands, i64 5, !dbg !2686
  br label %for.body, !dbg !2684

for.body:                                         ; preds = %for.body.lr.ph, %if.end
  %indvars.iv = phi i64 [ %conv53, %for.body.lr.ph ], [ %indvars.iv.next, %if.end ]
  %i.057 = phi i32 [ %i.052, %for.body.lr.ph ], [ %i.0, %if.end ]
  %i.0.in56 = phi i32 [ %6, %for.body.lr.ph ], [ %10, %if.end ]
  %9 = load %struct.rtx_def** %operands, align 8, !dbg !2688, !tbaa !1226
  %10 = trunc i64 %indvars.iv to i32, !dbg !2688
  %mul = shl nsw i32 %10, 4, !dbg !2688
  %conv14 = sext i32 %mul to i64, !dbg !2688
  %call15 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %9, i32 5, i64 %conv14, i32 1, i32 1) #7, !dbg !2688
  store %struct.rtx_def* %call15, %struct.rtx_def** %arrayidx4, align 8, !dbg !2688, !tbaa !1226
  %cmp17 = icmp slt i32 %i.0.in56, 9, !dbg !2686
  %cond21.v = select i1 %cmp17, i32 20, i32 36, !dbg !2686
  %cond21 = add i32 %cond21.v, %i.0.in56, !dbg !2686
  %call22 = tail call %struct.rtx_def* @gen_rtx_REG(i32 6, i32 %cond21) #7, !dbg !2686
  store %struct.rtx_def* %call22, %struct.rtx_def** %arrayidx23, align 8, !dbg !2686, !tbaa !1226
  %11 = load %struct.rtx_def** %arrayidx4, align 8, !dbg !2689, !tbaa !1226
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !2689
  %bf.load = load i32* %12, align 8, !dbg !2689
  %bf.clear = and i32 %bf.load, -16711681, !dbg !2689
  %bf.set = or i32 %bf.clear, 393216, !dbg !2689
  store i32 %bf.set, i32* %12, align 8, !dbg !2689
  %13 = load %struct.rtx_def** %operands, align 8, !dbg !2690, !tbaa !1226
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 0, !dbg !2690
  %rtx = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !2690
  %14 = load %struct.rtx_def** %rtx, align 8, !dbg !2690, !tbaa !1226
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !2690
  %bf.load28 = load i32* %15, align 8, !dbg !2690
  %bf.clear29 = and i32 %bf.load28, 65535, !dbg !2690
  %cmp30 = icmp eq i32 %bf.clear29, 75, !dbg !2690
  br i1 %cmp30, label %if.end, label %if.then, !dbg !2690

if.then:                                          ; preds = %for.body
  tail call void @output_asm_insn(i8* getelementptr inbounds ([4 x i8]* @.str1646, i64 0, i64 0), %struct.rtx_def** %operands) #7, !dbg !2691
  br label %if.end, !dbg !2691

if.end:                                           ; preds = %for.body, %if.then
  tail call void @output_asm_insn(i8* getelementptr inbounds ([23 x i8]* @.str1647, i64 0, i64 0), %struct.rtx_def** %operands) #7, !dbg !2692
  %i.0 = add nsw i32 %i.057, -1, !dbg !2684
  %conv = sext i32 %i.0 to i64, !dbg !2684
  %16 = load %struct.rtx_def** %arrayidx10, align 8, !dbg !2684, !tbaa !1226
  %rtwint = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 0, i32 0, !dbg !2684
  %17 = load i64* %rtwint, align 8, !dbg !2684, !tbaa !1823
  %cmp = icmp slt i64 %conv, %17, !dbg !2684
  %indvars.iv.next = add i64 %indvars.iv, -1, !dbg !2684
  br i1 %cmp, label %do.body, label %for.body, !dbg !2684

do.body:                                          ; preds = %if.end, %entry
  %18 = load %struct._IO_FILE** @asm_out_file, align 8, !dbg !2693, !tbaa !1226
  %arrayidx32 = getelementptr inbounds %struct.rtx_def** %operands, i64 3, !dbg !2693
  %19 = load %struct.rtx_def** %arrayidx32, align 8, !dbg !2693, !tbaa !1226
  %arrayidx34 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 5, !dbg !2693
  %rtint = bitcast %union.rtunion_def* %arrayidx34 to i32*, !dbg !2693
  %20 = load i32* %rtint, align 4, !dbg !2693, !tbaa !1229
  %call35 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([8 x i8]* @.str1648, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str1649, i64 0, i64 0), i32 %20) #7, !dbg !2693
  ret i8* getelementptr inbounds ([1 x i8]* @.str670, i64 0, i64 0), !dbg !2695
}
