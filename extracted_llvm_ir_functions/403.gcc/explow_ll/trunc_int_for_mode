define i64 @trunc_int_for_mode(i64 %c, i32 %mode) #0 {
entry:
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom
  %0 = load i16* %arrayidx, align 2, !tbaa !0
  %conv = zext i16 %0 to i64
  %cmp = icmp eq i32 %mode, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %cond = and i64 %c, 1
  br label %return

if.end:                                           ; preds = %entry
  %cmp3 = icmp ne i16 %0, 0
  %cmp5 = icmp ult i16 %0, 64
  %or.cond = and i1 %cmp3, %cmp5
  br i1 %or.cond, label %if.then7, label %return

if.then7:                                         ; preds = %if.end
  %sub = add i64 %conv, 4294967295
  %sh_prom = and i64 %sub, 4294967295
  %shl = shl i64 1, %sh_prom
  %shl8 = shl i64 %shl, 1
  %sub9 = add nsw i64 %shl8, -1
  %and10 = and i64 %sub9, %c
  %xor = xor i64 %and10, %shl
  %sub11 = sub nsw i64 %xor, %shl
  br label %return

return:                                           ; preds = %if.end, %if.then7, %if.then
  %retval.0 = phi i64 [ %cond, %if.then ], [ %sub11, %if.then7 ], [ %c, %if.end ]
  ret i64 %retval.0
}
