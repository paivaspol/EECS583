define void @emit_stack_save(i32 %save_level, %struct.rtx_def** nocapture %psave, %struct.rtx_def* %after) #1 {
entry:
  %0 = load %struct.rtx_def** %psave, align 8, !tbaa !3
  %1 = load i32* @target_flags, align 4, !tbaa !5
  %and = lshr i32 %1, 25
  %2 = and i32 %and, 1
  %3 = or i32 %2, 4
  %cmp = icmp eq %struct.rtx_def* %0, null
  br i1 %cmp, label %if.then2, label %lor.lhs.false

if.then2:                                         ; preds = %entry
  %cmp3 = icmp eq i32 %save_level, 2
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then2
  %idxprom49 = zext i32 %3 to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom49
  %4 = load i8* %arrayidx, align 1, !tbaa !1
  %conv = zext i8 %4 to i64
  %call = tail call %struct.rtx_def* @assign_stack_local(i32 %3, i64 %conv, i32 0) #4
  store %struct.rtx_def* %call, %struct.rtx_def** %psave, align 8, !tbaa !3
  br label %if.end14

if.else:                                          ; preds = %if.then2
  %call5 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %3) #4
  store %struct.rtx_def* %call5, %struct.rtx_def** %psave, align 8, !tbaa !3
  br label %if.end14

lor.lhs.false:                                    ; preds = %entry
  %5 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp10 = icmp eq i32 %bf.clear, %3
  br i1 %cmp10, label %if.end14, label %if.then12

if.then12:                                        ; preds = %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 1001, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.emit_stack_save, i64 0, i64 0)) #6
  unreachable

if.end14:                                         ; preds = %lor.lhs.false, %if.else, %if.then4
  %sa.0 = phi %struct.rtx_def* [ %call, %if.then4 ], [ %call5, %if.else ], [ %0, %lor.lhs.false ]
  %tobool15 = icmp eq %struct.rtx_def* %after, null
  br i1 %tobool15, label %if.else26, label %if.then16

if.then16:                                        ; preds = %if.end14
  tail call void @start_sequence() #4
  %cmp17 = icmp eq %struct.rtx_def* %sa.0, null
  br i1 %cmp17, label %if.end21, label %if.then19

if.then19:                                        ; preds = %if.then16
  %call20 = tail call %struct.rtx_def* @validize_mem(%struct.rtx_def* %sa.0) #5
  br label %if.end21

if.end21:                                         ; preds = %if.then16, %if.then19
  %sa.1 = phi %struct.rtx_def* [ %call20, %if.then19 ], [ null, %if.then16 ]
  %6 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !3
  %call22 = tail call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %sa.1, %struct.rtx_def* %6) #4
  %call23 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call22) #4
  %call24 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  %call25 = tail call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call24, %struct.rtx_def* %after) #4
  br label %if.end34

if.else26:                                        ; preds = %if.end14
  %cmp27 = icmp eq %struct.rtx_def* %sa.0, null
  br i1 %cmp27, label %if.end31, label %if.then29

if.then29:                                        ; preds = %if.else26
  %call30 = tail call %struct.rtx_def* @validize_mem(%struct.rtx_def* %sa.0) #5
  br label %if.end31

if.end31:                                         ; preds = %if.else26, %if.then29
  %sa.2 = phi %struct.rtx_def* [ %call30, %if.then29 ], [ null, %if.else26 ]
  %7 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !3
  %call32 = tail call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %sa.2, %struct.rtx_def* %7) #4
  %call33 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call32) #4
  br label %if.end34

if.end34:                                         ; preds = %if.end31, %if.end21
  ret void
}
