define %union.tree_node* @c_build_qualified_type(%union.tree_node* %type, i32 %type_quals) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%union.tree_node* %type}, i64 0, metadata !1702), !dbg !3031
  tail call void @llvm.dbg.value(metadata !{i32 %type_quals}, i64 0, metadata !1703), !dbg !3032
  %and = and i32 %type_quals, 4, !dbg !3033
  %tobool = icmp eq i32 %and, 0, !dbg !3033
  %code16.pre = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2, !dbg !3034
  %.pre = bitcast [4 x i8]* %code16.pre to i32*, !dbg !3034
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !3033

land.lhs.true:                                    ; preds = %entry
  %bf.load = load i32* %.pre, align 8, !dbg !3033
  %bf.clear = and i32 %bf.load, 255, !dbg !3033
  switch i32 %bf.clear, label %if.then [
    i32 13, label %lor.lhs.false6
    i32 15, label %lor.lhs.false6
  ], !dbg !3033

lor.lhs.false6:                                   ; preds = %land.lhs.true, %land.lhs.true
  %type8 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1, !dbg !3033
  %0 = load %union.tree_node** %type8, align 8, !dbg !3033, !tbaa !2305
  %code10 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2, !dbg !3033
  %1 = bitcast [4 x i8]* %code10 to i32*, !dbg !3033
  %bf.load11 = load i32* %1, align 8, !dbg !3033
  %bf.clear12 = and i32 %bf.load11, 255, !dbg !3033
  %cmp13 = icmp eq i32 %bf.clear12, 23, !dbg !3033
  br i1 %cmp13, label %if.then, label %if.end, !dbg !3033

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false6
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([26 x i8]* @.str48, i64 0, i64 0)) #9, !dbg !3035
  %and14 = and i32 %type_quals, -5, !dbg !3037
  tail call void @llvm.dbg.value(metadata !{i32 %and14}, i64 0, metadata !1703), !dbg !3037
  br label %if.end, !dbg !3038

if.end:                                           ; preds = %entry, %if.then, %lor.lhs.false6
  %type_quals.addr.0 = phi i32 [ %and14, %if.then ], [ %type_quals, %lor.lhs.false6 ], [ %type_quals, %entry ]
  %bf.load17 = load i32* %.pre, align 8, !dbg !3034
  %bf.clear18 = and i32 %bf.load17, 255, !dbg !3034
  %cmp19 = icmp eq i32 %bf.clear18, 18, !dbg !3034
  br i1 %cmp19, label %if.then20, label %if.end25, !dbg !3034

if.then20:                                        ; preds = %if.end
  %type22 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 1, !dbg !3039
  %2 = load %union.tree_node** %type22, align 8, !dbg !3039, !tbaa !2305
  %call = tail call %union.tree_node* @c_build_qualified_type(%union.tree_node* %2, i32 %type_quals.addr.0) #10, !dbg !3039
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1, !dbg !3039
  %3 = load i8** %values, align 8, !dbg !3039
  %4 = bitcast i8* %3 to %union.tree_node*, !dbg !3039
  %call24 = tail call %union.tree_node* @build_array_type(%union.tree_node* %call, %union.tree_node* %4) #9, !dbg !3039
  ret %union.tree_node* %call24, !dbg !3040

if.end25:                                         ; preds = %if.end
  %call26 = tail call %union.tree_node* @build_qualified_type(%union.tree_node* %type, i32 %type_quals.addr.0) #9, !dbg !3041
  ret %union.tree_node* %call26, !dbg !3040
}
