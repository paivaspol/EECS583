define %union.tree_node* @walk_stmt_tree(%union.tree_node** %tp, %union.tree_node* (%union.tree_node**, i32*, i8*)* %func, i8* %data) #0 {
entry:
  %walk_subtrees = alloca i32, align 4
  %0 = load %union.tree_node** %tp, align 8, !tbaa !3
  %tobool = icmp eq %union.tree_node* %0, null
  br i1 %tobool, label %return, label %if.end

if.end:                                           ; preds = %entry
  %code1 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %1 = bitcast [4 x i8]* %code1 to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default.i [
    i32 171, label %if.end4
    i32 152, label %if.end4
    i32 153, label %if.end4
    i32 154, label %if.end4
    i32 155, label %if.end4
    i32 156, label %if.end4
    i32 157, label %if.end4
    i32 158, label %if.end4
    i32 159, label %if.end4
    i32 160, label %if.end4
    i32 161, label %if.end4
    i32 166, label %if.end4
    i32 162, label %if.end4
    i32 163, label %if.end4
    i32 164, label %if.end4
    i32 165, label %if.end4
    i32 167, label %if.end4
    i32 168, label %if.end4
  ]

sw.default.i:                                     ; preds = %if.end
  %2 = load i32 (i32)** @lang_statement_code_p, align 8, !tbaa !3
  %tobool.i = icmp eq i32 (i32)* %2, null
  br i1 %tobool.i, label %return, label %statement_code_p.exit

statement_code_p.exit:                            ; preds = %sw.default.i
  %call.i = call i32 %2(i32 %bf.clear) #8
  %tobool2 = icmp eq i32 %call.i, 0
  br i1 %tobool2, label %return, label %if.end4

if.end4:                                          ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %statement_code_p.exit
  store i32 1, i32* %walk_subtrees, align 4, !tbaa !0
  %call5 = call %union.tree_node* %func(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #8
  %tobool6 = icmp eq %union.tree_node* %call5, null
  br i1 %tobool6, label %if.end8, label %return

if.end8:                                          ; preds = %if.end4
  %3 = load %union.tree_node** %tp, align 8, !tbaa !3
  %code10 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast [4 x i8]* %code10 to i32*
  %bf.load11 = load i32* %4, align 8
  %bf.clear12 = and i32 %bf.load11, 255
  switch i32 %bf.clear12, label %sw.default.i45 [
    i32 171, label %if.end16
    i32 152, label %if.end16
    i32 153, label %if.end16
    i32 154, label %if.end16
    i32 155, label %if.end16
    i32 156, label %if.end16
    i32 157, label %if.end16
    i32 158, label %if.end16
    i32 159, label %if.end16
    i32 160, label %if.end16
    i32 161, label %if.end16
    i32 166, label %if.end16
    i32 162, label %if.end16
    i32 163, label %if.end16
    i32 164, label %if.end16
    i32 165, label %if.end16
    i32 167, label %if.end16
    i32 168, label %if.end16
  ]

sw.default.i45:                                   ; preds = %if.end8
  %5 = load i32 (i32)** @lang_statement_code_p, align 8, !tbaa !3
  %tobool.i44 = icmp eq i32 (i32)* %5, null
  br i1 %tobool.i44, label %return, label %statement_code_p.exit49

statement_code_p.exit49:                          ; preds = %sw.default.i45
  %call.i46 = call i32 %5(i32 %bf.clear12) #8
  %tobool14 = icmp eq i32 %call.i46, 0
  br i1 %tobool14, label %return, label %if.end16

if.end16:                                         ; preds = %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %if.end8, %statement_code_p.exit49
  %6 = load i32* %walk_subtrees, align 4, !tbaa !0
  %tobool17 = icmp eq i32 %6, 0
  br i1 %tobool17, label %if.end25, label %if.then18

if.then18:                                        ; preds = %if.end16
  %idxprom43 = zext i32 %bf.clear12 to i64
  %arrayidx = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom43
  %7 = load i32* %arrayidx, align 4, !tbaa !0
  %cmp56 = icmp sgt i32 %7, 0
  br i1 %cmp56, label %do.body, label %if.end25

for.cond:                                         ; preds = %do.body
  %8 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %8, %7
  br i1 %cmp, label %do.body, label %if.end25

do.body:                                          ; preds = %for.cond, %if.then18
  %indvars.iv = phi i64 [ 0, %if.then18 ], [ %indvars.iv.next, %for.cond ]
  %9 = load %union.tree_node** %tp, align 8, !tbaa !3
  %operands = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 2
  %10 = bitcast i32* %operands to [1 x %union.tree_node*]*
  %arrayidx20 = getelementptr inbounds [1 x %union.tree_node*]* %10, i64 0, i64 %indvars.iv
  %call21 = call %union.tree_node* @walk_stmt_tree(%union.tree_node** %arrayidx20, %union.tree_node* (%union.tree_node**, i32*, i8*)* %func, i8* %data) #9
  %tobool22 = icmp eq %union.tree_node* %call21, null
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %tobool22, label %for.cond, label %return

if.end25:                                         ; preds = %if.then18, %for.cond, %if.end16
  %11 = load %union.tree_node** %tp, align 8, !tbaa !3
  %chain = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 0
  %call27 = call %union.tree_node* @walk_stmt_tree(%union.tree_node** %chain, %union.tree_node* (%union.tree_node**, i32*, i8*)* %func, i8* %data) #9
  br label %return

return:                                           ; preds = %do.body, %sw.default.i45, %sw.default.i, %statement_code_p.exit49, %if.end4, %statement_code_p.exit, %entry, %if.end25
  %retval.0 = phi %union.tree_node* [ %call27, %if.end25 ], [ null, %entry ], [ null, %statement_code_p.exit ], [ %call5, %if.end4 ], [ null, %statement_code_p.exit49 ], [ null, %sw.default.i ], [ null, %sw.default.i45 ], [ %call21, %do.body ]
  ret %union.tree_node* %retval.0
}
