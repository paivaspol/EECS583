define internal fastcc void @dump_prediction(i32 %predictor, i32 %probability, %struct.basic_block_def* nocapture %bb, i32 %used) #0 {
entry:
  %0 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !0
  %tobool = icmp eq %struct._IO_FILE* %0, null
  br i1 %tobool, label %return, label %while.cond.preheader

while.cond.preheader:                             ; preds = %entry
  %succ = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 5
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %while.cond.preheader
  %e.0.in = phi %struct.edge_def** [ %succ_next, %while.cond ], [ %succ, %while.cond.preheader ]
  %e.0 = load %struct.edge_def** %e.0.in, align 8
  %flags = getelementptr inbounds %struct.edge_def* %e.0, i64 0, i32 6
  %1 = load i32* %flags, align 4, !tbaa !3
  %and = and i32 %1, 1
  %tobool1 = icmp eq i32 %and, 0
  %succ_next = getelementptr inbounds %struct.edge_def* %e.0, i64 0, i32 1
  br i1 %tobool1, label %while.end, label %while.cond

while.end:                                        ; preds = %while.cond
  %idxprom = zext i32 %predictor to i64
  %name = getelementptr inbounds [20 x %struct.predictor_info]* @predictor_info, i64 0, i64 %idxprom, i32 0
  %2 = load i8** %name, align 16, !tbaa !0
  %tobool2 = icmp ne i32 %used, 0
  %cond = select i1 %tobool2, i8* getelementptr inbounds ([1 x i8]* @.str4, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8]* @.str5, i64 0, i64 0)
  %conv = sitofp i32 %probability to double
  %mul = fmul double %conv, 1.000000e+02
  %div = fdiv double %mul, 1.000000e+04
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([26 x i8]* @.str3, i64 0, i64 0), i8* %2, i8* %cond, double %div) #5
  %count = getelementptr inbounds %struct.basic_block_def* %bb, i64 0, i32 13
  %3 = load i64* %count, align 8, !tbaa !4
  %tobool3 = icmp eq i64 %3, 0
  br i1 %tobool3, label %if.end18, label %if.then4

if.then4:                                         ; preds = %while.end
  %4 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !0
  %5 = tail call i64 @fwrite(i8* getelementptr inbounds ([8 x i8]* @.str6, i64 0, i64 0), i64 7, i64 1, %struct._IO_FILE* %4)
  %6 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !0
  %7 = load i64* %count, align 8, !tbaa !4
  %call7 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([4 x i8]* @.str7, i64 0, i64 0), i64 %7) #5
  %8 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !0
  %9 = tail call i64 @fwrite(i8* getelementptr inbounds ([6 x i8]* @.str8, i64 0, i64 0), i64 5, i64 1, %struct._IO_FILE* %8)
  %10 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !0
  %count9 = getelementptr inbounds %struct.edge_def* %e.0, i64 0, i32 8
  %11 = load i64* %count9, align 8, !tbaa !4
  %call10 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([4 x i8]* @.str7, i64 0, i64 0), i64 %11) #5
  %12 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !0
  %13 = load i64* %count9, align 8, !tbaa !4
  %conv12 = sitofp i64 %13 to double
  %mul13 = fmul double %conv12, 1.000000e+02
  %14 = load i64* %count, align 8, !tbaa !4
  %conv15 = sitofp i64 %14 to double
  %div16 = fdiv double %mul13, %conv15
  %call17 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([10 x i8]* @.str9, i64 0, i64 0), double %div16) #5
  br label %if.end18

if.end18:                                         ; preds = %while.end, %if.then4
  %15 = load %struct._IO_FILE** @rtl_dump_file, align 8, !tbaa !0
  %fputc = tail call i32 @fputc(i32 10, %struct._IO_FILE* %15)
  br label %return

return:                                           ; preds = %entry, %if.end18
  ret void
}
