define %union.tree_node* @expand_start_stmt_expr(i32 %has_scope) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 120) #7
  tail call void @do_pending_stack_adjust() #7
  %tobool = icmp eq i32 %has_scope, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  tail call void @start_sequence_for_rtl_expr(%union.tree_node* %call) #7
  br label %if.end

if.else:                                          ; preds = %entry
  tail call void @start_sequence() #7
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %0 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr = getelementptr inbounds %struct.function* %0, i64 0, i32 2
  %1 = load %struct.expr_status** %expr, align 8, !tbaa !0
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %1, i64 0, i32 1
  %2 = load i32* %x_inhibit_defer_pop, align 4, !tbaa !4
  %add = add nsw i32 %2, 1
  store i32 %add, i32* %x_inhibit_defer_pop, align 4, !tbaa !4
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %3 = load %struct.stmt_status** %stmt, align 8, !tbaa !0
  %x_expr_stmts_for_value = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 10
  %4 = load i32* %x_expr_stmts_for_value, align 4, !tbaa !4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %x_expr_stmts_for_value, align 4, !tbaa !4
  %x_last_expr_value = getelementptr inbounds %struct.stmt_status* %3, i64 0, i32 9
  store %struct.rtx_def* null, %struct.rtx_def** %x_last_expr_value, align 8, !tbaa !0
  ret %union.tree_node* %call
}
