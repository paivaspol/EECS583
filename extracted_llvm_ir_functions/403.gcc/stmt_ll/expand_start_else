define void @expand_start_else() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !0
  %stmt = getelementptr inbounds %struct.function* %0, i64 0, i32 1
  %1 = load %struct.stmt_status** %stmt, align 8, !tbaa !0
  %x_cond_stack = getelementptr inbounds %struct.stmt_status* %1, i64 0, i32 2
  %2 = load %struct.nesting** %x_cond_stack, align 8, !tbaa !0
  %data = getelementptr inbounds %struct.nesting* %2, i64 0, i32 4
  %endif_label = bitcast %union.anon.3* %data to %struct.rtx_def**
  %3 = load %struct.rtx_def** %endif_label, align 8, !tbaa !0
  %cmp = icmp eq %struct.rtx_def* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @gen_label_rtx() #7
  %4 = load %struct.function** @cfun, align 8, !tbaa !0
  %stmt1 = getelementptr inbounds %struct.function* %4, i64 0, i32 1
  %5 = load %struct.stmt_status** %stmt1, align 8, !tbaa !0
  %x_cond_stack2 = getelementptr inbounds %struct.stmt_status* %5, i64 0, i32 2
  %6 = load %struct.nesting** %x_cond_stack2, align 8, !tbaa !0
  %data3 = getelementptr inbounds %struct.nesting* %6, i64 0, i32 4
  %endif_label5 = bitcast %union.anon.3* %data3 to %struct.rtx_def**
  store %struct.rtx_def* %call, %struct.rtx_def** %endif_label5, align 8, !tbaa !0
  %.pre = load %struct.function** @cfun, align 8, !tbaa !0
  %stmt6.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 1
  %.pre21 = load %struct.stmt_status** %stmt6.phi.trans.insert, align 8, !tbaa !0
  %x_cond_stack7.phi.trans.insert = getelementptr inbounds %struct.stmt_status* %.pre21, i64 0, i32 2
  %.pre22 = load %struct.nesting** %x_cond_stack7.phi.trans.insert, align 8, !tbaa !0
  %data8.phi.trans.insert = getelementptr inbounds %struct.nesting* %.pre22, i64 0, i32 4
  %endif_label10.phi.trans.insert = bitcast %union.anon.3* %data8.phi.trans.insert to %struct.rtx_def**
  %.pre23 = load %struct.rtx_def** %endif_label10.phi.trans.insert, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = phi %struct.rtx_def* [ %.pre23, %if.then ], [ %3, %entry ]
  tail call void @emit_jump(%struct.rtx_def* %7) #9
  %8 = load %struct.function** @cfun, align 8, !tbaa !0
  %stmt11 = getelementptr inbounds %struct.function* %8, i64 0, i32 1
  %9 = load %struct.stmt_status** %stmt11, align 8, !tbaa !0
  %x_cond_stack12 = getelementptr inbounds %struct.stmt_status* %9, i64 0, i32 2
  %10 = load %struct.nesting** %x_cond_stack12, align 8, !tbaa !0
  %11 = getelementptr inbounds %struct.nesting* %10, i64 0, i32 4, i32 0, i32 1
  %12 = load %struct.rtx_def** %11, align 8, !tbaa !0
  %call15 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %12) #7
  %13 = load %struct.function** @cfun, align 8, !tbaa !0
  %stmt16 = getelementptr inbounds %struct.function* %13, i64 0, i32 1
  %14 = load %struct.stmt_status** %stmt16, align 8, !tbaa !0
  %x_cond_stack17 = getelementptr inbounds %struct.stmt_status* %14, i64 0, i32 2
  %15 = load %struct.nesting** %x_cond_stack17, align 8, !tbaa !0
  %16 = getelementptr inbounds %struct.nesting* %15, i64 0, i32 4, i32 0, i32 1
  store %struct.rtx_def* null, %struct.rtx_def** %16, align 8, !tbaa !0
  ret void
}
