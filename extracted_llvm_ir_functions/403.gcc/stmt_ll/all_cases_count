define i64 @all_cases_count(%union.tree_node* %type, i32* nocapture %sparseness) #0 {
entry:
  store i32 0, i32* %sparseness, align 4, !tbaa !4
  %code = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2
  %0 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.bb2 [
    i32 11, label %return
    i32 12, label %sw.bb1
    i32 10, label %sw.bb18
  ]

sw.bb1:                                           ; preds = %entry
  br label %return

sw.bb2:                                           ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 13
  %2 = load %union.tree_node** %1, align 8, !tbaa !0
  %cmp = icmp eq %union.tree_node* %2, null
  br i1 %cmp, label %return, label %land.lhs.true

land.lhs.true:                                    ; preds = %sw.bb2
  %3 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 12
  %4 = load %union.tree_node** %3, align 8, !tbaa !0
  %call = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %type, %union.tree_node* %2, %union.tree_node* %4) #7
  %call8 = tail call %union.tree_node* @fold(%union.tree_node* %call) #7
  %cmp9 = icmp eq %union.tree_node* %call8, null
  br i1 %cmp9, label %return, label %land.lhs.true10

land.lhs.true10:                                  ; preds = %land.lhs.true
  %5 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !0
  %call11 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %5) #7
  %call12 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 59, %union.tree_node* %type, %union.tree_node* %call8, %union.tree_node* %call11) #7
  %call13 = tail call %union.tree_node* @fold(%union.tree_node* %call12) #7
  %cmp14 = icmp eq %union.tree_node* %call13, null
  br i1 %cmp14, label %return, label %land.lhs.true15

land.lhs.true15:                                  ; preds = %land.lhs.true10
  %call16 = tail call i32 @host_integerp(%union.tree_node* %call13, i32 1) #7
  %tobool = icmp eq i32 %call16, 0
  br i1 %tobool, label %return, label %if.then

if.then:                                          ; preds = %land.lhs.true15
  %call17 = tail call i64 @tree_low_cst(%union.tree_node* %call13, i32 1) #7
  br label %return

sw.bb18:                                          ; preds = %entry
  %6 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 12
  %7 = load %union.tree_node** %6, align 8, !tbaa !0
  %call21 = tail call i32 @host_integerp(%union.tree_node* %7, i32 0) #7
  %tobool22 = icmp eq i32 %call21, 0
  br i1 %tobool22, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb18
  %8 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 13
  %9 = load %union.tree_node** %8, align 8, !tbaa !0
  %cmp25 = icmp eq %union.tree_node* %9, null
  br i1 %cmp25, label %return, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %call29 = tail call i32 @host_integerp(%union.tree_node* %9, i32 0) #7
  %tobool30 = icmp eq i32 %call29, 0
  br i1 %tobool30, label %return, label %if.end32

if.end32:                                         ; preds = %lor.lhs.false26
  %10 = load %union.tree_node** %6, align 8, !tbaa !0
  %call35 = tail call i64 @tree_low_cst(%union.tree_node* %10, i32 0) #7
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %11 = load i8** %values, align 8
  %cmp3772 = icmp eq i8* %11, null
  br i1 %cmp3772, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end32
  %12 = bitcast i8* %11 to %union.tree_node*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %if.end47
  %lastval.075 = phi i64 [ %call35, %for.body.lr.ph ], [ %call38, %if.end47 ]
  %t.074 = phi %union.tree_node* [ %12, %for.body.lr.ph ], [ %16, %if.end47 ]
  %count.073 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %if.end47 ]
  %value = getelementptr inbounds %union.tree_node* %t.074, i64 0, i32 0, i32 2
  %13 = bitcast i32* %value to %union.tree_node**
  %14 = load %union.tree_node** %13, align 8, !tbaa !0
  %call38 = tail call i64 @tree_low_cst(%union.tree_node* %14, i32 0) #7
  %15 = load i32* %sparseness, align 4, !tbaa !4
  %cmp39 = icmp ne i32 %15, 2
  %cmp41 = icmp sgt i64 %call38, %lastval.075
  %or.cond = and i1 %cmp39, %cmp41
  br i1 %or.cond, label %if.else43, label %if.then42

if.then42:                                        ; preds = %for.body
  store i32 2, i32* %sparseness, align 4, !tbaa !4
  br label %if.end47

if.else43:                                        ; preds = %for.body
  %add = add nsw i64 %count.073, %call35
  %cmp44 = icmp eq i64 %call38, %add
  br i1 %cmp44, label %if.end47, label %if.then45

if.then45:                                        ; preds = %if.else43
  store i32 1, i32* %sparseness, align 4, !tbaa !4
  br label %if.end47

if.end47:                                         ; preds = %if.else43, %if.then45, %if.then42
  %inc = add nsw i64 %count.073, 1
  %chain = getelementptr inbounds %union.tree_node* %t.074, i64 0, i32 0, i32 0, i32 0
  %16 = load %union.tree_node** %chain, align 8, !tbaa !0
  %cmp37 = icmp eq %union.tree_node* %16, null
  br i1 %cmp37, label %return, label %for.body

return:                                           ; preds = %if.end32, %if.end47, %sw.bb1, %if.then, %entry, %lor.lhs.false, %sw.bb18, %lor.lhs.false26, %sw.bb2, %land.lhs.true, %land.lhs.true10, %land.lhs.true15
  %retval.0 = phi i64 [ -1, %land.lhs.true15 ], [ -1, %land.lhs.true10 ], [ -1, %land.lhs.true ], [ -1, %sw.bb2 ], [ -1, %lor.lhs.false26 ], [ -1, %sw.bb18 ], [ -1, %lor.lhs.false ], [ %call17, %if.then ], [ 256, %sw.bb1 ], [ 2, %entry ], [ 0, %if.end32 ], [ %inc, %if.end47 ]
  ret i64 %retval.0
}
