define internal fastcc i8* @resolve_operand_name_1(i8* %p, %union.tree_node* %outputs, %union.tree_node* %inputs) #0 {
entry:
  %call = tail call i8* @strchr(i8* %p, i32 93) #10
  %tobool = icmp eq i8* %call, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([38 x i8]* @.str22, i64 0, i64 0)) #7
  %call1 = tail call i8* @strchr(i8* %p, i32 0) #10
  br label %return

if.end:                                           ; preds = %entry
  %sub.ptr.lhs.cast = ptrtoint i8* %call to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %p to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = add nsw i64 %sub.ptr.sub, -1
  %tobool290 = icmp eq %union.tree_node* %outputs, null
  br i1 %tobool290, label %for.cond14.preheader, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end
  %add.ptr = getelementptr inbounds i8* %p, i64 1
  br label %for.body

for.cond14.preheader:                             ; preds = %for.inc, %if.end
  %op.0.lcssa = phi i32 [ 0, %if.end ], [ %inc, %for.inc ]
  %tobool1585 = icmp eq %union.tree_node* %inputs, null
  %add.ptr45.pre = getelementptr inbounds i8* %p, i64 1
  br i1 %tobool1585, label %for.end44, label %for.body16

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %op.092 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  %t.091 = phi %union.tree_node* [ %outputs, %for.body.lr.ph ], [ %6, %for.inc ]
  %purpose = getelementptr inbounds %union.tree_node* %t.091, i64 0, i32 0, i32 1
  %0 = load i8** %purpose, align 8
  %purpose4 = getelementptr inbounds i8* %0, i64 24
  %1 = bitcast i8* %purpose4 to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !0
  %tobool5 = icmp eq %union.tree_node* %2, null
  br i1 %tobool5, label %for.inc, label %if.then6

if.then6:                                         ; preds = %for.body
  %id7 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 1
  %3 = getelementptr inbounds i8** %id7, i64 1
  %4 = load i8** %3, align 8, !tbaa !0
  %call8 = tail call i32 @strncmp(i8* %4, i8* %add.ptr, i64 %sub) #10
  %cmp = icmp eq i32 %call8, 0
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %if.then6
  %arrayidx = getelementptr inbounds i8* %4, i64 %sub
  %5 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp9 = icmp eq i8 %5, 0
  br i1 %cmp9, label %found, label %for.inc

for.inc:                                          ; preds = %for.body, %land.lhs.true, %if.then6
  %chain = getelementptr inbounds %union.tree_node* %t.091, i64 0, i32 0, i32 0, i32 0
  %6 = load %union.tree_node** %chain, align 8, !tbaa !0
  %inc = add nsw i32 %op.092, 1
  %tobool2 = icmp eq %union.tree_node* %6, null
  br i1 %tobool2, label %for.cond14.preheader, label %for.body

for.body16:                                       ; preds = %for.cond14.preheader, %for.inc40
  %op.187 = phi i32 [ %inc43, %for.inc40 ], [ %op.0.lcssa, %for.cond14.preheader ]
  %t.186 = phi %union.tree_node* [ %13, %for.inc40 ], [ %inputs, %for.cond14.preheader ]
  %purpose19 = getelementptr inbounds %union.tree_node* %t.186, i64 0, i32 0, i32 1
  %7 = load i8** %purpose19, align 8
  %purpose21 = getelementptr inbounds i8* %7, i64 24
  %8 = bitcast i8* %purpose21 to %union.tree_node**
  %9 = load %union.tree_node** %8, align 8, !tbaa !0
  %tobool22 = icmp eq %union.tree_node* %9, null
  br i1 %tobool22, label %for.inc40, label %if.then23

if.then23:                                        ; preds = %for.body16
  %id26 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds i8** %id26, i64 1
  %11 = load i8** %10, align 8, !tbaa !0
  %call29 = tail call i32 @strncmp(i8* %11, i8* %add.ptr45.pre, i64 %sub) #10
  %cmp30 = icmp eq i32 %call29, 0
  br i1 %cmp30, label %land.lhs.true32, label %for.inc40

land.lhs.true32:                                  ; preds = %if.then23
  %arrayidx33 = getelementptr inbounds i8* %11, i64 %sub
  %12 = load i8* %arrayidx33, align 1, !tbaa !1
  %cmp35 = icmp eq i8 %12, 0
  br i1 %cmp35, label %found, label %for.inc40

for.inc40:                                        ; preds = %for.body16, %land.lhs.true32, %if.then23
  %chain42 = getelementptr inbounds %union.tree_node* %t.186, i64 0, i32 0, i32 0, i32 0
  %13 = load %union.tree_node** %chain42, align 8, !tbaa !0
  %inc43 = add nsw i32 %op.187, 1
  %tobool15 = icmp eq %union.tree_node* %13, null
  br i1 %tobool15, label %for.end44, label %for.body16

for.end44:                                        ; preds = %for.cond14.preheader, %for.inc40
  store i8 0, i8* %call, align 1, !tbaa !1
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([29 x i8]* @.str23, i64 0, i64 0), i8* %add.ptr45.pre) #7
  br label %found

found:                                            ; preds = %land.lhs.true, %land.lhs.true32, %for.end44
  %op.2 = phi i32 [ 0, %for.end44 ], [ %op.187, %land.lhs.true32 ], [ %op.092, %land.lhs.true ]
  %call46 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %p, i8* getelementptr inbounds ([3 x i8]* @.str13, i64 0, i64 0), i32 %op.2) #7
  %call47 = tail call i8* @strchr(i8* %p, i32 0) #10
  %cmp48 = icmp ugt i8* %call47, %call
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %found
  tail call void @fancy_abort(i8* getelementptr inbounds ([48 x i8]* @.str, i64 0, i64 0), i32 2184, i8* getelementptr inbounds ([23 x i8]* @__FUNCTION__.resolve_operand_name_1, i64 0, i64 0)) #8
  unreachable

if.end51:                                         ; preds = %found
  %add.ptr52 = getelementptr inbounds i8* %call, i64 1
  %call54 = tail call i64 @strlen(i8* %add.ptr52) #10
  %add = add i64 %call54, 1
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %call47, i8* %add.ptr52, i64 %add, i32 1, i1 false)
  br label %return

return:                                           ; preds = %if.end51, %if.then
  %retval.0 = phi i8* [ %call47, %if.end51 ], [ %call1, %if.then ]
  ret i8* %retval.0
}
