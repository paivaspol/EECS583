define void @final_start_function(%struct.rtx_def* nocapture %first, %struct._IO_FILE* %file, i32 %optimize) #0 {
entry:
  store i32 0, i32* @block_depth, align 4, !tbaa !4
  store %struct.rtx_def* null, %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.rtx_def* %first, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %0 = load i32* %rtint, align 4, !tbaa !4
  %cmp = icmp eq i32 %0, -99
  br i1 %cmp, label %entry.if.end_crit_edge, label %if.then

entry.if.end_crit_edge:                           ; preds = %entry
  %.pre = load i32* @last_linenum, align 4, !tbaa !4
  %.pre12 = load i8** @last_filename, align 8, !tbaa !0
  br label %if.end

if.then:                                          ; preds = %entry
  %arrayidx.i = getelementptr inbounds %struct.rtx_def* %first, i64 0, i32 1, i64 3
  %rtstr.i = bitcast %union.rtunion_def* %arrayidx.i to i8**
  %1 = load i8** %rtstr.i, align 8, !tbaa !0
  store i8* %1, i8** @last_filename, align 8, !tbaa !0
  store i32 %0, i32* @last_linenum, align 4, !tbaa !4
  %2 = load i32* @high_block_linenum, align 4, !tbaa !4
  %cmp.i = icmp sgt i32 %0, %2
  %cond.i = select i1 %cmp.i, i32 %0, i32 %2
  store i32 %cond.i, i32* @high_block_linenum, align 4, !tbaa !4
  %3 = load i32* @high_function_linenum, align 4, !tbaa !4
  %cmp3.i = icmp sgt i32 %0, %3
  %cond7.i = select i1 %cmp3.i, i32 %0, i32 %3
  store i32 %cond7.i, i32* @high_function_linenum, align 4, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %4 = phi i8* [ %.pre12, %entry.if.end_crit_edge ], [ %1, %if.then ]
  %5 = phi i32 [ %.pre, %entry.if.end_crit_edge ], [ %0, %if.then ]
  store i32 %5, i32* @high_function_linenum, align 4, !tbaa !4
  store i32 %5, i32* @high_block_linenum, align 4, !tbaa !4
  %6 = load %struct.gcc_debug_hooks** @debug_hooks, align 8, !tbaa !0
  %begin_prologue = getelementptr inbounds %struct.gcc_debug_hooks* %6, i64 0, i32 10
  %7 = load void (i32, i8*)** %begin_prologue, align 8, !tbaa !0
  tail call void %7(i32 %5, i8* %4) #8
  %8 = load i32* @write_symbols, align 4, !tbaa !6
  switch i32 %8, label %if.then3 [
    i32 7, label %if.end4
    i32 4, label %if.end4
  ]

if.then3:                                         ; preds = %if.end
  tail call void @dwarf2out_begin_prologue(i32 0, i8* null) #8
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.end, %if.then3
  %call = tail call i32 @dwarf2out_do_frame() #8
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end4
  tail call void @dwarf2out_frame_debug(%struct.rtx_def* null) #8
  br label %if.end6

if.end6:                                          ; preds = %if.end4, %if.then5
  %9 = load i32* @write_symbols, align 4, !tbaa !6
  %tobool7 = icmp eq i32 %9, 0
  br i1 %tobool7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.end6
  tail call void @remove_unnecessary_notes() #8
  tail call void @reorder_blocks() #8
  %10 = load %union.tree_node** @current_function_decl, align 8, !tbaa !0
  tail call void @number_blocks(%union.tree_node* %10) #8
  %11 = load %union.tree_node** @current_function_decl, align 8, !tbaa !0
  %initial = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 12
  %12 = load %union.tree_node** %initial, align 8, !tbaa !0
  %asm_written_flag = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %13 = bitcast [4 x i8]* %asm_written_flag to i32*
  %bf.load = load i32* %13, align 8
  %bf.set = or i32 %bf.load, 16384
  store i32 %bf.set, i32* %13, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.end6, %if.then8
  %14 = load void (%struct._IO_FILE*, i64)** getelementptr inbounds (%struct.gcc_target* @targetm, i64 0, i32 0, i32 6), align 8, !tbaa !0
  %call10 = tail call i64 @get_frame_size() #8
  tail call void %14(%struct._IO_FILE* %file, i64 %call10) #8
  ret void
}
