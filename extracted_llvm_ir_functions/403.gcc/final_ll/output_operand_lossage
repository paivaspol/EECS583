define void @output_operand_lossage(i8* %msgid, ...) #0 {
entry:
  %fmt_string = alloca i8*, align 8
  %new_message = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %0 = load %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !0
  %tobool = icmp ne %struct.rtx_def* %0, null
  %cond = select i1 %tobool, i8* getelementptr inbounds ([16 x i8]* @.str26, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8]* @.str27, i64 0, i64 0)
  %call = call i32 (i8**, i8*, ...)* @asprintf(i8** %fmt_string, i8* getelementptr inbounds ([5 x i8]* @.str28, i64 0, i64 0), i8* %cond, i8* %msgid) #8
  %1 = load i8** %fmt_string, align 8, !tbaa !0
  %call3 = call i32 @vasprintf(i8** %new_message, i8* %1, %struct.__va_list_tag* %arraydecay) #8
  %2 = load %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !0
  %tobool4 = icmp eq %struct.rtx_def* %2, null
  %3 = load i8** %new_message, align 8, !tbaa !0
  br i1 %tobool4, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void (%struct.rtx_def*, i8*, ...)* @error_for_asm(%struct.rtx_def* %2, i8* getelementptr inbounds ([3 x i8]* @.str7, i64 0, i64 0), i8* %3) #8
  %4 = load i8** %fmt_string, align 8, !tbaa !0
  call void @free(i8* %4) #8
  %5 = load i8** %new_message, align 8, !tbaa !0
  call void @free(i8* %5) #8
  call void @llvm.va_end(i8* %arraydecay1)
  ret void

if.else:                                          ; preds = %entry
  call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([3 x i8]* @.str7, i64 0, i64 0), i8* %3) #11
  unreachable
}
