define void @output_asm_insn(i8* nocapture %template, %struct.rtx_def** nocapture %operands) #0 {
entry:
  %x.addr.i = alloca %struct.rtx_def*, align 8
  %oporder = alloca [30 x i32], align 16
  %opoutput = alloca [30 x i8], align 16
  %0 = bitcast [30 x i32]* %oporder to i8*
  call void @llvm.lifetime.start(i64 120, i8* %0) #7
  %1 = load i8* %template, align 1, !tbaa !1
  %cmp = icmp eq i8 %1, 0
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %2 = getelementptr inbounds [30 x i8]* %opoutput, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 30, i32 16, i1 false)
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call = call i32 @_IO_putc(i32 9, %struct._IO_FILE* %3) #8
  %4 = load i8* %template, align 1, !tbaa !1
  %tobool368 = icmp eq i8 %4, 0
  br i1 %tobool368, label %while.end268, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %if.end
  %arraydecay = getelementptr inbounds [30 x i32]* %oporder, i64 0, i64 0
  %5 = bitcast %struct.rtx_def** %x.addr.i to i8*
  br label %while.body

while.body:                                       ; preds = %while.body.lr.ph, %while.cond.backedge
  %conv2373.in = phi i8 [ %4, %while.body.lr.ph ], [ %18, %while.cond.backedge ]
  %template.pn = phi i8* [ %template, %while.body.lr.ph ], [ %p.0.be, %while.cond.backedge ]
  %ops.0370 = phi i32 [ 0, %while.body.lr.ph ], [ %ops.0.be, %while.cond.backedge ]
  %dialect.0369 = phi i32 [ 0, %while.body.lr.ph ], [ %dialect.0.be, %while.cond.backedge ]
  %incdec.ptr372 = getelementptr inbounds i8* %template.pn, i64 1
  %conv2373 = sext i8 %conv2373.in to i32
  switch i32 %conv2373, label %sw.default [
    i32 10, label %sw.bb
    i32 123, label %sw.bb10
    i32 124, label %sw.bb43
    i32 125, label %sw.bb58
    i32 37, label %sw.bb63
  ]

sw.bb:                                            ; preds = %while.body
  %6 = load i32* @flag_verbose_asm, align 4, !tbaa !4
  %tobool3 = icmp eq i32 %6, 0
  br i1 %tobool3, label %if.end5, label %if.then4

if.then4:                                         ; preds = %sw.bb
  call fastcc void @output_asm_operand_names(%struct.rtx_def** %operands, i32* %arraydecay, i32 %ops.0370) #10
  br label %if.end5

if.end5:                                          ; preds = %sw.bb, %if.then4
  %7 = load i32* @flag_print_asm_name, align 4, !tbaa !4
  %tobool6 = icmp eq i32 %7, 0
  br i1 %tobool6, label %if.end8, label %if.then7

if.then7:                                         ; preds = %if.end5
  call fastcc void @output_asm_name() #10
  br label %if.end8

if.end8:                                          ; preds = %if.end5, %if.then7
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 30, i32 16, i1 false)
  %8 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call9 = call i32 @_IO_putc(i32 10, %struct._IO_FILE* %8) #8
  br label %while.cond.backedge

sw.bb10:                                          ; preds = %while.body
  %tobool11 = icmp eq i32 %dialect.0369, 0
  br i1 %tobool11, label %if.end13, label %if.then12

if.then12:                                        ; preds = %sw.bb10
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([37 x i8]* @.str29, i64 0, i64 0)) #10
  br label %if.end13

if.end13:                                         ; preds = %sw.bb10, %if.then12
  %dialect.1 = phi i32 [ %dialect.0369, %if.then12 ], [ 1, %sw.bb10 ]
  %9 = load i32* @dialect_number, align 4, !tbaa !4
  %cmp14363 = icmp sgt i32 %9, 0
  br i1 %cmp14363, label %while.cond16.preheader, label %for.end

while.cond16.preheader:                           ; preds = %if.end13, %for.inc
  %p.1365 = phi i8* [ %p.4, %for.inc ], [ %incdec.ptr372, %if.end13 ]
  %i.0364 = phi i32 [ %inc, %for.inc ], [ 0, %if.end13 ]
  br label %while.cond16

while.cond16:                                     ; preds = %land.rhs, %while.cond16.preheader
  %p.2 = phi i8* [ %p.1365, %while.cond16.preheader ], [ %incdec.ptr22, %land.rhs ]
  %10 = load i8* %p.2, align 1, !tbaa !1
  switch i8 %10, label %land.rhs [
    i8 0, label %while.end
    i8 125, label %while.end
  ]

land.rhs:                                         ; preds = %while.cond16
  %incdec.ptr22 = getelementptr inbounds i8* %p.2, i64 1
  %cmp24 = icmp eq i8 %10, 124
  br i1 %cmp24, label %land.rhs.while.end_crit_edge, label %while.cond16

land.rhs.while.end_crit_edge:                     ; preds = %land.rhs
  %.pre = load i8* %incdec.ptr22, align 1, !tbaa !1
  br label %while.end

while.end:                                        ; preds = %land.rhs.while.end_crit_edge, %while.cond16, %while.cond16
  %11 = phi i8 [ %.pre, %land.rhs.while.end_crit_edge ], [ %10, %while.cond16 ], [ %10, %while.cond16 ]
  %p.3 = phi i8* [ %incdec.ptr22, %land.rhs.while.end_crit_edge ], [ %p.2, %while.cond16 ], [ %p.2, %while.cond16 ]
  switch i8 %11, label %for.inc [
    i8 125, label %for.end
    i8 124, label %if.then35
  ]

if.then35:                                        ; preds = %while.end
  %incdec.ptr36 = getelementptr inbounds i8* %p.3, i64 1
  br label %for.inc

for.inc:                                          ; preds = %while.end, %if.then35
  %p.4 = phi i8* [ %incdec.ptr36, %if.then35 ], [ %p.3, %while.end ]
  %inc = add nsw i32 %i.0364, 1
  %cmp14 = icmp slt i32 %inc, %9
  br i1 %cmp14, label %while.cond16.preheader, label %for.end

for.end:                                          ; preds = %for.inc, %while.end, %if.end13
  %p.5 = phi i8* [ %incdec.ptr372, %if.end13 ], [ %p.3, %while.end ], [ %p.4, %for.inc ]
  %12 = load i8* %p.5, align 1, !tbaa !1
  %cmp39 = icmp eq i8 %12, 0
  br i1 %cmp39, label %if.then41, label %while.cond.backedge

if.then41:                                        ; preds = %for.end
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([42 x i8]* @.str30, i64 0, i64 0)) #10
  br label %while.cond.backedge

sw.bb43:                                          ; preds = %while.body
  %tobool44 = icmp eq i32 %dialect.0369, 0
  br i1 %tobool44, label %if.else55, label %do.body

do.body:                                          ; preds = %sw.bb43, %do.cond
  %p.6 = phi i8* [ %incdec.ptr51, %do.cond ], [ %incdec.ptr372, %sw.bb43 ]
  %13 = load i8* %p.6, align 1, !tbaa !1
  %cmp47 = icmp eq i8 %13, 0
  br i1 %cmp47, label %if.then49, label %do.cond

if.then49:                                        ; preds = %do.body
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([42 x i8]* @.str30, i64 0, i64 0)) #10
  br label %while.cond.backedge

do.cond:                                          ; preds = %do.body
  %incdec.ptr51 = getelementptr inbounds i8* %p.6, i64 1
  %cmp53 = icmp eq i8 %13, 125
  br i1 %cmp53, label %while.cond.backedge, label %do.body

if.else55:                                        ; preds = %sw.bb43
  %14 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call56 = call i32 @_IO_putc(i32 124, %struct._IO_FILE* %14) #8
  br label %while.cond.backedge

sw.bb58:                                          ; preds = %while.body
  %tobool59 = icmp eq i32 %dialect.0369, 0
  br i1 %tobool59, label %if.then60, label %while.cond.backedge

if.then60:                                        ; preds = %sw.bb58
  %15 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call61 = call i32 @_IO_putc(i32 125, %struct._IO_FILE* %15) #8
  br label %while.cond.backedge

sw.bb63:                                          ; preds = %while.body
  %16 = load i8* %incdec.ptr372, align 1, !tbaa !1
  %conv64 = sext i8 %16 to i32
  switch i8 %16, label %if.else77 [
    i8 37, label %if.then67
    i8 61, label %if.then74
  ]

if.then67:                                        ; preds = %sw.bb63
  %incdec.ptr68 = getelementptr inbounds i8* %template.pn, i64 2
  %17 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call69 = call i32 @_IO_putc(i32 37, %struct._IO_FILE* %17) #8
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %sw.bb58, %do.cond, %while.cond239, %while.cond196, %if.then67, %if.then258, %if.else261, %if.then74, %if.else55, %for.end, %if.then41, %sw.default, %if.end8, %if.then49, %if.then60
  %dialect.0.be = phi i32 [ %dialect.0369, %sw.default ], [ %dialect.0369, %if.then67 ], [ %dialect.0369, %if.then74 ], [ %dialect.0369, %if.then258 ], [ %dialect.0369, %if.else261 ], [ 0, %if.else55 ], [ %dialect.1, %if.then41 ], [ %dialect.1, %for.end ], [ %dialect.0369, %if.end8 ], [ 0, %if.then49 ], [ 0, %if.then60 ], [ %dialect.0369, %while.cond196 ], [ %dialect.0369, %while.cond239 ], [ 0, %do.cond ], [ 0, %sw.bb58 ]
  %ops.0.be = phi i32 [ %ops.0370, %sw.default ], [ %ops.0370, %if.then67 ], [ %ops.0370, %if.then74 ], [ %ops.0370, %if.then258 ], [ %ops.0370, %if.else261 ], [ %ops.0370, %if.else55 ], [ %ops.0370, %if.then41 ], [ %ops.0370, %for.end ], [ 0, %if.end8 ], [ %ops.0370, %if.then49 ], [ %ops.0370, %if.then60 ], [ %ops.1, %while.cond196 ], [ %ops.2, %while.cond239 ], [ %ops.0370, %do.cond ], [ %ops.0370, %sw.bb58 ]
  %p.0.be = phi i8* [ %incdec.ptr372, %sw.default ], [ %incdec.ptr68, %if.then67 ], [ %incdec.ptr75, %if.then74 ], [ %incdec.ptr259, %if.then258 ], [ %incdec.ptr372, %if.else261 ], [ %incdec.ptr372, %if.else55 ], [ %p.5, %if.then41 ], [ %p.5, %for.end ], [ %incdec.ptr372, %if.end8 ], [ %p.6, %if.then49 ], [ %incdec.ptr372, %if.then60 ], [ %p.8, %while.cond196 ], [ %p.9, %while.cond239 ], [ %incdec.ptr51, %do.cond ], [ %incdec.ptr372, %sw.bb58 ]
  %18 = load i8* %p.0.be, align 1, !tbaa !1
  %tobool = icmp eq i8 %18, 0
  br i1 %tobool, label %while.end268, label %while.body

if.then74:                                        ; preds = %sw.bb63
  %incdec.ptr75 = getelementptr inbounds i8* %template.pn, i64 2
  %19 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %20 = load i32* @insn_counter, align 4, !tbaa !4
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([3 x i8]* @.str31, i64 0, i64 0), i32 %20) #8
  br label %while.cond.backedge

if.else77:                                        ; preds = %sw.bb63
  %and = and i32 %conv64, 255
  %idxprom353 = zext i32 %and to i64
  %arrayidx = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom353
  %21 = load i16* %arrayidx, align 2, !tbaa !5
  %conv79 = zext i16 %21 to i32
  %and80 = and i32 %conv79, 136
  %tobool81 = icmp eq i32 %and80, 0
  br i1 %tobool81, label %if.else207, label %if.then82

if.then82:                                        ; preds = %if.else77
  %incdec.ptr83 = getelementptr inbounds i8* %template.pn, i64 2
  %call85 = call i32 @atoi(i8* %incdec.ptr83) #9
  %22 = load i8* %incdec.ptr83, align 1, !tbaa !1
  %idxprom88 = zext i8 %22 to i64
  %arrayidx89 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom88
  %23 = load i16* %arrayidx89, align 2, !tbaa !5
  %and91 = and i16 %23, 4
  %tobool92 = icmp eq i16 %and91, 0
  br i1 %tobool92, label %if.then93, label %if.else94

if.then93:                                        ; preds = %if.then82
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([39 x i8]* @.str32, i64 0, i64 0)) #10
  br label %if.end185

if.else94:                                        ; preds = %if.then82
  %24 = load %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !0
  %tobool95 = icmp eq %struct.rtx_def* %24, null
  br i1 %tobool95, label %if.else102, label %land.lhs.true96

land.lhs.true96:                                  ; preds = %if.else94
  %cmp97 = icmp sgt i32 %call85, -1
  %25 = load i32* @insn_noperands, align 4, !tbaa !4
  %cmp99 = icmp ult i32 %call85, %25
  %or.cond = and i1 %cmp97, %cmp99
  br i1 %or.cond, label %if.else102, label %if.then101

if.then101:                                       ; preds = %land.lhs.true96
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([28 x i8]* @.str33, i64 0, i64 0)) #10
  br label %if.end185

if.else102:                                       ; preds = %land.lhs.true96, %if.else94
  switch i8 %16, label %if.else157 [
    i8 108, label %if.then105
    i8 97, label %if.then111
    i8 99, label %if.then117
  ]

if.then105:                                       ; preds = %if.else102
  %idxprom106 = sext i32 %call85 to i64
  %arrayidx107 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom106
  %26 = load %struct.rtx_def** %arrayidx107, align 8, !tbaa !0
  call void @output_asm_label(%struct.rtx_def* %26) #10
  br label %if.end185

if.then111:                                       ; preds = %if.else102
  %idxprom112 = sext i32 %call85 to i64
  %arrayidx113 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom112
  %27 = load %struct.rtx_def** %arrayidx113, align 8, !tbaa !0
  call void @llvm.lifetime.start(i64 8, i8* %5) #7
  store %struct.rtx_def* %27, %struct.rtx_def** %x.addr.i, align 8, !tbaa !0
  %call.i = call fastcc %struct.rtx_def* @walk_alter_subreg(%struct.rtx_def** %x.addr.i) #8
  %28 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %29 = load %struct.rtx_def** %x.addr.i, align 8, !tbaa !0
  call void @print_operand_address(%struct._IO_FILE* %28, %struct.rtx_def* %29) #8
  call void @llvm.lifetime.end(i64 8, i8* %5) #7
  br label %if.end185

if.then117:                                       ; preds = %if.else102
  %idxprom118 = sext i32 %call85 to i64
  %arrayidx119 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom118
  %30 = load %struct.rtx_def** %arrayidx119, align 8, !tbaa !0
  %31 = bitcast %struct.rtx_def* %30 to i32*
  %bf.load = load i32* %31, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.else153 [
    i32 67, label %if.then150
    i32 68, label %if.then150
    i32 54, label %if.then150
    i32 58, label %if.then150
    i32 55, label %if.then150
  ]

if.then150:                                       ; preds = %if.then117, %if.then117, %if.then117, %if.then117, %if.then117
  %32 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  call void @output_addr_const(%struct._IO_FILE* %32, %struct.rtx_def* %30) #10
  br label %if.end185

if.else153:                                       ; preds = %if.then117
  call fastcc void @output_operand(%struct.rtx_def* %30, i32 99) #10
  br label %if.end185

if.else157:                                       ; preds = %if.else102
  %cmp158 = icmp eq i8 %16, 110
  %idxprom161 = sext i32 %call85 to i64
  %arrayidx162 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom161
  %33 = load %struct.rtx_def** %arrayidx162, align 8, !tbaa !0
  br i1 %cmp158, label %if.then160, label %if.else177

if.then160:                                       ; preds = %if.else157
  %34 = bitcast %struct.rtx_def* %33 to i32*
  %bf.load163 = load i32* %34, align 8
  %bf.clear164 = and i32 %bf.load163, 65535
  %cmp165 = icmp eq i32 %bf.clear164, 54
  %35 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  br i1 %cmp165, label %if.then167, label %if.else172

if.then167:                                       ; preds = %if.then160
  %rtwint = getelementptr inbounds %struct.rtx_def* %33, i64 0, i32 1, i64 0, i32 0
  %36 = load i64* %rtwint, align 8, !tbaa !7
  %sub = sub nsw i64 0, %36
  %call171 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([4 x i8]* @.str34, i64 0, i64 0), i64 %sub) #8
  br label %if.end185

if.else172:                                       ; preds = %if.then160
  %call173 = call i32 @_IO_putc(i32 45, %struct._IO_FILE* %35) #8
  %37 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %38 = load %struct.rtx_def** %arrayidx162, align 8, !tbaa !0
  call void @output_addr_const(%struct._IO_FILE* %37, %struct.rtx_def* %38) #10
  br label %if.end185

if.else177:                                       ; preds = %if.else157
  call fastcc void @output_operand(%struct.rtx_def* %33, i32 %conv64) #10
  br label %if.end185

if.end185:                                        ; preds = %if.then101, %if.then111, %if.else177, %if.else172, %if.then167, %if.then150, %if.else153, %if.then105, %if.then93
  %idxprom186 = sext i32 %call85 to i64
  %arrayidx187 = getelementptr inbounds [30 x i8]* %opoutput, i64 0, i64 %idxprom186
  %39 = load i8* %arrayidx187, align 1, !tbaa !1
  %tobool188 = icmp eq i8 %39, 0
  br i1 %tobool188, label %if.then189, label %if.end193

if.then189:                                       ; preds = %if.end185
  %inc190 = add nsw i32 %ops.0370, 1
  %idxprom191 = sext i32 %ops.0370 to i64
  %arrayidx192 = getelementptr inbounds [30 x i32]* %oporder, i64 0, i64 %idxprom191
  store i32 %call85, i32* %arrayidx192, align 4, !tbaa !4
  br label %if.end193

if.end193:                                        ; preds = %if.end185, %if.then189
  %ops.1 = phi i32 [ %ops.0370, %if.end185 ], [ %inc190, %if.then189 ]
  store i8 1, i8* %arrayidx187, align 1, !tbaa !1
  br label %while.cond196

while.cond196:                                    ; preds = %while.cond196, %if.end193
  %p.8 = phi i8* [ %incdec.ptr83, %if.end193 ], [ %incdec.ptr205, %while.cond196 ]
  %40 = load i8* %p.8, align 1, !tbaa !1
  %idxprom199 = zext i8 %40 to i64
  %arrayidx200 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom199
  %41 = load i16* %arrayidx200, align 2, !tbaa !5
  %and202 = and i16 %41, 4
  %tobool203 = icmp eq i16 %and202, 0
  %incdec.ptr205 = getelementptr inbounds i8* %p.8, i64 1
  br i1 %tobool203, label %while.cond.backedge, label %while.cond196

if.else207:                                       ; preds = %if.else77
  %and213 = and i32 %conv79, 4
  %tobool214 = icmp eq i32 %and213, 0
  br i1 %tobool214, label %if.else250, label %if.then215

if.then215:                                       ; preds = %if.else207
  %call216 = call i32 @atoi(i8* %incdec.ptr372) #9
  %42 = load %struct.rtx_def** @this_is_asm_operands, align 8, !tbaa !0
  %tobool217 = icmp eq %struct.rtx_def* %42, null
  br i1 %tobool217, label %if.else225, label %land.lhs.true218

land.lhs.true218:                                 ; preds = %if.then215
  %cmp219 = icmp sgt i32 %call216, -1
  %43 = load i32* @insn_noperands, align 4, !tbaa !4
  %cmp222 = icmp ult i32 %call216, %43
  %or.cond357 = and i1 %cmp219, %cmp222
  br i1 %or.cond357, label %if.else225, label %if.then224

if.then224:                                       ; preds = %land.lhs.true218
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([28 x i8]* @.str33, i64 0, i64 0)) #10
  %idxprom229.pre = sext i32 %call216 to i64
  br label %if.end228

if.else225:                                       ; preds = %land.lhs.true218, %if.then215
  %idxprom226 = sext i32 %call216 to i64
  %arrayidx227 = getelementptr inbounds %struct.rtx_def** %operands, i64 %idxprom226
  %44 = load %struct.rtx_def** %arrayidx227, align 8, !tbaa !0
  call fastcc void @output_operand(%struct.rtx_def* %44, i32 0) #10
  br label %if.end228

if.end228:                                        ; preds = %if.else225, %if.then224
  %idxprom229.pre-phi = phi i64 [ %idxprom226, %if.else225 ], [ %idxprom229.pre, %if.then224 ]
  %arrayidx230 = getelementptr inbounds [30 x i8]* %opoutput, i64 0, i64 %idxprom229.pre-phi
  %45 = load i8* %arrayidx230, align 1, !tbaa !1
  %tobool231 = icmp eq i8 %45, 0
  br i1 %tobool231, label %if.then232, label %if.end236

if.then232:                                       ; preds = %if.end228
  %inc233 = add nsw i32 %ops.0370, 1
  %idxprom234 = sext i32 %ops.0370 to i64
  %arrayidx235 = getelementptr inbounds [30 x i32]* %oporder, i64 0, i64 %idxprom234
  store i32 %call216, i32* %arrayidx235, align 4, !tbaa !4
  br label %if.end236

if.end236:                                        ; preds = %if.end228, %if.then232
  %ops.2 = phi i32 [ %ops.0370, %if.end228 ], [ %inc233, %if.then232 ]
  store i8 1, i8* %arrayidx230, align 1, !tbaa !1
  br label %while.cond239

while.cond239:                                    ; preds = %while.cond239, %if.end236
  %p.9 = phi i8* [ %incdec.ptr372, %if.end236 ], [ %incdec.ptr248, %while.cond239 ]
  %46 = load i8* %p.9, align 1, !tbaa !1
  %idxprom242 = zext i8 %46 to i64
  %arrayidx243 = getelementptr inbounds [256 x i16]* @_sch_istable, i64 0, i64 %idxprom242
  %47 = load i16* %arrayidx243, align 2, !tbaa !5
  %and245 = and i16 %47, 4
  %tobool246 = icmp eq i16 %and245, 0
  %incdec.ptr248 = getelementptr inbounds i8* %p.9, i64 1
  br i1 %tobool246, label %while.cond.backedge, label %while.cond239

if.else250:                                       ; preds = %if.else207
  %.off = add i8 %16, -42
  %switch = icmp ult i8 %.off, 2
  br i1 %switch, label %if.then258, label %if.else261

if.then258:                                       ; preds = %if.else250
  %incdec.ptr259 = getelementptr inbounds i8* %template.pn, i64 2
  %48 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  call void @print_operand(%struct._IO_FILE* %48, %struct.rtx_def* null, i32 %conv64) #8
  br label %while.cond.backedge

if.else261:                                       ; preds = %if.else250
  call void (i8*, ...)* @output_operand_lossage(i8* getelementptr inbounds ([16 x i8]* @.str35, i64 0, i64 0)) #10
  br label %while.cond.backedge

sw.default:                                       ; preds = %while.body
  %49 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call267 = call i32 @_IO_putc(i32 %conv2373, %struct._IO_FILE* %49) #8
  br label %while.cond.backedge

while.end268:                                     ; preds = %while.cond.backedge, %if.end
  %ops.0.lcssa = phi i32 [ 0, %if.end ], [ %ops.0.be, %while.cond.backedge ]
  %50 = load i32* @flag_verbose_asm, align 4, !tbaa !4
  %tobool269 = icmp eq i32 %50, 0
  br i1 %tobool269, label %if.end272, label %if.then270

if.then270:                                       ; preds = %while.end268
  %arraydecay271 = getelementptr inbounds [30 x i32]* %oporder, i64 0, i64 0
  call fastcc void @output_asm_operand_names(%struct.rtx_def** %operands, i32* %arraydecay271, i32 %ops.0.lcssa) #10
  br label %if.end272

if.end272:                                        ; preds = %while.end268, %if.then270
  %51 = load i32* @flag_print_asm_name, align 4, !tbaa !4
  %tobool273 = icmp eq i32 %51, 0
  br i1 %tobool273, label %if.end275, label %if.then274

if.then274:                                       ; preds = %if.end272
  call fastcc void @output_asm_name() #10
  br label %if.end275

if.end275:                                        ; preds = %if.end272, %if.then274
  %52 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call276 = call i32 @_IO_putc(i32 10, %struct._IO_FILE* %52) #8
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end275
  call void @llvm.lifetime.end(i64 120, i8* %0) #7
  ret void
}
