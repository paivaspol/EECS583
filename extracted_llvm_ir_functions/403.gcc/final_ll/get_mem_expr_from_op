define internal fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* %op, i32* nocapture %paddressp) #0 {
entry:
  %inner_addressp = alloca i32, align 4
  store i32 0, i32* %paddressp, align 4, !tbaa !4
  %cmp = icmp eq %struct.rtx_def* %op, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %struct.rtx_def* %op to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %return [
    i32 61, label %land.lhs.true
    i32 66, label %if.end13
  ]

land.lhs.true:                                    ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtuint, align 4, !tbaa !4
  %cmp2 = icmp ugt i32 %1, 52
  br i1 %cmp2, label %if.then3, label %return

if.then3:                                         ; preds = %land.lhs.true
  %idxprom = zext i32 %1 to i64
  %2 = load %struct.function** @cfun, align 8, !tbaa !0
  %emit = getelementptr inbounds %struct.function* %2, i64 0, i32 3
  %3 = load %struct.emit_status** %emit, align 8, !tbaa !0
  %regno_decl = getelementptr inbounds %struct.emit_status* %3, i64 0, i32 11
  %4 = load %union.tree_node*** %regno_decl, align 8, !tbaa !0
  %arrayidx7 = getelementptr inbounds %union.tree_node** %4, i64 %idxprom
  %5 = load %union.tree_node** %arrayidx7, align 8, !tbaa !0
  br label %return

if.end13:                                         ; preds = %if.end
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx15 to %struct.mem_attrs**
  %6 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !0
  %cmp16 = icmp eq %struct.mem_attrs* %6, null
  br i1 %cmp16, label %if.end35, label %cond.false

cond.false:                                       ; preds = %if.end13
  %expr20 = getelementptr inbounds %struct.mem_attrs* %6, i64 0, i32 1
  %7 = load %union.tree_node** %expr20, align 8, !tbaa !0
  %phitmp = icmp eq %union.tree_node* %7, null
  br i1 %phitmp, label %if.end35, label %return

if.end35:                                         ; preds = %cond.false, %if.end13
  store i32 1, i32* %paddressp, align 4, !tbaa !4
  %arrayidx37 = getelementptr inbounds %struct.rtx_def* %op, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %call = call fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* %8, i32* %inner_addressp) #10
  %tobool = icmp eq %union.tree_node* %call, null
  %9 = load i32* %inner_addressp, align 4, !tbaa !4
  %tobool39 = icmp ne i32 %9, 0
  %or.cond = or i1 %tobool, %tobool39
  br i1 %or.cond, label %if.else41, label %return

if.else41:                                        ; preds = %if.end35
  %10 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load42 = load i32* %10, align 8
  %bf.clear43 = and i32 %bf.load42, 65535
  %cmp44 = icmp eq i32 %bf.clear43, 75
  br i1 %cmp44, label %land.lhs.true45, label %while.cond.preheader

land.lhs.true45:                                  ; preds = %if.else41
  %arrayidx47 = getelementptr inbounds %struct.rtx_def* %8, i64 0, i32 1, i64 1
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx48, align 8, !tbaa !0
  %call49 = call fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* %11, i32* %inner_addressp) #10
  %tobool50 = icmp eq %union.tree_node* %call49, null
  br i1 %tobool50, label %land.lhs.true45.while.cond.preheader_crit_edge, label %return

land.lhs.true45.while.cond.preheader_crit_edge:   ; preds = %land.lhs.true45
  %bf.load5495.pre = load i32* %10, align 8
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %land.lhs.true45.while.cond.preheader_crit_edge, %if.else41
  %bf.load5495 = phi i32 [ %bf.load5495.pre, %land.lhs.true45.while.cond.preheader_crit_edge ], [ %bf.load42, %if.else41 ]
  %bf.clear5596 = and i32 %bf.load5495, 65535
  %idxprom569497 = zext i32 %bf.clear5596 to i64
  %arrayidx5798 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom569497
  %12 = load i8* %arrayidx5798, align 1, !tbaa !1
  %.off99 = add i8 %12, -49
  %13 = icmp ult i8 %.off99, 2
  br i1 %13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %op.addr.0100 = phi %struct.rtx_def* [ %14, %while.body ], [ %8, %while.cond.preheader ]
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %op.addr.0100, i64 0, i32 1, i64 0
  %rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx69, align 8, !tbaa !0
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load54 = load i32* %15, align 8
  %bf.clear55 = and i32 %bf.load54, 65535
  %idxprom5694 = zext i32 %bf.clear55 to i64
  %arrayidx57 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom5694
  %16 = load i8* %arrayidx57, align 1, !tbaa !1
  %.off = add i8 %16, -49
  %17 = icmp ult i8 %.off, 2
  br i1 %17, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %while.cond.preheader
  %op.addr.0.lcssa = phi %struct.rtx_def* [ %8, %while.cond.preheader ], [ %14, %while.body ]
  %call70 = call fastcc %union.tree_node* @get_mem_expr_from_op(%struct.rtx_def* %op.addr.0.lcssa, i32* %inner_addressp) #10
  %18 = load i32* %inner_addressp, align 4, !tbaa !4
  %tobool71 = icmp ne i32 %18, 0
  %cond75 = select i1 %tobool71, %union.tree_node* null, %union.tree_node* %call70
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true, %cond.false, %land.lhs.true45, %if.end35, %entry, %while.end, %if.then3
  %retval.0 = phi %union.tree_node* [ %5, %if.then3 ], [ %cond75, %while.end ], [ null, %entry ], [ %call, %if.end35 ], [ %call49, %land.lhs.true45 ], [ %7, %cond.false ], [ null, %land.lhs.true ], [ null, %if.end ]
  ret %union.tree_node* %retval.0
}
