define %struct.rtx_def* @alter_subreg(%struct.rtx_def** nocapture %xp) #0 {
entry:
  %0 = load %struct.rtx_def** %xp, align 8, !tbaa !0
  %fld = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  %3 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load1 = load i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear2 = and i32 %bf.lshr, 255
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx4 to i32*
  %4 = load i32* %rtuint, align 4, !tbaa !4
  %conv = zext i32 %4 to i64
  %call = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %1, i32 %bf.clear2, i64 %conv, i32 1, i32 1) #8
  store %struct.rtx_def* %call, %struct.rtx_def** %xp, align 8, !tbaa !0
  br label %if.end40

if.else:                                          ; preds = %entry
  %bf.lshr9 = lshr i32 %bf.load, 16
  %bf.clear10 = and i32 %bf.lshr9, 255
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtuint13 = bitcast %union.rtunion_def* %arrayidx12 to i32*
  %5 = load i32* %rtuint13, align 4, !tbaa !4
  %call14 = tail call %struct.rtx_def* @simplify_subreg(i32 %bf.clear2, %struct.rtx_def* %1, i32 %bf.clear10, i32 %5) #8
  %cmp15 = icmp eq %struct.rtx_def* %call14, null
  br i1 %cmp15, label %if.else18, label %if.then17

if.then17:                                        ; preds = %if.else
  store %struct.rtx_def* %call14, %struct.rtx_def** %xp, align 8, !tbaa !0
  br label %if.end40

if.else18:                                        ; preds = %if.else
  %bf.load19 = load i32* %2, align 8
  %bf.clear20 = and i32 %bf.load19, 65535
  %cmp21 = icmp eq i32 %bf.clear20, 61
  br i1 %cmp21, label %if.then23, label %if.else38

if.then23:                                        ; preds = %if.else18
  %call24 = tail call i32 @subreg_hard_regno(%struct.rtx_def* %0, i32 1) #8
  %bf.load25 = load i32* %3, align 8
  %bf.clear26 = and i32 %bf.load25, -65536
  %bf.set = or i32 %bf.clear26, 61
  store i32 %bf.set, i32* %3, align 8
  %rtuint29 = bitcast [1 x %union.rtunion_def]* %fld to i32*
  store i32 %call24, i32* %rtuint29, align 4, !tbaa !4
  %arrayidx31 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtuint32 = bitcast %union.rtunion_def* %arrayidx31 to i32*
  %6 = load i32* %rtuint32, align 4, !tbaa !4
  store i32 %6, i32* %rtuint13, align 4, !tbaa !4
  %bf.clear37 = and i32 %bf.set, -536936387
  store i32 %bf.clear37, i32* %3, align 8
  %.pre = load %struct.rtx_def** %xp, align 8, !tbaa !0
  br label %if.end40

if.else38:                                        ; preds = %if.else18
  tail call void @fancy_abort(i8* getelementptr inbounds ([49 x i8]* @.str, i64 0, i64 0), i32 2761, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.alter_subreg, i64 0, i64 0)) #11
  unreachable

if.end40:                                         ; preds = %if.then17, %if.then23, %if.then
  %7 = phi %struct.rtx_def* [ %call14, %if.then17 ], [ %.pre, %if.then23 ], [ %call, %if.then ]
  ret %struct.rtx_def* %7
}
