define %union.tree_node* @array_type_nelts(%union.tree_node* nocapture %type) #0 {
entry:
  %values = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 1
  %0 = load i8** %values, align 8
  %tobool = icmp eq i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !0
  br label %return

if.end:                                           ; preds = %entry
  %minval = getelementptr inbounds i8* %0, i64 104
  %2 = bitcast i8* %minval to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !0
  %maxval = getelementptr inbounds i8* %0, i64 112
  %4 = bitcast i8* %maxval to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !0
  %call = tail call i32 @integer_zerop(%union.tree_node* %3) #10
  %tobool6 = icmp eq i32 %call, 0
  br i1 %tobool6, label %cond.false, label %return

cond.false:                                       ; preds = %if.end
  %type7 = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type7, align 8, !tbaa !0
  %call8 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %6, %union.tree_node* %5, %union.tree_node* %3) #10
  %call9 = tail call %union.tree_node* @fold(%union.tree_node* %call8) #9
  br label %return

return:                                           ; preds = %cond.false, %if.end, %if.then
  %retval.0 = phi %union.tree_node* [ %1, %if.then ], [ %call9, %cond.false ], [ %5, %if.end ]
  ret %union.tree_node* %retval.0
}
