define i32 @tree_int_cst_lt(%union.tree_node* %t1, %union.tree_node* %t2) #3 {
entry:
  %cmp = icmp eq %union.tree_node* %t1, %t2
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type, align 8, !tbaa !0
  %unsigned_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %1 = bitcast [4 x i8]* %unsigned_flag to i32*
  %bf.load = load i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 13
  %bf.clear = and i32 %bf.lshr, 1
  %type3 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type3, align 8, !tbaa !0
  %unsigned_flag5 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %3 = bitcast [4 x i8]* %unsigned_flag5 to i32*
  %bf.load6 = load i32* %3, align 8
  %bf.lshr7 = lshr i32 %bf.load6, 13
  %bf.clear8 = and i32 %bf.lshr7, 1
  %cmp9 = icmp eq i32 %bf.clear, %bf.clear8
  br i1 %cmp9, label %if.else18, label %if.then10

if.then10:                                        ; preds = %if.end
  %int_cst1.i = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 2
  %low.i = bitcast i32* %int_cst1.i to i64*
  %4 = load i64* %low.i, align 8, !tbaa !3
  %cmp.i = icmp eq i64 %4, 0
  br i1 %cmp.i, label %land.lhs.true.i, label %if.else.i

land.lhs.true.i:                                  ; preds = %if.then10
  %high.i = getelementptr inbounds i32* %int_cst1.i, i64 2
  %5 = bitcast i32* %high.i to i64*
  %6 = load i64* %5, align 8, !tbaa !3
  %cmp4.i = icmp eq i64 %6, 0
  br i1 %cmp4.i, label %tree_int_cst_sgn.exit, label %if.else.i

if.else.i:                                        ; preds = %land.lhs.true.i, %if.then10
  %bf.clear.i = and i32 %bf.load, 8192
  %tobool.i = icmp eq i32 %bf.clear.i, 0
  br i1 %tobool.i, label %if.else7.i, label %tree_int_cst_sgn.exit

if.else7.i:                                       ; preds = %if.else.i
  %high10.i = getelementptr inbounds i32* %int_cst1.i, i64 2
  %7 = bitcast i32* %high10.i to i64*
  %8 = load i64* %7, align 8, !tbaa !3
  %cmp11.i = icmp slt i64 %8, 0
  %..i = select i1 %cmp11.i, i32 -1, i32 1
  br label %tree_int_cst_sgn.exit

tree_int_cst_sgn.exit:                            ; preds = %land.lhs.true.i, %if.else.i, %if.else7.i
  %retval.0.i = phi i32 [ 0, %land.lhs.true.i ], [ 1, %if.else.i ], [ %..i, %if.else7.i ]
  %int_cst1.i91 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 2
  %low.i92 = bitcast i32* %int_cst1.i91 to i64*
  %9 = load i64* %low.i92, align 8, !tbaa !3
  %cmp.i93 = icmp eq i64 %9, 0
  br i1 %cmp.i93, label %land.lhs.true.i96, label %if.else.i102

land.lhs.true.i96:                                ; preds = %tree_int_cst_sgn.exit
  %high.i94 = getelementptr inbounds i32* %int_cst1.i91, i64 2
  %10 = bitcast i32* %high.i94 to i64*
  %11 = load i64* %10, align 8, !tbaa !3
  %cmp4.i95 = icmp eq i64 %11, 0
  br i1 %cmp4.i95, label %tree_int_cst_sgn.exit108, label %if.else.i102

if.else.i102:                                     ; preds = %land.lhs.true.i96, %tree_int_cst_sgn.exit
  %bf.clear.i100 = and i32 %bf.load6, 8192
  %tobool.i101 = icmp eq i32 %bf.clear.i100, 0
  br i1 %tobool.i101, label %if.else7.i106, label %tree_int_cst_sgn.exit108

if.else7.i106:                                    ; preds = %if.else.i102
  %high10.i103 = getelementptr inbounds i32* %int_cst1.i91, i64 2
  %12 = bitcast i32* %high10.i103 to i64*
  %13 = load i64* %12, align 8, !tbaa !3
  %cmp11.i104 = icmp slt i64 %13, 0
  %..i105 = select i1 %cmp11.i104, i32 -1, i32 1
  br label %tree_int_cst_sgn.exit108

tree_int_cst_sgn.exit108:                         ; preds = %land.lhs.true.i96, %if.else.i102, %if.else7.i106
  %retval.0.i107 = phi i32 [ 0, %land.lhs.true.i96 ], [ 1, %if.else.i102 ], [ %..i105, %if.else7.i106 ]
  %cmp12 = icmp slt i32 %retval.0.i, %retval.0.i107
  br i1 %cmp12, label %return, label %if.else

if.else:                                          ; preds = %tree_int_cst_sgn.exit108
  %cmp14 = icmp sgt i32 %retval.0.i, %retval.0.i107
  br i1 %cmp14, label %return, label %if.end46

if.else18:                                        ; preds = %if.end
  %tobool = icmp eq i32 %bf.clear, 0
  %int_cst27 = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 2
  br i1 %tobool, label %if.then26, label %if.else18.if.end46_crit_edge

if.else18.if.end46_crit_edge:                     ; preds = %if.else18
  %int_cst51.pre = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 2
  br label %if.end46

if.then26:                                        ; preds = %if.else18
  %high = getelementptr inbounds i32* %int_cst27, i64 2
  %14 = bitcast i32* %high to i64*
  %15 = load i64* %14, align 8, !tbaa !3
  %int_cst29 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 2
  %high30 = getelementptr inbounds i32* %int_cst29, i64 2
  %16 = bitcast i32* %high30 to i64*
  %17 = load i64* %16, align 8, !tbaa !3
  %cmp31 = icmp slt i64 %15, %17
  br i1 %cmp31, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then26
  %cmp38 = icmp eq i64 %15, %17
  br i1 %cmp38, label %land.rhs, label %lor.end

land.rhs:                                         ; preds = %lor.rhs
  %low = bitcast i32* %int_cst27 to i64*
  %18 = load i64* %low, align 8, !tbaa !3
  %low43 = bitcast i32* %int_cst29 to i64*
  %19 = load i64* %low43, align 8, !tbaa !3
  %cmp44 = icmp ult i64 %18, %19
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs, %if.then26
  %20 = phi i1 [ true, %if.then26 ], [ false, %lor.rhs ], [ %cmp44, %land.rhs ]
  %lor.ext = zext i1 %20 to i32
  br label %return

if.end46:                                         ; preds = %if.else, %if.else18.if.end46_crit_edge
  %int_cst51.pre-phi = phi i32* [ %int_cst51.pre, %if.else18.if.end46_crit_edge ], [ %int_cst1.i91, %if.else ]
  %int_cst48.pre-phi = phi i32* [ %int_cst27, %if.else18.if.end46_crit_edge ], [ %int_cst1.i, %if.else ]
  %high49 = getelementptr inbounds i32* %int_cst48.pre-phi, i64 2
  %21 = bitcast i32* %high49 to i64*
  %22 = load i64* %21, align 8, !tbaa !3
  %high52 = getelementptr inbounds i32* %int_cst51.pre-phi, i64 2
  %23 = bitcast i32* %high52 to i64*
  %24 = load i64* %23, align 8, !tbaa !3
  %cmp53 = icmp ult i64 %22, %24
  br i1 %cmp53, label %lor.end71, label %lor.rhs54

lor.rhs54:                                        ; preds = %if.end46
  %cmp61 = icmp eq i64 %22, %24
  br i1 %cmp61, label %land.rhs62, label %lor.end71

land.rhs62:                                       ; preds = %lor.rhs54
  %low65 = bitcast i32* %int_cst48.pre-phi to i64*
  %25 = load i64* %low65, align 8, !tbaa !3
  %low68 = bitcast i32* %int_cst51.pre-phi to i64*
  %26 = load i64* %low68, align 8, !tbaa !3
  %cmp69 = icmp ult i64 %25, %26
  br label %lor.end71

lor.end71:                                        ; preds = %lor.rhs54, %land.rhs62, %if.end46
  %27 = phi i1 [ true, %if.end46 ], [ false, %lor.rhs54 ], [ %cmp69, %land.rhs62 ]
  %lor.ext72 = zext i1 %27 to i32
  br label %return

return:                                           ; preds = %if.else, %tree_int_cst_sgn.exit108, %entry, %lor.end71, %lor.end
  %retval.0 = phi i32 [ %lor.ext72, %lor.end71 ], [ %lor.ext, %lor.end ], [ 0, %entry ], [ 1, %tree_int_cst_sgn.exit108 ], [ 0, %if.else ]
  ret i32 %retval.0
}
