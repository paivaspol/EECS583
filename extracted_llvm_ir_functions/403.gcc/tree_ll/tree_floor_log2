define i32 @tree_floor_log2(%union.tree_node* nocapture %expr) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%union.tree_node* %expr}, i64 0, metadata !1052), !dbg !2212
  %0 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !2213, !tbaa !1913
  br label %while.cond, !dbg !2213

while.cond:                                       ; preds = %land.rhs, %entry
  %expr.addr.0 = phi %union.tree_node* [ %expr, %entry ], [ %2, %land.rhs ]
  %code = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 2, !dbg !2213
  %1 = bitcast [4 x i8]* %code to i32*, !dbg !2213
  %bf.load = load i32* %1, align 8, !dbg !2213
  %bf.clear = and i32 %bf.load, 255, !dbg !2213
  %bf.clear.off = add i32 %bf.clear, -114, !dbg !2213
  %switch = icmp ult i32 %bf.clear.off, 3, !dbg !2213
  br i1 %switch, label %land.lhs.true, label %while.end, !dbg !2213

land.lhs.true:                                    ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2, !dbg !2213
  %arrayidx = bitcast i32* %operands to %union.tree_node**, !dbg !2213
  %2 = load %union.tree_node** %arrayidx, align 8, !dbg !2213, !tbaa !1913
  %cmp12 = icmp eq %union.tree_node* %2, %0, !dbg !2213
  br i1 %cmp12, label %if.end, label %land.rhs, !dbg !2213

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1, !dbg !2213
  %3 = load %union.tree_node** %type, align 8, !dbg !2213, !tbaa !1913
  %type14 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !2213
  %mode = getelementptr inbounds %struct.tree_type* %type14, i64 0, i32 6, !dbg !2213
  %4 = bitcast [4 x i8]* %mode to i32*, !dbg !2213
  %bf.load15 = load i32* %4, align 4, !dbg !2213
  %type21 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 1, !dbg !2213
  %5 = load %union.tree_node** %type21, align 8, !dbg !2213, !tbaa !1913
  %type22 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !2213
  %mode23 = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6, !dbg !2213
  %6 = bitcast [4 x i8]* %mode23 to i32*, !dbg !2213
  %bf.load24 = load i32* %6, align 4, !dbg !2213
  %bf.lshr105 = xor i32 %bf.load24, %bf.load15, !dbg !2213
  %7 = and i32 %bf.lshr105, 65024, !dbg !2213
  %cmp27 = icmp eq i32 %7, 0, !dbg !2213
  br i1 %cmp27, label %while.cond, label %if.end

while.end:                                        ; preds = %while.cond
  %cmp35 = icmp eq i32 %bf.clear, 27, !dbg !2214
  br i1 %cmp35, label %if.then, label %if.end, !dbg !2214

if.then:                                          ; preds = %while.end
  %real = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2, !dbg !2215
  %8 = bitcast i32* %real to %union.tree_node**, !dbg !2215
  %9 = load %union.tree_node** %8, align 8, !dbg !2215, !tbaa !1913
  %call = tail call i32 @tree_log2(%union.tree_node* %9) #11, !dbg !2215
  br label %return, !dbg !2215

if.end:                                           ; preds = %land.rhs, %land.lhs.true, %while.end
  %type37 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 0, i32 1, !dbg !2216
  %10 = load %union.tree_node** %type37, align 8, !dbg !2216, !tbaa !1913
  %code39 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 2, !dbg !2216
  %11 = bitcast [4 x i8]* %code39 to i32*, !dbg !2216
  %bf.load40 = load i32* %11, align 8, !dbg !2216
  %bf.clear41 = and i32 %bf.load40, 255, !dbg !2216
  switch i32 %bf.clear41, label %cond.false [
    i32 13, label %cond.true
    i32 15, label %cond.true
  ], !dbg !2216

cond.true:                                        ; preds = %if.end, %if.end
  %12 = load i32* @target_flags, align 4, !dbg !2216, !tbaa !1932
  %and = lshr i32 %12, 20, !dbg !2216
  %13 = and i32 %and, 32, !dbg !2216
  %14 = add i32 %13, 32, !dbg !2216
  br label %cond.end, !dbg !2216

cond.false:                                       ; preds = %if.end
  %type53 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !2216
  %precision = getelementptr inbounds %struct.tree_type* %type53, i64 0, i32 6, !dbg !2216
  %15 = bitcast [4 x i8]* %precision to i32*, !dbg !2216
  %bf.load54 = load i32* %15, align 4, !dbg !2216
  %bf.clear55 = and i32 %bf.load54, 511, !dbg !2216
  br label %cond.end, !dbg !2216

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond56 = phi i32 [ %14, %cond.true ], [ %bf.clear55, %cond.false ], !dbg !2216
  tail call void @llvm.dbg.value(metadata !{i32 %cond56}, i64 0, metadata !1053), !dbg !2216
  %int_cst57 = getelementptr inbounds %union.tree_node* %expr.addr.0, i64 0, i32 0, i32 2, !dbg !2217
  %high58 = getelementptr inbounds i32* %int_cst57, i64 2, !dbg !2217
  %16 = bitcast i32* %high58 to i64*, !dbg !2217
  %17 = load i64* %16, align 8, !dbg !2217, !tbaa !1927
  tail call void @llvm.dbg.value(metadata !{i64 %17}, i64 0, metadata !1054), !dbg !2217
  %low61 = bitcast i32* %int_cst57 to i64*, !dbg !2218
  %18 = load i64* %low61, align 8, !dbg !2218, !tbaa !1927
  tail call void @llvm.dbg.value(metadata !{i64 %18}, i64 0, metadata !1055), !dbg !2218
  %19 = and i32 %cond56, 383, !dbg !2219
  %20 = icmp eq i32 %19, 0, !dbg !2219
  br i1 %20, label %if.end78, label %if.else, !dbg !2219

if.else:                                          ; preds = %cond.end
  %cmp66 = icmp ugt i32 %cond56, 64, !dbg !2220
  br i1 %cmp66, label %if.then67, label %if.else69, !dbg !2220

if.then67:                                        ; preds = %if.else
  %sub = add nsw i32 %cond56, -64, !dbg !2221
  %sh_prom = zext i32 %sub to i64, !dbg !2221
  %shl = shl i64 -1, %sh_prom, !dbg !2221
  %neg = xor i64 %shl, -1, !dbg !2221
  %and68 = and i64 %17, %neg, !dbg !2221
  tail call void @llvm.dbg.value(metadata !{i64 %and68}, i64 0, metadata !1054), !dbg !2221
  br label %if.end78, !dbg !2221

if.else69:                                        ; preds = %if.else
  tail call void @llvm.dbg.value(metadata !2188, i64 0, metadata !1054), !dbg !2222
  %cmp70 = icmp ult i32 %cond56, 64, !dbg !2224
  br i1 %cmp70, label %if.then71, label %cond.false82, !dbg !2224

if.then71:                                        ; preds = %if.else69
  %sh_prom72 = zext i32 %cond56 to i64, !dbg !2225
  %shl73 = shl i64 -1, %sh_prom72, !dbg !2225
  %neg74 = xor i64 %shl73, -1, !dbg !2225
  %and75 = and i64 %18, %neg74, !dbg !2225
  tail call void @llvm.dbg.value(metadata !{i64 %and75}, i64 0, metadata !1055), !dbg !2225
  br label %cond.false82, !dbg !2225

if.end78:                                         ; preds = %if.then67, %cond.end
  %high.0 = phi i64 [ %17, %cond.end ], [ %and68, %if.then67 ]
  %cmp79 = icmp eq i64 %high.0, 0, !dbg !2226
  br i1 %cmp79, label %cond.false82, label %cond.true80, !dbg !2226

cond.true80:                                      ; preds = %if.end78
  %call81 = tail call i32 @floor_log2_wide(i64 %high.0) #10, !dbg !2226
  %add = add nsw i32 %call81, 64, !dbg !2226
  br label %return, !dbg !2226

cond.false82:                                     ; preds = %if.else69, %if.then71, %if.end78
  %low.0108 = phi i64 [ %18, %if.end78 ], [ %and75, %if.then71 ], [ %18, %if.else69 ]
  %call83 = tail call i32 @floor_log2_wide(i64 %low.0108) #10, !dbg !2227
  br label %return, !dbg !2227

return:                                           ; preds = %cond.true80, %cond.false82, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %add, %cond.true80 ], [ %call83, %cond.false82 ]
  ret i32 %retval.0, !dbg !2228
}
