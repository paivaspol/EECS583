define %union.tree_node* @build_offset_type(%union.tree_node* %basetype, %union.tree_node* %type) #0 {
entry:
  %call = tail call %union.tree_node* @make_node(i32 14) #10
  %0 = getelementptr inbounds %union.tree_node* %basetype, i64 0, i32 0, i32 15
  %1 = load %union.tree_node** %0, align 8, !tbaa !0
  %2 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 13
  store %union.tree_node* %1, %union.tree_node** %2, align 8, !tbaa !0
  %type3 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type3, align 8, !tbaa !0
  %3 = ptrtoint %union.tree_node* %basetype to i64
  %and = and i64 %3, 262143
  %4 = ptrtoint %union.tree_node* %type to i64
  %and4 = and i64 %4, 262143
  %add = add i64 %and4, %and
  %conv = trunc i64 %add to i32
  %call5 = tail call %union.tree_node* @type_hash_canon(i32 %conv, %union.tree_node* %call) #10
  %size = getelementptr inbounds %union.tree_node* %call5, i64 0, i32 0, i32 2
  %5 = bitcast i32* %size to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !0
  %cmp = icmp eq %union.tree_node* %6, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @layout_type(%union.tree_node* %call5) #9
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  ret %union.tree_node* %call5
}
