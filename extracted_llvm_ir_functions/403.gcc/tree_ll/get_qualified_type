define %union.tree_node* @get_qualified_type(%union.tree_node* nocapture %type, i32 %type_quals) #3 {
entry:
  %0 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 15
  %t.036 = load %union.tree_node** %0, align 8
  %tobool37 = icmp eq %union.tree_node* %t.036, null
  br i1 %tobool37, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 11
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %t.038 = phi %union.tree_node* [ %t.036, %for.body.lr.ph ], [ %t.0, %for.inc ]
  %readonly_flag = getelementptr inbounds %union.tree_node* %t.038, i64 0, i32 0, i32 0, i32 2
  %2 = bitcast [4 x i8]* %readonly_flag to i32*
  %bf.load = load i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 12
  %bf.clear = and i32 %bf.lshr, 1
  %3 = lshr i32 %bf.load, 10
  %mul6 = and i32 %3, 2
  %or = or i32 %bf.clear, %mul6
  %type7 = bitcast %union.tree_node* %t.038 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type7, i64 0, i32 6
  %4 = bitcast [4 x i8]* %restrict_flag to i32*
  %bf.load8 = load i32* %4, align 4
  %5 = lshr i32 %bf.load8, 19
  %mul11 = and i32 %5, 4
  %or12 = or i32 %or, %mul11
  %bf.clear15 = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear15, 20
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.body
  %type17 = getelementptr inbounds %union.tree_node* %t.038, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type17, align 8, !tbaa !0
  %tobool18 = icmp ne %union.tree_node* %6, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.body
  %7 = phi i1 [ false, %for.body ], [ %tobool18, %land.rhs ]
  %land.ext = zext i1 %7 to i32
  %mul19 = shl nuw nsw i32 %land.ext, 3
  %or20 = or i32 %or12, %mul19
  %cmp21 = icmp eq i32 %or20, %type_quals
  br i1 %cmp21, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %land.end
  %8 = getelementptr inbounds %union.tree_node* %t.038, i64 0, i32 0, i32 11
  %9 = load %union.tree_node** %8, align 8, !tbaa !0
  %10 = load %union.tree_node** %1, align 8, !tbaa !0
  %cmp25 = icmp eq %union.tree_node* %9, %10
  br i1 %cmp25, label %return, label %for.inc

for.inc:                                          ; preds = %land.end, %land.lhs.true
  %11 = getelementptr inbounds %union.tree_node* %t.038, i64 0, i32 0, i32 14
  %t.0 = load %union.tree_node** %11, align 8
  %tobool = icmp eq %union.tree_node* %t.0, null
  br i1 %tobool, label %return, label %for.body

return:                                           ; preds = %for.inc, %land.lhs.true, %entry
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ %t.038, %land.lhs.true ], [ null, %for.inc ]
  ret %union.tree_node* %retval.0
}
