define %union.tree_node* @get_callee_fndecl(%union.tree_node* nocapture %call) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %0 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 53
  br i1 %cmp, label %while.cond.preheader, label %if.then

while.cond.preheader:                             ; preds = %entry
  %1 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !tbaa !0
  %addr.0.in.in.phi.trans.insert = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %addr.0.in.phi.trans.insert = bitcast i32* %addr.0.in.in.phi.trans.insert to %union.tree_node**
  %addr.0.pre = load %union.tree_node** %addr.0.in.phi.trans.insert, align 8
  br label %while.cond

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([48 x i8]* @.str147, i64 0, i64 0), i32 4448, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.get_callee_fndecl, i64 0, i64 0)) #8
  unreachable

while.cond:                                       ; preds = %while.cond.preheader, %land.rhs
  %addr.0 = phi %union.tree_node* [ %3, %land.rhs ], [ %addr.0.pre, %while.cond.preheader ]
  %code2 = getelementptr inbounds %union.tree_node* %addr.0, i64 0, i32 0, i32 0, i32 2
  %2 = bitcast [4 x i8]* %code2 to i32*
  %bf.load3 = load i32* %2, align 8
  %bf.clear4 = and i32 %bf.load3, 255
  %bf.clear4.off = add i32 %bf.clear4, -114
  %switch = icmp ult i32 %bf.clear4.off, 3
  br i1 %switch, label %land.lhs.true, label %while.end

land.lhs.true:                                    ; preds = %while.cond
  %operands18 = getelementptr inbounds %union.tree_node* %addr.0, i64 0, i32 0, i32 2
  %arrayidx19 = bitcast i32* %operands18 to %union.tree_node**
  %3 = load %union.tree_node** %arrayidx19, align 8, !tbaa !0
  %cmp20 = icmp eq %union.tree_node* %3, %1
  br i1 %cmp20, label %while.end, label %land.rhs

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %addr.0, i64 0, i32 0, i32 0, i32 1
  %4 = load %union.tree_node** %type, align 8, !tbaa !0
  %type22 = bitcast %union.tree_node* %4 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type22, i64 0, i32 6
  %5 = bitcast [4 x i8]* %mode to i32*
  %bf.load23 = load i32* %5, align 4
  %type29 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type29, align 8, !tbaa !0
  %type30 = bitcast %union.tree_node* %6 to %struct.tree_type*
  %mode31 = getelementptr inbounds %struct.tree_type* %type30, i64 0, i32 6
  %7 = bitcast [4 x i8]* %mode31 to i32*
  %bf.load32 = load i32* %7, align 4
  %bf.lshr107 = xor i32 %bf.load32, %bf.load23
  %8 = and i32 %bf.lshr107, 65024
  %cmp35 = icmp eq i32 %8, 0
  br i1 %cmp35, label %while.cond, label %while.end

while.end:                                        ; preds = %while.cond, %land.lhs.true, %land.rhs
  %idxprom106 = zext i32 %bf.clear4 to i64
  %arrayidx43 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom106
  %9 = load i8* %arrayidx43, align 1, !tbaa !1
  %cmp44 = icmp ne i8 %9, 100
  %cmp51 = icmp eq i32 %bf.clear4, 30
  %or.cond = or i1 %cmp44, %cmp51
  %bf.clear57 = and i32 %bf.load3, 4096
  %tobool = icmp eq i32 %bf.clear57, 0
  %or.cond109 = or i1 %or.cond, %tobool
  %or.cond109.not = xor i1 %or.cond109, true
  %bf.clear62 = and i32 %bf.load3, 2048
  %tobool63 = icmp eq i32 %bf.clear62, 0
  %or.cond110 = and i1 %tobool63, %or.cond109.not
  br i1 %or.cond110, label %land.lhs.true64, label %if.end69

land.lhs.true64:                                  ; preds = %while.end
  %initial = getelementptr inbounds %union.tree_node* %addr.0, i64 0, i32 0, i32 12
  %10 = load %union.tree_node** %initial, align 8, !tbaa !0
  %tobool65 = icmp eq %union.tree_node* %10, null
  %addr.0. = select i1 %tobool65, %union.tree_node* %addr.0, %union.tree_node* %10
  %code71.phi.trans.insert = getelementptr inbounds %union.tree_node* %addr.0., i64 0, i32 0, i32 0, i32 2
  %.phi.trans.insert = bitcast [4 x i8]* %code71.phi.trans.insert to i32*
  %bf.load72.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end69

if.end69:                                         ; preds = %land.lhs.true64, %while.end
  %bf.load72 = phi i32 [ %bf.load3, %while.end ], [ %bf.load72.pre, %land.lhs.true64 ]
  %addr.1 = phi %union.tree_node* [ %addr.0, %while.end ], [ %addr.0., %land.lhs.true64 ]
  %bf.clear73 = and i32 %bf.load72, 255
  %cmp74 = icmp eq i32 %bf.clear73, 121
  br i1 %cmp74, label %land.lhs.true76, label %if.end90

land.lhs.true76:                                  ; preds = %if.end69
  %operands78 = getelementptr inbounds %union.tree_node* %addr.1, i64 0, i32 0, i32 2
  %arrayidx79 = bitcast i32* %operands78 to %union.tree_node**
  %11 = load %union.tree_node** %arrayidx79, align 8, !tbaa !0
  %code81 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 0, i32 2
  %12 = bitcast [4 x i8]* %code81 to i32*
  %bf.load82 = load i32* %12, align 8
  %bf.clear83 = and i32 %bf.load82, 255
  %cmp84 = icmp eq i32 %bf.clear83, 30
  br i1 %cmp84, label %return, label %if.end90

if.end90:                                         ; preds = %land.lhs.true76, %if.end69
  br label %return

return:                                           ; preds = %land.lhs.true76, %if.end90
  %retval.0 = phi %union.tree_node* [ null, %if.end90 ], [ %11, %land.lhs.true76 ]
  ret %union.tree_node* %retval.0
}
