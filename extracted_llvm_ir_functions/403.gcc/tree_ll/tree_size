define i64 @tree_size(%union.tree_node* nocapture %node) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 0, i32 2
  %0 = bitcast [4 x i8]* %code1 to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom41 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom41
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  %conv = sext i8 %1 to i32
  switch i32 %conv, label %sw.default [
    i32 100, label %return
    i32 116, label %sw.bb2
    i32 98, label %sw.bb3
    i32 114, label %sw.bb4
    i32 101, label %sw.bb4
    i32 115, label %sw.bb4
    i32 60, label %sw.bb4
    i32 49, label %sw.bb4
    i32 50, label %sw.bb4
    i32 99, label %sw.bb8
    i32 120, label %sw.bb19
  ]

sw.bb2:                                           ; preds = %entry
  br label %return

sw.bb3:                                           ; preds = %entry
  br label %return

sw.bb4:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry
  %arrayidx6 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41
  %2 = load i32* %arrayidx6, align 4, !tbaa !4
  %sub = add nsw i32 %2, -1
  %conv7 = sext i32 %sub to i64
  %mul = shl nsw i64 %conv7, 3
  %add = add i64 %mul, 40
  br label %return

sw.bb8:                                           ; preds = %entry
  switch i32 %bf.clear, label %if.else13 [
    i32 25, label %return
    i32 26, label %if.then12
  ]

if.then12:                                        ; preds = %sw.bb8
  br label %return

if.else13:                                        ; preds = %sw.bb8
  %arrayidx15 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41
  %3 = load i32* %arrayidx15, align 4, !tbaa !4
  %conv16 = sext i32 %3 to i64
  %mul17 = shl nsw i64 %conv16, 3
  %add18 = add i64 %mul17, 24
  br label %return

sw.bb19:                                          ; preds = %entry
  %arrayidx21 = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom41
  %4 = load i32* %arrayidx21, align 4, !tbaa !4
  %conv22 = sext i32 %4 to i64
  %mul23 = shl nsw i64 %conv22, 3
  %add24 = add i64 %mul23, 24
  %cmp25 = icmp eq i32 %bf.clear, 3
  br i1 %cmp25, label %if.then27, label %return

if.then27:                                        ; preds = %sw.bb19
  %length28 = getelementptr inbounds %union.tree_node* %node, i64 0, i32 0, i32 1
  %5 = bitcast i8** %length28 to i32*
  %6 = load i32* %5, align 4, !tbaa !4
  %sub29 = add nsw i32 %6, -1
  %conv30 = sext i32 %sub29 to i64
  %mul31 = shl nsw i64 %conv30, 3
  %add32 = add i64 %mul31, %add24
  br label %return

sw.default:                                       ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([48 x i8]* @.str147, i64 0, i64 0), i32 316, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.tree_size, i64 0, i64 0)) #8
  unreachable

return:                                           ; preds = %sw.bb19, %if.then27, %sw.bb8, %entry, %if.else13, %if.then12, %sw.bb4, %sw.bb3, %sw.bb2
  %retval.0 = phi i64 [ 56, %if.then12 ], [ %add18, %if.else13 ], [ %add, %sw.bb4 ], [ 80, %sw.bb3 ], [ 168, %sw.bb2 ], [ 208, %entry ], [ 48, %sw.bb8 ], [ %add32, %if.then27 ], [ %add24, %sw.bb19 ]
  ret i64 %retval.0
}
