define void @dump_string(%struct.dump_info* nocapture %di, i8* %string) #0 {
entry:
  tail call fastcc void @dump_maybe_newline(%struct.dump_info* %di) #8
  %stream = getelementptr inbounds %struct.dump_info* %di, i64 0, i32 0
  %0 = load %struct._IO_FILE** %stream, align 8, !tbaa !0
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([7 x i8]* @.str4, i64 0, i64 0), i8* %string) #7
  %call1 = tail call i64 @strlen(i8* %string) #9
  %cmp = icmp ugt i64 %call1, 13
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %add = add i64 %call1, 1
  %column = getelementptr inbounds %struct.dump_info* %di, i64 0, i32 4
  %1 = load i32* %column, align 4, !tbaa !4
  %conv = zext i32 %1 to i64
  %add3 = add i64 %add, %conv
  %conv4 = trunc i64 %add3 to i32
  store i32 %conv4, i32* %column, align 4, !tbaa !4
  br label %if.end

if.else:                                          ; preds = %entry
  %column5 = getelementptr inbounds %struct.dump_info* %di, i64 0, i32 4
  %2 = load i32* %column5, align 4, !tbaa !4
  %add6 = add i32 %2, 14
  store i32 %add6, i32* %column5, align 4, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}
