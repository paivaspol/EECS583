define internal fastcc i32 @uses_addressof(%struct.rtx_def* %x) #3 {
entry:
  %cmp = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %struct.rtx_def* %x to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 70
  br i1 %cmp1, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %1 = load %struct.function** @cfun, align 8, !tbaa !0
  %internal_arg_pointer = getelementptr inbounds %struct.function* %1, i64 0, i32 15
  %2 = load %struct.rtx_def** %internal_arg_pointer, align 8, !tbaa !0
  %cmp2 = icmp eq %struct.rtx_def* %2, %x
  br i1 %cmp2, label %return, label %if.end4

if.end4:                                          ; preds = %lor.lhs.false
  %cmp5 = icmp eq i32 %bf.clear, 66
  br i1 %cmp5, label %return, label %if.end7

if.end7:                                          ; preds = %if.end4
  %idxprom62 = zext i32 %bf.clear to i64
  %arrayidx9 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom62
  %3 = load i8* %arrayidx9, align 1, !tbaa !1
  %cmp1068 = icmp eq i8 %3, 0
  br i1 %cmp1068, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end7
  %arrayidx = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom62
  %4 = load i8** %arrayidx, align 8, !tbaa !0
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc43
  %indvars.iv71 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next72, %for.inc43 ]
  %fmt.070 = phi i8* [ %4, %for.body.lr.ph ], [ %incdec.ptr, %for.inc43 ]
  %5 = load i8* %fmt.070, align 1, !tbaa !1
  switch i8 %5, label %for.inc43 [
    i8 101, label %if.then15
    i8 69, label %for.cond24.preheader
  ]

for.cond24.preheader:                             ; preds = %for.body
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv71
  %rtvec = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  %num_elem63 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 0
  %7 = load i32* %num_elem63, align 4, !tbaa !3
  %cmp2864 = icmp sgt i32 %7, 0
  br i1 %cmp2864, label %for.body30, label %for.inc43

if.then15:                                        ; preds = %for.body
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv71
  %rtx = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %call = tail call fastcc i32 @uses_addressof(%struct.rtx_def* %8) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %for.inc43, label %return

for.cond24:                                       ; preds = %for.body30
  %9 = trunc i64 %indvars.iv.next to i32
  %cmp28 = icmp slt i32 %9, %7
  br i1 %cmp28, label %for.body30, label %for.inc43

for.body30:                                       ; preds = %for.cond24.preheader, %for.cond24
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond24 ], [ 0, %for.cond24.preheader ]
  %arrayidx36 = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 1, i64 %indvars.iv
  %10 = load %struct.rtx_def** %arrayidx36, align 8, !tbaa !0
  %call37 = tail call fastcc i32 @uses_addressof(%struct.rtx_def* %10) #6
  %tobool38 = icmp eq i32 %call37, 0
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %tobool38, label %for.cond24, label %return

for.inc43:                                        ; preds = %for.cond24.preheader, %for.cond24, %for.body, %if.then15
  %indvars.iv.next72 = add i64 %indvars.iv71, 1
  %incdec.ptr = getelementptr inbounds i8* %fmt.070, i64 1
  %conv = zext i8 %3 to i32
  %11 = trunc i64 %indvars.iv.next72 to i32
  %cmp10 = icmp slt i32 %11, %conv
  br i1 %cmp10, label %for.body, label %return

return:                                           ; preds = %if.end7, %if.then15, %for.inc43, %for.body30, %if.end4, %if.end, %lor.lhs.false, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 1, %lor.lhs.false ], [ 1, %if.end ], [ 0, %if.end4 ], [ 1, %for.body30 ], [ 0, %if.end7 ], [ 1, %if.then15 ], [ 0, %for.inc43 ]
  ret i32 %retval.0
}
