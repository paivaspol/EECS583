define internal fastcc i32 @add_action_record(%struct.htab* %ar_hash, i32 %filter, i32 %next) #0 {
entry:
  %tmp = alloca %struct.action_record, align 4
  %filter1 = getelementptr inbounds %struct.action_record* %tmp, i64 0, i32 1
  store i32 %filter, i32* %filter1, align 4, !tbaa !0
  %next2 = getelementptr inbounds %struct.action_record* %tmp, i64 0, i32 2
  store i32 %next, i32* %next2, align 4, !tbaa !0
  %0 = bitcast %struct.action_record* %tmp to i8*
  %call = call i8** @htab_find_slot(%struct.htab* %ar_hash, i8* %0, i32 1) #6
  %1 = load i8** %call, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end17

if.then:                                          ; preds = %entry
  %call3 = call noalias i8* @xmalloc(i64 12) #6
  %2 = load %struct.function** @cfun, align 8, !tbaa !3
  %eh = getelementptr inbounds %struct.function* %2, i64 0, i32 0
  %3 = load %struct.eh_status** %eh, align 8, !tbaa !3
  %action_record_data = getelementptr inbounds %struct.eh_status* %3, i64 0, i32 11
  %4 = load %struct.varray_head_tag** %action_record_data, align 8, !tbaa !3
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %4, i64 0, i32 1
  %5 = load i64* %elements_used, align 8, !tbaa !4
  %add = add i64 %5, 1
  %conv = trunc i64 %add to i32
  %offset = bitcast i8* %call3 to i32*
  store i32 %conv, i32* %offset, align 4, !tbaa !0
  %filter4 = getelementptr inbounds i8* %call3, i64 4
  %6 = bitcast i8* %filter4 to i32*
  store i32 %filter, i32* %6, align 4, !tbaa !0
  %next5 = getelementptr inbounds i8* %call3, i64 8
  %7 = bitcast i8* %next5 to i32*
  store i32 %next, i32* %7, align 4, !tbaa !0
  store i8* %call3, i8** %call, align 8, !tbaa !3
  %8 = load %struct.function** @cfun, align 8, !tbaa !3
  %eh6 = getelementptr inbounds %struct.function* %8, i64 0, i32 0
  %9 = load %struct.eh_status** %eh6, align 8, !tbaa !3
  %action_record_data7 = getelementptr inbounds %struct.eh_status* %9, i64 0, i32 11
  call fastcc void @push_sleb128(%struct.varray_head_tag** %action_record_data7, i32 %filter) #7
  %tobool = icmp eq i32 %next, 0
  %.pre = load %struct.function** @cfun, align 8, !tbaa !3
  %eh15.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 0
  %.pre31 = load %struct.eh_status** %eh15.phi.trans.insert, align 8, !tbaa !3
  br i1 %tobool, label %if.end, label %if.then8

if.then8:                                         ; preds = %if.then
  %action_record_data10 = getelementptr inbounds %struct.eh_status* %.pre31, i64 0, i32 11
  %10 = load %struct.varray_head_tag** %action_record_data10, align 8, !tbaa !3
  %elements_used11 = getelementptr inbounds %struct.varray_head_tag* %10, i64 0, i32 1
  %11 = load i64* %elements_used11, align 8, !tbaa !4
  %conv1330 = zext i32 %next to i64
  %add12.neg = add i64 %conv1330, 4294967295
  %sub = sub i64 %add12.neg, %11
  %conv14 = trunc i64 %sub to i32
  br label %if.end

if.end:                                           ; preds = %if.then, %if.then8
  %next.addr.0 = phi i32 [ %conv14, %if.then8 ], [ 0, %if.then ]
  %action_record_data16 = getelementptr inbounds %struct.eh_status* %.pre31, i64 0, i32 11
  call fastcc void @push_sleb128(%struct.varray_head_tag** %action_record_data16, i32 %next.addr.0) #7
  br label %if.end17

if.end17:                                         ; preds = %if.end, %entry
  %new.0.in = phi i8* [ %call3, %if.end ], [ %1, %entry ]
  %offset18 = bitcast i8* %new.0.in to i32*
  %12 = load i32* %offset18, align 4, !tbaa !0
  ret i32 %12
}
