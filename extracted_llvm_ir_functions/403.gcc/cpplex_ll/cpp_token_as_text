define i8* @cpp_token_as_text(%struct.cpp_reader* %pfile, %struct.cpp_token* nocapture %token) #1 {
entry:
  %type.i = getelementptr inbounds %struct.cpp_token* %token, i64 0, i32 2
  %bf.load.i = load i8* %type.i, align 2
  %idxprom.i = zext i8 %bf.load.i to i64
  %category.i = getelementptr inbounds [68 x %struct.token_spelling]* @token_spellings, i64 0, i64 %idxprom.i, i32 0
  %0 = load i32* %category.i, align 16, !tbaa !10
  switch i32 %0, label %cpp_token_len.exit [
    i32 3, label %sw.bb.i
    i32 4, label %sw.bb.i
    i32 2, label %sw.bb2.i
  ]

sw.bb.i:                                          ; preds = %entry, %entry
  %len1.i = getelementptr inbounds %struct.cpp_token* %token, i64 0, i32 4, i32 0, i32 0
  %1 = load i32* %len1.i, align 4, !tbaa !3
  br label %cpp_token_len.exit

sw.bb2.i:                                         ; preds = %entry
  %val3.i = getelementptr inbounds %struct.cpp_token* %token, i64 0, i32 4
  %node.i = bitcast %union.anon* %val3.i to %struct.cpp_hashnode**
  %2 = load %struct.cpp_hashnode** %node.i, align 8, !tbaa !0
  %len4.i = getelementptr inbounds %struct.cpp_hashnode* %2, i64 0, i32 0, i32 0
  %3 = load i32* %len4.i, align 4, !tbaa !3
  br label %cpp_token_len.exit

cpp_token_len.exit:                               ; preds = %entry, %sw.bb.i, %sw.bb2.i
  %len.0.i = phi i32 [ %3, %sw.bb2.i ], [ %1, %sw.bb.i ], [ 0, %entry ]
  %add.i = add i32 %len.0.i, 5
  %conv = zext i32 %add.i to i64
  %call1 = tail call i8* @_cpp_unaligned_alloc(%struct.cpp_reader* %pfile, i64 %conv) #10
  %call2 = tail call i8* @cpp_spell_token(%struct.cpp_reader* %pfile, %struct.cpp_token* %token, i8* %call1) #10
  store i8 0, i8* %call2, align 1, !tbaa !1
  ret i8* %call1
}
