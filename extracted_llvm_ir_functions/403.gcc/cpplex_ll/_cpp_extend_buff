define void @_cpp_extend_buff(%struct.cpp_reader* nocapture %pfile, %struct._cpp_buff** nocapture %pbuff, i64 %min_extra) #1 {
entry:
  %0 = load %struct._cpp_buff** %pbuff, align 8, !tbaa !0
  %limit = getelementptr inbounds %struct._cpp_buff* %0, i64 0, i32 3
  %1 = load i8** %limit, align 8, !tbaa !0
  %cur = getelementptr inbounds %struct._cpp_buff* %0, i64 0, i32 2
  %2 = load i8** %cur, align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %mul = shl i64 %sub.ptr.sub, 1
  %add = add i64 %mul, %min_extra
  %call = tail call %struct._cpp_buff* @_cpp_get_buff(%struct.cpp_reader* %pfile, i64 %add) #10
  %base = getelementptr inbounds %struct._cpp_buff* %call, i64 0, i32 1
  %3 = load i8** %base, align 8, !tbaa !0
  %4 = load i8** %cur, align 8, !tbaa !0
  %5 = load i8** %limit, align 8, !tbaa !0
  %sub.ptr.lhs.cast4 = ptrtoint i8* %5 to i64
  %sub.ptr.rhs.cast5 = ptrtoint i8* %4 to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast4, %sub.ptr.rhs.cast5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 %sub.ptr.sub6, i32 1, i1 false)
  %next = getelementptr inbounds %struct._cpp_buff* %call, i64 0, i32 0
  store %struct._cpp_buff* %0, %struct._cpp_buff** %next, align 8, !tbaa !0
  store %struct._cpp_buff* %call, %struct._cpp_buff** %pbuff, align 8, !tbaa !0
  ret void
}
