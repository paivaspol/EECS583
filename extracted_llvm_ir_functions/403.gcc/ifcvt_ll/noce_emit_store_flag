define internal fastcc %struct.rtx_def* @noce_emit_store_flag(%struct.noce_if_info* nocapture %if_info, %struct.rtx_def* %x, i32 %reversep, i32 %normalize) #0 {
entry:
  %cond1 = getelementptr inbounds %struct.noce_if_info* %if_info, i64 0, i32 7
  %0 = load %struct.rtx_def** %cond1, align 8, !tbaa !4
  %fld = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %call = tail call i32 @general_operand(%struct.rtx_def* %1, i32 0) #6
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.end

lor.end:                                          ; preds = %entry
  %arrayidx3 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx4, align 8, !tbaa !4
  %call5 = tail call i32 @general_operand(%struct.rtx_def* %2, i32 0) #6
  %lnot = icmp eq i32 %call5, 0
  br i1 %lnot, label %if.then, label %if.end

if.then:                                          ; preds = %entry, %lor.end
  %jump = getelementptr inbounds %struct.noce_if_info* %if_info, i64 0, i32 6
  %3 = load %struct.rtx_def** %jump, align 8, !tbaa !4
  %call8 = tail call %struct.rtx_def* @pc_set(%struct.rtx_def* %3) #6
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %call8, i64 0, i32 1, i64 1
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx11, align 8, !tbaa !4
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx14, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.end
  %6 = phi i1 [ true, %if.then ], [ false, %lor.end ]
  %cond.0 = phi %struct.rtx_def* [ %5, %if.then ], [ %0, %lor.end ]
  %tobool15 = icmp eq i32 %reversep, 0
  br i1 %tobool15, label %if.else, label %if.then16

if.then16:                                        ; preds = %if.end
  %jump17 = getelementptr inbounds %struct.noce_if_info* %if_info, i64 0, i32 6
  %7 = load %struct.rtx_def** %jump17, align 8, !tbaa !4
  %call18 = tail call i32 @reversed_comparison_code(%struct.rtx_def* %cond.0, %struct.rtx_def* %7) #6
  br label %if.end19

if.else:                                          ; preds = %if.end
  %8 = bitcast %struct.rtx_def* %cond.0 to i32*
  %bf.load = load i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65535
  %jump20.pre = getelementptr inbounds %struct.noce_if_info* %if_info, i64 0, i32 6
  br label %if.end19

if.end19:                                         ; preds = %if.else, %if.then16
  %jump20.pre-phi = phi %struct.rtx_def** [ %jump20.pre, %if.else ], [ %jump17, %if.then16 ]
  %code.0 = phi i32 [ %bf.clear, %if.else ], [ %call18, %if.then16 ]
  %cond_earliest = getelementptr inbounds %struct.noce_if_info* %if_info, i64 0, i32 8
  %9 = load %struct.rtx_def** %cond_earliest, align 8, !tbaa !4
  %10 = load %struct.rtx_def** %jump20.pre-phi, align 8, !tbaa !4
  %cmp = icmp eq %struct.rtx_def* %9, %10
  %brmerge = or i1 %cmp, %6
  %11 = icmp ult i32 %normalize, 2
  %or.cond = and i1 %brmerge, %11
  br i1 %or.cond, label %if.then25, label %if.end52

if.then25:                                        ; preds = %if.end19
  %12 = bitcast %struct.rtx_def* %x to i32*
  %bf.load26 = load i32* %12, align 8
  %bf.lshr = lshr i32 %bf.load26, 16
  %bf.clear27 = and i32 %bf.lshr, 255
  %fld28 = getelementptr inbounds %struct.rtx_def* %cond.0, i64 0, i32 1
  %rtx30 = bitcast [1 x %union.rtunion_def]* %fld28 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx30, align 8, !tbaa !4
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %cond.0, i64 0, i32 1, i64 1
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx33, align 8, !tbaa !4
  %call34 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %code.0, i32 %bf.clear27, %struct.rtx_def* %13, %struct.rtx_def* %14) #6
  %call35 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %x, %struct.rtx_def* %call34) #6
  tail call void @start_sequence() #6
  %call36 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call35) #6
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %call36, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx38 to i32*
  %15 = load i32* %rtint, align 4, !tbaa !0
  %cmp39 = icmp sgt i32 %15, -1
  br i1 %cmp39, label %if.then46, label %cond.end

cond.end:                                         ; preds = %if.then25
  %call43 = tail call i32 @recog_memoized_1(%struct.rtx_def* %call36) #6
  %cmp45 = icmp sgt i32 %call43, -1
  br i1 %cmp45, label %if.then46, label %if.end51

if.then46:                                        ; preds = %if.then25, %cond.end
  %call47 = tail call %struct.rtx_def* @get_insns() #6
  tail call void @end_sequence() #6
  %call48 = tail call %struct.rtx_def* @emit_insns(%struct.rtx_def* %call47) #6
  %16 = load %struct.rtx_def** %jump20.pre-phi, align 8, !tbaa !4
  store %struct.rtx_def* %16, %struct.rtx_def** %cond_earliest, align 8, !tbaa !4
  br label %return

if.end51:                                         ; preds = %cond.end
  tail call void @end_sequence() #6
  br label %if.end52

if.end52:                                         ; preds = %if.end19, %if.end51
  br i1 %6, label %return, label %if.end55

if.end55:                                         ; preds = %if.end52
  %fld56 = getelementptr inbounds %struct.rtx_def* %cond.0, i64 0, i32 1
  %rtx58 = bitcast [1 x %union.rtunion_def]* %fld56 to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx58, align 8, !tbaa !4
  %arrayidx60 = getelementptr inbounds %struct.rtx_def* %cond.0, i64 0, i32 1, i64 1
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx61, align 8, !tbaa !4
  %19 = and i32 %code.0, -2
  %20 = icmp eq i32 %19, 110
  %cmp66 = icmp eq i32 %code.0, 108
  %or.cond73 = or i1 %20, %cmp66
  %cmp68 = icmp eq i32 %code.0, 109
  %.cmp68 = or i1 %or.cond73, %cmp68
  %lor.ext70 = zext i1 %.cmp68 to i32
  %call71 = tail call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %x, i32 %code.0, %struct.rtx_def* %17, %struct.rtx_def* %18, i32 0, i32 %lor.ext70, i32 %normalize) #6
  br label %return

return:                                           ; preds = %if.end52, %if.end55, %if.then46
  %retval.0 = phi %struct.rtx_def* [ %x, %if.then46 ], [ %call71, %if.end55 ], [ null, %if.end52 ]
  ret %struct.rtx_def* %retval.0
}
