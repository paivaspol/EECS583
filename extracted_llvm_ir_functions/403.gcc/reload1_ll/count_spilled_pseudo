define internal fastcc void @count_spilled_pseudo(i32 %spilled, i32 %spilled_nregs, i32 %reg) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{i32 %spilled}, i64 0, metadata !2954), !dbg !6821
  tail call void @llvm.dbg.value(metadata !{i32 %spilled_nregs}, i64 0, metadata !2955), !dbg !6821
  tail call void @llvm.dbg.value(metadata !{i32 %reg}, i64 0, metadata !2956), !dbg !6821
  %idxprom = sext i32 %reg to i64, !dbg !6822
  %0 = load i16** @reg_renumber, align 8, !dbg !6822, !tbaa !3248
  %arrayidx = getelementptr inbounds i16* %0, i64 %idxprom, !dbg !6822
  %1 = load i16* %arrayidx, align 2, !dbg !6822, !tbaa !3281
  %conv = sext i16 %1 to i32, !dbg !6822
  tail call void @llvm.dbg.value(metadata !{i32 %conv}, i64 0, metadata !2957), !dbg !6822
  %.off = add i16 %1, -8, !dbg !6823
  %2 = icmp ult i16 %.off, 8, !dbg !6823
  %.off137 = add i16 %1, -21, !dbg !6823
  %3 = icmp ult i16 %.off137, 8, !dbg !6823
  %or.cond = or i1 %2, %3, !dbg !6823
  %.off138 = add i16 %1, -45, !dbg !6823
  %4 = icmp ult i16 %.off138, 8, !dbg !6823
  %or.cond144 = or i1 %or.cond, %4, !dbg !6823
  %.off139 = add i16 %1, -29, !dbg !6823
  %5 = icmp ult i16 %.off139, 8, !dbg !6823
  %or.cond146 = or i1 %or.cond144, %5, !dbg !6823
  %6 = load %struct.function** @cfun, align 8, !dbg !6823, !tbaa !3248
  %emit = getelementptr inbounds %struct.function* %6, i64 0, i32 3, !dbg !6823
  %7 = load %struct.emit_status** %emit, align 8, !dbg !6823, !tbaa !3248
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %7, i64 0, i32 12, !dbg !6823
  %8 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !dbg !6823, !tbaa !3248
  %arrayidx22 = getelementptr inbounds %struct.rtx_def** %8, i64 %idxprom, !dbg !6823
  %9 = load %struct.rtx_def** %arrayidx22, align 8, !dbg !6823, !tbaa !3248
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6823
  %bf.load = load i32* %10, align 8, !dbg !6823
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6823
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6823
  br i1 %or.cond146, label %cond.true, label %cond.false, !dbg !6823

cond.true:                                        ; preds = %entry
  %idxprom23141 = zext i32 %bf.clear to i64, !dbg !6823
  %arrayidx24 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom23141, !dbg !6823
  %11 = load i32* %arrayidx24, align 4, !dbg !6823, !tbaa !3286
  %cmp25 = icmp eq i32 %11, 5, !dbg !6823
  br i1 %cmp25, label %cond.end83, label %lor.rhs, !dbg !6823

lor.rhs:                                          ; preds = %cond.true
  %cmp36 = icmp eq i32 %11, 6, !dbg !6823
  %phitmp = select i1 %cmp36, i32 2, i32 1, !dbg !6823
  br label %cond.end83, !dbg !6823

cond.false:                                       ; preds = %entry
  switch i32 %bf.clear, label %cond.false63 [
    i32 18, label %cond.true47
    i32 24, label %cond.true59
  ], !dbg !6823

cond.true47:                                      ; preds = %cond.false
  %12 = load i32* @target_flags, align 4, !dbg !6823, !tbaa !3224
  %and = lshr i32 %12, 25, !dbg !6823
  %13 = and i32 %and, 1, !dbg !6823
  %14 = xor i32 %13, 3, !dbg !6823
  br label %cond.end83, !dbg !6823

cond.true59:                                      ; preds = %cond.false
  %15 = load i32* @target_flags, align 4, !dbg !6823, !tbaa !3224
  %and60 = lshr i32 %15, 24, !dbg !6823
  %16 = and i32 %and60, 2, !dbg !6823
  %17 = xor i32 %16, 6, !dbg !6823
  br label %cond.end83, !dbg !6823

cond.false63:                                     ; preds = %cond.false
  %idxprom71140 = zext i32 %bf.clear to i64, !dbg !6823
  %arrayidx72 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom71140, !dbg !6823
  %18 = load i8* %arrayidx72, align 1, !dbg !6823, !tbaa !3225
  %conv73 = zext i8 %18 to i32, !dbg !6823
  %19 = load i32* @target_flags, align 4, !dbg !6823, !tbaa !3224
  %and74 = lshr i32 %19, 23, !dbg !6823
  %20 = and i32 %and74, 4, !dbg !6823
  %21 = add i32 %20, 4, !dbg !6823
  %add = add i32 %conv73, -1, !dbg !6823
  %sub = add i32 %add, %21, !dbg !6823
  %div = sdiv i32 %sub, %21, !dbg !6823
  br label %cond.end83, !dbg !6823

cond.end83:                                       ; preds = %cond.true, %lor.rhs, %cond.true47, %cond.false63, %cond.true59
  %cond84 = phi i32 [ %14, %cond.true47 ], [ %17, %cond.true59 ], [ %div, %cond.false63 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ], !dbg !6823
  tail call void @llvm.dbg.value(metadata !{i32 %cond84}, i64 0, metadata !2958), !dbg !6823
  %call = tail call i32 @bitmap_bit_p(%struct.bitmap_head_def* @spilled_pseudos, i32 %reg) #8, !dbg !6824
  %tobool85 = icmp eq i32 %call, 0, !dbg !6824
  br i1 %tobool85, label %lor.lhs.false86, label %while.end, !dbg !6824

lor.lhs.false86:                                  ; preds = %cond.end83
  %add87 = add nsw i32 %spilled_nregs, %spilled, !dbg !6824
  %cmp88 = icmp sgt i32 %add87, %conv, !dbg !6824
  br i1 %cmp88, label %lor.lhs.false90, label %while.end, !dbg !6824

lor.lhs.false90:                                  ; preds = %lor.lhs.false86
  %add91 = add nsw i32 %cond84, %conv, !dbg !6824
  %cmp92 = icmp sgt i32 %add91, %spilled, !dbg !6824
  br i1 %cmp92, label %if.end, label %while.end, !dbg !6824

if.end:                                           ; preds = %lor.lhs.false90
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* @spilled_pseudos, i32 %reg) #8, !dbg !6825
  %22 = load %struct.varray_head_tag** @reg_n_info, align 8, !dbg !6826, !tbaa !3248
  %data = getelementptr inbounds %struct.varray_head_tag* %22, i64 0, i32 4, !dbg !6826
  %reg95 = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*, !dbg !6826
  %arrayidx96 = getelementptr inbounds [1 x %struct.reg_info_def*]* %reg95, i64 0, i64 %idxprom, !dbg !6826
  %23 = load %struct.reg_info_def** %arrayidx96, align 8, !dbg !6826, !tbaa !3248
  %freq = getelementptr inbounds %struct.reg_info_def* %23, i64 0, i32 5, !dbg !6826
  %24 = load i32* %freq, align 4, !dbg !6826, !tbaa !3224
  %idxprom97 = sext i16 %1 to i64, !dbg !6826
  %arrayidx98 = getelementptr inbounds [53 x i32]* @spill_add_cost, i64 0, i64 %idxprom97, !dbg !6826
  %25 = load i32* %arrayidx98, align 4, !dbg !6826, !tbaa !3224
  %sub99 = sub nsw i32 %25, %24, !dbg !6826
  store i32 %sub99, i32* %arrayidx98, align 4, !dbg !6826, !tbaa !3224
  %cmp100148 = icmp sgt i32 %cond84, 0, !dbg !6827
  br i1 %cmp100148, label %while.body.lr.ph, label %while.end, !dbg !6827

while.body.lr.ph:                                 ; preds = %if.end
  %26 = sext i32 %cond84 to i64
  %27 = sext i16 %1 to i64, !dbg !6827
  br label %while.body, !dbg !6827

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %indvars.iv = phi i64 [ %26, %while.body.lr.ph ], [ %indvars.iv.next, %while.body ]
  %indvars.iv.next = add i64 %indvars.iv, -1, !dbg !6827
  %28 = load i32* %freq, align 4, !dbg !6828, !tbaa !3224
  %29 = add nsw i64 %indvars.iv.next, %27, !dbg !6828
  %arrayidx109 = getelementptr inbounds [53 x i32]* @spill_cost, i64 0, i64 %29, !dbg !6828
  %30 = load i32* %arrayidx109, align 4, !dbg !6828, !tbaa !3224
  %sub110 = sub nsw i32 %30, %28, !dbg !6828
  store i32 %sub110, i32* %arrayidx109, align 4, !dbg !6828, !tbaa !3224
  %31 = trunc i64 %indvars.iv.next to i32, !dbg !6827
  %cmp100 = icmp sgt i32 %31, 0, !dbg !6827
  br i1 %cmp100, label %while.body, label %while.end, !dbg !6827

while.end:                                        ; preds = %if.end, %while.body, %lor.lhs.false90, %lor.lhs.false86, %cond.end83
  ret void, !dbg !6828
}
