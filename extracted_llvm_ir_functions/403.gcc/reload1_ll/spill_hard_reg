define internal fastcc void @spill_hard_reg(i32 %regno) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !3603, i64 0, metadata !2798), !dbg !4069
  %sh_prom = zext i32 %regno to i64, !dbg !4070
  %shl = shl i64 1, %sh_prom, !dbg !4070
  %0 = load i64* @bad_spill_regs_global, align 8, !dbg !4070, !tbaa !3277
  %or = or i64 %0, %shl, !dbg !4070
  store i64 %or, i64* @bad_spill_regs_global, align 8, !dbg !4070, !tbaa !3277
  %arrayidx = getelementptr inbounds [53 x i8]* @regs_ever_live, i64 0, i64 %sh_prom, !dbg !4072
  store i8 1, i8* %arrayidx, align 1, !dbg !4072, !tbaa !3225
  tail call void @llvm.dbg.value(metadata !3270, i64 0, metadata !2799), !dbg !4073
  %1 = load i32* @max_regno, align 4, !dbg !4073, !tbaa !3224
  %cmp16 = icmp sgt i32 %1, 53, !dbg !4073
  br i1 %cmp16, label %for.body, label %for.end, !dbg !4073

for.body:                                         ; preds = %for.inc, %entry
  %2 = phi i32 [ %1, %entry ], [ %26, %for.inc ]
  %indvars.iv = phi i64 [ 53, %entry ], [ %indvars.iv.next, %for.inc ]
  %3 = load i16** @reg_renumber, align 8, !dbg !4075, !tbaa !3248
  %arrayidx2 = getelementptr inbounds i16* %3, i64 %indvars.iv, !dbg !4075
  %4 = load i16* %arrayidx2, align 2, !dbg !4075, !tbaa !3281
  %conv = sext i16 %4 to i32, !dbg !4075
  %cmp3 = icmp slt i16 %4, 0, !dbg !4075
  %cmp8 = icmp ugt i32 %conv, %regno, !dbg !4075
  %or.cond = or i1 %cmp3, %cmp8, !dbg !4075
  br i1 %or.cond, label %for.inc, label %land.lhs.true10, !dbg !4075

land.lhs.true10:                                  ; preds = %for.body
  %.off = add i16 %4, -8, !dbg !4075
  %5 = icmp ult i16 %.off, 8, !dbg !4075
  %.off7 = add i16 %4, -21, !dbg !4075
  %6 = icmp ult i16 %.off7, 8, !dbg !4075
  %or.cond11 = or i1 %5, %6, !dbg !4075
  %.off8 = add i16 %4, -45, !dbg !4075
  %7 = icmp ult i16 %.off8, 8, !dbg !4075
  %or.cond13 = or i1 %or.cond11, %7, !dbg !4075
  %.off9 = add i16 %4, -29, !dbg !4075
  %8 = icmp ult i16 %.off9, 8, !dbg !4075
  %or.cond15 = or i1 %or.cond13, %8, !dbg !4075
  %9 = load %struct.function** @cfun, align 8, !dbg !4075, !tbaa !3248
  %emit = getelementptr inbounds %struct.function* %9, i64 0, i32 3, !dbg !4075
  %10 = load %struct.emit_status** %emit, align 8, !dbg !4075, !tbaa !3248
  %x_regno_reg_rtx = getelementptr inbounds %struct.emit_status* %10, i64 0, i32 12, !dbg !4075
  %11 = load %struct.rtx_def*** %x_regno_reg_rtx, align 8, !dbg !4075, !tbaa !3248
  %arrayidx61 = getelementptr inbounds %struct.rtx_def** %11, i64 %indvars.iv, !dbg !4075
  %12 = load %struct.rtx_def** %arrayidx61, align 8, !dbg !4075, !tbaa !3248
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !4075
  %bf.load = load i32* %13, align 8, !dbg !4075
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4075
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4075
  br i1 %or.cond15, label %cond.true, label %cond.false, !dbg !4075

cond.true:                                        ; preds = %land.lhs.true10
  %idxprom622 = zext i32 %bf.clear to i64, !dbg !4075
  %arrayidx63 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom622, !dbg !4075
  %14 = load i32* %arrayidx63, align 4, !dbg !4075, !tbaa !3286
  %cmp64 = icmp eq i32 %14, 5, !dbg !4075
  br i1 %cmp64, label %cond.end123, label %lor.rhs, !dbg !4075

lor.rhs:                                          ; preds = %cond.true
  %cmp75 = icmp eq i32 %14, 6, !dbg !4075
  %phitmp = select i1 %cmp75, i32 2, i32 1, !dbg !4075
  br label %cond.end123, !dbg !4075

cond.false:                                       ; preds = %land.lhs.true10
  switch i32 %bf.clear, label %cond.false103 [
    i32 18, label %cond.true86
    i32 24, label %cond.true99
  ], !dbg !4075

cond.true86:                                      ; preds = %cond.false
  %15 = load i32* @target_flags, align 4, !dbg !4075, !tbaa !3224
  %and = lshr i32 %15, 25, !dbg !4075
  %16 = and i32 %and, 1, !dbg !4075
  %17 = xor i32 %16, 3, !dbg !4075
  br label %cond.end123, !dbg !4075

cond.true99:                                      ; preds = %cond.false
  %18 = load i32* @target_flags, align 4, !dbg !4075, !tbaa !3224
  %and100 = lshr i32 %18, 24, !dbg !4075
  %19 = and i32 %and100, 2, !dbg !4075
  %20 = xor i32 %19, 6, !dbg !4075
  br label %cond.end123, !dbg !4075

cond.false103:                                    ; preds = %cond.false
  %idxprom1111 = zext i32 %bf.clear to i64, !dbg !4075
  %arrayidx112 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom1111, !dbg !4075
  %21 = load i8* %arrayidx112, align 1, !dbg !4075, !tbaa !3225
  %conv113 = zext i8 %21 to i32, !dbg !4075
  %22 = load i32* @target_flags, align 4, !dbg !4075, !tbaa !3224
  %and114 = lshr i32 %22, 23, !dbg !4075
  %23 = and i32 %and114, 4, !dbg !4075
  %24 = add i32 %23, 4, !dbg !4075
  %add = add i32 %conv113, -1, !dbg !4075
  %sub = add i32 %add, %24, !dbg !4075
  %div = sdiv i32 %sub, %24, !dbg !4075
  br label %cond.end123, !dbg !4075

cond.end123:                                      ; preds = %cond.true, %lor.rhs, %cond.true86, %cond.false103, %cond.true99
  %cond124 = phi i32 [ %17, %cond.true86 ], [ %20, %cond.true99 ], [ %div, %cond.false103 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ], !dbg !4075
  %add125 = add i32 %cond124, %conv, !dbg !4075
  %cmp126 = icmp ugt i32 %add125, %regno, !dbg !4075
  br i1 %cmp126, label %if.then128, label %for.inc, !dbg !4075

if.then128:                                       ; preds = %cond.end123
  %25 = trunc i64 %indvars.iv to i32, !dbg !4076
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* @spilled_pseudos, i32 %25) #8, !dbg !4076
  %.pre = load i32* @max_regno, align 4, !dbg !4073, !tbaa !3224
  br label %for.inc, !dbg !4076

for.inc:                                          ; preds = %for.body, %cond.end123, %if.then128
  %26 = phi i32 [ %2, %for.body ], [ %2, %cond.end123 ], [ %.pre, %if.then128 ], !dbg !4073
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !4073
  %27 = trunc i64 %indvars.iv.next to i32, !dbg !4073
  %cmp = icmp slt i32 %27, %26, !dbg !4073
  br i1 %cmp, label %for.body, label %for.end, !dbg !4073

for.end:                                          ; preds = %for.inc, %entry
  ret void, !dbg !4077
}
