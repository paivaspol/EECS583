define internal void @forget_old_reloads_1(%struct.rtx_def* nocapture %x, %struct.rtx_def* nocapture %ignored, i8* nocapture %data) #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %x.addr.0 = phi %struct.rtx_def* [ %x, %entry ], [ %5, %while.body ]
  %offset.0 = phi i32 [ 0, %entry ], [ %add, %while.body ]
  %0 = bitcast %struct.rtx_def* %x.addr.0 to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %while.end119 [
    i32 63, label %while.body
    i32 61, label %if.end
  ]

while.body:                                       ; preds = %while.cond
  %fld = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx2 to i32*
  %2 = load i32* %rtuint, align 4, !tbaa !0
  %3 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load6 = load i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load6, 16
  %bf.clear7 = and i32 %bf.lshr, 255
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 1
  %rtuint10 = bitcast %union.rtunion_def* %arrayidx9 to i32*
  %4 = load i32* %rtuint10, align 4, !tbaa !0
  %bf.lshr12 = lshr i32 %bf.load, 16
  %bf.clear13 = and i32 %bf.lshr12, 255
  %call = tail call i32 @subreg_regno_offset(i32 %2, i32 %bf.clear7, i32 %4, i32 %bf.clear13) #7
  %add = add i32 %call, %offset.0
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  br label %while.cond

if.end:                                           ; preds = %while.cond
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtuint22 = bitcast %union.rtunion_def* %arrayidx21 to i32*
  %6 = load i32* %rtuint22, align 4, !tbaa !0
  %add23 = add i32 %6, %offset.0
  %cmp24 = icmp ugt i32 %add23, 52
  br i1 %cmp24, label %while.body104.lr.ph, label %if.else

while.cond101.preheader:                          ; preds = %for.inc
  %cmp102166 = icmp eq i32 %cond82185, 0
  br i1 %cmp102166, label %while.end119, label %while.body104.lr.ph

while.body104.lr.ph:                              ; preds = %if.end, %while.cond101.preheader
  %nr.0.ph183 = phi i32 [ %cond82185, %while.cond101.preheader ], [ 1, %if.end ]
  %.pre = load i32* @n_reloads, align 4, !tbaa !0
  br label %while.body104

if.else:                                          ; preds = %if.end
  %add23.off = add i32 %add23, -8
  %7 = icmp ult i32 %add23.off, 8
  %add23.off155 = add i32 %add23, -21
  %8 = icmp ult i32 %add23.off155, 8
  %or.cond = or i1 %7, %8
  %add23.off156 = add i32 %add23, -45
  %9 = icmp ult i32 %add23.off156, 8
  %or.cond162 = or i1 %or.cond, %9
  %add23.off157 = add i32 %add23, -29
  %10 = icmp ult i32 %add23.off157, 8
  %or.cond164 = or i1 %or.cond162, %10
  %bf.lshr40 = lshr i32 %bf.load, 16
  %bf.clear41 = and i32 %bf.lshr40, 255
  br i1 %or.cond164, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %idxprom159 = zext i32 %bf.clear41 to i64
  %arrayidx42 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom159
  %11 = load i32* %arrayidx42, align 4, !tbaa !6
  %cmp43 = icmp eq i32 %11, 5
  br i1 %cmp43, label %for.body.lr.ph, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp49 = icmp eq i32 %11, 6
  %phitmp = select i1 %cmp49, i32 2, i32 1
  br label %for.body.lr.ph

cond.false:                                       ; preds = %if.else
  switch i32 %bf.clear41, label %cond.end81 [
    i32 18, label %cond.true54
    i32 24, label %cond.true61
  ]

cond.true54:                                      ; preds = %cond.false
  %12 = load i32* @target_flags, align 4, !tbaa !0
  %and = lshr i32 %12, 25
  %13 = and i32 %and, 1
  %14 = xor i32 %13, 3
  br label %for.body.lr.ph

cond.true61:                                      ; preds = %cond.false
  %15 = load i32* @target_flags, align 4, !tbaa !0
  %and62 = lshr i32 %15, 24
  %16 = and i32 %and62, 2
  %17 = xor i32 %16, 6
  br label %for.body.lr.ph

cond.end81:                                       ; preds = %cond.false
  %idxprom69158 = zext i32 %bf.clear41 to i64
  %arrayidx70 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom69158
  %18 = load i8* %arrayidx70, align 1, !tbaa !1
  %conv = zext i8 %18 to i32
  %19 = load i32* @target_flags, align 4, !tbaa !0
  %and71 = lshr i32 %19, 23
  %20 = and i32 %and71, 4
  %21 = add i32 %20, 4
  %add74 = add i32 %conv, -1
  %sub = add i32 %add74, %21
  %div = sdiv i32 %sub, %21
  %cmp83168 = icmp eq i32 %div, 0
  br i1 %cmp83168, label %while.end119, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %lor.rhs, %cond.true, %cond.true61, %cond.true54, %cond.end81
  %cond82185 = phi i32 [ %div, %cond.end81 ], [ %14, %cond.true54 ], [ %17, %cond.true61 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ]
  %22 = load i32* @n_reloads, align 4, !tbaa !0
  %cmp85 = icmp eq i32 %22, 0
  %23 = load i64* @reg_is_output_reload, align 8, !tbaa !4
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %.pre179 = trunc i64 %indvars.iv to i32
  %add92.pre = add i32 %.pre179, %add23
  %sh_prom93.pre = zext i32 %add92.pre to i64
  %shl94.pre = shl i64 1, %sh_prom93.pre
  br i1 %cmp85, label %if.then91, label %lor.lhs.false87

lor.lhs.false87:                                  ; preds = %for.body
  %and89 = and i64 %23, %shl94.pre
  %tobool90 = icmp eq i64 %and89, 0
  br i1 %tobool90, label %if.then91, label %for.inc

if.then91:                                        ; preds = %for.body, %lor.lhs.false87
  %neg = xor i64 %shl94.pre, -1
  %24 = load i64* @reg_reloaded_valid, align 8, !tbaa !4
  %and95 = and i64 %24, %neg
  store i64 %and95, i64* @reg_reloaded_valid, align 8, !tbaa !4
  %arrayidx98 = getelementptr inbounds [53 x %struct.rtx_def*]* @spill_reg_store, i64 0, i64 %sh_prom93.pre
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx98, align 8, !tbaa !3
  br label %for.inc

for.inc:                                          ; preds = %lor.lhs.false87, %if.then91
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %cond82185
  br i1 %exitcond, label %while.cond101.preheader, label %for.body

while.body104:                                    ; preds = %while.body104.lr.ph, %while.cond101.backedge
  %dec167.in = phi i32 [ %nr.0.ph183, %while.body104.lr.ph ], [ %dec167, %while.cond101.backedge ]
  %dec167 = add i32 %dec167.in, -1
  %cmp105 = icmp eq i32 %.pre, 0
  %add115.pre = add i32 %dec167, %add23
  %idxprom116.pre = zext i32 %add115.pre to i64
  br i1 %cmp105, label %if.then114, label %lor.lhs.false107

lor.lhs.false107:                                 ; preds = %while.body104
  %25 = load i8** @reg_has_output_reload, align 8, !tbaa !3
  %arrayidx110 = getelementptr inbounds i8* %25, i64 %idxprom116.pre
  %26 = load i8* %arrayidx110, align 1, !tbaa !1
  %cmp112 = icmp eq i8 %26, 0
  br i1 %cmp112, label %if.then114, label %while.cond101.backedge

if.then114:                                       ; preds = %while.body104, %lor.lhs.false107
  %27 = load %struct.rtx_def*** @reg_last_reload_reg, align 8, !tbaa !3
  %arrayidx117 = getelementptr inbounds %struct.rtx_def** %27, i64 %idxprom116.pre
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx117, align 8, !tbaa !3
  br label %while.cond101.backedge

while.cond101.backedge:                           ; preds = %if.then114, %lor.lhs.false107
  %cmp102 = icmp eq i32 %dec167, 0
  br i1 %cmp102, label %while.end119, label %while.body104

while.end119:                                     ; preds = %while.cond, %while.cond101.preheader, %cond.end81, %while.cond101.backedge
  ret void
}
