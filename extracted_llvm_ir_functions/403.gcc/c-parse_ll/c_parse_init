define void @c_parse_init() #0 {
entry:
  %0 = load i32* @flag_isoc99, align 4, !dbg !1194, !tbaa !1196
  %tobool.i = icmp ne i32 %0, 0, !dbg !1194
  %cond.i = select i1 %tobool.i, i32 0, i32 2, !dbg !1194
  %1 = load i32* @flag_traditional, align 4, !dbg !1194, !tbaa !1196
  %tobool1.i = icmp ne i32 %1, 0, !dbg !1194
  %cond2.i = zext i1 %tobool1.i to i32, !dbg !1194
  %or.i = or i32 %cond2.i, %cond.i, !dbg !1194
  %2 = load i32* @flag_no_asm, align 4, !dbg !1194, !tbaa !1196
  %tobool3.i = icmp eq i32 %2, 0, !dbg !1194
  br i1 %tobool3.i, label %cond.end.i, label %cond.true.i, !dbg !1194

cond.true.i:                                      ; preds = %entry
  %cond5.i = select i1 %tobool.i, i32 4, i32 12, !dbg !1194
  br label %cond.end.i, !dbg !1194

cond.end.i:                                       ; preds = %cond.true.i, %entry
  %cond6.i = phi i32 [ %cond5.i, %cond.true.i ], [ 0, %entry ], !dbg !1194
  %or7.i = or i32 %or.i, %cond6.i, !dbg !1194
  tail call void @llvm.dbg.value(metadata !{i32 %or7.i}, i64 0, metadata !1199) #3, !dbg !1194
  %3 = load i32* @c_language, align 4, !dbg !1200, !tbaa !1201
  %cmp.i = icmp eq i32 %3, 2, !dbg !1200
  %or8.i = or i32 %or7.i, 16, !dbg !1202
  tail call void @llvm.dbg.value(metadata !{i32 %or8.i}, i64 0, metadata !1199) #3, !dbg !1202
  %or7.or8.i = select i1 %cmp.i, i32 %or7.i, i32 %or8.i, !dbg !1200
  %call.i = tail call noalias i8* @xcalloc(i64 114, i64 8) #7, !dbg !1203
  %4 = bitcast i8* %call.i to %union.tree_node**, !dbg !1203
  store %union.tree_node** %4, %union.tree_node*** @ridpointers, align 8, !dbg !1203, !tbaa !1204
  tail call void @llvm.dbg.value(metadata !649, i64 0, metadata !1205) #3, !dbg !1206
  br label %for.body.i, !dbg !1206

for.body.i:                                       ; preds = %for.inc.i, %cond.end.i
  %indvars.iv.i = phi i64 [ 0, %cond.end.i ], [ %indvars.iv.next.i, %for.inc.i ]
  %disable.i = getelementptr inbounds [80 x %struct.resword]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @reswords to [80 x %struct.resword]*), i64 0, i64 %indvars.iv.i, i32 1, !dbg !1208
  %5 = bitcast [4 x i8]* %disable.i to i32*, !dbg !1208
  %bf.load.i = load i32* %5, align 8, !dbg !1208
  %bf.lshr.i = lshr i32 %bf.load.i, 16, !dbg !1208
  %and.i = and i32 %bf.lshr.i, %or7.or8.i, !dbg !1208
  %tobool11.i = icmp eq i32 %and.i, 0, !dbg !1208
  br i1 %tobool11.i, label %if.end13.i, label %for.inc.i, !dbg !1208

if.end13.i:                                       ; preds = %for.body.i
  %word.i = getelementptr inbounds [80 x %struct.resword]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @reswords to [80 x %struct.resword]*), i64 0, i64 %indvars.iv.i, i32 0, !dbg !1210
  %6 = load i8** %word.i, align 16, !dbg !1210, !tbaa !1204
  %call16.i = tail call %union.tree_node* @get_identifier(i8* %6) #7, !dbg !1210
  tail call void @llvm.dbg.value(metadata !{%union.tree_node* %call16.i}, i64 0, metadata !1211) #3, !dbg !1210
  %conv20.i = trunc i32 %bf.load.i to i8, !dbg !1212
  %node.i = getelementptr inbounds %union.tree_node* %call16.i, i64 0, i32 0, i32 1, !dbg !1212
  %7 = bitcast i8** %node.i to %struct.cpp_hashnode*, !dbg !1212
  %rid_code.i = getelementptr inbounds %struct.cpp_hashnode* %7, i64 0, i32 3, !dbg !1212
  store i8 %conv20.i, i8* %rid_code.i, align 1, !dbg !1212, !tbaa !1197
  %lang_flag_0.i = getelementptr inbounds %union.tree_node* %call16.i, i64 0, i32 0, i32 0, i32 2, !dbg !1213
  %8 = bitcast [4 x i8]* %lang_flag_0.i to i32*, !dbg !1213
  %bf.load21.i = load i32* %8, align 8, !dbg !1213
  %bf.set.i = or i32 %bf.load21.i, 16777216, !dbg !1213
  store i32 %bf.set.i, i32* %8, align 8, !dbg !1213
  %bf.clear27.i = and i32 %bf.load.i, 65535, !dbg !1214
  %idxprom2838.i = zext i32 %bf.clear27.i to i64, !dbg !1214
  %9 = load %union.tree_node*** @ridpointers, align 8, !dbg !1214, !tbaa !1204
  %arrayidx29.i = getelementptr inbounds %union.tree_node** %9, i64 %idxprom2838.i, !dbg !1214
  store %union.tree_node* %call16.i, %union.tree_node** %arrayidx29.i, align 8, !dbg !1214, !tbaa !1204
  br label %for.inc.i, !dbg !1215

for.inc.i:                                        ; preds = %if.end13.i, %for.body.i
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1, !dbg !1206
  %lftr.wideiv = trunc i64 %indvars.iv.next.i to i32, !dbg !1206
  %exitcond = icmp eq i32 %lftr.wideiv, 80, !dbg !1206
  br i1 %exitcond, label %init_reswords.exit, label %for.body.i, !dbg !1206

init_reswords.exit:                               ; preds = %for.inc.i
  tail call void @ggc_add_tree_root(%union.tree_node** @declspec_stack, i32 1) #7, !dbg !1216
  tail call void @ggc_add_tree_root(%union.tree_node** @current_declspecs, i32 1) #7, !dbg !1217
  tail call void @ggc_add_tree_root(%union.tree_node** @prefix_attributes, i32 1) #7, !dbg !1218
  tail call void @ggc_add_tree_root(%union.tree_node** @all_prefix_attributes, i32 1) #7, !dbg !1219
  ret void, !dbg !1220
}
