define void @c_parse_init() #0 {
entry:
  %0 = load i32* @flag_isoc99, align 4, !tbaa !0
  %tobool.i = icmp ne i32 %0, 0
  %cond.i = select i1 %tobool.i, i32 0, i32 2
  %1 = load i32* @flag_traditional, align 4, !tbaa !0
  %tobool1.i = icmp ne i32 %1, 0
  %cond2.i = zext i1 %tobool1.i to i32
  %or.i = or i32 %cond2.i, %cond.i
  %2 = load i32* @flag_no_asm, align 4, !tbaa !0
  %tobool3.i = icmp eq i32 %2, 0
  br i1 %tobool3.i, label %cond.end.i, label %cond.true.i

cond.true.i:                                      ; preds = %entry
  %cond5.i = select i1 %tobool.i, i32 4, i32 12
  br label %cond.end.i

cond.end.i:                                       ; preds = %cond.true.i, %entry
  %cond6.i = phi i32 [ %cond5.i, %cond.true.i ], [ 0, %entry ]
  %or7.i = or i32 %or.i, %cond6.i
  %3 = load i32* @c_language, align 4, !tbaa !3
  %cmp.i = icmp eq i32 %3, 2
  %or8.i = or i32 %or7.i, 16
  %or7.or8.i = select i1 %cmp.i, i32 %or7.i, i32 %or8.i
  %call.i = tail call noalias i8* @xcalloc(i64 114, i64 8) #6
  %4 = bitcast i8* %call.i to %union.tree_node**
  store %union.tree_node** %4, %union.tree_node*** @ridpointers, align 8, !tbaa !4
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %cond.end.i
  %indvars.iv.i = phi i64 [ 0, %cond.end.i ], [ %indvars.iv.next.i, %for.inc.i ]
  %disable.i = getelementptr inbounds [80 x %struct.resword]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @reswords to [80 x %struct.resword]*), i64 0, i64 %indvars.iv.i, i32 1
  %5 = bitcast [4 x i8]* %disable.i to i32*
  %bf.load.i = load i32* %5, align 8
  %bf.lshr.i = lshr i32 %bf.load.i, 16
  %and.i = and i32 %bf.lshr.i, %or7.or8.i
  %tobool11.i = icmp eq i32 %and.i, 0
  br i1 %tobool11.i, label %if.end13.i, label %for.inc.i

if.end13.i:                                       ; preds = %for.body.i
  %word.i = getelementptr inbounds [80 x %struct.resword]* bitcast (<{ { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] }, { i8*, i8, i8, i8, i8, [4 x i8] } }>* @reswords to [80 x %struct.resword]*), i64 0, i64 %indvars.iv.i, i32 0
  %6 = load i8** %word.i, align 16, !tbaa !4
  %call16.i = tail call %union.tree_node* @get_identifier(i8* %6) #6
  %conv20.i = trunc i32 %bf.load.i to i8
  %node.i = getelementptr inbounds %union.tree_node* %call16.i, i64 0, i32 0, i32 1
  %7 = bitcast i8** %node.i to %struct.cpp_hashnode*
  %rid_code.i = getelementptr inbounds %struct.cpp_hashnode* %7, i64 0, i32 3
  store i8 %conv20.i, i8* %rid_code.i, align 1, !tbaa !1
  %lang_flag_0.i = getelementptr inbounds %union.tree_node* %call16.i, i64 0, i32 0, i32 0, i32 2
  %8 = bitcast [4 x i8]* %lang_flag_0.i to i32*
  %bf.load21.i = load i32* %8, align 8
  %bf.set.i = or i32 %bf.load21.i, 16777216
  store i32 %bf.set.i, i32* %8, align 8
  %bf.clear27.i = and i32 %bf.load.i, 65535
  %idxprom2838.i = zext i32 %bf.clear27.i to i64
  %9 = load %union.tree_node*** @ridpointers, align 8, !tbaa !4
  %arrayidx29.i = getelementptr inbounds %union.tree_node** %9, i64 %idxprom2838.i
  store %union.tree_node* %call16.i, %union.tree_node** %arrayidx29.i, align 8, !tbaa !4
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.end13.i, %for.body.i
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 80
  br i1 %exitcond, label %init_reswords.exit, label %for.body.i

init_reswords.exit:                               ; preds = %for.inc.i
  tail call void @ggc_add_tree_root(%union.tree_node** @declspec_stack, i32 1) #6
  tail call void @ggc_add_tree_root(%union.tree_node** @current_declspecs, i32 1) #6
  tail call void @ggc_add_tree_root(%union.tree_node** @prefix_attributes, i32 1) #6
  tail call void @ggc_add_tree_root(%union.tree_node** @all_prefix_attributes, i32 1) #6
  ret void
}
