define %union.tree_node* @maybe_apply_renaming_pragma(%union.tree_node* %decl, %union.tree_node* %asmname) #0 {
entry:
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %0 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return [
    i32 30, label %if.then
    i32 34, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %entry
  %bf.clear8 = and i32 %bf.load, 262144
  %tobool = icmp eq i32 %bf.clear8, 0
  br i1 %tobool, label %lor.lhs.false9, label %if.then

lor.lhs.false9:                                   ; preds = %land.lhs.true
  %external_flag = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 5
  %1 = bitcast [8 x i8]* %external_flag to i64*
  %bf.load11 = load i64* %1, align 8
  %bf.cast = and i64 %bf.load11, 256
  %tobool14 = icmp eq i64 %bf.cast, 0
  br i1 %tobool14, label %lor.lhs.false15, label %if.then

lor.lhs.false15:                                  ; preds = %lor.lhs.false9
  %bf.clear19 = and i32 %bf.load, 524288
  %tobool20 = icmp eq i32 %bf.clear19, 0
  br i1 %tobool20, label %return, label %if.then

if.then:                                          ; preds = %entry, %lor.lhs.false15, %lor.lhs.false9, %land.lhs.true
  %assembler_name = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 14
  %2 = load %union.tree_node** %assembler_name, align 8, !tbaa !0
  %cmp22 = icmp eq %union.tree_node* %2, null
  br i1 %cmp22, label %cond.false, label %cond.end

cond.false:                                       ; preds = %if.then
  %3 = load void (%union.tree_node*)** @lang_set_decl_assembler_name, align 8, !tbaa !0
  tail call void %3(%union.tree_node* %decl) #3
  %.pre = load %union.tree_node** %assembler_name, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %if.then, %cond.false
  %4 = phi %union.tree_node* [ %2, %if.then ], [ %.pre, %cond.false ]
  %id = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds i8** %id, i64 1
  %6 = load i8** %5, align 8, !tbaa !0
  %7 = load i8* %6, align 1, !tbaa !1
  %cmp25 = icmp eq i8 %7, 42
  br i1 %cmp25, label %if.then27, label %return

if.then27:                                        ; preds = %cond.end
  %add.ptr = getelementptr inbounds i8* %6, i64 1
  %tobool31 = icmp eq %union.tree_node* %asmname, null
  br i1 %tobool31, label %if.end36, label %land.lhs.true32

land.lhs.true32:                                  ; preds = %if.then27
  %pointer = getelementptr inbounds %union.tree_node* %asmname, i64 0, i32 0, i32 4
  %8 = load %union.tree_node** %pointer, align 8
  %9 = bitcast %union.tree_node* %8 to i8*
  %call = tail call i32 @strcmp(i8* %9, i8* %add.ptr) #5
  %cmp33 = icmp eq i32 %call, 0
  br i1 %cmp33, label %if.end36, label %if.then35

if.then35:                                        ; preds = %land.lhs.true32
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([46 x i8]* @.str, i64 0, i64 0)) #3
  br label %if.end36

if.end36:                                         ; preds = %land.lhs.true32, %if.then27, %if.then35
  %call37 = tail call i64 @strlen(i8* %add.ptr) #5
  %conv38 = trunc i64 %call37 to i32
  %call39 = tail call %union.tree_node* @build_string(i32 %conv38, i8* %add.ptr) #3
  br label %return

return:                                           ; preds = %cond.end, %if.end36, %lor.lhs.false15, %entry
  %retval.0 = phi %union.tree_node* [ %asmname, %entry ], [ %asmname, %lor.lhs.false15 ], [ %call39, %if.end36 ], [ %asmname, %cond.end ]
  ret %union.tree_node* %retval.0
}
