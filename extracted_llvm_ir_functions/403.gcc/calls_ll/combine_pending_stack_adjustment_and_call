define internal fastcc i32 @combine_pending_stack_adjustment_and_call(i32 %unadjusted_args_size, %struct.args_size* nocapture %args_size, i32 %preferred_unit_stack_boundary) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr = getelementptr inbounds %struct.function* %0, i64 0, i32 2
  %1 = load %struct.expr_status** %expr, align 8, !tbaa !0
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status* %1, i64 0, i32 2
  %2 = load i32* %x_stack_pointer_delta, align 4, !tbaa !3
  %add = add nsw i32 %2, %unadjusted_args_size
  %rem = srem i32 %add, %preferred_unit_stack_boundary
  %conv = sext i32 %rem to i64
  %x_pending_stack_adjust = getelementptr inbounds %struct.expr_status* %1, i64 0, i32 0
  %3 = load i32* %x_pending_stack_adjust, align 4, !tbaa !3
  %rem2 = srem i32 %3, %preferred_unit_stack_boundary
  %conv3 = sext i32 %rem2 to i64
  %sub = sub nsw i64 %conv, %conv3
  %conv6 = sext i32 %3 to i64
  %cmp = icmp sgt i32 %preferred_unit_stack_boundary, 1
  br i1 %cmp, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %cmp8 = icmp sgt i64 %sub, 0
  br i1 %cmp8, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.then
  %conv11 = sext i32 %preferred_unit_stack_boundary to i64
  %sub1233 = sub i64 %conv6, %conv11
  %sub13 = add i64 %sub1233, %sub
  br label %if.end15

if.else:                                          ; preds = %if.then
  %add14 = add nsw i64 %sub, %conv6
  br label %if.end15

if.end15:                                         ; preds = %if.then10, %if.else, %entry
  %adjustment.0 = phi i64 [ %sub13, %if.then10 ], [ %add14, %if.else ], [ %conv6, %entry ]
  %conv20 = sext i32 %unadjusted_args_size to i64
  %sub19 = sub i64 %conv20, %adjustment.0
  %add21 = add i64 %sub19, %conv6
  %constant = getelementptr inbounds %struct.args_size* %args_size, i64 0, i32 0
  store i64 %add21, i64* %constant, align 8, !tbaa !6
  %conv22 = trunc i64 %adjustment.0 to i32
  ret i32 %conv22
}
