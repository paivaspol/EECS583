define internal fastcc i32 @store_one_arg(%struct.arg_data* %arg, %struct.rtx_def* %argblock, i32 %flags, i32 %variable_size) #0 {
entry:
  %tree_value = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 0
  %0 = load %union.tree_node** %tree_value, align 8, !tbaa !0
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %1 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @push_temp_slots() #7
  %2 = load i32* @target_flags, align 4, !tbaa !3
  %and = and i32 %2, 4096
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end113, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %and1 = and i32 %flags, 256
  %tobool2 = icmp eq i32 %and1, 0
  br i1 %tobool2, label %if.then3, label %if.end113

if.then3:                                         ; preds = %land.lhs.true
  %tobool4 = icmp ne %struct.rtx_def* %argblock, null
  %tobool6 = icmp eq i32 %variable_size, 0
  %or.cond = and i1 %tobool4, %tobool6
  br i1 %or.cond, label %land.lhs.true7, label %if.end113

land.lhs.true7:                                   ; preds = %if.then3
  %stack = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 12
  %3 = load %struct.rtx_def** %stack, align 8, !tbaa !0
  %tobool8 = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool8, label %if.end113, label %if.then9

if.then9:                                         ; preds = %land.lhs.true7
  %stack_slot = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 13
  %4 = load %struct.rtx_def** %stack_slot, align 8, !tbaa !0
  %arrayidx = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %6 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load10 = load i32* %6, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 75
  br i1 %cmp12, label %if.then13, label %if.end23

if.then13:                                        ; preds = %if.then9
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 1
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx20, align 8, !tbaa !0
  %rtwint = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0, i32 0
  %8 = load i64* %rtwint, align 8, !tbaa !6
  %conv = trunc i64 %8 to i32
  br label %if.end23

if.end23:                                         ; preds = %if.then9, %if.then13
  %lower_bound.0 = phi i32 [ %conv, %if.then13 ], [ 0, %if.then9 ]
  %conv242 = zext i32 %lower_bound.0 to i64
  %constant = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 11, i32 0
  %9 = load i64* %constant, align 8, !tbaa !6
  %add = add nsw i64 %conv242, %9
  %conv25 = trunc i64 %add to i32
  %cmp2623 = icmp slt i32 %lower_bound.0, %conv25
  br i1 %cmp2623, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end23
  %10 = load i8** @stack_usage_map, align 8, !tbaa !0
  %11 = sext i32 %lower_bound.0 to i64
  br label %for.body

for.cond:                                         ; preds = %for.body
  %12 = trunc i64 %indvars.iv.next28 to i32
  %cmp26 = icmp slt i32 %12, %conv25
  br i1 %cmp26, label %for.body, label %for.end

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv27 = phi i64 [ %11, %for.body.lr.ph ], [ %indvars.iv.next28, %for.cond ]
  %i.024 = phi i32 [ %lower_bound.0, %for.body.lr.ph ], [ %inc, %for.cond ]
  %arrayidx28 = getelementptr inbounds i8* %10, i64 %indvars.iv27
  %13 = load i8* %arrayidx28, align 1, !tbaa !1
  %tobool30 = icmp ne i8 %13, 0
  %14 = trunc i64 %indvars.iv27 to i32
  %cmp32 = icmp sgt i32 %14, 0
  %or.cond3 = and i1 %tobool30, %cmp32
  %indvars.iv.next28 = add i64 %indvars.iv27, 1
  %inc = add nsw i32 %i.024, 1
  br i1 %or.cond3, label %for.end, label %for.cond

for.end:                                          ; preds = %for.cond, %for.body, %if.end23
  %i.0.lcssa = phi i32 [ %lower_bound.0, %if.end23 ], [ %i.024, %for.body ], [ %inc, %for.cond ]
  %cmp36 = icmp eq i32 %i.0.lcssa, %conv25
  br i1 %cmp36, label %land.lhs.true99, label %if.then38

if.then38:                                        ; preds = %for.end
  %mul = shl nsw i64 %9, 3
  %conv41 = trunc i64 %mul to i32
  %call = tail call i32 @mode_for_size(i32 %conv41, i32 1, i32 1) #7
  %15 = load %struct.rtx_def** %stack_slot, align 8, !tbaa !0
  %arrayidx44 = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 1, i64 0
  %rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %16 = load %struct.rtx_def** %rtx45, align 8, !tbaa !0
  %call46 = tail call %struct.rtx_def* @memory_address(i32 %call, %struct.rtx_def* %16) #7
  %call47 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 %call, %struct.rtx_def* %call46) #7
  %cmp48 = icmp eq i32 %call, 51
  br i1 %cmp48, label %if.then50, label %if.else88

if.then50:                                        ; preds = %if.then38
  %17 = load %union.tree_node** %tree_value, align 8, !tbaa !0
  %type = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 1
  %18 = load %union.tree_node** %type, align 8, !tbaa !0
  %readonly_flag = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 2
  %19 = bitcast [4 x i8]* %readonly_flag to i32*
  %bf.load54 = load i32* %19, align 8
  %20 = lshr i32 %bf.load54, 10
  %mul61 = and i32 %20, 2
  %type62 = bitcast %union.tree_node* %18 to %struct.tree_type*
  %restrict_flag = getelementptr inbounds %struct.tree_type* %type62, i64 0, i32 6
  %21 = bitcast [4 x i8]* %restrict_flag to i32*
  %bf.load63 = load i32* %21, align 4
  %22 = lshr i32 %bf.load63, 19
  %mul66 = and i32 %22, 4
  %bf.clear71 = and i32 %bf.load54, 255
  %cmp72 = icmp eq i32 %bf.clear71, 20
  br i1 %cmp72, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then50
  %type75 = getelementptr inbounds %union.tree_node* %18, i64 0, i32 0, i32 0, i32 1
  %23 = load %union.tree_node** %type75, align 8, !tbaa !0
  %tobool76 = icmp ne %union.tree_node* %23, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then50
  %24 = phi i1 [ false, %if.then50 ], [ %tobool76, %land.rhs ]
  %land.ext = zext i1 %24 to i32
  %mul77 = shl nuw nsw i32 %land.ext, 3
  %or = or i32 %mul61, %mul66
  %or67 = or i32 %or, %mul77
  %or79 = or i32 %or67, 1
  %call80 = tail call %union.tree_node* @build_qualified_type(%union.tree_node* %18, i32 %or79) #7
  %call81 = tail call %struct.rtx_def* @assign_temp(%union.tree_node* %call80, i32 0, i32 1, i32 1) #7
  %save_area = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 14
  store %struct.rtx_def* %call81, %struct.rtx_def** %save_area, align 8, !tbaa !0
  tail call void @preserve_temp_slots(%struct.rtx_def* %call81) #7
  %25 = load %struct.rtx_def** %save_area, align 8, !tbaa !0
  %call84 = tail call %struct.rtx_def* @validize_mem(%struct.rtx_def* %25) #7
  %26 = load %union.tree_node** %tree_value, align 8, !tbaa !0
  %call86 = tail call %struct.rtx_def* @expr_size(%union.tree_node* %26) #7
  %call87 = tail call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %call84, %struct.rtx_def* %call47, %struct.rtx_def* %call86) #7
  br label %land.lhs.true99

if.else88:                                        ; preds = %if.then38
  %call89 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %call) #7
  %save_area90 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 14
  store %struct.rtx_def* %call89, %struct.rtx_def** %save_area90, align 8, !tbaa !0
  %call92 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call89, %struct.rtx_def* %call47) #7
  br label %land.lhs.true99

land.lhs.true99:                                  ; preds = %for.end, %if.else88, %land.end
  %.pre29 = load %struct.rtx_def** %stack, align 8, !tbaa !0
  %phitmp30 = icmp ne %struct.rtx_def* %.pre29, null
  %cmp10421 = icmp slt i32 %lower_bound.0, %conv25
  %or.cond31 = and i1 %phitmp30, %cmp10421
  br i1 %or.cond31, label %for.body106.lr.ph, label %if.end113

for.body106.lr.ph:                                ; preds = %land.lhs.true99
  %27 = sext i32 %lower_bound.0 to i64
  br label %for.body106

for.body106:                                      ; preds = %for.body106, %for.body106.lr.ph
  %indvars.iv = phi i64 [ %27, %for.body106.lr.ph ], [ %indvars.iv.next, %for.body106 ]
  %28 = load i8** @stack_usage_map, align 8, !tbaa !0
  %arrayidx108 = getelementptr inbounds i8* %28, i64 %indvars.iv
  store i8 1, i8* %arrayidx108, align 1, !tbaa !1
  %indvars.iv.next = add i64 %indvars.iv, 1
  %29 = trunc i64 %indvars.iv.next to i32
  %cmp104 = icmp slt i32 %29, %conv25
  br i1 %cmp104, label %for.body106, label %if.end113

if.end113:                                        ; preds = %land.lhs.true99, %land.lhs.true7, %for.body106, %if.then3, %land.lhs.true, %if.end
  %pass_on_stack = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 8
  %30 = load i32* %pass_on_stack, align 4, !tbaa !3
  %tobool114 = icmp eq i32 %30, 0
  br i1 %tobool114, label %if.end123, label %if.end130

if.end123:                                        ; preds = %if.end113
  %and116 = and i32 %flags, 256
  %tobool117 = icmp eq i32 %and116, 0
  %tail_call_reg = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 5
  %reg120 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 4
  %reg.0.in = select i1 %tobool117, %struct.rtx_def** %reg120, %struct.rtx_def** %tail_call_reg
  %reg.0 = load %struct.rtx_def** %reg.0.in, align 8
  %partial122 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 7
  %31 = load i32* %partial122, align 4, !tbaa !3
  %cmp124 = icmp ne %struct.rtx_def* %reg.0, null
  %cmp127 = icmp eq i32 %31, 0
  %or.cond5 = and i1 %cmp124, %cmp127
  br i1 %or.cond5, label %if.then129, label %if.end130

if.then129:                                       ; preds = %if.end123
  tail call void @fancy_abort(i8* getelementptr inbounds ([49 x i8]* @.str3, i64 0, i64 0), i32 4370, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.store_one_arg, i64 0, i64 0)) #10
  unreachable

if.end130:                                        ; preds = %if.end113, %if.end123
  %cmp12715 = phi i1 [ %cmp127, %if.end123 ], [ true, %if.end113 ]
  %reg.114 = phi %struct.rtx_def* [ %reg.0, %if.end123 ], [ null, %if.end113 ]
  %partial.013 = phi i32 [ %31, %if.end123 ], [ 0, %if.end113 ]
  %n_aligned_regs = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 16
  %32 = load i32* %n_aligned_regs, align 4, !tbaa !3
  %cmp131 = icmp eq i32 %32, 0
  %reg.1. = select i1 %cmp131, %struct.rtx_def* %reg.114, %struct.rtx_def* null
  %value = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 2
  %33 = load %struct.rtx_def** %value, align 8, !tbaa !0
  %cmp135 = icmp eq %struct.rtx_def* %33, null
  br i1 %cmp135, label %if.then137, label %if.end183

if.then137:                                       ; preds = %if.end130
  br i1 %tobool114, label %if.end142, label %if.then140

if.then140:                                       ; preds = %if.then137
  %34 = load i32* @stack_arg_under_construction, align 4, !tbaa !3
  %inc141 = add nsw i32 %34, 1
  store i32 %inc141, i32* @stack_arg_under_construction, align 4, !tbaa !3
  br label %if.end142

if.end142:                                        ; preds = %if.then137, %if.then140
  br i1 %cmp12715, label %lor.lhs.false, label %if.end142.cond.end_crit_edge

if.end142.cond.end_crit_edge:                     ; preds = %if.end142
  %mode156.pre = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 1
  %type158.pre = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  br label %cond.end

lor.lhs.false:                                    ; preds = %if.end142
  %type145 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %35 = load %union.tree_node** %type145, align 8, !tbaa !0
  %type146 = bitcast %union.tree_node* %35 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type146, i64 0, i32 6
  %36 = bitcast [4 x i8]* %mode to i32*
  %bf.load147 = load i32* %36, align 4
  %bf.lshr148 = lshr i32 %bf.load147, 9
  %bf.clear149 = and i32 %bf.lshr148, 127
  %mode150 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 1
  %37 = load i32* %mode150, align 4, !tbaa !4
  %cmp151 = icmp eq i32 %bf.clear149, %37
  br i1 %cmp151, label %cond.false, label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %stack153 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 12
  %38 = load %struct.rtx_def** %stack153, align 8, !tbaa !0
  br label %cond.end

cond.end:                                         ; preds = %if.end142.cond.end_crit_edge, %lor.lhs.false, %cond.false
  %type158.pre-phi = phi %union.tree_node** [ %type158.pre, %if.end142.cond.end_crit_edge ], [ %type145, %lor.lhs.false ], [ %type145, %cond.false ]
  %mode156.pre-phi = phi i32* [ %mode156.pre, %if.end142.cond.end_crit_edge ], [ %mode150, %lor.lhs.false ], [ %mode150, %cond.false ]
  %cond = phi %struct.rtx_def* [ null, %if.end142.cond.end_crit_edge ], [ null, %lor.lhs.false ], [ %38, %cond.false ]
  %call154 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %0, %struct.rtx_def* %cond, i32 0, i32 0) #7
  store %struct.rtx_def* %call154, %struct.rtx_def** %value, align 8, !tbaa !0
  %39 = load i32* %mode156.pre-phi, align 4, !tbaa !4
  %40 = load %union.tree_node** %type158.pre-phi, align 8, !tbaa !0
  %type159 = bitcast %union.tree_node* %40 to %struct.tree_type*
  %mode160 = getelementptr inbounds %struct.tree_type* %type159, i64 0, i32 6
  %41 = bitcast [4 x i8]* %mode160 to i32*
  %bf.load161 = load i32* %41, align 4
  %bf.lshr162 = lshr i32 %bf.load161, 9
  %bf.clear163 = and i32 %bf.lshr162, 127
  %cmp164 = icmp eq i32 %39, %bf.clear163
  br i1 %cmp164, label %if.end178, label %if.then166

if.then166:                                       ; preds = %cond.end
  %unsignedp = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 6
  %42 = load i32* %unsignedp, align 4, !tbaa !3
  %call176 = tail call %struct.rtx_def* @convert_modes(i32 %39, i32 %bf.clear163, %struct.rtx_def* %call154, i32 %42) #7
  store %struct.rtx_def* %call176, %struct.rtx_def** %value, align 8, !tbaa !0
  br label %if.end178

if.end178:                                        ; preds = %cond.end, %if.then166
  %43 = phi %struct.rtx_def* [ %call154, %cond.end ], [ %call176, %if.then166 ]
  %44 = load i32* %pass_on_stack, align 4, !tbaa !3
  %tobool180 = icmp eq i32 %44, 0
  br i1 %tobool180, label %if.end183, label %if.then181

if.then181:                                       ; preds = %if.end178
  %45 = load i32* @stack_arg_under_construction, align 4, !tbaa !3
  %dec = add nsw i32 %45, -1
  store i32 %dec, i32* @stack_arg_under_construction, align 4, !tbaa !3
  br label %if.end183

if.end183:                                        ; preds = %if.end178, %if.then181, %if.end130
  %46 = phi %struct.rtx_def* [ %43, %if.end178 ], [ %43, %if.then181 ], [ %33, %if.end130 ]
  %and184 = and i32 %flags, 8
  %tobool185 = icmp eq i32 %and184, 0
  br i1 %tobool185, label %if.end187, label %if.then186

if.then186:                                       ; preds = %if.end183
  tail call void @do_pending_stack_adjust() #7
  %.pre = load %struct.rtx_def** %value, align 8, !tbaa !0
  br label %if.end187

if.end187:                                        ; preds = %if.end183, %if.then186
  %47 = phi %struct.rtx_def* [ %.pre, %if.then186 ], [ %46, %if.end183 ]
  %stack189 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 12
  %48 = load %struct.rtx_def** %stack189, align 8, !tbaa !0
  %cmp190 = icmp eq %struct.rtx_def* %47, %48
  br i1 %cmp190, label %if.end654, label %if.else193

if.else193:                                       ; preds = %if.end187
  %mode194 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 1
  %49 = load i32* %mode194, align 4, !tbaa !4
  %cmp195 = icmp eq i32 %49, 51
  br i1 %cmp195, label %if.else295, label %if.then197

if.then197:                                       ; preds = %if.else193
  %idxprom200 = sext i32 %49 to i64
  %arrayidx201 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom200
  %50 = load i8* %arrayidx201, align 1, !tbaa !1
  %conv202 = zext i8 %50 to i32
  %51 = load i32* @target_flags, align 4, !tbaa !3
  %and203 = and i32 %51, 33554432
  %tobool204 = icmp eq i32 %and203, 0
  br i1 %tobool204, label %cond.false208, label %cond.true205

cond.true205:                                     ; preds = %if.then197
  %add206 = add nsw i32 %conv202, 7
  %and207 = and i32 %add206, 504
  br label %cond.end211

cond.false208:                                    ; preds = %if.then197
  %add209 = add nsw i32 %conv202, 1
  %and210 = and i32 %add209, 510
  br label %cond.end211

cond.end211:                                      ; preds = %cond.false208, %cond.true205
  %cond212 = phi i32 [ %and207, %cond.true205 ], [ %and210, %cond.false208 ]
  %and213 = lshr i32 %51, 20
  %52 = and i32 %and213, 32
  %53 = add i32 %52, 32
  %div = sdiv i32 %53, 8
  %add216 = add i32 %cond212, -1
  %sub = add i32 %add216, %div
  %div221 = srem i32 %sub, %div
  %type230 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %54 = load %union.tree_node** %type230, align 8, !tbaa !0
  %sum = add i32 %div221, %cond212
  %sub231 = sub i32 %sub, %sum
  %offset = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9
  %var = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 1
  %55 = load %union.tree_node** %var, align 8, !tbaa !0
  %cmp232 = icmp eq %union.tree_node* %55, null
  br i1 %cmp232, label %cond.true234, label %cond.false247

cond.true234:                                     ; preds = %cond.end211
  %constant236 = getelementptr inbounds %struct.args_size* %offset, i64 0, i32 0
  %56 = load i64* %constant236, align 8, !tbaa !6
  %call237 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %56) #7
  br label %cond.end258

cond.false247:                                    ; preds = %cond.end211
  %57 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !0
  %call250 = tail call %union.tree_node* @convert(%union.tree_node* %57, %union.tree_node* %55) #7
  %constant252 = getelementptr inbounds %struct.args_size* %offset, i64 0, i32 0
  %58 = load i64* %constant252, align 8, !tbaa !6
  %call253 = tail call %union.tree_node* @size_int_wide(i64 %58, i32 1) #7
  %call254 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call250, %union.tree_node* %call253) #7
  %call257 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call254, %struct.rtx_def* null, i32 0, i32 0) #7
  br label %cond.end258

cond.end258:                                      ; preds = %cond.false247, %cond.true234
  %cond259 = phi %struct.rtx_def* [ %call237, %cond.true234 ], [ %call257, %cond.false247 ]
  %alignment_pad = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17
  %var260 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17, i32 1
  %59 = load %union.tree_node** %var260, align 8, !tbaa !0
  %cmp261 = icmp eq %union.tree_node* %59, null
  br i1 %cmp261, label %cond.true263, label %cond.false276

cond.true263:                                     ; preds = %cond.end258
  %constant265 = getelementptr inbounds %struct.args_size* %alignment_pad, i64 0, i32 0
  %60 = load i64* %constant265, align 8, !tbaa !6
  %call266 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %60) #7
  br label %cond.end287

cond.false276:                                    ; preds = %cond.end258
  %61 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !0
  %call279 = tail call %union.tree_node* @convert(%union.tree_node* %61, %union.tree_node* %59) #7
  %constant281 = getelementptr inbounds %struct.args_size* %alignment_pad, i64 0, i32 0
  %62 = load i64* %constant281, align 8, !tbaa !6
  %call282 = tail call %union.tree_node* @size_int_wide(i64 %62, i32 1) #7
  %call283 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call279, %union.tree_node* %call282) #7
  %call286 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call283, %struct.rtx_def* null, i32 0, i32 0) #7
  br label %cond.end287

cond.end287:                                      ; preds = %cond.false276, %cond.true263
  %cond288 = phi %struct.rtx_def* [ %call266, %cond.true263 ], [ %call286, %cond.false276 ]
  tail call void @emit_push_insn(%struct.rtx_def* %47, i32 %49, %union.tree_node* %54, %struct.rtx_def* null, i32 0, i32 %partial.013, %struct.rtx_def* %reg.1., i32 %sub231, %struct.rtx_def* %argblock, %struct.rtx_def* %cond259, i32 0, %struct.rtx_def* %cond288) #7
  br i1 %cmp12715, label %if.then291, label %if.end654

if.then291:                                       ; preds = %cond.end287
  %63 = load %struct.rtx_def** %stack189, align 8, !tbaa !0
  store %struct.rtx_def* %63, %struct.rtx_def** %value, align 8, !tbaa !0
  br label %if.end654

if.else295:                                       ; preds = %if.else193
  %size296 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 11
  %var297 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 11, i32 1
  %64 = load %union.tree_node** %var297, align 8, !tbaa !0
  %cmp298 = icmp eq %union.tree_node* %64, null
  br i1 %cmp298, label %if.else331, label %cond.false318

cond.false318:                                    ; preds = %if.else295
  %65 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !0
  %call321 = tail call %union.tree_node* @convert(%union.tree_node* %65, %union.tree_node* %64) #7
  %constant323 = getelementptr inbounds %struct.args_size* %size296, i64 0, i32 0
  %66 = load i64* %constant323, align 8, !tbaa !6
  %call324 = tail call %union.tree_node* @size_int_wide(i64 %66, i32 1) #7
  %call325 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call321, %union.tree_node* %call324) #7
  %call328 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call325, %struct.rtx_def* null, i32 0, i32 0) #7
  br label %if.end346

if.else331:                                       ; preds = %if.else295
  %constant333 = getelementptr inbounds %struct.args_size* %size296, i64 0, i32 0
  %67 = load i64* %constant333, align 8, !tbaa !6
  %type335 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %68 = load %union.tree_node** %type335, align 8, !tbaa !0
  %call336 = tail call i64 @int_size_in_bytes(%union.tree_node* %68) #7
  %sub337 = sub i64 %67, %call336
  %69 = load i32* @target_flags, align 4, !tbaa !3
  %and338 = lshr i32 %69, 23
  %70 = and i32 %and338, 4
  %71 = add i32 %70, 4
  %mul341 = mul nsw i32 %71, %partial.013
  %conv3421 = zext i32 %mul341 to i64
  %add343 = add nsw i64 %sub337, %conv3421
  %conv344 = trunc i64 %add343 to i32
  %call345 = tail call %struct.rtx_def* @expr_size(%union.tree_node* %0) #7
  br label %if.end346

if.end346:                                        ; preds = %cond.false318, %if.else331
  %excess.0 = phi i32 [ %conv344, %if.else331 ], [ 0, %cond.false318 ]
  %size_rtx.0 = phi %struct.rtx_def* [ %call345, %if.else331 ], [ %call328, %cond.false318 ]
  %and347 = and i32 %flags, 256
  %tobool348 = icmp eq i32 %and347, 0
  br i1 %tobool348, label %if.end459, label %land.lhs.true349

land.lhs.true349:                                 ; preds = %if.end346
  %72 = load %struct.rtx_def** %value, align 8, !tbaa !0
  %73 = bitcast %struct.rtx_def* %72 to i32*
  %bf.load351 = load i32* %73, align 8
  %bf.clear352 = and i32 %bf.load351, 65535
  %cmp353 = icmp eq i32 %bf.clear352, 66
  br i1 %cmp353, label %if.then355, label %if.end459

if.then355:                                       ; preds = %land.lhs.true349
  %arrayidx359 = getelementptr inbounds %struct.rtx_def* %72, i64 0, i32 1, i64 0
  %rtx360 = bitcast %union.rtunion_def* %arrayidx359 to %struct.rtx_def**
  %74 = load %struct.rtx_def** %rtx360, align 8, !tbaa !0
  %75 = load %struct.function** @cfun, align 8, !tbaa !0
  %internal_arg_pointer = getelementptr inbounds %struct.function* %75, i64 0, i32 15
  %76 = load %struct.rtx_def** %internal_arg_pointer, align 8, !tbaa !0
  %cmp361 = icmp eq %struct.rtx_def* %74, %76
  br i1 %cmp361, label %if.end410, label %lor.lhs.false363

lor.lhs.false363:                                 ; preds = %if.then355
  %77 = bitcast %struct.rtx_def* %74 to i32*
  %bf.load367 = load i32* %77, align 8
  %bf.clear368 = and i32 %bf.load367, 65535
  %cmp369 = icmp eq i32 %bf.clear368, 75
  br i1 %cmp369, label %land.lhs.true371, label %if.end459

land.lhs.true371:                                 ; preds = %lor.lhs.false363
  %fld375 = getelementptr inbounds %struct.rtx_def* %74, i64 0, i32 1
  %rtx377 = bitcast [1 x %union.rtunion_def]* %fld375 to %struct.rtx_def**
  %78 = load %struct.rtx_def** %rtx377, align 8, !tbaa !0
  %cmp379 = icmp eq %struct.rtx_def* %78, %76
  br i1 %cmp379, label %land.lhs.true381, label %if.end459

land.lhs.true381:                                 ; preds = %land.lhs.true371
  %arrayidx386 = getelementptr inbounds %struct.rtx_def* %74, i64 0, i32 1, i64 1
  %rtx387 = bitcast %union.rtunion_def* %arrayidx386 to %struct.rtx_def**
  %79 = load %struct.rtx_def** %rtx387, align 8, !tbaa !0
  %80 = bitcast %struct.rtx_def* %79 to i32*
  %bf.load388 = load i32* %80, align 8
  %bf.clear389 = and i32 %bf.load388, 65535
  %cmp390 = icmp eq i32 %bf.clear389, 54
  br i1 %cmp390, label %if.then392, label %if.end459

if.then392:                                       ; preds = %land.lhs.true381
  br i1 %cmp361, label %if.end410, label %if.then399

if.then399:                                       ; preds = %if.then392
  %arrayidx404 = getelementptr inbounds %struct.rtx_def* %74, i64 0, i32 1, i64 1
  %rtx405 = bitcast %union.rtunion_def* %arrayidx404 to %struct.rtx_def**
  %81 = load %struct.rtx_def** %rtx405, align 8, !tbaa !0
  %rtwint408 = getelementptr inbounds %struct.rtx_def* %81, i64 0, i32 1, i64 0, i32 0
  %82 = load i64* %rtwint408, align 8, !tbaa !6
  %sext = shl i64 %82, 32
  %phitmp = ashr exact i64 %sext, 32
  br label %if.end410

if.end410:                                        ; preds = %if.then355, %if.then392, %if.then399
  %i357.0 = phi i64 [ %phitmp, %if.then399 ], [ 0, %if.then392 ], [ 0, %if.then355 ]
  %var412 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 1
  %83 = load %union.tree_node** %var412, align 8, !tbaa !0
  %tobool413 = icmp eq %union.tree_node* %83, null
  br i1 %tobool413, label %lor.lhs.false414, label %if.then419

lor.lhs.false414:                                 ; preds = %if.end410
  %84 = bitcast %struct.rtx_def* %size_rtx.0 to i32*
  %bf.load415 = load i32* %84, align 8
  %bf.clear416 = and i32 %bf.load415, 65535
  %cmp417 = icmp eq i32 %bf.clear416, 54
  br i1 %cmp417, label %if.end420, label %if.then419

if.then419:                                       ; preds = %lor.lhs.false414, %if.end410
  tail call void @fancy_abort(i8* getelementptr inbounds ([49 x i8]* @.str3, i64 0, i64 0), i32 4515, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.store_one_arg, i64 0, i64 0)) #10
  unreachable

if.end420:                                        ; preds = %lor.lhs.false414
  %constant422 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 0
  %85 = load i64* %constant422, align 8, !tbaa !6
  %cmp424 = icmp sgt i64 %85, %i357.0
  br i1 %cmp424, label %if.then426, label %if.else438

if.then426:                                       ; preds = %if.end420
  %rtwint432 = getelementptr inbounds %struct.rtx_def* %size_rtx.0, i64 0, i32 1, i64 0, i32 0
  %86 = load i64* %rtwint432, align 8, !tbaa !6
  %add433 = add nsw i64 %86, %i357.0
  %cmp434 = icmp slt i64 %85, %add433
  %. = zext i1 %cmp434 to i32
  br label %if.end459

if.else438:                                       ; preds = %if.end420
  %cmp442 = icmp slt i64 %85, %i357.0
  br i1 %cmp442, label %if.then444, label %if.end459

if.then444:                                       ; preds = %if.else438
  %rtwint450 = getelementptr inbounds %struct.rtx_def* %size_rtx.0, i64 0, i32 1, i64 0, i32 0
  %87 = load i64* %rtwint450, align 8, !tbaa !6
  %add451 = add nsw i64 %87, %85
  %cmp452 = icmp slt i64 %i357.0, %add451
  %.6 = zext i1 %cmp452 to i32
  br label %if.end459

if.end459:                                        ; preds = %if.then444, %if.then426, %if.end346, %lor.lhs.false363, %land.lhs.true371, %land.lhs.true381, %if.else438, %land.lhs.true349
  %sibcall_failure.0 = phi i32 [ 0, %if.else438 ], [ 0, %land.lhs.true381 ], [ 0, %land.lhs.true371 ], [ 0, %lor.lhs.false363 ], [ 0, %land.lhs.true349 ], [ 0, %if.end346 ], [ %., %if.then426 ], [ %.6, %if.then444 ]
  %reg460 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 4
  %88 = load %struct.rtx_def** %reg460, align 8, !tbaa !0
  %tobool461 = icmp eq %struct.rtx_def* %88, null
  br i1 %tobool461, label %if.end578, label %land.lhs.true462

land.lhs.true462:                                 ; preds = %if.end459
  %89 = load i32* %pass_on_stack, align 4, !tbaa !3
  %tobool464 = icmp eq i32 %89, 0
  br i1 %tobool464, label %if.end578, label %if.then465

if.then465:                                       ; preds = %land.lhs.true462
  %constant467 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 0
  %90 = load i64* %constant467, align 8, !tbaa !6
  %cmp469 = icmp slt i64 %90, 0
  br i1 %cmp469, label %land.lhs.true471, label %if.end578

land.lhs.true471:                                 ; preds = %if.then465
  %var473 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 1
  %91 = load %union.tree_node** %var473, align 8, !tbaa !0
  %tobool474 = icmp eq %union.tree_node* %91, null
  br i1 %tobool474, label %land.lhs.true482, label %if.then475

if.then475:                                       ; preds = %land.lhs.true471
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([56 x i8]* @.str5, i64 0, i64 0)) #7
  br label %if.end578

land.lhs.true482:                                 ; preds = %land.lhs.true471
  %92 = load %union.tree_node** %var297, align 8, !tbaa !0
  %tobool485 = icmp eq %union.tree_node* %92, null
  br i1 %tobool485, label %land.lhs.true493, label %if.then486

if.then486:                                       ; preds = %land.lhs.true482
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([54 x i8]* @.str6, i64 0, i64 0)) #7
  br label %if.end578

land.lhs.true493:                                 ; preds = %land.lhs.true482
  %constant497 = getelementptr inbounds %struct.args_size* %size296, i64 0, i32 0
  %93 = load i64* %constant497, align 8, !tbaa !6
  %add498 = add nsw i64 %93, %90
  %cmp500 = icmp sgt i64 %add498, 0
  br i1 %cmp500, label %if.then502, label %if.end578

if.then502:                                       ; preds = %land.lhs.true493
  %sub506 = sub nsw i64 0, %90
  %call507 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub506) #7
  %94 = load %struct.rtx_def** %value, align 8, !tbaa !0
  %95 = load i32* %mode194, align 4, !tbaa !4
  %type511 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %96 = load %union.tree_node** %type511, align 8, !tbaa !0
  %align = getelementptr inbounds %union.tree_node* %96, i64 0, i32 0, i32 7
  %97 = bitcast %union.tree_node** %align to i32*
  %98 = load i32* %97, align 4, !tbaa !3
  %99 = load %union.tree_node** %var473, align 8, !tbaa !0
  %cmp517 = icmp eq %union.tree_node* %99, null
  br i1 %cmp517, label %cond.true519, label %cond.false532

cond.true519:                                     ; preds = %if.then502
  %100 = load i64* %constant467, align 8, !tbaa !6
  %call522 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %100) #7
  br label %cond.end543

cond.false532:                                    ; preds = %if.then502
  %101 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !0
  %call535 = tail call %union.tree_node* @convert(%union.tree_node* %101, %union.tree_node* %99) #7
  %102 = load i64* %constant467, align 8, !tbaa !6
  %call538 = tail call %union.tree_node* @size_int_wide(i64 %102, i32 1) #7
  %call539 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call535, %union.tree_node* %call538) #7
  %call542 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call539, %struct.rtx_def* null, i32 0, i32 0) #7
  br label %cond.end543

cond.end543:                                      ; preds = %cond.false532, %cond.true519
  %cond544 = phi %struct.rtx_def* [ %call522, %cond.true519 ], [ %call542, %cond.false532 ]
  %alignment_pad545 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17
  %var546 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17, i32 1
  %103 = load %union.tree_node** %var546, align 8, !tbaa !0
  %cmp547 = icmp eq %union.tree_node* %103, null
  br i1 %cmp547, label %cond.true549, label %cond.false562

cond.true549:                                     ; preds = %cond.end543
  %constant551 = getelementptr inbounds %struct.args_size* %alignment_pad545, i64 0, i32 0
  %104 = load i64* %constant551, align 8, !tbaa !6
  %call552 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %104) #7
  br label %cond.end573

cond.false562:                                    ; preds = %cond.end543
  %105 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !0
  %call565 = tail call %union.tree_node* @convert(%union.tree_node* %105, %union.tree_node* %103) #7
  %constant567 = getelementptr inbounds %struct.args_size* %alignment_pad545, i64 0, i32 0
  %106 = load i64* %constant567, align 8, !tbaa !6
  %call568 = tail call %union.tree_node* @size_int_wide(i64 %106, i32 1) #7
  %call569 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call565, %union.tree_node* %call568) #7
  %call572 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call569, %struct.rtx_def* null, i32 0, i32 0) #7
  br label %cond.end573

cond.end573:                                      ; preds = %cond.false562, %cond.true549
  %cond574 = phi %struct.rtx_def* [ %call552, %cond.true549 ], [ %call572, %cond.false562 ]
  tail call void @emit_push_insn(%struct.rtx_def* %94, i32 %95, %union.tree_node* %96, %struct.rtx_def* %call507, i32 %98, i32 %partial.013, %struct.rtx_def* %reg.1., i32 %excess.0, %struct.rtx_def* %argblock, %struct.rtx_def* %cond544, i32 0, %struct.rtx_def* %cond574) #7
  br label %if.end578

if.end578:                                        ; preds = %land.lhs.true493, %if.then465, %land.lhs.true462, %if.end459, %if.then475, %cond.end573, %if.then486
  %107 = load %struct.rtx_def** %value, align 8, !tbaa !0
  %108 = load i32* %mode194, align 4, !tbaa !4
  %type582 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %109 = load %union.tree_node** %type582, align 8, !tbaa !0
  %align586 = getelementptr inbounds %union.tree_node* %109, i64 0, i32 0, i32 7
  %110 = bitcast %union.tree_node** %align586 to i32*
  %111 = load i32* %110, align 4, !tbaa !3
  %offset587 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9
  %var588 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 9, i32 1
  %112 = load %union.tree_node** %var588, align 8, !tbaa !0
  %cmp589 = icmp eq %union.tree_node* %112, null
  br i1 %cmp589, label %cond.true591, label %cond.false604

cond.true591:                                     ; preds = %if.end578
  %constant593 = getelementptr inbounds %struct.args_size* %offset587, i64 0, i32 0
  %113 = load i64* %constant593, align 8, !tbaa !6
  %call594 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %113) #7
  br label %cond.end615

cond.false604:                                    ; preds = %if.end578
  %114 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !0
  %call607 = tail call %union.tree_node* @convert(%union.tree_node* %114, %union.tree_node* %112) #7
  %constant609 = getelementptr inbounds %struct.args_size* %offset587, i64 0, i32 0
  %115 = load i64* %constant609, align 8, !tbaa !6
  %call610 = tail call %union.tree_node* @size_int_wide(i64 %115, i32 1) #7
  %call611 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call607, %union.tree_node* %call610) #7
  %call614 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call611, %struct.rtx_def* null, i32 0, i32 0) #7
  br label %cond.end615

cond.end615:                                      ; preds = %cond.false604, %cond.true591
  %cond616 = phi %struct.rtx_def* [ %call594, %cond.true591 ], [ %call614, %cond.false604 ]
  %alignment_pad617 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17
  %var618 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 17, i32 1
  %116 = load %union.tree_node** %var618, align 8, !tbaa !0
  %cmp619 = icmp eq %union.tree_node* %116, null
  br i1 %cmp619, label %cond.true621, label %cond.false634

cond.true621:                                     ; preds = %cond.end615
  %constant623 = getelementptr inbounds %struct.args_size* %alignment_pad617, i64 0, i32 0
  %117 = load i64* %constant623, align 8, !tbaa !6
  %call624 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %117) #7
  br label %cond.end645

cond.false634:                                    ; preds = %cond.end615
  %118 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !0
  %call637 = tail call %union.tree_node* @convert(%union.tree_node* %118, %union.tree_node* %116) #7
  %constant639 = getelementptr inbounds %struct.args_size* %alignment_pad617, i64 0, i32 0
  %119 = load i64* %constant639, align 8, !tbaa !6
  %call640 = tail call %union.tree_node* @size_int_wide(i64 %119, i32 1) #7
  %call641 = tail call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call637, %union.tree_node* %call640) #7
  %call644 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call641, %struct.rtx_def* null, i32 0, i32 0) #7
  br label %cond.end645

cond.end645:                                      ; preds = %cond.false634, %cond.true621
  %cond646 = phi %struct.rtx_def* [ %call624, %cond.true621 ], [ %call644, %cond.false634 ]
  tail call void @emit_push_insn(%struct.rtx_def* %107, i32 %108, %union.tree_node* %109, %struct.rtx_def* %size_rtx.0, i32 %111, i32 %partial.013, %struct.rtx_def* %reg.1., i32 %excess.0, %struct.rtx_def* %argblock, %struct.rtx_def* %cond616, i32 0, %struct.rtx_def* %cond646) #7
  br i1 %cmp12715, label %if.then649, label %if.end654

if.then649:                                       ; preds = %cond.end645
  %stack_slot650 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 13
  %120 = load %struct.rtx_def** %stack_slot650, align 8, !tbaa !0
  store %struct.rtx_def* %120, %struct.rtx_def** %value, align 8, !tbaa !0
  br label %if.end654

if.end654:                                        ; preds = %if.then291, %cond.end287, %if.then649, %cond.end645, %if.end187
  %sibcall_failure.1 = phi i32 [ 0, %if.end187 ], [ 0, %if.then291 ], [ 0, %cond.end287 ], [ %sibcall_failure.0, %if.then649 ], [ %sibcall_failure.0, %cond.end645 ]
  %121 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr = getelementptr inbounds %struct.function* %121, i64 0, i32 2
  %122 = load %struct.expr_status** %expr, align 8, !tbaa !0
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %122, i64 0, i32 1
  %123 = load i32* %x_inhibit_defer_pop, align 4, !tbaa !3
  %add655 = add nsw i32 %123, 1
  store i32 %add655, i32* %x_inhibit_defer_pop, align 4, !tbaa !3
  tail call void @emit_queue() #7
  tail call void @preserve_temp_slots(%struct.rtx_def* null) #7
  tail call void @free_temp_slots() #7
  tail call void @pop_temp_slots() #7
  br label %return

return:                                           ; preds = %entry, %if.end654
  %retval.0 = phi i32 [ %sibcall_failure.1, %if.end654 ], [ 1, %entry ]
  ret i32 %retval.0
}
