define internal fastcc void @emit_call_1(%struct.rtx_def* %funexp, %union.tree_node* %fndecl, %union.tree_node* %funtype, i64 %stack_size, i64 %rounded_stack_size, i64 %struct_value_size, %struct.rtx_def* %next_arg_reg, %struct.rtx_def* %valreg, i32 %old_inhibit_defer_pop, %struct.rtx_def* %call_fusage, i32 %ecf_flags) #0 {
entry:
  %call = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %rounded_stack_size) #7
  %conv = trunc i64 %stack_size to i32
  %call1 = tail call i32 @ix86_return_pops_args(%union.tree_node* %fndecl, %union.tree_node* %funtype, i32 %conv) #7
  %conv2 = sext i32 %call1 to i64
  %call3 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %struct_value_size) #7
  %0 = bitcast %struct.rtx_def* %funexp to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 68
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call5 = tail call %struct.rtx_def* @memory_address(i32 2, %struct.rtx_def* %funexp) #7
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %funexp.addr.0 = phi %struct.rtx_def* [ %call5, %if.then ], [ %funexp, %entry ]
  %1 = load i32* @target_flags, align 4, !tbaa !3
  %and = and i32 %1, 33554432
  %tobool = icmp eq i32 %and, 0
  %cmp9 = icmp sgt i32 %call1, 0
  %or.cond = and i1 %tobool, %cmp9
  br i1 %or.cond, label %land.lhs.true11, label %if.else24

land.lhs.true11:                                  ; preds = %if.end
  %and12 = and i32 %ecf_flags, 1024
  %tobool13 = icmp eq i32 %and12, 0
  br i1 %tobool13, label %if.then14, label %if.else24

if.then14:                                        ; preds = %land.lhs.true11
  %call15 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv2) #7
  %tobool16 = icmp eq %struct.rtx_def* %valreg, null
  %call20 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %funexp.addr.0) #7
  br i1 %tobool16, label %if.else, label %if.then17

if.then17:                                        ; preds = %if.then14
  %call19 = tail call %struct.rtx_def* @gen_call_value_pop(%struct.rtx_def* %valreg, %struct.rtx_def* %call20, %struct.rtx_def* %call, %struct.rtx_def* %next_arg_reg, %struct.rtx_def* %call15) #7
  br label %if.end22

if.else:                                          ; preds = %if.then14
  %call21 = tail call %struct.rtx_def* @gen_call_pop(%struct.rtx_def* %call20, %struct.rtx_def* %call, %struct.rtx_def* %next_arg_reg, %struct.rtx_def* %call15) #7
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then17
  %pat.0 = phi %struct.rtx_def* [ %call19, %if.then17 ], [ %call21, %if.else ]
  %call23 = tail call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %pat.0) #7
  br label %if.end35

if.else24:                                        ; preds = %if.end, %land.lhs.true11
  %tobool25 = icmp eq %struct.rtx_def* %valreg, null
  %call31 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 2, %struct.rtx_def* %funexp.addr.0) #7
  br i1 %tobool25, label %if.else30, label %if.then26

if.then26:                                        ; preds = %if.else24
  %call28 = tail call %struct.rtx_def* @gen_call_value(%struct.rtx_def* %valreg, %struct.rtx_def* %call31, %struct.rtx_def* %call, %struct.rtx_def* %next_arg_reg) #7
  %call29 = tail call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call28) #7
  br label %if.end35

if.else30:                                        ; preds = %if.else24
  %call32 = tail call %struct.rtx_def* @gen_call(%struct.rtx_def* %call31, %struct.rtx_def* %call, %struct.rtx_def* %next_arg_reg) #7
  %call33 = tail call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call32) #7
  br label %if.end35

if.end35:                                         ; preds = %if.then26, %if.else30, %if.end22
  %already_popped.0 = phi i32 [ 0, %if.then26 ], [ 0, %if.else30 ], [ 1, %if.end22 ]
  %call36 = tail call %struct.rtx_def* @get_last_insn() #7
  %tobool376 = icmp eq %struct.rtx_def* %call36, null
  br i1 %tobool376, label %if.then43, label %land.rhs

land.rhs:                                         ; preds = %if.end35, %for.inc
  %call_insn.07 = phi %struct.rtx_def* [ %3, %for.inc ], [ %call36, %if.end35 ]
  %2 = bitcast %struct.rtx_def* %call_insn.07 to i32*
  %bf.load38 = load i32* %2, align 8
  %bf.clear39 = and i32 %bf.load38, 65535
  %cmp40 = icmp eq i32 %bf.clear39, 34
  br i1 %cmp40, label %if.end44, label %for.inc

for.inc:                                          ; preds = %land.rhs
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call_insn.07, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %tobool37 = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool37, label %if.then43, label %land.rhs

if.then43:                                        ; preds = %for.inc, %if.end35
  tail call void @fancy_abort(i8* getelementptr inbounds ([49 x i8]* @.str3, i64 0, i64 0), i32 580, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.emit_call_1, i64 0, i64 0)) #10
  unreachable

if.end44:                                         ; preds = %land.rhs
  %and45 = and i32 %ecf_flags, 512
  %tobool46 = icmp eq i32 %and45, 0
  br i1 %tobool46, label %if.end52, label %if.then47

if.then47:                                        ; preds = %if.end44
  %call48 = tail call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0) #7
  %call49 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call48) #7
  %call50 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call49) #7
  %call51 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call50, %struct.rtx_def* %call_fusage) #7
  br label %if.end52

if.end52:                                         ; preds = %if.end44, %if.then47
  %call_fusage.addr.0 = phi %struct.rtx_def* [ %call51, %if.then47 ], [ %call_fusage, %if.end44 ]
  %arrayidx54 = getelementptr inbounds %struct.rtx_def* %call_insn.07, i64 0, i32 1, i64 7
  %rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx55, align 8, !tbaa !0
  %tobool56 = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool56, label %if.else76, label %for.cond61

for.cond61:                                       ; preds = %if.end52, %for.cond61
  %link.0 = phi %struct.rtx_def* [ %5, %for.cond61 ], [ %4, %if.end52 ]
  %arrayidx63 = getelementptr inbounds %struct.rtx_def* %link.0, i64 0, i32 1, i64 1
  %rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx64, align 8, !tbaa !0
  %cmp65 = icmp eq %struct.rtx_def* %5, null
  br i1 %cmp65, label %for.end72, label %for.cond61

for.end72:                                        ; preds = %for.cond61
  %6 = getelementptr inbounds %union.rtunion_def* %arrayidx63, i64 0, i32 0
  %call_fusage.addr.0.c4 = ptrtoint %struct.rtx_def* %call_fusage.addr.0 to i64
  store i64 %call_fusage.addr.0.c4, i64* %6, align 8, !tbaa !0
  br label %if.end80

if.else76:                                        ; preds = %if.end52
  %7 = getelementptr inbounds %union.rtunion_def* %arrayidx54, i64 0, i32 0
  %call_fusage.addr.0.c = ptrtoint %struct.rtx_def* %call_fusage.addr.0 to i64
  store i64 %call_fusage.addr.0.c, i64* %7, align 8, !tbaa !0
  br label %if.end80

if.end80:                                         ; preds = %if.else76, %for.end72
  %and81 = and i32 %ecf_flags, 513
  %tobool82 = icmp eq i32 %and81, 0
  br i1 %tobool82, label %if.end86, label %if.then83

if.then83:                                        ; preds = %if.end80
  %bf.load84 = load i32* %2, align 8
  %bf.set = or i32 %bf.load84, 67108864
  store i32 %bf.set, i32* %2, align 8
  br label %if.end86

if.end86:                                         ; preds = %if.end80, %if.then83
  %and87 = and i32 %ecf_flags, 16
  %tobool88 = icmp eq i32 %and87, 0
  br i1 %tobool88, label %if.end97, label %if.then89

if.then89:                                        ; preds = %if.end86
  %8 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !0
  %arrayidx91 = getelementptr inbounds %struct.rtx_def* %call_insn.07, i64 0, i32 1, i64 6
  %rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx92, align 8, !tbaa !0
  %call93 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 23, %struct.rtx_def* %8, %struct.rtx_def* %9) #7
  %10 = getelementptr inbounds %union.rtunion_def* %arrayidx91, i64 0, i32 0
  %call93.c = ptrtoint %struct.rtx_def* %call93 to i64
  store i64 %call93.c, i64* %10, align 8, !tbaa !0
  br label %if.end97

if.end97:                                         ; preds = %if.end86, %if.then89
  %and98 = and i32 %ecf_flags, 2
  %tobool99 = icmp eq i32 %and98, 0
  br i1 %tobool99, label %if.end108, label %if.then100

if.then100:                                       ; preds = %if.end97
  %11 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !0
  %arrayidx102 = getelementptr inbounds %struct.rtx_def* %call_insn.07, i64 0, i32 1, i64 6
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %12 = load %struct.rtx_def** %rtx103, align 8, !tbaa !0
  %call104 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 26, %struct.rtx_def* %11, %struct.rtx_def* %12) #7
  %13 = getelementptr inbounds %union.rtunion_def* %arrayidx102, i64 0, i32 0
  %call104.c = ptrtoint %struct.rtx_def* %call104 to i64
  store i64 %call104.c, i64* %13, align 8, !tbaa !0
  br label %if.end108

if.end108:                                        ; preds = %if.end97, %if.then100
  %and109 = and i32 %ecf_flags, 2048
  %tobool110 = icmp eq i32 %and109, 0
  br i1 %tobool110, label %if.end119, label %if.then111

if.then111:                                       ; preds = %if.end108
  %14 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !0
  %arrayidx113 = getelementptr inbounds %struct.rtx_def* %call_insn.07, i64 0, i32 1, i64 6
  %rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx114, align 8, !tbaa !0
  %call115 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 29, %struct.rtx_def* %14, %struct.rtx_def* %15) #7
  %16 = getelementptr inbounds %union.rtunion_def* %arrayidx113, i64 0, i32 0
  %call115.c = ptrtoint %struct.rtx_def* %call115 to i64
  store i64 %call115.c, i64* %16, align 8, !tbaa !0
  br label %if.end119

if.end119:                                        ; preds = %if.end108, %if.then111
  %and120 = and i32 %ecf_flags, 32
  %tobool121 = icmp eq i32 %and120, 0
  br i1 %tobool121, label %if.end133, label %if.then122

if.then122:                                       ; preds = %if.end119
  %17 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !0
  %arrayidx124 = getelementptr inbounds %struct.rtx_def* %call_insn.07, i64 0, i32 1, i64 6
  %rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx125, align 8, !tbaa !0
  %call126 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 28, %struct.rtx_def* %17, %struct.rtx_def* %18) #7
  %19 = getelementptr inbounds %union.rtunion_def* %arrayidx124, i64 0, i32 0
  %call126.c = ptrtoint %struct.rtx_def* %call126 to i64
  store i64 %call126.c, i64* %19, align 8, !tbaa !0
  %20 = load %struct.function** @cfun, align 8, !tbaa !0
  %calls_setjmp = getelementptr inbounds %struct.function* %20, i64 0, i32 56
  %21 = bitcast [4 x i8]* %calls_setjmp to i32*
  %bf.load130 = load i32* %21, align 8
  %bf.set132 = or i32 %bf.load130, 16
  store i32 %bf.set132, i32* %21, align 8
  br label %if.end133

if.end133:                                        ; preds = %if.end119, %if.then122
  %bf.load137 = load i32* %2, align 8
  %22 = shl i32 %ecf_flags, 16
  %bf.shl = and i32 %22, 16777216
  %bf.clear138 = and i32 %bf.load137, -16777217
  %bf.set139 = or i32 %bf.clear138, %bf.shl
  store i32 %bf.set139, i32* %2, align 8
  %23 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr = getelementptr inbounds %struct.function* %23, i64 0, i32 2
  %24 = load %struct.expr_status** %expr, align 8, !tbaa !0
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %24, i64 0, i32 1
  store i32 %old_inhibit_defer_pop, i32* %x_inhibit_defer_pop, align 4, !tbaa !3
  br i1 %cmp9, label %if.then142, label %if.end159

if.then142:                                       ; preds = %if.end133
  %tobool143 = icmp eq i32 %already_popped.0, 0
  br i1 %tobool143, label %if.then144, label %if.end153

if.then144:                                       ; preds = %if.then142
  %25 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !0
  %call145 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %25) #7
  %26 = load %struct.rtx_def** %rtx55, align 8, !tbaa !0
  %call149 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call145, %struct.rtx_def* %26) #7
  %27 = getelementptr inbounds %union.rtunion_def* %arrayidx54, i64 0, i32 0
  %call149.c = ptrtoint %struct.rtx_def* %call149 to i64
  store i64 %call149.c, i64* %27, align 8, !tbaa !0
  br label %if.end153

if.end153:                                        ; preds = %if.then142, %if.then144
  %sub = sub nsw i64 %rounded_stack_size, %conv2
  %call154 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub) #7
  %28 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr155 = getelementptr inbounds %struct.function* %28, i64 0, i32 2
  %29 = load %struct.expr_status** %expr155, align 8, !tbaa !0
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status* %29, i64 0, i32 2
  %30 = load i32* %x_stack_pointer_delta, align 4, !tbaa !3
  %sub157 = sub i32 %30, %call1
  store i32 %sub157, i32* %x_stack_pointer_delta, align 4, !tbaa !3
  br label %if.end159

if.end159:                                        ; preds = %if.end153, %if.end133
  %31 = phi %struct.expr_status* [ %29, %if.end153 ], [ %24, %if.end133 ]
  %rounded_stack_size_rtx.0 = phi %struct.rtx_def* [ %call154, %if.end153 ], [ %call, %if.end133 ]
  %rounded_stack_size.addr.0 = phi i64 [ %sub, %if.end153 ], [ %rounded_stack_size, %if.end133 ]
  %32 = load i32* @target_flags, align 4, !tbaa !3
  %and160 = and i32 %32, 4096
  %tobool161 = icmp eq i32 %and160, 0
  br i1 %tobool161, label %if.then162, label %if.else192

if.then162:                                       ; preds = %if.end159
  %cmp163 = icmp eq i64 %rounded_stack_size.addr.0, 0
  br i1 %cmp163, label %if.end197, label %if.then165

if.then165:                                       ; preds = %if.then162
  %and166 = and i32 %ecf_flags, 1024
  %tobool167 = icmp eq i32 %and166, 0
  br i1 %tobool167, label %if.else174, label %if.then168

if.then168:                                       ; preds = %if.then165
  %x_stack_pointer_delta170 = getelementptr inbounds %struct.expr_status* %31, i64 0, i32 2
  %33 = load i32* %x_stack_pointer_delta170, align 4, !tbaa !3
  %conv1712 = zext i32 %33 to i64
  %sub172 = sub nsw i64 %conv1712, %rounded_stack_size.addr.0
  %conv173 = trunc i64 %sub172 to i32
  store i32 %conv173, i32* %x_stack_pointer_delta170, align 4, !tbaa !3
  br label %if.end197

if.else174:                                       ; preds = %if.then165
  %34 = load i32* @flag_defer_pop, align 4, !tbaa !3
  %tobool175 = icmp eq i32 %34, 0
  br i1 %tobool175, label %if.else188, label %land.lhs.true176

land.lhs.true176:                                 ; preds = %if.else174
  %x_inhibit_defer_pop178 = getelementptr inbounds %struct.expr_status* %31, i64 0, i32 1
  %35 = load i32* %x_inhibit_defer_pop178, align 4, !tbaa !3
  %36 = or i32 %35, %and81
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %if.then184, label %if.else188

if.then184:                                       ; preds = %land.lhs.true176
  %x_pending_stack_adjust = getelementptr inbounds %struct.expr_status* %31, i64 0, i32 0
  %38 = load i32* %x_pending_stack_adjust, align 4, !tbaa !3
  %conv1861 = zext i32 %38 to i64
  %add = add nsw i64 %conv1861, %rounded_stack_size.addr.0
  %conv187 = trunc i64 %add to i32
  store i32 %conv187, i32* %x_pending_stack_adjust, align 4, !tbaa !3
  br label %if.end197

if.else188:                                       ; preds = %land.lhs.true176, %if.else174
  tail call void @adjust_stack(%struct.rtx_def* %rounded_stack_size_rtx.0) #7
  br label %if.end197

if.else192:                                       ; preds = %if.end159
  %tobool193 = icmp eq i32 %call1, 0
  br i1 %tobool193, label %if.end197, label %if.then194

if.then194:                                       ; preds = %if.else192
  %call195 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv2) #7
  tail call void @anti_adjust_stack(%struct.rtx_def* %call195) #7
  br label %if.end197

if.end197:                                        ; preds = %if.else192, %if.then162, %if.then194, %if.then184, %if.else188, %if.then168
  ret void
}
