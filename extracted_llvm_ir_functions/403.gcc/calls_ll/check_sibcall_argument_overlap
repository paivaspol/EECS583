define internal fastcc i32 @check_sibcall_argument_overlap(%struct.rtx_def* %insn, %struct.arg_data* nocapture %arg) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %insn, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @get_insns() #7
  br label %for.cond.preheader

if.else:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.else, %if.then
  %insn.addr.0.ph = phi %struct.rtx_def* [ %call, %if.then ], [ %0, %if.else ]
  %tobool43 = icmp eq %struct.rtx_def* %insn.addr.0.ph, null
  br i1 %tobool43, label %for.end, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.inc
  %insn.addr.044 = phi %struct.rtx_def* [ %4, %for.inc ], [ %insn.addr.0.ph, %for.cond.preheader ]
  %1 = bitcast %struct.rtx_def* %insn.addr.044 to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom40 = zext i32 %bf.clear to i64
  %arrayidx1 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom40
  %2 = load i8* %arrayidx1, align 1, !tbaa !1
  %cmp2 = icmp eq i8 %2, 105
  br i1 %cmp2, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %insn.addr.044, i64 0, i32 1, i64 3
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx6, align 8, !tbaa !0
  %call7 = tail call fastcc i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %3) #8
  %tobool8 = icmp eq i32 %call7, 0
  br i1 %tobool8, label %for.inc, label %for.end

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %insn.addr.044, i64 0, i32 1, i64 2
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx13, align 8, !tbaa !0
  %tobool = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %land.lhs.true, %for.cond.preheader
  %tobool.lcssa = phi i32 [ 0, %for.cond.preheader ], [ 1, %land.lhs.true ], [ 0, %for.inc ]
  %constant = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 10, i32 0
  %5 = load i64* %constant, align 8, !tbaa !6
  %conv14 = trunc i64 %5 to i32
  %constant16 = getelementptr inbounds %struct.arg_data* %arg, i64 0, i32 11, i32 0
  %6 = load i64* %constant16, align 8, !tbaa !6
  %add = add nsw i64 %6, %5
  %conv17 = trunc i64 %add to i32
  %cmp1941 = icmp slt i32 %conv14, %conv17
  br i1 %cmp1941, label %for.body21.lr.ph, label %for.end25

for.body21.lr.ph:                                 ; preds = %for.end
  %7 = load %struct.simple_bitmap_def** @stored_args_map, align 8, !tbaa !0
  %8 = trunc i64 %6 to i32
  %9 = add i32 %8, %conv14
  br label %for.body21

for.body21:                                       ; preds = %for.body21, %for.body21.lr.ph
  %low.042 = phi i32 [ %conv14, %for.body21.lr.ph ], [ %inc, %for.body21 ]
  %rem = and i32 %low.042, 63
  %sh_prom = zext i32 %rem to i64
  %shl = shl i64 1, %sh_prom
  %div = lshr i32 %low.042, 6
  %idxprom22 = zext i32 %div to i64
  %arrayidx23 = getelementptr inbounds %struct.simple_bitmap_def* %7, i64 0, i32 3, i64 %idxprom22
  %10 = load i64* %arrayidx23, align 8, !tbaa !6
  %or = or i64 %10, %shl
  store i64 %or, i64* %arrayidx23, align 8, !tbaa !6
  %inc = add nsw i32 %low.042, 1
  %exitcond = icmp eq i32 %inc, %9
  br i1 %exitcond, label %for.end25, label %for.body21

for.end25:                                        ; preds = %for.body21, %for.end
  ret i32 %tobool.lcssa
}
