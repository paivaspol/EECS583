define internal fastcc %struct.rtx_def* @emit_library_call_value_1(i32 %retval1, %struct.rtx_def* %orgfun, %struct.rtx_def* %value, i32 %fn_type, i32 %outmode, i32 %nargs, %struct.__va_list_tag* nocapture %p) #0 {
entry:
  %args_size = alloca %struct.args_size, align 8
  %alignment_pad = alloca %struct.args_size, align 8
  %args_so_far = alloca %struct.ix86_args, align 4
  %call_fusage = alloca %struct.rtx_def*, align 8
  %0 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr = getelementptr inbounds %struct.function* %0, i64 0, i32 2
  %1 = load %struct.expr_status** %expr, align 8, !tbaa !0
  %x_inhibit_defer_pop = getelementptr inbounds %struct.expr_status* %1, i64 0, i32 1
  %2 = load i32* %x_inhibit_defer_pop, align 4, !tbaa !3
  store %struct.rtx_def* null, %struct.rtx_def** %call_fusage, align 8, !tbaa !0
  %3 = load i32* @highest_outgoing_arg_in_use, align 4, !tbaa !3
  %4 = load i8** @stack_usage_map, align 8, !tbaa !0
  %switch.tableidx = add i32 %fn_type, -1
  %5 = icmp ult i32 %switch.tableidx, 8
  br i1 %5, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %6 = sext i32 %switch.tableidx to i64
  %switch.gep = getelementptr inbounds [8 x i32]* @switch.table, i64 0, i64 %6
  %switch.load = load i32* %switch.gep, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %switch.lookup, %entry
  %flags.0 = phi i32 [ 16, %entry ], [ %switch.load, %switch.lookup ]
  %preferred_stack_boundary = getelementptr inbounds %struct.function* %0, i64 0, i32 53
  %7 = load i32* %preferred_stack_boundary, align 4, !tbaa !3
  %8 = load i32* @ix86_preferred_stack_boundary, align 4, !tbaa !3
  %cmp = icmp slt i32 %7, %8
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog
  store i32 %8, i32* %preferred_stack_boundary, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %cmp14 = icmp ne i32 %outmode, 0
  br i1 %cmp14, label %land.lhs.true, label %if.end26

land.lhs.true:                                    ; preds = %if.end
  %call = call %union.tree_node* @type_for_mode(i32 %outmode, i32 0) #7
  %call15 = call i32 @aggregate_value_p(%union.tree_node* %call) #7
  %tobool = icmp eq i32 %call15, 0
  br i1 %tobool, label %if.end26, label %if.then16

if.then16:                                        ; preds = %land.lhs.true
  %idxprom = sext i32 %outmode to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %9 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp17 = icmp eq %struct.rtx_def* %value, null
  br i1 %cmp17, label %if.else, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %if.then16
  %10 = bitcast %struct.rtx_def* %value to i32*
  %bf.load = load i32* %10, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp20 = icmp eq i32 %bf.clear, 66
  br i1 %cmp20, label %if.end25, label %if.else

if.else:                                          ; preds = %if.then16, %land.lhs.true19
  %call23 = call %union.tree_node* @type_for_mode(i32 %outmode, i32 0) #7
  %call24 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call23, i32 0, i32 1, i32 1) #7
  br label %if.end25

if.end25:                                         ; preds = %land.lhs.true19, %if.else
  %mem_value.0 = phi %struct.rtx_def* [ %call24, %if.else ], [ %value, %land.lhs.true19 ]
  %and = and i32 %flags.0, 2098
  %phitmp = zext i8 %9 to i64
  br label %if.end26

if.end26:                                         ; preds = %land.lhs.true, %if.end25, %if.end
  %flags.1 = phi i32 [ %and, %if.end25 ], [ %flags.0, %land.lhs.true ], [ %flags.0, %if.end ]
  %struct_value_size.0 = phi i64 [ %phitmp, %if.end25 ], [ 0, %land.lhs.true ], [ 0, %if.end ]
  %mem_value.1 = phi %struct.rtx_def* [ %mem_value.0, %if.end25 ], [ null, %land.lhs.true ], [ null, %if.end ]
  %add = add nsw i32 %nargs, 1
  %conv27 = sext i32 %add to i64
  %mul = mul i64 %conv27, 72
  %11 = alloca i8, i64 %mul, align 8
  %12 = bitcast i8* %11 to %struct.arg*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 %mul, i32 8, i1 false)
  call void @init_cumulative_args(%struct.ix86_args* %args_so_far, %union.tree_node* null, %struct.rtx_def* %orgfun) #7
  %constant = getelementptr inbounds %struct.args_size* %args_size, i64 0, i32 0
  %and31 = and i32 %flags.1, 4096
  %tobool32 = icmp ne i32 %and31, 0
  %13 = bitcast %struct.args_size* %args_size to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i32 8, i1 false)
  br i1 %tobool32, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end26
  call void @start_sequence() #7
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %if.end26
  call void @push_temp_slots() #7
  %tobool35 = icmp ne %struct.rtx_def* %mem_value.1, null
  %14 = load %struct.rtx_def** @struct_value_rtx, align 8, !tbaa !0
  %cmp37 = icmp eq %struct.rtx_def* %14, null
  %or.cond = and i1 %tobool35, %cmp37
  br i1 %or.cond, label %if.then41, label %for.cond.preheader

if.then41:                                        ; preds = %if.end34
  %arrayidx42 = getelementptr inbounds %struct.rtx_def* %mem_value.1, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load44 = load i32* %16, align 8
  %bf.clear45 = and i32 %bf.load44, 65535
  switch i32 %bf.clear45, label %if.then92 [
    i32 61, label %if.end94
    i32 66, label %if.end94
    i32 67, label %if.end94
    i32 68, label %if.end94
    i32 54, label %if.end94
    i32 55, label %if.end94
    i32 58, label %if.end94
    i32 134, label %if.end94
    i32 56, label %if.end94
    i32 140, label %if.end94
  ]

if.then92:                                        ; preds = %if.then41
  %call93 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %15, %struct.rtx_def* null) #7
  br label %if.end94

if.end94:                                         ; preds = %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then41, %if.then92
  %addr.0 = phi %struct.rtx_def* [ %call93, %if.then92 ], [ %15, %if.then41 ], [ %15, %if.then41 ], [ %15, %if.then41 ], [ %15, %if.then41 ], [ %15, %if.then41 ], [ %15, %if.then41 ], [ %15, %if.then41 ], [ %15, %if.then41 ], [ %15, %if.then41 ], [ %15, %if.then41 ]
  %value97 = bitcast i8* %11 to %struct.rtx_def**
  store %struct.rtx_def* %addr.0, %struct.rtx_def** %value97, align 8, !tbaa !0
  %17 = load i32* @target_flags, align 4, !tbaa !3
  %and98 = lshr i32 %17, 25
  %18 = and i32 %and98, 1
  %19 = or i32 %18, 4
  %mode = getelementptr inbounds i8* %11, i64 8
  %20 = bitcast i8* %mode to i32*
  store i32 %19, i32* %20, align 8, !tbaa !4
  %partial = getelementptr inbounds i8* %11, i64 24
  %21 = bitcast i8* %partial to i32*
  store i32 0, i32* %21, align 8, !tbaa !3
  %call107 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 %19, %union.tree_node* null, i32 1) #7
  %reg = getelementptr inbounds i8* %11, i64 16
  %22 = bitcast i8* %reg to %struct.rtx_def**
  store %struct.rtx_def* %call107, %struct.rtx_def** %22, align 8, !tbaa !0
  %23 = load i32* @target_flags, align 4, !tbaa !3
  %and110 = lshr i32 %23, 25
  %24 = and i32 %and110, 1
  %25 = or i32 %24, 4
  %cmp116 = icmp ne %struct.rtx_def* %call107, null
  %conv117 = zext i1 %cmp116 to i32
  %offset = getelementptr inbounds i8* %11, i64 32
  %26 = bitcast i8* %offset to %struct.args_size*
  %size = getelementptr inbounds i8* %11, i64 48
  %27 = bitcast i8* %size to %struct.args_size*
  call void @locate_and_pad_parm(i32 %25, %union.tree_node* null, i32 %conv117, %union.tree_node* null, %struct.args_size* %args_size, %struct.args_size* %26, %struct.args_size* %27, %struct.args_size* %alignment_pad) #7
  %28 = load %struct.rtx_def** %22, align 8, !tbaa !0
  %cmp125 = icmp eq %struct.rtx_def* %28, null
  br i1 %cmp125, label %if.then136, label %lor.lhs.false127

lor.lhs.false127:                                 ; preds = %if.end94
  %29 = load i32* %21, align 8, !tbaa !3
  %cmp131 = icmp eq i32 %29, 0
  br i1 %cmp131, label %if.end143, label %if.then136

if.then136:                                       ; preds = %lor.lhs.false127, %if.end94
  %constant140 = bitcast i8* %size to i64*
  %30 = load i64* %constant140, align 8, !tbaa !6
  %31 = load i64* %constant, align 8, !tbaa !6
  %add142 = add nsw i64 %31, %30
  store i64 %add142, i64* %constant, align 8, !tbaa !6
  br label %if.end143

if.end143:                                        ; preds = %lor.lhs.false127, %if.then136
  %32 = load i32* @target_flags, align 4, !tbaa !3
  %and144 = lshr i32 %32, 25
  %33 = and i32 %and144, 1
  %34 = or i32 %33, 4
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 %34, %union.tree_node* null, i32 1) #7
  br label %for.cond.preheader

for.cond.preheader:                               ; preds = %if.end143, %if.end34
  %count.0.ph = phi i32 [ 0, %if.end34 ], [ 1, %if.end143 ]
  %nargs.addr.0.ph = phi i32 [ %nargs, %if.end34 ], [ %add, %if.end143 ]
  %cmp1491246 = icmp slt i32 %count.0.ph, %nargs.addr.0.ph
  br i1 %cmp1491246, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag* %p, i64 0, i32 0
  %35 = getelementptr inbounds %struct.__va_list_tag* %p, i64 0, i32 3
  %overflow_arg_area_p158 = getelementptr inbounds %struct.__va_list_tag* %p, i64 0, i32 2
  %36 = zext i32 %count.0.ph to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %if.end303
  %indvars.iv1269 = phi i64 [ %36, %for.body.lr.ph ], [ %indvars.iv.next1270, %if.end303 ]
  %gp_offset = load i32* %gp_offset_p, align 4
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %for.body
  %reg_save_area = load i8** %35, align 8
  %37 = sext i32 %gp_offset to i64
  %38 = getelementptr i8* %reg_save_area, i64 %37
  %39 = add i32 %gp_offset, 8
  store i32 %39, i32* %gp_offset_p, align 4
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area = load i8** %overflow_arg_area_p158, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p158, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %gp_offset153 = phi i32 [ %gp_offset, %vaarg.in_mem ], [ %39, %vaarg.in_reg ]
  %vaarg.addr.in = phi i8* [ %overflow_arg_area, %vaarg.in_mem ], [ %38, %vaarg.in_reg ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to %struct.rtx_def**
  %40 = load %struct.rtx_def** %vaarg.addr, align 8
  %fits_in_gp154 = icmp ult i32 %gp_offset153, 41
  br i1 %fits_in_gp154, label %vaarg.in_reg155, label %vaarg.in_mem157

vaarg.in_reg155:                                  ; preds = %vaarg.end
  %reg_save_area156 = load i8** %35, align 8
  %41 = sext i32 %gp_offset153 to i64
  %42 = getelementptr i8* %reg_save_area156, i64 %41
  %43 = add i32 %gp_offset153, 8
  store i32 %43, i32* %gp_offset_p, align 4
  br label %vaarg.end161

vaarg.in_mem157:                                  ; preds = %vaarg.end
  %overflow_arg_area159 = load i8** %overflow_arg_area_p158, align 8
  %overflow_arg_area.next160 = getelementptr i8* %overflow_arg_area159, i64 8
  store i8* %overflow_arg_area.next160, i8** %overflow_arg_area_p158, align 8
  br label %vaarg.end161

vaarg.end161:                                     ; preds = %vaarg.in_mem157, %vaarg.in_reg155
  %vaarg.addr162.in = phi i8* [ %42, %vaarg.in_reg155 ], [ %overflow_arg_area159, %vaarg.in_mem157 ]
  %vaarg.addr162 = bitcast i8* %vaarg.addr162.in to i32*
  %44 = load i32* %vaarg.addr162, align 4
  %cmp163 = icmp eq i32 %44, 51
  br i1 %cmp163, label %if.then176, label %lor.lhs.false165

lor.lhs.false165:                                 ; preds = %vaarg.end161
  %45 = bitcast %struct.rtx_def* %40 to i32*
  %bf.load166 = load i32* %45, align 8
  %bf.lshr = lshr i32 %bf.load166, 16
  %bf.clear167 = and i32 %bf.lshr, 255
  %cmp168 = icmp eq i32 %bf.clear167, %44
  %cmp174 = icmp eq i32 %bf.clear167, 0
  %or.cond1211 = or i1 %cmp168, %cmp174
  br i1 %or.cond1211, label %if.end177, label %if.then176

if.then176:                                       ; preds = %lor.lhs.false165, %vaarg.end161
  call void @fancy_abort(i8* getelementptr inbounds ([49 x i8]* @.str3, i64 0, i64 0), i32 3641, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.emit_library_call_value_1, i64 0, i64 0)) #10
  unreachable

if.end177:                                        ; preds = %lor.lhs.false165
  %bf.clear179 = and i32 %bf.load166, 65535
  switch i32 %bf.clear179, label %if.then227 [
    i32 61, label %if.end229
    i32 66, label %if.end229
    i32 67, label %if.end229
    i32 68, label %if.end229
    i32 54, label %if.end229
    i32 55, label %if.end229
    i32 58, label %if.end229
    i32 134, label %if.end229
    i32 56, label %if.end229
    i32 140, label %if.end229
  ]

if.then227:                                       ; preds = %if.end177
  %call228 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %40, %struct.rtx_def* null) #7
  br label %if.end229

if.end229:                                        ; preds = %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.end177, %if.then227
  %val.0 = phi %struct.rtx_def* [ %call228, %if.then227 ], [ %40, %if.end177 ], [ %40, %if.end177 ], [ %40, %if.end177 ], [ %40, %if.end177 ], [ %40, %if.end177 ], [ %40, %if.end177 ], [ %40, %if.end177 ], [ %40, %if.end177 ], [ %40, %if.end177 ], [ %40, %if.end177 ]
  %value232 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1269, i32 0
  store %struct.rtx_def* %val.0, %struct.rtx_def** %value232, align 8, !tbaa !0
  %mode235 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1269, i32 1
  store i32 %44, i32* %mode235, align 8, !tbaa !4
  %call236 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 %44, %union.tree_node* null, i32 1) #7
  %reg239 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1269, i32 2
  store %struct.rtx_def* %call236, %struct.rtx_def** %reg239, align 8, !tbaa !0
  %partial242 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1269, i32 3
  store i32 0, i32* %partial242, align 8, !tbaa !3
  %cmp246 = icmp ne %struct.rtx_def* %call236, null
  %conv247 = zext i1 %cmp246 to i32
  %offset250 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1269, i32 4
  %size253 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1269, i32 5
  call void @locate_and_pad_parm(i32 %44, %union.tree_node* null, i32 %conv247, %union.tree_node* null, %struct.args_size* %args_size, %struct.args_size* %offset250, %struct.args_size* %size253, %struct.args_size* %alignment_pad) #7
  %var257 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1269, i32 5, i32 1
  %46 = load %union.tree_node** %var257, align 8, !tbaa !0
  %tobool258 = icmp eq %union.tree_node* %46, null
  br i1 %tobool258, label %land.lhs.true263, label %if.then259

if.then259:                                       ; preds = %if.end229
  call void @fancy_abort(i8* getelementptr inbounds ([49 x i8]* @.str3, i64 0, i64 0), i32 3724, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.emit_library_call_value_1, i64 0, i64 0)) #10
  unreachable

land.lhs.true263:                                 ; preds = %if.end229
  %47 = load i32* %partial242, align 8, !tbaa !3
  %tobool267 = icmp eq i32 %47, 0
  br i1 %tobool267, label %if.end281, label %if.then268

if.then268:                                       ; preds = %land.lhs.true263
  %48 = load i32* @target_flags, align 4, !tbaa !3
  %and272 = lshr i32 %48, 23
  %49 = and i32 %and272, 4
  %50 = add i32 %49, 4
  %mul275 = mul nsw i32 %50, %47
  %conv276 = sext i32 %mul275 to i64
  %constant280 = getelementptr inbounds %struct.args_size* %size253, i64 0, i32 0
  %51 = load i64* %constant280, align 8, !tbaa !6
  %sub = sub nsw i64 %51, %conv276
  store i64 %sub, i64* %constant280, align 8, !tbaa !6
  br label %if.end281

if.end281:                                        ; preds = %land.lhs.true263, %if.then268
  %52 = load %struct.rtx_def** %reg239, align 8, !tbaa !0
  %cmp285 = icmp eq %struct.rtx_def* %52, null
  %tobool267.not = xor i1 %tobool267, true
  %brmerge = or i1 %cmp285, %tobool267.not
  br i1 %brmerge, label %if.then296, label %if.end303

if.then296:                                       ; preds = %if.end281
  %constant300 = getelementptr inbounds %struct.args_size* %size253, i64 0, i32 0
  %53 = load i64* %constant300, align 8, !tbaa !6
  %54 = load i64* %constant, align 8, !tbaa !6
  %add302 = add nsw i64 %54, %53
  store i64 %add302, i64* %constant, align 8, !tbaa !6
  br label %if.end303

if.end303:                                        ; preds = %if.end281, %if.then296
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 %44, %union.tree_node* null, i32 1) #7
  %indvars.iv.next1270 = add i64 %indvars.iv1269, 1
  %55 = trunc i64 %indvars.iv.next1270 to i32
  %cmp149 = icmp slt i32 %55, %nargs.addr.0.ph
  br i1 %cmp149, label %for.body, label %for.end

for.end:                                          ; preds = %if.end303, %for.cond.preheader
  call void @assemble_external_libcall(%struct.rtx_def* %orgfun) #7
  %original_args_size.sroa.0.0.copyload = load i64* %constant, align 8
  %56 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr306 = getelementptr inbounds %struct.function* %56, i64 0, i32 2
  %57 = load %struct.expr_status** %expr306, align 8, !tbaa !0
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status* %57, i64 0, i32 2
  %58 = load i32* %x_stack_pointer_delta, align 4, !tbaa !3
  %conv307 = sext i32 %58 to i64
  %59 = load i32* @ix86_preferred_stack_boundary, align 4, !tbaa !3
  %div = sdiv i32 %59, 8
  %conv309 = sext i32 %div to i64
  %add308 = add i64 %original_args_size.sroa.0.0.copyload, -1
  %add310 = add i64 %add308, %conv307
  %sub311 = add i64 %add310, %conv309
  %div314 = srem i64 %sub311, %conv309
  %mul317 = sub i64 %sub311, %div314
  %sub321 = sub i64 %mul317, %conv307
  %cmp325 = icmp sgt i64 %sub321, 0
  %sub321. = select i1 %cmp325, i64 %sub321, i64 0
  store i64 %sub321., i64* %constant, align 8, !tbaa !6
  %outgoing_args_size = getelementptr inbounds %struct.function* %56, i64 0, i32 11
  %60 = load i32* %outgoing_args_size, align 4, !tbaa !3
  %conv335 = sext i32 %60 to i64
  %cmp336 = icmp sgt i64 %sub321., %conv335
  br i1 %cmp336, label %if.then338, label %if.end342

if.then338:                                       ; preds = %for.end
  %conv340 = trunc i64 %sub321. to i32
  store i32 %conv340, i32* %outgoing_args_size, align 4, !tbaa !3
  br label %if.end342

if.end342:                                        ; preds = %if.then338, %for.end
  %61 = load i32* @target_flags, align 4, !tbaa !3
  %and343 = and i32 %61, 4096
  %tobool344 = icmp eq i32 %and343, 0
  br i1 %tobool344, label %if.else373, label %if.then345

if.then345:                                       ; preds = %if.end342
  %conv347 = trunc i64 %sub321. to i32
  %cmp349 = icmp sgt i32 %3, %conv347
  %cond354 = select i1 %cmp349, i32 %3, i32 %conv347
  store i32 %cond354, i32* @highest_outgoing_arg_in_use, align 4, !tbaa !3
  %conv355 = sext i32 %cond354 to i64
  %62 = alloca i8, i64 %conv355, align 1
  store i8* %62, i8** @stack_usage_map, align 8, !tbaa !0
  %tobool356 = icmp eq i32 %3, 0
  br i1 %tobool356, label %if.end359, label %if.then357

if.then357:                                       ; preds = %if.then345
  %conv358 = sext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %62, i8* %4, i64 %conv358, i32 1, i1 false)
  br label %if.end359

if.end359:                                        ; preds = %if.then345, %if.then357
  %cmp360 = icmp eq i32 %3, %cond354
  br i1 %cmp360, label %if.end367, label %if.then362

if.then362:                                       ; preds = %if.end359
  %idxprom363 = sext i32 %3 to i64
  %arrayidx364 = getelementptr inbounds i8* %62, i64 %idxprom363
  %sub365 = sub nsw i32 %cond354, %3
  %conv366 = sext i32 %sub365 to i64
  call void @llvm.memset.p0i8.i64(i8* %arrayidx364, i8 0, i64 %conv366, i32 1, i1 false)
  br label %if.end367

if.end367:                                        ; preds = %if.end359, %if.then362
  %63 = load i32* @virtuals_instantiated, align 4, !tbaa !3
  %tobool368 = icmp eq i32 %63, 0
  br i1 %tobool368, label %if.else371, label %if.then369

if.then369:                                       ; preds = %if.end367
  %64 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !0
  %call370 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %64, i64 0) #7
  br label %if.end384

if.else371:                                       ; preds = %if.end367
  %65 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !tbaa !0
  br label %if.end384

if.else373:                                       ; preds = %if.end342
  %66 = and i32 %61, 6144
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %land.lhs.true387, label %if.then379

if.then379:                                       ; preds = %if.else373
  %call381 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub321.) #7
  %call382 = call %struct.rtx_def* @push_block(%struct.rtx_def* %call381, i32 0, i32 0) #7
  br label %if.end384

if.end384:                                        ; preds = %if.then379, %if.then369, %if.else371
  %argblock.0 = phi %struct.rtx_def* [ %call370, %if.then369 ], [ %65, %if.else371 ], [ %call382, %if.then379 ]
  %cmp385 = icmp eq %struct.rtx_def* %argblock.0, null
  br i1 %cmp385, label %if.end384.land.lhs.true387_crit_edge, label %if.end398

if.end384.land.lhs.true387_crit_edge:             ; preds = %if.end384
  %.pre1272 = load i32* @target_flags, align 4, !tbaa !3
  br label %land.lhs.true387

land.lhs.true387:                                 ; preds = %if.end384.land.lhs.true387_crit_edge, %if.else373
  %68 = phi i32 [ %.pre1272, %if.end384.land.lhs.true387_crit_edge ], [ %61, %if.else373 ]
  %69 = and i32 %68, 6144
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %if.then393, label %if.end398

if.then393:                                       ; preds = %land.lhs.true387
  %71 = load i64* %constant, align 8, !tbaa !6
  %sub396 = sub nsw i64 %71, %original_args_size.sroa.0.0.copyload
  %call397 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub396) #7
  call void @anti_adjust_stack(%struct.rtx_def* %call397) #7
  br label %if.end398

if.end398:                                        ; preds = %if.end384, %land.lhs.true387, %if.then393
  %cmp3851225 = phi i1 [ true, %land.lhs.true387 ], [ true, %if.then393 ], [ false, %if.end384 ]
  %argblock.01223 = phi %struct.rtx_def* [ null, %land.lhs.true387 ], [ null, %if.then393 ], [ %argblock.0, %if.end384 ]
  %72 = load i32* @target_flags, align 4, !tbaa !3
  %73 = and i32 %72, 6144
  %74 = icmp eq i32 %73, 0
  %sub405 = add nsw i32 %nargs.addr.0.ph, -1
  %inc.0 = select i1 %74, i32 -1, i32 1
  %cmp4871243 = icmp sgt i32 %nargs.addr.0.ph, 0
  br i1 %cmp4871243, label %for.body489.lr.ph, label %for.end621

for.body489.lr.ph:                                ; preds = %if.end398
  %var577 = getelementptr inbounds %struct.args_size* %alignment_pad, i64 0, i32 1
  %constant581 = getelementptr inbounds %struct.args_size* %alignment_pad, i64 0, i32 0
  %75 = sext i32 %sub405 to i64
  %76 = select i1 %74, i64 %75, i64 0
  %77 = sext i32 %inc.0 to i64
  br label %for.body489

for.body489:                                      ; preds = %for.inc618, %for.body489.lr.ph
  %indvars.iv1266 = phi i64 [ %76, %for.body489.lr.ph ], [ %indvars.iv.next1267, %for.inc618 ]
  %count.21244 = phi i32 [ 0, %for.body489.lr.ph ], [ %inc619, %for.inc618 ]
  %mode493 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1266, i32 1
  %78 = load i32* %mode493, align 8, !tbaa !4
  %value497 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1266, i32 0
  %79 = load %struct.rtx_def** %value497, align 8, !tbaa !0
  %reg501 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1266, i32 2
  %80 = load %struct.rtx_def** %reg501, align 8, !tbaa !0
  %partial505 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1266, i32 3
  %81 = load i32* %partial505, align 8, !tbaa !3
  %cmp506 = icmp ne %struct.rtx_def* %80, null
  %cmp509 = icmp eq i32 %81, 0
  %or.cond1214 = and i1 %cmp506, %cmp509
  br i1 %or.cond1214, label %for.inc618, label %if.then511

if.then511:                                       ; preds = %for.body489
  %82 = load i32* @target_flags, align 4, !tbaa !3
  %and512 = and i32 %82, 4096
  %tobool513 = icmp eq i32 %and512, 0
  %constant575.pre = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1266, i32 4, i32 0
  br i1 %tobool513, label %if.end571, label %if.then514

if.then514:                                       ; preds = %if.then511
  %83 = load i64* %constant575.pre, align 8, !tbaa !6
  %conv519 = trunc i64 %83 to i32
  %constant524 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1266, i32 5, i32 0
  %84 = load i64* %constant524, align 8, !tbaa !6
  %add525 = add nsw i64 %84, %83
  %conv526 = trunc i64 %add525 to i32
  %cmp5281238 = icmp slt i32 %conv519, %conv526
  br i1 %cmp5281238, label %for.body530.lr.ph, label %for.end542

for.body530.lr.ph:                                ; preds = %if.then514
  %85 = load i8** @stack_usage_map, align 8, !tbaa !0
  %sext = shl i64 %83, 32
  %86 = ashr exact i64 %sext, 32
  br label %for.body530

for.cond527:                                      ; preds = %for.body530
  %87 = trunc i64 %indvars.iv.next1263 to i32
  %cmp528 = icmp slt i32 %87, %conv526
  br i1 %cmp528, label %for.body530, label %for.end542

for.body530:                                      ; preds = %for.body530.lr.ph, %for.cond527
  %indvars.iv1262 = phi i64 [ %86, %for.body530.lr.ph ], [ %indvars.iv.next1263, %for.cond527 ]
  %i.01239 = phi i32 [ %conv519, %for.body530.lr.ph ], [ %inc541, %for.cond527 ]
  %arrayidx532 = getelementptr inbounds i8* %85, i64 %indvars.iv1262
  %88 = load i8* %arrayidx532, align 1, !tbaa !1
  %tobool534 = icmp ne i8 %88, 0
  %89 = trunc i64 %indvars.iv1262 to i32
  %cmp536 = icmp sgt i32 %89, 0
  %or.cond1215 = and i1 %tobool534, %cmp536
  %indvars.iv.next1263 = add i64 %indvars.iv1262, 1
  %inc541 = add nsw i32 %i.01239, 1
  br i1 %or.cond1215, label %for.end542, label %for.cond527

for.end542:                                       ; preds = %for.cond527, %for.body530, %if.then514
  %i.0.lcssa = phi i32 [ %conv519, %if.then514 ], [ %i.01239, %for.body530 ], [ %inc541, %for.cond527 ]
  %cmp543 = icmp eq i32 %i.0.lcssa, %conv526
  br i1 %cmp543, label %if.end571, label %if.then545

if.then545:                                       ; preds = %for.end542
  %mul551 = shl nsw i64 %84, 3
  %conv552 = trunc i64 %mul551 to i32
  %call553 = call i32 @mode_for_size(i32 %conv552, i32 1, i32 1) #7
  %90 = load i64* %constant575.pre, align 8, !tbaa !6
  %call559 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %argblock.01223, i64 %90) #7
  %call560 = call %struct.rtx_def* @memory_address(i32 %call553, %struct.rtx_def* %call559) #7
  %call561 = call %struct.rtx_def* @gen_rtx_MEM(i32 %call553, %struct.rtx_def* %call560) #7
  %call562 = call %struct.rtx_def* @gen_reg_rtx(i32 %call553) #7
  %save_area565 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1266, i32 6
  store %struct.rtx_def* %call562, %struct.rtx_def** %save_area565, align 8, !tbaa !0
  %call569 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call562, %struct.rtx_def* %call561) #7
  br label %if.end571

if.end571:                                        ; preds = %if.then511, %for.end542, %if.then545
  %lower_bound.0 = phi i32 [ %conv519, %for.end542 ], [ %conv519, %if.then545 ], [ 0, %if.then511 ]
  %upper_bound.0 = phi i32 [ %conv526, %for.end542 ], [ %conv526, %if.then545 ], [ 0, %if.then511 ]
  %91 = load i64* %constant575.pre, align 8, !tbaa !6
  %call576 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %91) #7
  %92 = load %union.tree_node** %var577, align 8, !tbaa !0
  %cmp578 = icmp eq %union.tree_node* %92, null
  br i1 %cmp578, label %cond.true580, label %cond.false590

cond.true580:                                     ; preds = %if.end571
  %93 = load i64* %constant581, align 8, !tbaa !6
  %call582 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %93) #7
  br label %cond.end599

cond.false590:                                    ; preds = %if.end571
  %94 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !tbaa !0
  %call592 = call %union.tree_node* @convert(%union.tree_node* %94, %union.tree_node* %92) #7
  %95 = load i64* %constant581, align 8, !tbaa !6
  %call594 = call %union.tree_node* @size_int_wide(i64 %95, i32 1) #7
  %call595 = call %union.tree_node* @size_binop(i32 59, %union.tree_node* %call592, %union.tree_node* %call594) #7
  %call598 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call595, %struct.rtx_def* null, i32 0, i32 0) #7
  br label %cond.end599

cond.end599:                                      ; preds = %cond.false590, %cond.true580
  %cond600 = phi %struct.rtx_def* [ %call582, %cond.true580 ], [ %call598, %cond.false590 ]
  call void @emit_push_insn(%struct.rtx_def* %79, i32 %78, %union.tree_node* null, %struct.rtx_def* null, i32 0, i32 %81, %struct.rtx_def* %80, i32 0, %struct.rtx_def* %argblock.01223, %struct.rtx_def* %call576, i32 0, %struct.rtx_def* %cond600) #7
  %96 = load i32* @target_flags, align 4, !tbaa !3
  %and601 = and i32 %96, 4096
  %tobool602 = icmp ne i32 %and601, 0
  %cmp6051241 = icmp slt i32 %lower_bound.0, %upper_bound.0
  %or.cond1273 = and i1 %tobool602, %cmp6051241
  br i1 %or.cond1273, label %for.body607.lr.ph, label %if.end613

for.body607.lr.ph:                                ; preds = %cond.end599
  %97 = sext i32 %lower_bound.0 to i64
  br label %for.body607

for.body607:                                      ; preds = %for.body607.lr.ph, %for.body607
  %indvars.iv1264 = phi i64 [ %97, %for.body607.lr.ph ], [ %indvars.iv.next1265, %for.body607 ]
  %98 = load i8** @stack_usage_map, align 8, !tbaa !0
  %arrayidx609 = getelementptr inbounds i8* %98, i64 %indvars.iv1264
  store i8 1, i8* %arrayidx609, align 1, !tbaa !1
  %indvars.iv.next1265 = add i64 %indvars.iv1264, 1
  %99 = trunc i64 %indvars.iv.next1265 to i32
  %cmp605 = icmp slt i32 %99, %upper_bound.0
  br i1 %cmp605, label %for.body607, label %if.end613

if.end613:                                        ; preds = %cond.end599, %for.body607
  %100 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr614 = getelementptr inbounds %struct.function* %100, i64 0, i32 2
  %101 = load %struct.expr_status** %expr614, align 8, !tbaa !0
  %x_inhibit_defer_pop615 = getelementptr inbounds %struct.expr_status* %101, i64 0, i32 1
  %102 = load i32* %x_inhibit_defer_pop615, align 4, !tbaa !3
  %add616 = add nsw i32 %102, 1
  store i32 %add616, i32* %x_inhibit_defer_pop615, align 4, !tbaa !3
  br label %for.inc618

for.inc618:                                       ; preds = %for.body489, %if.end613
  %inc619 = add nsw i32 %count.21244, 1
  %indvars.iv.next1267 = add i64 %indvars.iv1266, %77
  %exitcond1268 = icmp eq i32 %inc619, %nargs.addr.0.ph
  br i1 %exitcond1268, label %for.end621, label %for.body489

for.end621:                                       ; preds = %for.inc618, %if.end398
  br i1 %cmp3851225, label %land.lhs.true624, label %if.end635

land.lhs.true624:                                 ; preds = %for.end621
  %103 = load i32* @target_flags, align 4, !tbaa !3
  %104 = and i32 %103, 6144
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %if.end635, label %if.then630

if.then630:                                       ; preds = %land.lhs.true624
  %106 = load i64* %constant, align 8, !tbaa !6
  %sub633 = sub nsw i64 %106, %original_args_size.sroa.0.0.copyload
  %call634 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub633) #7
  call void @anti_adjust_stack(%struct.rtx_def* %call634) #7
  br label %if.end635

if.end635:                                        ; preds = %land.lhs.true624, %for.end621, %if.then630
  %107 = load i32* @target_flags, align 4, !tbaa !3
  %call645 = call %struct.rtx_def* @prepare_call_address(%struct.rtx_def* %orgfun, %union.tree_node* null, %struct.rtx_def** %call_fusage, i32 0, i32 undef) #8
  br i1 %cmp4871243, label %for.body649.lr.ph, label %for.end717

for.body649.lr.ph:                                ; preds = %if.end635
  %108 = and i32 %107, 6144
  %109 = icmp eq i32 %108, 0
  %110 = sext i32 %sub405 to i64
  %111 = select i1 %109, i64 %110, i64 0
  %112 = sext i32 %inc.0 to i64
  br label %for.body649

for.cond693.preheader:                            ; preds = %if.end685
  br i1 %cmp4871243, label %for.body696, label %for.end717

for.body649:                                      ; preds = %if.end685, %for.body649.lr.ph
  %indvars.iv1257 = phi i64 [ %111, %for.body649.lr.ph ], [ %indvars.iv.next1258, %if.end685 ]
  %count.31236 = phi i32 [ 0, %for.body649.lr.ph ], [ %inc690, %if.end685 ]
  %value653 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1257, i32 0
  %113 = load %struct.rtx_def** %value653, align 8, !tbaa !0
  %reg657 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1257, i32 2
  %114 = load %struct.rtx_def** %reg657, align 8, !tbaa !0
  %partial661 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1257, i32 3
  %115 = load i32* %partial661, align 8, !tbaa !3
  %cmp662 = icmp eq %struct.rtx_def* %114, null
  br i1 %cmp662, label %if.end685, label %land.lhs.true664

land.lhs.true664:                                 ; preds = %for.body649
  %116 = bitcast %struct.rtx_def* %114 to i32*
  %bf.load665 = load i32* %116, align 8
  %bf.clear666 = and i32 %bf.load665, 65535
  %cmp667 = icmp eq i32 %bf.clear666, 39
  br i1 %cmp667, label %if.then669, label %if.else676

if.then669:                                       ; preds = %land.lhs.true664
  %117 = bitcast %struct.rtx_def* %113 to i32*
  %bf.load670 = load i32* %117, align 8
  %bf.lshr671 = lshr i32 %bf.load670, 16
  %bf.clear672 = and i32 %bf.lshr671, 255
  %idxprom6731209 = zext i32 %bf.clear672 to i64
  %arrayidx674 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom6731209
  %118 = load i8* %arrayidx674, align 1, !tbaa !1
  %conv675 = zext i8 %118 to i32
  call void @emit_group_load(%struct.rtx_def* %114, %struct.rtx_def* %113, i32 %conv675) #7
  br label %if.end685

if.else676:                                       ; preds = %land.lhs.true664
  %cmp680 = icmp eq i32 %115, 0
  br i1 %cmp680, label %if.then682, label %if.end685

if.then682:                                       ; preds = %if.else676
  %call683 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %114, %struct.rtx_def* %113) #7
  br label %if.end685

if.end685:                                        ; preds = %if.else676, %for.body649, %if.then682, %if.then669
  %119 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr686 = getelementptr inbounds %struct.function* %119, i64 0, i32 2
  %120 = load %struct.expr_status** %expr686, align 8, !tbaa !0
  %x_inhibit_defer_pop687 = getelementptr inbounds %struct.expr_status* %120, i64 0, i32 1
  %121 = load i32* %x_inhibit_defer_pop687, align 4, !tbaa !3
  %add688 = add nsw i32 %121, 1
  store i32 %add688, i32* %x_inhibit_defer_pop687, align 4, !tbaa !3
  %inc690 = add nsw i32 %count.31236, 1
  %indvars.iv.next1258 = add i64 %indvars.iv1257, %112
  %exitcond1259 = icmp eq i32 %inc690, %nargs.addr.0.ph
  br i1 %exitcond1259, label %for.cond693.preheader, label %for.body649

for.body696:                                      ; preds = %for.cond693.preheader, %for.inc715
  %indvars.iv1253 = phi i64 [ %indvars.iv.next1254, %for.inc715 ], [ 0, %for.cond693.preheader ]
  %reg700 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1253, i32 2
  %122 = load %struct.rtx_def** %reg700, align 8, !tbaa !0
  %cmp701 = icmp eq %struct.rtx_def* %122, null
  br i1 %cmp701, label %for.inc715, label %land.lhs.true703

land.lhs.true703:                                 ; preds = %for.body696
  %123 = bitcast %struct.rtx_def* %122 to i32*
  %bf.load704 = load i32* %123, align 8
  %bf.clear705 = and i32 %bf.load704, 65535
  %cmp706 = icmp eq i32 %bf.clear705, 39
  br i1 %cmp706, label %if.then708, label %if.then712

if.then708:                                       ; preds = %land.lhs.true703
  call void @use_group_regs(%struct.rtx_def** %call_fusage, %struct.rtx_def* %122) #7
  br label %for.inc715

if.then712:                                       ; preds = %land.lhs.true703
  call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %122) #7
  br label %for.inc715

for.inc715:                                       ; preds = %for.body696, %if.then708, %if.then712
  %indvars.iv.next1254 = add i64 %indvars.iv1253, 1
  %lftr.wideiv1255 = trunc i64 %indvars.iv.next1254 to i32
  %exitcond1256 = icmp eq i32 %lftr.wideiv1255, %nargs.addr.0.ph
  br i1 %exitcond1256, label %for.end717, label %for.body696

for.end717:                                       ; preds = %if.end635, %for.inc715, %for.cond693.preheader
  %124 = load %struct.rtx_def** @struct_value_rtx, align 8, !tbaa !0
  %cmp721 = icmp ne %struct.rtx_def* %124, null
  %or.cond932 = and i1 %tobool35, %cmp721
  br i1 %or.cond932, label %if.then725, label %if.end741

if.then725:                                       ; preds = %for.end717
  %125 = load i32* @target_flags, align 4, !tbaa !3
  %and726 = lshr i32 %125, 25
  %126 = and i32 %and726, 1
  %127 = or i32 %126, 4
  %arrayidx730 = getelementptr inbounds %struct.rtx_def* %mem_value.1, i64 0, i32 1, i64 0
  %rtx731 = bitcast %union.rtunion_def* %arrayidx730 to %struct.rtx_def**
  %128 = load %struct.rtx_def** %rtx731, align 8, !tbaa !0
  %call732 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %128, %struct.rtx_def* null) #7
  %call733 = call %struct.rtx_def* @force_reg(i32 %127, %struct.rtx_def* %call732) #7
  %call734 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %124, %struct.rtx_def* %call733) #7
  %129 = load %struct.rtx_def** @struct_value_rtx, align 8, !tbaa !0
  %130 = bitcast %struct.rtx_def* %129 to i32*
  %bf.load735 = load i32* %130, align 8
  %bf.clear736 = and i32 %bf.load735, 65535
  %cmp737 = icmp eq i32 %bf.clear736, 61
  br i1 %cmp737, label %if.then739, label %if.end741

if.then739:                                       ; preds = %if.then725
  call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %129) #7
  br label %if.end741

if.end741:                                        ; preds = %if.then725, %for.end717, %if.then739
  %131 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr742 = getelementptr inbounds %struct.function* %131, i64 0, i32 2
  %132 = load %struct.expr_status** %expr742, align 8, !tbaa !0
  %x_inhibit_defer_pop743 = getelementptr inbounds %struct.expr_status* %132, i64 0, i32 1
  %133 = load i32* %x_inhibit_defer_pop743, align 4, !tbaa !3
  %add744 = add nsw i32 %133, 1
  store i32 %add744, i32* %x_inhibit_defer_pop743, align 4, !tbaa !3
  %cmp14.not = xor i1 %cmp14, true
  %brmerge1219 = or i1 %tobool35, %cmp14.not
  br i1 %brmerge1219, label %cond.end753, label %cond.true750

cond.true750:                                     ; preds = %if.end741
  %call751 = call %struct.rtx_def* @hard_libcall_value(i32 %outmode) #7
  %.pre = load %struct.function** @cfun, align 8, !tbaa !0
  %expr755.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 2
  %.pre1271 = load %struct.expr_status** %expr755.phi.trans.insert, align 8, !tbaa !0
  br label %cond.end753

cond.end753:                                      ; preds = %if.end741, %cond.true750
  %134 = phi %struct.expr_status* [ %.pre1271, %cond.true750 ], [ %132, %if.end741 ]
  %cond754 = phi %struct.rtx_def* [ %call751, %cond.true750 ], [ null, %if.end741 ]
  %x_stack_pointer_delta756 = getelementptr inbounds %struct.expr_status* %134, i64 0, i32 2
  %135 = load i32* %x_stack_pointer_delta756, align 4, !tbaa !3
  %136 = load i32* @ix86_preferred_stack_boundary, align 4, !tbaa !3
  %div757 = sdiv i32 %136, 8
  %sub758 = add nsw i32 %div757, -1
  %and759 = and i32 %sub758, %135
  %tobool760 = icmp eq i32 %and759, 0
  br i1 %tobool760, label %if.end762, label %if.then761

if.then761:                                       ; preds = %cond.end753
  call void @fancy_abort(i8* getelementptr inbounds ([49 x i8]* @.str3, i64 0, i64 0), i32 4032, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.emit_library_call_value_1, i64 0, i64 0)) #10
  unreachable

if.end762:                                        ; preds = %cond.end753
  %call763 = call %struct.rtx_def* @get_last_insn() #7
  %arrayidx765 = getelementptr inbounds %struct.rtx_def* %orgfun, i64 0, i32 1, i64 0
  %rtstr = bitcast %union.rtunion_def* %arrayidx765 to i8**
  %137 = load i8** %rtstr, align 8, !tbaa !0
  %call766 = call %union.tree_node* @get_identifier(i8* %137) #7
  %cmp767 = icmp eq i32 %outmode, 0
  br i1 %cmp767, label %cond.true769, label %cond.false770

cond.true769:                                     ; preds = %if.end762
  %138 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !0
  br label %cond.end772

cond.false770:                                    ; preds = %if.end762
  %call771 = call %union.tree_node* @type_for_mode(i32 %outmode, i32 0) #7
  br label %cond.end772

cond.end772:                                      ; preds = %cond.false770, %cond.true769
  %cond773 = phi %union.tree_node* [ %138, %cond.true769 ], [ %call771, %cond.false770 ]
  %call774 = call %union.tree_node* @build_function_type(%union.tree_node* %cond773, %union.tree_node* null) #7
  %139 = load i64* %constant, align 8, !tbaa !6
  %140 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !0
  %call778 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 0, %union.tree_node* %140, i32 1) #7
  %add779 = add nsw i32 %2, 1
  %141 = load %struct.rtx_def** %call_fusage, align 8, !tbaa !0
  call fastcc void @emit_call_1(%struct.rtx_def* %call645, %union.tree_node* %call766, %union.tree_node* %call774, i64 %original_args_size.sroa.0.0.copyload, i64 %139, i64 %struct_value_size.0, %struct.rtx_def* %call778, %struct.rtx_def* %cond754, i32 %add779, %struct.rtx_def* %141, i32 %flags.1) #8
  %and780 = and i32 %flags.1, 66
  %tobool781 = icmp eq i32 %and780, 0
  br i1 %tobool781, label %if.end796, label %if.then782

if.then782:                                       ; preds = %cond.end772
  %call783 = call %struct.rtx_def* @get_last_insn() #7
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then782
  %last.0 = phi %struct.rtx_def* [ %call783, %if.then782 ], [ %143, %while.body ]
  %142 = bitcast %struct.rtx_def* %last.0 to i32*
  %bf.load784 = load i32* %142, align 8
  %bf.clear785 = and i32 %bf.load784, 65535
  %cmp786 = icmp eq i32 %bf.clear785, 34
  br i1 %cmp786, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond
  %arrayidx789 = getelementptr inbounds %struct.rtx_def* %last.0, i64 0, i32 1, i64 1
  %rtx790 = bitcast %union.rtunion_def* %arrayidx789 to %struct.rtx_def**
  %143 = load %struct.rtx_def** %rtx790, align 8, !tbaa !0
  %cmp791 = icmp eq %struct.rtx_def* %143, %call763
  br i1 %cmp791, label %if.then793, label %while.cond

if.then793:                                       ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([49 x i8]* @.str3, i64 0, i64 0), i32 4069, i8* getelementptr inbounds ([26 x i8]* @__FUNCTION__.emit_library_call_value_1, i64 0, i64 0)) #10
  unreachable

while.end:                                        ; preds = %while.cond
  %call795 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %last.0) #7
  br label %if.end796

if.end796:                                        ; preds = %cond.end772, %while.end
  %144 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr797 = getelementptr inbounds %struct.function* %144, i64 0, i32 2
  %145 = load %struct.expr_status** %expr797, align 8, !tbaa !0
  %x_inhibit_defer_pop798 = getelementptr inbounds %struct.expr_status* %145, i64 0, i32 1
  %146 = load i32* %x_inhibit_defer_pop798, align 4, !tbaa !3
  %sub799 = add nsw i32 %146, -1
  store i32 %sub799, i32* %x_inhibit_defer_pop798, align 4, !tbaa !3
  br i1 %tobool32, label %if.then802, label %if.end841

if.then802:                                       ; preds = %if.end796
  %cmp803 = icmp eq %struct.rtx_def* %cond754, null
  br i1 %cmp803, label %if.then810, label %lor.lhs.false805

lor.lhs.false805:                                 ; preds = %if.then802
  %147 = bitcast %struct.rtx_def* %cond754 to i32*
  %bf.load806 = load i32* %147, align 8
  %bf.clear807 = and i32 %bf.load806, 65535
  %cmp808 = icmp eq i32 %bf.clear807, 39
  br i1 %cmp808, label %if.then810, label %if.else813

if.then810:                                       ; preds = %lor.lhs.false805, %if.then802
  %call811 = call %struct.rtx_def* @get_insns() #7
  call void @end_sequence() #7
  %call812 = call %struct.rtx_def* @emit_insns(%struct.rtx_def* %call811) #7
  br label %if.end841

if.else813:                                       ; preds = %lor.lhs.false805
  %bf.lshr815 = lshr i32 %bf.load806, 16
  %bf.clear816 = and i32 %bf.lshr815, 255
  %call817 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear816) #7
  br i1 %cmp4871243, label %for.body822, label %for.end829

for.body822:                                      ; preds = %if.else813, %for.body822
  %indvars.iv1248 = phi i64 [ %indvars.iv.next1249, %for.body822 ], [ 0, %if.else813 ]
  %note.01230 = phi %struct.rtx_def* [ %call826, %for.body822 ], [ null, %if.else813 ]
  %value825 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv1248, i32 0
  %148 = load %struct.rtx_def** %value825, align 8, !tbaa !0
  %call826 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %148, %struct.rtx_def* %note.01230) #7
  %indvars.iv.next1249 = add i64 %indvars.iv1248, 1
  %lftr.wideiv1250 = trunc i64 %indvars.iv.next1249 to i32
  %exitcond1251 = icmp eq i32 %lftr.wideiv1250, %nargs.addr.0.ph
  br i1 %exitcond1251, label %for.end829, label %for.body822

for.end829:                                       ; preds = %for.body822, %if.else813
  %note.0.lcssa = phi %struct.rtx_def* [ null, %if.else813 ], [ %call826, %for.body822 ]
  %call830 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call645, %struct.rtx_def* %note.0.lcssa) #7
  %call831 = call %struct.rtx_def* @get_insns() #7
  call void @end_sequence() #7
  %and832 = and i32 %flags.1, 512
  %tobool833 = icmp eq i32 %and832, 0
  br i1 %tobool833, label %if.end839, label %if.then834

if.then834:                                       ; preds = %for.end829
  %call835 = call %struct.rtx_def* @gen_rtx_fmt_0(i32 62, i32 0) #7
  %call836 = call %struct.rtx_def* @gen_rtx_MEM(i32 51, %struct.rtx_def* %call835) #7
  %call837 = call %struct.rtx_def* @gen_rtx_fmt_e(i32 48, i32 0, %struct.rtx_def* %call836) #7
  %call838 = call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 0, %struct.rtx_def* %call837, %struct.rtx_def* %call830) #7
  br label %if.end839

if.end839:                                        ; preds = %for.end829, %if.then834
  %note.1 = phi %struct.rtx_def* [ %call838, %if.then834 ], [ %call830, %for.end829 ]
  call void @emit_libcall_block(%struct.rtx_def* %call831, %struct.rtx_def* %call817, %struct.rtx_def* %cond754, %struct.rtx_def* %note.1) #7
  br label %if.end841

if.end841:                                        ; preds = %if.then810, %if.end839, %if.end796
  call void @pop_temp_slots() #7
  %tobool845 = icmp eq i32 %retval1, 0
  %or.cond1221 = or i1 %tobool845, %cmp14.not
  br i1 %or.cond1221, label %if.end868, label %if.then846

if.then846:                                       ; preds = %if.end841
  %cmp849 = icmp eq %struct.rtx_def* %value, null
  br i1 %tobool35, label %if.then848, label %if.else858

if.then848:                                       ; preds = %if.then846
  %mem_value.1.value = select i1 %cmp849, %struct.rtx_def* %mem_value.1, %struct.rtx_def* %value
  %cmp853 = icmp eq %struct.rtx_def* %mem_value.1.value, %mem_value.1
  br i1 %cmp853, label %if.end868, label %if.then855

if.then855:                                       ; preds = %if.then848
  %call856 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %mem_value.1.value, %struct.rtx_def* %mem_value.1) #7
  br label %if.end868

if.else858:                                       ; preds = %if.then846
  %call865 = call %struct.rtx_def* @hard_libcall_value(i32 %outmode) #7
  br i1 %cmp849, label %if.end868, label %if.then861

if.then861:                                       ; preds = %if.else858
  %call863 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %value, %struct.rtx_def* %call865) #7
  br label %if.end868

if.end868:                                        ; preds = %if.else858, %if.end841, %if.then848, %if.then855, %if.then861
  %value.addr.1 = phi %struct.rtx_def* [ %mem_value.1.value, %if.then855 ], [ %mem_value.1, %if.then848 ], [ %value, %if.then861 ], [ %value, %if.end841 ], [ %call865, %if.else858 ]
  %149 = load i32* @target_flags, align 4, !tbaa !3
  %and869 = and i32 %149, 4096
  %tobool870 = icmp eq i32 %and869, 0
  br i1 %tobool870, label %if.end931, label %for.cond899.preheader

for.cond899.preheader:                            ; preds = %if.end868
  br i1 %cmp4871243, label %for.body902, label %for.end930

for.body902:                                      ; preds = %for.cond899.preheader, %for.inc928
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc928 ], [ 0, %for.cond899.preheader ]
  %save_area905 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv, i32 6
  %150 = load %struct.rtx_def** %save_area905, align 8, !tbaa !0
  %tobool906 = icmp eq %struct.rtx_def* %150, null
  br i1 %tobool906, label %for.inc928, label %if.then907

if.then907:                                       ; preds = %for.body902
  %151 = bitcast %struct.rtx_def* %150 to i32*
  %bf.load912 = load i32* %151, align 8
  %bf.lshr913 = lshr i32 %bf.load912, 16
  %bf.clear914 = and i32 %bf.lshr913, 255
  %constant919 = getelementptr inbounds %struct.arg* %12, i64 %indvars.iv, i32 4, i32 0
  %152 = load i64* %constant919, align 8, !tbaa !6
  %call920 = call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %argblock.01223, i64 %152) #7
  %call921 = call %struct.rtx_def* @memory_address(i32 %bf.clear914, %struct.rtx_def* %call920) #7
  %call922 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear914, %struct.rtx_def* %call921) #7
  %153 = load %struct.rtx_def** %save_area905, align 8, !tbaa !0
  %call926 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call922, %struct.rtx_def* %153) #7
  br label %for.inc928

for.inc928:                                       ; preds = %for.body902, %if.then907
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %nargs.addr.0.ph
  br i1 %exitcond, label %for.end930, label %for.body902

for.end930:                                       ; preds = %for.inc928, %for.cond899.preheader
  store i32 %3, i32* @highest_outgoing_arg_in_use, align 4, !tbaa !3
  store i8* %4, i8** @stack_usage_map, align 8, !tbaa !0
  br label %if.end931

if.end931:                                        ; preds = %if.end868, %for.end930
  ret %struct.rtx_def* %value.addr.1
}
