define %struct.rtx_def* @gen_zero_extendsidi2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  tail call void @start_sequence() #4
  %0 = load i32* @target_flags, align 4, !tbaa !3
  %and = and i32 %0, 33554432
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @gen_zero_extendsidi2_32(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #6
  %call4 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call) #4
  %call5 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

if.end:                                           ; preds = %entry
  %call8 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 121, i32 5, %struct.rtx_def* %operand1) #4
  %call9 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %operand0, %struct.rtx_def* %call8) #4
  %call10 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9) #4
  %call11 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call11, %if.end ], [ %call5, %if.then ]
  ret %struct.rtx_def* %retval.0
}
