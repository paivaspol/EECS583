define %struct.rtx_def* @gen_eh_return(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  tail call void @start_sequence() #4
  %0 = load i32* @target_flags, align 4, !tbaa !3
  %and = lshr i32 %0, 25
  %1 = and i32 %and, 1
  %2 = or i32 %1, 4
  %3 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !tbaa !0
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %2, %struct.rtx_def* %3, %struct.rtx_def* %operand0) #4
  %4 = load i32* @target_flags, align 4, !tbaa !3
  %and6 = lshr i32 %4, 23
  %5 = and i32 %and6, 4
  %sub = sub i32 -4, %5
  %conv = sext i32 %sub to i64
  %call9 = tail call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %call, i64 %conv) #4
  %6 = load i32* @target_flags, align 4, !tbaa !3
  %and10 = lshr i32 %6, 25
  %7 = and i32 %and10, 1
  %8 = or i32 %7, 4
  %call13 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 %8, %struct.rtx_def* %call9) #4
  %call14 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call13, %struct.rtx_def* %operand1) #4
  %call.i = tail call %struct.rtvec_def* (i32, ...)* @gen_rtvec(i32 1, %struct.rtx_def* %operand0) #4
  %call1.i = tail call %struct.rtx_def* @gen_rtx_fmt_Ei(i32 43, i32 0, %struct.rtvec_def* %call.i, i32 13) #4
  %call20 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call1.i) #4
  %call23 = tail call %struct.rtx_def* @emit_barrier() #4
  %call24 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  ret %struct.rtx_def* %call24
}
