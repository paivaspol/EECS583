define %struct.rtx_def* @gen_strlensi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %operand0}, i64 0, metadata !4306), !dbg !10163
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %operand1}, i64 0, metadata !4307), !dbg !10164
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %operand2}, i64 0, metadata !4308), !dbg !10165
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %operand3}, i64 0, metadata !4309), !dbg !10166
  tail call void @llvm.dbg.value(metadata !6291, i64 0, metadata !4310), !dbg !10167
  tail call void @start_sequence() #5, !dbg !10168
  tail call void @llvm.dbg.declare(metadata !9029, metadata !4311), !dbg !10169
  %call = tail call i32 @ix86_expand_strlen(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %operand3) #5, !dbg !10170
  %tobool = icmp eq i32 %call, 0, !dbg !10170
  br i1 %tobool, label %if.else, label %if.then, !dbg !10170

if.then:                                          ; preds = %entry
  %call8 = tail call %struct.rtx_def* @gen_sequence() #5, !dbg !10172
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %call8}, i64 0, metadata !4310), !dbg !10172
  tail call void @end_sequence() #5, !dbg !10172
  br label %return, !dbg !10172

if.else:                                          ; preds = %entry
  tail call void @end_sequence() #5, !dbg !10173
  br label %return, !dbg !10173

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call8, %if.then ], [ null, %if.else ]
  ret %struct.rtx_def* %retval.0, !dbg !10174
}
