define %struct.rtx_def* @gen_sqrtsf2(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  tail call void @start_sequence() #4
  %0 = load i32* @ix86_fpmath, align 4, !tbaa !7
  %and = and i32 %0, 2
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @force_reg(i32 15, %struct.rtx_def* %operand1) #4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %operands.sroa.1.0 = phi %struct.rtx_def* [ %operand1, %entry ], [ %call, %if.then ]
  %call6 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 130, i32 15, %struct.rtx_def* %operands.sroa.1.0) #4
  %call7 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %operand0, %struct.rtx_def* %call6) #4
  %call8 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call7) #4
  %call9 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  ret %struct.rtx_def* %call9
}
