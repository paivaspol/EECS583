define %struct.rtx_def* @gen_return() #0 {
entry:
  tail call void @start_sequence() #4
  %0 = load %struct.function** @cfun, align 8, !tbaa !0
  %pops_args = getelementptr inbounds %struct.function* %0, i64 0, i32 8
  %1 = load i32* %pops_args, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %conv = sext i32 %1 to i64
  %call = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv) #4
  %call2 = tail call %struct.rtx_def* @gen_return_pop_internal(%struct.rtx_def* %call) #6
  %call3 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call2) #4
  %call4 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

if.end:                                           ; preds = %entry
  %call5 = tail call %struct.rtx_def* @gen_rtx_fmt_(i32 51, i32 0) #4
  %call6 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call5) #4
  %call7 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call4, %if.then ], [ %call7, %if.end ]
  ret %struct.rtx_def* %retval.0
}
