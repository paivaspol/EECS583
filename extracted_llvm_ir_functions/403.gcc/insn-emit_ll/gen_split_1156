define %struct.rtx_def* @gen_split_1156(%struct.rtx_def** nocapture %operands) #0 {
entry:
  tail call void @start_sequence() #4
  %0 = load %struct.rtx_def** %operands, align 8, !tbaa !0
  %call = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %0) #4
  store %struct.rtx_def* %call, %struct.rtx_def** %operands, align 8, !tbaa !0
  %1 = bitcast %struct.rtx_def* %call to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, -16711681
  store i32 %bf.clear, i32* %1, align 8
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load3 = load i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load3, 16
  %bf.clear4 = and i32 %bf.lshr, 255
  %bf.clear4.off = add i32 %bf.clear4, -57
  %switch = icmp ult i32 %bf.clear4.off, 2
  %bf.clear16 = and i32 %bf.load, 65535
  br i1 %switch, label %cond.false, label %cond.true

cond.true:                                        ; preds = %entry
  %call14 = tail call i32 @reverse_condition(i32 %bf.clear16) #4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call17 = tail call i32 @reverse_condition_maybe_unordered(i32 %bf.clear16) #4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call14, %cond.true ], [ %call17, %cond.false ]
  %bf.load18 = load i32* %1, align 8
  %bf.value = and i32 %cond, 65535
  %bf.clear19 = and i32 %bf.load18, -65536
  %bf.set = or i32 %bf.clear19, %bf.value
  store i32 %bf.set, i32* %1, align 8
  %call20 = tail call i32 @ix86_comparison_operator(%struct.rtx_def* %call, i32 0) #4
  %tobool = icmp eq i32 %call20, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  tail call void @end_sequence() #4
  br label %return

if.end:                                           ; preds = %cond.end
  %4 = load %struct.rtx_def** %operands, align 8, !tbaa !0
  %arrayidx22 = getelementptr inbounds %struct.rtx_def** %operands, i64 1
  %5 = load %struct.rtx_def** %arrayidx22, align 8, !tbaa !0
  %6 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !0
  %call23 = tail call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 0, %struct.rtx_def* %5) #4
  %7 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 0), align 8, !tbaa !0
  %call24 = tail call %struct.rtx_def* @gen_rtx_fmt_eee(i32 72, i32 0, %struct.rtx_def* %4, %struct.rtx_def* %call23, %struct.rtx_def* %7) #4
  %call25 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %6, %struct.rtx_def* %call24) #4
  %call26 = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call25) #4
  %call27 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call27, %if.end ], [ null, %if.then ]
  ret %struct.rtx_def* %retval.0
}
