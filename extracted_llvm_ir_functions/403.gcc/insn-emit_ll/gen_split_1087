define %struct.rtx_def* @gen_split_1087(%struct.rtx_def** nocapture %operands) #0 {
entry:
  tail call void @start_sequence() #4
  %0 = load %struct.rtx_def** %operands, align 8, !tbaa !0
  %call = tail call %struct.rtx_def* @gen_lowpart(i32 4, %struct.rtx_def* %0) #4
  store %struct.rtx_def* %call, %struct.rtx_def** %operands, align 8, !tbaa !0
  %1 = load i32* @target_flags, align 4, !tbaa !3
  %and = lshr i32 %1, 25
  %2 = and i32 %and, 1
  %3 = or i32 %2, 4
  %arrayidx2 = getelementptr inbounds %struct.rtx_def** %operands, i64 1
  %4 = load %struct.rtx_def** %arrayidx2, align 8, !tbaa !0
  %call3 = tail call %struct.rtx_def* @gen_lowpart(i32 %3, %struct.rtx_def* %4) #4
  store %struct.rtx_def* %call3, %struct.rtx_def** %arrayidx2, align 8, !tbaa !0
  %arrayidx5 = getelementptr inbounds %struct.rtx_def** %operands, i64 2
  %5 = load %struct.rtx_def** %arrayidx5, align 8, !tbaa !0
  %rtwint = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0, i32 0
  %6 = load i64* %rtwint, align 8, !tbaa !4
  %sh_prom = trunc i64 %6 to i32
  %shl = shl i32 1, %sh_prom
  %conv = sext i32 %shl to i64
  %7 = load i32* @target_flags, align 4, !tbaa !3
  %and7 = lshr i32 %7, 25
  %8 = and i32 %and7, 1
  %9 = or i32 %8, 4
  %call10 = tail call i64 @trunc_int_for_mode(i64 %conv, i32 %9) #4
  %call11 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call10) #4
  store %struct.rtx_def* %call11, %struct.rtx_def** %arrayidx5, align 8, !tbaa !0
  %10 = load i32* @target_flags, align 4, !tbaa !3
  %and13 = lshr i32 %10, 25
  %11 = and i32 %and13, 1
  %12 = or i32 %11, 4
  %13 = load %struct.rtx_def** %arrayidx2, align 8, !tbaa !0
  %call18 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %12, %struct.rtx_def* %13, %struct.rtx_def* %call11) #4
  %14 = load i32* @target_flags, align 4, !tbaa !3
  %and19 = and i32 %14, 33554432
  %tobool20 = icmp eq i32 %and19, 0
  br i1 %tobool20, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call23 = tail call %struct.rtx_def* @gen_rtx_SUBREG(i32 4, %struct.rtx_def* %call18, i32 0) #4
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %pat.0 = phi %struct.rtx_def* [ %call23, %if.then ], [ %call18, %entry ]
  %15 = load %struct.rtx_def** %operands, align 8, !tbaa !0
  %call25 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %pat.0) #4
  %call26 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call25) #4
  %call27 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  ret %struct.rtx_def* %call27
}
