define %struct.rtx_def* @gen_strmovsi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  tail call void @start_sequence() #4
  %0 = load i32* @target_flags, align 4, !tbaa !3
  %and = and i32 %0, 33554432
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @gen_strmovsi_rex64(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #6
  %call4 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call) #4
  %call5 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32* @x86_single_stringop, align 4, !tbaa !3
  %2 = load i32* @ix86_cpu, align 4, !tbaa !5
  %shl = shl i32 1, %2
  %and6 = and i32 %shl, %1
  %3 = load i32* @optimize_size, align 4, !tbaa !3
  %4 = or i32 %and6, %3
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.end
  %call14 = tail call %struct.rtx_def* @gen_strmovsi_1(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #6
  %call15 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14) #4
  %call16 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

if.else:                                          ; preds = %if.end
  %call17 = tail call %struct.rtx_def* @gen_reg_rtx(i32 4) #4
  %call23 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %operand1) #4
  %call24 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call17, %struct.rtx_def* %call23) #4
  %call25 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call24) #4
  %call26 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %operand0) #4
  %call27 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call26, %struct.rtx_def* %call17) #4
  %call28 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call27) #4
  %call29 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4) #4
  %call30 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %operand0, %struct.rtx_def* %call29) #4
  %call31 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %operand0, %struct.rtx_def* %call30) #4
  %call32 = tail call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17) #4
  %call33 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call32) #4
  %call34 = tail call %struct.rtvec_def* (i32, ...)* @gen_rtvec(i32 2, %struct.rtx_def* %call31, %struct.rtx_def* %call33) #4
  %call35 = tail call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call34) #4
  %call36 = tail call %struct.rtx_def* @emit(%struct.rtx_def* %call35) #4
  %call37 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4) #4
  %call38 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %operand1, %struct.rtx_def* %call37) #4
  %call39 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %operand1, %struct.rtx_def* %call38) #4
  %call40 = tail call %struct.rtx_def* @gen_rtx_REG(i32 52, i32 17) #4
  %call41 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %call40) #4
  %call42 = tail call %struct.rtvec_def* (i32, ...)* @gen_rtvec(i32 2, %struct.rtx_def* %call39, %struct.rtx_def* %call41) #4
  %call43 = tail call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call42) #4
  %call44 = tail call %struct.rtx_def* @emit(%struct.rtx_def* %call43) #4
  %call45 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

return:                                           ; preds = %if.else, %if.then9, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call5, %if.then ], [ %call16, %if.then9 ], [ %call45, %if.else ]
  ret %struct.rtx_def* %retval.0
}
