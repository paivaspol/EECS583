define %struct.rtx_def* @gen_split_855(%struct.rtx_def** %operands) #0 {
entry:
  tail call void @start_sequence() #4
  %add.ptr = getelementptr inbounds %struct.rtx_def** %operands, i64 1
  %add.ptr1 = getelementptr inbounds %struct.rtx_def** %operands, i64 2
  %add.ptr2 = getelementptr inbounds %struct.rtx_def** %operands, i64 3
  tail call void @split_di(%struct.rtx_def** %add.ptr, i32 1, %struct.rtx_def** %add.ptr1, %struct.rtx_def** %add.ptr2) #4
  %0 = load %struct.rtx_def** %add.ptr1, align 8, !tbaa !0
  %call = tail call %struct.rtx_def* @gen_lowpart(i32 5, %struct.rtx_def* %0) #4
  store %struct.rtx_def* %call, %struct.rtx_def** %add.ptr, align 8, !tbaa !0
  %1 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !0
  %call4 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4) #4
  %call5 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 5, %struct.rtx_def* %1, %struct.rtx_def* %call4) #4
  %call6 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 4, %struct.rtx_def* %call5) #4
  store %struct.rtx_def* %call6, %struct.rtx_def** %add.ptr1, align 8, !tbaa !0
  %2 = load %struct.rtx_def** %operands, align 8, !tbaa !0
  %3 = load %struct.rtx_def** %add.ptr, align 8, !tbaa !0
  %4 = load %struct.rtx_def** %add.ptr2, align 8, !tbaa !0
  %call12 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %3) #4
  %call13 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12) #4
  %call14 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call6, %struct.rtx_def* %4) #4
  %call15 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call14) #4
  %call16 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  ret %struct.rtx_def* %call16
}
