define %struct.rtx_def* @gen_allocate_stack_worker(%struct.rtx_def* %operand0) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %operand0}, i64 0, metadata !4550), !dbg !10537
  tail call void @llvm.dbg.value(metadata !6291, i64 0, metadata !4551), !dbg !10538
  tail call void @start_sequence() #5, !dbg !10539
  tail call void @llvm.dbg.declare(metadata !9090, metadata !4552), !dbg !10540
  %0 = load i32* @target_flags, align 4, !dbg !10541, !tbaa !6384
  %and = and i32 %0, 33554432, !dbg !10541
  %tobool = icmp eq i32 %and, 0, !dbg !10541
  br i1 %tobool, label %if.else, label %if.then, !dbg !10541

if.then:                                          ; preds = %entry
  %call = tail call %struct.rtx_def* @gen_allocate_stack_worker_rex64(%struct.rtx_def* %operand0) #7, !dbg !10543
  %call2 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call) #5, !dbg !10543
  br label %if.end, !dbg !10543

if.else:                                          ; preds = %entry
  %call4 = tail call %struct.rtx_def* @gen_allocate_stack_worker_1(%struct.rtx_def* %operand0) #7, !dbg !10544
  %call5 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call4) #5, !dbg !10544
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call6 = tail call %struct.rtx_def* @gen_sequence() #5, !dbg !10545
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %call6}, i64 0, metadata !4551), !dbg !10545
  tail call void @end_sequence() #5, !dbg !10545
  ret %struct.rtx_def* %call6, !dbg !10545
}
