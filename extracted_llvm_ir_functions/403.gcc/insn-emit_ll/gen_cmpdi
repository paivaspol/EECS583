define %struct.rtx_def* @gen_cmpdi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %operand0}, i64 0, metadata !1741), !dbg !6289
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %operand1}, i64 0, metadata !1742), !dbg !6290
  tail call void @llvm.dbg.value(metadata !6291, i64 0, metadata !1743), !dbg !6292
  tail call void @start_sequence() #5, !dbg !6293
  tail call void @llvm.dbg.declare(metadata !6294, metadata !1744), !dbg !6295
  %0 = bitcast %struct.rtx_def* %operand0 to i32*, !dbg !6296
  %bf.load = load i32* %0, align 8, !dbg !6296
  %bf.clear = and i32 %bf.load, 65535, !dbg !6296
  %cmp = icmp eq i32 %bf.clear, 66, !dbg !6296
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6296

land.lhs.true:                                    ; preds = %entry
  %1 = bitcast %struct.rtx_def* %operand1 to i32*, !dbg !6296
  %bf.load4 = load i32* %1, align 8, !dbg !6296
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !6296
  %cmp6 = icmp eq i32 %bf.clear5, 66, !dbg !6296
  br i1 %cmp6, label %if.then, label %if.end, !dbg !6296

if.then:                                          ; preds = %land.lhs.true
  %call = tail call %struct.rtx_def* @force_reg(i32 5, %struct.rtx_def* %operand0) #5, !dbg !6298
  br label %if.end, !dbg !6298

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %operands.sroa.0.0 = phi %struct.rtx_def* [ %call, %if.then ], [ %operand0, %land.lhs.true ], [ %operand0, %entry ]
  store %struct.rtx_def* %operands.sroa.0.0, %struct.rtx_def** @ix86_compare_op0, align 8, !dbg !6299, !tbaa !5356
  store %struct.rtx_def* %operand1, %struct.rtx_def** @ix86_compare_op1, align 8, !dbg !6300, !tbaa !5356
  %call11 = tail call %struct.rtx_def* @gen_sequence() #5, !dbg !6301
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %call11}, i64 0, metadata !1743), !dbg !6301
  tail call void @end_sequence() #5, !dbg !6301
  ret %struct.rtx_def* %call11, !dbg !6301
}
