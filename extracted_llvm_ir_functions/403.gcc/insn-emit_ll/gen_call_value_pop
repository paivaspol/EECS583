define %struct.rtx_def* @gen_call_value_pop(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* nocapture %operand3, %struct.rtx_def* %operand4) #0 {
entry:
  tail call void @start_sequence() #4
  %0 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !0
  %cmp = icmp eq %struct.rtx_def* %0, %operand4
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %1 = load i32* @flag_pic, align 4, !tbaa !3
  %tobool = icmp eq i32 %1, 0
  %arrayidx28.pre = getelementptr inbounds %struct.rtx_def* %operand1, i64 0, i32 1, i64 0
  %rtx29.pre = bitcast %union.rtunion_def* %arrayidx28.pre to %struct.rtx_def**
  br i1 %tobool, label %if.end25, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %2 = load %struct.rtx_def** %rtx29.pre, align 8, !tbaa !0
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load = load i32* %3, align 8
  %4 = and i32 %bf.load, 134283263
  %5 = icmp eq i32 %4, 68
  br i1 %5, label %if.then22, label %if.end25

if.then22:                                        ; preds = %land.lhs.true
  %6 = load %struct.function** @cfun, align 8, !tbaa !0
  %uses_pic_offset_table = getelementptr inbounds %struct.function* %6, i64 0, i32 56
  %7 = bitcast [4 x i8]* %uses_pic_offset_table to i32*
  %bf.load23 = load i32* %7, align 8
  %bf.set = or i32 %bf.load23, 2097152
  store i32 %bf.set, i32* %7, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.end, %if.then22, %land.lhs.true
  %8 = load %struct.rtx_def** %rtx29.pre, align 8, !tbaa !0
  %9 = load i32* @target_flags, align 4, !tbaa !3
  %and = lshr i32 %9, 25
  %10 = and i32 %and, 1
  %11 = or i32 %10, 4
  %call31 = tail call i32 @call_insn_operand(%struct.rtx_def* %8, i32 %11) #4
  %tobool32 = icmp eq i32 %call31, 0
  br i1 %tobool32, label %if.then33, label %cleanup.cont

if.then33:                                        ; preds = %if.end25
  %12 = load i32* @target_flags, align 4, !tbaa !3
  %and34 = lshr i32 %12, 25
  %13 = and i32 %and34, 1
  %14 = or i32 %13, 4
  %15 = load %struct.rtx_def** %rtx29.pre, align 8, !tbaa !0
  %call41 = tail call %struct.rtx_def* @copy_to_mode_reg(i32 %14, %struct.rtx_def* %15) #4
  %16 = getelementptr inbounds %union.rtunion_def* %arrayidx28.pre, i64 0, i32 0
  %call41.c = ptrtoint %struct.rtx_def* %call41 to i64
  store i64 %call41.c, i64* %16, align 8, !tbaa !0
  br label %cleanup.cont

cleanup:                                          ; preds = %entry
  %17 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !tbaa !0
  %call = tail call %struct.rtx_def* @gen_call_value(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2, %struct.rtx_def* %17) #6
  %call9 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call) #4
  %call10 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

cleanup.cont:                                     ; preds = %if.end25, %if.then33
  %call52 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 50, i32 0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #4
  %call53 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %operand0, %struct.rtx_def* %call52) #4
  %call54 = tail call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7) #4
  %call55 = tail call %struct.rtx_def* @gen_rtx_REG(i32 4, i32 7) #4
  %call56 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 4, %struct.rtx_def* %call55, %struct.rtx_def* %operand4) #4
  %call57 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call54, %struct.rtx_def* %call56) #4
  %call58 = tail call %struct.rtvec_def* (i32, ...)* @gen_rtvec(i32 2, %struct.rtx_def* %call53, %struct.rtx_def* %call57) #4
  %call59 = tail call %struct.rtx_def* @gen_rtx_fmt_E(i32 39, i32 0, %struct.rtvec_def* %call58) #4
  %call60 = tail call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call59) #4
  %call61 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  br label %return

return:                                           ; preds = %cleanup, %cleanup.cont
  %retval.1 = phi %struct.rtx_def* [ %call10, %cleanup ], [ %call61, %cleanup.cont ]
  ret %struct.rtx_def* %retval.1
}
