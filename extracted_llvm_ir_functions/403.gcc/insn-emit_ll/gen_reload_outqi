define %struct.rtx_def* @gen_reload_outqi(%struct.rtx_def* %operand0, %struct.rtx_def* %operand1, %struct.rtx_def* %operand2) #0 {
entry:
  tail call void @start_sequence() #4
  %call = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %operand2, %struct.rtx_def* %operand0) #4
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str, i64 0, i64 0), i32 5519, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.gen_reload_outqi, i64 0, i64 0)) #5
  unreachable

if.end:                                           ; preds = %entry
  %call6 = tail call i32 @q_regs_operand(%struct.rtx_def* %operand1, i32 2) #4
  %tobool7 = icmp eq i32 %call6, 0
  br i1 %tobool7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.end
  %call9 = tail call %struct.rtx_def* @gen_movqi(%struct.rtx_def* %operand2, %struct.rtx_def* %operand1) #6
  %call10 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call9) #4
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then8
  %op1.0 = phi %struct.rtx_def* [ %operand1, %if.end ], [ %operand2, %if.then8 ]
  %call12 = tail call %struct.rtx_def* @gen_movqi(%struct.rtx_def* %operand0, %struct.rtx_def* %op1.0) #6
  %call13 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call12) #4
  %call14 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  ret %struct.rtx_def* %call14
}
