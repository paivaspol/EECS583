define %struct.rtx_def* @gen_split_1043(%struct.rtx_def** nocapture %operands) #0 {
entry:
  tail call void @start_sequence() #4
  %0 = load %struct.rtx_def** %operands, align 8, !tbaa !0
  %arrayidx1 = getelementptr inbounds %struct.rtx_def** %operands, i64 2
  %1 = load %struct.rtx_def** %arrayidx1, align 8, !tbaa !0
  %call = tail call i32 @operands_match_p(%struct.rtx_def* %0, %struct.rtx_def* %1) #4
  %tobool = icmp eq i32 %call, 0
  %arrayidx7.phi.trans.insert = getelementptr inbounds %struct.rtx_def** %operands, i64 1
  %.pre = load %struct.rtx_def** %arrayidx7.phi.trans.insert, align 8, !tbaa !0
  %.pre24 = load %struct.rtx_def** %arrayidx1, align 8, !tbaa !0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.rtx_def* %.pre24, %struct.rtx_def** %arrayidx7.phi.trans.insert, align 8, !tbaa !0
  store %struct.rtx_def* %.pre, %struct.rtx_def** %arrayidx1, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %2 = phi %struct.rtx_def* [ %.pre, %if.then ], [ %.pre24, %entry ]
  %3 = phi %struct.rtx_def* [ %.pre24, %if.then ], [ %.pre, %entry ]
  %4 = load %struct.rtx_def** %operands, align 8, !tbaa !0
  %call9 = tail call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %4, i32 0) #4
  %call10 = tail call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %3, i32 0) #4
  %call11 = tail call %struct.rtx_def* @gen_rtx_SUBREG(i32 6, %struct.rtx_def* %2, i32 0) #4
  %call12 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 85, i32 6, %struct.rtx_def* %call10, %struct.rtx_def* %call11) #4
  %call13 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %call9, %struct.rtx_def* %call12) #4
  %call14 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13) #4
  %call15 = tail call %struct.rtx_def* @gen_sequence() #4
  tail call void @end_sequence() #4
  ret %struct.rtx_def* %call15
}
