define i32 @reversed_comparison_code(%struct.rtx_def* nocapture %comparison, %struct.rtx_def* %insn) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %comparison to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom11 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom11
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp = icmp eq i8 %1, 60
  br i1 %cmp, label %if.end, label %return

if.end:                                           ; preds = %entry
  %fld = getelementptr inbounds %struct.rtx_def* %comparison, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %comparison, i64 0, i32 1, i64 1
  %rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx7, align 8, !tbaa !3
  %call = tail call i32 @reversed_comparison_code_parts(i32 %bf.clear, %struct.rtx_def* %2, %struct.rtx_def* %3, %struct.rtx_def* %insn) #8
  br label %return

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i32 [ %call, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}
