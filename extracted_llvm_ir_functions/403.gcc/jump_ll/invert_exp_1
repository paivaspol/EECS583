define internal fastcc void @invert_exp_1(%struct.rtx_def* %insn) #0 {
entry:
  %call = tail call %struct.rtx_def* @pc_set(%struct.rtx_def* %insn) #8
  %tobool = icmp eq %struct.rtx_def* %call, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([48 x i8]* @.str, i64 0, i64 0), i32 2106, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.invert_exp_1, i64 0, i64 0)) #9
  unreachable

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 72
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.end
  %fld2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx4 = bitcast [1 x %union.rtunion_def]* %fld2 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx4, align 8, !tbaa !3
  %call5 = tail call i32 @reversed_comparison_code(%struct.rtx_def* %2, %struct.rtx_def* %insn) #8
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %if.end21, label %if.then7

if.then7:                                         ; preds = %if.then1
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load11 = load i32* %3, align 8
  %bf.lshr = lshr i32 %bf.load11, 16
  %bf.clear12 = and i32 %bf.lshr, 255
  %fld13 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1
  %rtx15 = bitcast [1 x %union.rtunion_def]* %fld13 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx15, align 8, !tbaa !3
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 1
  %rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx18, align 8, !tbaa !3
  %call19 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %call5, i32 %bf.clear12, %struct.rtx_def* %4, %struct.rtx_def* %5) #7
  %call20 = tail call i32 @validate_change(%struct.rtx_def* %insn, %struct.rtx_def** %rtx4, %struct.rtx_def* %call19, i32 1) #7
  br label %if.end36

if.end21:                                         ; preds = %if.then1
  %arrayidx23 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx24, align 8, !tbaa !3
  %arrayidx29 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 2
  %rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx30, align 8, !tbaa !3
  %call31 = tail call i32 @validate_change(%struct.rtx_def* %insn, %struct.rtx_def** %rtx24, %struct.rtx_def* %7, i32 1) #7
  %call35 = tail call i32 @validate_change(%struct.rtx_def* %insn, %struct.rtx_def** %rtx30, %struct.rtx_def* %6, i32 1) #7
  br label %if.end36

if.else:                                          ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([48 x i8]* @.str, i64 0, i64 0), i32 2139, i8* getelementptr inbounds ([13 x i8]* @__FUNCTION__.invert_exp_1, i64 0, i64 0)) #9
  unreachable

if.end36:                                         ; preds = %if.then7, %if.end21
  ret void
}
