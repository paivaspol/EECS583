define %union.tree_node* @build_stmt(i32 %code, ...) #0 {
entry:
  %p = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %p to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %call = call %union.tree_node* @make_node(i32 %code) #5
  %idxprom = sext i32 %code to i64
  %arrayidx = getelementptr inbounds [256 x i32]* @tree_code_length, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !4
  %1 = load i32* @lineno, align 4, !tbaa !4
  %complexity = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 1
  %2 = bitcast i8** %complexity to i32*
  store i32 %1, i32* %2, align 4, !tbaa !4
  %cmp13 = icmp sgt i32 %0, 0
  br i1 %cmp13, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 0
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 3
  %operands = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %4 = bitcast i32* %operands to [1 x %union.tree_node*]*
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, i32 2
  br label %for.body

for.body:                                         ; preds = %vaarg.end, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %vaarg.end ]
  %gp_offset = load i32* %gp_offset_p, align 16
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %for.body
  %reg_save_area = load i8** %3, align 16
  %5 = sext i32 %gp_offset to i64
  %6 = getelementptr i8* %reg_save_area, i64 %5
  %7 = add i32 %gp_offset, 8
  store i32 %7, i32* %gp_offset_p, align 16
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %6, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to %union.tree_node**
  %8 = load %union.tree_node** %vaarg.addr, align 8
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*]* %4, i64 0, i64 %indvars.iv
  store %union.tree_node* %8, %union.tree_node** %arrayidx5, align 8, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %0
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %vaarg.end, %entry
  call void @llvm.va_end(i8* %arraydecay1)
  ret %union.tree_node* %call
}
