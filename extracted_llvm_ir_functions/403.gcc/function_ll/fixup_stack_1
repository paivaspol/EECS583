define internal fastcc %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %x, %struct.rtx_def* %insn) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %x to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %if.then, label %if.end77

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load1 = load i32* %2, align 8
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 75
  br i1 %cmp3, label %land.lhs.true, label %return

land.lhs.true:                                    ; preds = %if.then
  %fld4 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1
  %rtx6 = bitcast [1 x %union.rtunion_def]* %fld4 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx6, align 8, !tbaa !0
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load7 = load i32* %4, align 8
  %bf.clear8 = and i32 %bf.load7, 65535
  %cmp9 = icmp eq i32 %bf.clear8, 61
  br i1 %cmp9, label %land.lhs.true10, label %return

land.lhs.true10:                                  ; preds = %land.lhs.true
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx15 to i32*
  %5 = load i32* %rtuint, align 4, !tbaa !4
  %.off = add i32 %5, -53
  %6 = icmp ult i32 %.off, 5
  br i1 %6, label %land.lhs.true61, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true10
  switch i32 %5, label %lor.lhs.false56 [
    i32 20, label %land.lhs.true61
    i32 6, label %land.lhs.true61
    i32 7, label %land.lhs.true61
    i32 16, label %land.lhs.true61
  ]

lor.lhs.false56:                                  ; preds = %lor.lhs.false
  %7 = load %struct.function** @cfun, align 8, !tbaa !0
  %internal_arg_pointer = getelementptr inbounds %struct.function* %7, i64 0, i32 15
  %8 = load %struct.rtx_def** %internal_arg_pointer, align 8, !tbaa !0
  %cmp60 = icmp eq %struct.rtx_def* %3, %8
  br i1 %cmp60, label %land.lhs.true61, label %return

land.lhs.true61:                                  ; preds = %lor.lhs.false, %lor.lhs.false, %lor.lhs.false, %lor.lhs.false, %land.lhs.true10, %lor.lhs.false56
  %arrayidx63 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx64, align 8, !tbaa !0
  %10 = bitcast %struct.rtx_def* %9 to i32*
  %bf.load65 = load i32* %10, align 8
  %bf.clear66 = and i32 %bf.load65, 65535
  %cmp67 = icmp eq i32 %bf.clear66, 54
  br i1 %cmp67, label %if.then68, label %return

if.then68:                                        ; preds = %land.lhs.true61
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear70 = and i32 %bf.lshr, 255
  %call = tail call i32 @memory_address_p(i32 %bf.clear70, %struct.rtx_def* %1) #10
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %return

if.end:                                           ; preds = %if.then68
  tail call void @start_sequence() #10
  %call72 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %1) #10
  %call73 = tail call %struct.rtx_def* @gen_sequence() #10
  tail call void @end_sequence() #10
  %call74 = tail call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call73, %struct.rtx_def* %insn) #10
  %call75 = tail call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %x, %struct.rtx_def* %call72) #10
  br label %return

if.end77:                                         ; preds = %entry
  %idxprom166 = zext i32 %bf.clear to i64
  %arrayidx78 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom166
  %11 = load i8** %arrayidx78, align 8, !tbaa !0
  %arrayidx80 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom166
  %12 = load i8* %arrayidx80, align 1, !tbaa !1
  %cmp81171 = icmp eq i8 %12, 0
  br i1 %cmp81171, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end77
  %13 = zext i8 %12 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv173 = phi i64 [ %13, %for.body.lr.ph ], [ %indvars.iv.next174, %for.cond.backedge ]
  %indvars.iv.next174 = add i64 %indvars.iv173, -1
  %arrayidx84 = getelementptr inbounds i8* %11, i64 %indvars.iv.next174
  %14 = load i8* %arrayidx84, align 1, !tbaa !1
  switch i8 %14, label %for.cond.backedge [
    i8 101, label %if.then88
    i8 69, label %for.cond104.preheader
  ]

for.cond.backedge:                                ; preds = %for.cond104.preheader, %for.body110, %for.body, %if.then88
  %15 = trunc i64 %indvars.iv.next174 to i32
  %cmp81 = icmp sgt i32 %15, 0
  br i1 %cmp81, label %for.body, label %return

for.cond104.preheader:                            ; preds = %for.body
  %arrayidx107 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next174
  %rtvec = bitcast %union.rtunion_def* %arrayidx107 to %struct.rtvec_def**
  %16 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  %num_elem167 = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 0
  %17 = load i32* %num_elem167, align 4, !tbaa !4
  %cmp108168 = icmp sgt i32 %17, 0
  br i1 %cmp108168, label %for.body110, label %for.cond.backedge

if.then88:                                        ; preds = %for.body
  %arrayidx91 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next174
  %rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx92, align 8, !tbaa !0
  %call93 = tail call fastcc %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %18, %struct.rtx_def* %insn) #9
  %19 = getelementptr inbounds %union.rtunion_def* %arrayidx91, i64 0, i32 0
  %call93.c = ptrtoint %struct.rtx_def* %call93 to i64
  store i64 %call93.c, i64* %19, align 8, !tbaa !0
  br label %for.cond.backedge

for.body110:                                      ; preds = %for.cond104.preheader, %for.body110
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body110 ], [ 0, %for.cond104.preheader ]
  %20 = phi %struct.rtvec_def* [ %23, %for.body110 ], [ %16, %for.cond104.preheader ]
  %arrayidx116 = getelementptr inbounds %struct.rtvec_def* %20, i64 0, i32 1, i64 %indvars.iv
  %21 = load %struct.rtx_def** %arrayidx116, align 8, !tbaa !0
  %call117 = tail call fastcc %struct.rtx_def* @fixup_stack_1(%struct.rtx_def* %21, %struct.rtx_def* %insn) #9
  %22 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  %arrayidx124 = getelementptr inbounds %struct.rtvec_def* %22, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %call117, %struct.rtx_def** %arrayidx124, align 8, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, 1
  %23 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  %num_elem = getelementptr inbounds %struct.rtvec_def* %23, i64 0, i32 0
  %24 = load i32* %num_elem, align 4, !tbaa !4
  %25 = trunc i64 %indvars.iv.next to i32
  %cmp108 = icmp slt i32 %25, %24
  br i1 %cmp108, label %for.body110, label %for.cond.backedge

return:                                           ; preds = %if.end77, %for.cond.backedge, %if.then, %land.lhs.true, %lor.lhs.false56, %land.lhs.true61, %if.then68, %if.end
  %retval.0 = phi %struct.rtx_def* [ %call75, %if.end ], [ %x, %if.then68 ], [ %x, %land.lhs.true61 ], [ %x, %lor.lhs.false56 ], [ %x, %land.lhs.true ], [ %x, %if.then ], [ %x, %for.cond.backedge ], [ %x, %if.end77 ]
  ret %struct.rtx_def* %retval.0
}
