define internal fastcc void @purge_single_hard_subreg_set(%struct.rtx_def* nocapture %pattern) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %pattern, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32* %1, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %bf.clear5 = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear5, 63
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %fld6 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx8 = bitcast [1 x %union.rtunion_def]* %fld6 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx8, align 8, !tbaa !0
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load9 = load i32* %3, align 8
  %bf.clear10 = and i32 %bf.load9, 65535
  %cmp11 = icmp eq i32 %bf.clear10, 61
  br i1 %cmp11, label %land.lhs.true12, label %if.end

land.lhs.true12:                                  ; preds = %land.lhs.true
  %arrayidx17 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx17 to i32*
  %4 = load i32* %rtuint, align 4, !tbaa !4
  %cmp18 = icmp ult i32 %4, 53
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true12
  %bf.lshr29 = lshr i32 %bf.load9, 16
  %bf.clear30 = and i32 %bf.lshr29, 255
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtuint33 = bitcast %union.rtunion_def* %arrayidx32 to i32*
  %5 = load i32* %rtuint33, align 4, !tbaa !4
  %call = tail call i32 @subreg_regno_offset(i32 %4, i32 %bf.clear30, i32 %5, i32 %bf.clear) #10
  %6 = load %struct.rtx_def** %rtx8, align 8, !tbaa !0
  %.phi.trans.insert = bitcast %struct.rtx_def* %6 to i32*
  %bf.load40.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true12, %land.lhs.true, %entry
  %bf.load40 = phi i32 [ %bf.load40.pre, %if.then ], [ %bf.load, %land.lhs.true12 ], [ %bf.load, %land.lhs.true ], [ %bf.load, %entry ]
  %reg.0 = phi %struct.rtx_def* [ %6, %if.then ], [ %0, %land.lhs.true12 ], [ %0, %land.lhs.true ], [ %0, %entry ]
  %offset.0 = phi i32 [ %call, %if.then ], [ 0, %land.lhs.true12 ], [ 0, %land.lhs.true ], [ 0, %entry ]
  %bf.clear41 = and i32 %bf.load40, 65535
  %cmp42 = icmp eq i32 %bf.clear41, 61
  br i1 %cmp42, label %land.lhs.true43, label %if.end56

land.lhs.true43:                                  ; preds = %if.end
  %arrayidx45 = getelementptr inbounds %struct.rtx_def* %reg.0, i64 0, i32 1, i64 0
  %rtuint46 = bitcast %union.rtunion_def* %arrayidx45 to i32*
  %7 = load i32* %rtuint46, align 4, !tbaa !4
  %cmp47 = icmp ult i32 %7, 53
  br i1 %cmp47, label %if.then48, label %if.end56

if.then48:                                        ; preds = %land.lhs.true43
  %add = add i32 %7, %offset.0
  %call52 = tail call %struct.rtx_def* @gen_rtx_REG(i32 %bf.clear, i32 %add) #10
  %8 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  %call52.c = ptrtoint %struct.rtx_def* %call52 to i64
  store i64 %call52.c, i64* %8, align 8, !tbaa !0
  br label %if.end56

if.end56:                                         ; preds = %if.then48, %land.lhs.true43, %if.end
  ret void
}
