define internal fastcc %struct.rtx_def* @fixup_memory_subreg(%struct.rtx_def* nocapture %x, %struct.rtx_def* %insn, i32 %uncritical) #0 {
entry:
  %fld = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx3, align 8, !tbaa !0
  %2 = bitcast %struct.rtx_def* %x to i32*
  %bf.load = load i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom1 = zext i32 %bf.clear to i64
  %arrayidx4 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom1
  %3 = load i8* %arrayidx4, align 1, !tbaa !1
  %4 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load5 = load i32* %4, align 8
  %bf.lshr6 = lshr i32 %bf.load5, 16
  %bf.clear7 = and i32 %bf.lshr6, 255
  %idxprom82 = zext i32 %bf.clear7 to i64
  %arrayidx9 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom82
  %5 = load i8* %arrayidx9, align 1, !tbaa !1
  %cmp = icmp ugt i8 %3, %5
  %tobool = icmp eq i32 %uncritical, 0
  %or.cond = and i1 %cmp, %tobool
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([52 x i8]* @.str, i64 0, i64 0), i32 2571, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.fixup_memory_subreg, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx13 to i32*
  %6 = load i32* %rtuint, align 4, !tbaa !4
  %7 = load i32* @flag_force_addr, align 4, !tbaa !4
  %tobool14 = icmp eq i32 %7, 0
  %conv16 = sext i32 %6 to i64
  br i1 %tobool14, label %land.lhs.true15, label %if.end22

land.lhs.true15:                                  ; preds = %if.end
  %call = tail call %struct.rtx_def* @plus_constant_wide(%struct.rtx_def* %1, i64 %conv16) #10
  %call17 = tail call i32 @memory_address_p(i32 %bf.clear, %struct.rtx_def* %call) #10
  %tobool18 = icmp eq i32 %call17, 0
  br i1 %tobool18, label %if.end22, label %if.then19

if.then19:                                        ; preds = %land.lhs.true15
  %call21 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %0, i32 %bf.clear, i64 %conv16, i32 1, i32 1) #10
  br label %return

if.end22:                                         ; preds = %if.end, %land.lhs.true15
  tail call void @start_sequence() #10
  %call24 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %0, i32 %bf.clear, i64 %conv16, i32 1, i32 1) #10
  %call25 = tail call %struct.rtx_def* @gen_sequence() #10
  %call26 = tail call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call25, %struct.rtx_def* %insn) #10
  tail call void @end_sequence() #10
  br label %return

return:                                           ; preds = %if.end22, %if.then19
  %retval.0 = phi %struct.rtx_def* [ %call24, %if.end22 ], [ %call21, %if.then19 ]
  ret %struct.rtx_def* %retval.0
}
