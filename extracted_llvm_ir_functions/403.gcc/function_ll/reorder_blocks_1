define internal fastcc void @reorder_blocks_1(%struct.rtx_def* %insns, %union.tree_node* %current_block, %struct.varray_head_tag** %p_block_stack) #0 {
entry:
  %tobool150 = icmp eq %struct.rtx_def* %insns, null
  br i1 %tobool150, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %current_block.addr.0152 = phi %union.tree_node* [ %current_block.addr.1, %for.inc ], [ %current_block, %entry ]
  %insn.0151 = phi %struct.rtx_def* [ %37, %for.inc ], [ %insns, %entry ]
  %0 = bitcast %struct.rtx_def* %insn.0151 to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %for.inc [
    i32 37, label %if.then
    i32 34, label %land.lhs.true
  ]

if.then:                                          ; preds = %for.body
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.0151, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %1 = load i32* %rtint, align 4, !tbaa !4
  switch i32 %1, label %for.inc [
    i32 -98, label %if.then2
    i32 -97, label %if.then45
  ]

if.then2:                                         ; preds = %if.then
  %arrayidx4 = getelementptr inbounds %struct.rtx_def* %insn.0151, i64 0, i32 1, i64 3
  %rttree = bitcast %union.rtunion_def* %arrayidx4 to %union.tree_node**
  %2 = load %union.tree_node** %rttree, align 8, !tbaa !0
  %asm_written_flag = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %3 = bitcast [4 x i8]* %asm_written_flag to i32*
  %bf.load5 = load i32* %3, align 8
  %bf.clear6 = and i32 %bf.load5, 16384
  %tobool7 = icmp eq i32 %bf.clear6, 0
  br i1 %tobool7, label %if.end, label %if.then8

if.then8:                                         ; preds = %if.then2
  %call = tail call %union.tree_node* @copy_node(%union.tree_node* %2) #10
  %4 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 7
  %5 = load %union.tree_node** %4, align 8, !tbaa !0
  %tobool10 = icmp eq %union.tree_node* %5, null
  %. = select i1 %tobool10, %union.tree_node* %2, %union.tree_node* %5
  %6 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 7
  store %union.tree_node* %., %union.tree_node** %6, align 8, !tbaa !0
  %7 = getelementptr inbounds %union.tree_node* %., i64 0, i32 0, i32 8
  %8 = load %union.tree_node** %7, align 8, !tbaa !0
  %9 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 8
  store %union.tree_node* %8, %union.tree_node** %9, align 8, !tbaa !0
  store %union.tree_node* %call, %union.tree_node** %7, align 8, !tbaa !0
  %10 = getelementptr inbounds %union.rtunion_def* %arrayidx4, i64 0, i32 0
  %call.c = ptrtoint %union.tree_node* %call to i64
  store i64 %call.c, i64* %10, align 8, !tbaa !0
  %asm_written_flag25.phi.trans.insert = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2
  %.phi.trans.insert = bitcast [4 x i8]* %asm_written_flag25.phi.trans.insert to i32*
  %bf.load26.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then8
  %bf.load26 = phi i32 [ %bf.load26.pre, %if.then8 ], [ %bf.load5, %if.then2 ]
  %block.0 = phi %union.tree_node* [ %call, %if.then8 ], [ %2, %if.then2 ]
  %11 = getelementptr inbounds %union.tree_node* %block.0, i64 0, i32 0, i32 4
  store %union.tree_node* null, %union.tree_node** %11, align 8, !tbaa !0
  %asm_written_flag25 = getelementptr inbounds %union.tree_node* %block.0, i64 0, i32 0, i32 0, i32 2
  %12 = bitcast [4 x i8]* %asm_written_flag25 to i32*
  %bf.set = or i32 %bf.load26, 16384
  store i32 %bf.set, i32* %12, align 8
  %supercontext = getelementptr inbounds %union.tree_node* %block.0, i64 0, i32 0, i32 5
  %13 = bitcast [8 x i8]* %supercontext to %union.tree_node**
  store %union.tree_node* %current_block.addr.0152, %union.tree_node** %13, align 8, !tbaa !0
  %14 = getelementptr inbounds %union.tree_node* %current_block.addr.0152, i64 0, i32 0, i32 4
  %15 = load %union.tree_node** %14, align 8, !tbaa !0
  %chain = getelementptr inbounds %union.tree_node* %block.0, i64 0, i32 0, i32 0, i32 0
  store %union.tree_node* %15, %union.tree_node** %chain, align 8, !tbaa !0
  store %union.tree_node* %block.0, %union.tree_node** %14, align 8, !tbaa !0
  %16 = load %struct.varray_head_tag** %p_block_stack, align 8, !tbaa !0
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 1
  %17 = load i64* %elements_used, align 8, !tbaa !5
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 0
  %18 = load i64* %num_elements, align 8, !tbaa !5
  %cmp34 = icmp ult i64 %17, %18
  br i1 %cmp34, label %if.end38, label %if.then35

if.then35:                                        ; preds = %if.end
  %mul = shl i64 %18, 1
  %call37 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %16, i64 %mul) #10
  store %struct.varray_head_tag* %call37, %struct.varray_head_tag** %p_block_stack, align 8, !tbaa !0
  %elements_used39.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call37, i64 0, i32 1
  %.pre = load i64* %elements_used39.phi.trans.insert, align 8, !tbaa !5
  br label %if.end38

if.end38:                                         ; preds = %if.end, %if.then35
  %19 = phi i64 [ %17, %if.end ], [ %.pre, %if.then35 ]
  %20 = phi %struct.varray_head_tag* [ %16, %if.end ], [ %call37, %if.then35 ]
  %elements_used39 = getelementptr inbounds %struct.varray_head_tag* %20, i64 0, i32 1
  %inc = add i64 %19, 1
  store i64 %inc, i64* %elements_used39, align 8, !tbaa !5
  %data = getelementptr inbounds %struct.varray_head_tag* %20, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %19
  store %union.tree_node* %block.0, %union.tree_node** %arrayidx40, align 8, !tbaa !0
  br label %for.inc

if.then45:                                        ; preds = %if.then
  %21 = load %struct.varray_head_tag** %p_block_stack, align 8, !tbaa !0
  %elements_used46 = getelementptr inbounds %struct.varray_head_tag* %21, i64 0, i32 1
  %22 = load i64* %elements_used46, align 8, !tbaa !5
  %sub = add i64 %22, -1
  %data47 = getelementptr inbounds %struct.varray_head_tag* %21, i64 0, i32 4
  %tree48 = bitcast %union.varray_data_tag* %data47 to [1 x %union.tree_node*]*
  %arrayidx49 = getelementptr inbounds [1 x %union.tree_node*]* %tree48, i64 0, i64 %sub
  %23 = load %union.tree_node** %arrayidx49, align 8, !tbaa !0
  %24 = getelementptr inbounds %struct.rtx_def* %insn.0151, i64 0, i32 1, i64 3, i32 0
  %.c = ptrtoint %union.tree_node* %23 to i64
  store i64 %.c, i64* %24, align 8, !tbaa !0
  %25 = load %struct.varray_head_tag** %p_block_stack, align 8, !tbaa !0
  %elements_used53 = getelementptr inbounds %struct.varray_head_tag* %25, i64 0, i32 1
  %26 = load i64* %elements_used53, align 8, !tbaa !5
  %dec = add i64 %26, -1
  store i64 %dec, i64* %elements_used53, align 8, !tbaa !5
  %27 = getelementptr inbounds %union.tree_node* %current_block.addr.0152, i64 0, i32 0, i32 4
  %28 = load %union.tree_node** %27, align 8, !tbaa !0
  %tobool7.i = icmp eq %union.tree_node* %28, null
  br i1 %tobool7.i, label %blocks_nreverse.exit, label %for.body.i

for.body.i:                                       ; preds = %if.then45, %for.body.i
  %prev.09.i = phi %union.tree_node* [ %decl.08.i, %for.body.i ], [ null, %if.then45 ]
  %decl.08.i = phi %union.tree_node* [ %29, %for.body.i ], [ %28, %if.then45 ]
  %chain.i = getelementptr inbounds %union.tree_node* %decl.08.i, i64 0, i32 0, i32 0, i32 0
  %29 = load %union.tree_node** %chain.i, align 8, !tbaa !0
  store %union.tree_node* %prev.09.i, %union.tree_node** %chain.i, align 8, !tbaa !0
  %tobool.i = icmp eq %union.tree_node* %29, null
  br i1 %tobool.i, label %blocks_nreverse.exit, label %for.body.i

blocks_nreverse.exit:                             ; preds = %for.body.i, %if.then45
  %prev.0.lcssa.i = phi %union.tree_node* [ null, %if.then45 ], [ %decl.08.i, %for.body.i ]
  store %union.tree_node* %prev.0.lcssa.i, %union.tree_node** %27, align 8, !tbaa !0
  %supercontext60 = getelementptr inbounds %union.tree_node* %current_block.addr.0152, i64 0, i32 0, i32 5
  %30 = bitcast [8 x i8]* %supercontext60 to %union.tree_node**
  %31 = load %union.tree_node** %30, align 8, !tbaa !0
  br label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %arrayidx68 = getelementptr inbounds %struct.rtx_def* %insn.0151, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**
  %32 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %33 = bitcast %struct.rtx_def* %32 to i32*
  %bf.load69 = load i32* %33, align 8
  %bf.clear70 = and i32 %bf.load69, 65535
  %cmp71 = icmp eq i32 %bf.clear70, 141
  br i1 %cmp71, label %if.then72, label %for.inc

if.then72:                                        ; preds = %land.lhs.true
  %fld76 = getelementptr inbounds %struct.rtx_def* %32, i64 0, i32 1
  %rtx78 = bitcast [1 x %union.rtunion_def]* %fld76 to %struct.rtx_def**
  %34 = load %struct.rtx_def** %rtx78, align 8, !tbaa !0
  tail call fastcc void @reorder_blocks_1(%struct.rtx_def* %34, %union.tree_node* %current_block.addr.0152, %struct.varray_head_tag** %p_block_stack) #9
  %arrayidx80 = getelementptr inbounds %struct.rtx_def* %32, i64 0, i32 1, i64 1
  %rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**
  %35 = load %struct.rtx_def** %rtx81, align 8, !tbaa !0
  %tobool82 = icmp eq %struct.rtx_def* %35, null
  br i1 %tobool82, label %if.end87, label %if.then83

if.then83:                                        ; preds = %if.then72
  tail call fastcc void @reorder_blocks_1(%struct.rtx_def* %35, %union.tree_node* %current_block.addr.0152, %struct.varray_head_tag** %p_block_stack) #9
  br label %if.end87

if.end87:                                         ; preds = %if.then72, %if.then83
  %arrayidx89 = getelementptr inbounds %struct.rtx_def* %32, i64 0, i32 1, i64 2
  %rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**
  %36 = load %struct.rtx_def** %rtx90, align 8, !tbaa !0
  %tobool91 = icmp eq %struct.rtx_def* %36, null
  br i1 %tobool91, label %for.inc, label %if.then92

if.then92:                                        ; preds = %if.end87
  tail call fastcc void @reorder_blocks_1(%struct.rtx_def* %36, %union.tree_node* %current_block.addr.0152, %struct.varray_head_tag** %p_block_stack) #9
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then, %if.end87, %blocks_nreverse.exit, %if.end38, %if.then92, %land.lhs.true
  %current_block.addr.1 = phi %union.tree_node* [ %block.0, %if.end38 ], [ %31, %blocks_nreverse.exit ], [ %current_block.addr.0152, %if.then92 ], [ %current_block.addr.0152, %if.end87 ], [ %current_block.addr.0152, %land.lhs.true ], [ %current_block.addr.0152, %if.then ], [ %current_block.addr.0152, %for.body ]
  %arrayidx100 = getelementptr inbounds %struct.rtx_def* %insn.0151, i64 0, i32 1, i64 2
  %rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**
  %37 = load %struct.rtx_def** %rtx101, align 8, !tbaa !0
  %tobool = icmp eq %struct.rtx_def* %37, null
  br i1 %tobool, label %for.end, label %for.body

for.end:                                          ; preds = %for.inc, %entry
  ret void
}
