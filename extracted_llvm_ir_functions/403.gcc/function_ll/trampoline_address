define %struct.rtx_def* @trampoline_address(%union.tree_node* %function) #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !0
  %x_trampoline_list = getelementptr inbounds %struct.function* %0, i64 0, i32 34
  %link.097 = load %union.tree_node** %x_trampoline_list, align 8
  %tobool98 = icmp eq %union.tree_node* %link.097, null
  br i1 %tobool98, label %for.cond3.preheader, label %for.body

for.cond:                                         ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node* %link.099, i64 0, i32 0, i32 0, i32 0
  %link.0 = load %union.tree_node** %chain, align 8
  %tobool = icmp eq %union.tree_node* %link.0, null
  br i1 %tobool, label %for.cond3.preheader, label %for.body

for.cond3.preheader:                              ; preds = %for.cond, %entry
  %fp.093 = load %struct.function** @outer_function_chain, align 8
  %tobool494 = icmp eq %struct.function* %fp.093, null
  br i1 %tobool494, label %for.end30, label %for.body5

for.body:                                         ; preds = %entry, %for.cond
  %link.099 = phi %union.tree_node* [ %link.0, %for.cond ], [ %link.097, %entry ]
  %purpose = getelementptr inbounds %union.tree_node* %link.099, i64 0, i32 0, i32 1
  %1 = load i8** %purpose, align 8
  %2 = bitcast i8* %1 to %union.tree_node*
  %cmp = icmp eq %union.tree_node* %2, %function
  br i1 %cmp, label %if.then, label %for.cond

if.then:                                          ; preds = %for.body
  %value = getelementptr inbounds %union.tree_node* %link.099, i64 0, i32 0, i32 2
  %3 = bitcast i32* %value to %union.tree_node**
  %4 = load %union.tree_node** %3, align 8, !tbaa !0
  %operands = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %5 = bitcast i32* %arrayidx to %struct.rtx_def**
  %6 = load %struct.rtx_def** %5, align 8, !tbaa !0
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %call.i = tail call fastcc %struct.rtx_def* @round_trampoline_addr(%struct.rtx_def* %7) #10
  br label %return

for.body5:                                        ; preds = %for.cond3.preheader, %for.inc29
  %fp.095 = phi %struct.function* [ %fp.0, %for.inc29 ], [ %fp.093, %for.cond3.preheader ]
  %x_trampoline_list6 = getelementptr inbounds %struct.function* %fp.095, i64 0, i32 34
  %link.190 = load %union.tree_node** %x_trampoline_list6, align 8
  %tobool891 = icmp eq %union.tree_node* %link.190, null
  br i1 %tobool891, label %for.inc29, label %for.body9

for.cond7:                                        ; preds = %for.body9
  %chain27 = getelementptr inbounds %union.tree_node* %link.192, i64 0, i32 0, i32 0, i32 0
  %link.1 = load %union.tree_node** %chain27, align 8
  %tobool8 = icmp eq %union.tree_node* %link.1, null
  br i1 %tobool8, label %for.inc29, label %for.body9

for.body9:                                        ; preds = %for.body5, %for.cond7
  %link.192 = phi %union.tree_node* [ %link.1, %for.cond7 ], [ %link.190, %for.body5 ]
  %purpose11 = getelementptr inbounds %union.tree_node* %link.192, i64 0, i32 0, i32 1
  %8 = load i8** %purpose11, align 8
  %9 = bitcast i8* %8 to %union.tree_node*
  %cmp12 = icmp eq %union.tree_node* %9, %function
  br i1 %cmp12, label %if.then13, label %for.cond7

if.then13:                                        ; preds = %for.body9
  %value15 = getelementptr inbounds %union.tree_node* %link.192, i64 0, i32 0, i32 2
  %10 = bitcast i32* %value15 to %union.tree_node**
  %11 = load %union.tree_node** %10, align 8, !tbaa !0
  %operands17 = getelementptr inbounds %union.tree_node* %11, i64 0, i32 0, i32 2
  %arrayidx18 = getelementptr inbounds i32* %operands17, i64 2
  %12 = bitcast i32* %arrayidx18 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %12, align 8, !tbaa !0
  %arrayidx20 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 0
  %rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx21, align 8, !tbaa !0
  %call22 = tail call %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %14, %union.tree_node* %function) #9
  %call.i87 = tail call fastcc %struct.rtx_def* @round_trampoline_addr(%struct.rtx_def* %call22) #10
  br label %return

for.inc29:                                        ; preds = %for.cond7, %for.body5
  %outer = getelementptr inbounds %struct.function* %fp.095, i64 0, i32 7
  %fp.0 = load %struct.function** %outer, align 8
  %tobool4 = icmp eq %struct.function* %fp.0, null
  br i1 %tobool4, label %for.end30, label %for.body5

for.end30:                                        ; preds = %for.inc29, %for.cond3.preheader
  %call31 = tail call %union.tree_node* @decl_function_context(%union.tree_node* %function) #10
  %15 = load %union.tree_node** @current_function_decl, align 8, !tbaa !0
  %cmp32 = icmp eq %union.tree_node* %call31, %15
  %16 = load %union.tree_node** @inline_function_decl, align 8, !tbaa !0
  %cmp33 = icmp eq %union.tree_node* %call31, %16
  %or.cond = or i1 %cmp32, %cmp33
  br i1 %or.cond, label %if.end36, label %if.then34

if.then34:                                        ; preds = %for.end30
  %call35 = tail call %struct.function* @find_function_data(%union.tree_node* %call31) #9
  br label %if.end36

if.end36:                                         ; preds = %for.end30, %if.then34
  %fp.1 = phi %struct.function* [ %call35, %if.then34 ], [ null, %for.end30 ]
  %17 = load i32* @target_flags, align 4, !tbaa !4
  %and = and i32 %17, 33554432
  %tobool37 = icmp ne i32 %and, 0
  %conv = select i1 %tobool37, i64 24, i64 11
  %tobool38 = icmp ne %struct.function* %fp.1, null
  %18 = load %struct.function** @cfun, align 8, !tbaa !0
  %cond39 = select i1 %tobool38, %struct.function* %fp.1, %struct.function* %18
  %call40 = tail call fastcc %struct.rtx_def* @assign_stack_local_1(i32 51, i64 %conv, i32 0, %struct.function* %cond39) #9
  %call44 = tail call %union.tree_node* @make_node(i32 120) #10
  %operands46 = getelementptr inbounds %union.tree_node* %call44, i64 0, i32 0, i32 2
  %arrayidx47 = getelementptr inbounds i32* %operands46, i64 2
  %19 = bitcast i32* %arrayidx47 to %struct.rtx_def**
  store %struct.rtx_def* %call40, %struct.rtx_def** %19, align 8, !tbaa !0
  br i1 %tobool38, label %if.then43, label %if.else

if.then43:                                        ; preds = %if.end36
  %x_trampoline_list48 = getelementptr inbounds %struct.function* %fp.1, i64 0, i32 34
  %20 = load %union.tree_node** %x_trampoline_list48, align 8, !tbaa !0
  %call49 = tail call %union.tree_node* @tree_cons(%union.tree_node* %function, %union.tree_node* %call44, %union.tree_node* %20) #10
  store %union.tree_node* %call49, %union.tree_node** %x_trampoline_list48, align 8, !tbaa !0
  br label %if.end58

if.else:                                          ; preds = %if.end36
  %21 = load %struct.function** @cfun, align 8, !tbaa !0
  %x_trampoline_list55 = getelementptr inbounds %struct.function* %21, i64 0, i32 34
  %22 = load %union.tree_node** %x_trampoline_list55, align 8, !tbaa !0
  %call56 = tail call %union.tree_node* @tree_cons(%union.tree_node* %function, %union.tree_node* %call44, %union.tree_node* %22) #10
  %23 = load %struct.function** @cfun, align 8, !tbaa !0
  %x_trampoline_list57 = getelementptr inbounds %struct.function* %23, i64 0, i32 34
  store %union.tree_node* %call56, %union.tree_node** %x_trampoline_list57, align 8, !tbaa !0
  br label %if.end58

if.end58:                                         ; preds = %if.else, %if.then43
  %arrayidx60 = getelementptr inbounds %struct.rtx_def* %call40, i64 0, i32 1, i64 0
  %rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**
  %24 = load %struct.rtx_def** %rtx61, align 8, !tbaa !0
  %call62 = tail call %struct.rtx_def* @fix_lexical_addr(%struct.rtx_def* %24, %union.tree_node* %function) #9
  %call.i88 = tail call fastcc %struct.rtx_def* @round_trampoline_addr(%struct.rtx_def* %call62) #10
  br label %return

return:                                           ; preds = %if.end58, %if.then13, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call.i, %if.then ], [ %call.i87, %if.then13 ], [ %call.i88, %if.end58 ]
  ret %struct.rtx_def* %retval.0
}
