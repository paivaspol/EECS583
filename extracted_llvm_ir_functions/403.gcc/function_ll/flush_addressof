define void @flush_addressof(%union.tree_node* %decl) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%union.tree_node* %decl}, i64 0, metadata !1463), !dbg !3301
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2, !dbg !3302
  %0 = bitcast [4 x i8]* %code to i32*, !dbg !3302
  %bf.load = load i32* %0, align 8, !dbg !3302
  %bf.clear = and i32 %bf.load, 255, !dbg !3302
  %bf.clear.off = add i32 %bf.clear, -34, !dbg !3302
  %switch = icmp ult i32 %bf.clear.off, 2, !dbg !3302
  br i1 %switch, label %land.lhs.true, label %if.end, !dbg !3302

land.lhs.true:                                    ; preds = %entry
  %rtl = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 17, !dbg !3302
  %1 = load %struct.rtx_def** %rtl, align 8, !dbg !3302, !tbaa !2729
  %tobool = icmp eq %struct.rtx_def* %1, null, !dbg !3302
  br i1 %tobool, label %cond.end, label %cond.end22, !dbg !3302

cond.end:                                         ; preds = %land.lhs.true
  tail call void @make_decl_rtl(%union.tree_node* %decl, i8* null) #11, !dbg !3303
  %2 = load %struct.rtx_def** %rtl, align 8, !dbg !3303, !tbaa !2729
  %cmp11 = icmp eq %struct.rtx_def* %2, null, !dbg !3303
  br i1 %cmp11, label %if.end, label %cond.end22, !dbg !3303

cond.end22:                                       ; preds = %land.lhs.true, %cond.end
  %3 = phi %struct.rtx_def* [ %2, %cond.end ], [ %1, %land.lhs.true ], !dbg !3304
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3304
  %bf.load24 = load i32* %4, align 8, !dbg !3304
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !3304
  %cmp26 = icmp eq i32 %bf.clear25, 66, !dbg !3304
  br i1 %cmp26, label %cond.end37, label %if.end, !dbg !3304

cond.end37:                                       ; preds = %cond.end22
  %arrayidx = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0, !dbg !3305
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3305
  %5 = load %struct.rtx_def** %rtx, align 8, !dbg !3305, !tbaa !2729
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3305
  %bf.load39 = load i32* %6, align 8, !dbg !3305
  %bf.clear40 = and i32 %bf.load39, 65535, !dbg !3305
  %cmp41 = icmp eq i32 %bf.clear40, 70, !dbg !3305
  br i1 %cmp41, label %cond.end52, label %if.end, !dbg !3305

cond.end52:                                       ; preds = %cond.end37
  %arrayidx58 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0, !dbg !3306
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**, !dbg !3306
  %7 = load %struct.rtx_def** %rtx59, align 8, !dbg !3306, !tbaa !2729
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !3306
  %bf.load60 = load i32* %8, align 8, !dbg !3306
  %bf.clear61 = and i32 %bf.load60, 65535, !dbg !3306
  %cmp62 = icmp eq i32 %bf.clear61, 61, !dbg !3306
  br i1 %cmp62, label %cond.end72, label %if.end, !dbg !3306

cond.end72:                                       ; preds = %cond.end52
  tail call fastcc void @put_addressof_into_stack(%struct.rtx_def* %5, %struct.hash_table* null) #10, !dbg !3307
  br label %if.end, !dbg !3307

if.end:                                           ; preds = %entry, %cond.end, %cond.end72, %cond.end52, %cond.end37, %cond.end22
  ret void, !dbg !3308
}
