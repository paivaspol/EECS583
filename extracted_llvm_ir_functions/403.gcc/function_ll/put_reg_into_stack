define internal fastcc void @put_reg_into_stack(%struct.function* %function, %struct.rtx_def* %reg, %union.tree_node* %type, i32 %promoted_mode, i32 %decl_mode, i32 %volatile_p, i32 %original_regno, i32 %used_p, %struct.hash_table* %ht) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.function* %function}, i64 0, metadata !2659), !dbg !3249
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %reg}, i64 0, metadata !2660), !dbg !3250
  tail call void @llvm.dbg.value(metadata !{%union.tree_node* %type}, i64 0, metadata !2661), !dbg !3251
  tail call void @llvm.dbg.value(metadata !{i32 %promoted_mode}, i64 0, metadata !2662), !dbg !3252
  tail call void @llvm.dbg.value(metadata !{i32 %decl_mode}, i64 0, metadata !2663), !dbg !3252
  tail call void @llvm.dbg.value(metadata !{i32 %volatile_p}, i64 0, metadata !2664), !dbg !3253
  tail call void @llvm.dbg.value(metadata !{i32 %original_regno}, i64 0, metadata !2665), !dbg !3254
  tail call void @llvm.dbg.value(metadata !{i32 %used_p}, i64 0, metadata !2666), !dbg !3255
  tail call void @llvm.dbg.value(metadata !{%struct.hash_table* %ht}, i64 0, metadata !2667), !dbg !3256
  %tobool = icmp ne %struct.function* %function, null, !dbg !3257
  %0 = load %struct.function** @cfun, align 8, !dbg !3257, !tbaa !2729
  %cond = select i1 %tobool, %struct.function* %function, %struct.function* %0, !dbg !3257
  tail call void @llvm.dbg.value(metadata !{%struct.function* %cond}, i64 0, metadata !2668), !dbg !3257
  tail call void @llvm.dbg.value(metadata !3258, i64 0, metadata !2669), !dbg !3259
  tail call void @llvm.dbg.value(metadata !{i32 %original_regno}, i64 0, metadata !2670), !dbg !3260
  %cmp = icmp eq i32 %original_regno, 0, !dbg !3261
  br i1 %cmp, label %if.then, label %if.end, !dbg !3261

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0, !dbg !3262
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !3262
  %1 = load i32* %rtuint, align 4, !dbg !3262, !tbaa !2768
  tail call void @llvm.dbg.value(metadata !{i32 %1}, i64 0, metadata !2670), !dbg !3262
  br label %if.end, !dbg !3262

if.end:                                           ; preds = %if.then, %entry
  %regno.0 = phi i32 [ %1, %if.then ], [ %original_regno, %entry ]
  %x_max_parm_reg = getelementptr inbounds %struct.function* %cond, i64 0, i32 37, !dbg !3263
  %2 = load i32* %x_max_parm_reg, align 4, !dbg !3263, !tbaa !2768
  %cmp1 = icmp ult i32 %regno.0, %2, !dbg !3263
  br i1 %cmp1, label %if.end4, label %if.then6, !dbg !3263

if.end4:                                          ; preds = %if.end
  %idxprom = zext i32 %regno.0 to i64, !dbg !3264
  %x_parm_reg_stack_loc = getelementptr inbounds %struct.function* %cond, i64 0, i32 38, !dbg !3264
  %3 = load %struct.rtx_def*** %x_parm_reg_stack_loc, align 8, !dbg !3264, !tbaa !2729
  %arrayidx3 = getelementptr inbounds %struct.rtx_def** %3, i64 %idxprom, !dbg !3264
  %4 = load %struct.rtx_def** %arrayidx3, align 8, !dbg !3264, !tbaa !2729
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %4}, i64 0, metadata !2669), !dbg !3264
  %cmp5 = icmp eq %struct.rtx_def* %4, null, !dbg !3265
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !3265

if.then6:                                         ; preds = %if.end, %if.end4
  %idxprom7 = sext i32 %decl_mode to i64, !dbg !3266
  %arrayidx8 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom7, !dbg !3266
  %5 = load i8* %arrayidx8, align 1, !dbg !3266, !tbaa !2730
  %conv = zext i8 %5 to i64, !dbg !3266
  %call = tail call fastcc %struct.rtx_def* @assign_stack_local_1(i32 %decl_mode, i64 %conv, i32 0, %struct.function* %cond) #10, !dbg !3266
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %call}, i64 0, metadata !2669), !dbg !3266
  br label %if.end9, !dbg !3266

if.end9:                                          ; preds = %if.then6, %if.end4
  %new.1 = phi %struct.rtx_def* [ %call, %if.then6 ], [ %4, %if.end4 ]
  %6 = bitcast %struct.rtx_def* %reg to i32*, !dbg !3267
  %bf.load = load i32* %6, align 8, !dbg !3267
  %bf.clear = and i32 %bf.load, -16777216, !dbg !3267
  %bf.value = shl i32 %decl_mode, 16, !dbg !3268
  %bf.shl = and i32 %bf.value, 16711680, !dbg !3268
  %bf.set = or i32 %bf.shl, %bf.clear, !dbg !3268
  %bf.set12 = or i32 %bf.set, 66, !dbg !3268
  store i32 %bf.set12, i32* %6, align 8, !dbg !3268
  %arrayidx14 = getelementptr inbounds %struct.rtx_def* %new.1, i64 0, i32 1, i64 0, !dbg !3269
  %rtx = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !3269
  %7 = load %struct.rtx_def** %rtx, align 8, !dbg !3269, !tbaa !2729
  %8 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0, i32 0, !dbg !3269
  %.c = ptrtoint %struct.rtx_def* %7 to i64, !dbg !3269
  store i64 %.c, i64* %8, align 8, !dbg !3269, !tbaa !2729
  %9 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 1, i32 0, !dbg !3270
  store i64 0, i64* %9, align 8, !dbg !3270, !tbaa !2729
  %bf.value21 = shl i32 %volatile_p, 27, !dbg !3271
  %bf.shl22 = and i32 %bf.value21, 134217728, !dbg !3271
  %bf.clear23 = and i32 %bf.set12, -134283198, !dbg !3271
  %bf.set24 = or i32 %bf.clear23, %bf.shl22, !dbg !3271
  store i32 %bf.set24, i32* %6, align 8, !dbg !3271
  %tobool25 = icmp eq %union.tree_node* %type, null, !dbg !3272
  br i1 %tobool25, label %if.end75, label %do.body, !dbg !3272

do.body:                                          ; preds = %if.end9
  %code = getelementptr inbounds %union.tree_node* %type, i64 0, i32 0, i32 0, i32 2, !dbg !3273
  %10 = bitcast [4 x i8]* %code to i32*, !dbg !3273
  %bf.load27 = load i32* %10, align 8, !dbg !3273
  %bf.clear28 = and i32 %bf.load27, 255, !dbg !3273
  %bf.clear28.off = add i32 %bf.clear28, -18, !dbg !3273
  %switch = icmp ult i32 %bf.clear28.off, 5, !dbg !3273
  br i1 %switch, label %if.then62, label %lor.lhs.false58, !dbg !3273

lor.lhs.false58:                                  ; preds = %do.body
  %11 = bitcast %struct.rtx_def* %new.1 to i32*, !dbg !3273
  %bf.load59 = load i32* %11, align 8, !dbg !3273
  %bf.clear60 = and i32 %bf.load59, 268435456, !dbg !3273
  %tobool61 = icmp eq i32 %bf.clear60, 0, !dbg !3273
  br i1 %tobool61, label %if.else, label %if.then62, !dbg !3273

if.then62:                                        ; preds = %do.body, %lor.lhs.false58
  %bf.set65 = and i32 %bf.set24, 1878982722, !dbg !3276
  %bf.clear67 = or i32 %bf.set65, 268435456, !dbg !3276
  br label %do.end, !dbg !3276

if.else:                                          ; preds = %lor.lhs.false58
  %bf.clear71 = and i32 %bf.set24, 1878982722, !dbg !3278
  %bf.set72 = or i32 %bf.clear71, -2147483648, !dbg !3278
  br label %do.end

do.end:                                           ; preds = %if.then62, %if.else
  %storemerge = phi i32 [ %bf.set72, %if.else ], [ %bf.clear67, %if.then62 ]
  store i32 %storemerge, i32* %6, align 8, !dbg !3276
  %call74 = tail call i64 @get_alias_set(%union.tree_node* %type) #11, !dbg !3280
  tail call void @set_mem_alias_set(%struct.rtx_def* %reg, i64 %call74) #11, !dbg !3280
  br label %if.end75, !dbg !3281

if.end75:                                         ; preds = %if.end9, %do.end
  %tobool76 = icmp eq i32 %used_p, 0, !dbg !3282
  br i1 %tobool76, label %if.end78, label %if.then77, !dbg !3282

if.then77:                                        ; preds = %if.end75
  tail call fastcc void @schedule_fixup_var_refs(%struct.function* %function, %struct.rtx_def* %reg, %union.tree_node* %type, i32 %promoted_mode, %struct.hash_table* %ht) #10, !dbg !3283
  br label %if.end78, !dbg !3283

if.end78:                                         ; preds = %if.end75, %if.then77
  ret void, !dbg !3284
}
