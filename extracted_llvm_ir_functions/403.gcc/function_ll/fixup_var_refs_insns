define internal fastcc void @fixup_var_refs_insns(%struct.rtx_def* %insn, %struct.rtx_def* %var, i32 %promoted_mode, i32 %unsignedp, i32 %toplevel, %struct.rtx_def* %may_share) #0 {
entry:
  %tobool50 = icmp eq %struct.rtx_def* %insn, null
  br i1 %tobool50, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.cond.backedge
  %insn.addr.051 = phi %struct.rtx_def* [ %0, %while.cond.backedge ], [ %insn, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %insn.addr.051, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %1 = bitcast %struct.rtx_def* %insn.addr.051 to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 34
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %insn.addr.051, i64 0, i32 1, i64 3
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx3, align 8, !tbaa !0
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load4 = load i32* %3, align 8
  %bf.clear5 = and i32 %bf.load4, 65535
  %cmp6 = icmp eq i32 %bf.clear5, 141
  br i1 %cmp6, label %for.body, label %if.else

for.body:                                         ; preds = %land.lhs.true, %for.inc.for.body_crit_edge
  %4 = phi %struct.rtx_def* [ %.pre, %for.inc.for.body_crit_edge ], [ %2, %land.lhs.true ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.for.body_crit_edge ], [ 0, %land.lhs.true ]
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 %indvars.iv
  %rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx13, align 8, !tbaa !0
  %tobool14 = icmp eq %struct.rtx_def* %5, null
  br i1 %tobool14, label %for.inc, label %if.then15

if.then15:                                        ; preds = %for.body
  tail call void @push_to_sequence(%struct.rtx_def* %5) #10
  tail call fastcc void @fixup_var_refs_insns(%struct.rtx_def* %5, %struct.rtx_def* %var, i32 %promoted_mode, i32 %unsignedp, i32 0, %struct.rtx_def* %may_share) #9
  %call = tail call %struct.rtx_def* @get_insns() #10
  %6 = load %struct.rtx_def** %rtx3, align 8, !tbaa !0
  %7 = getelementptr inbounds %struct.rtx_def* %6, i64 0, i32 1, i64 %indvars.iv, i32 0
  %call.c = ptrtoint %struct.rtx_def* %call to i64
  store i64 %call.c, i64* %7, align 8, !tbaa !0
  tail call void @end_sequence() #10
  br label %for.inc

for.inc:                                          ; preds = %for.body, %if.then15
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 3
  br i1 %exitcond, label %while.cond.backedge, label %for.inc.for.body_crit_edge

for.inc.for.body_crit_edge:                       ; preds = %for.inc
  %.pre = load %struct.rtx_def** %rtx3, align 8, !tbaa !0
  br label %for.body

if.else:                                          ; preds = %land.lhs.true, %while.body
  %idxprom2548 = zext i32 %bf.clear to i64
  %arrayidx26 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom2548
  %8 = load i8* %arrayidx26, align 1, !tbaa !1
  %cmp27 = icmp eq i8 %8, 105
  br i1 %cmp27, label %if.then29, label %while.cond.backedge

while.cond.backedge:                              ; preds = %for.inc, %if.else, %if.then29
  %tobool = icmp eq %struct.rtx_def* %0, null
  br i1 %tobool, label %while.end, label %while.body

if.then29:                                        ; preds = %if.else
  tail call fastcc void @fixup_var_refs_insn(%struct.rtx_def* %insn.addr.051, %struct.rtx_def* %var, i32 %promoted_mode, i32 %unsignedp, i32 %toplevel, %struct.rtx_def* %may_share) #9
  br label %while.cond.backedge

while.end:                                        ; preds = %while.cond.backedge, %entry
  ret void
}
