define %struct.rtx_def* @assign_temp(%union.tree_node* %type_or_decl, i32 %keep, i32 %memory_required, i32 %dont_promote) #0 {
entry:
  %unsignedp = alloca i32, align 4
  %code = getelementptr inbounds %union.tree_node* %type_or_decl, i64 0, i32 0, i32 0, i32 2
  %0 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 255
  %idxprom81 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom81
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp = icmp eq i8 %1, 100
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %type3 = getelementptr inbounds %union.tree_node* %type_or_decl, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type3, align 8, !tbaa !0
  %unsigned_flag.phi.trans.insert = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %.phi.trans.insert = bitcast [4 x i8]* %unsigned_flag.phi.trans.insert to i32*
  %bf.load9.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %bf.load9 = phi i32 [ %bf.load9.pre, %if.then ], [ %bf.load, %entry ]
  %type.0 = phi %union.tree_node* [ %2, %if.then ], [ %type_or_decl, %entry ]
  %decl.0 = phi %union.tree_node* [ %type_or_decl, %if.then ], [ null, %entry ]
  %type4 = bitcast %union.tree_node* %type.0 to %struct.tree_type*
  %mode5 = getelementptr inbounds %struct.tree_type* %type4, i64 0, i32 6
  %3 = bitcast [4 x i8]* %mode5 to i32*
  %bf.load6 = load i32* %3, align 4
  %bf.lshr = lshr i32 %bf.load6, 9
  %bf.clear7 = and i32 %bf.lshr, 127
  %unsigned_flag = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast [4 x i8]* %unsigned_flag to i32*
  %bf.lshr10 = lshr i32 %bf.load9, 13
  %bf.clear11 = and i32 %bf.lshr10, 1
  store i32 %bf.clear11, i32* %unsignedp, align 4, !tbaa !4
  %cmp12 = icmp ne i32 %bf.clear7, 51
  %tobool = icmp eq i32 %memory_required, 0
  %or.cond = and i1 %cmp12, %tobool
  br i1 %or.cond, label %if.end56, label %if.then14

if.then14:                                        ; preds = %if.end
  %call = call i64 @int_size_in_bytes(%union.tree_node* %type.0) #10
  %cmp15 = icmp eq i64 %call, 0
  %.call = select i1 %cmp15, i64 1, i64 %call
  %cmp19 = icmp eq i64 %.call, -1
  br i1 %cmp19, label %land.lhs.true, label %if.end54

land.lhs.true:                                    ; preds = %if.then14
  %bf.load23 = load i32* %4, align 8
  %bf.clear24 = and i32 %bf.load23, 255
  %cmp25 = icmp eq i32 %bf.clear24, 18
  br i1 %cmp25, label %land.lhs.true27, label %if.end40

land.lhs.true27:                                  ; preds = %land.lhs.true
  %5 = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 13
  %6 = load %union.tree_node** %5, align 8, !tbaa !0
  %cmp29 = icmp eq %union.tree_node* %6, null
  br i1 %cmp29, label %if.end40, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %land.lhs.true27
  %call34 = call i32 @host_integerp(%union.tree_node* %6, i32 1) #10
  %tobool35 = icmp eq i32 %call34, 0
  br i1 %tobool35, label %if.end40, label %if.then36

if.then36:                                        ; preds = %land.lhs.true31
  %7 = load %union.tree_node** %5, align 8, !tbaa !0
  %call39 = call i64 @tree_low_cst(%union.tree_node* %7, i32 1) #10
  br label %if.end40

if.end40:                                         ; preds = %land.lhs.true31, %land.lhs.true27, %if.then36, %land.lhs.true
  %size.0 = phi i64 [ %call39, %if.then36 ], [ -1, %land.lhs.true31 ], [ -1, %land.lhs.true27 ], [ -1, %land.lhs.true ]
  %tobool41 = icmp ne %union.tree_node* %decl.0, null
  %cmp43 = icmp eq i64 %size.0, -1
  %or.cond82 = and i1 %tobool41, %cmp43
  br i1 %or.cond82, label %land.lhs.true45, label %if.end54

land.lhs.true45:                                  ; preds = %if.end40
  %8 = getelementptr inbounds %union.tree_node* %type.0, i64 0, i32 0, i32 4
  %9 = load %union.tree_node** %8, align 8, !tbaa !0
  %code48 = getelementptr inbounds %union.tree_node* %9, i64 0, i32 0, i32 0, i32 2
  %10 = bitcast [4 x i8]* %code48 to i32*
  %bf.load49 = load i32* %10, align 8
  %bf.clear50 = and i32 %bf.load49, 255
  %cmp51 = icmp eq i32 %bf.clear50, 25
  br i1 %cmp51, label %if.then53, label %if.end54

if.then53:                                        ; preds = %land.lhs.true45
  call void (%union.tree_node*, i8*, ...)* @error_with_decl(%union.tree_node* %decl.0, i8* getelementptr inbounds ([35 x i8]* @.str1, i64 0, i64 0)) #10
  br label %if.end54

if.end54:                                         ; preds = %if.then14, %if.end40, %if.then53, %land.lhs.true45
  %size.1 = phi i64 [ 1, %if.then53 ], [ -1, %land.lhs.true45 ], [ %size.0, %if.end40 ], [ %.call, %if.then14 ]
  %call55 = call %struct.rtx_def* @assign_stack_temp_for_type(i32 %bf.clear7, i64 %size.1, i32 %keep, %union.tree_node* %type.0) #9
  br label %return

if.end56:                                         ; preds = %if.end
  %tobool57 = icmp eq i32 %dont_promote, 0
  br i1 %tobool57, label %if.then58, label %if.end60

if.then58:                                        ; preds = %if.end56
  %call59 = call i32 @promote_mode(%union.tree_node* %type.0, i32 %bf.clear7, i32* %unsignedp, i32 0) #10
  br label %if.end60

if.end60:                                         ; preds = %if.end56, %if.then58
  %mode.0 = phi i32 [ %bf.clear7, %if.end56 ], [ %call59, %if.then58 ]
  %call61 = call %struct.rtx_def* @gen_reg_rtx(i32 %mode.0) #10
  br label %return

return:                                           ; preds = %if.end60, %if.end54
  %retval.0 = phi %struct.rtx_def* [ %call55, %if.end54 ], [ %call61, %if.end60 ]
  ret %struct.rtx_def* %retval.0
}
