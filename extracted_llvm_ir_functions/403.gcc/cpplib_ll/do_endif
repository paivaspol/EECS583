define internal void @do_endif(%struct.cpp_reader* %pfile) #0 {
entry:
  %buffer1 = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 0
  %0 = load %struct.cpp_buffer** %buffer1, align 8, !tbaa !3
  %if_stack = getelementptr inbounds %struct.cpp_buffer* %0, i64 0, i32 7
  %1 = load %struct.if_stack** %if_stack, align 8, !tbaa !3
  %cmp = icmp eq %struct.if_stack* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  tail call void (%struct.cpp_reader*, i8*, ...)* @cpp_error(%struct.cpp_reader* %pfile, i8* getelementptr inbounds ([19 x i8]* @.str74, i64 0, i64 0)) #8
  br label %if.end21

if.else:                                          ; preds = %entry
  %was_skipping = getelementptr inbounds %struct.if_stack* %1, i64 0, i32 4
  %2 = load i8* %was_skipping, align 1, !tbaa !5, !range !9
  %tobool = icmp eq i8 %2, 0
  br i1 %tobool, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.else
  tail call fastcc void @check_eol(%struct.cpp_reader* %pfile) #9
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  %next = getelementptr inbounds %struct.if_stack* %1, i64 0, i32 0
  %3 = load %struct.if_stack** %next, align 8, !tbaa !3
  %cmp3 = icmp eq %struct.if_stack* %3, null
  br i1 %cmp3, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %if.end
  %mi_cmacro = getelementptr inbounds %struct.if_stack* %1, i64 0, i32 2
  %4 = load %struct.cpp_hashnode** %mi_cmacro, align 8, !tbaa !3
  %tobool4 = icmp eq %struct.cpp_hashnode* %4, null
  br i1 %tobool4, label %if.end8, label %if.then5

if.then5:                                         ; preds = %land.lhs.true
  %mi_valid = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 14
  store i8 1, i8* %mi_valid, align 1, !tbaa !5
  %mi_cmacro7 = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 12
  store %struct.cpp_hashnode* %4, %struct.cpp_hashnode** %mi_cmacro7, align 8, !tbaa !3
  %.pre = load %struct.if_stack** %next, align 8, !tbaa !3
  br label %if.end8

if.end8:                                          ; preds = %land.lhs.true, %if.end, %if.then5
  %5 = phi %struct.if_stack* [ %.pre, %if.then5 ], [ %3, %if.end ], [ null, %land.lhs.true ]
  store %struct.if_stack* %5, %struct.if_stack** %if_stack, align 8, !tbaa !3
  %6 = load i8* %was_skipping, align 1, !tbaa !5, !range !9
  %skipping = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 1, i32 1
  store i8 %6, i8* %skipping, align 1, !tbaa !0
  %buffer_ob = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 33
  %7 = bitcast %struct.if_stack* %1 to i8*
  %chunk = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 33, i32 1
  %8 = load %struct._obstack_chunk** %chunk, align 8, !tbaa !3
  %9 = bitcast %struct._obstack_chunk* %8 to %struct.if_stack*
  %cmp13 = icmp ugt %struct.if_stack* %1, %9
  br i1 %cmp13, label %land.lhs.true15, label %if.else19

land.lhs.true15:                                  ; preds = %if.end8
  %chunk_limit = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 33, i32 4
  %10 = load i8** %chunk_limit, align 8, !tbaa !3
  %cmp16 = icmp ult i8* %7, %10
  br i1 %cmp16, label %if.then18, label %if.else19

if.then18:                                        ; preds = %land.lhs.true15
  %object_base = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 33, i32 2
  store i8* %7, i8** %object_base, align 8, !tbaa !3
  %next_free = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 33, i32 3
  store i8* %7, i8** %next_free, align 8, !tbaa !3
  br label %if.end21

if.else19:                                        ; preds = %land.lhs.true15, %if.end8
  tail call void @obstack_free(%struct.obstack* %buffer_ob, i8* %7) #8
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.else19, %if.then
  ret void
}
