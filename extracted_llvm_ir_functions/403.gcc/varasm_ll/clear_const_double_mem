define void @clear_const_double_mem() #0 {
entry:
  %0 = load %struct.function** @cfun, align 8, !tbaa !3
  %varasm = getelementptr inbounds %struct.function* %0, i64 0, i32 4
  %1 = load %struct.varasm_status** %varasm, align 8, !tbaa !3
  %x_const_double_chain = getelementptr inbounds %struct.varasm_status* %1, i64 0, i32 5
  %2 = load %struct.rtx_def** %x_const_double_chain, align 8, !tbaa !3
  %tobool8 = icmp eq %struct.rtx_def* %2, null
  br i1 %tobool8, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %r.09 = phi %struct.rtx_def* [ %3, %for.body ], [ %2, %entry ]
  %arrayidx = getelementptr inbounds %struct.rtx_def* %r.09, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %4 = getelementptr inbounds %union.rtunion_def* %arrayidx, i64 0, i32 0
  store i64 0, i64* %4, align 8, !tbaa !3
  %tobool = icmp eq %struct.rtx_def* %3, null
  br i1 %tobool, label %for.cond.for.end_crit_edge, label %for.body

for.cond.for.end_crit_edge:                       ; preds = %for.body
  %.pre = load %struct.function** @cfun, align 8, !tbaa !3
  %varasm4.phi.trans.insert = getelementptr inbounds %struct.function* %.pre, i64 0, i32 4
  %.pre10 = load %struct.varasm_status** %varasm4.phi.trans.insert, align 8, !tbaa !3
  br label %for.end

for.end:                                          ; preds = %for.cond.for.end_crit_edge, %entry
  %5 = phi %struct.varasm_status* [ %.pre10, %for.cond.for.end_crit_edge ], [ %1, %entry ]
  %x_const_double_chain5 = getelementptr inbounds %struct.varasm_status* %5, i64 0, i32 5
  store %struct.rtx_def* null, %struct.rtx_def** %x_const_double_chain5, align 8, !tbaa !3
  ret void
}
