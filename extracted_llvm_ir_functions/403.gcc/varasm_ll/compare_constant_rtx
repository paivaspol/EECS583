define internal fastcc i32 @compare_constant_rtx(i32 %mode, %struct.rtx_def* %x, %struct.constant_descriptor* nocapture %desc) #0 {
entry:
  %value = alloca %struct.rtx_const, align 8
  %u = getelementptr inbounds %struct.constant_descriptor* %desc, i64 0, i32 3
  %0 = bitcast %union.anon.4* %u to i32*
  %1 = getelementptr inbounds %struct.rtx_const* %value, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 136, i8* %1) #6
  call fastcc void @decode_rtx_const(i32 %mode, %struct.rtx_def* %x, %struct.rtx_const* %value) #10
  %2 = bitcast %struct.rtx_const* %value to i32*
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %p.0 = phi i32* [ %0, %entry ], [ %incdec.ptr, %while.body ]
  %strp.0 = phi i32* [ %2, %entry ], [ %incdec.ptr1, %while.body ]
  %len.0 = phi i32 [ 34, %entry ], [ %dec, %while.body ]
  %cmp = icmp sgt i32 %len.0, 0
  br i1 %cmp, label %while.body, label %cleanup

while.body:                                       ; preds = %while.cond
  %dec = add nsw i32 %len.0, -1
  %incdec.ptr = getelementptr inbounds i32* %p.0, i64 1
  %3 = load i32* %p.0, align 4, !tbaa !4
  %incdec.ptr1 = getelementptr inbounds i32* %strp.0, i64 1
  %4 = load i32* %strp.0, align 4, !tbaa !4
  %cmp2 = icmp eq i32 %3, %4
  br i1 %cmp2, label %while.cond, label %cleanup

cleanup:                                          ; preds = %while.cond, %while.body
  %retval.0 = phi i32 [ 0, %while.body ], [ 1, %while.cond ]
  call void @llvm.lifetime.end(i64 136, i8* %1) #6
  ret i32 %retval.0
}
