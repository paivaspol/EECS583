define void @assemble_vtable_entry(%struct.rtx_def* %symbol, i64 %offset) #0 {
entry:
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !3
  %1 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8]* @.str124, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %0)
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !3
  tail call void @output_addr_const(%struct._IO_FILE* %2, %struct.rtx_def* %symbol) #9
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !3
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([3 x i8]* @.str125, i64 0, i64 0), i64 2, i64 1, %struct._IO_FILE* %3)
  %5 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !3
  %call2 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([4 x i8]* @.str92, i64 0, i64 0), i64 %offset) #9
  %6 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !3
  %call3 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %6) #9
  ret void
}
