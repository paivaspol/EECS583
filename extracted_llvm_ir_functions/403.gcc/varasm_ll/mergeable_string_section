define void @mergeable_string_section(%union.tree_node* nocapture %decl, i64 %align, i32 %flags) #0 {
entry:
  %name = alloca [30 x i8], align 16
  %0 = load i32* @flag_merge_constants, align 4, !tbaa !4
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end86, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %code = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 2
  %1 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 29
  br i1 %cmp, label %land.lhs.true1, label %if.end86

land.lhs.true1:                                   ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 1
  %2 = load %union.tree_node** %type, align 8, !tbaa !3
  %code4 = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %3 = bitcast [4 x i8]* %code4 to i32*
  %bf.load5 = load i32* %3, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %cmp7 = icmp eq i32 %bf.clear6, 18
  %cmp9 = icmp ult i64 %align, 257
  %or.cond = and i1 %cmp7, %cmp9
  br i1 %or.cond, label %land.lhs.true10, label %if.end86

land.lhs.true10:                                  ; preds = %land.lhs.true1
  %4 = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 2
  %5 = load i32* %4, align 4, !tbaa !4
  %conv = sext i32 %5 to i64
  %call = call i64 @int_size_in_bytes(%union.tree_node* %2) #9
  %cmp13 = icmp slt i64 %conv, %call
  br i1 %cmp13, label %if.end86, label %if.then

if.then:                                          ; preds = %land.lhs.true10
  %6 = load %union.tree_node** %type, align 8, !tbaa !3
  %type18 = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type18, align 8, !tbaa !3
  %type19 = bitcast %union.tree_node* %7 to %struct.tree_type*
  %mode20 = getelementptr inbounds %struct.tree_type* %type19, i64 0, i32 6
  %8 = bitcast [4 x i8]* %mode20 to i32*
  %bf.load21 = load i32* %8, align 4
  %bf.lshr = lshr i32 %bf.load21, 9
  %bf.clear22 = and i32 %bf.lshr, 127
  %idxprom118 = zext i32 %bf.clear22 to i64
  %arrayidx = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom118
  %9 = load i16* %arrayidx, align 2, !tbaa !7
  %conv23 = zext i16 %9 to i32
  %.off = add i16 %9, -8
  %10 = icmp ult i16 %.off, 249
  br i1 %10, label %land.lhs.true29, label %if.end86

land.lhs.true29:                                  ; preds = %if.then
  %sub = add i32 %conv23, 65535
  %and = and i32 %sub, %conv23
  %cmp30 = icmp eq i32 %and, 0
  br i1 %cmp30, label %if.then32, label %if.end86

if.then32:                                        ; preds = %land.lhs.true29
  %conv33 = zext i16 %9 to i64
  %cmp34 = icmp ugt i64 %conv33, %align
  %conv33.align = select i1 %cmp34, i64 %conv33, i64 %align
  %pointer = getelementptr inbounds %union.tree_node* %decl, i64 0, i32 0, i32 4
  %11 = load %union.tree_node** %pointer, align 8
  %12 = bitcast %union.tree_node* %11 to i8*
  %13 = load i32* %4, align 4, !tbaa !4
  %arrayidx42 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom118
  %14 = load i8* %arrayidx42, align 1, !tbaa !1
  %conv43 = zext i8 %14 to i32
  %cmp44122 = icmp sgt i32 %13, 0
  br i1 %cmp44122, label %for.cond46.preheader.lr.ph, label %for.end63

for.cond46.preheader.lr.ph:                       ; preds = %if.then32
  %cmp47120 = icmp eq i8 %14, 0
  %15 = zext i8 %14 to i64
  br label %for.cond46.preheader

for.cond:                                         ; preds = %for.end
  %16 = trunc i64 %indvars.iv.next131 to i32
  %cmp44 = icmp slt i32 %16, %13
  br i1 %cmp44, label %for.cond46.preheader, label %for.end63

for.cond46.preheader:                             ; preds = %for.cond46.preheader.lr.ph, %for.cond
  %indvars.iv130 = phi i64 [ 0, %for.cond46.preheader.lr.ph ], [ %indvars.iv.next131, %for.cond ]
  %i.0123 = phi i32 [ 0, %for.cond46.preheader.lr.ph ], [ %add62, %for.cond ]
  br i1 %cmp47120, label %for.end, label %for.body49

for.cond46:                                       ; preds = %for.body49
  %17 = trunc i64 %indvars.iv.next to i32
  %cmp47 = icmp slt i32 %17, %conv43
  br i1 %cmp47, label %for.body49, label %for.end

for.body49:                                       ; preds = %for.cond46.preheader, %for.cond46
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond46 ], [ 0, %for.cond46.preheader ]
  %j.0121 = phi i32 [ %inc, %for.cond46 ], [ 0, %for.cond46.preheader ]
  %18 = add nsw i64 %indvars.iv, %indvars.iv130
  %arrayidx51 = getelementptr inbounds i8* %12, i64 %18
  %19 = load i8* %arrayidx51, align 1, !tbaa !1
  %cmp53 = icmp eq i8 %19, 0
  %indvars.iv.next = add i64 %indvars.iv, 1
  %inc = add nsw i32 %j.0121, 1
  br i1 %cmp53, label %for.cond46, label %for.end

for.end:                                          ; preds = %for.cond46, %for.body49, %for.cond46.preheader
  %j.0.lcssa = phi i32 [ 0, %for.cond46.preheader ], [ %j.0121, %for.body49 ], [ %inc, %for.cond46 ]
  %cmp57 = icmp eq i32 %j.0.lcssa, %conv43
  %indvars.iv.next131 = add i64 %indvars.iv130, %15
  %add62 = add nsw i32 %i.0123, %conv43
  br i1 %cmp57, label %for.end63, label %for.cond

for.end63:                                        ; preds = %for.cond, %for.end, %if.then32
  %i.0.lcssa = phi i32 [ 0, %if.then32 ], [ %i.0123, %for.end ], [ %add62, %for.cond ]
  %sub64 = sub nsw i32 %13, %conv43
  %cmp65 = icmp eq i32 %i.0.lcssa, %sub64
  br i1 %cmp65, label %if.then67, label %if.end86

if.then67:                                        ; preds = %for.end63
  %arraydecay = getelementptr inbounds [30 x i8]* %name, i64 0, i64 0
  %div = lshr i32 %conv23, 3
  %div68 = lshr i64 %conv33.align, 3
  %conv69 = trunc i64 %div68 to i32
  %call70 = call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([17 x i8]* @.str12, i64 0, i64 0), i32 %div, i32 %conv69) #9
  %or72 = or i32 %div, %flags
  %or73 = or i32 %or72, 98304
  %tobool74 = icmp eq i32 %i.0.lcssa, 0
  %cmp77 = icmp ult i64 %conv33, %conv33.align
  %or.cond119 = and i1 %tobool74, %cmp77
  call void @named_section_flags(i8* %arraydecay, i32 %or73) #10
  br i1 %or.cond119, label %if.then79, label %return

if.then79:                                        ; preds = %if.then67
  %20 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !3
  %call81 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([4 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8]* @.str13, i64 0, i64 0)) #9
  br label %return

if.end86:                                         ; preds = %land.lhs.true10, %entry, %if.then, %land.lhs.true29, %for.end63, %land.lhs.true1, %land.lhs.true
  call void @const_section() #9
  br label %return

return:                                           ; preds = %if.then67, %if.end86, %if.then79
  ret void
}
