define internal fastcc void @record_one_conflict(i32 %regno) #0 {
entry:
  %cmp = icmp slt i32 %regno, 53
  br i1 %cmp, label %do.body, label %if.else

do.body:                                          ; preds = %entry
  %0 = load i32* @allocno_row_words, align 4, !tbaa !0
  %cmp144 = icmp sgt i32 %0, 0
  br i1 %cmp144, label %for.body.lr.ph, label %if.end27

for.body.lr.ph:                                   ; preds = %do.body
  %1 = load i64** @allocnos_live, align 8, !tbaa !3
  %sh_prom = zext i32 %regno to i64
  %shl = shl i64 1, %sh_prom
  %2 = load %struct.allocno** @allocno, align 8, !tbaa !3
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.inc6
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc6 ]
  %i_.047.in = phi i32 [ %0, %for.body.lr.ph ], [ %i_.047, %for.inc6 ]
  %p_.046 = phi i64* [ %1, %for.body.lr.ph ], [ %incdec.ptr, %for.inc6 ]
  %i_.047 = add nsw i32 %i_.047.in, -1
  %incdec.ptr = getelementptr inbounds i64* %p_.046, i64 1
  %3 = load i64* %p_.046, align 8, !tbaa !4
  %tobool40 = icmp eq i64 %3, 0
  br i1 %tobool40, label %for.inc6, label %for.body3

for.body3:                                        ; preds = %for.body, %for.inc
  %indvars.iv52 = phi i64 [ %indvars.iv.next53, %for.inc ], [ %indvars.iv, %for.body ]
  %word_.041 = phi i64 [ %shr, %for.inc ], [ %3, %for.body ]
  %and = and i64 %word_.041, 1
  %tobool4 = icmp eq i64 %and, 0
  br i1 %tobool4, label %for.inc, label %if.then5

if.then5:                                         ; preds = %for.body3
  %hard_reg_conflicts = getelementptr inbounds %struct.allocno* %2, i64 %indvars.iv52, i32 6
  %4 = load i64* %hard_reg_conflicts, align 8, !tbaa !4
  %or = or i64 %4, %shl
  store i64 %or, i64* %hard_reg_conflicts, align 8, !tbaa !4
  br label %for.inc

for.inc:                                          ; preds = %for.body3, %if.then5
  %shr = lshr i64 %word_.041, 1
  %tobool = icmp eq i64 %shr, 0
  %indvars.iv.next53 = add i64 %indvars.iv52, 1
  br i1 %tobool, label %for.inc6, label %for.body3

for.inc6:                                         ; preds = %for.inc, %for.body
  %cmp1 = icmp sgt i32 %i_.047, 0
  %indvars.iv.next = add i64 %indvars.iv, 64
  br i1 %cmp1, label %for.body, label %if.end27

if.else:                                          ; preds = %entry
  %idxprom8 = sext i32 %regno to i64
  %5 = load i32** @reg_allocno, align 8, !tbaa !3
  %arrayidx9 = getelementptr inbounds i32* %5, i64 %idxprom8
  %6 = load i32* %arrayidx9, align 4, !tbaa !0
  %7 = load i32* @allocno_row_words, align 4, !tbaa !0
  %8 = load i64* @hard_regs_live, align 8, !tbaa !4
  %idxprom10 = sext i32 %6 to i64
  %9 = load %struct.allocno** @allocno, align 8, !tbaa !3
  %hard_reg_conflicts12 = getelementptr inbounds %struct.allocno* %9, i64 %idxprom10, i32 6
  %10 = load i64* %hard_reg_conflicts12, align 8, !tbaa !4
  %or13 = or i64 %10, %8
  store i64 %or13, i64* %hard_reg_conflicts12, align 8, !tbaa !4
  %cmp1650 = icmp sgt i32 %7, 0
  br i1 %cmp1650, label %for.body17.lr.ph, label %if.end27

for.body17.lr.ph:                                 ; preds = %if.else
  %mul = mul nsw i32 %7, %6
  %11 = load i64** @allocnos_live, align 8, !tbaa !3
  %12 = load i64** @conflicts, align 8, !tbaa !3
  %13 = sext i32 %7 to i64
  %14 = sext i32 %mul to i64
  br label %for.body17

for.body17:                                       ; preds = %for.body17.lr.ph, %for.body17
  %indvars.iv55 = phi i64 [ %13, %for.body17.lr.ph ], [ %indvars.iv.next56, %for.body17 ]
  %indvars.iv.next56 = add i64 %indvars.iv55, -1
  %arrayidx19 = getelementptr inbounds i64* %11, i64 %indvars.iv.next56
  %15 = load i64* %arrayidx19, align 8, !tbaa !4
  %16 = add nsw i64 %indvars.iv.next56, %14
  %arrayidx22 = getelementptr inbounds i64* %12, i64 %16
  %17 = load i64* %arrayidx22, align 8, !tbaa !4
  %or23 = or i64 %17, %15
  store i64 %or23, i64* %arrayidx22, align 8, !tbaa !4
  %18 = trunc i64 %indvars.iv.next56 to i32
  %cmp16 = icmp sgt i32 %18, 0
  br i1 %cmp16, label %for.body17, label %if.end27

if.end27:                                         ; preds = %if.else, %for.body17, %do.body, %for.inc6
  ret void
}
