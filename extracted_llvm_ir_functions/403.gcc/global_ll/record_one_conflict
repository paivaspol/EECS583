define internal fastcc void @record_one_conflict(i32 %regno) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{i32 %regno}, i64 0, metadata !823), !dbg !1545
  %cmp = icmp slt i32 %regno, 53, !dbg !1546
  br i1 %cmp, label %do.body, label %if.else, !dbg !1546

do.body:                                          ; preds = %entry
  tail call void @llvm.dbg.value(metadata !{i64* %1}, i64 0, metadata !828), !dbg !1547
  %0 = load i32* @allocno_row_words, align 4, !dbg !1548, !tbaa !911
  tail call void @llvm.dbg.value(metadata !296, i64 0, metadata !827), !dbg !1548
  %cmp144 = icmp sgt i32 %0, 0, !dbg !1548
  br i1 %cmp144, label %for.body.lr.ph, label %if.end27, !dbg !1548

for.body.lr.ph:                                   ; preds = %do.body
  %1 = load i64** @allocnos_live, align 8, !dbg !1547, !tbaa !914
  %sh_prom = zext i32 %regno to i64, !dbg !1549
  %shl = shl i64 1, %sh_prom, !dbg !1549
  %2 = load %struct.allocno** @allocno, align 8, !dbg !1549, !tbaa !914
  br label %for.body, !dbg !1548

for.body:                                         ; preds = %for.body.lr.ph, %for.inc6
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc6 ]
  %i_.047.in = phi i32 [ %0, %for.body.lr.ph ], [ %i_.047, %for.inc6 ]
  %p_.046 = phi i64* [ %1, %for.body.lr.ph ], [ %incdec.ptr, %for.inc6 ]
  %i_.047 = add nsw i32 %i_.047.in, -1, !dbg !1548
  %incdec.ptr = getelementptr inbounds i64* %p_.046, i64 1, !dbg !1554
  tail call void @llvm.dbg.value(metadata !{i64* %incdec.ptr}, i64 0, metadata !828), !dbg !1554
  %3 = load i64* %p_.046, align 8, !dbg !1554, !tbaa !917
  tail call void @llvm.dbg.value(metadata !{i64 %3}, i64 0, metadata !829), !dbg !1554
  tail call void @llvm.dbg.value(metadata !1211, i64 0, metadata !824), !dbg !1555
  %tobool40 = icmp eq i64 %3, 0, !dbg !1555
  br i1 %tobool40, label %for.inc6, label %for.body3, !dbg !1555

for.body3:                                        ; preds = %for.body, %for.inc
  %indvars.iv52 = phi i64 [ %indvars.iv.next53, %for.inc ], [ %indvars.iv, %for.body ], !dbg !1548
  %word_.041 = phi i64 [ %shr, %for.inc ], [ %3, %for.body ]
  %and = and i64 %word_.041, 1, !dbg !1556
  %tobool4 = icmp eq i64 %and, 0, !dbg !1556
  br i1 %tobool4, label %for.inc, label %if.then5, !dbg !1556

if.then5:                                         ; preds = %for.body3
  %hard_reg_conflicts = getelementptr inbounds %struct.allocno* %2, i64 %indvars.iv52, i32 6, !dbg !1549
  %4 = load i64* %hard_reg_conflicts, align 8, !dbg !1549, !tbaa !917
  %or = or i64 %4, %shl, !dbg !1549
  store i64 %or, i64* %hard_reg_conflicts, align 8, !dbg !1549, !tbaa !917
  br label %for.inc, !dbg !1557

for.inc:                                          ; preds = %for.body3, %if.then5
  %shr = lshr i64 %word_.041, 1, !dbg !1555
  tail call void @llvm.dbg.value(metadata !{i64 %shr}, i64 0, metadata !829), !dbg !1555
  %tobool = icmp eq i64 %shr, 0, !dbg !1555
  %indvars.iv.next53 = add i64 %indvars.iv52, 1, !dbg !1555
  br i1 %tobool, label %for.inc6, label %for.body3, !dbg !1555

for.inc6:                                         ; preds = %for.inc, %for.body
  %cmp1 = icmp sgt i32 %i_.047, 0, !dbg !1548
  %indvars.iv.next = add i64 %indvars.iv, 64, !dbg !1548
  br i1 %cmp1, label %for.body, label %if.end27, !dbg !1548

if.else:                                          ; preds = %entry
  %idxprom8 = sext i32 %regno to i64, !dbg !1558
  %5 = load i32** @reg_allocno, align 8, !dbg !1558, !tbaa !914
  %arrayidx9 = getelementptr inbounds i32* %5, i64 %idxprom8, !dbg !1558
  %6 = load i32* %arrayidx9, align 4, !dbg !1558, !tbaa !911
  tail call void @llvm.dbg.value(metadata !{i32 %6}, i64 0, metadata !832), !dbg !1558
  %7 = load i32* @allocno_row_words, align 4, !dbg !1559, !tbaa !911
  tail call void @llvm.dbg.value(metadata !{i32 %mul}, i64 0, metadata !834), !dbg !1559
  %8 = load i64* @hard_regs_live, align 8, !dbg !1560, !tbaa !917
  %idxprom10 = sext i32 %6 to i64, !dbg !1560
  %9 = load %struct.allocno** @allocno, align 8, !dbg !1560, !tbaa !914
  %hard_reg_conflicts12 = getelementptr inbounds %struct.allocno* %9, i64 %idxprom10, i32 6, !dbg !1560
  %10 = load i64* %hard_reg_conflicts12, align 8, !dbg !1560, !tbaa !917
  %or13 = or i64 %10, %8, !dbg !1560
  store i64 %or13, i64* %hard_reg_conflicts12, align 8, !dbg !1560, !tbaa !917
  %cmp1650 = icmp sgt i32 %7, 0, !dbg !1561
  br i1 %cmp1650, label %for.body17.lr.ph, label %if.end27, !dbg !1561

for.body17.lr.ph:                                 ; preds = %if.else
  %mul = mul nsw i32 %7, %6, !dbg !1559
  %11 = load i64** @allocnos_live, align 8, !dbg !1563, !tbaa !914
  %12 = load i64** @conflicts, align 8, !dbg !1563, !tbaa !914
  %13 = sext i32 %7 to i64
  %14 = sext i32 %mul to i64, !dbg !1561
  br label %for.body17, !dbg !1561

for.body17:                                       ; preds = %for.body17.lr.ph, %for.body17
  %indvars.iv55 = phi i64 [ %13, %for.body17.lr.ph ], [ %indvars.iv.next56, %for.body17 ]
  %indvars.iv.next56 = add i64 %indvars.iv55, -1, !dbg !1561
  %arrayidx19 = getelementptr inbounds i64* %11, i64 %indvars.iv.next56, !dbg !1563
  %15 = load i64* %arrayidx19, align 8, !dbg !1563, !tbaa !917
  %16 = add nsw i64 %indvars.iv.next56, %14, !dbg !1563
  %arrayidx22 = getelementptr inbounds i64* %12, i64 %16, !dbg !1563
  %17 = load i64* %arrayidx22, align 8, !dbg !1563, !tbaa !917
  %or23 = or i64 %17, %15, !dbg !1563
  store i64 %or23, i64* %arrayidx22, align 8, !dbg !1563, !tbaa !917
  %18 = trunc i64 %indvars.iv.next56 to i32, !dbg !1561
  %cmp16 = icmp sgt i32 %18, 0, !dbg !1561
  br i1 %cmp16, label %for.body17, label %if.end27, !dbg !1561

if.end27:                                         ; preds = %if.else, %for.body17, %do.body, %for.inc6
  ret void, !dbg !1565
}
