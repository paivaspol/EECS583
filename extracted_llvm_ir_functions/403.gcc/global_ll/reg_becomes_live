define internal void @reg_becomes_live(%struct.rtx_def* nocapture %reg, %struct.rtx_def* nocapture %setter, i8* %regs_set) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %reg}, i64 0, metadata !611), !dbg !1509
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %setter}, i64 0, metadata !612), !dbg !1510
  tail call void @llvm.dbg.value(metadata !{i8* %regs_set}, i64 0, metadata !613), !dbg !1511
  %0 = bitcast %struct.rtx_def* %reg to i32*, !dbg !1512
  %bf.load = load i32* %0, align 8, !dbg !1512
  %bf.clear = and i32 %bf.load, 65535, !dbg !1512
  %cmp = icmp eq i32 %bf.clear, 63, !dbg !1512
  br i1 %cmp, label %if.then, label %if.end, !dbg !1512

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0, !dbg !1513
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !1513
  %1 = load %struct.rtx_def** %rtx, align 8, !dbg !1513, !tbaa !914
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %1}, i64 0, metadata !611), !dbg !1513
  %.phi.trans.insert = bitcast %struct.rtx_def* %1 to i32*
  %bf.load1.pre = load i32* %.phi.trans.insert, align 8, !dbg !1514
  br label %if.end, !dbg !1513

if.end:                                           ; preds = %if.then, %entry
  %bf.load1 = phi i32 [ %bf.load1.pre, %if.then ], [ %bf.load, %entry ]
  %reg.addr.0 = phi %struct.rtx_def* [ %1, %if.then ], [ %reg, %entry ]
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !1514
  %cmp3 = icmp eq i32 %bf.clear2, 61, !dbg !1514
  br i1 %cmp3, label %if.end5, label %if.end79, !dbg !1514

if.end5:                                          ; preds = %if.end
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %reg.addr.0, i64 0, i32 1, i64 0, !dbg !1515
  %rtuint = bitcast %union.rtunion_def* %arrayidx7 to i32*, !dbg !1515
  %2 = load i32* %rtuint, align 4, !dbg !1515, !tbaa !911
  tail call void @llvm.dbg.value(metadata !{i32 %2}, i64 0, metadata !614), !dbg !1515
  %cmp8 = icmp slt i32 %2, 53, !dbg !1516
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !1516

if.then9:                                         ; preds = %if.end5
  %.off = add i32 %2, -8, !dbg !1517
  %3 = icmp ult i32 %.off, 8, !dbg !1517
  %.off106 = add i32 %2, -21, !dbg !1517
  %4 = icmp ult i32 %.off106, 8, !dbg !1517
  %or.cond = or i1 %3, %4, !dbg !1517
  %.off107 = add i32 %2, -45, !dbg !1517
  %5 = icmp ult i32 %.off107, 8, !dbg !1517
  %or.cond113 = or i1 %or.cond, %5, !dbg !1517
  %.off108 = add i32 %2, -29, !dbg !1517
  %6 = icmp ult i32 %.off108, 8, !dbg !1517
  %or.cond115 = or i1 %or.cond113, %6, !dbg !1517
  %bf.lshr = lshr i32 %bf.load1, 16, !dbg !1517
  %bf.clear24 = and i32 %bf.lshr, 255, !dbg !1517
  br i1 %or.cond115, label %cond.true, label %cond.false, !dbg !1517

cond.true:                                        ; preds = %if.then9
  %idxprom110 = zext i32 %bf.clear24 to i64, !dbg !1517
  %arrayidx25 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom110, !dbg !1517
  %7 = load i32* %arrayidx25, align 4, !dbg !1517, !tbaa !978
  %cmp26 = icmp eq i32 %7, 5, !dbg !1517
  br i1 %cmp26, label %while.body.lr.ph, label %lor.rhs, !dbg !1517

lor.rhs:                                          ; preds = %cond.true
  %cmp32 = icmp eq i32 %7, 6, !dbg !1517
  %phitmp = select i1 %cmp32, i32 2, i32 1, !dbg !1517
  br label %while.body.lr.ph, !dbg !1517

cond.false:                                       ; preds = %if.then9
  switch i32 %bf.clear24, label %while.cond.preheader [
    i32 18, label %cond.true37
    i32 24, label %cond.true44
  ], !dbg !1517

cond.true37:                                      ; preds = %cond.false
  %8 = load i32* @target_flags, align 4, !dbg !1517, !tbaa !911
  %and = lshr i32 %8, 25, !dbg !1517
  %9 = and i32 %and, 1, !dbg !1517
  %10 = xor i32 %9, 3, !dbg !1517
  br label %while.body.lr.ph, !dbg !1517

cond.true44:                                      ; preds = %cond.false
  %11 = load i32* @target_flags, align 4, !dbg !1517, !tbaa !911
  %and45 = lshr i32 %11, 24, !dbg !1517
  %12 = and i32 %and45, 2, !dbg !1517
  %13 = xor i32 %12, 6, !dbg !1517
  br label %while.body.lr.ph, !dbg !1517

while.cond.preheader:                             ; preds = %cond.false
  %idxprom52109 = zext i32 %bf.clear24 to i64, !dbg !1517
  %arrayidx53 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom52109, !dbg !1517
  %14 = load i8* %arrayidx53, align 1, !dbg !1517, !tbaa !912
  %conv = zext i8 %14 to i32, !dbg !1517
  %15 = load i32* @target_flags, align 4, !dbg !1517, !tbaa !911
  %and54 = lshr i32 %15, 23, !dbg !1517
  %16 = and i32 %and54, 4, !dbg !1517
  %17 = add i32 %16, 4, !dbg !1517
  %add = add i32 %conv, -1, !dbg !1517
  %sub = add i32 %add, %17, !dbg !1517
  %div = sdiv i32 %sub, %17, !dbg !1517
  %cmp65117 = icmp sgt i32 %div, 0, !dbg !1518
  br i1 %cmp65117, label %while.body.lr.ph, label %if.end79, !dbg !1518

while.body.lr.ph:                                 ; preds = %cond.true, %lor.rhs, %cond.true37, %cond.true44, %while.cond.preheader
  %nregs.0.ph122 = phi i32 [ %div, %while.cond.preheader ], [ %13, %cond.true44 ], [ %10, %cond.true37 ], [ %phitmp, %lor.rhs ], [ 2, %cond.true ]
  %18 = bitcast i8* %regs_set to %struct.bitmap_head_def*, !dbg !1519
  %19 = sext i32 %2 to i64
  br label %while.body, !dbg !1518

while.body:                                       ; preds = %while.body.lr.ph, %if.end71
  %indvars.iv = phi i64 [ %19, %while.body.lr.ph ], [ %indvars.iv.next, %if.end71 ]
  %dec119.in = phi i32 [ %nregs.0.ph122, %while.body.lr.ph ], [ %dec119, %if.end71 ]
  %dec119 = add nsw i32 %dec119.in, -1, !dbg !1518
  %20 = load %struct.bitmap_head_def** @live_relevant_regs, align 8, !dbg !1521, !tbaa !914
  %21 = trunc i64 %indvars.iv to i32, !dbg !1521
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* %20, i32 %21) #6, !dbg !1521
  %arrayidx68 = getelementptr inbounds [53 x i8]* @fixed_regs, i64 0, i64 %indvars.iv, !dbg !1522
  %22 = load i8* %arrayidx68, align 1, !dbg !1522, !tbaa !912
  %tobool69 = icmp eq i8 %22, 0, !dbg !1522
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !1522

if.then70:                                        ; preds = %while.body
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* %18, i32 %21) #6, !dbg !1519
  br label %if.end71, !dbg !1519

if.end71:                                         ; preds = %while.body, %if.then70
  %indvars.iv.next = add i64 %indvars.iv, 1, !dbg !1518
  tail call void @llvm.dbg.value(metadata !{i32 %dec119}, i64 0, metadata !615), !dbg !1518
  %cmp65 = icmp sgt i32 %dec119, 0, !dbg !1518
  br i1 %cmp65, label %while.body, label %if.end79, !dbg !1518

if.else:                                          ; preds = %if.end5
  %idxprom72 = sext i32 %2 to i64, !dbg !1523
  %23 = load i16** @reg_renumber, align 8, !dbg !1523, !tbaa !914
  %arrayidx73 = getelementptr inbounds i16* %23, i64 %idxprom72, !dbg !1523
  %24 = load i16* %arrayidx73, align 2, !dbg !1523, !tbaa !936
  %cmp75 = icmp sgt i16 %24, -1, !dbg !1523
  br i1 %cmp75, label %if.then77, label %if.end79, !dbg !1523

if.then77:                                        ; preds = %if.else
  %25 = load %struct.bitmap_head_def** @live_relevant_regs, align 8, !dbg !1524, !tbaa !914
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* %25, i32 %2) #6, !dbg !1524
  %26 = bitcast i8* %regs_set to %struct.bitmap_head_def*, !dbg !1526
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* %26, i32 %2) #6, !dbg !1526
  br label %if.end79, !dbg !1527

if.end79:                                         ; preds = %while.cond.preheader, %if.end71, %if.end, %if.else, %if.then77
  ret void, !dbg !1528
}
