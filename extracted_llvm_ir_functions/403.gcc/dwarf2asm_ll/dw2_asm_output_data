define void @dw2_asm_output_data(i32 %size, i64 %value, i8* %comment, ...) #0 {
entry:
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0
  %arraydecay1 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*
  call void @llvm.va_start(i8* %arraydecay1)
  %mul = shl nsw i32 %size, 3
  %cmp = icmp slt i32 %mul, 64
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sh_prom = zext i32 %mul to i64
  %shl = shl i64 -1, %sh_prom
  %neg = xor i64 %shl, -1
  %and = and i64 %neg, %value
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %value.addr.0 = phi i64 [ %and, %if.then ], [ %value, %entry ]
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %value.addr.0) #7
  call void @dw2_assemble_integer(i32 %size, %struct.rtx_def* %call) #8
  %0 = load i32* @flag_debug_asm, align 4, !tbaa !4
  %tobool = icmp eq i32 %0, 0
  %tobool3 = icmp eq i8* %comment, null
  %or.cond = or i1 %tobool, %tobool3
  br i1 %or.cond, label %if.end8, label %if.then4

if.then4:                                         ; preds = %if.end
  %1 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([5 x i8]* @.str1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str2, i64 0, i64 0)) #7
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call7 = call i32 @vfprintf(%struct._IO_FILE* %2, i8* %comment, %struct.__va_list_tag* %arraydecay) #7
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then4
  %3 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call9 = call i32 @fputc(i32 10, %struct._IO_FILE* %3) #7
  call void @llvm.va_end(i8* %arraydecay1)
  ret void
}
