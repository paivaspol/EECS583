define void @dw2_assemble_integer(i32 %size, %struct.rtx_def* %x) #0 {
entry:
  %call = tail call i8* @integer_asm_op(i32 %size, i32 0) #7
  %tobool = icmp eq i8* %call, null
  br i1 %tobool, label %if.else4, label %if.then

if.then:                                          ; preds = %entry
  %0 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  %call1 = tail call i32 @fputs(i8* %call, %struct._IO_FILE* %0) #7
  %1 = bitcast %struct.rtx_def* %x to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 54
  %2 = load %struct._IO_FILE** @asm_out_file, align 8, !tbaa !0
  br i1 %cmp, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %rtwint = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0, i32 0
  %3 = load i64* %rtwint, align 8, !tbaa !3
  %call3 = tail call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([6 x i8]* @.str, i64 0, i64 0), i64 %3) #7
  br label %if.end6

if.else:                                          ; preds = %if.then
  tail call void @output_addr_const(%struct._IO_FILE* %2, %struct.rtx_def* %x) #7
  br label %if.end6

if.else4:                                         ; preds = %entry
  %call5 = tail call zeroext i1 @assemble_integer(%struct.rtx_def* %x, i32 %size, i32 8, i32 1) #7
  br label %if.end6

if.end6:                                          ; preds = %if.then2, %if.else, %if.else4
  ret void
}
