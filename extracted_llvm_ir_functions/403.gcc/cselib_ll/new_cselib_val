define internal fastcc %struct.cselib_val_struct* @new_cselib_val(i32 %value, i32 %mode) #1 {
entry:
  %0 = load %struct.cselib_val_struct** @empty_vals, align 8, !tbaa !0
  %tobool = icmp eq %struct.cselib_val_struct* %0, null
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %u = getelementptr inbounds %struct.cselib_val_struct* %0, i64 0, i32 1
  %next_free = bitcast %union.anon* %u to %struct.cselib_val_struct**
  %1 = load %struct.cselib_val_struct** %next_free, align 8, !tbaa !0
  store %struct.cselib_val_struct* %1, %struct.cselib_val_struct** @empty_vals, align 8, !tbaa !0
  br label %if.end36

if.else:                                          ; preds = %entry
  %2 = load i8** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 4), align 8, !tbaa !0
  %3 = load i8** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 3), align 8, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 32
  br i1 %cmp, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  tail call void @_obstack_newchunk(%struct.obstack* @cselib_obstack, i32 32) #10
  %.pre = load i8** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 3), align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.else
  %4 = phi i8* [ %.pre, %if.then3 ], [ %3, %if.else ]
  %add.ptr = getelementptr inbounds i8* %4, i64 32
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 3), align 8, !tbaa !0
  %5 = load i8** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 2), align 8, !tbaa !0
  %cmp7 = icmp eq i8* %add.ptr, %5
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  %bf.load = load i8* getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 10), align 8
  %bf.set = or i8 %bf.load, 2
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 10), align 8
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then9
  %sub.ptr.lhs.cast12 = ptrtoint i8* %add.ptr to i64
  %6 = load i32* getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 6), align 8, !tbaa !3
  %conv14 = sext i32 %6 to i64
  %add = add nsw i64 %conv14, %sub.ptr.lhs.cast12
  %neg = xor i32 %6, -1
  %conv16 = sext i32 %neg to i64
  %and = and i64 %add, %conv16
  %add.ptr17 = getelementptr inbounds i8* null, i64 %and
  store i8* %add.ptr17, i8** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 3), align 8, !tbaa !0
  %7 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 1), align 8, !tbaa !0
  %sub.ptr.lhs.cast20 = ptrtoint i8* %add.ptr17 to i64
  %sub.ptr.rhs.cast21 = ptrtoint %struct._obstack_chunk* %7 to i64
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21
  %8 = load i8** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 4), align 8, !tbaa !0
  %sub.ptr.lhs.cast25 = ptrtoint i8* %8 to i64
  %sub.ptr.sub27 = sub i64 %sub.ptr.lhs.cast25, %sub.ptr.rhs.cast21
  %cmp28 = icmp sgt i64 %sub.ptr.sub22, %sub.ptr.sub27
  br i1 %cmp28, label %if.then30, label %if.end33

if.then30:                                        ; preds = %if.end10
  store i8* %8, i8** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 3), align 8, !tbaa !0
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %if.end10
  %9 = phi i8* [ %8, %if.then30 ], [ %add.ptr17, %if.end10 ]
  store i8* %9, i8** getelementptr inbounds (%struct.obstack* @cselib_obstack, i64 0, i32 2), align 8, !tbaa !0
  %10 = bitcast i8* %5 to %struct.cselib_val_struct*
  br label %if.end36

if.end36:                                         ; preds = %if.end33, %if.then
  %e.0 = phi %struct.cselib_val_struct* [ %0, %if.then ], [ %10, %if.end33 ]
  %cmp37 = icmp eq i32 %value, 0
  br i1 %cmp37, label %if.then39, label %if.end40

if.then39:                                        ; preds = %if.end36
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 710, i8* getelementptr inbounds ([15 x i8]* @__FUNCTION__.new_cselib_val, i64 0, i64 0)) #9
  unreachable

if.end40:                                         ; preds = %if.end36
  %value41 = getelementptr inbounds %struct.cselib_val_struct* %e.0, i64 0, i32 0
  store i32 %value, i32* %value41, align 4, !tbaa !3
  %call = tail call %struct.rtx_def* @gen_rtx_fmt_0(i32 60, i32 %mode) #10
  %val_rtx = getelementptr inbounds %struct.cselib_val_struct* %e.0, i64 0, i32 1, i32 0
  store %struct.rtx_def* %call, %struct.rtx_def** %val_rtx, align 8, !tbaa !0
  %11 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0, i32 0
  %e.0.c = ptrtoint %struct.cselib_val_struct* %e.0 to i64
  store i64 %e.0.c, i64* %11, align 8, !tbaa !0
  %locs = getelementptr inbounds %struct.cselib_val_struct* %e.0, i64 0, i32 2
  %12 = bitcast %struct.elt_loc_list** %locs to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 16, i32 8, i1 false)
  ret %struct.cselib_val_struct* %e.0
}
