define internal fastcc i32 @find_valid_class(i32 %m1, i32 %n, i32 %dest_regno) #0 {
entry:
  %idxprom = zext i32 %dest_regno to i64
  %arrayidx = getelementptr inbounds [53 x i32]* @regclass_map, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !8
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc33, %entry
  %indvars.iv69 = phi i64 [ 1, %entry ], [ %indvars.iv.next70, %for.inc33 ]
  %best_cost.068 = phi i32 [ -1, %entry ], [ %best_cost.1, %for.inc33 ]
  %best_size.067 = phi i32 [ 0, %entry ], [ %best_size.1, %for.inc33 ]
  %best_class.064 = phi i32 [ 0, %entry ], [ %best_class.1, %for.inc33 ]
  %arrayidx5 = getelementptr inbounds [25 x i64]* @reg_class_contents, i64 0, i64 %indvars.iv69
  br label %for.body3

for.body3:                                        ; preds = %for.inc, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.inc ]
  %1 = load i64* %arrayidx5, align 8, !tbaa !6
  %shl = shl i64 1, %indvars.iv
  %and = and i64 %1, %shl
  %tobool6 = icmp eq i64 %and, 0
  br i1 %tobool6, label %for.inc, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body3
  %2 = trunc i64 %indvars.iv to i32
  %add = add nsw i32 %2, %n
  %sh_prom9 = zext i32 %add to i64
  %shl10 = shl i64 1, %sh_prom9
  %and11 = and i64 %1, %shl10
  %tobool12 = icmp eq i64 %and11, 0
  br i1 %tobool12, label %for.inc, label %land.lhs.true13

land.lhs.true13:                                  ; preds = %land.lhs.true
  %call = tail call i32 @ix86_hard_regno_mode_ok(i32 %add, i32 %m1) #6
  %phitmp = icmp ne i32 %call, 0
  br label %for.inc

for.inc:                                          ; preds = %land.lhs.true13, %land.lhs.true, %for.body3
  %bad.1 = phi i1 [ true, %land.lhs.true ], [ true, %for.body3 ], [ %phitmp, %land.lhs.true13 ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %3 = trunc i64 %indvars.iv.next to i32
  %cmp2 = icmp slt i32 %3, 53
  %or.cond = and i1 %cmp2, %bad.1
  br i1 %or.cond, label %for.body3, label %for.end

for.end:                                          ; preds = %for.inc
  br i1 %bad.1, label %if.end18, label %for.inc33

if.end18:                                         ; preds = %for.end
  %4 = trunc i64 %indvars.iv69 to i32
  %call19 = tail call i32 @ix86_register_move_cost(i32 %m1, i32 %4, i32 %0) #6
  %arrayidx21 = getelementptr inbounds [25 x i32]* @reg_class_size, i64 0, i64 %indvars.iv69
  %5 = load i32* %arrayidx21, align 4, !tbaa !3
  %cmp22 = icmp ugt i32 %5, %best_size.067
  br i1 %cmp22, label %land.lhs.true23, label %lor.lhs.false26

land.lhs.true23:                                  ; preds = %if.end18
  %notlhs = icmp slt i32 %best_cost.068, 0
  %notrhs = icmp sge i32 %best_cost.068, %call19
  %or.cond60.not = or i1 %notrhs, %notlhs
  %cmp27 = icmp sgt i32 %best_cost.068, %call19
  %or.cond61 = or i1 %or.cond60.not, %cmp27
  br i1 %or.cond61, label %if.then28, label %for.inc33

lor.lhs.false26:                                  ; preds = %if.end18
  %cmp27.old = icmp sgt i32 %best_cost.068, %call19
  br i1 %cmp27.old, label %if.then28, label %for.inc33

if.then28:                                        ; preds = %land.lhs.true23, %lor.lhs.false26
  %call31 = tail call i32 @ix86_register_move_cost(i32 %m1, i32 %4, i32 %0) #6
  br label %for.inc33

for.inc33:                                        ; preds = %land.lhs.true23, %for.end, %lor.lhs.false26, %if.then28
  %best_class.1 = phi i32 [ %best_class.064, %for.end ], [ %4, %if.then28 ], [ %best_class.064, %lor.lhs.false26 ], [ %best_class.064, %land.lhs.true23 ]
  %best_size.1 = phi i32 [ %best_size.067, %for.end ], [ %5, %if.then28 ], [ %best_size.067, %lor.lhs.false26 ], [ %best_size.067, %land.lhs.true23 ]
  %best_cost.1 = phi i32 [ %best_cost.068, %for.end ], [ %call31, %if.then28 ], [ %best_cost.068, %lor.lhs.false26 ], [ %best_cost.068, %land.lhs.true23 ]
  %indvars.iv.next70 = add i64 %indvars.iv69, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next70 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 25
  br i1 %exitcond, label %for.end35, label %for.cond1.preheader

for.end35:                                        ; preds = %for.inc33
  %cmp36 = icmp eq i32 %best_size.1, 0
  br i1 %cmp36, label %if.then37, label %if.end38

if.then37:                                        ; preds = %for.end35
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 706, i8* getelementptr inbounds ([17 x i8]* @__FUNCTION__.find_valid_class, i64 0, i64 0)) #8
  unreachable

if.end38:                                         ; preds = %for.end35
  ret i32 %best_class.1
}
