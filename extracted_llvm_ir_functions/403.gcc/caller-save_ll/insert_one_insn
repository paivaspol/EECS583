define internal fastcc %struct.insn_chain* @insert_one_insn(%struct.insn_chain* %chain, i32 %before_p, i32 %code, %struct.rtx_def* %pat) #0 {
entry:
  %insn1 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 4
  %0 = load %struct.rtx_def** %insn1, align 8, !tbaa !5
  %call = tail call %struct.insn_chain* @new_insn_chain() #4
  %tobool = icmp eq i32 %before_p, 0
  br i1 %tobool, label %if.else131, label %if.then

if.then:                                          ; preds = %entry
  %prev = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 1
  %1 = load %struct.insn_chain** %prev, align 8, !tbaa !5
  %prev2 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 1
  store %struct.insn_chain* %1, %struct.insn_chain** %prev2, align 8, !tbaa !5
  %cmp = icmp eq %struct.insn_chain* %1, null
  br i1 %cmp, label %if.else, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.insn_chain* %1, i64 0, i32 0
  store %struct.insn_chain* %call, %struct.insn_chain** %next, align 8, !tbaa !5
  br label %if.end

if.else:                                          ; preds = %if.then
  store %struct.insn_chain* %call, %struct.insn_chain** @reload_insn_chain, align 8, !tbaa !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  store %struct.insn_chain* %call, %struct.insn_chain** %prev, align 8, !tbaa !5
  %next7 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 0
  store %struct.insn_chain* %chain, %struct.insn_chain** %next7, align 8, !tbaa !5
  %call8 = tail call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %pat, %struct.rtx_def* %0) #4
  %insn9 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 4
  store %struct.rtx_def* %call8, %struct.rtx_def** %insn9, align 8, !tbaa !5
  %live_throughout = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 5
  %live_throughout10 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 5
  tail call void @bitmap_copy(%struct.bitmap_head_def* %live_throughout, %struct.bitmap_head_def* %live_throughout10) #4
  %2 = load %struct.rtx_def** %insn1, align 8, !tbaa !5
  %arrayidx = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 6
  %link.0.in259 = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %link.0260 = load %struct.rtx_def** %link.0.in259, align 8
  %tobool12261 = icmp eq %struct.rtx_def* %link.0260, null
  br i1 %tobool12261, label %for.end116, label %for.body

for.body:                                         ; preds = %if.end, %for.inc112
  %link.0262 = phi %struct.rtx_def* [ %link.0, %for.inc112 ], [ %link.0260, %if.end ]
  %3 = bitcast %struct.rtx_def* %link.0262 to i32*
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 16711680
  %cmp13 = icmp eq i32 %bf.clear, 65536
  br i1 %cmp13, label %if.then14, label %for.inc112

if.then14:                                        ; preds = %for.body
  %arrayidx16 = getelementptr inbounds %struct.rtx_def* %link.0262, i64 0, i32 1, i64 0
  %rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx17, align 8, !tbaa !5
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load18 = load i32* %5, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 61
  br i1 %cmp20, label %if.end22, label %if.then21

if.then21:                                        ; preds = %if.then14
  tail call void @fancy_abort(i8* getelementptr inbounds ([55 x i8]* @.str, i64 0, i64 0), i32 824, i8* getelementptr inbounds ([16 x i8]* @__FUNCTION__.insert_one_insn, i64 0, i64 0)) #5
  unreachable

if.end22:                                         ; preds = %if.then14
  %arrayidx24 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx24 to i32*
  %6 = load i32* %rtuint, align 4, !tbaa !3
  %cmp25 = icmp sgt i32 %6, 52
  br i1 %cmp25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %if.end22
  %idxprom = sext i32 %6 to i64
  %7 = load i16** @reg_renumber, align 8, !tbaa !5
  %arrayidx27 = getelementptr inbounds i16* %7, i64 %idxprom
  %8 = load i16* %arrayidx27, align 2, !tbaa !6
  %conv = sext i16 %8 to i32
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end22
  %regno.0 = phi i32 [ %conv, %if.then26 ], [ %6, %if.end22 ]
  %cmp29 = icmp slt i32 %regno.0, 0
  br i1 %cmp29, label %for.inc112, label %if.end32

if.end32:                                         ; preds = %if.end28
  %regno.0.off = add i32 %regno.0, -8
  %9 = icmp ult i32 %regno.0.off, 8
  %regno.0.off246 = add i32 %regno.0, -21
  %10 = icmp ult i32 %regno.0.off246, 8
  %or.cond = or i1 %9, %10
  %regno.0.off247 = add i32 %regno.0, -45
  %11 = icmp ult i32 %regno.0.off247, 8
  %or.cond253 = or i1 %or.cond, %11
  %regno.0.off248 = add i32 %regno.0, -29
  %12 = icmp ult i32 %regno.0.off248, 8
  %or.cond255 = or i1 %or.cond253, %12
  %bf.lshr55 = lshr i32 %bf.load18, 16
  %bf.clear56 = and i32 %bf.lshr55, 255
  br i1 %or.cond255, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end32
  %idxprom57250 = zext i32 %bf.clear56 to i64
  %arrayidx58 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom57250
  %13 = load i32* %arrayidx58, align 4, !tbaa !7
  %cmp59 = icmp eq i32 %13, 5
  br i1 %cmp59, label %for.body108, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp66 = icmp eq i32 %13, 6
  %phitmp = select i1 %cmp66, i32 2, i32 1
  br label %for.body108

cond.false:                                       ; preds = %if.end32
  switch i32 %bf.clear56, label %for.cond105.preheader [
    i32 18, label %cond.true73
    i32 24, label %cond.true82
  ]

cond.true73:                                      ; preds = %cond.false
  %14 = load i32* @target_flags, align 4, !tbaa !3
  %and = lshr i32 %14, 25
  %15 = and i32 %and, 1
  %16 = xor i32 %15, 3
  br label %for.body108

cond.true82:                                      ; preds = %cond.false
  %17 = load i32* @target_flags, align 4, !tbaa !3
  %and83 = lshr i32 %17, 24
  %18 = and i32 %and83, 2
  %19 = xor i32 %18, 6
  br label %for.body108

for.cond105.preheader:                            ; preds = %cond.false
  %idxprom90249 = zext i32 %bf.clear56 to i64
  %arrayidx91 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom90249
  %20 = load i8* %arrayidx91, align 1, !tbaa !1
  %conv92 = zext i8 %20 to i32
  %21 = load i32* @target_flags, align 4, !tbaa !3
  %and93 = lshr i32 %21, 23
  %22 = and i32 %and93, 4
  %23 = add i32 %22, 4
  %add = add i32 %conv92, -1
  %sub = add i32 %add, %23
  %div = sdiv i32 %sub, %23
  %cmp106257 = icmp sgt i32 %div, 0
  br i1 %cmp106257, label %for.body108, label %for.inc112

for.body108:                                      ; preds = %cond.true, %lor.rhs, %cond.true73, %cond.true82, %for.cond105.preheader, %for.body108
  %i.0258.in = phi i32 [ %i.0258, %for.body108 ], [ %div, %for.cond105.preheader ], [ %19, %cond.true82 ], [ %16, %cond.true73 ], [ %phitmp, %lor.rhs ], [ 2, %cond.true ]
  %i.0258 = add nsw i32 %i.0258.in, -1
  %add110 = add nsw i32 %i.0258, %regno.0
  tail call void @bitmap_set_bit(%struct.bitmap_head_def* %live_throughout, i32 %add110) #4
  %cmp106 = icmp sgt i32 %i.0258, 0
  br i1 %cmp106, label %for.body108, label %for.inc112

for.inc112:                                       ; preds = %for.cond105.preheader, %for.body108, %for.body, %if.end28
  %arrayidx114 = getelementptr inbounds %struct.rtx_def* %link.0262, i64 0, i32 1, i64 1
  %link.0.in = bitcast %union.rtunion_def* %arrayidx114 to %struct.rtx_def**
  %link.0 = load %struct.rtx_def** %link.0.in, align 8
  %tobool12 = icmp eq %struct.rtx_def* %link.0, null
  br i1 %tobool12, label %for.end116, label %for.body

for.end116:                                       ; preds = %for.inc112, %if.end
  %dead_or_set = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 6
  tail call void @bitmap_clear(%struct.bitmap_head_def* %dead_or_set) #4
  %24 = load %struct.rtx_def** %insn1, align 8, !tbaa !5
  %block = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 3
  %25 = load i32* %block, align 4, !tbaa !3
  %idxprom118 = sext i32 %25 to i64
  %26 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !5
  %data = getelementptr inbounds %struct.varray_head_tag* %26, i64 0, i32 4
  %bb = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx119 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb, i64 0, i64 %idxprom118
  %27 = load %struct.basic_block_def** %arrayidx119, align 8, !tbaa !5
  %head = getelementptr inbounds %struct.basic_block_def* %27, i64 0, i32 0
  %28 = load %struct.rtx_def** %head, align 8, !tbaa !5
  %cmp120 = icmp eq %struct.rtx_def* %24, %28
  br i1 %cmp120, label %if.then122, label %if.end170

if.then122:                                       ; preds = %for.end116
  %29 = load %struct.rtx_def** %insn9, align 8, !tbaa !5
  store %struct.rtx_def* %29, %struct.rtx_def** %head, align 8, !tbaa !5
  br label %if.end170

if.else131:                                       ; preds = %entry
  %next132 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 0
  %30 = load %struct.insn_chain** %next132, align 8, !tbaa !5
  %next133 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 0
  store %struct.insn_chain* %30, %struct.insn_chain** %next133, align 8, !tbaa !5
  %cmp135 = icmp eq %struct.insn_chain* %30, null
  br i1 %cmp135, label %if.end140, label %if.then137

if.then137:                                       ; preds = %if.else131
  %prev139 = getelementptr inbounds %struct.insn_chain* %30, i64 0, i32 1
  store %struct.insn_chain* %call, %struct.insn_chain** %prev139, align 8, !tbaa !5
  br label %if.end140

if.end140:                                        ; preds = %if.else131, %if.then137
  store %struct.insn_chain* %call, %struct.insn_chain** %next132, align 8, !tbaa !5
  %prev142 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 1
  store %struct.insn_chain* %chain, %struct.insn_chain** %prev142, align 8, !tbaa !5
  %call143 = tail call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %pat, %struct.rtx_def* %0) #4
  %insn144 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 4
  store %struct.rtx_def* %call143, %struct.rtx_def** %insn144, align 8, !tbaa !5
  %live_throughout145 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 5
  %live_throughout146 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 5
  tail call void @bitmap_copy(%struct.bitmap_head_def* %live_throughout145, %struct.bitmap_head_def* %live_throughout146) #4
  %31 = load %struct.rtx_def** %insn1, align 8, !tbaa !5
  %arrayidx149 = getelementptr inbounds %struct.rtx_def* %31, i64 0, i32 1, i64 3
  %rtx150 = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtx_def**
  %32 = load %struct.rtx_def** %rtx150, align 8, !tbaa !5
  %33 = bitcast %struct.bitmap_head_def* %live_throughout145 to i8*
  tail call void @note_stores(%struct.rtx_def* %32, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @add_stored_regs, i8* %33) #4
  %dead_or_set152 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 6
  tail call void @bitmap_clear(%struct.bitmap_head_def* %dead_or_set152) #4
  %34 = load %struct.rtx_def** %insn1, align 8, !tbaa !5
  %block154 = getelementptr inbounds %struct.insn_chain* %chain, i64 0, i32 3
  %35 = load i32* %block154, align 4, !tbaa !3
  %idxprom155 = sext i32 %35 to i64
  %36 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !5
  %data156 = getelementptr inbounds %struct.varray_head_tag* %36, i64 0, i32 4
  %bb157 = bitcast %union.varray_data_tag* %data156 to [1 x %struct.basic_block_def*]*
  %arrayidx158 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb157, i64 0, i64 %idxprom155
  %37 = load %struct.basic_block_def** %arrayidx158, align 8, !tbaa !5
  %end = getelementptr inbounds %struct.basic_block_def* %37, i64 0, i32 1
  %38 = load %struct.rtx_def** %end, align 8, !tbaa !5
  %cmp159 = icmp eq %struct.rtx_def* %34, %38
  br i1 %cmp159, label %if.then161, label %if.end170

if.then161:                                       ; preds = %if.end140
  %39 = load %struct.rtx_def** %insn144, align 8, !tbaa !5
  store %struct.rtx_def* %39, %struct.rtx_def** %end, align 8, !tbaa !5
  br label %if.end170

if.end170:                                        ; preds = %if.end140, %if.then161, %for.end116, %if.then122
  %40 = phi i32 [ %35, %if.end140 ], [ %35, %if.then161 ], [ %25, %for.end116 ], [ %25, %if.then122 ]
  %block172 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 3
  store i32 %40, i32* %block172, align 4, !tbaa !3
  %is_caller_save_insn = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 11
  %bf.load173 = load i8* %is_caller_save_insn, align 2
  %bf.set = or i8 %bf.load173, 8
  store i8 %bf.set, i8* %is_caller_save_insn, align 2
  %insn175 = getelementptr inbounds %struct.insn_chain* %call, i64 0, i32 4
  %41 = load %struct.rtx_def** %insn175, align 8, !tbaa !5
  %arrayidx177 = getelementptr inbounds %struct.rtx_def* %41, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx177 to i32*
  store i32 %code, i32* %rtint, align 4, !tbaa !3
  ret %struct.insn_chain* %call
}
