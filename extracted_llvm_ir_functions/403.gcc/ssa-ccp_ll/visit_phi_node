define internal fastcc void @visit_phi_node(%struct.rtx_def* nocapture %phi_node, %struct.basic_block_def* %block) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %phi_node, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %0 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %fld1 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1
  %rtx3 = bitcast [1 x %union.rtunion_def]* %fld1 to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx3, align 8, !tbaa !0
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx5 to i32*
  %2 = load i32* %rtuint, align 4, !tbaa !4
  %arrayidx10 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 1
  %rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx11, align 8, !tbaa !0
  %arrayidx13 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtvec_def**
  %4 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  %num_elem14 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 0
  %5 = load i32* %num_elem14, align 4, !tbaa !4
  %cmp105 = icmp eq i32 %5, 0
  br i1 %cmp105, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %i.0108 = phi i32 [ %add61, %for.inc ], [ 0, %entry ]
  %phi_node_expr.0107 = phi %struct.rtx_def* [ %phi_node_expr.1, %for.inc ], [ null, %entry ]
  %phi_node_lattice_val.0106 = phi i32 [ %phi_node_lattice_val.1, %for.inc ], [ 0, %entry ]
  %6 = load %struct.edge_list** @edges, align 8, !tbaa !0
  %add102 = or i32 %i.0108, 1
  %idxprom = zext i32 %add102 to i64
  %arrayidx15 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 1, i64 %idxprom
  %7 = load %struct.rtx_def** %arrayidx15, align 8, !tbaa !0
  %rtwint = getelementptr inbounds %struct.rtx_def* %7, i64 0, i32 1, i64 0, i32 0
  %8 = load i64* %rtwint, align 8, !tbaa !3
  %9 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !0
  %data = getelementptr inbounds %struct.varray_head_tag* %9, i64 0, i32 4
  %bb = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx18 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb, i64 0, i64 %8
  %10 = load %struct.basic_block_def** %arrayidx18, align 8, !tbaa !0
  %call = tail call i32 @find_edge_index(%struct.edge_list* %6, %struct.basic_block_def* %10, %struct.basic_block_def* %block) #3
  %div = lshr i32 %call, 6
  %idxprom19 = zext i32 %div to i64
  %11 = load %struct.simple_bitmap_def** @executable_edges, align 8, !tbaa !0
  %arrayidx20 = getelementptr inbounds %struct.simple_bitmap_def* %11, i64 0, i32 3, i64 %idxprom19
  %12 = load i64* %arrayidx20, align 8, !tbaa !3
  %13 = load %struct.edge_list** @edges, align 8, !tbaa !0
  %14 = load %struct.rtx_def** %arrayidx15, align 8, !tbaa !0
  %rtwint27 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 0, i32 0
  %15 = load i64* %rtwint27, align 8, !tbaa !3
  %16 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !0
  %data28 = getelementptr inbounds %struct.varray_head_tag* %16, i64 0, i32 4
  %bb29 = bitcast %union.varray_data_tag* %data28 to [1 x %struct.basic_block_def*]*
  %arrayidx30 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb29, i64 0, i64 %15
  %17 = load %struct.basic_block_def** %arrayidx30, align 8, !tbaa !0
  %call31 = tail call i32 @find_edge_index(%struct.edge_list* %13, %struct.basic_block_def* %17, %struct.basic_block_def* %block) #3
  %rem = and i32 %call31, 63
  %sh_prom = zext i32 %rem to i64
  %18 = shl i64 1, %sh_prom
  %and103 = and i64 %18, %12
  %tobool = icmp eq i64 %and103, 0
  br i1 %tobool, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %idxprom32 = zext i32 %i.0108 to i64
  %arrayidx34 = getelementptr inbounds %struct.rtvec_def* %4, i64 0, i32 1, i64 %idxprom32
  %19 = load %struct.rtx_def** %arrayidx34, align 8, !tbaa !0
  %arrayidx36 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 0
  %rtuint37 = bitcast %union.rtunion_def* %arrayidx36 to i32*
  %20 = load i32* %rtuint37, align 4, !tbaa !4
  %idxprom38 = zext i32 %20 to i64
  %21 = load %struct.value** @values, align 8, !tbaa !0
  %lattice_val = getelementptr inbounds %struct.value* %21, i64 %idxprom38, i32 0
  %22 = load i32* %lattice_val, align 4, !tbaa !1
  %cmp40 = icmp eq i32 %22, 2
  br i1 %cmp40, label %for.end, label %if.end

if.end:                                           ; preds = %if.then
  %cmp42 = icmp eq i32 %22, 1
  %cmp43 = icmp eq i32 %phi_node_lattice_val.0106, 1
  %or.cond = and i1 %cmp42, %cmp43
  br i1 %or.cond, label %land.lhs.true44, label %if.end49

land.lhs.true44:                                  ; preds = %if.end
  %const_value = getelementptr inbounds %struct.value* %21, i64 %idxprom38, i32 1
  %23 = load %struct.rtx_def** %const_value, align 8, !tbaa !0
  %cmp47 = icmp eq %struct.rtx_def* %23, %phi_node_expr.0107
  br i1 %cmp47, label %if.end49, label %for.end

if.end49:                                         ; preds = %land.lhs.true44, %if.end
  %notlhs = icmp ne i32 %phi_node_lattice_val.0106, 0
  %notrhs = icmp ne %struct.rtx_def* %phi_node_expr.0107, null
  %or.cond104.not = or i1 %notrhs, %notlhs
  %cmp42.not = xor i1 %cmp42, true
  %brmerge = or i1 %or.cond104.not, %cmp42.not
  br i1 %brmerge, label %for.inc, label %if.then55

if.then55:                                        ; preds = %if.end49
  %const_value58 = getelementptr inbounds %struct.value* %21, i64 %idxprom38, i32 1
  %24 = load %struct.rtx_def** %const_value58, align 8, !tbaa !0
  br label %for.inc

for.inc:                                          ; preds = %if.end49, %for.body, %if.then55
  %phi_node_lattice_val.1 = phi i32 [ 1, %if.then55 ], [ %phi_node_lattice_val.0106, %if.end49 ], [ %phi_node_lattice_val.0106, %for.body ]
  %phi_node_expr.1 = phi %struct.rtx_def* [ %24, %if.then55 ], [ %phi_node_expr.0107, %if.end49 ], [ %phi_node_expr.0107, %for.body ]
  %add61 = add i32 %i.0108, 2
  %cmp = icmp ult i32 %add61, %5
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %land.lhs.true44, %if.then, %entry
  %phi_node_lattice_val.2 = phi i32 [ 0, %entry ], [ 2, %if.then ], [ 2, %land.lhs.true44 ], [ %phi_node_lattice_val.1, %for.inc ]
  %phi_node_expr.2 = phi %struct.rtx_def* [ null, %entry ], [ null, %if.then ], [ null, %land.lhs.true44 ], [ %phi_node_expr.1, %for.inc ]
  %idxprom62 = zext i32 %2 to i64
  %25 = load %struct.value** @values, align 8, !tbaa !0
  %lattice_val64 = getelementptr inbounds %struct.value* %25, i64 %idxprom62, i32 0
  %26 = load i32* %lattice_val64, align 4, !tbaa !1
  %cmp65 = icmp eq i32 %phi_node_lattice_val.2, %26
  br i1 %cmp65, label %if.end79, label %if.then66

if.then66:                                        ; preds = %for.end
  store i32 %phi_node_lattice_val.2, i32* %lattice_val64, align 4, !tbaa !1
  %27 = load %struct.value** @values, align 8, !tbaa !0
  %const_value72 = getelementptr inbounds %struct.value* %27, i64 %idxprom62, i32 1
  store %struct.rtx_def* %phi_node_expr.2, %struct.rtx_def** %const_value72, align 8, !tbaa !0
  %rem73 = and i32 %2, 63
  %sh_prom74 = zext i32 %rem73 to i64
  %shl = shl i64 1, %sh_prom74
  %div75 = lshr i32 %2, 6
  %idxprom76 = zext i32 %div75 to i64
  %28 = load %struct.simple_bitmap_def** @ssa_edges, align 8, !tbaa !0
  %arrayidx78 = getelementptr inbounds %struct.simple_bitmap_def* %28, i64 0, i32 3, i64 %idxprom76
  %29 = load i64* %arrayidx78, align 8, !tbaa !3
  %or = or i64 %29, %shl
  store i64 %or, i64* %arrayidx78, align 8, !tbaa !3
  br label %if.end79

if.end79:                                         ; preds = %for.end, %if.then66
  ret void
}
