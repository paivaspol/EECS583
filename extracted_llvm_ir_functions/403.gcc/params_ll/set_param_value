define void @set_param_value(i8* %name, i32 %value) #0 {
entry:
  %cmp = icmp eq i32 %value, -1
  br i1 %cmp, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %0 = load i64* @num_compiler_params, align 8, !tbaa !3
  %cmp113 = icmp eq i64 %0, 0
  br i1 %cmp113, label %for.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %1 = load %struct.param_info** @compiler_params, align 8, !tbaa !0
  br label %for.body

if.then:                                          ; preds = %entry
  tail call void @abort() #6
  unreachable

for.cond:                                         ; preds = %for.body
  %cmp1 = icmp ult i64 %inc, %0
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %i.014 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.cond ]
  %option = getelementptr inbounds %struct.param_info* %1, i64 %i.014, i32 0
  %2 = load i8** %option, align 8, !tbaa !0
  %call = tail call i32 @strcmp(i8* %2, i8* %name) #7
  %cmp2 = icmp eq i32 %call, 0
  %inc = add i64 %i.014, 1
  br i1 %cmp2, label %if.then3, label %for.cond

if.then3:                                         ; preds = %for.body
  %value5 = getelementptr inbounds %struct.param_info* %1, i64 %i.014, i32 1
  store i32 %value, i32* %value5, align 4, !tbaa !4
  br label %return

for.end:                                          ; preds = %for.cond, %for.cond.preheader
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([23 x i8]* @.str, i64 0, i64 0), i8* %name) #5
  br label %return

return:                                           ; preds = %for.end, %if.then3
  ret void
}
