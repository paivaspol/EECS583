define void @merge_blocks_nomove(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 {
entry:
  %head = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 0
  %0 = load %struct.rtx_def** %head, align 8, !tbaa !0
  %end = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 1
  %1 = load %struct.rtx_def** %end, align 8, !tbaa !0
  %end1 = getelementptr inbounds %struct.basic_block_def* %a, i64 0, i32 1
  %2 = load %struct.rtx_def** %end1, align 8, !tbaa !0
  %3 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 36
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %entry
  %cmp2 = icmp eq %struct.rtx_def* %0, %1
  %. = zext i1 %cmp2 to i32
  %arrayidx = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %.phi.trans.insert = bitcast %struct.rtx_def* %4 to i32*
  %bf.load5.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then, %entry
  %bf.load5 = phi i32 [ %bf.load5.pre, %if.then ], [ %bf.load, %entry ]
  %b_head.0 = phi %struct.rtx_def* [ %4, %if.then ], [ %0, %entry ]
  %del_first.0 = phi %struct.rtx_def* [ %0, %if.then ], [ null, %entry ]
  %b_empty.1 = phi i32 [ %., %if.then ], [ 0, %entry ]
  %bf.clear6 = and i32 %bf.load5, 65535
  %cmp7 = icmp eq i32 %bf.clear6, 37
  br i1 %cmp7, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %if.end4
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %b_head.0, i64 0, i32 1, i64 4
  %rtint = bitcast %union.rtunion_def* %arrayidx9 to i32*
  %5 = load i32* %rtint, align 4, !tbaa !3
  %cmp10 = icmp eq i32 %5, -80
  br i1 %cmp10, label %if.then11, label %if.end20

if.then11:                                        ; preds = %land.lhs.true
  %cmp12 = icmp eq %struct.rtx_def* %b_head.0, %1
  %.b_empty.1 = select i1 %cmp12, i32 1, i32 %b_empty.1
  %tobool = icmp eq %struct.rtx_def* %del_first.0, null
  %del_first.1 = select i1 %tobool, %struct.rtx_def* %b_head.0, %struct.rtx_def* %del_first.0
  br label %if.end20

if.end20:                                         ; preds = %if.then11, %land.lhs.true, %if.end4
  %del_first.2 = phi %struct.rtx_def* [ %del_first.0, %land.lhs.true ], [ %del_first.0, %if.end4 ], [ %del_first.1, %if.then11 ]
  %del_last.1 = phi %struct.rtx_def* [ %del_first.0, %land.lhs.true ], [ %del_first.0, %if.end4 ], [ %b_head.0, %if.then11 ]
  %b_empty.3 = phi i32 [ %b_empty.1, %land.lhs.true ], [ %b_empty.1, %if.end4 ], [ %.b_empty.1, %if.then11 ]
  %6 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load21 = load i32* %6, align 8
  %bf.clear22 = and i32 %bf.load21, 65535
  %cmp23 = icmp eq i32 %bf.clear22, 33
  br i1 %cmp23, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.end20
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 1
  %rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**
  %head36 = getelementptr inbounds %struct.basic_block_def* %a, i64 0, i32 0
  %prev.0133 = load %struct.rtx_def** %rtx27, align 8
  %7 = bitcast %struct.rtx_def* %prev.0133 to i32*
  %bf.load28134 = load i32* %7, align 8
  %bf.clear29135 = and i32 %bf.load28134, 65535
  %cmp30136 = icmp eq i32 %bf.clear29135, 37
  br i1 %cmp30136, label %lor.lhs.false, label %while.cond.preheader

lor.lhs.false:                                    ; preds = %if.then24, %for.inc
  %prev.0137 = phi %struct.rtx_def* [ %prev.0, %for.inc ], [ %prev.0133, %if.then24 ]
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %prev.0137, i64 0, i32 1, i64 4
  %rtint33 = bitcast %union.rtunion_def* %arrayidx32 to i32*
  %8 = load i32* %rtint33, align 4, !tbaa !3
  %cmp34 = icmp eq i32 %8, -80
  br i1 %cmp34, label %while.cond.preheader, label %lor.lhs.false35

lor.lhs.false35:                                  ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def** %head36, align 8, !tbaa !0
  %cmp37 = icmp eq %struct.rtx_def* %prev.0137, %9
  br i1 %cmp37, label %while.cond.preheader, label %for.inc

for.inc:                                          ; preds = %lor.lhs.false35
  %arrayidx41 = getelementptr inbounds %struct.rtx_def* %prev.0137, i64 0, i32 1, i64 1
  %rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**
  %prev.0 = load %struct.rtx_def** %rtx42, align 8
  %10 = bitcast %struct.rtx_def* %prev.0 to i32*
  %bf.load28 = load i32* %10, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %cmp30 = icmp eq i32 %bf.clear29, 37
  br i1 %cmp30, label %lor.lhs.false, label %while.cond.preheader

if.else:                                          ; preds = %if.end20
  %arrayidx47 = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 2
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx48, align 8, !tbaa !0
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load49 = load i32* %12, align 8
  %bf.clear50 = and i32 %bf.load49, 65535
  %cmp51 = icmp eq i32 %bf.clear50, 35
  %.del_first.2 = select i1 %cmp51, %struct.rtx_def* %11, %struct.rtx_def* %del_first.2
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %if.then24, %lor.lhs.false35, %lor.lhs.false, %for.inc, %if.else
  %a_end.0.ph = phi %struct.rtx_def* [ %2, %if.else ], [ %prev.0133, %for.inc ], [ %prev.0133, %lor.lhs.false ], [ %prev.0133, %lor.lhs.false35 ], [ %prev.0133, %if.then24 ]
  %del_first.3.ph = phi %struct.rtx_def* [ %.del_first.2, %if.else ], [ %2, %for.inc ], [ %2, %lor.lhs.false ], [ %2, %lor.lhs.false35 ], [ %2, %if.then24 ]
  %succ = getelementptr inbounds %struct.basic_block_def* %a, i64 0, i32 5
  %13 = load %struct.edge_def** %succ, align 8, !tbaa !0
  %tobool58132 = icmp eq %struct.edge_def* %13, null
  br i1 %tobool58132, label %while.end, label %while.body

while.body:                                       ; preds = %while.cond.preheader, %while.body
  %14 = phi %struct.edge_def* [ %15, %while.body ], [ %13, %while.cond.preheader ]
  tail call void @remove_edge(%struct.edge_def* %14) #5
  %15 = load %struct.edge_def** %succ, align 8, !tbaa !0
  %tobool58 = icmp eq %struct.edge_def* %15, null
  br i1 %tobool58, label %while.end, label %while.body

while.end:                                        ; preds = %while.body, %while.cond.preheader
  %succ60 = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 5
  %e.0129 = load %struct.edge_def** %succ60, align 8
  %tobool62130 = icmp eq %struct.edge_def* %e.0129, null
  br i1 %tobool62130, label %for.end64, label %for.body

for.body:                                         ; preds = %while.end, %for.body
  %e.0131 = phi %struct.edge_def* [ %e.0, %for.body ], [ %e.0129, %while.end ]
  %src = getelementptr inbounds %struct.edge_def* %e.0131, i64 0, i32 2
  store %struct.basic_block_def* %a, %struct.basic_block_def** %src, align 8, !tbaa !0
  %succ_next = getelementptr inbounds %struct.edge_def* %e.0131, i64 0, i32 1
  %e.0 = load %struct.edge_def** %succ_next, align 8
  %tobool62 = icmp eq %struct.edge_def* %e.0, null
  br i1 %tobool62, label %for.cond61.for.end64_crit_edge, label %for.body

for.cond61.for.end64_crit_edge:                   ; preds = %for.body
  %.pre = load %struct.edge_def** %succ60, align 8, !tbaa !0
  br label %for.end64

for.end64:                                        ; preds = %for.cond61.for.end64_crit_edge, %while.end
  %16 = phi %struct.edge_def* [ %.pre, %for.cond61.for.end64_crit_edge ], [ null, %while.end ]
  store %struct.edge_def* %16, %struct.edge_def** %succ, align 8, !tbaa !0
  %pred = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 4
  %global_live_at_end = getelementptr inbounds %struct.basic_block_def* %b, i64 0, i32 9
  %17 = bitcast %struct.edge_def** %pred to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 16, i32 8, i1 false)
  %18 = load %struct.bitmap_head_def** %global_live_at_end, align 8, !tbaa !0
  %global_live_at_end68 = getelementptr inbounds %struct.basic_block_def* %a, i64 0, i32 9
  store %struct.bitmap_head_def* %18, %struct.bitmap_head_def** %global_live_at_end68, align 8, !tbaa !0
  tail call void @expunge_block(%struct.basic_block_def* %b) #5
  tail call void @delete_insn_chain(%struct.rtx_def* %del_first.3.ph, %struct.rtx_def* %del_last.1) #7
  %tobool69 = icmp eq i32 %b_empty.3, 0
  br i1 %tobool69, label %if.then70, label %if.end82

if.then70:                                        ; preds = %for.end64
  %19 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !0
  %tobool71 = icmp eq %struct.varray_head_tag* %19, null
  br i1 %tobool71, label %if.end82, label %for.cond73.preheader

for.cond73.preheader:                             ; preds = %if.then70
  %cmp74127 = icmp eq %struct.rtx_def* %a_end.0.ph, %1
  br i1 %cmp74127, label %for.end80, label %for.body75

for.body75:                                       ; preds = %for.cond73.preheader, %for.body75
  %x.0128 = phi %struct.rtx_def* [ %20, %for.body75 ], [ %a_end.0.ph, %for.cond73.preheader ]
  tail call void @set_block_for_insn(%struct.rtx_def* %x.0128, %struct.basic_block_def* %a) #7
  %arrayidx78 = getelementptr inbounds %struct.rtx_def* %x.0128, i64 0, i32 1, i64 2
  %rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**
  %20 = load %struct.rtx_def** %rtx79, align 8, !tbaa !0
  %cmp74 = icmp eq %struct.rtx_def* %20, %1
  br i1 %cmp74, label %for.end80, label %for.body75

for.end80:                                        ; preds = %for.body75, %for.cond73.preheader
  tail call void @set_block_for_insn(%struct.rtx_def* %1, %struct.basic_block_def* %a) #7
  br label %if.end82

if.end82:                                         ; preds = %for.end80, %if.then70, %for.end64
  %a_end.1 = phi %struct.rtx_def* [ %a_end.0.ph, %for.end64 ], [ %1, %if.then70 ], [ %1, %for.end80 ]
  store %struct.rtx_def* %a_end.1, %struct.rtx_def** %end1, align 8, !tbaa !0
  ret void
}
