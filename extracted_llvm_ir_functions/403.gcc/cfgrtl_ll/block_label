define %struct.rtx_def* @block_label(%struct.basic_block_def* %block) #0 {
entry:
  %cmp = icmp eq %struct.basic_block_def* %block, getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1)
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %head = getelementptr inbounds %struct.basic_block_def* %block, i64 0, i32 0
  %0 = load %struct.rtx_def** %head, align 8, !tbaa !0
  %1 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp1 = icmp eq i32 %bf.clear, 36
  br i1 %cmp1, label %return, label %if.then2

if.then2:                                         ; preds = %if.end
  %call = tail call %struct.rtx_def* @gen_label_rtx() #5
  %2 = load %struct.rtx_def** %head, align 8, !tbaa !0
  %call4 = tail call %struct.rtx_def* @emit_label_before(%struct.rtx_def* %call, %struct.rtx_def* %2) #5
  store %struct.rtx_def* %call4, %struct.rtx_def** %head, align 8, !tbaa !0
  %3 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !0
  %tobool = icmp eq %struct.varray_head_tag* %3, null
  br i1 %tobool, label %return, label %if.then6

if.then6:                                         ; preds = %if.then2
  tail call void @set_block_for_insn(%struct.rtx_def* %call4, %struct.basic_block_def* %block) #7
  %.pre = load %struct.rtx_def** %head, align 8, !tbaa !0
  br label %return

return:                                           ; preds = %if.then6, %if.end, %if.then2, %entry
  %retval.0 = phi %struct.rtx_def* [ null, %entry ], [ %call4, %if.then2 ], [ %0, %if.end ], [ %.pre, %if.then6 ]
  ret %struct.rtx_def* %retval.0
}
