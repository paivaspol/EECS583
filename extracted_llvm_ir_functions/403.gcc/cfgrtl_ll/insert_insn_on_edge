define void @insert_insn_on_edge(%struct.rtx_def* %pattern, %struct.edge_def* nocapture %e) #0 {
entry:
  %flags = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 6
  %0 = load i32* %flags, align 4, !tbaa !3
  %and = and i32 %0, 2
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %src = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 2
  %1 = load %struct.basic_block_def** %src, align 8, !tbaa !0
  %succ = getelementptr inbounds %struct.basic_block_def* %1, i64 0, i32 5
  %2 = load %struct.edge_def** %succ, align 8, !tbaa !0
  %succ_next = getelementptr inbounds %struct.edge_def* %2, i64 0, i32 1
  %3 = load %struct.edge_def** %succ_next, align 8, !tbaa !0
  %tobool1 = icmp eq %struct.edge_def* %3, null
  br i1 %tobool1, label %if.end, label %land.lhs.true2

land.lhs.true2:                                   ; preds = %land.lhs.true
  %dest = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 3
  %4 = load %struct.basic_block_def** %dest, align 8, !tbaa !0
  %pred = getelementptr inbounds %struct.basic_block_def* %4, i64 0, i32 4
  %5 = load %struct.edge_def** %pred, align 8, !tbaa !0
  %pred_next = getelementptr inbounds %struct.edge_def* %5, i64 0, i32 0
  %6 = load %struct.edge_def** %pred_next, align 8, !tbaa !0
  %tobool3 = icmp eq %struct.edge_def* %6, null
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true2
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 1280, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.insert_insn_on_edge, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %insns = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 4
  %7 = load %struct.rtx_def** %insns, align 8, !tbaa !0
  %cmp = icmp eq %struct.rtx_def* %7, null
  br i1 %cmp, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  tail call void @start_sequence() #5
  br label %if.end6

if.else:                                          ; preds = %if.end
  tail call void @push_to_sequence(%struct.rtx_def* %7) #5
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then4
  %call = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %pattern) #5
  %call7 = tail call %struct.rtx_def* @get_insns() #5
  store %struct.rtx_def* %call7, %struct.rtx_def** %insns, align 8, !tbaa !0
  tail call void @end_sequence() #5
  ret void
}
