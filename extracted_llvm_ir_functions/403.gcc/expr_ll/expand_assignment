define %struct.rtx_def* @expand_assignment(%union.tree_node* %to, %union.tree_node* %from, i32 %want_value, i32 %suggest_reg) #0 {
entry:
  %mode1 = alloca i32, align 4
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %offset = alloca %union.tree_node*, align 8
  %unsignedp = alloca i32, align 4
  %volatilep = alloca i32, align 4
  %code = getelementptr inbounds %union.tree_node* %to, i64 0, i32 0, i32 0, i32 2
  %0 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %if.end256 [
    i32 0, label %if.then
    i32 39, label %if.then23
    i32 40, label %if.then23
    i32 43, label %if.then23
    i32 44, label %if.then23
  ]

if.then:                                          ; preds = %entry
  %call = call %struct.rtx_def* @expand_expr(%union.tree_node* %from, %struct.rtx_def* null, i32 0, i32 0) #10
  %tobool = icmp ne i32 %want_value, 0
  %cond = select i1 %tobool, %struct.rtx_def* %call, %struct.rtx_def* null
  br label %return

if.then23:                                        ; preds = %entry, %entry, %entry, %entry
  store i32 0, i32* %volatilep, align 4, !tbaa !3
  call void @push_temp_slots() #8
  %call24 = call %union.tree_node* @get_inner_reference(%union.tree_node* %to, i64* %bitsize, i64* %bitpos, %union.tree_node** %offset, i32* %mode1, i32* %unsignedp, i32* %volatilep) #10
  %1 = load i32* %mode1, align 4, !tbaa !6
  %cmp25 = icmp ne i32 %1, 0
  %tobool26 = icmp eq i32 %want_value, 0
  %or.cond = or i1 %cmp25, %tobool26
  br i1 %or.cond, label %if.end29, label %if.then27

if.then27:                                        ; preds = %if.then23
  %call28 = call %union.tree_node* @stabilize_reference(%union.tree_node* %call24) #8
  br label %if.end29

if.end29:                                         ; preds = %if.then23, %if.then27
  %tem.0 = phi %union.tree_node* [ %call28, %if.then27 ], [ %call24, %if.then23 ]
  %call30 = call %struct.rtx_def* @expand_expr(%union.tree_node* %tem.0, %struct.rtx_def* null, i32 0, i32 0) #10
  %2 = load %union.tree_node** %offset, align 8, !tbaa !0
  %cmp31 = icmp eq %union.tree_node* %2, null
  br i1 %cmp31, label %if.end88, label %if.then32

if.then32:                                        ; preds = %if.end29
  %call33 = call %struct.rtx_def* @expand_expr(%union.tree_node* %2, %struct.rtx_def* null, i32 0, i32 1) #10
  %3 = bitcast %struct.rtx_def* %call30 to i32*
  %bf.load34 = load i32* %3, align 8
  %bf.clear35 = and i32 %bf.load34, 65535
  %cmp36 = icmp eq i32 %bf.clear35, 66
  br i1 %cmp36, label %if.end38, label %if.then37

if.then37:                                        ; preds = %if.then32
  call void @fancy_abort(i8* getelementptr inbounds ([48 x i8]* @.str, i64 0, i64 0), i32 3686, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.expand_assignment, i64 0, i64 0)) #9
  unreachable

if.end38:                                         ; preds = %if.then32
  %4 = bitcast %struct.rtx_def* %call33 to i32*
  %bf.load39 = load i32* %4, align 8
  %bf.lshr = lshr i32 %bf.load39, 16
  %bf.clear40 = and i32 %bf.lshr, 255
  %5 = load i32* @ptr_mode, align 4, !tbaa !6
  %cmp41 = icmp eq i32 %bf.clear40, %5
  br i1 %cmp41, label %if.end44, label %if.then42

if.then42:                                        ; preds = %if.end38
  %call.i = call %struct.rtx_def* @convert_modes(i32 %5, i32 0, %struct.rtx_def* %call33, i32 0) #8
  %bf.load45.pre = load i32* %3, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.end38, %if.then42
  %bf.load45 = phi i32 [ %bf.load45.pre, %if.then42 ], [ %bf.load34, %if.end38 ]
  %offset_rtx.0 = phi %struct.rtx_def* [ %call.i, %if.then42 ], [ %call33, %if.end38 ]
  %6 = and i32 %bf.load45, 16777215
  %7 = icmp eq i32 %6, 3342402
  br i1 %7, label %land.lhs.true53, label %if.end84

land.lhs.true53:                                  ; preds = %if.end44
  %fld = getelementptr inbounds %struct.rtx_def* %call30, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %9 = bitcast %struct.rtx_def* %8 to i32*
  %bf.load54 = load i32* %9, align 8
  %bf.clear56 = and i32 %bf.load54, 16711680
  %cmp57 = icmp eq i32 %bf.clear56, 0
  br i1 %cmp57, label %if.end84, label %land.lhs.true58

land.lhs.true58:                                  ; preds = %land.lhs.true53
  %10 = load i64* %bitsize, align 8, !tbaa !7
  %cmp59 = icmp sgt i64 %10, 0
  br i1 %cmp59, label %land.lhs.true60, label %if.end84

land.lhs.true60:                                  ; preds = %land.lhs.true58
  %11 = load i64* %bitpos, align 8, !tbaa !7
  %rem = srem i64 %11, %10
  %cmp61 = icmp eq i64 %rem, 0
  br i1 %cmp61, label %land.lhs.true62, label %if.end84

land.lhs.true62:                                  ; preds = %land.lhs.true60
  %call63 = call i32 @get_mode_alignment(i32 %1) #8
  %conv = zext i32 %call63 to i64
  %rem64 = srem i64 %10, %conv
  %cmp65 = icmp eq i64 %rem64, 0
  br i1 %cmp65, label %land.lhs.true67, label %if.end84

land.lhs.true67:                                  ; preds = %land.lhs.true62
  %arrayidx69 = getelementptr inbounds %struct.rtx_def* %call30, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx69 to %struct.mem_attrs**
  %12 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !0
  %cmp70 = icmp eq %struct.mem_attrs* %12, null
  br i1 %cmp70, label %cond.end77, label %cond.true72

cond.true72:                                      ; preds = %land.lhs.true67
  %align = getelementptr inbounds %struct.mem_attrs* %12, i64 0, i32 4
  %13 = load i32* %align, align 4, !tbaa !3
  br label %cond.end77

cond.end77:                                       ; preds = %land.lhs.true67, %cond.true72
  %cond78 = phi i32 [ %13, %cond.true72 ], [ 8, %land.lhs.true67 ]
  %call79 = call i32 @get_mode_alignment(i32 %1) #8
  %cmp80 = icmp eq i32 %cond78, %call79
  br i1 %cmp80, label %if.then82, label %if.end84

if.then82:                                        ; preds = %cond.end77
  %div = sdiv i64 %11, 8
  %call83 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %call30, i32 %1, i64 %div, i32 1, i32 1) #8
  store i64 0, i64* %bitpos, align 8, !tbaa !7
  br label %if.end84

if.end84:                                         ; preds = %land.lhs.true53, %if.then82, %cond.end77, %land.lhs.true62, %land.lhs.true60, %land.lhs.true58, %if.end44
  %to_rtx.0 = phi %struct.rtx_def* [ %call83, %if.then82 ], [ %call30, %cond.end77 ], [ %call30, %land.lhs.true62 ], [ %call30, %land.lhs.true60 ], [ %call30, %land.lhs.true58 ], [ %call30, %land.lhs.true53 ], [ %call30, %if.end44 ]
  %type = getelementptr inbounds %union.tree_node* %to, i64 0, i32 0, i32 0, i32 1
  %14 = load %union.tree_node** %type, align 8, !tbaa !0
  %call.i554 = call fastcc i64 @highest_pow2_factor(%union.tree_node* %2) #8
  %align.i = getelementptr inbounds %union.tree_node* %14, i64 0, i32 0, i32 7
  %15 = bitcast %union.tree_node** %align.i to i32*
  %16 = load i32* %15, align 4, !tbaa !3
  %div.i = lshr i32 %16, 3
  %conv.i = zext i32 %div.i to i64
  %cmp.i = icmp sgt i64 %call.i554, %conv.i
  %cond.i = select i1 %cmp.i, i64 %call.i554, i64 %conv.i
  %call87 = call %struct.rtx_def* @offset_address(%struct.rtx_def* %to_rtx.0, %struct.rtx_def* %offset_rtx.0, i64 %cond.i) #8
  br label %if.end88

if.end88:                                         ; preds = %if.end29, %if.end84
  %to_rtx.1 = phi %struct.rtx_def* [ %call87, %if.end84 ], [ %call30, %if.end29 ]
  %17 = bitcast %struct.rtx_def* %to_rtx.1 to i32*
  %bf.load89 = load i32* %17, align 8
  %bf.clear90 = and i32 %bf.load89, 65535
  %cmp91 = icmp eq i32 %bf.clear90, 66
  br i1 %cmp91, label %if.then93, label %if.end158

if.then93:                                        ; preds = %if.end88
  %arrayidx95 = getelementptr inbounds %struct.rtx_def* %to_rtx.1, i64 0, i32 1, i64 1
  %rtmem96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.mem_attrs**
  %18 = load %struct.mem_attrs** %rtmem96, align 8, !tbaa !0
  %cmp97 = icmp eq %struct.mem_attrs* %18, null
  br i1 %cmp97, label %cond.end104, label %cond.false100

cond.false100:                                    ; preds = %if.then93
  %expr = getelementptr inbounds %struct.mem_attrs* %18, i64 0, i32 1
  %19 = load %union.tree_node** %expr, align 8, !tbaa !0
  br label %cond.end104

cond.end104:                                      ; preds = %if.then93, %cond.false100
  %cond105 = phi %union.tree_node* [ %19, %cond.false100 ], [ null, %if.then93 ]
  %call106 = call %struct.rtx_def* @shallow_copy_rtx(%struct.rtx_def* %to_rtx.1) #8
  call void @set_mem_attributes(%struct.rtx_def* %call106, %union.tree_node* %to, i32 0) #8
  %arrayidx108 = getelementptr inbounds %struct.rtx_def* %call106, i64 0, i32 1, i64 1
  %rtmem109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.mem_attrs**
  %20 = load %struct.mem_attrs** %rtmem109, align 8, !tbaa !0
  %cmp110 = icmp eq %struct.mem_attrs* %20, null
  br i1 %cmp110, label %cond.end118, label %cond.false113

cond.false113:                                    ; preds = %cond.end104
  %expr117 = getelementptr inbounds %struct.mem_attrs* %20, i64 0, i32 1
  %21 = load %union.tree_node** %expr117, align 8, !tbaa !0
  br label %cond.end118

cond.end118:                                      ; preds = %cond.end104, %cond.false113
  %cond119 = phi %union.tree_node* [ %21, %cond.false113 ], [ null, %cond.end104 ]
  %cmp120 = icmp eq %union.tree_node* %cond119, %cond105
  %brmerge = or i1 %cmp120, %cmp110
  br i1 %brmerge, label %if.end158, label %cond.false129

cond.false129:                                    ; preds = %cond.end118
  %offset133 = getelementptr inbounds %struct.mem_attrs* %20, i64 0, i32 2
  %22 = load %struct.rtx_def** %offset133, align 8, !tbaa !0
  %tobool134 = icmp eq %struct.rtx_def* %22, null
  br i1 %tobool134, label %if.end158, label %land.lhs.true135

land.lhs.true135:                                 ; preds = %cond.false129
  %23 = load i64* %bitpos, align 8, !tbaa !7
  %.off = add i64 %23, 7
  %24 = icmp ugt i64 %.off, 14
  br i1 %24, label %if.then139, label %if.end158

if.then139:                                       ; preds = %land.lhs.true135
  %div136 = sdiv i64 %23, 8
  %rtwint = getelementptr inbounds %struct.rtx_def* %22, i64 0, i32 1, i64 0, i32 0
  %25 = load i64* %rtwint, align 8, !tbaa !7
  %sub = sub nsw i64 %25, %div136
  %call156 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub) #8
  call void @set_mem_offset(%struct.rtx_def* %call106, %struct.rtx_def* %call156) #8
  br label %if.end158

if.end158:                                        ; preds = %cond.end118, %cond.false129, %land.lhs.true135, %if.then139, %if.end88
  %to_rtx.2 = phi %struct.rtx_def* [ %call106, %if.then139 ], [ %call106, %land.lhs.true135 ], [ %call106, %cond.false129 ], [ %call106, %cond.end118 ], [ %to_rtx.1, %if.end88 ]
  %26 = load i32* %volatilep, align 4, !tbaa !3
  %tobool159 = icmp eq i32 %26, 0
  br i1 %tobool159, label %if.end173, label %land.lhs.true160

land.lhs.true160:                                 ; preds = %if.end158
  %27 = bitcast %struct.rtx_def* %to_rtx.2 to i32*
  %bf.load161 = load i32* %27, align 8
  %bf.clear162 = and i32 %bf.load161, 65535
  %cmp163 = icmp eq i32 %bf.clear162, 66
  br i1 %cmp163, label %if.then165, label %if.end173

if.then165:                                       ; preds = %land.lhs.true160
  %cmp166 = icmp eq %struct.rtx_def* %to_rtx.2, %call30
  br i1 %cmp166, label %if.then168, label %if.end170

if.then168:                                       ; preds = %if.then165
  %call169 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %call30) #8
  %.phi.trans.insert = bitcast %struct.rtx_def* %call169 to i32*
  %bf.load171.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end170

if.end170:                                        ; preds = %if.then168, %if.then165
  %bf.load171 = phi i32 [ %bf.load171.pre, %if.then168 ], [ %bf.load161, %if.then165 ]
  %to_rtx.3 = phi %struct.rtx_def* [ %call169, %if.then168 ], [ %to_rtx.2, %if.then165 ]
  %28 = bitcast %struct.rtx_def* %to_rtx.3 to i32*
  %bf.set = or i32 %bf.load171, 134217728
  store i32 %bf.set, i32* %28, align 8
  br label %if.end173

if.end173:                                        ; preds = %if.end158, %if.end170, %land.lhs.true160
  %to_rtx.4 = phi %struct.rtx_def* [ %to_rtx.3, %if.end170 ], [ %to_rtx.2, %land.lhs.true160 ], [ %to_rtx.2, %if.end158 ]
  %bf.load176 = load i32* %0, align 8
  %bf.clear177 = and i32 %bf.load176, 255
  %cmp178 = icmp eq i32 %bf.clear177, 39
  br i1 %cmp178, label %land.lhs.true180, label %if.end196

land.lhs.true180:                                 ; preds = %if.end173
  %operands = getelementptr inbounds %union.tree_node* %to, i64 0, i32 0, i32 2
  %arrayidx181 = getelementptr inbounds i32* %operands, i64 2
  %29 = bitcast i32* %arrayidx181 to %union.tree_node**
  %30 = load %union.tree_node** %29, align 8, !tbaa !0
  %readonly_flag = getelementptr inbounds %union.tree_node* %30, i64 0, i32 0, i32 0, i32 2
  %31 = bitcast [4 x i8]* %readonly_flag to i32*
  %bf.load183 = load i32* %31, align 8
  %bf.clear185 = and i32 %bf.load183, 4096
  %tobool186 = icmp eq i32 %bf.clear185, 0
  br i1 %tobool186, label %if.end196, label %if.then187

if.then187:                                       ; preds = %land.lhs.true180
  %cmp188 = icmp eq %struct.rtx_def* %to_rtx.4, %call30
  br i1 %cmp188, label %if.then190, label %if.end192

if.then190:                                       ; preds = %if.then187
  %call191 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %call30) #8
  br label %if.end192

if.end192:                                        ; preds = %if.then190, %if.then187
  %to_rtx.5 = phi %struct.rtx_def* [ %call191, %if.then190 ], [ %to_rtx.4, %if.then187 ]
  %32 = bitcast %struct.rtx_def* %to_rtx.5 to i32*
  %bf.load193 = load i32* %32, align 8
  %bf.set195 = or i32 %bf.load193, 67108864
  store i32 %bf.set195, i32* %32, align 8
  br label %if.end196

if.end196:                                        ; preds = %land.lhs.true180, %if.end173, %if.end192
  %to_rtx.6 = phi %struct.rtx_def* [ %to_rtx.5, %if.end192 ], [ %to_rtx.4, %if.end173 ], [ %to_rtx.4, %land.lhs.true180 ]
  %33 = bitcast %struct.rtx_def* %to_rtx.6 to i32*
  %bf.load197 = load i32* %33, align 8
  %bf.clear198 = and i32 %bf.load197, 65535
  %cmp199 = icmp eq i32 %bf.clear198, 66
  br i1 %cmp199, label %land.lhs.true201, label %if.end213

land.lhs.true201:                                 ; preds = %if.end196
  %call202 = call i32 @can_address_p(%union.tree_node* %to) #8
  %tobool203 = icmp eq i32 %call202, 0
  br i1 %tobool203, label %if.then204, label %if.end213

if.then204:                                       ; preds = %land.lhs.true201
  %cmp205 = icmp eq %struct.rtx_def* %to_rtx.6, %call30
  br i1 %cmp205, label %if.then207, label %if.end209

if.then207:                                       ; preds = %if.then204
  %call208 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %call30) #8
  br label %if.end209

if.end209:                                        ; preds = %if.then207, %if.then204
  %to_rtx.7 = phi %struct.rtx_def* [ %call208, %if.then207 ], [ %to_rtx.6, %if.then204 ]
  %34 = bitcast %struct.rtx_def* %to_rtx.7 to i32*
  %bf.load210 = load i32* %34, align 8
  %bf.set212 = or i32 %bf.load210, 16777216
  store i32 %bf.set212, i32* %34, align 8
  br label %if.end213

if.end213:                                        ; preds = %land.lhs.true201, %if.end196, %if.end209
  %to_rtx.8 = phi %struct.rtx_def* [ %to_rtx.7, %if.end209 ], [ %to_rtx.6, %if.end196 ], [ %to_rtx.6, %land.lhs.true201 ]
  %35 = load i64* %bitsize, align 8, !tbaa !7
  %36 = load i64* %bitpos, align 8, !tbaa !7
  %37 = load i32* %mode1, align 4, !tbaa !6
  %tobool214 = icmp ne i32 %want_value, 0
  br i1 %tobool214, label %cond.true215, label %cond.end223

cond.true215:                                     ; preds = %if.end213
  %type217 = getelementptr inbounds %union.tree_node* %to, i64 0, i32 0, i32 0, i32 1
  %38 = load %union.tree_node** %type217, align 8, !tbaa !0
  %type218 = bitcast %union.tree_node* %38 to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type218, i64 0, i32 6
  %39 = bitcast [4 x i8]* %mode to i32*
  %bf.load219 = load i32* %39, align 4
  %bf.lshr220 = lshr i32 %bf.load219, 9
  %bf.clear221 = and i32 %bf.lshr220, 127
  br label %cond.end223

cond.end223:                                      ; preds = %if.end213, %cond.true215
  %cond224 = phi i32 [ %bf.clear221, %cond.true215 ], [ 0, %if.end213 ]
  %40 = load i32* %unsignedp, align 4, !tbaa !3
  %type226 = getelementptr inbounds %union.tree_node* %tem.0, i64 0, i32 0, i32 0, i32 1
  %41 = load %union.tree_node** %type226, align 8, !tbaa !0
  %call227 = call i64 @get_alias_set(%union.tree_node* %to) #8
  %conv228 = trunc i64 %call227 to i32
  %call229 = call fastcc %struct.rtx_def* @store_field(%struct.rtx_def* %to_rtx.8, i64 %35, i64 %36, i32 %37, %union.tree_node* %from, i32 %cond224, i32 %40, %union.tree_node* %41, i32 %conv228) #10
  call void @preserve_temp_slots(%struct.rtx_def* %call229) #8
  call void @free_temp_slots() #8
  call void @pop_temp_slots() #8
  br i1 %tobool214, label %cond.true231, label %return

cond.true231:                                     ; preds = %cond.end223
  %type233 = getelementptr inbounds %union.tree_node* %to, i64 0, i32 0, i32 0, i32 1
  %42 = load %union.tree_node** %type233, align 8, !tbaa !0
  %type234 = bitcast %union.tree_node* %42 to %struct.tree_type*
  %mode235 = getelementptr inbounds %struct.tree_type* %type234, i64 0, i32 6
  %43 = bitcast [4 x i8]* %mode235 to i32*
  %bf.load236 = load i32* %43, align 4
  %bf.lshr237 = lshr i32 %bf.load236, 9
  %bf.clear238 = and i32 %bf.lshr237, 127
  %type240 = getelementptr inbounds %union.tree_node* %from, i64 0, i32 0, i32 0, i32 1
  %44 = load %union.tree_node** %type240, align 8, !tbaa !0
  %type241 = bitcast %union.tree_node* %44 to %struct.tree_type*
  %mode242 = getelementptr inbounds %struct.tree_type* %type241, i64 0, i32 6
  %45 = bitcast [4 x i8]* %mode242 to i32*
  %bf.load243 = load i32* %45, align 4
  %bf.lshr244 = lshr i32 %bf.load243, 9
  %bf.clear245 = and i32 %bf.lshr244, 127
  %unsigned_flag = getelementptr inbounds %union.tree_node* %42, i64 0, i32 0, i32 0, i32 2
  %46 = bitcast [4 x i8]* %unsigned_flag to i32*
  %bf.load249 = load i32* %46, align 8
  %bf.lshr250 = lshr i32 %bf.load249, 13
  %bf.clear251 = and i32 %bf.lshr250, 1
  %call252 = call %struct.rtx_def* @convert_modes(i32 %bf.clear238, i32 %bf.clear245, %struct.rtx_def* %call229, i32 %bf.clear251) #10
  br label %return

if.end256:                                        ; preds = %entry
  %code258 = getelementptr inbounds %union.tree_node* %from, i64 0, i32 0, i32 0, i32 2
  %47 = bitcast [4 x i8]* %code258 to i32*
  %bf.load259 = load i32* %47, align 8
  %bf.clear260 = and i32 %bf.load259, 255
  %cmp261 = icmp eq i32 %bf.clear260, 53
  br i1 %cmp261, label %land.lhs.true263, label %if.then340

land.lhs.true263:                                 ; preds = %if.end256
  %call264 = call i32 @aggregate_value_p(%union.tree_node* %from) #8
  %tobool265 = icmp eq i32 %call264, 0
  br i1 %tobool265, label %land.lhs.true266, label %if.then340

land.lhs.true266:                                 ; preds = %land.lhs.true263
  %type268 = getelementptr inbounds %union.tree_node* %from, i64 0, i32 0, i32 0, i32 1
  %48 = load %union.tree_node** %type268, align 8, !tbaa !0
  %size = getelementptr inbounds %union.tree_node* %48, i64 0, i32 0, i32 2
  %49 = bitcast i32* %size to %union.tree_node**
  %50 = load %union.tree_node** %49, align 8, !tbaa !0
  %code271 = getelementptr inbounds %union.tree_node* %50, i64 0, i32 0, i32 0, i32 2
  %51 = bitcast [4 x i8]* %code271 to i32*
  %bf.load272 = load i32* %51, align 8
  %bf.clear273 = and i32 %bf.load272, 255
  %cmp274 = icmp eq i32 %bf.clear273, 25
  br i1 %cmp274, label %land.lhs.true276, label %if.then340

land.lhs.true276:                                 ; preds = %land.lhs.true266
  %bf.load279 = load i32* %0, align 8
  %bf.clear280 = and i32 %bf.load279, 255
  %bf.clear280.off = add i32 %bf.clear280, -34
  %switch = icmp ult i32 %bf.clear280.off, 2
  br i1 %switch, label %land.lhs.true290, label %if.then304

land.lhs.true290:                                 ; preds = %land.lhs.true276
  %rtl = getelementptr inbounds %union.tree_node* %to, i64 0, i32 0, i32 17
  %52 = load %struct.rtx_def** %rtl, align 8, !tbaa !0
  %tobool291 = icmp eq %struct.rtx_def* %52, null
  br i1 %tobool291, label %cond.false295, label %cond.end298

cond.false295:                                    ; preds = %land.lhs.true290
  call void @make_decl_rtl(%union.tree_node* %to, i8* null) #8
  %53 = load %struct.rtx_def** %rtl, align 8, !tbaa !0
  br label %cond.end298

cond.end298:                                      ; preds = %land.lhs.true290, %cond.false295
  %cond299 = phi %struct.rtx_def* [ %53, %cond.false295 ], [ %52, %land.lhs.true290 ]
  %54 = bitcast %struct.rtx_def* %cond299 to i32*
  %bf.load300 = load i32* %54, align 8
  %bf.clear301 = and i32 %bf.load300, 65535
  %cmp302 = icmp eq i32 %bf.clear301, 61
  br i1 %cmp302, label %if.then340, label %if.then304

if.then304:                                       ; preds = %land.lhs.true276, %cond.end298
  call void @push_temp_slots() #8
  %call305 = call %struct.rtx_def* @expand_expr(%union.tree_node* %from, %struct.rtx_def* null, i32 0, i32 0) #10
  %call309 = call %struct.rtx_def* @expand_expr(%union.tree_node* %to, %struct.rtx_def* null, i32 0, i32 4) #10
  %55 = bitcast %struct.rtx_def* %call309 to i32*
  %bf.load311 = load i32* %55, align 8
  %bf.clear312 = and i32 %bf.load311, 65535
  %cmp313 = icmp eq i32 %bf.clear312, 39
  br i1 %cmp313, label %if.then315, label %if.else

if.then315:                                       ; preds = %if.then304
  %56 = load %union.tree_node** %type268, align 8, !tbaa !0
  %call318 = call i64 @int_size_in_bytes(%union.tree_node* %56) #8
  %conv319 = trunc i64 %call318 to i32
  call void @emit_group_load(%struct.rtx_def* %call309, %struct.rtx_def* %call305, i32 %conv319) #10
  br label %if.end331

if.else:                                          ; preds = %if.then304
  %bf.clear322 = and i32 %bf.load311, 16711680
  %cmp323 = icmp eq i32 %bf.clear322, 3342336
  br i1 %cmp323, label %if.then325, label %if.else328

if.then325:                                       ; preds = %if.else
  %call326 = call %struct.rtx_def* @expr_size(%union.tree_node* %from) #8
  %call327 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %call309, %struct.rtx_def* %call305, %struct.rtx_def* %call326) #10
  br label %if.end331

if.else328:                                       ; preds = %if.else
  %call329 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call309, %struct.rtx_def* %call305) #10
  br label %if.end331

if.end331:                                        ; preds = %if.then325, %if.else328, %if.then315
  call void @preserve_temp_slots(%struct.rtx_def* %call309) #8
  call void @free_temp_slots() #8
  call void @pop_temp_slots() #8
  %tobool332 = icmp ne i32 %want_value, 0
  %cond336 = select i1 %tobool332, %struct.rtx_def* %call309, %struct.rtx_def* null
  br label %return

if.then340:                                       ; preds = %if.end256, %land.lhs.true266, %cond.end298, %land.lhs.true263
  %call341 = call %struct.rtx_def* @expand_expr(%union.tree_node* %to, %struct.rtx_def* null, i32 0, i32 4) #10
  %bf.load345 = load i32* %0, align 8
  %bf.clear346 = and i32 %bf.load345, 255
  %cmp347 = icmp eq i32 %bf.clear346, 36
  br i1 %cmp347, label %land.lhs.true349, label %if.end440

land.lhs.true349:                                 ; preds = %if.then340
  %57 = bitcast %struct.rtx_def* %call341 to i32*
  %bf.load350 = load i32* %57, align 8
  %bf.clear351 = and i32 %bf.load350, 65535
  switch i32 %bf.clear351, label %land.lhs.true388 [
    i32 61, label %if.then359
    i32 39, label %if.then359
  ]

if.then359:                                       ; preds = %land.lhs.true349, %land.lhs.true349
  call void @push_temp_slots() #8
  %bf.load360 = load i32* %57, align 8
  %bf.lshr361 = lshr i32 %bf.load360, 16
  %bf.clear362 = and i32 %bf.lshr361, 255
  %call363 = call %struct.rtx_def* @expand_expr(%union.tree_node* %from, %struct.rtx_def* null, i32 %bf.clear362, i32 0) #10
  %bf.load364 = load i32* %57, align 8
  %bf.clear365 = and i32 %bf.load364, 65535
  %cmp366 = icmp eq i32 %bf.clear365, 39
  br i1 %cmp366, label %if.then368, label %if.else373

if.then368:                                       ; preds = %if.then359
  %type370 = getelementptr inbounds %union.tree_node* %from, i64 0, i32 0, i32 0, i32 1
  %58 = load %union.tree_node** %type370, align 8, !tbaa !0
  %call371 = call i64 @int_size_in_bytes(%union.tree_node* %58) #8
  %conv372 = trunc i64 %call371 to i32
  call void @emit_group_load(%struct.rtx_def* %call341, %struct.rtx_def* %call363, i32 %conv372) #10
  br label %if.end375

if.else373:                                       ; preds = %if.then359
  %call374 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call341, %struct.rtx_def* %call363) #10
  br label %if.end375

if.end375:                                        ; preds = %if.else373, %if.then368
  call void @preserve_temp_slots(%struct.rtx_def* %call341) #8
  call void @free_temp_slots() #8
  call void @pop_temp_slots() #8
  %tobool376 = icmp ne i32 %want_value, 0
  %cond380 = select i1 %tobool376, %struct.rtx_def* %call341, %struct.rtx_def* null
  br label %return

land.lhs.true388:                                 ; preds = %land.lhs.true349
  %bf.load391 = load i32* %47, align 8
  %bf.clear392 = and i32 %bf.load391, 255
  %cmp393 = icmp eq i32 %bf.clear392, 41
  br i1 %cmp393, label %land.lhs.true395, label %if.end440

land.lhs.true395:                                 ; preds = %land.lhs.true388
  %59 = load %struct.function** @cfun, align 8, !tbaa !0
  %returns_struct = getelementptr inbounds %struct.function* %59, i64 0, i32 56
  %60 = bitcast [4 x i8]* %returns_struct to i32*
  %bf.load396 = load i32* %60, align 8
  %61 = and i32 %bf.load396, 3
  %62 = icmp eq i32 %61, 1
  br i1 %62, label %if.then404, label %if.end440

if.then404:                                       ; preds = %land.lhs.true395
  call void @push_temp_slots() #8
  %call406 = call %struct.rtx_def* @expr_size(%union.tree_node* %from) #8
  %call407 = call %struct.rtx_def* @expand_expr(%union.tree_node* %from, %struct.rtx_def* null, i32 0, i32 0) #10
  %63 = load %struct.rtx_def** getelementptr inbounds ([97 x %struct.rtx_def*]* @libfunc_table, i64 0, i64 12), align 8, !tbaa !0
  %arrayidx409 = getelementptr inbounds %struct.rtx_def* %call341, i64 0, i32 1, i64 0
  %rtx410 = bitcast %union.rtunion_def* %arrayidx409 to %struct.rtx_def**
  %64 = load %struct.rtx_def** %rtx410, align 8, !tbaa !0
  %65 = load i32* @target_flags, align 4, !tbaa !3
  %and = lshr i32 %65, 25
  %66 = and i32 %and, 1
  %67 = or i32 %66, 4
  %arrayidx414 = getelementptr inbounds %struct.rtx_def* %call407, i64 0, i32 1, i64 0
  %rtx415 = bitcast %union.rtunion_def* %arrayidx414 to %struct.rtx_def**
  %68 = load %struct.rtx_def** %rtx415, align 8, !tbaa !0
  %69 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !0
  %type419 = bitcast %union.tree_node* %69 to %struct.tree_type*
  %mode420 = getelementptr inbounds %struct.tree_type* %type419, i64 0, i32 6
  %70 = bitcast [4 x i8]* %mode420 to i32*
  %bf.load421 = load i32* %70, align 4
  %bf.lshr422 = lshr i32 %bf.load421, 9
  %bf.clear423 = and i32 %bf.lshr422, 127
  %unsigned_flag425 = getelementptr inbounds %union.tree_node* %69, i64 0, i32 0, i32 0, i32 2
  %71 = bitcast [4 x i8]* %unsigned_flag425 to i32*
  %bf.load426 = load i32* %71, align 8
  %bf.lshr427 = lshr i32 %bf.load426, 13
  %bf.clear428 = and i32 %bf.lshr427, 1
  %call.i555 = call %struct.rtx_def* @convert_modes(i32 %bf.clear423, i32 0, %struct.rtx_def* %call406, i32 %bf.clear428) #8
  %72 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !0
  %type430 = bitcast %union.tree_node* %72 to %struct.tree_type*
  %mode431 = getelementptr inbounds %struct.tree_type* %type430, i64 0, i32 6
  %73 = bitcast [4 x i8]* %mode431 to i32*
  %bf.load432 = load i32* %73, align 4
  %bf.lshr433 = lshr i32 %bf.load432, 9
  %bf.clear434 = and i32 %bf.lshr433, 127
  call void (%struct.rtx_def*, i32, i32, i32, ...)* @emit_library_call(%struct.rtx_def* %63, i32 0, i32 0, i32 3, %struct.rtx_def* %64, i32 %67, %struct.rtx_def* %68, i32 %67, %struct.rtx_def* %call.i555, i32 %bf.clear434) #8
  call void @preserve_temp_slots(%struct.rtx_def* %call341) #8
  call void @free_temp_slots() #8
  call void @pop_temp_slots() #8
  %tobool435 = icmp ne i32 %want_value, 0
  %cond439 = select i1 %tobool435, %struct.rtx_def* %call341, %struct.rtx_def* null
  br label %return

if.end440:                                        ; preds = %if.then340, %land.lhs.true395, %land.lhs.true388
  call void @push_temp_slots() #8
  %call441 = call %struct.rtx_def* @store_expr(%union.tree_node* %from, %struct.rtx_def* %call341, i32 %want_value) #10
  call void @preserve_temp_slots(%struct.rtx_def* %call441) #8
  call void @free_temp_slots() #8
  call void @pop_temp_slots() #8
  %tobool442 = icmp ne i32 %want_value, 0
  %cond446 = select i1 %tobool442, %struct.rtx_def* %call441, %struct.rtx_def* null
  br label %return

return:                                           ; preds = %cond.true231, %cond.end223, %if.end440, %if.then404, %if.end375, %if.end331, %if.then
  %retval.0 = phi %struct.rtx_def* [ %cond, %if.then ], [ %cond380, %if.end375 ], [ %cond446, %if.end440 ], [ %cond439, %if.then404 ], [ %cond336, %if.end331 ], [ %call252, %cond.true231 ], [ null, %cond.end223 ]
  ret %struct.rtx_def* %retval.0
}
