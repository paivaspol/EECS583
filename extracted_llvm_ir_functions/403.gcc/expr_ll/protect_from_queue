define %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %x, i32 %modify) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %x to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 71
  br i1 %cmp, label %if.end84, label %if.then

if.then:                                          ; preds = %entry
  %cmp1 = icmp eq i32 %bf.clear, 66
  %cmp1.not = xor i1 %cmp1, true
  %bf.clear3 = and i32 %bf.load, 16711680
  %cmp4 = icmp eq i32 %bf.clear3, 3342336
  %or.cond165 = or i1 %cmp4, %cmp1.not
  br i1 %or.cond165, label %if.end36, label %land.lhs.true5

land.lhs.true5:                                   ; preds = %if.then
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load6 = load i32* %2, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  %cmp8 = icmp eq i32 %bf.clear7, 71
  %tobool = icmp eq i32 %modify, 0
  %or.cond166 = and i1 %cmp8, %tobool
  br i1 %or.cond166, label %if.then10, label %if.end36

if.then10:                                        ; preds = %land.lhs.true5
  %fld14 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1
  %rtx16 = bitcast [1 x %union.rtunion_def]* %fld14 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx16, align 8, !tbaa !0
  %call = tail call %struct.rtx_def* @replace_equiv_address_nv(%struct.rtx_def* %x, %struct.rtx_def* %3) #8
  %arrayidx18 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 1
  %rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx19, align 8, !tbaa !0
  %tobool20 = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool20, label %if.end, label %if.then21

if.then21:                                        ; preds = %if.then10
  %bf.load22 = load i32* %0, align 8
  %bf.lshr23 = lshr i32 %bf.load22, 16
  %bf.clear24 = and i32 %bf.lshr23, 255
  %call25 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear24) #8
  %call26 = tail call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %call25, %struct.rtx_def* %call) #8
  %5 = load %struct.rtx_def** %rtx19, align 8, !tbaa !0
  %call30 = tail call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call26, %struct.rtx_def* %5) #8
  br label %return

if.end:                                           ; preds = %if.then10
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx33, align 8, !tbaa !0
  %call34 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %6) #8
  %call35 = tail call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %call, %struct.rtx_def* %call34) #8
  br label %return

if.end36:                                         ; preds = %if.then, %land.lhs.true5
  br i1 %cmp1, label %if.then38, label %if.else

if.then38:                                        ; preds = %if.end36
  %arrayidx40 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx41, align 8, !tbaa !0
  %call42 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %7, i32 0) #10
  %8 = load %struct.rtx_def** %rtx41, align 8, !tbaa !0
  %cmp46 = icmp eq %struct.rtx_def* %call42, %8
  br i1 %cmp46, label %return, label %if.then47

if.then47:                                        ; preds = %if.then38
  %call48 = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %x) #8
  %9 = getelementptr inbounds %struct.rtx_def* %call48, i64 0, i32 1, i64 0, i32 0
  %call42.c = ptrtoint %struct.rtx_def* %call42 to i64
  store i64 %call42.c, i64* %9, align 8, !tbaa !0
  br label %return

if.else:                                          ; preds = %if.end36
  switch i32 %bf.clear, label %return [
    i32 78, label %if.then55
    i32 75, label %if.then55
  ]

if.then55:                                        ; preds = %if.else, %if.else
  %fld56 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %rtx58 = bitcast [1 x %union.rtunion_def]* %fld56 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx58, align 8, !tbaa !0
  %call59 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %10, i32 0) #10
  %arrayidx61 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx62, align 8, !tbaa !0
  %call63 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %11, i32 0) #10
  %12 = load %struct.rtx_def** %rtx58, align 8, !tbaa !0
  %cmp67 = icmp eq %struct.rtx_def* %call59, %12
  br i1 %cmp67, label %lor.lhs.false68, label %if.then73

lor.lhs.false68:                                  ; preds = %if.then55
  %13 = load %struct.rtx_def** %rtx62, align 8, !tbaa !0
  %cmp72 = icmp eq %struct.rtx_def* %call63, %13
  br i1 %cmp72, label %return, label %if.then73

if.then73:                                        ; preds = %lor.lhs.false68, %if.then55
  %call74 = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %x) #8
  %14 = getelementptr inbounds %struct.rtx_def* %call74, i64 0, i32 1, i64 0, i32 0
  %call59.c = ptrtoint %struct.rtx_def* %call59 to i64
  store i64 %call59.c, i64* %14, align 8, !tbaa !0
  %15 = getelementptr inbounds %struct.rtx_def* %call74, i64 0, i32 1, i64 1, i32 0
  %call63.c = ptrtoint %struct.rtx_def* %call63 to i64
  store i64 %call63.c, i64* %15, align 8, !tbaa !0
  br label %return

if.end84:                                         ; preds = %entry
  %fld85 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1
  %arrayidx86 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**
  %16 = load %struct.rtx_def** %rtx87, align 8, !tbaa !0
  %cmp88 = icmp eq %struct.rtx_def* %16, null
  br i1 %cmp88, label %if.then89, label %if.end94

if.then89:                                        ; preds = %if.end84
  %rtx92 = bitcast [1 x %union.rtunion_def]* %fld85 to %struct.rtx_def**
  %17 = load %struct.rtx_def** %rtx92, align 8, !tbaa !0
  %call93 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %17) #8
  br label %return

if.end94:                                         ; preds = %if.end84
  %arrayidx96 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 2
  %rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx97, align 8, !tbaa !0
  %cmp98 = icmp eq %struct.rtx_def* %18, null
  br i1 %cmp98, label %if.end103, label %return

if.end103:                                        ; preds = %if.end94
  %rtx106 = bitcast [1 x %union.rtunion_def]* %fld85 to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx106, align 8, !tbaa !0
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load107 = load i32* %20, align 8
  %bf.lshr108 = lshr i32 %bf.load107, 16
  %bf.clear109 = and i32 %bf.lshr108, 255
  %call110 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear109) #8
  %21 = getelementptr inbounds %union.rtunion_def* %arrayidx96, i64 0, i32 0
  %call110.c = ptrtoint %struct.rtx_def* %call110 to i64
  store i64 %call110.c, i64* %21, align 8, !tbaa !0
  %22 = load %struct.rtx_def** %rtx106, align 8, !tbaa !0
  %call120 = tail call %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %call110, %struct.rtx_def* %22) #8
  %23 = load %struct.rtx_def** %rtx87, align 8, !tbaa !0
  %call124 = tail call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call120, %struct.rtx_def* %23) #8
  %24 = load %struct.rtx_def** %rtx97, align 8, !tbaa !0
  br label %return

return:                                           ; preds = %if.end94, %if.then47, %if.then73, %lor.lhs.false68, %if.then38, %if.else, %if.end103, %if.then89, %if.end, %if.then21
  %retval.0 = phi %struct.rtx_def* [ %call25, %if.then21 ], [ %call35, %if.end ], [ %call93, %if.then89 ], [ %24, %if.end103 ], [ %call48, %if.then47 ], [ %x, %if.then38 ], [ %call74, %if.then73 ], [ %x, %lor.lhs.false68 ], [ %x, %if.else ], [ %18, %if.end94 ]
  ret %struct.rtx_def* %retval.0
}
