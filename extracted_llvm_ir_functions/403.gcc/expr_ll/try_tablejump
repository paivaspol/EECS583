define i32 @try_tablejump(%union.tree_node* %index_type, %union.tree_node* %index_expr, %union.tree_node* %minval, %union.tree_node* %range, %struct.rtx_def* %table_label, %struct.rtx_def* %default_label) #0 {
entry:
  %call = tail call %union.tree_node* @convert(%union.tree_node* %index_type, %union.tree_node* %index_expr) #8
  %call1 = tail call %union.tree_node* @convert(%union.tree_node* %index_type, %union.tree_node* %minval) #8
  %call2 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %index_type, %union.tree_node* %call, %union.tree_node* %call1) #8
  %call3 = tail call %union.tree_node* @fold(%union.tree_node* %call2) #8
  %call4 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %call3, %struct.rtx_def* null, i32 0, i32 0) #10
  tail call void @emit_queue() #10
  %call5 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %call4, i32 0) #10
  tail call void @do_pending_stack_adjust() #10
  %type = bitcast %union.tree_node* %index_type to %struct.tree_type*
  %mode = getelementptr inbounds %struct.tree_type* %type, i64 0, i32 6
  %0 = bitcast [4 x i8]* %mode to i32*
  %bf.load = load i32* %0, align 4
  %bf.lshr = lshr i32 %bf.load, 9
  %bf.clear = and i32 %bf.lshr, 127
  %type11 = getelementptr inbounds %union.tree_node* %range, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type11, align 8, !tbaa !0
  %type12 = bitcast %union.tree_node* %1 to %struct.tree_type*
  %mode13 = getelementptr inbounds %struct.tree_type* %type12, i64 0, i32 6
  %2 = bitcast [4 x i8]* %mode13 to i32*
  %bf.load14 = load i32* %2, align 4
  %bf.lshr15 = lshr i32 %bf.load14, 9
  %bf.clear16 = and i32 %bf.lshr15, 127
  %call17 = tail call %struct.rtx_def* @expand_expr(%union.tree_node* %range, %struct.rtx_def* null, i32 0, i32 0) #10
  %3 = load %union.tree_node** %type11, align 8, !tbaa !0
  %unsigned_flag = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast [4 x i8]* %unsigned_flag to i32*
  %bf.load21 = load i32* %4, align 8
  %bf.lshr22 = lshr i32 %bf.load21, 13
  %bf.clear23 = and i32 %bf.lshr22, 1
  %call24 = tail call %struct.rtx_def* @convert_modes(i32 %bf.clear, i32 %bf.clear16, %struct.rtx_def* %call17, i32 %bf.clear23) #10
  tail call void @emit_cmp_and_jump_insns(%struct.rtx_def* %call5, %struct.rtx_def* %call24, i32 109, %struct.rtx_def* null, i32 %bf.clear, i32 1, %struct.rtx_def* %default_label) #8
  %5 = load i32* @target_flags, align 4, !tbaa !3
  %and.i = lshr i32 %5, 25
  %6 = and i32 %and.i, 1
  %7 = or i32 %6, 4
  %cmp.i = icmp eq i32 %7, %bf.clear
  br i1 %cmp.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %call.i.i = tail call %struct.rtx_def* @convert_modes(i32 %7, i32 0, %struct.rtx_def* %call5, i32 1) #8
  %.pre.i = load i32* @target_flags, align 4, !tbaa !3
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %entry
  %8 = phi i32 [ %.pre.i, %if.then.i ], [ %5, %entry ]
  %index.addr.0.i = phi %struct.rtx_def* [ %call.i.i, %if.then.i ], [ %call5, %entry ]
  %and4.i = and i32 %8, 33554432
  %tobool5.i = icmp eq i32 %and4.i, 0
  %9 = lshr exact i32 %and4.i, 25
  %10 = or i32 %9, 4
  br i1 %tobool5.i, label %lor.end.i, label %lor.rhs.i

lor.rhs.i:                                        ; preds = %if.end.i
  %11 = load i32* @flag_pic, align 4, !tbaa !3
  %tobool12.i = icmp ne i32 %11, 0
  %phitmp56.i = select i1 %tobool12.i, i64 4, i64 5
  br label %lor.end.i

lor.end.i:                                        ; preds = %lor.rhs.i, %if.end.i
  %12 = phi i64 [ 4, %if.end.i ], [ %phitmp56.i, %lor.rhs.i ]
  %arrayidx.i = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %12
  %13 = load i8* %arrayidx.i, align 1, !tbaa !1
  %conv.i = zext i8 %13 to i64
  %call14.i = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv.i) #8
  %call15.i = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 78, i32 %10, %struct.rtx_def* %index.addr.0.i, %struct.rtx_def* %call14.i) #8
  %14 = load i32* @target_flags, align 4, !tbaa !3
  %and16.i = lshr i32 %14, 25
  %15 = and i32 %and16.i, 1
  %16 = or i32 %15, 4
  %call19.i = tail call %struct.rtx_def* @gen_rtx_fmt_u00(i32 67, i32 %16, %struct.rtx_def* %table_label) #8
  %call20.i = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %10, %struct.rtx_def* %call15.i, %struct.rtx_def* %call19.i) #8
  %17 = load i32* @target_flags, align 4, !tbaa !3
  %and21.i = and i32 %17, 33554432
  %tobool22.i = icmp eq i32 %and21.i, 0
  br i1 %tobool22.i, label %lor.end25.i, label %lor.rhs23.i

lor.rhs23.i:                                      ; preds = %lor.end.i
  %18 = load i32* @flag_pic, align 4, !tbaa !3
  %tobool24.i = icmp ne i32 %18, 0
  %phitmp.i = select i1 %tobool24.i, i32 4, i32 5
  br label %lor.end25.i

lor.end25.i:                                      ; preds = %lor.rhs23.i, %lor.end.i
  %19 = phi i32 [ 4, %lor.end.i ], [ %phitmp.i, %lor.rhs23.i ]
  %call27.i = tail call %struct.rtx_def* @memory_address_noforce(i32 %19, %struct.rtx_def* %call20.i) #8
  %20 = load i32* @target_flags, align 4, !tbaa !3
  %and28.i = and i32 %20, 33554432
  %tobool29.i = icmp eq i32 %and28.i, 0
  br i1 %tobool29.i, label %lor.end32.i, label %lor.rhs30.i

lor.rhs30.i:                                      ; preds = %lor.end25.i
  %21 = load i32* @flag_pic, align 4, !tbaa !3
  %tobool31.i = icmp ne i32 %21, 0
  %phitmp57.i = select i1 %tobool31.i, i32 4, i32 5
  br label %lor.end32.i

lor.end32.i:                                      ; preds = %lor.rhs30.i, %lor.end25.i
  %22 = phi i32 [ 4, %lor.end25.i ], [ %phitmp57.i, %lor.rhs30.i ]
  %call34.i = tail call %struct.rtx_def* @gen_reg_rtx(i32 %22) #8
  %23 = load i32* @target_flags, align 4, !tbaa !3
  %and35.i = and i32 %23, 33554432
  %tobool36.i = icmp eq i32 %and35.i, 0
  br i1 %tobool36.i, label %lor.end39.i, label %lor.rhs37.i

lor.rhs37.i:                                      ; preds = %lor.end32.i
  %24 = load i32* @flag_pic, align 4, !tbaa !3
  %tobool38.i = icmp ne i32 %24, 0
  %phitmp58.i = select i1 %tobool38.i, i32 4, i32 5
  br label %lor.end39.i

lor.end39.i:                                      ; preds = %lor.rhs37.i, %lor.end32.i
  %25 = phi i32 [ 4, %lor.end32.i ], [ %phitmp58.i, %lor.rhs37.i ]
  %call41.i = tail call %struct.rtx_def* @gen_rtx_MEM(i32 %25, %struct.rtx_def* %call27.i) #8
  %26 = bitcast %struct.rtx_def* %call41.i to i32*
  %bf.load.i = load i32* %26, align 8
  %bf.set.i = or i32 %bf.load.i, 67108864
  store i32 %bf.set.i, i32* %26, align 8
  tail call void @convert_move(%struct.rtx_def* %call34.i, %struct.rtx_def* %call41.i, i32 0) #8
  %call42.i = tail call %struct.rtx_def* @gen_tablejump(%struct.rtx_def* %call34.i, %struct.rtx_def* %table_label) #8
  %call43.i = tail call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %call42.i) #8
  %27 = load i32* @flag_pic, align 4, !tbaa !3
  %tobool44.i = icmp eq i32 %27, 0
  br i1 %tobool44.i, label %if.then45.i, label %do_tablejump.exit

if.then45.i:                                      ; preds = %lor.end39.i
  %call46.i = tail call %struct.rtx_def* @emit_barrier() #8
  br label %do_tablejump.exit

do_tablejump.exit:                                ; preds = %lor.end39.i, %if.then45.i
  ret i32 1
}
