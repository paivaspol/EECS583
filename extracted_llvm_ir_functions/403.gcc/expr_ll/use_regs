define void @use_regs(%struct.rtx_def** nocapture %call_fusage, i32 %regno, i32 %nregs) #0 {
entry:
  %add = add nsw i32 %nregs, %regno
  %cmp = icmp sgt i32 %add, 53
  br i1 %cmp, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %cmp110 = icmp sgt i32 %nregs, 0
  br i1 %cmp110, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %0 = sext i32 %regno to i64
  br label %for.body

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([48 x i8]* @.str, i64 0, i64 0), i32 2280, i8* getelementptr inbounds ([9 x i8]* @__FUNCTION__.use_regs, i64 0, i64 0)) #9
  unreachable

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %1 = add nsw i64 %indvars.iv, %0
  %arrayidx = getelementptr inbounds [53 x i32]* @reg_raw_mode, i64 0, i64 %1
  %2 = load i32* %arrayidx, align 4, !tbaa !6
  %3 = trunc i64 %1 to i32
  %call = tail call %struct.rtx_def* @gen_rtx_REG(i32 %2, i32 %3) #8
  tail call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %call) #10
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %nregs
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %for.cond.preheader
  ret void
}
