define internal fastcc void @emit_single_push_insn(i32 %mode, %struct.rtx_def* %x, %union.tree_node* %type) #0 {
entry:
  %0 = load i32* @target_flags, align 4, !tbaa !3
  %and = and i32 %0, 33554432
  %tobool = icmp eq i32 %and, 0
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  %conv = zext i8 %1 to i32
  br i1 %tobool, label %cond.false15, label %cond.true9

cond.true9:                                       ; preds = %entry
  %add = add nsw i32 %conv, 7
  %and1 = and i32 %add, 504
  %add13 = add nsw i32 %conv, 7
  %and14 = and i32 %add13, 504
  br label %cond.end21

cond.false15:                                     ; preds = %entry
  %add5 = add nsw i32 %conv, 1
  %and6 = and i32 %add5, 510
  %add19 = add nsw i32 %conv, 1
  %and20 = and i32 %add19, 510
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false15, %cond.true9
  %cond85 = phi i32 [ %and1, %cond.true9 ], [ %and6, %cond.false15 ]
  %cond22 = phi i32 [ %and14, %cond.true9 ], [ %and20, %cond.false15 ]
  %2 = load %struct.function** @cfun, align 8, !tbaa !0
  %expr = getelementptr inbounds %struct.function* %2, i64 0, i32 2
  %3 = load %struct.expr_status** %expr, align 8, !tbaa !0
  %x_stack_pointer_delta = getelementptr inbounds %struct.expr_status* %3, i64 0, i32 2
  %4 = load i32* %x_stack_pointer_delta, align 4, !tbaa !3
  %add23 = add nsw i32 %4, %cond22
  store i32 %add23, i32* %x_stack_pointer_delta, align 4, !tbaa !3
  %5 = load %struct.optab** getelementptr inbounds ([49 x %struct.optab*]* @optab_table, i64 0, i64 48), align 8, !tbaa !0
  %insn_code = getelementptr inbounds %struct.optab* %5, i64 0, i32 1, i64 %idxprom, i32 0
  %6 = load i32* %insn_code, align 4, !tbaa !8
  %cmp = icmp eq i32 %6, 1317
  br i1 %cmp, label %if.end38, label %if.then

if.then:                                          ; preds = %cond.end21
  %idxprom27 = sext i32 %6 to i64
  %operand = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom27, i32 3
  %7 = load %struct.insn_operand_data** %operand, align 8, !tbaa !0
  %predicate = getelementptr inbounds %struct.insn_operand_data* %7, i64 0, i32 0
  %8 = load i32 (%struct.rtx_def*, i32)** %predicate, align 8, !tbaa !0
  %tobool30 = icmp eq i32 (%struct.rtx_def*, i32)* %8, null
  br i1 %tobool30, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.then
  %call = tail call i32 %8(%struct.rtx_def* %x, i32 %mode) #8
  %tobool31 = icmp eq i32 %call, 0
  br i1 %tobool31, label %if.then32, label %if.end

if.then32:                                        ; preds = %land.lhs.true
  %call33 = tail call %struct.rtx_def* @force_reg(i32 %mode, %struct.rtx_def* %x) #8
  br label %if.end

if.end:                                           ; preds = %land.lhs.true, %if.then, %if.then32
  %x.addr.0 = phi %struct.rtx_def* [ %x, %land.lhs.true ], [ %call33, %if.then32 ], [ %x, %if.then ]
  %genfun = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom27, i32 2
  %9 = load %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !tbaa !0
  %call36 = tail call %struct.rtx_def* (%struct.rtx_def*, ...)* %9(%struct.rtx_def* %x.addr.0) #8
  %call37 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call36) #8
  br label %return

if.end38:                                         ; preds = %cond.end21
  %cmp42 = icmp eq i32 %conv, %cond85
  %10 = load i32* @target_flags, align 4, !tbaa !3
  %and45 = lshr i32 %10, 25
  %11 = and i32 %and45, 1
  %12 = or i32 %11, 4
  %13 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !0
  br i1 %cmp42, label %if.then44, label %if.else

if.then44:                                        ; preds = %if.end38
  %call48 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 96, i32 %12, %struct.rtx_def* %13) #8
  br label %if.end59

if.else:                                          ; preds = %if.end38
  %conv52 = zext i32 %cond85 to i64
  %sub = sub nsw i64 0, %conv52
  %call53 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub) #8
  %call54 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 75, i32 %12, %struct.rtx_def* %13, %struct.rtx_def* %call53) #8
  %14 = load i32* @target_flags, align 4, !tbaa !3
  %and55 = lshr i32 %14, 25
  %15 = and i32 %and55, 1
  %16 = or i32 %15, 4
  %17 = load %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 8, !tbaa !0
  %call58 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 100, i32 %16, %struct.rtx_def* %17, %struct.rtx_def* %call54) #8
  br label %if.end59

if.end59:                                         ; preds = %if.else, %if.then44
  %dest_addr.0 = phi %struct.rtx_def* [ %call48, %if.then44 ], [ %call58, %if.else ]
  %call60 = tail call %struct.rtx_def* @gen_rtx_MEM(i32 %mode, %struct.rtx_def* %dest_addr.0) #8
  %cmp61 = icmp eq %union.tree_node* %type, null
  br i1 %cmp61, label %if.end67, label %if.then63

if.then63:                                        ; preds = %if.end59
  tail call void @set_mem_attributes(%struct.rtx_def* %call60, %union.tree_node* %type, i32 1) #8
  %18 = load i32* @flag_optimize_sibling_calls, align 4, !tbaa !3
  %tobool64 = icmp eq i32 %18, 0
  br i1 %tobool64, label %if.end67, label %if.then65

if.then65:                                        ; preds = %if.then63
  tail call void @set_mem_alias_set(%struct.rtx_def* %call60, i64 0) #8
  br label %if.end67

if.end67:                                         ; preds = %if.then63, %if.end59, %if.then65
  %call68 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call60, %struct.rtx_def* %x) #10
  br label %return

return:                                           ; preds = %if.end67, %if.end
  ret void
}
