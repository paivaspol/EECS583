define void @do_jump_by_parts_equality_rtx(%struct.rtx_def* %op0, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %op0 to i32*
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom60 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom60
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  %conv = zext i8 %1 to i32
  %2 = load i32* @target_flags, align 4, !tbaa !3
  %and = lshr i32 %2, 23
  %3 = and i32 %and, 4
  %4 = add i32 %3, 4
  %div = sdiv i32 %conv, %4
  %5 = load i32* @word_mode, align 4, !tbaa !6
  %call = tail call %struct.rtx_def* @gen_reg_rtx(i32 %5) #8
  %bf.load1 = load i32* %0, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  %call4 = tail call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %op0, i32 0, i32 %bf.clear3) #8
  %call5 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call, %struct.rtx_def* %call4) #10
  %cmp63 = icmp slt i32 %div, 2
  %cmp764 = icmp eq %struct.rtx_def* %call, null
  %or.cond65 = or i1 %cmp63, %cmp764
  br i1 %or.cond65, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.body
  %i.067 = phi i32 [ %inc, %for.body ], [ 1, %entry ]
  %part.066 = phi %struct.rtx_def* [ %call13, %for.body ], [ %call, %entry ]
  %6 = load i32* @word_mode, align 4, !tbaa !6
  %7 = load %struct.optab** getelementptr inbounds ([49 x %struct.optab*]* @optab_table, i64 0, i64 19), align 8, !tbaa !0
  %bf.load9 = load i32* %0, align 8
  %bf.lshr10 = lshr i32 %bf.load9, 16
  %bf.clear11 = and i32 %bf.lshr10, 255
  %call12 = tail call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %op0, i32 %i.067, i32 %bf.clear11) #8
  %call13 = tail call %struct.rtx_def* @expand_binop(i32 %6, %struct.optab* %7, %struct.rtx_def* %part.066, %struct.rtx_def* %call12, %struct.rtx_def* %part.066, i32 1, i32 2) #8
  %inc = add nsw i32 %i.067, 1
  %cmp = icmp sge i32 %inc, %div
  %cmp7 = icmp eq %struct.rtx_def* %call13, null
  %or.cond = or i1 %cmp, %cmp7
  br i1 %or.cond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  %cmp7.lcssa = phi i1 [ %cmp764, %entry ], [ %cmp7, %for.body ]
  %part.0.lcssa = phi %struct.rtx_def* [ %call, %entry ], [ %call13, %for.body ]
  br i1 %cmp7.lcssa, label %if.end, label %if.then

if.then:                                          ; preds = %for.end
  %8 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !0
  %9 = load i32* @word_mode, align 4, !tbaa !6
  tail call void @do_compare_rtx_and_jump(%struct.rtx_def* %part.0.lcssa, %struct.rtx_def* %8, i32 103, i32 1, i32 %9, %struct.rtx_def* null, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #10
  br label %if.end37

if.end:                                           ; preds = %for.end
  %tobool16 = icmp eq %struct.rtx_def* %if_false_label, null
  br i1 %tobool16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.end
  %call18 = tail call %struct.rtx_def* @gen_label_rtx() #8
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then17
  %if_false_label.addr.0 = phi %struct.rtx_def* [ %if_false_label, %if.end ], [ %call18, %if.then17 ]
  %drop_through_label.0 = phi %struct.rtx_def* [ null, %if.end ], [ %call18, %if.then17 ]
  %cmp2161 = icmp sgt i32 %div, 0
  br i1 %cmp2161, label %for.body23, label %for.end30

for.body23:                                       ; preds = %if.end19, %for.body23
  %i.162 = phi i32 [ %inc29, %for.body23 ], [ 0, %if.end19 ]
  %bf.load24 = load i32* %0, align 8
  %bf.lshr25 = lshr i32 %bf.load24, 16
  %bf.clear26 = and i32 %bf.lshr25, 255
  %call27 = tail call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %op0, i32 %i.162, i32 %bf.clear26) #8
  %10 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !0
  %11 = load i32* @word_mode, align 4, !tbaa !6
  tail call void @do_compare_rtx_and_jump(%struct.rtx_def* %call27, %struct.rtx_def* %10, i32 103, i32 1, i32 %11, %struct.rtx_def* null, %struct.rtx_def* %if_false_label.addr.0, %struct.rtx_def* null) #10
  %inc29 = add nsw i32 %i.162, 1
  %exitcond = icmp eq i32 %inc29, %div
  br i1 %exitcond, label %for.end30, label %for.body23

for.end30:                                        ; preds = %for.body23, %if.end19
  %tobool31 = icmp eq %struct.rtx_def* %if_true_label, null
  br i1 %tobool31, label %if.end33, label %if.then32

if.then32:                                        ; preds = %for.end30
  tail call void @emit_jump(%struct.rtx_def* %if_true_label) #8
  br label %if.end33

if.end33:                                         ; preds = %for.end30, %if.then32
  %tobool34 = icmp eq %struct.rtx_def* %drop_through_label.0, null
  br i1 %tobool34, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end33
  %call36 = tail call %struct.rtx_def* @emit_label(%struct.rtx_def* %drop_through_label.0) #8
  br label %if.end37

if.end37:                                         ; preds = %if.end33, %if.then, %if.then35
  ret void
}
