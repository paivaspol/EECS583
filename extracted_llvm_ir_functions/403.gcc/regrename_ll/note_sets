define internal void @note_sets(%struct.rtx_def* nocapture %x, %struct.rtx_def* nocapture %set, i8* nocapture %data) #0 {
entry:
  %0 = bitcast i8* %data to i64*
  %1 = bitcast %struct.rtx_def* %x to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %if.end, label %while.end

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx to i32*
  %2 = load i32* %rtuint, align 4, !tbaa !3
  %.off = add i32 %2, -8
  %3 = icmp ult i32 %.off, 8
  %.off84 = add i32 %2, -21
  %4 = icmp ult i32 %.off84, 8
  %or.cond = or i1 %3, %4
  %.off85 = add i32 %2, -45
  %5 = icmp ult i32 %.off85, 8
  %or.cond91 = or i1 %or.cond, %5
  %.off86 = add i32 %2, -29
  %6 = icmp ult i32 %.off86, 8
  %or.cond93 = or i1 %or.cond91, %6
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear15 = and i32 %bf.lshr, 255
  br i1 %or.cond93, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %idxprom88 = zext i32 %bf.clear15 to i64
  %arrayidx16 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom88
  %7 = load i32* %arrayidx16, align 4, !tbaa !6
  %cmp17 = icmp eq i32 %7, 5
  br i1 %cmp17, label %cond.end54, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp23 = icmp eq i32 %7, 6
  %phitmp = select i1 %cmp23, i32 2, i32 1
  br label %cond.end54

cond.false:                                       ; preds = %if.end
  switch i32 %bf.clear15, label %cond.false39 [
    i32 18, label %cond.true28
    i32 24, label %cond.true35
  ]

cond.true28:                                      ; preds = %cond.false
  %8 = load i32* @target_flags, align 4, !tbaa !3
  %and = lshr i32 %8, 25
  %9 = and i32 %and, 1
  %10 = xor i32 %9, 3
  br label %cond.end54

cond.true35:                                      ; preds = %cond.false
  %11 = load i32* @target_flags, align 4, !tbaa !3
  %and36 = lshr i32 %11, 24
  %12 = and i32 %and36, 2
  %13 = xor i32 %12, 6
  br label %cond.end54

cond.false39:                                     ; preds = %cond.false
  %idxprom4387 = zext i32 %bf.clear15 to i64
  %arrayidx44 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom4387
  %14 = load i8* %arrayidx44, align 1, !tbaa !1
  %conv = zext i8 %14 to i32
  %15 = load i32* @target_flags, align 4, !tbaa !3
  %and45 = lshr i32 %15, 23
  %16 = and i32 %and45, 4
  %17 = add i32 %16, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %17
  %div = sdiv i32 %sub, %17
  br label %cond.end54

cond.end54:                                       ; preds = %cond.true, %lor.rhs, %cond.true28, %cond.false39, %cond.true35
  %cond55 = phi i32 [ %10, %cond.true28 ], [ %13, %cond.true35 ], [ %div, %cond.false39 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ]
  %add56 = add i32 %cond55, %2
  %cmp57 = icmp ugt i32 %add56, 53
  br i1 %cmp57, label %if.then59, label %while.cond.preheader

while.cond.preheader:                             ; preds = %cond.end54
  %cmp6195 = icmp sgt i32 %cond55, 0
  br i1 %cmp6195, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %.promoted = load i64* %0, align 8, !tbaa !7
  br label %while.body

if.then59:                                        ; preds = %cond.end54
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str40, i64 0, i64 0), i32 119, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.note_sets, i64 0, i64 0)) #7
  unreachable

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %or97 = phi i64 [ %.promoted, %while.body.lr.ph ], [ %or, %while.body ]
  %dec96.in = phi i32 [ %cond55, %while.body.lr.ph ], [ %dec96, %while.body ]
  %dec96 = add nsw i32 %dec96.in, -1
  %add63 = add i32 %dec96, %2
  %sh_prom = zext i32 %add63 to i64
  %shl = shl i64 1, %sh_prom
  %or = or i64 %or97, %shl
  %cmp61 = icmp sgt i32 %dec96, 0
  br i1 %cmp61, label %while.body, label %while.cond.while.end.loopexit_crit_edge

while.cond.while.end.loopexit_crit_edge:          ; preds = %while.body
  store i64 %or, i64* %0, align 8, !tbaa !7
  br label %while.end

while.end:                                        ; preds = %while.cond.preheader, %while.cond.while.end.loopexit_crit_edge, %entry
  ret void
}
