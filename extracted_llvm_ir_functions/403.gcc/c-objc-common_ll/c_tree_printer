define internal i32 @c_tree_printer(%struct.output_buffer* %buffer) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.output_buffer* %buffer}, i64 0, metadata !1059), !dbg !1240
  %format_args = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 0, i32 8, !dbg !1241
  %0 = load [1 x %struct.__va_list_tag]** %format_args, align 8, !dbg !1241, !tbaa !1165
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %0, i64 0, i64 0, i32 0, !dbg !1241
  %gp_offset = load i32* %gp_offset_p, align 4, !dbg !1241
  %fits_in_gp = icmp ult i32 %gp_offset, 41, !dbg !1241
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !1241

vaarg.in_reg:                                     ; preds = %entry
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag]* %0, i64 0, i64 0, i32 3, !dbg !1241
  %reg_save_area = load i8** %1, align 8, !dbg !1241
  %2 = sext i32 %gp_offset to i64, !dbg !1241
  %3 = getelementptr i8* %reg_save_area, i64 %2, !dbg !1241
  %4 = add i32 %gp_offset, 8, !dbg !1241
  store i32 %4, i32* %gp_offset_p, align 4, !dbg !1241
  br label %vaarg.end, !dbg !1241

vaarg.in_mem:                                     ; preds = %entry
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %0, i64 0, i64 0, i32 2, !dbg !1241
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8, !dbg !1241
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8, !dbg !1241
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !1241
  br label %vaarg.end, !dbg !1241

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %3, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to %union.tree_node**, !dbg !1241
  %5 = load %union.tree_node** %vaarg.addr, align 8, !dbg !1241
  tail call void @llvm.dbg.value(metadata !{%union.tree_node* %5}, i64 0, metadata !1060), !dbg !1241
  %cursor = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 0, i32 7, !dbg !1242
  %6 = load i8** %cursor, align 8, !dbg !1242, !tbaa !1165
  %7 = load i8* %6, align 1, !dbg !1242, !tbaa !1163
  %conv = sext i8 %7 to i32, !dbg !1242
  switch i32 %conv, label %return [
    i32 68, label %sw.bb
    i32 70, label %sw.bb
    i32 84, label %sw.bb
  ], !dbg !1242

sw.bb:                                            ; preds = %vaarg.end, %vaarg.end, %vaarg.end
  %name = getelementptr inbounds %union.tree_node* %5, i64 0, i32 0, i32 8, !dbg !1243
  %8 = load %union.tree_node** %name, align 8, !dbg !1243, !tbaa !1165
  %tobool = icmp eq %union.tree_node* %8, null, !dbg !1243
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !1243

cond.true:                                        ; preds = %sw.bb
  %9 = load i8* (%union.tree_node*, i32)** @decl_printable_name, align 8, !dbg !1244, !tbaa !1165
  %call = tail call i8* %9(%union.tree_node* %5, i32 2) #4, !dbg !1244
  br label %cond.end, !dbg !1244

cond.end:                                         ; preds = %sw.bb, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ getelementptr inbounds ([14 x i8]* @.str2, i64 0, i64 0), %sw.bb ], !dbg !1244
  tail call void @llvm.dbg.value(metadata !{i8* %cond}, i64 0, metadata !1061), !dbg !1244
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %cond) #4, !dbg !1245
  br label %return, !dbg !1246

return:                                           ; preds = %vaarg.end, %cond.end
  %retval.0 = phi i32 [ 1, %cond.end ], [ 0, %vaarg.end ]
  ret i32 %retval.0, !dbg !1247
}
