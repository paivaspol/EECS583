define internal fastcc i32 @add_equal_note(%struct.rtx_def* nocapture %seq, %struct.rtx_def* %target, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1) #0 {
entry:
  %idxprom = sext i32 %code to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom
  %0 = load i8* %arrayidx, align 1, !tbaa !1
  switch i8 %0, label %return [
    i8 49, label %lor.lhs.false
    i8 50, label %lor.lhs.false
    i8 99, label %lor.lhs.false
    i8 60, label %lor.lhs.false
  ]

lor.lhs.false:                                    ; preds = %entry, %entry, %entry, %entry
  %1 = bitcast %struct.rtx_def* %seq to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp19 = icmp eq i32 %bf.clear, 24
  br i1 %cmp19, label %lor.lhs.false21, label %return

lor.lhs.false21:                                  ; preds = %lor.lhs.false
  %arrayidx22 = getelementptr inbounds %struct.rtx_def* %seq, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtvec_def**
  %2 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  %num_elem = getelementptr inbounds %struct.rtvec_def* %2, i64 0, i32 0
  %3 = load i32* %num_elem, align 4, !tbaa !5
  %sub = add nsw i32 %3, -1
  %idxprom23 = sext i32 %sub to i64
  %arrayidx27 = getelementptr inbounds %struct.rtvec_def* %2, i64 0, i32 1, i64 %idxprom23
  %4 = load %struct.rtx_def** %arrayidx27, align 8, !tbaa !0
  %5 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load28 = load i32* %5, align 8
  %bf.clear29 = and i32 %bf.load28, 65535
  %idxprom30212 = zext i32 %bf.clear29 to i64
  %arrayidx31 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom30212
  %6 = load i8* %arrayidx31, align 1, !tbaa !1
  %cmp33 = icmp eq i8 %6, 105
  br i1 %cmp33, label %cond.true, label %return

cond.true:                                        ; preds = %lor.lhs.false21
  %arrayidx47 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %8 = bitcast %struct.rtx_def* %7 to i32*
  %bf.load48 = load i32* %8, align 8
  %bf.clear49 = and i32 %bf.load48, 65535
  %cmp50 = icmp eq i32 %bf.clear49, 47
  br i1 %cmp50, label %cond.end93, label %cond.false

cond.false:                                       ; preds = %cond.true
  %call = tail call %struct.rtx_def* @single_set_2(%struct.rtx_def* %4, %struct.rtx_def* %7) #8
  br label %cond.end93

cond.end93:                                       ; preds = %cond.true, %cond.false
  %cond94 = phi %struct.rtx_def* [ %call, %cond.false ], [ %7, %cond.true ]
  %cmp95 = icmp eq %struct.rtx_def* %cond94, null
  br i1 %cmp95, label %return, label %lor.lhs.false97

lor.lhs.false97:                                  ; preds = %cond.end93
  %9 = bitcast %struct.rtx_def* %target to i32*
  %bf.load98 = load i32* %9, align 8
  %bf.clear99 = and i32 %bf.load98, 65535
  %cmp100 = icmp eq i32 %bf.clear99, 133
  br i1 %cmp100, label %return, label %lor.lhs.false102

lor.lhs.false102:                                 ; preds = %lor.lhs.false97
  %arrayidx104 = getelementptr inbounds %struct.rtx_def* %cond94, i64 0, i32 1, i64 0
  %rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**
  %10 = load %struct.rtx_def** %rtx105, align 8, !tbaa !0
  %call106 = tail call i32 @rtx_equal_p(%struct.rtx_def* %10, %struct.rtx_def* %target) #8
  %tobool = icmp eq i32 %call106, 0
  br i1 %tobool, label %land.lhs.true107, label %if.end

land.lhs.true107:                                 ; preds = %lor.lhs.false102
  %11 = load %struct.rtx_def** %rtx105, align 8, !tbaa !0
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load111 = load i32* %12, align 8
  %bf.clear112 = and i32 %bf.load111, 65535
  %cmp113 = icmp eq i32 %bf.clear112, 64
  br i1 %cmp113, label %lor.lhs.false115, label %return

lor.lhs.false115:                                 ; preds = %land.lhs.true107
  %arrayidx120 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 0
  %rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx121, align 8, !tbaa !0
  %arrayidx123 = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 0
  %rtx124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx124, align 8, !tbaa !0
  %call125 = tail call i32 @rtx_equal_p(%struct.rtx_def* %14, %struct.rtx_def* %target) #8
  %tobool126 = icmp eq i32 %call125, 0
  br i1 %tobool126, label %return, label %if.end

if.end:                                           ; preds = %lor.lhs.false115, %lor.lhs.false102
  %call127 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %target, %struct.rtx_def* %op0) #8
  %tobool128 = icmp eq i32 %call127, 0
  br i1 %tobool128, label %lor.lhs.false129, label %if.then134

lor.lhs.false129:                                 ; preds = %if.end
  %tobool130 = icmp eq %struct.rtx_def* %op1, null
  br i1 %tobool130, label %if.end152, label %land.lhs.true131

land.lhs.true131:                                 ; preds = %lor.lhs.false129
  %call132 = tail call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %target, %struct.rtx_def* %op1) #8
  %tobool133 = icmp eq i32 %call132, 0
  br i1 %tobool133, label %if.end152, label %if.then134

if.then134:                                       ; preds = %land.lhs.true131, %if.end
  %15 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  %num_elem138 = getelementptr inbounds %struct.rtvec_def* %15, i64 0, i32 0
  %16 = load i32* %num_elem138, align 4, !tbaa !5
  %sub139 = add i32 %16, -2
  %cmp140214 = icmp sgt i32 %sub139, -1
  br i1 %cmp140214, label %for.body.lr.ph, label %if.end152

for.body.lr.ph:                                   ; preds = %if.then134
  %17 = sext i32 %sub139 to i64
  br label %for.body

for.cond:                                         ; preds = %for.body
  %18 = trunc i64 %indvars.iv to i32
  %cmp140 = icmp sgt i32 %18, 0
  br i1 %cmp140, label %for.cond.for.body_crit_edge, label %if.end152

for.cond.for.body_crit_edge:                      ; preds = %for.cond
  %indvars.iv.next = add i64 %indvars.iv, -1
  %.pre = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  br label %for.body

for.body:                                         ; preds = %for.cond.for.body_crit_edge, %for.body.lr.ph
  %19 = phi %struct.rtvec_def* [ %15, %for.body.lr.ph ], [ %.pre, %for.cond.for.body_crit_edge ]
  %indvars.iv = phi i64 [ %17, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.for.body_crit_edge ]
  %arrayidx147 = getelementptr inbounds %struct.rtvec_def* %19, i64 0, i32 1, i64 %indvars.iv
  %20 = load %struct.rtx_def** %arrayidx147, align 8, !tbaa !0
  %call148 = tail call i32 @reg_set_p(%struct.rtx_def* %target, %struct.rtx_def* %20) #8
  %tobool149 = icmp eq i32 %call148, 0
  br i1 %tobool149, label %for.cond, label %return

if.end152:                                        ; preds = %if.then134, %for.cond, %land.lhs.true131, %lor.lhs.false129
  %cmp156 = icmp eq i8 %0, 49
  %bf.load159 = load i32* %9, align 8
  %bf.lshr = lshr i32 %bf.load159, 16
  %bf.clear160 = and i32 %bf.lshr, 255
  %call161 = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %op0) #8
  br i1 %cmp156, label %if.then158, label %if.else

if.then158:                                       ; preds = %if.end152
  %call162 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 %code, i32 %bf.clear160, %struct.rtx_def* %call161) #8
  br label %if.end169

if.else:                                          ; preds = %if.end152
  %call167 = tail call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %op1) #8
  %call168 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 %code, i32 %bf.clear160, %struct.rtx_def* %call161, %struct.rtx_def* %call167) #8
  br label %if.end169

if.end169:                                        ; preds = %if.else, %if.then158
  %note.0 = phi %struct.rtx_def* [ %call162, %if.then158 ], [ %call168, %if.else ]
  %21 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  %num_elem173 = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 0
  %22 = load i32* %num_elem173, align 4, !tbaa !5
  %sub174 = add nsw i32 %22, -1
  %idxprom175 = sext i32 %sub174 to i64
  %arrayidx180 = getelementptr inbounds %struct.rtvec_def* %21, i64 0, i32 1, i64 %idxprom175
  %23 = load %struct.rtx_def** %arrayidx180, align 8, !tbaa !0
  %call181 = tail call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %23, i32 4, %struct.rtx_def* %note.0) #8
  br label %return

return:                                           ; preds = %for.body, %lor.lhs.false21, %cond.end93, %lor.lhs.false97, %lor.lhs.false, %land.lhs.true107, %lor.lhs.false115, %entry, %if.end169
  %retval.0 = phi i32 [ 1, %if.end169 ], [ 1, %entry ], [ 1, %lor.lhs.false115 ], [ 1, %land.lhs.true107 ], [ 1, %lor.lhs.false ], [ 1, %lor.lhs.false97 ], [ 1, %cond.end93 ], [ 1, %lor.lhs.false21 ], [ 0, %for.body ]
  ret i32 %retval.0
}
