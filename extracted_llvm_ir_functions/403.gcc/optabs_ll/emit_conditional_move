define %struct.rtx_def* @emit_conditional_move(%struct.rtx_def* %target, i32 %code, %struct.rtx_def* %op0, %struct.rtx_def* %op1, i32 %cmode, %struct.rtx_def* %op2, %struct.rtx_def* %op3, i32 %mode, i32 %unsignedp) #0 {
entry:
  %call = tail call i32 @swap_commutative_operands_p(%struct.rtx_def* %op0, %struct.rtx_def* %op1) #8
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @swap_condition(i32 %code) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %op1.addr.0 = phi %struct.rtx_def* [ %op0, %if.then ], [ %op1, %entry ]
  %op0.addr.0 = phi %struct.rtx_def* [ %op1, %if.then ], [ %op0, %entry ]
  %code.addr.0 = phi i32 [ %call1, %if.then ], [ %code, %entry ]
  switch i32 %code.addr.0, label %if.end18 [
    i32 107, label %land.lhs.true
    i32 105, label %land.lhs.true7
  ]

land.lhs.true:                                    ; preds = %if.end
  %0 = bitcast %struct.rtx_def* %op1.addr.0 to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp2 = icmp eq i32 %bf.clear, 54
  br i1 %cmp2, label %land.lhs.true3, label %if.end18

land.lhs.true3:                                   ; preds = %land.lhs.true
  %rtwint = getelementptr inbounds %struct.rtx_def* %op1.addr.0, i64 0, i32 1, i64 0, i32 0
  %1 = load i64* %rtwint, align 8, !tbaa !9
  %cmp4 = icmp eq i64 %1, 1
  %2 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !0
  %.op1.addr.0194 = select i1 %cmp4, %struct.rtx_def* %2, %struct.rtx_def* %op1.addr.0
  %. = select i1 %cmp4, i32 106, i32 107
  br label %if.end18

land.lhs.true7:                                   ; preds = %if.end
  %.phi.trans.insert = bitcast %struct.rtx_def* %op1.addr.0 to i32*
  %bf.load8.pre = load i32* %.phi.trans.insert, align 8
  %bf.clear9 = and i32 %bf.load8.pre, 65535
  %cmp10 = icmp eq i32 %bf.clear9, 54
  br i1 %cmp10, label %land.lhs.true11, label %if.end18

land.lhs.true11:                                  ; preds = %land.lhs.true7
  %rtwint14 = getelementptr inbounds %struct.rtx_def* %op1.addr.0, i64 0, i32 1, i64 0, i32 0
  %3 = load i64* %rtwint14, align 8, !tbaa !9
  %cmp15 = icmp eq i64 %3, -1
  %4 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !0
  %.op1.addr.0 = select i1 %cmp15, %struct.rtx_def* %4, %struct.rtx_def* %op1.addr.0
  %.code.addr.0 = select i1 %cmp15, i32 104, i32 %code.addr.0
  br label %if.end18

if.end18:                                         ; preds = %land.lhs.true3, %land.lhs.true, %land.lhs.true11, %if.end, %land.lhs.true7
  %op1.addr.1 = phi %struct.rtx_def* [ %op1.addr.0, %land.lhs.true7 ], [ %op1.addr.0, %if.end ], [ %.op1.addr.0, %land.lhs.true11 ], [ %op1.addr.0, %land.lhs.true ], [ %.op1.addr.0194, %land.lhs.true3 ]
  %code.addr.1 = phi i32 [ 105, %land.lhs.true7 ], [ %code.addr.0, %if.end ], [ %.code.addr.0, %land.lhs.true11 ], [ 107, %land.lhs.true ], [ %., %land.lhs.true3 ]
  %cmp19 = icmp eq i32 %cmode, 0
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end18
  %5 = bitcast %struct.rtx_def* %op0.addr.0 to i32*
  %bf.load21 = load i32* %5, align 8
  %bf.lshr = lshr i32 %bf.load21, 16
  %bf.clear22 = and i32 %bf.lshr, 255
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end18
  %cmode.addr.0 = phi i32 [ %bf.clear22, %if.then20 ], [ %cmode, %if.end18 ]
  %call24 = tail call i32 @swap_commutative_operands_p(%struct.rtx_def* %op2, %struct.rtx_def* %op3) #8
  %tobool25 = icmp eq i32 %call24, 0
  br i1 %tobool25, label %if.end30, label %land.lhs.true26

land.lhs.true26:                                  ; preds = %if.end23
  %call27 = tail call i32 @reversed_comparison_code_parts(i32 %code.addr.1, %struct.rtx_def* %op0.addr.0, %struct.rtx_def* %op1.addr.1, %struct.rtx_def* null) #8
  %cmp28 = icmp eq i32 %call27, 0
  %op2.op3 = select i1 %cmp28, %struct.rtx_def* %op2, %struct.rtx_def* %op3
  %op3.op2 = select i1 %cmp28, %struct.rtx_def* %op3, %struct.rtx_def* %op2
  %code.addr.1.call27 = select i1 %cmp28, i32 %code.addr.1, i32 %call27
  br label %if.end30

if.end30:                                         ; preds = %land.lhs.true26, %if.end23
  %op2.addr.0 = phi %struct.rtx_def* [ %op2, %if.end23 ], [ %op2.op3, %land.lhs.true26 ]
  %op3.addr.0 = phi %struct.rtx_def* [ %op3, %if.end23 ], [ %op3.op2, %land.lhs.true26 ]
  %code.addr.2 = phi i32 [ %code.addr.1, %if.end23 ], [ %code.addr.1.call27, %land.lhs.true26 ]
  %cmp31 = icmp eq i32 %mode, 0
  br i1 %cmp31, label %if.then32, label %if.end36

if.then32:                                        ; preds = %if.end30
  %6 = bitcast %struct.rtx_def* %op2.addr.0 to i32*
  %bf.load33 = load i32* %6, align 8
  %bf.lshr34 = lshr i32 %bf.load33, 16
  %bf.clear35 = and i32 %bf.lshr34, 255
  br label %if.end36

if.end36:                                         ; preds = %if.then32, %if.end30
  %mode.addr.0 = phi i32 [ %bf.clear35, %if.then32 ], [ %mode, %if.end30 ]
  %idxprom = zext i32 %mode.addr.0 to i64
  %arrayidx37 = getelementptr inbounds [59 x i32]* @movcc_gen_code, i64 0, i64 %idxprom
  %7 = load i32* %arrayidx37, align 4, !tbaa !6
  %cmp38 = icmp eq i32 %7, 1317
  br i1 %cmp38, label %return, label %if.end40

if.end40:                                         ; preds = %if.end36
  %8 = load i32* @flag_force_mem, align 4, !tbaa !5
  %tobool41 = icmp eq i32 %8, 0
  br i1 %tobool41, label %if.end45, label %if.then42

if.then42:                                        ; preds = %if.end40
  %call43 = tail call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %op2.addr.0) #8
  %call44 = tail call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %op3.addr.0) #8
  br label %if.end45

if.end45:                                         ; preds = %if.end40, %if.then42
  %op2.addr.1 = phi %struct.rtx_def* [ %call43, %if.then42 ], [ %op2.addr.0, %if.end40 ]
  %op3.addr.1 = phi %struct.rtx_def* [ %call44, %if.then42 ], [ %op3.addr.0, %if.end40 ]
  %tobool46 = icmp eq %struct.rtx_def* %target, null
  br i1 %tobool46, label %if.else49, label %if.then47

if.then47:                                        ; preds = %if.end45
  %call48 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %target, i32 1) #8
  br label %if.end51

if.else49:                                        ; preds = %if.end45
  %call50 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %mode.addr.0) #8
  br label %if.end51

if.end51:                                         ; preds = %if.else49, %if.then47
  %target.addr.0 = phi %struct.rtx_def* [ %call48, %if.then47 ], [ %call50, %if.else49 ]
  tail call void @emit_queue() #8
  %call52 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %op2.addr.1, i32 0) #8
  %call53 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %op3.addr.1, i32 0) #8
  %idxprom54 = zext i32 %7 to i64
  %operand = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom54, i32 3
  %9 = load %struct.insn_operand_data** %operand, align 8, !tbaa !0
  %predicate = getelementptr inbounds %struct.insn_operand_data* %9, i64 0, i32 0
  %10 = load i32 (%struct.rtx_def*, i32)** %predicate, align 8, !tbaa !0
  %mode61 = getelementptr inbounds %struct.insn_operand_data* %9, i64 0, i32 2
  %11 = bitcast [2 x i8]* %mode61 to i16*
  %bf.load62 = load i16* %11, align 8
  %bf.cast = zext i16 %bf.load62 to i32
  %call63 = tail call i32 %10(%struct.rtx_def* %target.addr.0, i32 %bf.cast) #8
  %tobool64 = icmp eq i32 %call63, 0
  br i1 %tobool64, label %if.then65, label %if.end74

if.then65:                                        ; preds = %if.end51
  %bf.load71 = load i16* %11, align 8
  %bf.cast72 = zext i16 %bf.load71 to i32
  %call73 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %bf.cast72) #8
  br label %if.end74

if.end74:                                         ; preds = %if.end51, %if.then65
  %subtarget.0 = phi %struct.rtx_def* [ %target.addr.0, %if.end51 ], [ %call73, %if.then65 ]
  %predicate79 = getelementptr inbounds %struct.insn_operand_data* %9, i64 2, i32 0
  %12 = load i32 (%struct.rtx_def*, i32)** %predicate79, align 8, !tbaa !0
  %mode84 = getelementptr inbounds %struct.insn_operand_data* %9, i64 2, i32 2
  %13 = bitcast [2 x i8]* %mode84 to i16*
  %bf.load85 = load i16* %13, align 8
  %bf.cast86 = zext i16 %bf.load85 to i32
  %call87 = tail call i32 %12(%struct.rtx_def* %call52, i32 %bf.cast86) #8
  %tobool88 = icmp eq i32 %call87, 0
  br i1 %tobool88, label %if.then89, label %if.end98

if.then89:                                        ; preds = %if.end74
  %bf.load95 = load i16* %13, align 8
  %bf.cast96 = zext i16 %bf.load95 to i32
  %call97 = tail call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast96, %struct.rtx_def* %call52) #8
  br label %if.end98

if.end98:                                         ; preds = %if.end74, %if.then89
  %op2.addr.2 = phi %struct.rtx_def* [ %call52, %if.end74 ], [ %call97, %if.then89 ]
  %predicate103 = getelementptr inbounds %struct.insn_operand_data* %9, i64 3, i32 0
  %14 = load i32 (%struct.rtx_def*, i32)** %predicate103, align 8, !tbaa !0
  %mode108 = getelementptr inbounds %struct.insn_operand_data* %9, i64 3, i32 2
  %15 = bitcast [2 x i8]* %mode108 to i16*
  %bf.load109 = load i16* %15, align 8
  %bf.cast110 = zext i16 %bf.load109 to i32
  %call111 = tail call i32 %14(%struct.rtx_def* %call53, i32 %bf.cast110) #8
  %tobool112 = icmp eq i32 %call111, 0
  br i1 %tobool112, label %if.then113, label %if.end122

if.then113:                                       ; preds = %if.end98
  %bf.load119 = load i16* %15, align 8
  %bf.cast120 = zext i16 %bf.load119 to i32
  %call121 = tail call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast120, %struct.rtx_def* %call53) #8
  br label %if.end122

if.end122:                                        ; preds = %if.end98, %if.then113
  %op3.addr.2 = phi %struct.rtx_def* [ %call53, %if.end98 ], [ %call121, %if.then113 ]
  %call123 = tail call %struct.rtx_def* @compare_from_rtx(%struct.rtx_def* %op0.addr.0, %struct.rtx_def* %op1.addr.1, i32 %code.addr.2, i32 %unsignedp, i32 %cmode.addr.0, %struct.rtx_def* null) #8
  %16 = bitcast %struct.rtx_def* %call123 to i32*
  %bf.load124 = load i32* %16, align 8
  %bf.clear125 = and i32 %bf.load124, 65535
  %cmp126 = icmp eq i32 %bf.clear125, %code.addr.2
  br i1 %cmp126, label %if.end128, label %return

if.end128:                                        ; preds = %if.end122
  %idxprom129 = sext i32 %7 to i64
  %genfun = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom129, i32 2
  %17 = load %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !tbaa !0
  %call131 = tail call %struct.rtx_def* (%struct.rtx_def*, ...)* %17(%struct.rtx_def* %subtarget.0, %struct.rtx_def* %call123, %struct.rtx_def* %op2.addr.2, %struct.rtx_def* %op3.addr.2) #8
  %cmp132 = icmp eq %struct.rtx_def* %call131, null
  br i1 %cmp132, label %return, label %if.end134

if.end134:                                        ; preds = %if.end128
  %call135 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call131) #8
  %cmp136 = icmp eq %struct.rtx_def* %subtarget.0, %target.addr.0
  br i1 %cmp136, label %return, label %if.then137

if.then137:                                       ; preds = %if.end134
  tail call void @convert_move(%struct.rtx_def* %target.addr.0, %struct.rtx_def* %subtarget.0, i32 0) #8
  br label %return

return:                                           ; preds = %if.then137, %if.end134, %if.end128, %if.end122, %if.end36
  %retval.0 = phi %struct.rtx_def* [ null, %if.end36 ], [ null, %if.end122 ], [ null, %if.end128 ], [ %target.addr.0, %if.end134 ], [ %target.addr.0, %if.then137 ]
  ret %struct.rtx_def* %retval.0
}
