define i32 @expand_twoval_binop(%struct.optab* nocapture %binoptab, %struct.rtx_def* %op0, %struct.rtx_def* %op1, %struct.rtx_def* %targ0, %struct.rtx_def* %targ1, i32 %unsignedp) #0 {
entry:
  %tobool = icmp ne %struct.rtx_def* %targ0, null
  %cond = select i1 %tobool, %struct.rtx_def* %targ0, %struct.rtx_def* %targ1
  %0 = bitcast %struct.rtx_def* %cond to i32*
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %call = tail call %struct.rtx_def* @get_last_insn() #8
  %idxprom310 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom310
  %1 = load i32* %arrayidx, align 4, !tbaa !3
  %call1 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %op0, i32 0) #8
  %call2 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %op1, i32 0) #8
  %2 = load i32* @flag_force_mem, align 4, !tbaa !5
  %tobool3 = icmp eq i32 %2, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call4 = tail call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %call1) #8
  %call5 = tail call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %call2) #8
  br label %if.end

if.end:                                           ; preds = %entry, %if.then
  %op1.addr.0 = phi %struct.rtx_def* [ %call5, %if.then ], [ %call2, %entry ]
  %op0.addr.0 = phi %struct.rtx_def* [ %call4, %if.then ], [ %call1, %entry ]
  %3 = bitcast %struct.rtx_def* %op0.addr.0 to i32*
  %bf.load6 = load i32* %3, align 8
  %bf.clear7 = and i32 %bf.load6, 65535
  switch i32 %bf.clear7, label %if.end42 [
    i32 67, label %land.lhs.true
    i32 68, label %land.lhs.true
    i32 54, label %land.lhs.true
    i32 55, label %land.lhs.true
    i32 58, label %land.lhs.true
    i32 134, label %land.lhs.true
    i32 56, label %land.lhs.true
    i32 140, label %land.lhs.true
  ]

land.lhs.true:                                    ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %call35 = tail call i32 @preserve_subexpressions_p() #8
  %tobool36 = icmp eq i32 %call35, 0
  br i1 %tobool36, label %if.end42, label %land.lhs.true37

land.lhs.true37:                                  ; preds = %land.lhs.true
  %code = getelementptr inbounds %struct.optab* %binoptab, i64 0, i32 0
  %4 = load i32* %code, align 4, !tbaa !4
  %call38 = tail call i32 @rtx_cost(%struct.rtx_def* %op0.addr.0, i32 %4) #8
  %cmp39 = icmp sgt i32 %call38, 4
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %land.lhs.true37
  %call41 = tail call %struct.rtx_def* @force_reg(i32 %bf.clear, %struct.rtx_def* %op0.addr.0) #8
  br label %if.end42

if.end42:                                         ; preds = %if.end, %land.lhs.true, %if.then40, %land.lhs.true37
  %op0.addr.1 = phi %struct.rtx_def* [ %call41, %if.then40 ], [ %op0.addr.0, %land.lhs.true37 ], [ %op0.addr.0, %land.lhs.true ], [ %op0.addr.0, %if.end ]
  %5 = bitcast %struct.rtx_def* %op1.addr.0 to i32*
  %bf.load43 = load i32* %5, align 8
  %bf.clear44 = and i32 %bf.load43, 65535
  switch i32 %bf.clear44, label %if.end83 [
    i32 67, label %land.lhs.true74
    i32 68, label %land.lhs.true74
    i32 54, label %land.lhs.true74
    i32 55, label %land.lhs.true74
    i32 58, label %land.lhs.true74
    i32 134, label %land.lhs.true74
    i32 56, label %land.lhs.true74
    i32 140, label %land.lhs.true74
  ]

land.lhs.true74:                                  ; preds = %if.end42, %if.end42, %if.end42, %if.end42, %if.end42, %if.end42, %if.end42, %if.end42
  %call75 = tail call i32 @preserve_subexpressions_p() #8
  %tobool76 = icmp eq i32 %call75, 0
  br i1 %tobool76, label %if.end83, label %land.lhs.true77

land.lhs.true77:                                  ; preds = %land.lhs.true74
  %code78 = getelementptr inbounds %struct.optab* %binoptab, i64 0, i32 0
  %6 = load i32* %code78, align 4, !tbaa !4
  %call79 = tail call i32 @rtx_cost(%struct.rtx_def* %op1.addr.0, i32 %6) #8
  %cmp80 = icmp sgt i32 %call79, 4
  br i1 %cmp80, label %if.then81, label %if.end83

if.then81:                                        ; preds = %land.lhs.true77
  %call82 = tail call %struct.rtx_def* @force_reg(i32 %bf.clear, %struct.rtx_def* %op1.addr.0) #8
  br label %if.end83

if.end83:                                         ; preds = %if.end42, %land.lhs.true74, %if.then81, %land.lhs.true77
  %op1.addr.1 = phi %struct.rtx_def* [ %call82, %if.then81 ], [ %op1.addr.0, %land.lhs.true77 ], [ %op1.addr.0, %land.lhs.true74 ], [ %op1.addr.0, %if.end42 ]
  br i1 %tobool, label %if.then85, label %if.else

if.then85:                                        ; preds = %if.end83
  %call86 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %targ0, i32 1) #8
  br label %if.end88

if.else:                                          ; preds = %if.end83
  %call87 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear) #8
  br label %if.end88

if.end88:                                         ; preds = %if.else, %if.then85
  %targ0.addr.0 = phi %struct.rtx_def* [ %call86, %if.then85 ], [ %call87, %if.else ]
  %tobool89 = icmp eq %struct.rtx_def* %targ1, null
  br i1 %tobool89, label %if.else92, label %if.then90

if.then90:                                        ; preds = %if.end88
  %call91 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %targ1, i32 1) #8
  br label %if.end94

if.else92:                                        ; preds = %if.end88
  %call93 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear) #8
  br label %if.end94

if.end94:                                         ; preds = %if.else92, %if.then90
  %targ1.addr.0 = phi %struct.rtx_def* [ %call91, %if.then90 ], [ %call93, %if.else92 ]
  %call95 = tail call %struct.rtx_def* @get_last_insn() #8
  %insn_code = getelementptr inbounds %struct.optab* %binoptab, i64 0, i32 1, i64 %idxprom310, i32 0
  %7 = load i32* %insn_code, align 4, !tbaa !6
  %cmp98 = icmp eq i32 %7, 1317
  br i1 %cmp98, label %if.end184, label %if.then99

if.then99:                                        ; preds = %if.end94
  %idxprom104 = sext i32 %7 to i64
  %operand = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom104, i32 3
  %8 = load %struct.insn_operand_data** %operand, align 8, !tbaa !0
  %mode107 = getelementptr inbounds %struct.insn_operand_data* %8, i64 1, i32 2
  %9 = bitcast [2 x i8]* %mode107 to i16*
  %bf.load108 = load i16* %9, align 8
  %bf.cast = zext i16 %bf.load108 to i32
  %mode113 = getelementptr inbounds %struct.insn_operand_data* %8, i64 2, i32 2
  %10 = bitcast [2 x i8]* %mode113 to i16*
  %bf.load114 = load i16* %10, align 8
  %bf.cast115 = zext i16 %bf.load114 to i32
  %11 = bitcast %struct.rtx_def* %op0.addr.1 to i32*
  %bf.load116 = load i32* %11, align 8
  %bf.lshr117 = lshr i32 %bf.load116, 16
  %bf.clear118 = and i32 %bf.lshr117, 255
  %cmp119 = icmp eq i32 %bf.clear118, 0
  %cmp124 = icmp eq i32 %bf.clear118, %bf.cast
  %or.cond = or i1 %cmp119, %cmp124
  br i1 %or.cond, label %if.end127, label %if.then125

if.then125:                                       ; preds = %if.then99
  %call126 = tail call %struct.rtx_def* @convert_to_mode(i32 %bf.cast, %struct.rtx_def* %op0.addr.1, i32 %unsignedp) #8
  br label %if.end127

if.end127:                                        ; preds = %if.then99, %if.then125
  %xop0.0 = phi %struct.rtx_def* [ %call126, %if.then125 ], [ %op0.addr.1, %if.then99 ]
  %12 = bitcast %struct.rtx_def* %op1.addr.1 to i32*
  %bf.load128 = load i32* %12, align 8
  %bf.lshr129 = lshr i32 %bf.load128, 16
  %bf.clear130 = and i32 %bf.lshr129, 255
  %cmp131 = icmp eq i32 %bf.clear130, 0
  %cmp136 = icmp eq i32 %bf.clear130, %bf.cast115
  %or.cond311 = or i1 %cmp131, %cmp136
  br i1 %or.cond311, label %if.end139, label %if.then137

if.then137:                                       ; preds = %if.end127
  %call138 = tail call %struct.rtx_def* @convert_to_mode(i32 %bf.cast115, %struct.rtx_def* %op1.addr.1, i32 %unsignedp) #8
  br label %if.end139

if.end139:                                        ; preds = %if.end127, %if.then137
  %xop1.0 = phi %struct.rtx_def* [ %call138, %if.then137 ], [ %op1.addr.1, %if.end127 ]
  %predicate = getelementptr inbounds %struct.insn_operand_data* %8, i64 1, i32 0
  %13 = load i32 (%struct.rtx_def*, i32)** %predicate, align 8, !tbaa !0
  %call144 = tail call i32 %13(%struct.rtx_def* %xop0.0, i32 %bf.cast) #8
  %tobool145 = icmp eq i32 %call144, 0
  br i1 %tobool145, label %if.then146, label %if.end148

if.then146:                                       ; preds = %if.end139
  %call147 = tail call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast, %struct.rtx_def* %xop0.0) #8
  br label %if.end148

if.end148:                                        ; preds = %if.end139, %if.then146
  %xop0.1 = phi %struct.rtx_def* [ %xop0.0, %if.end139 ], [ %call147, %if.then146 ]
  %predicate153 = getelementptr inbounds %struct.insn_operand_data* %8, i64 2, i32 0
  %14 = load i32 (%struct.rtx_def*, i32)** %predicate153, align 8, !tbaa !0
  %call154 = tail call i32 %14(%struct.rtx_def* %xop1.0, i32 %bf.cast115) #8
  %tobool155 = icmp eq i32 %call154, 0
  br i1 %tobool155, label %if.then156, label %if.end158

if.then156:                                       ; preds = %if.end148
  %call157 = tail call %struct.rtx_def* @copy_to_mode_reg(i32 %bf.cast115, %struct.rtx_def* %xop1.0) #8
  br label %if.end158

if.end158:                                        ; preds = %if.end148, %if.then156
  %xop1.1 = phi %struct.rtx_def* [ %xop1.0, %if.end148 ], [ %call157, %if.then156 ]
  %predicate163 = getelementptr inbounds %struct.insn_operand_data* %8, i64 0, i32 0
  %15 = load i32 (%struct.rtx_def*, i32)** %predicate163, align 8, !tbaa !0
  %call164 = tail call i32 %15(%struct.rtx_def* %targ0.addr.0, i32 %bf.clear) #8
  %tobool165 = icmp eq i32 %call164, 0
  br i1 %tobool165, label %if.then174, label %lor.lhs.false166

lor.lhs.false166:                                 ; preds = %if.end158
  %predicate171 = getelementptr inbounds %struct.insn_operand_data* %8, i64 3, i32 0
  %16 = load i32 (%struct.rtx_def*, i32)** %predicate171, align 8, !tbaa !0
  %call172 = tail call i32 %16(%struct.rtx_def* %targ1.addr.0, i32 %bf.clear) #8
  %tobool173 = icmp eq i32 %call172, 0
  br i1 %tobool173, label %if.then174, label %if.end175

if.then174:                                       ; preds = %lor.lhs.false166, %if.end158
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 1998, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.expand_twoval_binop, i64 0, i64 0)) #6
  unreachable

if.end175:                                        ; preds = %lor.lhs.false166
  %genfun = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom104, i32 2
  %17 = load %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !tbaa !0
  %call178 = tail call %struct.rtx_def* (%struct.rtx_def*, ...)* %17(%struct.rtx_def* %targ0.addr.0, %struct.rtx_def* %xop0.1, %struct.rtx_def* %xop1.1, %struct.rtx_def* %targ1.addr.0) #8
  %tobool179 = icmp eq %struct.rtx_def* %call178, null
  br i1 %tobool179, label %if.else182, label %if.then180

if.then180:                                       ; preds = %if.end175
  %call181 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call178) #8
  br label %return

if.else182:                                       ; preds = %if.end175
  tail call void @delete_insns_since(%struct.rtx_def* %call95) #8
  br label %if.end184

if.end184:                                        ; preds = %if.end94, %if.else182
  %.off = add i32 %1, -1
  %18 = icmp ult i32 %.off, 2
  %cmp189 = icmp eq i32 %1, 6
  %or.cond216 = or i1 %18, %cmp189
  br i1 %or.cond216, label %for.cond.preheader, label %if.end215

for.cond.preheader:                               ; preds = %if.end184
  %wider_mode.0.in.in312 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom310
  %wider_mode.0.in313 = load i8* %wider_mode.0.in.in312, align 1
  %cmp193315 = icmp eq i8 %wider_mode.0.in313, 0
  br i1 %cmp193315, label %if.end215, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.cond.backedge
  %wider_mode.0317.in = phi i8 [ %wider_mode.0.in, %for.cond.backedge ], [ %wider_mode.0.in313, %for.cond.preheader ]
  %wider_mode.0317 = zext i8 %wider_mode.0317.in to i32
  %idxprom195 = zext i8 %wider_mode.0317.in to i64
  %insn_code198 = getelementptr inbounds %struct.optab* %binoptab, i64 0, i32 1, i64 %idxprom195, i32 0
  %19 = load i32* %insn_code198, align 4, !tbaa !6
  %cmp199 = icmp eq i32 %19, 1317
  br i1 %cmp199, label %for.cond.backedge, label %if.then201

for.cond.backedge:                                ; preds = %for.body, %if.else209
  %wider_mode.0.in.in = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom195
  %wider_mode.0.in = load i8* %wider_mode.0.in.in, align 1
  %cmp193 = icmp eq i8 %wider_mode.0.in, 0
  br i1 %cmp193, label %if.end215, label %for.body

if.then201:                                       ; preds = %for.body
  %call202 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %wider_mode.0317) #8
  %call203 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %wider_mode.0317) #8
  %call204 = tail call %struct.rtx_def* @convert_modes(i32 %wider_mode.0317, i32 %bf.clear, %struct.rtx_def* %op0.addr.1, i32 %unsignedp) #8
  %call205 = tail call %struct.rtx_def* @convert_modes(i32 %wider_mode.0317, i32 %bf.clear, %struct.rtx_def* %op1.addr.1, i32 %unsignedp) #8
  %call206 = tail call i32 @expand_twoval_binop(%struct.optab* %binoptab, %struct.rtx_def* %call204, %struct.rtx_def* %call205, %struct.rtx_def* %call202, %struct.rtx_def* %call203, i32 %unsignedp) #7
  %tobool207 = icmp eq i32 %call206, 0
  br i1 %tobool207, label %if.else209, label %if.then208

if.then208:                                       ; preds = %if.then201
  tail call void @convert_move(%struct.rtx_def* %targ0.addr.0, %struct.rtx_def* %call202, i32 %unsignedp) #8
  tail call void @convert_move(%struct.rtx_def* %targ1.addr.0, %struct.rtx_def* %call203, i32 %unsignedp) #8
  br label %return

if.else209:                                       ; preds = %if.then201
  tail call void @delete_insns_since(%struct.rtx_def* %call95) #8
  br label %for.cond.backedge

if.end215:                                        ; preds = %for.cond.preheader, %for.cond.backedge, %if.end184
  tail call void @delete_insns_since(%struct.rtx_def* %call) #8
  br label %return

return:                                           ; preds = %if.end215, %if.then208, %if.then180
  %retval.0 = phi i32 [ 1, %if.then180 ], [ 1, %if.then208 ], [ 0, %if.end215 ]
  ret i32 %retval.0
}
