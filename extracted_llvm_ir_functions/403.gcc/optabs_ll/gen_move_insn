define %struct.rtx_def* @gen_move_insn(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %x to i32*
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %cmp = icmp eq i32 %bf.clear, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.rtx_def* %y to i32*
  %bf.load1 = load i32* %1, align 8
  %bf.lshr2 = lshr i32 %bf.load1, 16
  %bf.clear3 = and i32 %bf.lshr2, 255
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %mode.0 = phi i32 [ %bf.clear3, %if.then ], [ %bf.clear, %entry ]
  %idxprom103 = zext i32 %mode.0 to i64
  %2 = load %struct.optab** getelementptr inbounds ([49 x %struct.optab*]* @optab_table, i64 0, i64 30), align 16, !tbaa !0
  %arrayidx6 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom103
  %3 = load i32* %arrayidx6, align 4, !tbaa !3
  %cmp7 = icmp eq i32 %3, 4
  br i1 %cmp7, label %land.lhs.true, label %if.end68

land.lhs.true:                                    ; preds = %if.end
  %insn_code4 = getelementptr inbounds %struct.optab* %2, i64 0, i32 1, i64 %idxprom103, i32 0
  %4 = load i32* %insn_code4, align 4, !tbaa !6
  %cmp8 = icmp eq i32 %4, 1317
  br i1 %cmp8, label %if.then9, label %if.end68

if.then9:                                         ; preds = %land.lhs.true
  %cmp10 = icmp eq i32 %mode.0, 52
  br i1 %cmp10, label %for.cond.preheader, label %land.lhs.true11

land.lhs.true11:                                  ; preds = %if.then9
  %insn_code14 = getelementptr inbounds %struct.optab* %2, i64 0, i32 1, i64 52, i32 0
  %5 = load i32* %insn_code14, align 4, !tbaa !6
  %cmp15 = icmp eq i32 %5, 1317
  br i1 %cmp15, label %for.cond.preheader, label %if.end34

for.cond.preheader:                               ; preds = %land.lhs.true11, %if.then9
  %arrayidx21 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom103
  %6 = load i8* %arrayidx21, align 1, !tbaa !1
  br label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.inc
  %tmode.0111 = phi i32 [ 2, %for.cond.preheader ], [ %conv29, %for.inc ]
  %idxprom18104 = zext i32 %tmode.0111 to i64
  %arrayidx19 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom18104
  %7 = load i8* %arrayidx19, align 1, !tbaa !1
  %cmp23 = icmp eq i8 %7, %6
  br i1 %cmp23, label %if.end30, label %for.inc

for.inc:                                          ; preds = %for.body
  %arrayidx28 = getelementptr inbounds [59 x i8]* @mode_wider_mode, i64 0, i64 %idxprom18104
  %8 = load i8* %arrayidx28, align 1, !tbaa !1
  %conv29 = zext i8 %8 to i32
  %cmp17 = icmp eq i8 %8, 0
  br i1 %cmp17, label %if.then33, label %for.body

if.end30:                                         ; preds = %for.body
  %cmp31 = icmp eq i32 %tmode.0111, 0
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %for.inc, %if.end30
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 3972, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.gen_move_insn, i64 0, i64 0)) #6
  unreachable

if.end34:                                         ; preds = %land.lhs.true11, %if.end30
  %tmode.1109 = phi i32 [ %tmode.0111, %if.end30 ], [ 52, %land.lhs.true11 ]
  %9 = load i32* @reload_in_progress, align 4, !tbaa !5
  %tobool = icmp eq i32 %9, 0
  br i1 %tobool, label %if.else57, label %if.then35

if.then35:                                        ; preds = %if.end34
  %call = tail call %struct.rtx_def* @gen_lowpart_common(i32 %tmode.1109, %struct.rtx_def* %x) #8
  %cmp36 = icmp eq %struct.rtx_def* %call, null
  br i1 %cmp36, label %land.lhs.true38, label %if.end45

land.lhs.true38:                                  ; preds = %if.then35
  %bf.load39 = load i32* %0, align 8
  %bf.clear40 = and i32 %bf.load39, 65535
  %cmp41 = icmp eq i32 %bf.clear40, 66
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %land.lhs.true38
  %call44 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %x, i32 %tmode.1109, i64 0, i32 0, i32 1) #8
  tail call void @copy_replacements(%struct.rtx_def* %x, %struct.rtx_def* %call44) #8
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %land.lhs.true38, %if.then35
  %x.addr.0 = phi %struct.rtx_def* [ %call44, %if.then43 ], [ null, %land.lhs.true38 ], [ %call, %if.then35 ]
  %call46 = tail call %struct.rtx_def* @gen_lowpart_common(i32 %tmode.1109, %struct.rtx_def* %y) #8
  %cmp47 = icmp eq %struct.rtx_def* %call46, null
  br i1 %cmp47, label %land.lhs.true49, label %if.end60

land.lhs.true49:                                  ; preds = %if.end45
  %10 = bitcast %struct.rtx_def* %y to i32*
  %bf.load50 = load i32* %10, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 66
  br i1 %cmp52, label %if.then54, label %if.end60

if.then54:                                        ; preds = %land.lhs.true49
  %call55 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %y, i32 %tmode.1109, i64 0, i32 0, i32 1) #8
  tail call void @copy_replacements(%struct.rtx_def* %y, %struct.rtx_def* %call55) #8
  br label %if.end60

if.else57:                                        ; preds = %if.end34
  %call58 = tail call %struct.rtx_def* @gen_lowpart(i32 %tmode.1109, %struct.rtx_def* %x) #8
  %call59 = tail call %struct.rtx_def* @gen_lowpart(i32 %tmode.1109, %struct.rtx_def* %y) #8
  br label %if.end60

if.end60:                                         ; preds = %if.end45, %land.lhs.true49, %if.then54, %if.else57
  %y.addr.0 = phi %struct.rtx_def* [ %call55, %if.then54 ], [ null, %land.lhs.true49 ], [ %call46, %if.end45 ], [ %call59, %if.else57 ]
  %x.addr.1 = phi %struct.rtx_def* [ %x.addr.0, %if.then54 ], [ %x.addr.0, %land.lhs.true49 ], [ %x.addr.0, %if.end45 ], [ %call58, %if.else57 ]
  %idxprom61 = sext i32 %tmode.1109 to i64
  %11 = load %struct.optab** getelementptr inbounds ([49 x %struct.optab*]* @optab_table, i64 0, i64 30), align 16, !tbaa !0
  %insn_code64 = getelementptr inbounds %struct.optab* %11, i64 0, i32 1, i64 %idxprom61, i32 0
  %12 = load i32* %insn_code64, align 4, !tbaa !6
  %idxprom65 = sext i32 %12 to i64
  %genfun = getelementptr inbounds [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom65, i32 2
  %13 = load %struct.rtx_def* (%struct.rtx_def*, ...)** %genfun, align 8, !tbaa !0
  %call67 = tail call %struct.rtx_def* (%struct.rtx_def*, ...)* %13(%struct.rtx_def* %x.addr.1, %struct.rtx_def* %y.addr.0) #8
  br label %return

if.end68:                                         ; preds = %land.lhs.true, %if.end
  tail call void @start_sequence() #8
  %call69 = tail call %struct.rtx_def* @emit_move_insn_1(%struct.rtx_def* %x, %struct.rtx_def* %y) #8
  %call70 = tail call %struct.rtx_def* @gen_sequence() #8
  tail call void @end_sequence() #8
  br label %return

return:                                           ; preds = %if.end68, %if.end60
  %retval.0 = phi %struct.rtx_def* [ %call67, %if.end60 ], [ %call70, %if.end68 ]
  ret %struct.rtx_def* %retval.0
}
