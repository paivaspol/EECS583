define internal fastcc void @mark_life(i32 %regno, i32 %mode, i32 %life) #0 {
entry:
  %regno.off = add i32 %regno, -8
  %0 = icmp ult i32 %regno.off, 8
  %regno.off73 = add i32 %regno, -21
  %1 = icmp ult i32 %regno.off73, 8
  %or.cond = or i1 %0, %1
  %regno.off74 = add i32 %regno, -45
  %2 = icmp ult i32 %regno.off74, 8
  %or.cond78 = or i1 %or.cond, %2
  %regno.off75 = add i32 %regno, -29
  %3 = icmp ult i32 %regno.off75, 8
  %or.cond80 = or i1 %or.cond78, %3
  br i1 %or.cond80, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %4 = load i32* %arrayidx, align 4, !tbaa !8
  %cmp13 = icmp eq i32 %4, 5
  br i1 %cmp13, label %cond.end38, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp16 = icmp eq i32 %4, 6
  %phitmp = select i1 %cmp16, i32 2, i32 1
  br label %cond.end38

cond.false:                                       ; preds = %entry
  switch i32 %mode, label %cond.false26 [
    i32 18, label %cond.true18
    i32 24, label %cond.true22
  ]

cond.true18:                                      ; preds = %cond.false
  %5 = load i32* @target_flags, align 4, !tbaa !0
  %and = lshr i32 %5, 25
  %6 = and i32 %and, 1
  %7 = xor i32 %6, 3
  br label %cond.end38

cond.true22:                                      ; preds = %cond.false
  %8 = load i32* @target_flags, align 4, !tbaa !0
  %and23 = lshr i32 %8, 24
  %9 = and i32 %and23, 2
  %10 = xor i32 %9, 6
  br label %cond.end38

cond.false26:                                     ; preds = %cond.false
  %idxprom27 = sext i32 %mode to i64
  %arrayidx28 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom27
  %11 = load i8* %arrayidx28, align 1, !tbaa !1
  %conv = zext i8 %11 to i32
  %12 = load i32* @target_flags, align 4, !tbaa !0
  %and29 = lshr i32 %12, 23
  %13 = and i32 %and29, 4
  %14 = add i32 %13, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %14
  %div = sdiv i32 %sub, %14
  br label %cond.end38

cond.end38:                                       ; preds = %cond.true, %lor.rhs, %cond.true18, %cond.false26, %cond.true22
  %cond39 = phi i32 [ %7, %cond.true18 ], [ %10, %cond.true22 ], [ %div, %cond.false26 ], [ 2, %cond.true ], [ %phitmp, %lor.rhs ]
  %tobool40 = icmp eq i32 %life, 0
  %cmp4682 = icmp sgt i32 %cond39, 0
  br i1 %tobool40, label %while.cond44.preheader, label %while.cond.preheader

while.cond.preheader:                             ; preds = %cond.end38
  br i1 %cmp4682, label %while.body.lr.ph, label %if.end

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %regs_live.promoted89 = load i64* @regs_live, align 8, !tbaa !4
  br label %while.body

while.cond44.preheader:                           ; preds = %cond.end38
  br i1 %cmp4682, label %while.body48.lr.ph, label %if.end

while.body48.lr.ph:                               ; preds = %while.cond44.preheader
  %regs_live.promoted = load i64* @regs_live, align 8, !tbaa !4
  br label %while.body48

while.body:                                       ; preds = %while.body.lr.ph, %while.body
  %or90 = phi i64 [ %regs_live.promoted89, %while.body.lr.ph ], [ %or, %while.body ]
  %dec88.in = phi i32 [ %cond39, %while.body.lr.ph ], [ %dec88, %while.body ]
  %dec88 = add nsw i32 %dec88.in, -1
  %add43 = add nsw i32 %dec88, %regno
  %sh_prom = zext i32 %add43 to i64
  %shl = shl i64 1, %sh_prom
  %or = or i64 %or90, %shl
  %cmp41 = icmp sgt i32 %dec88, 0
  br i1 %cmp41, label %while.body, label %while.cond.if.end.loopexit85_crit_edge

while.body48:                                     ; preds = %while.body48.lr.ph, %while.body48
  %and5284 = phi i64 [ %regs_live.promoted, %while.body48.lr.ph ], [ %and52, %while.body48 ]
  %dec4583.in = phi i32 [ %cond39, %while.body48.lr.ph ], [ %dec4583, %while.body48 ]
  %dec4583 = add nsw i32 %dec4583.in, -1
  %add49 = add nsw i32 %dec4583, %regno
  %sh_prom50 = zext i32 %add49 to i64
  %shl51 = shl i64 1, %sh_prom50
  %neg = xor i64 %shl51, -1
  %and52 = and i64 %and5284, %neg
  %cmp46 = icmp sgt i32 %dec4583, 0
  br i1 %cmp46, label %while.body48, label %while.cond44.if.end.loopexit_crit_edge

while.cond44.if.end.loopexit_crit_edge:           ; preds = %while.body48
  store i64 %and52, i64* @regs_live, align 8, !tbaa !4
  br label %if.end

while.cond.if.end.loopexit85_crit_edge:           ; preds = %while.body
  store i64 %or, i64* @regs_live, align 8, !tbaa !4
  br label %if.end

if.end:                                           ; preds = %while.cond.preheader, %while.cond.if.end.loopexit85_crit_edge, %while.cond44.preheader, %while.cond44.if.end.loopexit_crit_edge
  ret void
}
