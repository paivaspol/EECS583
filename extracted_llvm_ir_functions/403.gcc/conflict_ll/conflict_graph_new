define %struct.conflict_graph_def* @conflict_graph_new(i32 %num_regs) #0 {
entry:
  %call = tail call noalias i8* @xmalloc(i64 112) #6
  %0 = bitcast i8* %call to %struct.conflict_graph_def*
  %num_regs1 = getelementptr inbounds i8* %call, i64 8
  %1 = bitcast i8* %num_regs1 to i32*
  store i32 %num_regs, i32* %1, align 4, !tbaa !0
  %call2 = tail call %struct.htab* @htab_create(i64 64, i32 (i8*)* @arc_hash, i32 (i8*, i8*)* @arc_eq, void (i8*)* null) #6
  %arc_hash_table = bitcast i8* %call to %struct.htab**
  store %struct.htab* %call2, %struct.htab** %arc_hash_table, align 8, !tbaa !3
  %arc_obstack = getelementptr inbounds i8* %call, i64 24
  %2 = bitcast i8* %arc_obstack to %struct.obstack*
  %call3 = tail call i32 @_obstack_begin(%struct.obstack* %2, i32 0, i32 0, i8* (i64)* @xmalloc, void (i8*)* @free) #6
  %conv = sext i32 %num_regs to i64
  %mul = shl nsw i64 %conv, 3
  %call4 = tail call noalias i8* @xmalloc(i64 %mul) #6
  %3 = bitcast i8* %call4 to %struct.conflict_graph_arc_def**
  %neighbor_heads = getelementptr inbounds i8* %call, i64 16
  %4 = bitcast i8* %neighbor_heads to %struct.conflict_graph_arc_def***
  store %struct.conflict_graph_arc_def** %3, %struct.conflict_graph_arc_def*** %4, align 8, !tbaa !3
  tail call void @llvm.memset.p0i8.i64(i8* %call4, i8 0, i64 %mul, i32 8, i1 false)
  ret %struct.conflict_graph_def* %0
}
