define void @splay_tree_remove(%struct.splay_tree_s* %sp, i64 %key) #0 {
entry:
  %root.i = getelementptr inbounds %struct.splay_tree_s* %sp, i64 0, i32 0
  %0 = load %struct.splay_tree_node_s** %root.i, align 8, !tbaa !0
  %cmp.i = icmp eq %struct.splay_tree_node_s* %0, null
  br i1 %cmp.i, label %if.end24, label %splay_tree_splay.exit

splay_tree_splay.exit:                            ; preds = %entry
  %call.i = tail call fastcc %struct.splay_tree_node_s* @splay_tree_splay_helper(%struct.splay_tree_s* %sp, i64 %key, %struct.splay_tree_node_s** %root.i, %struct.splay_tree_node_s** null, %struct.splay_tree_node_s** null) #6
  %.pr = load %struct.splay_tree_node_s** %root.i, align 8, !tbaa !0
  %tobool = icmp eq %struct.splay_tree_node_s* %.pr, null
  br i1 %tobool, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %splay_tree_splay.exit
  %comp = getelementptr inbounds %struct.splay_tree_s* %sp, i64 0, i32 1
  %1 = load i32 (i64, i64)** %comp, align 8, !tbaa !0
  %key2 = getelementptr inbounds %struct.splay_tree_node_s* %.pr, i64 0, i32 0
  %2 = load i64* %key2, align 8, !tbaa !3
  %call = tail call i32 %1(i64 %2, i64 %key) #6
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end24

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct.splay_tree_node_s** %root.i, align 8, !tbaa !0
  %left4 = getelementptr inbounds %struct.splay_tree_node_s* %3, i64 0, i32 2
  %4 = load %struct.splay_tree_node_s** %left4, align 8, !tbaa !0
  %right6 = getelementptr inbounds %struct.splay_tree_node_s* %3, i64 0, i32 3
  %5 = load %struct.splay_tree_node_s** %right6, align 8, !tbaa !0
  %delete_value = getelementptr inbounds %struct.splay_tree_s* %sp, i64 0, i32 3
  %6 = load void (i64)** %delete_value, align 8, !tbaa !0
  %tobool7 = icmp eq void (i64)* %6, null
  br i1 %tobool7, label %if.end, label %if.then8

if.then8:                                         ; preds = %if.then
  %value = getelementptr inbounds %struct.splay_tree_node_s* %3, i64 0, i32 1
  %7 = load i64* %value, align 8, !tbaa !3
  tail call void %6(i64 %7) #6
  %.pre = load %struct.splay_tree_node_s** %root.i, align 8, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %if.then, %if.then8
  %8 = phi %struct.splay_tree_node_s* [ %3, %if.then ], [ %.pre, %if.then8 ]
  %deallocate = getelementptr inbounds %struct.splay_tree_s* %sp, i64 0, i32 5
  %9 = load void (i8*, i8*)** %deallocate, align 8, !tbaa !0
  %10 = bitcast %struct.splay_tree_node_s* %8 to i8*
  %allocate_data = getelementptr inbounds %struct.splay_tree_s* %sp, i64 0, i32 6
  %11 = load i8** %allocate_data, align 8, !tbaa !0
  tail call void %9(i8* %10, i8* %11) #6
  %tobool12 = icmp eq %struct.splay_tree_node_s* %4, null
  br i1 %tobool12, label %if.else, label %if.then13

if.then13:                                        ; preds = %if.end
  store %struct.splay_tree_node_s* %4, %struct.splay_tree_node_s** %root.i, align 8, !tbaa !0
  %tobool15 = icmp eq %struct.splay_tree_node_s* %5, null
  br i1 %tobool15, label %if.end24, label %while.cond

while.cond:                                       ; preds = %if.then13, %while.cond
  %left.0 = phi %struct.splay_tree_node_s* [ %12, %while.cond ], [ %4, %if.then13 ]
  %right17 = getelementptr inbounds %struct.splay_tree_node_s* %left.0, i64 0, i32 3
  %12 = load %struct.splay_tree_node_s** %right17, align 8, !tbaa !0
  %tobool18 = icmp eq %struct.splay_tree_node_s* %12, null
  br i1 %tobool18, label %while.end, label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct.splay_tree_node_s* %5, %struct.splay_tree_node_s** %right17, align 8, !tbaa !0
  br label %if.end24

if.else:                                          ; preds = %if.end
  store %struct.splay_tree_node_s* %5, %struct.splay_tree_node_s** %root.i, align 8, !tbaa !0
  br label %if.end24

if.end24:                                         ; preds = %entry, %if.then13, %splay_tree_splay.exit, %if.else, %while.end, %land.lhs.true
  ret void
}
