define internal fastcc i32 @merge_outer_ops(i32* nocapture %pop0, i64* nocapture %pconst0, i32 %op1, i64 %const1, i32 %mode, i32* nocapture %pcomp_p) #0 {
entry:
  %0 = load i32* %pop0, align 4, !tbaa !9
  %1 = load i64* %pconst0, align 8, !tbaa !6
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i64]* @mode_mask_array, i64 0, i64 %idxprom
  %2 = load i64* %arrayidx, align 8, !tbaa !6
  %and = and i64 %2, %1
  %cmp = icmp eq i32 %0, 83
  %and. = select i1 %cmp, i64 %and, i64 %2
  %const1.addr.0 = and i64 %and., %const1
  %cmp5 = icmp eq i32 %op1, 1
  %cmp6 = icmp eq i32 %0, 47
  %or.cond = or i1 %cmp5, %cmp6
  br i1 %or.cond, label %return, label %if.else

if.else:                                          ; preds = %entry
  %cmp8 = icmp eq i32 %0, 1
  br i1 %cmp8, label %if.end52, label %if.else10

if.else10:                                        ; preds = %if.else
  %cmp11 = icmp eq i32 %0, %op1
  br i1 %cmp11, label %if.then12, label %if.else18

if.then12:                                        ; preds = %if.else10
  switch i32 %op1, label %if.end52 [
    i32 83, label %sw.bb
    i32 84, label %sw.bb14
    i32 85, label %sw.bb15
    i32 75, label %sw.bb16
    i32 77, label %sw.bb17
  ]

sw.bb:                                            ; preds = %if.then12
  %and13 = and i64 %and, %const1
  br label %if.end52

sw.bb14:                                          ; preds = %if.then12
  %or = or i64 %const1.addr.0, %and
  br label %if.end52

sw.bb15:                                          ; preds = %if.then12
  %xor = xor i64 %const1.addr.0, %and
  br label %if.end52

sw.bb16:                                          ; preds = %if.then12
  %add = add nsw i64 %const1.addr.0, %and
  br label %if.end52

sw.bb17:                                          ; preds = %if.then12
  br label %if.end52

if.else18:                                        ; preds = %if.else10
  %cmp19 = icmp eq i32 %0, 75
  %cmp21 = icmp eq i32 %op1, 75
  %or.cond126 = or i1 %cmp19, %cmp21
  %cmp23 = icmp eq i32 %0, 77
  %or.cond127 = or i1 %or.cond126, %cmp23
  %cmp25 = icmp eq i32 %op1, 77
  %or.cond128 = or i1 %or.cond127, %cmp25
  %or.cond128.not = xor i1 %or.cond128, true
  %cmp28 = icmp eq i64 %and, %const1.addr.0
  %or.cond131 = and i1 %cmp28, %or.cond128.not
  br i1 %or.cond131, label %if.else30, label %return

if.else30:                                        ; preds = %if.else18
  switch i32 %0, label %if.end52 [
    i32 84, label %sw.bb31
    i32 85, label %sw.bb36
    i32 83, label %sw.bb41
  ]

sw.bb31:                                          ; preds = %if.else30
  %cmp32 = icmp eq i32 %op1, 83
  %. = select i1 %cmp32, i32 47, i32 84
  br label %if.end52

sw.bb36:                                          ; preds = %if.else30
  %cmp37 = icmp eq i32 %op1, 83
  br i1 %cmp37, label %if.then38, label %if.else39

if.then38:                                        ; preds = %sw.bb36
  store i32 1, i32* %pcomp_p, align 4, !tbaa !0
  br label %if.end52

if.else39:                                        ; preds = %sw.bb36
  %neg = xor i64 %and, -1
  store i64 %neg, i64* %pconst0, align 8, !tbaa !6
  br label %if.end52

sw.bb41:                                          ; preds = %if.else30
  %cmp42 = icmp eq i32 %op1, 84
  br i1 %cmp42, label %if.end52, label %if.else44

if.else44:                                        ; preds = %sw.bb41
  store i32 1, i32* %pcomp_p, align 4, !tbaa !0
  br label %if.end52

if.end52:                                         ; preds = %sw.bb31, %sw.bb41, %if.else, %if.else39, %if.then38, %if.else44, %if.else30, %sw.bb, %sw.bb14, %sw.bb15, %sw.bb16, %sw.bb17, %if.then12
  %op0.0 = phi i32 [ %op1, %if.then12 ], [ 1, %sw.bb17 ], [ 75, %sw.bb16 ], [ 85, %sw.bb15 ], [ 84, %sw.bb14 ], [ 83, %sw.bb ], [ %0, %if.else30 ], [ 83, %if.else44 ], [ 83, %if.then38 ], [ 83, %if.else39 ], [ %op1, %if.else ], [ %., %sw.bb31 ], [ 47, %sw.bb41 ]
  %const0.0 = phi i64 [ %and, %if.then12 ], [ %and, %sw.bb17 ], [ %add, %sw.bb16 ], [ %xor, %sw.bb15 ], [ %or, %sw.bb14 ], [ %and13, %sw.bb ], [ %and, %if.else30 ], [ %and, %if.else44 ], [ %and, %if.then38 ], [ %and, %if.else39 ], [ %const1.addr.0, %if.else ], [ %and, %sw.bb31 ], [ %and, %sw.bb41 ]
  %and55 = and i64 %2, %const0.0
  %cmp56 = icmp eq i64 %and55, 0
  br i1 %cmp56, label %land.lhs.true, label %if.else68

land.lhs.true:                                    ; preds = %if.end52
  %3 = and i32 %op0.0, -2
  %4 = icmp eq i32 %3, 84
  %cmp61 = icmp eq i32 %op0.0, 75
  %or.cond78 = or i1 %4, %cmp61
  br i1 %or.cond78, label %if.end77, label %if.else63

if.else63:                                        ; preds = %land.lhs.true
  %cmp66 = icmp eq i32 %op0.0, 83
  br i1 %cmp66, label %if.end77, label %if.else68

if.else68:                                        ; preds = %if.end52, %if.else63
  %cmp71 = icmp eq i64 %and55, %2
  %cmp73 = icmp eq i32 %op0.0, 83
  %or.cond130 = and i1 %cmp71, %cmp73
  %.op0.0 = select i1 %or.cond130, i32 1, i32 %op0.0
  br label %if.end77

if.end77:                                         ; preds = %if.else68, %if.else63, %land.lhs.true
  %op0.1 = phi i32 [ 1, %land.lhs.true ], [ 47, %if.else63 ], [ %.op0.0, %if.else68 ]
  %call = tail call i64 @trunc_int_for_mode(i64 %and55, i32 %mode) #6
  store i32 %op0.1, i32* %pop0, align 4, !tbaa !9
  store i64 %call, i64* %pconst0, align 8, !tbaa !6
  br label %return

return:                                           ; preds = %if.else18, %entry, %if.end77
  %retval.0 = phi i32 [ 1, %if.end77 ], [ 1, %entry ], [ 0, %if.else18 ]
  ret i32 %retval.0
}
