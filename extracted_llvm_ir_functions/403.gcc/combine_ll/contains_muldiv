define internal fastcc i32 @contains_muldiv(%struct.rtx_def* nocapture %x) #0 {
entry:
  br label %tailrecurse

tailrecurse:                                      ; preds = %sw.bb23, %entry
  %x.tr = phi %struct.rtx_def* [ %x, %entry ], [ %9, %sw.bb23 ]
  %0 = bitcast %struct.rtx_def* %x.tr to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.default [
    i32 80, label %return
    i32 79, label %return
    i32 82, label %return
    i32 81, label %return
    i32 78, label %sw.bb1
  ]

sw.bb1:                                           ; preds = %tailrecurse
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %2 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load2 = load i32* %2, align 8
  %bf.clear3 = and i32 %bf.load2, 65535
  %cmp = icmp eq i32 %bf.clear3, 54
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %sw.bb1
  %rtwint = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0, i32 0
  %3 = load i64* %rtwint, align 8, !tbaa !6
  %call = tail call i32 @exact_log2_wide(i64 %3) #6
  %phitmp = icmp slt i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb1
  %4 = phi i1 [ true, %sw.bb1 ], [ %phitmp, %land.rhs ]
  %lnot.ext = zext i1 %4 to i32
  br label %return

sw.default:                                       ; preds = %tailrecurse
  %idxprom35 = zext i32 %bf.clear to i64
  %arrayidx12 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom35
  %5 = load i8* %arrayidx12, align 1, !tbaa !1
  %conv = sext i8 %5 to i32
  switch i32 %conv, label %return [
    i32 99, label %sw.bb13
    i32 60, label %sw.bb13
    i32 50, label %sw.bb13
    i32 49, label %sw.bb23
  ]

sw.bb13:                                          ; preds = %sw.default, %sw.default, %sw.default
  %fld14 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1
  %rtx16 = bitcast [1 x %union.rtunion_def]* %fld14 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx16, align 8, !tbaa !3
  %call17 = tail call fastcc i32 @contains_muldiv(%struct.rtx_def* %6) #7
  %tobool = icmp eq i32 %call17, 0
  br i1 %tobool, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %sw.bb13
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 1
  %rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx20, align 8, !tbaa !3
  %call21 = tail call fastcc i32 @contains_muldiv(%struct.rtx_def* %7) #7
  %tobool22 = icmp ne i32 %call21, 0
  br label %lor.end

lor.end:                                          ; preds = %sw.bb13, %lor.rhs
  %8 = phi i1 [ true, %sw.bb13 ], [ %tobool22, %lor.rhs ]
  %lor.ext = zext i1 %8 to i32
  br label %return

sw.bb23:                                          ; preds = %sw.default
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %x.tr, i64 0, i32 1, i64 0
  %rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx26, align 8, !tbaa !3
  br label %tailrecurse

return:                                           ; preds = %sw.default, %tailrecurse, %tailrecurse, %tailrecurse, %tailrecurse, %lor.end, %land.end
  %retval.0 = phi i32 [ %lor.ext, %lor.end ], [ %lnot.ext, %land.end ], [ 0, %sw.default ], [ 1, %tailrecurse ], [ 1, %tailrecurse ], [ 1, %tailrecurse ], [ 1, %tailrecurse ]
  ret i32 %retval.0
}
