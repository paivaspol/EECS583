define internal fastcc %struct.rtx_def* @simplify_and_const_int(%struct.rtx_def* %x, i32 %mode, %struct.rtx_def* %varop, i64 %constop) #0 {
entry:
  %call = tail call fastcc %struct.rtx_def* @force_to_mode(%struct.rtx_def* %varop, i32 %mode, i64 %constop, %struct.rtx_def* null, i32 0) #7
  %0 = bitcast %struct.rtx_def* %call to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.end7 [
    i32 49, label %return
    i32 54, label %if.then4
  ]

if.then4:                                         ; preds = %entry
  %rtwint = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0, i32 0
  %1 = load i64* %rtwint, align 8, !tbaa !6
  %and = and i64 %1, %constop
  %call5 = tail call i64 @trunc_int_for_mode(i64 %and, i32 %mode) #6
  %call6 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call5) #6
  br label %return

if.end7:                                          ; preds = %entry
  %call8 = tail call fastcc i64 @nonzero_bits(%struct.rtx_def* %call, i32 %mode) #7
  %idxprom = sext i32 %mode to i64
  %arrayidx9 = getelementptr inbounds [59 x i64]* @mode_mask_array, i64 0, i64 %idxprom
  %2 = load i64* %arrayidx9, align 8, !tbaa !6
  %and10 = and i64 %2, %call8
  %and11 = and i64 %and10, %constop
  %cmp12 = icmp eq i64 %and11, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end7
  %3 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !3
  br label %return

if.end14:                                         ; preds = %if.end7
  %bf.load15 = load i32* %0, align 8
  %bf.clear16 = and i32 %bf.load15, 65535
  %cmp17 = icmp eq i32 %bf.clear16, 77
  br i1 %cmp17, label %land.lhs.true, label %if.end30

land.lhs.true:                                    ; preds = %if.end14
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %call20 = tail call fastcc i64 @nonzero_bits(%struct.rtx_def* %4, i32 %mode) #7
  %cmp21 = icmp eq i64 %call20, 1
  br i1 %cmp21, label %land.lhs.true22, label %if.end30

land.lhs.true22:                                  ; preds = %land.lhs.true
  %call23 = tail call i32 @exact_log2_wide(i64 %and11) #6
  %cmp24 = icmp sgt i32 %call23, -1
  br i1 %cmp24, label %if.then25, label %if.end30

if.then25:                                        ; preds = %land.lhs.true22
  %5 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %call29 = tail call fastcc %struct.rtx_def* @simplify_shift_const(%struct.rtx_def* null, i32 87, i32 %mode, %struct.rtx_def* %5, i32 %call23) #7
  br label %return

if.end30:                                         ; preds = %land.lhs.true22, %land.lhs.true, %if.end14
  %bf.load31 = load i32* %0, align 8
  %bf.clear32 = and i32 %bf.load31, 65535
  switch i32 %bf.clear32, label %if.end81 [
    i32 84, label %if.then37
    i32 85, label %if.then37
    i32 75, label %land.lhs.true63
  ]

if.then37:                                        ; preds = %if.end30, %if.end30
  %bf.lshr = lshr i32 %bf.load31, 16
  %bf.clear41 = and i32 %bf.lshr, 255
  %fld45 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1
  %rtx47 = bitcast [1 x %union.rtunion_def]* %fld45 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx47, align 8, !tbaa !3
  %call48 = tail call fastcc %struct.rtx_def* @simplify_and_const_int(%struct.rtx_def* null, i32 %bf.clear41, %struct.rtx_def* %6, i64 %and11) #7
  %bf.load49 = load i32* %0, align 8
  %bf.lshr50 = lshr i32 %bf.load49, 16
  %bf.clear51 = and i32 %bf.lshr50, 255
  %arrayidx53 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx54, align 8, !tbaa !3
  %call55 = tail call fastcc %struct.rtx_def* @simplify_and_const_int(%struct.rtx_def* null, i32 %bf.clear51, %struct.rtx_def* %7, i64 %and11) #7
  %call56 = tail call fastcc %struct.rtx_def* @gen_binary(i32 %bf.clear32, i32 %bf.clear41, %struct.rtx_def* %call48, %struct.rtx_def* %call55) #7
  %call57 = tail call fastcc %struct.rtx_def* @apply_distributive_law(%struct.rtx_def* %call56) #7
  %call58 = tail call fastcc %struct.rtx_def* @gen_lowpart_for_combine(i32 %mode, %struct.rtx_def* %call57) #7
  ret %struct.rtx_def* %call58

land.lhs.true63:                                  ; preds = %if.end30
  %add = add i64 %and11, 1
  %call64 = tail call i32 @exact_log2_wide(i64 %add) #6
  %cmp65 = icmp sgt i32 %call64, -1
  br i1 %cmp65, label %if.then66, label %if.end81

if.then66:                                        ; preds = %land.lhs.true63
  %fld67 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1
  %rtx69 = bitcast [1 x %union.rtunion_def]* %fld67 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx69, align 8, !tbaa !3
  %call70 = tail call fastcc %struct.rtx_def* @simplify_and_const_int(%struct.rtx_def* null, i32 %mode, %struct.rtx_def* %8, i64 %and11) #7
  %arrayidx72 = getelementptr inbounds %struct.rtx_def* %call, i64 0, i32 1, i64 1
  %rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx73, align 8, !tbaa !3
  %call74 = tail call fastcc %struct.rtx_def* @simplify_and_const_int(%struct.rtx_def* null, i32 %mode, %struct.rtx_def* %9, i64 %and11) #7
  %10 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !3
  %cmp75 = icmp eq %struct.rtx_def* %call70, %10
  br i1 %cmp75, label %return, label %if.end77

if.end77:                                         ; preds = %if.then66
  %cmp78 = icmp eq %struct.rtx_def* %call74, %10
  br i1 %cmp78, label %return, label %if.end81

if.end81:                                         ; preds = %if.end30, %if.end77, %land.lhs.true63
  %tobool = icmp ne %struct.rtx_def* %x, null
  br i1 %tobool, label %land.lhs.true82, label %if.else

land.lhs.true82:                                  ; preds = %if.end81
  %arrayidx84 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx85, align 8, !tbaa !3
  %12 = bitcast %struct.rtx_def* %11 to i32*
  %bf.load86 = load i32* %12, align 8
  %bf.clear87 = and i32 %bf.load86, 65535
  %cmp88 = icmp eq i32 %bf.clear87, 63
  br i1 %cmp88, label %land.lhs.true89, label %if.else

land.lhs.true89:                                  ; preds = %land.lhs.true82
  %bf.lshr94 = lshr i32 %bf.load86, 16
  %bf.clear95 = and i32 %bf.lshr94, 255
  %cmp96 = icmp eq i32 %bf.clear95, %mode
  br i1 %cmp96, label %land.lhs.true97, label %if.else

land.lhs.true97:                                  ; preds = %land.lhs.true89
  %arrayidx102 = getelementptr inbounds %struct.rtx_def* %11, i64 0, i32 1, i64 0
  %rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**
  %13 = load %struct.rtx_def** %rtx103, align 8, !tbaa !3
  %cmp104 = icmp eq %struct.rtx_def* %13, %call
  br i1 %cmp104, label %if.end110, label %if.else

if.else:                                          ; preds = %land.lhs.true97, %land.lhs.true89, %land.lhs.true82, %if.end81
  %call109 = tail call fastcc %struct.rtx_def* @gen_lowpart_for_combine(i32 %mode, %struct.rtx_def* %call) #7
  %.phi.trans.insert = bitcast %struct.rtx_def* %call109 to i32*
  %bf.load111.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end110

if.end110:                                        ; preds = %land.lhs.true97, %if.else
  %bf.load111 = phi i32 [ %bf.load111.pre, %if.else ], [ %bf.load86, %land.lhs.true97 ]
  %varop.addr.0 = phi %struct.rtx_def* [ %call109, %if.else ], [ %11, %land.lhs.true97 ]
  %bf.clear112 = and i32 %bf.load111, 65535
  %cmp113 = icmp eq i32 %bf.clear112, 49
  br i1 %cmp113, label %if.then114, label %if.end116

if.then114:                                       ; preds = %if.end110
  %cond = select i1 %tobool, %struct.rtx_def* %x, %struct.rtx_def* %varop.addr.0
  br label %return

if.end116:                                        ; preds = %if.end110
  %cmp117 = icmp eq i64 %and11, %and10
  br i1 %cmp117, label %return, label %if.else119

if.else119:                                       ; preds = %if.end116
  %call120 = tail call i64 @trunc_int_for_mode(i64 %and11, i32 %mode) #6
  %cmp121 = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp121, label %if.then131, label %lor.lhs.false122

lor.lhs.false122:                                 ; preds = %if.else119
  %14 = bitcast %struct.rtx_def* %x to i32*
  %bf.load123 = load i32* %14, align 8
  %bf.clear124 = and i32 %bf.load123, 65535
  %cmp125 = icmp eq i32 %bf.clear124, 83
  br i1 %cmp125, label %lor.lhs.false126, label %if.then131

lor.lhs.false126:                                 ; preds = %lor.lhs.false122
  %bf.lshr128 = lshr i32 %bf.load123, 16
  %bf.clear129 = and i32 %bf.lshr128, 255
  %cmp130 = icmp eq i32 %bf.clear129, %mode
  br i1 %cmp130, label %if.else134, label %if.then131

if.then131:                                       ; preds = %lor.lhs.false126, %lor.lhs.false122, %if.else119
  %call132 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call120) #6
  %call133 = tail call fastcc %struct.rtx_def* @gen_binary(i32 83, i32 %mode, %struct.rtx_def* %varop.addr.0, %struct.rtx_def* %call132) #7
  br label %return

if.else134:                                       ; preds = %lor.lhs.false126
  %arrayidx136 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx137 = bitcast %union.rtunion_def* %arrayidx136 to %struct.rtx_def**
  %15 = load %struct.rtx_def** %rtx137, align 8, !tbaa !3
  %16 = bitcast %struct.rtx_def* %15 to i32*
  %bf.load138 = load i32* %16, align 8
  %bf.clear139 = and i32 %bf.load138, 65535
  %cmp140 = icmp eq i32 %bf.clear139, 54
  br i1 %cmp140, label %lor.lhs.false141, label %if.then149

lor.lhs.false141:                                 ; preds = %if.else134
  %rtwint147 = getelementptr inbounds %struct.rtx_def* %15, i64 0, i32 1, i64 0, i32 0
  %17 = load i64* %rtwint147, align 8, !tbaa !6
  %cmp148 = icmp eq i64 %17, %call120
  br i1 %cmp148, label %if.end154, label %if.then149

if.then149:                                       ; preds = %lor.lhs.false141, %if.else134
  %call153 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call120) #6
  tail call fastcc void @do_SUBST(%struct.rtx_def** %rtx137, %struct.rtx_def* %call153) #7
  br label %if.end154

if.end154:                                        ; preds = %lor.lhs.false141, %if.then149
  %arrayidx156 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx157 = bitcast %union.rtunion_def* %arrayidx156 to %struct.rtx_def**
  tail call fastcc void @do_SUBST(%struct.rtx_def** %rtx157, %struct.rtx_def* %varop.addr.0) #7
  br label %return

return:                                           ; preds = %if.end154, %if.then131, %if.end116, %if.end77, %if.then66, %entry, %if.then114, %if.then25, %if.then13, %if.then4
  %retval.0 = phi %struct.rtx_def* [ %call6, %if.then4 ], [ %3, %if.then13 ], [ %call29, %if.then25 ], [ %cond, %if.then114 ], [ %call, %entry ], [ %call74, %if.then66 ], [ %call70, %if.end77 ], [ %call133, %if.then131 ], [ %x, %if.end154 ], [ %varop.addr.0, %if.end116 ]
  ret %struct.rtx_def* %retval.0
}
