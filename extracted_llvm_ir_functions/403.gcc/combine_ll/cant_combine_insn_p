define internal fastcc i32 @cant_combine_insn_p(%struct.rtx_def* %insn) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %insn to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom98 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom98
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp = icmp eq i8 %1, 105
  br i1 %cmp, label %cond.true, label %return

cond.true:                                        ; preds = %entry
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 3
  %rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %3 = bitcast %struct.rtx_def* %2 to i32*
  %bf.load10 = load i32* %3, align 8
  %bf.clear11 = and i32 %bf.load10, 65535
  %cmp12 = icmp eq i32 %bf.clear11, 47
  br i1 %cmp12, label %cond.end22, label %cond.false

cond.false:                                       ; preds = %cond.true
  %call = tail call %struct.rtx_def* @single_set_2(%struct.rtx_def* %insn, %struct.rtx_def* %2) #6
  br label %cond.end22

cond.end22:                                       ; preds = %cond.true, %cond.false
  %cond23 = phi %struct.rtx_def* [ %call, %cond.false ], [ %2, %cond.true ]
  %tobool = icmp eq %struct.rtx_def* %cond23, null
  br i1 %tobool, label %return, label %if.end25

if.end25:                                         ; preds = %cond.end22
  %arrayidx27 = getelementptr inbounds %struct.rtx_def* %cond23, i64 0, i32 1, i64 1
  %rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx28, align 8, !tbaa !3
  %arrayidx30 = getelementptr inbounds %struct.rtx_def* %cond23, i64 0, i32 1, i64 0
  %rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx31, align 8, !tbaa !3
  %6 = bitcast %struct.rtx_def* %4 to i32*
  %bf.load32 = load i32* %6, align 8
  %bf.clear33 = and i32 %bf.load32, 65535
  %cmp34 = icmp eq i32 %bf.clear33, 63
  br i1 %cmp34, label %if.then36, label %if.end40

if.then36:                                        ; preds = %if.end25
  %arrayidx38 = getelementptr inbounds %struct.rtx_def* %4, i64 0, i32 1, i64 0
  %rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx39, align 8, !tbaa !3
  br label %if.end40

if.end40:                                         ; preds = %if.then36, %if.end25
  %src.0 = phi %struct.rtx_def* [ %7, %if.then36 ], [ %4, %if.end25 ]
  %8 = bitcast %struct.rtx_def* %5 to i32*
  %bf.load41 = load i32* %8, align 8
  %bf.clear42 = and i32 %bf.load41, 65535
  %cmp43 = icmp eq i32 %bf.clear42, 63
  br i1 %cmp43, label %if.then45, label %if.end49

if.then45:                                        ; preds = %if.end40
  %arrayidx47 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0
  %rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**
  %9 = load %struct.rtx_def** %rtx48, align 8, !tbaa !3
  br label %if.end49

if.end49:                                         ; preds = %if.end40, %if.then45
  %dest.0 = phi %struct.rtx_def* [ %9, %if.then45 ], [ %5, %if.end40 ]
  %10 = bitcast %struct.rtx_def* %src.0 to i32*
  %bf.load50 = load i32* %10, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 61
  br i1 %cmp52, label %land.lhs.true, label %if.end83

land.lhs.true:                                    ; preds = %if.end49
  %11 = bitcast %struct.rtx_def* %dest.0 to i32*
  %bf.load54 = load i32* %11, align 8
  %bf.clear55 = and i32 %bf.load54, 65535
  %cmp56 = icmp eq i32 %bf.clear55, 61
  br i1 %cmp56, label %land.lhs.true58, label %if.end83

land.lhs.true58:                                  ; preds = %land.lhs.true
  %arrayidx60 = getelementptr inbounds %struct.rtx_def* %src.0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx60 to i32*
  %12 = load i32* %rtuint, align 4, !tbaa !0
  %cmp61 = icmp ult i32 %12, 53
  br i1 %cmp61, label %land.lhs.true63, label %lor.lhs.false

land.lhs.true63:                                  ; preds = %land.lhs.true58
  %idxprom67 = zext i32 %12 to i64
  %arrayidx68 = getelementptr inbounds [53 x i8]* @fixed_regs, i64 0, i64 %idxprom67
  %13 = load i8* %arrayidx68, align 1, !tbaa !1
  %tobool69 = icmp eq i8 %13, 0
  br i1 %tobool69, label %return, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true63, %land.lhs.true58
  %arrayidx71 = getelementptr inbounds %struct.rtx_def* %dest.0, i64 0, i32 1, i64 0
  %rtuint72 = bitcast %union.rtunion_def* %arrayidx71 to i32*
  %14 = load i32* %rtuint72, align 4, !tbaa !0
  %cmp73 = icmp ult i32 %14, 53
  br i1 %cmp73, label %land.lhs.true75, label %if.end83

land.lhs.true75:                                  ; preds = %lor.lhs.false
  %idxprom79 = zext i32 %14 to i64
  %arrayidx80 = getelementptr inbounds [53 x i8]* @fixed_regs, i64 0, i64 %idxprom79
  %15 = load i8* %arrayidx80, align 1, !tbaa !1
  %tobool81 = icmp eq i8 %15, 0
  br i1 %tobool81, label %return, label %if.end83

if.end83:                                         ; preds = %land.lhs.true75, %lor.lhs.false, %land.lhs.true, %if.end49
  br label %return

return:                                           ; preds = %land.lhs.true75, %land.lhs.true63, %cond.end22, %entry, %if.end83
  %retval.0 = phi i32 [ 0, %if.end83 ], [ 1, %entry ], [ 0, %cond.end22 ], [ 1, %land.lhs.true63 ], [ 1, %land.lhs.true75 ]
  ret i32 %retval.0
}
