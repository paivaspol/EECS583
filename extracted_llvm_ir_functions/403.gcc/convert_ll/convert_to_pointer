define %union.tree_node* @convert_to_pointer(%union.tree_node* %type, %union.tree_node* %expr) #0 {
entry:
  %call36 = tail call i32 @integer_zerop(%union.tree_node* %expr) #2
  %tobool37 = icmp eq i32 %call36, 0
  br i1 %tobool37, label %if.end, label %if.then

if.then:                                          ; preds = %tailrecurse.backedge, %entry
  %call1 = tail call %union.tree_node* @build_int_2_wide(i64 0, i64 0) #2
  %type2 = getelementptr inbounds %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %type, %union.tree_node** %type2, align 8, !tbaa !0
  br label %return

if.end:                                           ; preds = %entry, %tailrecurse.backedge
  %expr.tr38 = phi %union.tree_node* [ %expr.tr.be, %tailrecurse.backedge ], [ %expr, %entry ]
  %type4 = getelementptr inbounds %union.tree_node* %expr.tr38, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type4, align 8, !tbaa !0
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %1 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %sw.default [
    i32 13, label %sw.bb
    i32 15, label %sw.bb
    i32 6, label %sw.bb7
    i32 10, label %sw.bb7
    i32 11, label %sw.bb7
    i32 12, label %sw.bb7
  ]

sw.bb:                                            ; preds = %if.end, %if.end
  %call6 = tail call %union.tree_node* @build1(i32 115, %union.tree_node* %type, %union.tree_node* %expr.tr38) #2
  br label %return

sw.bb7:                                           ; preds = %if.end, %if.end, %if.end, %if.end
  %type10 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %precision = getelementptr inbounds %struct.tree_type* %type10, i64 0, i32 6
  %2 = bitcast [4 x i8]* %precision to i32*
  %bf.load11 = load i32* %2, align 4
  %bf.clear12 = and i32 %bf.load11, 511
  %3 = load i32* @target_flags, align 4, !tbaa !3
  %and = lshr i32 %3, 20
  %4 = and i32 %and, 32
  %5 = add i32 %4, 32
  %cmp = icmp eq i32 %bf.clear12, %5
  br i1 %cmp, label %if.then14, label %if.end16

if.then14:                                        ; preds = %sw.bb7
  %call15 = tail call %union.tree_node* @build1(i32 114, %union.tree_node* %type, %union.tree_node* %expr.tr38) #2
  br label %return

if.end16:                                         ; preds = %sw.bb7
  %call20 = tail call %union.tree_node* @type_for_size(i32 %5, i32 0) #2
  %call21 = tail call %union.tree_node* @convert(%union.tree_node* %call20, %union.tree_node* %expr.tr38) #2
  br label %tailrecurse.backedge

tailrecurse.backedge:                             ; preds = %if.end16, %sw.default
  %expr.tr.be = phi %union.tree_node* [ %call21, %if.end16 ], [ %6, %sw.default ]
  %call = tail call i32 @integer_zerop(%union.tree_node* %expr.tr.be) #2
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

sw.default:                                       ; preds = %if.end
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([33 x i8]* @.str, i64 0, i64 0)) #2
  %6 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !0
  br label %tailrecurse.backedge

return:                                           ; preds = %if.then14, %sw.bb, %if.then
  %retval.0 = phi %union.tree_node* [ %call1, %if.then ], [ %call15, %if.then14 ], [ %call6, %sw.bb ]
  ret %union.tree_node* %retval.0
}
