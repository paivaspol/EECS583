define void @output_clear_message_text(%struct.output_buffer* %buffer) #2 {
entry:
  %obstack = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 2
  %object_base = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 2, i32 2
  %0 = load i8** %object_base, align 8, !tbaa !3
  %chunk = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 2, i32 1
  %1 = load %struct._obstack_chunk** %chunk, align 8, !tbaa !3
  %2 = bitcast %struct._obstack_chunk* %1 to i8*
  %cmp = icmp ugt i8* %0, %2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %chunk_limit = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 2, i32 4
  %3 = load i8** %chunk_limit, align 8, !tbaa !3
  %cmp2 = icmp ult i8* %0, %3
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  store i8* %0, i8** %object_base, align 8, !tbaa !3
  %next_free = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 2, i32 3
  store i8* %0, i8** %next_free, align 8, !tbaa !3
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  tail call void @obstack_free(%struct.obstack* %obstack, i8* %0) #10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %line_length = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 3
  store i32 0, i32* %line_length, align 4, !tbaa !0
  ret void
}
