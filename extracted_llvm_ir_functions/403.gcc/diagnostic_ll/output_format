define internal fastcc void @output_format(%struct.output_buffer* %buffer) #2 {
entry:
  %cursor = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 0, i32 7
  %0 = load i8** %cursor, align 8, !tbaa !3
  %1 = load i8* %0, align 1, !tbaa !1
  %tobool269 = icmp eq i8 %1, 0
  br i1 %tobool269, label %for.end, label %while.cond.preheader.lr.ph

while.cond.preheader.lr.ph:                       ; preds = %entry
  %format_decoder = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 5
  %format_args = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 0, i32 8
  %arraydecay.i255 = getelementptr inbounds %struct.output_buffer* %buffer, i64 0, i32 4, i64 0
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %while.cond.preheader.lr.ph, %for.inc
  %2 = phi i8 [ %1, %while.cond.preheader.lr.ph ], [ %81, %for.inc ]
  %3 = phi i8* [ %0, %while.cond.preheader.lr.ph ], [ %incdec.ptr216, %for.inc ]
  br label %while.cond

while.cond:                                       ; preds = %while.cond.preheader, %while.body
  %4 = phi i8 [ %.pre, %while.body ], [ %2, %while.cond.preheader ]
  %p.0 = phi i8* [ %incdec.ptr, %while.body ], [ %3, %while.cond.preheader ]
  switch i8 %4, label %while.body [
    i8 0, label %while.end
    i8 37, label %while.end
  ]

while.body:                                       ; preds = %while.cond
  %incdec.ptr = getelementptr inbounds i8* %p.0, i64 1
  %.pre = load i8* %incdec.ptr, align 1, !tbaa !1
  br label %while.cond

while.end:                                        ; preds = %while.cond, %while.cond
  tail call fastcc void @wrap_text(%struct.output_buffer* %buffer, i8* %3, i8* %p.0) #11
  store i8* %p.0, i8** %cursor, align 8, !tbaa !3
  %5 = load i8* %p.0, align 1, !tbaa !1
  %tobool12 = icmp eq i8 %5, 0
  br i1 %tobool12, label %for.end, label %if.end

if.end:                                           ; preds = %while.end
  %incdec.ptr15 = getelementptr inbounds i8* %p.0, i64 1
  store i8* %incdec.ptr15, i8** %cursor, align 8, !tbaa !3
  %6 = load i8* %incdec.ptr15, align 1, !tbaa !1
  %cmp17 = icmp eq i8 %6, 108
  br i1 %cmp17, label %if.then19, label %if.end23

if.then19:                                        ; preds = %if.end
  %incdec.ptr22 = getelementptr inbounds i8* %p.0, i64 2
  store i8* %incdec.ptr22, i8** %cursor, align 8, !tbaa !3
  %.pre270 = load i8* %incdec.ptr22, align 1, !tbaa !1
  br label %if.end23

if.end23:                                         ; preds = %if.then19, %if.end
  %7 = phi i8 [ %.pre270, %if.then19 ], [ %6, %if.end ]
  %8 = phi i8* [ %incdec.ptr22, %if.then19 ], [ %incdec.ptr15, %if.end ]
  %long_integer.0 = phi i32 [ 1, %if.then19 ], [ 0, %if.end ]
  %conv26 = sext i8 %7 to i32
  switch i32 %conv26, label %sw.default [
    i32 99, label %sw.bb
    i32 100, label %sw.bb27
    i32 105, label %sw.bb27
    i32 111, label %sw.bb57
    i32 115, label %sw.bb88
    i32 117, label %sw.bb102
    i32 120, label %sw.bb133
    i32 37, label %sw.bb164
    i32 46, label %sw.bb165
  ]

sw.bb:                                            ; preds = %if.end23
  %9 = load [1 x %struct.__va_list_tag]** %format_args, align 8, !tbaa !3
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, i32 0
  %gp_offset = load i32* %gp_offset_p, align 4
  %fits_in_gp = icmp ult i32 %gp_offset, 41
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem

vaarg.in_reg:                                     ; preds = %sw.bb
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, i32 3
  %reg_save_area = load i8** %10, align 8
  %11 = sext i32 %gp_offset to i64
  %12 = getelementptr i8* %reg_save_area, i64 %11
  %13 = add i32 %gp_offset, 8
  store i32 %13, i32* %gp_offset_p, align 4
  br label %vaarg.end

vaarg.in_mem:                                     ; preds = %sw.bb
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, i32 2
  %overflow_arg_area = load i8** %overflow_arg_area_p, align 8
  %overflow_arg_area.next = getelementptr i8* %overflow_arg_area, i64 8
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8
  br label %vaarg.end

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %12, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to i32*
  %14 = load i32* %vaarg.addr, align 4
  tail call void @output_add_character(%struct.output_buffer* %buffer, i32 %14) #11
  br label %for.inc

sw.bb27:                                          ; preds = %if.end23, %if.end23
  %tobool28 = icmp eq i32 %long_integer.0, 0
  %15 = load [1 x %struct.__va_list_tag]** %format_args, align 8, !tbaa !3
  %gp_offset_p32 = getelementptr inbounds [1 x %struct.__va_list_tag]* %15, i64 0, i64 0, i32 0
  %gp_offset33 = load i32* %gp_offset_p32, align 4
  %fits_in_gp34 = icmp ult i32 %gp_offset33, 41
  br i1 %tobool28, label %if.else, label %if.then29

if.then29:                                        ; preds = %sw.bb27
  br i1 %fits_in_gp34, label %vaarg.in_reg35, label %vaarg.in_mem37

vaarg.in_reg35:                                   ; preds = %if.then29
  %16 = getelementptr inbounds [1 x %struct.__va_list_tag]* %15, i64 0, i64 0, i32 3
  %reg_save_area36 = load i8** %16, align 8
  %17 = sext i32 %gp_offset33 to i64
  %18 = getelementptr i8* %reg_save_area36, i64 %17
  %19 = add i32 %gp_offset33, 8
  store i32 %19, i32* %gp_offset_p32, align 4
  br label %vaarg.end41

vaarg.in_mem37:                                   ; preds = %if.then29
  %overflow_arg_area_p38 = getelementptr inbounds [1 x %struct.__va_list_tag]* %15, i64 0, i64 0, i32 2
  %overflow_arg_area39 = load i8** %overflow_arg_area_p38, align 8
  %overflow_arg_area.next40 = getelementptr i8* %overflow_arg_area39, i64 8
  store i8* %overflow_arg_area.next40, i8** %overflow_arg_area_p38, align 8
  br label %vaarg.end41

vaarg.end41:                                      ; preds = %vaarg.in_mem37, %vaarg.in_reg35
  %vaarg.addr42.in = phi i8* [ %18, %vaarg.in_reg35 ], [ %overflow_arg_area39, %vaarg.in_mem37 ]
  %vaarg.addr42 = bitcast i8* %vaarg.addr42.in to i64*
  %20 = load i64* %vaarg.addr42, align 8
  %call.i = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay.i255, i8* getelementptr inbounds ([4 x i8]* @.str28, i64 0, i64 0), i64 %20) #10
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %arraydecay.i255) #10
  br label %for.inc

if.else:                                          ; preds = %sw.bb27
  br i1 %fits_in_gp34, label %vaarg.in_reg48, label %vaarg.in_mem50

vaarg.in_reg48:                                   ; preds = %if.else
  %21 = getelementptr inbounds [1 x %struct.__va_list_tag]* %15, i64 0, i64 0, i32 3
  %reg_save_area49 = load i8** %21, align 8
  %22 = sext i32 %gp_offset33 to i64
  %23 = getelementptr i8* %reg_save_area49, i64 %22
  %24 = add i32 %gp_offset33, 8
  store i32 %24, i32* %gp_offset_p32, align 4
  br label %vaarg.end54

vaarg.in_mem50:                                   ; preds = %if.else
  %overflow_arg_area_p51 = getelementptr inbounds [1 x %struct.__va_list_tag]* %15, i64 0, i64 0, i32 2
  %overflow_arg_area52 = load i8** %overflow_arg_area_p51, align 8
  %overflow_arg_area.next53 = getelementptr i8* %overflow_arg_area52, i64 8
  store i8* %overflow_arg_area.next53, i8** %overflow_arg_area_p51, align 8
  br label %vaarg.end54

vaarg.end54:                                      ; preds = %vaarg.in_mem50, %vaarg.in_reg48
  %vaarg.addr55.in = phi i8* [ %23, %vaarg.in_reg48 ], [ %overflow_arg_area52, %vaarg.in_mem50 ]
  %vaarg.addr55 = bitcast i8* %vaarg.addr55.in to i32*
  %25 = load i32* %vaarg.addr55, align 4
  %call.i256 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay.i255, i8* getelementptr inbounds ([3 x i8]* @.str, i64 0, i64 0), i32 %25) #10
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %arraydecay.i255) #10
  br label %for.inc

sw.bb57:                                          ; preds = %if.end23
  %tobool58 = icmp eq i32 %long_integer.0, 0
  %26 = load [1 x %struct.__va_list_tag]** %format_args, align 8, !tbaa !3
  %gp_offset_p62 = getelementptr inbounds [1 x %struct.__va_list_tag]* %26, i64 0, i64 0, i32 0
  %gp_offset63 = load i32* %gp_offset_p62, align 4
  %fits_in_gp64 = icmp ult i32 %gp_offset63, 41
  br i1 %tobool58, label %if.else73, label %if.then59

if.then59:                                        ; preds = %sw.bb57
  br i1 %fits_in_gp64, label %vaarg.in_reg65, label %vaarg.in_mem67

vaarg.in_reg65:                                   ; preds = %if.then59
  %27 = getelementptr inbounds [1 x %struct.__va_list_tag]* %26, i64 0, i64 0, i32 3
  %reg_save_area66 = load i8** %27, align 8
  %28 = sext i32 %gp_offset63 to i64
  %29 = getelementptr i8* %reg_save_area66, i64 %28
  %30 = add i32 %gp_offset63, 8
  store i32 %30, i32* %gp_offset_p62, align 4
  br label %vaarg.end71

vaarg.in_mem67:                                   ; preds = %if.then59
  %overflow_arg_area_p68 = getelementptr inbounds [1 x %struct.__va_list_tag]* %26, i64 0, i64 0, i32 2
  %overflow_arg_area69 = load i8** %overflow_arg_area_p68, align 8
  %overflow_arg_area.next70 = getelementptr i8* %overflow_arg_area69, i64 8
  store i8* %overflow_arg_area.next70, i8** %overflow_arg_area_p68, align 8
  br label %vaarg.end71

vaarg.end71:                                      ; preds = %vaarg.in_mem67, %vaarg.in_reg65
  %vaarg.addr72.in = phi i8* [ %29, %vaarg.in_reg65 ], [ %overflow_arg_area69, %vaarg.in_mem67 ]
  %vaarg.addr72 = bitcast i8* %vaarg.addr72.in to i64*
  %31 = load i64* %vaarg.addr72, align 8
  %call.i258 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay.i255, i8* getelementptr inbounds ([4 x i8]* @.str27, i64 0, i64 0), i64 %31) #10
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %arraydecay.i255) #10
  br label %for.inc

if.else73:                                        ; preds = %sw.bb57
  br i1 %fits_in_gp64, label %vaarg.in_reg79, label %vaarg.in_mem81

vaarg.in_reg79:                                   ; preds = %if.else73
  %32 = getelementptr inbounds [1 x %struct.__va_list_tag]* %26, i64 0, i64 0, i32 3
  %reg_save_area80 = load i8** %32, align 8
  %33 = sext i32 %gp_offset63 to i64
  %34 = getelementptr i8* %reg_save_area80, i64 %33
  %35 = add i32 %gp_offset63, 8
  store i32 %35, i32* %gp_offset_p62, align 4
  br label %vaarg.end85

vaarg.in_mem81:                                   ; preds = %if.else73
  %overflow_arg_area_p82 = getelementptr inbounds [1 x %struct.__va_list_tag]* %26, i64 0, i64 0, i32 2
  %overflow_arg_area83 = load i8** %overflow_arg_area_p82, align 8
  %overflow_arg_area.next84 = getelementptr i8* %overflow_arg_area83, i64 8
  store i8* %overflow_arg_area.next84, i8** %overflow_arg_area_p82, align 8
  br label %vaarg.end85

vaarg.end85:                                      ; preds = %vaarg.in_mem81, %vaarg.in_reg79
  %vaarg.addr86.in = phi i8* [ %34, %vaarg.in_reg79 ], [ %overflow_arg_area83, %vaarg.in_mem81 ]
  %vaarg.addr86 = bitcast i8* %vaarg.addr86.in to i32*
  %36 = load i32* %vaarg.addr86, align 4
  %call.i260 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay.i255, i8* getelementptr inbounds ([3 x i8]* @.str26, i64 0, i64 0), i32 %36) #10
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %arraydecay.i255) #10
  br label %for.inc

sw.bb88:                                          ; preds = %if.end23
  %37 = load [1 x %struct.__va_list_tag]** %format_args, align 8, !tbaa !3
  %gp_offset_p91 = getelementptr inbounds [1 x %struct.__va_list_tag]* %37, i64 0, i64 0, i32 0
  %gp_offset92 = load i32* %gp_offset_p91, align 4
  %fits_in_gp93 = icmp ult i32 %gp_offset92, 41
  br i1 %fits_in_gp93, label %vaarg.in_reg94, label %vaarg.in_mem96

vaarg.in_reg94:                                   ; preds = %sw.bb88
  %38 = getelementptr inbounds [1 x %struct.__va_list_tag]* %37, i64 0, i64 0, i32 3
  %reg_save_area95 = load i8** %38, align 8
  %39 = sext i32 %gp_offset92 to i64
  %40 = getelementptr i8* %reg_save_area95, i64 %39
  %41 = add i32 %gp_offset92, 8
  store i32 %41, i32* %gp_offset_p91, align 4
  br label %vaarg.end100

vaarg.in_mem96:                                   ; preds = %sw.bb88
  %overflow_arg_area_p97 = getelementptr inbounds [1 x %struct.__va_list_tag]* %37, i64 0, i64 0, i32 2
  %overflow_arg_area98 = load i8** %overflow_arg_area_p97, align 8
  %overflow_arg_area.next99 = getelementptr i8* %overflow_arg_area98, i64 8
  store i8* %overflow_arg_area.next99, i8** %overflow_arg_area_p97, align 8
  br label %vaarg.end100

vaarg.end100:                                     ; preds = %vaarg.in_mem96, %vaarg.in_reg94
  %vaarg.addr101.in = phi i8* [ %40, %vaarg.in_reg94 ], [ %overflow_arg_area98, %vaarg.in_mem96 ]
  %vaarg.addr101 = bitcast i8* %vaarg.addr101.in to i8**
  %42 = load i8** %vaarg.addr101, align 8
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %42) #11
  br label %for.inc

sw.bb102:                                         ; preds = %if.end23
  %tobool103 = icmp eq i32 %long_integer.0, 0
  %43 = load [1 x %struct.__va_list_tag]** %format_args, align 8, !tbaa !3
  %gp_offset_p107 = getelementptr inbounds [1 x %struct.__va_list_tag]* %43, i64 0, i64 0, i32 0
  %gp_offset108 = load i32* %gp_offset_p107, align 4
  %fits_in_gp109 = icmp ult i32 %gp_offset108, 41
  br i1 %tobool103, label %if.else118, label %if.then104

if.then104:                                       ; preds = %sw.bb102
  br i1 %fits_in_gp109, label %vaarg.in_reg110, label %vaarg.in_mem112

vaarg.in_reg110:                                  ; preds = %if.then104
  %44 = getelementptr inbounds [1 x %struct.__va_list_tag]* %43, i64 0, i64 0, i32 3
  %reg_save_area111 = load i8** %44, align 8
  %45 = sext i32 %gp_offset108 to i64
  %46 = getelementptr i8* %reg_save_area111, i64 %45
  %47 = add i32 %gp_offset108, 8
  store i32 %47, i32* %gp_offset_p107, align 4
  br label %vaarg.end116

vaarg.in_mem112:                                  ; preds = %if.then104
  %overflow_arg_area_p113 = getelementptr inbounds [1 x %struct.__va_list_tag]* %43, i64 0, i64 0, i32 2
  %overflow_arg_area114 = load i8** %overflow_arg_area_p113, align 8
  %overflow_arg_area.next115 = getelementptr i8* %overflow_arg_area114, i64 8
  store i8* %overflow_arg_area.next115, i8** %overflow_arg_area_p113, align 8
  br label %vaarg.end116

vaarg.end116:                                     ; preds = %vaarg.in_mem112, %vaarg.in_reg110
  %vaarg.addr117.in = phi i8* [ %46, %vaarg.in_reg110 ], [ %overflow_arg_area114, %vaarg.in_mem112 ]
  %vaarg.addr117 = bitcast i8* %vaarg.addr117.in to i64*
  %48 = load i64* %vaarg.addr117, align 8
  %call.i262 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay.i255, i8* getelementptr inbounds ([4 x i8]* @.str25, i64 0, i64 0), i64 %48) #10
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %arraydecay.i255) #10
  br label %for.inc

if.else118:                                       ; preds = %sw.bb102
  br i1 %fits_in_gp109, label %vaarg.in_reg124, label %vaarg.in_mem126

vaarg.in_reg124:                                  ; preds = %if.else118
  %49 = getelementptr inbounds [1 x %struct.__va_list_tag]* %43, i64 0, i64 0, i32 3
  %reg_save_area125 = load i8** %49, align 8
  %50 = sext i32 %gp_offset108 to i64
  %51 = getelementptr i8* %reg_save_area125, i64 %50
  %52 = add i32 %gp_offset108, 8
  store i32 %52, i32* %gp_offset_p107, align 4
  br label %vaarg.end130

vaarg.in_mem126:                                  ; preds = %if.else118
  %overflow_arg_area_p127 = getelementptr inbounds [1 x %struct.__va_list_tag]* %43, i64 0, i64 0, i32 2
  %overflow_arg_area128 = load i8** %overflow_arg_area_p127, align 8
  %overflow_arg_area.next129 = getelementptr i8* %overflow_arg_area128, i64 8
  store i8* %overflow_arg_area.next129, i8** %overflow_arg_area_p127, align 8
  br label %vaarg.end130

vaarg.end130:                                     ; preds = %vaarg.in_mem126, %vaarg.in_reg124
  %vaarg.addr131.in = phi i8* [ %51, %vaarg.in_reg124 ], [ %overflow_arg_area128, %vaarg.in_mem126 ]
  %vaarg.addr131 = bitcast i8* %vaarg.addr131.in to i32*
  %53 = load i32* %vaarg.addr131, align 4
  %call.i264 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay.i255, i8* getelementptr inbounds ([3 x i8]* @.str24, i64 0, i64 0), i32 %53) #10
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %arraydecay.i255) #10
  br label %for.inc

sw.bb133:                                         ; preds = %if.end23
  %tobool134 = icmp eq i32 %long_integer.0, 0
  %54 = load [1 x %struct.__va_list_tag]** %format_args, align 8, !tbaa !3
  %gp_offset_p138 = getelementptr inbounds [1 x %struct.__va_list_tag]* %54, i64 0, i64 0, i32 0
  %gp_offset139 = load i32* %gp_offset_p138, align 4
  %fits_in_gp140 = icmp ult i32 %gp_offset139, 41
  br i1 %tobool134, label %if.else149, label %if.then135

if.then135:                                       ; preds = %sw.bb133
  br i1 %fits_in_gp140, label %vaarg.in_reg141, label %vaarg.in_mem143

vaarg.in_reg141:                                  ; preds = %if.then135
  %55 = getelementptr inbounds [1 x %struct.__va_list_tag]* %54, i64 0, i64 0, i32 3
  %reg_save_area142 = load i8** %55, align 8
  %56 = sext i32 %gp_offset139 to i64
  %57 = getelementptr i8* %reg_save_area142, i64 %56
  %58 = add i32 %gp_offset139, 8
  store i32 %58, i32* %gp_offset_p138, align 4
  br label %vaarg.end147

vaarg.in_mem143:                                  ; preds = %if.then135
  %overflow_arg_area_p144 = getelementptr inbounds [1 x %struct.__va_list_tag]* %54, i64 0, i64 0, i32 2
  %overflow_arg_area145 = load i8** %overflow_arg_area_p144, align 8
  %overflow_arg_area.next146 = getelementptr i8* %overflow_arg_area145, i64 8
  store i8* %overflow_arg_area.next146, i8** %overflow_arg_area_p144, align 8
  br label %vaarg.end147

vaarg.end147:                                     ; preds = %vaarg.in_mem143, %vaarg.in_reg141
  %vaarg.addr148.in = phi i8* [ %57, %vaarg.in_reg141 ], [ %overflow_arg_area145, %vaarg.in_mem143 ]
  %vaarg.addr148 = bitcast i8* %vaarg.addr148.in to i64*
  %59 = load i64* %vaarg.addr148, align 8
  %call.i266 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay.i255, i8* getelementptr inbounds ([4 x i8]* @.str23, i64 0, i64 0), i64 %59) #10
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %arraydecay.i255) #10
  br label %for.inc

if.else149:                                       ; preds = %sw.bb133
  br i1 %fits_in_gp140, label %vaarg.in_reg155, label %vaarg.in_mem157

vaarg.in_reg155:                                  ; preds = %if.else149
  %60 = getelementptr inbounds [1 x %struct.__va_list_tag]* %54, i64 0, i64 0, i32 3
  %reg_save_area156 = load i8** %60, align 8
  %61 = sext i32 %gp_offset139 to i64
  %62 = getelementptr i8* %reg_save_area156, i64 %61
  %63 = add i32 %gp_offset139, 8
  store i32 %63, i32* %gp_offset_p138, align 4
  br label %vaarg.end161

vaarg.in_mem157:                                  ; preds = %if.else149
  %overflow_arg_area_p158 = getelementptr inbounds [1 x %struct.__va_list_tag]* %54, i64 0, i64 0, i32 2
  %overflow_arg_area159 = load i8** %overflow_arg_area_p158, align 8
  %overflow_arg_area.next160 = getelementptr i8* %overflow_arg_area159, i64 8
  store i8* %overflow_arg_area.next160, i8** %overflow_arg_area_p158, align 8
  br label %vaarg.end161

vaarg.end161:                                     ; preds = %vaarg.in_mem157, %vaarg.in_reg155
  %vaarg.addr162.in = phi i8* [ %62, %vaarg.in_reg155 ], [ %overflow_arg_area159, %vaarg.in_mem157 ]
  %vaarg.addr162 = bitcast i8* %vaarg.addr162.in to i32*
  %64 = load i32* %vaarg.addr162, align 4
  %call.i268 = tail call i32 (i8*, i8*, ...)* @sprintf(i8* %arraydecay.i255, i8* getelementptr inbounds ([3 x i8]* @.str22, i64 0, i64 0), i32 %64) #10
  tail call void @output_add_string(%struct.output_buffer* %buffer, i8* %arraydecay.i255) #10
  br label %for.inc

sw.bb164:                                         ; preds = %if.end23
  tail call void @output_add_character(%struct.output_buffer* %buffer, i32 37) #11
  br label %for.inc

sw.bb165:                                         ; preds = %if.end23
  %incdec.ptr168 = getelementptr inbounds i8* %8, i64 1
  store i8* %incdec.ptr168, i8** %cursor, align 8, !tbaa !3
  %65 = load i8* %incdec.ptr168, align 1, !tbaa !1
  %cmp170 = icmp eq i8 %65, 42
  br i1 %cmp170, label %if.else173, label %if.then172

if.then172:                                       ; preds = %sw.bb165
  tail call void @fancy_abort(i8* getelementptr inbounds ([54 x i8]* @.str20, i64 0, i64 0), i32 723, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.output_format, i64 0, i64 0)) #15
  unreachable

if.else173:                                       ; preds = %sw.bb165
  %incdec.ptr176 = getelementptr inbounds i8* %8, i64 2
  store i8* %incdec.ptr176, i8** %cursor, align 8, !tbaa !3
  %66 = load i8* %incdec.ptr176, align 1, !tbaa !1
  %cmp178 = icmp eq i8 %66, 115
  br i1 %cmp178, label %if.end182, label %if.then180

if.then180:                                       ; preds = %if.else173
  tail call void @fancy_abort(i8* getelementptr inbounds ([54 x i8]* @.str20, i64 0, i64 0), i32 725, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.output_format, i64 0, i64 0)) #15
  unreachable

if.end182:                                        ; preds = %if.else173
  %67 = load [1 x %struct.__va_list_tag]** %format_args, align 8, !tbaa !3
  %gp_offset_p185 = getelementptr inbounds [1 x %struct.__va_list_tag]* %67, i64 0, i64 0, i32 0
  %gp_offset186 = load i32* %gp_offset_p185, align 4
  %fits_in_gp187 = icmp ult i32 %gp_offset186, 41
  br i1 %fits_in_gp187, label %vaarg.in_reg188, label %vaarg.in_mem190

vaarg.in_reg188:                                  ; preds = %if.end182
  %68 = getelementptr inbounds [1 x %struct.__va_list_tag]* %67, i64 0, i64 0, i32 3
  %reg_save_area189 = load i8** %68, align 8
  %69 = sext i32 %gp_offset186 to i64
  %70 = getelementptr i8* %reg_save_area189, i64 %69
  %71 = add i32 %gp_offset186, 8
  store i32 %71, i32* %gp_offset_p185, align 4
  br label %vaarg.end194

vaarg.in_mem190:                                  ; preds = %if.end182
  %overflow_arg_area_p191 = getelementptr inbounds [1 x %struct.__va_list_tag]* %67, i64 0, i64 0, i32 2
  %overflow_arg_area192 = load i8** %overflow_arg_area_p191, align 8
  %overflow_arg_area.next193 = getelementptr i8* %overflow_arg_area192, i64 8
  store i8* %overflow_arg_area.next193, i8** %overflow_arg_area_p191, align 8
  br label %vaarg.end194

vaarg.end194:                                     ; preds = %vaarg.in_mem190, %vaarg.in_reg188
  %vaarg.addr195.in = phi i8* [ %70, %vaarg.in_reg188 ], [ %overflow_arg_area192, %vaarg.in_mem190 ]
  %vaarg.addr195 = bitcast i8* %vaarg.addr195.in to i32*
  %72 = load i32* %vaarg.addr195, align 4
  %73 = load [1 x %struct.__va_list_tag]** %format_args, align 8, !tbaa !3
  %gp_offset_p198 = getelementptr inbounds [1 x %struct.__va_list_tag]* %73, i64 0, i64 0, i32 0
  %gp_offset199 = load i32* %gp_offset_p198, align 4
  %fits_in_gp200 = icmp ult i32 %gp_offset199, 41
  br i1 %fits_in_gp200, label %vaarg.in_reg201, label %vaarg.in_mem203

vaarg.in_reg201:                                  ; preds = %vaarg.end194
  %74 = getelementptr inbounds [1 x %struct.__va_list_tag]* %73, i64 0, i64 0, i32 3
  %reg_save_area202 = load i8** %74, align 8
  %75 = sext i32 %gp_offset199 to i64
  %76 = getelementptr i8* %reg_save_area202, i64 %75
  %77 = add i32 %gp_offset199, 8
  store i32 %77, i32* %gp_offset_p198, align 4
  br label %vaarg.end207

vaarg.in_mem203:                                  ; preds = %vaarg.end194
  %overflow_arg_area_p204 = getelementptr inbounds [1 x %struct.__va_list_tag]* %73, i64 0, i64 0, i32 2
  %overflow_arg_area205 = load i8** %overflow_arg_area_p204, align 8
  %overflow_arg_area.next206 = getelementptr i8* %overflow_arg_area205, i64 8
  store i8* %overflow_arg_area.next206, i8** %overflow_arg_area_p204, align 8
  br label %vaarg.end207

vaarg.end207:                                     ; preds = %vaarg.in_mem203, %vaarg.in_reg201
  %vaarg.addr208.in = phi i8* [ %76, %vaarg.in_reg201 ], [ %overflow_arg_area205, %vaarg.in_mem203 ]
  %vaarg.addr208 = bitcast i8* %vaarg.addr208.in to i8**
  %78 = load i8** %vaarg.addr208, align 8
  %idx.ext = sext i32 %72 to i64
  %add.ptr = getelementptr inbounds i8* %78, i64 %idx.ext
  tail call void @output_append(%struct.output_buffer* %buffer, i8* %78, i8* %add.ptr) #11
  br label %for.inc

sw.default:                                       ; preds = %if.end23
  %79 = load i32 (%struct.output_buffer*)** %format_decoder, align 8, !tbaa !3
  %tobool209 = icmp eq i32 (%struct.output_buffer*)* %79, null
  br i1 %tobool209, label %if.then212, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.default
  %call = tail call i32 %79(%struct.output_buffer* %buffer) #10
  %tobool211 = icmp eq i32 %call, 0
  br i1 %tobool211, label %if.then212, label %for.inc

if.then212:                                       ; preds = %lor.lhs.false, %sw.default
  tail call void @fancy_abort(i8* getelementptr inbounds ([54 x i8]* @.str20, i64 0, i64 0), i32 737, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.output_format, i64 0, i64 0)) #15
  unreachable

for.inc:                                          ; preds = %lor.lhs.false, %vaarg.end, %vaarg.end100, %sw.bb164, %vaarg.end207, %vaarg.end54, %vaarg.end41, %vaarg.end85, %vaarg.end71, %vaarg.end130, %vaarg.end116, %vaarg.end161, %vaarg.end147
  %80 = load i8** %cursor, align 8, !tbaa !3
  %incdec.ptr216 = getelementptr inbounds i8* %80, i64 1
  store i8* %incdec.ptr216, i8** %cursor, align 8, !tbaa !3
  %81 = load i8* %incdec.ptr216, align 1, !tbaa !1
  %tobool = icmp eq i8 %81, 0
  br i1 %tobool, label %for.end, label %while.cond.preheader

for.end:                                          ; preds = %for.inc, %while.end, %entry
  ret void
}
