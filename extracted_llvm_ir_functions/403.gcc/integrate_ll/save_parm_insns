define internal fastcc void @save_parm_insns(%struct.rtx_def* %insn, %struct.rtx_def* %first_nonparm_insn) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %insn, null
  br i1 %cmp, label %for.end40, label %for.cond.preheader

for.cond.preheader:                               ; preds = %entry
  %insn.addr.0.in.in55 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 2
  %insn.addr.0.in56 = bitcast %union.rtunion_def* %insn.addr.0.in.in55 to %struct.rtx_def**
  %insn.addr.057 = load %struct.rtx_def** %insn.addr.0.in56, align 8
  %tobool58 = icmp eq %struct.rtx_def* %insn.addr.057, null
  br i1 %tobool58, label %for.end40, label %for.body

for.body:                                         ; preds = %for.cond.preheader, %for.cond.backedge
  %insn.addr.059 = phi %struct.rtx_def* [ %insn.addr.0, %for.cond.backedge ], [ %insn.addr.057, %for.cond.preheader ]
  %cmp1 = icmp eq %struct.rtx_def* %insn.addr.059, %first_nonparm_insn
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %for.body
  store i1 true, i1* @in_nonparm_insns, align 1
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %for.body
  %0 = bitcast %struct.rtx_def* %insn.addr.059 to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %idxprom53 = zext i32 %bf.clear to i64
  %arrayidx4 = getelementptr inbounds [153 x i8]* @rtx_class, i64 0, i64 %idxprom53
  %1 = load i8* %arrayidx4, align 1, !tbaa !1
  %cmp5 = icmp eq i8 %1, 105
  br i1 %cmp5, label %if.then7, label %for.cond.backedge

for.cond.backedge:                                ; preds = %for.body26, %if.end3, %land.lhs.true, %if.then7
  %insn.addr.0.in.in = getelementptr inbounds %struct.rtx_def* %insn.addr.059, i64 0, i32 1, i64 2
  %insn.addr.0.in = bitcast %union.rtunion_def* %insn.addr.0.in.in to %struct.rtx_def**
  %insn.addr.0 = load %struct.rtx_def** %insn.addr.0.in, align 8
  %tobool = icmp eq %struct.rtx_def* %insn.addr.0, null
  br i1 %tobool, label %for.end40, label %for.body

if.then7:                                         ; preds = %if.end3
  %arrayidx9 = getelementptr inbounds %struct.rtx_def* %insn.addr.059, i64 0, i32 1, i64 3
  %rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**
  %2 = load %struct.rtx_def** %rtx10, align 8, !tbaa !0
  tail call void @note_stores(%struct.rtx_def* %2, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* @note_modified_parmregs, i8* null) #7
  %bf.load11 = load i32* %0, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  %cmp13 = icmp eq i32 %bf.clear12, 34
  br i1 %cmp13, label %land.lhs.true, label %for.cond.backedge

land.lhs.true:                                    ; preds = %if.then7
  %3 = load %struct.rtx_def** %rtx10, align 8, !tbaa !0
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load18 = load i32* %4, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 141
  br i1 %cmp20, label %for.body26, label %for.cond.backedge

for.body26:                                       ; preds = %land.lhs.true, %for.body26.for.body26_crit_edge
  %5 = phi %struct.rtx_def* [ %.pre, %for.body26.for.body26_crit_edge ], [ %3, %land.lhs.true ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body26.for.body26_crit_edge ], [ 0, %land.lhs.true ]
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 %indvars.iv
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  %6 = load %struct.rtx_def** %rtx33, align 8, !tbaa !0
  tail call fastcc void @save_parm_insns(%struct.rtx_def* %6, %struct.rtx_def* %first_nonparm_insn) #8
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, 3
  br i1 %exitcond, label %for.cond.backedge, label %for.body26.for.body26_crit_edge

for.body26.for.body26_crit_edge:                  ; preds = %for.body26
  %.pre = load %struct.rtx_def** %rtx10, align 8, !tbaa !0
  br label %for.body26

for.end40:                                        ; preds = %for.cond.preheader, %for.cond.backedge, %entry
  ret void
}
