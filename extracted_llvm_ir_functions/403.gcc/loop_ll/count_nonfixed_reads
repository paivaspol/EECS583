define internal fastcc i32 @count_nonfixed_reads(%struct.loop* %loop, %struct.rtx_def* %x) #0 {
entry:
  %cmp = icmp eq %struct.rtx_def* %x, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %struct.rtx_def* %x to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %sw.epilog [
    i32 59, label %return
    i32 69, label %return
    i32 54, label %return
    i32 55, label %return
    i32 58, label %return
    i32 68, label %return
    i32 67, label %return
    i32 61, label %return
    i32 66, label %sw.bb1
  ]

sw.bb1:                                           ; preds = %if.end
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %call = tail call i32 @loop_invariant_p(%struct.loop* %loop, %struct.rtx_def* %1) #10
  %cmp2 = icmp ne i32 %call, 1
  %conv = zext i1 %cmp2 to i32
  %2 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %call6 = tail call fastcc i32 @count_nonfixed_reads(%struct.loop* %loop, %struct.rtx_def* %2) #10
  %add = add nsw i32 %conv, %call6
  ret i32 %add

sw.epilog:                                        ; preds = %if.end
  %idxprom72 = zext i32 %bf.clear to i64
  %arrayidx7 = getelementptr inbounds [153 x i8*]* @rtx_format, i64 0, i64 %idxprom72
  %3 = load i8** %arrayidx7, align 8, !tbaa !4
  %arrayidx9 = getelementptr inbounds [153 x i8]* @rtx_length, i64 0, i64 %idxprom72
  %4 = load i8* %arrayidx9, align 1, !tbaa !1
  %cmp1178 = icmp eq i8 %4, 0
  br i1 %cmp1178, label %return, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %sw.epilog
  %5 = zext i8 %4 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.cond.backedge
  %indvars.iv82 = phi i64 [ %5, %for.body.lr.ph ], [ %indvars.iv.next83, %for.cond.backedge ]
  %value.079 = phi i32 [ 0, %for.body.lr.ph ], [ %value.0.be, %for.cond.backedge ]
  %indvars.iv.next83 = add i64 %indvars.iv82, -1
  %arrayidx14 = getelementptr inbounds i8* %3, i64 %indvars.iv.next83
  %6 = load i8* %arrayidx14, align 1, !tbaa !1
  %cmp16 = icmp eq i8 %6, 101
  br i1 %cmp16, label %if.then18, label %if.end25

if.then18:                                        ; preds = %for.body
  %arrayidx21 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next83
  %rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**
  %7 = load %struct.rtx_def** %rtx22, align 8, !tbaa !4
  %call23 = tail call fastcc i32 @count_nonfixed_reads(%struct.loop* %loop, %struct.rtx_def* %7) #10
  %add24 = add nsw i32 %call23, %value.079
  %.pr = load i8* %arrayidx14, align 1, !tbaa !1
  br label %if.end25

if.end25:                                         ; preds = %if.then18, %for.body
  %8 = phi i8 [ %.pr, %if.then18 ], [ %6, %for.body ]
  %value.1 = phi i32 [ %add24, %if.then18 ], [ %value.079, %for.body ]
  %cmp29 = icmp eq i8 %8, 69
  br i1 %cmp29, label %for.cond32.preheader, label %for.cond.backedge

for.cond.backedge:                                ; preds = %for.cond32.preheader, %for.body38, %if.end25
  %value.0.be = phi i32 [ %value.1, %if.end25 ], [ %value.1, %for.cond32.preheader ], [ %add46, %for.body38 ]
  %9 = trunc i64 %indvars.iv.next83 to i32
  %cmp11 = icmp sgt i32 %9, 0
  br i1 %cmp11, label %for.body, label %return

for.cond32.preheader:                             ; preds = %if.end25
  %arrayidx35 = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 %indvars.iv.next83
  %rtvec = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtvec_def**
  %10 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !4
  %num_elem73 = getelementptr inbounds %struct.rtvec_def* %10, i64 0, i32 0
  %11 = load i32* %num_elem73, align 4, !tbaa !3
  %cmp3674 = icmp sgt i32 %11, 0
  br i1 %cmp3674, label %for.body38, label %for.cond.backedge

for.body38:                                       ; preds = %for.cond32.preheader, %for.body38
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body38 ], [ 0, %for.cond32.preheader ]
  %12 = phi %struct.rtvec_def* [ %14, %for.body38 ], [ %10, %for.cond32.preheader ]
  %value.275 = phi i32 [ %add46, %for.body38 ], [ %value.1, %for.cond32.preheader ]
  %arrayidx44 = getelementptr inbounds %struct.rtvec_def* %12, i64 0, i32 1, i64 %indvars.iv
  %13 = load %struct.rtx_def** %arrayidx44, align 8, !tbaa !4
  %call45 = tail call fastcc i32 @count_nonfixed_reads(%struct.loop* %loop, %struct.rtx_def* %13) #10
  %add46 = add nsw i32 %call45, %value.275
  %indvars.iv.next = add i64 %indvars.iv, 1
  %14 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !4
  %num_elem = getelementptr inbounds %struct.rtvec_def* %14, i64 0, i32 0
  %15 = load i32* %num_elem, align 4, !tbaa !3
  %16 = trunc i64 %indvars.iv.next to i32
  %cmp36 = icmp slt i32 %16, %15
  br i1 %cmp36, label %for.body38, label %for.cond.backedge

return:                                           ; preds = %sw.epilog, %for.cond.backedge, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %if.end, %entry
  %retval.0 = phi i32 [ 0, %entry ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %if.end ], [ 0, %sw.epilog ], [ %value.0.be, %for.cond.backedge ]
  ret i32 %retval.0
}
