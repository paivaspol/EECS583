define internal fastcc zeroext i1 @paste_tokens(%struct.cpp_reader* %pfile, %struct.cpp_token** nocapture %plhs, %struct.cpp_token* %rhs) #0 {
entry:
  %0 = load %struct.cpp_token** %plhs, align 8, !tbaa !3
  %call = call i32 @cpp_token_len(%struct.cpp_token* %0) #7
  %call1 = call i32 @cpp_token_len(%struct.cpp_token* %rhs) #7
  %add = add i32 %call, 1
  %add2 = add i32 %add, %call1
  %conv = zext i32 %add2 to i64
  %1 = alloca i8, i64 %conv, align 1
  %call3 = call i8* @cpp_spell_token(%struct.cpp_reader* %pfile, %struct.cpp_token* %0, i8* %1) #7
  %type = getelementptr inbounds %struct.cpp_token* %0, i64 0, i32 2
  %bf.load = load i8* %type, align 2
  %cmp = icmp eq i8 %bf.load, 7
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %type5 = getelementptr inbounds %struct.cpp_token* %rhs, i64 0, i32 2
  %bf.load6 = load i8* %type5, align 2
  %bf.load6.off = add i8 %bf.load6, -6
  %switch = icmp ult i8 %bf.load6.off, 2
  br i1 %switch, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %incdec.ptr = getelementptr inbounds i8* %call3, i64 1
  store i8 32, i8* %call3, align 1, !tbaa !0
  br label %if.end

if.end:                                           ; preds = %land.lhs.true, %if.then, %entry
  %end.0 = phi i8* [ %incdec.ptr, %if.then ], [ %call3, %entry ], [ %call3, %land.lhs.true ]
  %call15 = call i8* @cpp_spell_token(%struct.cpp_reader* %pfile, %struct.cpp_token* %rhs, i8* %end.0) #7
  store i8 0, i8* %call15, align 1, !tbaa !0
  %sub.ptr.lhs.cast = ptrtoint i8* %call15 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call16 = call %struct.cpp_buffer* @cpp_push_buffer(%struct.cpp_reader* %pfile, i8* %1, i64 %sub.ptr.sub, i32 1, i32 1) #7
  %cur_token = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 15
  %2 = load %struct.cpp_token** %cur_token, align 8, !tbaa !3
  %col = getelementptr inbounds %struct.cpp_token* %2, i64 -1, i32 1
  %3 = load i16* %col, align 2, !tbaa !2
  %conv17 = zext i16 %3 to i32
  %sub = add nsw i32 %conv17, -1
  %buffer = getelementptr inbounds %struct.cpp_reader* %pfile, i64 0, i32 0
  %4 = load %struct.cpp_buffer** %buffer, align 8, !tbaa !3
  %col_adjust = getelementptr inbounds %struct.cpp_buffer* %4, i64 0, i32 8
  store i32 %sub, i32* %col_adjust, align 4, !tbaa !7
  %saved_flags = getelementptr inbounds %struct.cpp_buffer* %4, i64 0, i32 9
  store i8 0, i8* %saved_flags, align 1, !tbaa !0
  %call19 = call %struct.cpp_token* @_cpp_temp_token(%struct.cpp_reader* %pfile) #7
  store %struct.cpp_token* %call19, %struct.cpp_token** %cur_token, align 8, !tbaa !3
  %call21 = call %struct.cpp_token* @_cpp_lex_direct(%struct.cpp_reader* %pfile) #7
  store %struct.cpp_token* %call21, %struct.cpp_token** %plhs, align 8, !tbaa !3
  %5 = load %struct.cpp_buffer** %buffer, align 8, !tbaa !3
  %cur = getelementptr inbounds %struct.cpp_buffer* %5, i64 0, i32 0
  %6 = load i8** %cur, align 8, !tbaa !3
  %rlimit = getelementptr inbounds %struct.cpp_buffer* %5, i64 0, i32 2
  %7 = load i8** %rlimit, align 8, !tbaa !3
  %cmp24 = icmp eq i8* %6, %7
  call void @_cpp_pop_buffer(%struct.cpp_reader* %pfile) #7
  ret i1 %cmp24
}
