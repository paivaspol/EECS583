define internal fastcc void @expand_arg(%struct.cpp_reader* %pfile, %struct.macro_arg* nocapture %arg) #0 {
entry:
  %count = getelementptr inbounds %struct.macro_arg* %arg, i64 0, i32 3
  %0 = load i32* %count, align 4, !tbaa !7
  %cmp = icmp eq i32 %0, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = tail call noalias i8* @xmalloc(i64 2048) #7
  %1 = bitcast i8* %call to %struct.cpp_token**
  %expanded = getelementptr inbounds %struct.macro_arg* %arg, i64 0, i32 1
  store %struct.cpp_token** %1, %struct.cpp_token*** %expanded, align 8, !tbaa !3
  %first = getelementptr inbounds %struct.macro_arg* %arg, i64 0, i32 0
  %2 = load %struct.cpp_token*** %first, align 8, !tbaa !3
  %3 = load i32* %count, align 4, !tbaa !7
  %add = add i32 %3, 1
  %call.i = tail call fastcc %struct.cpp_context* @next_context(%struct.cpp_reader* %pfile) #7
  %buff2.i = getelementptr inbounds %struct.cpp_context* %call.i, i64 0, i32 4
  %4 = getelementptr inbounds %struct.cpp_context* %call.i, i64 0, i32 2, i32 0
  %first.c.i = bitcast %struct.cpp_token** %2 to %struct.cpp_token*
  %5 = bitcast %struct._cpp_buff** %buff2.i to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 17, i32 8, i1 false)
  store %struct.cpp_token* %first.c.i, %struct.cpp_token** %4, align 8, !tbaa !3
  %idx.ext.i = zext i32 %add to i64
  %add.ptr.i = getelementptr inbounds %struct.cpp_token** %2, i64 %idx.ext.i
  %6 = getelementptr inbounds %struct.cpp_context* %call.i, i64 0, i32 3, i32 0
  %add.ptr.c.i = bitcast %struct.cpp_token** %add.ptr.i to %struct.cpp_token*
  store %struct.cpp_token* %add.ptr.c.i, %struct.cpp_token** %6, align 8, !tbaa !3
  %expanded_count = getelementptr inbounds %struct.macro_arg* %arg, i64 0, i32 4
  %.pre = load i32* %expanded_count, align 4, !tbaa !7
  br label %for.cond

for.cond:                                         ; preds = %if.end17, %if.end
  %7 = phi i32 [ %.pre, %if.end ], [ %inc, %if.end17 ]
  %capacity.0 = phi i32 [ 256, %if.end ], [ %capacity.1, %if.end17 ]
  %add2 = add i32 %7, 1
  %cmp3 = icmp ult i32 %add2, %capacity.0
  br i1 %cmp3, label %if.end12, label %if.then5

if.then5:                                         ; preds = %for.cond
  %mul6 = shl i32 %capacity.0, 1
  %8 = load %struct.cpp_token*** %expanded, align 8, !tbaa !3
  %9 = bitcast %struct.cpp_token** %8 to i8*
  %conv8 = zext i32 %mul6 to i64
  %mul9 = shl nuw nsw i64 %conv8, 3
  %call10 = tail call i8* @xrealloc(i8* %9, i64 %mul9) #7
  %10 = bitcast i8* %call10 to %struct.cpp_token**
  store %struct.cpp_token** %10, %struct.cpp_token*** %expanded, align 8, !tbaa !3
  br label %if.end12

if.end12:                                         ; preds = %for.cond, %if.then5
  %capacity.1 = phi i32 [ %mul6, %if.then5 ], [ %capacity.0, %for.cond ]
  %call13 = tail call %struct.cpp_token* @cpp_get_token(%struct.cpp_reader* %pfile) #9
  %type = getelementptr inbounds %struct.cpp_token* %call13, i64 0, i32 2
  %bf.load = load i8* %type, align 2
  %cmp14 = icmp eq i8 %bf.load, 67
  br i1 %cmp14, label %for.end, label %if.end17

if.end17:                                         ; preds = %if.end12
  %11 = load i32* %expanded_count, align 4, !tbaa !7
  %inc = add i32 %11, 1
  store i32 %inc, i32* %expanded_count, align 4, !tbaa !7
  %idxprom = zext i32 %11 to i64
  %12 = load %struct.cpp_token*** %expanded, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds %struct.cpp_token** %12, i64 %idxprom
  store %struct.cpp_token* %call13, %struct.cpp_token** %arrayidx, align 8, !tbaa !3
  br label %for.cond

for.end:                                          ; preds = %if.end12
  tail call void @_cpp_pop_context(%struct.cpp_reader* %pfile) #9
  br label %return

return:                                           ; preds = %entry, %for.end
  ret void
}
