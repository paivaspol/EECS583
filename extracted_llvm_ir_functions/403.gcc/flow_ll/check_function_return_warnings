define void @check_function_return_warnings() #0 {
entry:
  %0 = load i32* @warn_missing_noreturn, align 4, !tbaa !0
  %tobool = icmp eq i32 %0, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function** @cfun, align 8, !tbaa !3
  %decl = getelementptr inbounds %struct.function* %1, i64 0, i32 6
  %2 = load %union.tree_node** %decl, align 8, !tbaa !3
  %volatile_flag = getelementptr inbounds %union.tree_node* %2, i64 0, i32 0, i32 0, i32 2
  %3 = bitcast [4 x i8]* %volatile_flag to i32*
  %bf.load = load i32* %3, align 8
  %bf.clear = and i32 %bf.load, 2048
  %tobool1 = icmp eq i32 %bf.clear, 0
  %4 = load %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 4), align 8, !tbaa !3
  %cmp = icmp eq %struct.edge_def* %4, null
  %or.cond = and i1 %tobool1, %cmp
  %5 = load i32 (%union.tree_node*)** @lang_missing_noreturn_ok_p, align 8, !tbaa !3
  %tobool4 = icmp ne i32 (%union.tree_node*)* %5, null
  %or.cond39 = and i1 %or.cond, %tobool4
  br i1 %or.cond39, label %land.lhs.true5, label %if.end

land.lhs.true5:                                   ; preds = %land.lhs.true
  %call = tail call i32 %5(%union.tree_node* %2) #6
  %tobool7 = icmp eq i32 %call, 0
  br i1 %tobool7, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true5
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([62 x i8]* @.str, i64 0, i64 0)) #6
  br label %if.end

if.end:                                           ; preds = %land.lhs.true5, %entry, %land.lhs.true, %if.then
  %6 = load %struct.function** @cfun, align 8, !tbaa !3
  %decl8 = getelementptr inbounds %struct.function* %6, i64 0, i32 6
  %7 = load %union.tree_node** %decl8, align 8, !tbaa !3
  %volatile_flag10 = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %8 = bitcast [4 x i8]* %volatile_flag10 to i32*
  %bf.load11 = load i32* %8, align 8
  %bf.clear13 = and i32 %bf.load11, 2048
  %tobool14 = icmp ne i32 %bf.clear13, 0
  %9 = load %struct.edge_def** getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 4), align 8, !tbaa !3
  %cmp16 = icmp ne %struct.edge_def* %9, null
  %or.cond40 = and i1 %tobool14, %cmp16
  br i1 %or.cond40, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([32 x i8]* @.str1, i64 0, i64 0)) #6
  br label %if.end38

if.else:                                          ; preds = %if.end
  %10 = load i32* @warn_return_type, align 4, !tbaa !0
  %tobool18 = icmp eq i32 %10, 0
  br i1 %tobool18, label %if.end38, label %land.lhs.true19

land.lhs.true19:                                  ; preds = %if.else
  %x_clobber_return_insn = getelementptr inbounds %struct.function* %6, i64 0, i32 31
  %11 = load %struct.rtx_def** %x_clobber_return_insn, align 8, !tbaa !3
  %cmp20 = icmp ne %struct.rtx_def* %11, null
  %or.cond41 = and i1 %cmp20, %cmp16
  br i1 %or.cond41, label %if.then23, label %if.end38

if.then23:                                        ; preds = %land.lhs.true19
  %call24 = tail call i32 @get_max_uid() #6
  %12 = load %struct.function** @cfun, align 8, !tbaa !3
  %x_clobber_return_insn25 = getelementptr inbounds %struct.function* %12, i64 0, i32 31
  %13 = load %struct.rtx_def** %x_clobber_return_insn25, align 8, !tbaa !3
  %arrayidx = getelementptr inbounds %struct.rtx_def* %13, i64 0, i32 1, i64 0
  %rtint = bitcast %union.rtunion_def* %arrayidx to i32*
  %14 = load i32* %rtint, align 4, !tbaa !0
  %cmp26 = icmp slt i32 %14, %call24
  br i1 %cmp26, label %if.then27, label %if.end38

if.then27:                                        ; preds = %if.then23
  %idxprom = sext i32 %14 to i64
  %15 = load %struct.varray_head_tag** @basic_block_for_insn, align 8, !tbaa !3
  %data = getelementptr inbounds %struct.varray_head_tag* %15, i64 0, i32 4
  %bb = bitcast %union.varray_data_tag* %data to [1 x %struct.basic_block_def*]*
  %arrayidx32 = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb, i64 0, i64 %idxprom
  %16 = load %struct.basic_block_def** %arrayidx32, align 8, !tbaa !3
  %cmp33 = icmp eq %struct.basic_block_def* %16, null
  br i1 %cmp33, label %if.end38, label %if.then34

if.then34:                                        ; preds = %if.then27
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([41 x i8]* @.str2, i64 0, i64 0)) #6
  br label %if.end38

if.end38:                                         ; preds = %if.then27, %if.else, %land.lhs.true19, %if.then34, %if.then23, %if.then17
  ret void
}
