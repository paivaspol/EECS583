define void @reg_set_to_hard_reg_set(i64* nocapture %to, %struct.bitmap_head_def* nocapture %from) #0 {
entry:
  %first = getelementptr inbounds %struct.bitmap_head_def* %from, i64 0, i32 0
  %ptr_.159 = load %struct.bitmap_element_def** %first, align 8
  %cmp560 = icmp eq %struct.bitmap_element_def* %ptr_.159, null
  br i1 %cmp560, label %do.end, label %for.cond6.preheader

for.cond6.preheader:                              ; preds = %entry, %for.end32
  %ptr_.161 = phi %struct.bitmap_element_def* [ %ptr_.1, %for.end32 ], [ %ptr_.159, %entry ]
  %indx17 = getelementptr inbounds %struct.bitmap_element_def* %ptr_.161, i64 0, i32 2
  br label %for.body8

for.body8:                                        ; preds = %for.cond6.preheader, %if.end29
  %indvars.iv63 = phi i64 [ 0, %for.cond6.preheader ], [ %indvars.iv.next64, %if.end29 ]
  %arrayidx = getelementptr inbounds %struct.bitmap_element_def* %ptr_.161, i64 0, i32 3, i64 %indvars.iv63
  %0 = load i64* %arrayidx, align 8, !tbaa !4
  %cmp9 = icmp eq i64 %0, 0
  br i1 %cmp9, label %if.end29, label %for.cond11.preheader

for.cond11.preheader:                             ; preds = %for.body8
  %1 = shl i64 %indvars.iv63, 6
  br label %for.body13

for.body13:                                       ; preds = %for.cond11.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.cond11.preheader ], [ %indvars.iv.next, %for.inc ]
  %word_.056 = phi i64 [ %0, %for.cond11.preheader ], [ %word_.1, %for.inc ]
  %shl = shl i64 1, %indvars.iv
  %and = and i64 %shl, %word_.056
  %cmp14 = icmp eq i64 %and, 0
  br i1 %cmp14, label %for.inc, label %if.then15

if.then15:                                        ; preds = %for.body13
  %neg = xor i64 %shl, -1
  %and16 = and i64 %word_.056, %neg
  %2 = load i32* %indx17, align 4, !tbaa !0
  %mul = shl i32 %2, 7
  %3 = add i64 %indvars.iv, %1
  %4 = trunc i64 %3 to i32
  %add19 = add i32 %4, %mul
  %cmp20 = icmp sgt i32 %add19, 52
  br i1 %cmp20, label %do.end, label %if.end22

if.end22:                                         ; preds = %if.then15
  %sh_prom23 = zext i32 %add19 to i64
  %shl24 = shl i64 1, %sh_prom23
  %5 = load i64* %to, align 8, !tbaa !4
  %or = or i64 %5, %shl24
  store i64 %or, i64* %to, align 8, !tbaa !4
  %cmp25 = icmp eq i64 %and16, 0
  br i1 %cmp25, label %if.end29, label %for.inc

for.inc:                                          ; preds = %for.body13, %if.end22
  %word_.1 = phi i64 [ %and16, %if.end22 ], [ %word_.056, %for.body13 ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %6 = trunc i64 %indvars.iv.next to i32
  %cmp12 = icmp ult i32 %6, 64
  br i1 %cmp12, label %for.body13, label %if.end29

if.end29:                                         ; preds = %for.inc, %if.end22, %for.body8
  %indvars.iv.next64 = add i64 %indvars.iv63, 1
  %7 = trunc i64 %indvars.iv.next64 to i32
  %cmp7 = icmp ult i32 %7, 2
  br i1 %cmp7, label %for.body8, label %for.end32

for.end32:                                        ; preds = %if.end29
  %next34 = getelementptr inbounds %struct.bitmap_element_def* %ptr_.161, i64 0, i32 0
  %ptr_.1 = load %struct.bitmap_element_def** %next34, align 8
  %cmp5 = icmp eq %struct.bitmap_element_def* %ptr_.1, null
  br i1 %cmp5, label %do.end, label %for.cond6.preheader

do.end:                                           ; preds = %entry, %for.end32, %if.then15
  ret void
}
