define void @allocate_reg_life_data() #0 {
entry:
  %call = tail call i32 @max_reg_num() #6
  store i32 %call, i32* @max_regno, align 4, !tbaa !0
  %conv = sext i32 %call to i64
  tail call void @allocate_reg_info(i64 %conv, i32 0, i32 0) #6
  %0 = load i32* @max_regno, align 4, !tbaa !0
  %cmp29 = icmp sgt i32 %0, 0
  br i1 %cmp29, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = load %struct.varray_head_tag** @reg_n_info, align 8, !tbaa !3
  %data = getelementptr inbounds %struct.varray_head_tag* %1, i64 0, i32 4
  %reg = bitcast %union.varray_data_tag* %data to [1 x %struct.reg_info_def*]*
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds [1 x %struct.reg_info_def*]* %reg, i64 0, i64 %indvars.iv
  %2 = load %struct.reg_info_def** %arrayidx, align 8, !tbaa !3
  %sets = getelementptr inbounds %struct.reg_info_def* %2, i64 0, i32 3
  store i32 0, i32* %sets, align 4, !tbaa !0
  %refs = getelementptr inbounds %struct.reg_info_def* %2, i64 0, i32 4
  store i32 0, i32* %refs, align 4, !tbaa !0
  %deaths = getelementptr inbounds %struct.reg_info_def* %2, i64 0, i32 6
  store i32 0, i32* %deaths, align 4, !tbaa !0
  %calls_crossed = getelementptr inbounds %struct.reg_info_def* %2, i64 0, i32 8
  store i32 0, i32* %calls_crossed, align 4, !tbaa !0
  %live_length = getelementptr inbounds %struct.reg_info_def* %2, i64 0, i32 7
  store i32 0, i32* %live_length, align 4, !tbaa !0
  %basic_block = getelementptr inbounds %struct.reg_info_def* %2, i64 0, i32 9
  store i32 -1, i32* %basic_block, align 4, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, 1
  %3 = load i32* @max_regno, align 4, !tbaa !0
  %4 = trunc i64 %indvars.iv.next to i32
  %cmp = icmp slt i32 %4, %3
  br i1 %cmp, label %for.body, label %for.end

for.end:                                          ; preds = %for.body, %entry
  ret void
}
