define %struct.partition_def* @partition_new(i32 %num_elements) #0 {
entry:
  %sub = add nsw i32 %num_elements, -1
  %conv = sext i32 %sub to i64
  %mul = mul i64 %conv, 24
  %add = add i64 %mul, 32
  %call = tail call noalias i8* @xmalloc(i64 %add) #5
  %0 = bitcast i8* %call to %struct.partition_def*
  %num_elements1 = bitcast i8* %call to i32*
  store i32 %num_elements, i32* %num_elements1, align 4, !tbaa !0
  %cmp25 = icmp sgt i32 %num_elements, 0
  br i1 %cmp25, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %elements = getelementptr inbounds i8* %call, i64 8
  %1 = bitcast i8* %elements to [1 x %struct.partition_elem]*
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds [1 x %struct.partition_elem]* %1, i64 0, i64 %indvars.iv
  %class_element = getelementptr inbounds %struct.partition_elem* %arrayidx, i64 0, i32 0
  %2 = trunc i64 %indvars.iv to i32
  store i32 %2, i32* %class_element, align 4, !tbaa !0
  %next = getelementptr inbounds [1 x %struct.partition_elem]* %1, i64 0, i64 %indvars.iv, i32 1
  store %struct.partition_elem* %arrayidx, %struct.partition_elem** %next, align 8, !tbaa !3
  %class_count = getelementptr inbounds [1 x %struct.partition_elem]* %1, i64 0, i64 %indvars.iv, i32 2
  store i32 1, i32* %class_count, align 4, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %num_elements
  br i1 %exitcond, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  ret %struct.partition_def* %0
}
