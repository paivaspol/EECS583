define internal fastcc %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* nocapture %reg, i32 %where) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %reg to i32*
  %bf.load = load i32* %0, align 8
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear = and i32 %bf.lshr, 255
  %idxprom90 = zext i32 %bf.clear to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom90
  %1 = load i32* %arrayidx, align 4, !tbaa !6
  %.off = add i32 %1, -5
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %if.then, label %if.end28

if.then:                                          ; preds = %entry
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %2 = load i32* %rtuint, align 4, !tbaa !3
  %sub = add i32 %2, -8
  %idxprom8 = zext i32 %sub to i64
  %arrayidx10 = getelementptr inbounds [8 x [59 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom8, i64 16
  %3 = load %struct.rtx_def** %arrayidx10, align 8, !tbaa !2
  %sub14 = add i32 %2, -7
  %idxprom15 = zext i32 %sub14 to i64
  %arrayidx17 = getelementptr inbounds [8 x [59 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom15, i64 16
  %4 = load %struct.rtx_def** %arrayidx17, align 8, !tbaa !2
  %call = tail call fastcc i32 @get_hard_regnum(%struct.stack_def* %regstack, %struct.rtx_def* %3) #7
  %cmp18 = icmp sgt i32 %call, -1
  br i1 %cmp18, label %if.then19, label %if.end

if.then19:                                        ; preds = %if.then
  %call20 = tail call fastcc %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %3, i32 %where) #7
  br label %if.end

if.end:                                           ; preds = %if.then19, %if.then
  %pop_insn.0 = phi %struct.rtx_def* [ %call20, %if.then19 ], [ null, %if.then ]
  %call21 = tail call fastcc i32 @get_hard_regnum(%struct.stack_def* %regstack, %struct.rtx_def* %4) #7
  %cmp22 = icmp sgt i32 %call21, -1
  br i1 %cmp22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end
  %call24 = tail call fastcc %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %4, i32 %where) #7
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %if.end
  %pop_insn.1 = phi %struct.rtx_def* [ %call24, %if.then23 ], [ %pop_insn.0, %if.end ]
  %tobool = icmp eq %struct.rtx_def* %pop_insn.1, null
  br i1 %tobool, label %if.then26, label %return

if.then26:                                        ; preds = %if.end25
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str2, i64 0, i64 0), i32 939, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.emit_pop_insn, i64 0, i64 0)) #8
  unreachable

if.end28:                                         ; preds = %entry
  %call29 = tail call fastcc i32 @get_hard_regnum(%struct.stack_def* %regstack, %struct.rtx_def* %reg) #7
  %cmp30 = icmp slt i32 %call29, 8
  br i1 %cmp30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end28
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str2, i64 0, i64 0), i32 946, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.emit_pop_insn, i64 0, i64 0)) #8
  unreachable

if.end32:                                         ; preds = %if.end28
  %sub33 = add nsw i32 %call29, -8
  %idxprom34 = sext i32 %sub33 to i64
  %arrayidx36 = getelementptr inbounds [8 x [59 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom34, i64 16
  %5 = load %struct.rtx_def** %arrayidx36, align 8, !tbaa !2
  %6 = load %struct.rtx_def** getelementptr inbounds ([8 x [59 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 0, i64 16), align 16, !tbaa !2
  %call37 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 47, i32 0, %struct.rtx_def* %5, %struct.rtx_def* %6) #6
  %cmp38 = icmp eq i32 %where, 0
  br i1 %cmp38, label %if.then39, label %if.else

if.then39:                                        ; preds = %if.end32
  %call40 = tail call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %call37, %struct.rtx_def* %insn) #6
  br label %if.end42

if.else:                                          ; preds = %if.end32
  %call41 = tail call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call37, %struct.rtx_def* %insn) #6
  br label %if.end42

if.end42:                                         ; preds = %if.else, %if.then39
  %pop_insn.2 = phi %struct.rtx_def* [ %call40, %if.then39 ], [ %call41, %if.else ]
  %7 = load %struct.rtx_def** getelementptr inbounds ([8 x [59 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 0, i64 16), align 16, !tbaa !2
  %arrayidx44 = getelementptr inbounds %struct.rtx_def* %pop_insn.2, i64 0, i32 1, i64 6
  %rtx = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**
  %8 = load %struct.rtx_def** %rtx, align 8, !tbaa !2
  %call45 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 1, %struct.rtx_def* %7, %struct.rtx_def* %8) #6
  %9 = getelementptr inbounds %union.rtunion_def* %arrayidx44, i64 0, i32 0
  %call45.c = ptrtoint %struct.rtx_def* %call45 to i64
  store i64 %call45.c, i64* %9, align 8, !tbaa !2
  %top = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 0
  %10 = load i32* %top, align 4, !tbaa !3
  %idxprom49 = sext i32 %10 to i64
  %arrayidx51 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %idxprom49
  %11 = load i8* %arrayidx51, align 1, !tbaa !0
  %sub54 = sub nsw i32 %10, %sub33
  %idxprom55 = sext i32 %sub54 to i64
  %arrayidx57 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %idxprom55
  store i8 %11, i8* %arrayidx57, align 1, !tbaa !0
  %12 = load i32* %top, align 4, !tbaa !3
  %sub59 = add nsw i32 %12, -1
  store i32 %sub59, i32* %top, align 4, !tbaa !3
  %arrayidx61 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtuint62 = bitcast %union.rtunion_def* %arrayidx61 to i32*
  %13 = load i32* %rtuint62, align 4, !tbaa !3
  %sh_prom = zext i32 %13 to i64
  %shl = shl i64 1, %sh_prom
  %neg = xor i64 %shl, -1
  %reg_set = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 1
  %14 = load i64* %reg_set, align 8, !tbaa !4
  %and = and i64 %14, %neg
  store i64 %and, i64* %reg_set, align 8, !tbaa !4
  br label %return

return:                                           ; preds = %if.end25, %if.end42
  %retval.0 = phi %struct.rtx_def* [ %pop_insn.2, %if.end42 ], [ %pop_insn.1, %if.end25 ]
  ret %struct.rtx_def* %retval.0
}
