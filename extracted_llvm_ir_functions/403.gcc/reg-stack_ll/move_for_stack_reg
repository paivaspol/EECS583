define internal fastcc void @move_for_stack_reg(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %pat) #0 {
entry:
  %arrayidx = getelementptr inbounds %struct.rtx_def* %pat, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %call = tail call fastcc %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rtx) #7
  %arrayidx2 = getelementptr inbounds %struct.rtx_def* %pat, i64 0, i32 1, i64 0
  %rtx3 = bitcast %union.rtunion_def* %arrayidx2 to %struct.rtx_def**
  %call4 = tail call fastcc %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rtx3) #7
  %0 = load %struct.rtx_def** %call, align 8, !tbaa !2
  %1 = load %struct.rtx_def** %call4, align 8, !tbaa !2
  %2 = bitcast %struct.rtx_def* %0 to i32*
  %bf.load = load i32* %2, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 61
  br i1 %cmp, label %land.lhs.true, label %if.else200

land.lhs.true:                                    ; preds = %entry
  %arrayidx6 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx6 to i32*
  %3 = load i32* %rtuint, align 4, !tbaa !3
  %.off336 = add i32 %3, -8
  %4 = icmp ult i32 %.off336, 8
  br i1 %4, label %land.lhs.true13, label %land.lhs.true127

land.lhs.true13:                                  ; preds = %land.lhs.true
  %5 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load14 = load i32* %5, align 8
  %bf.clear15 = and i32 %bf.load14, 65535
  %cmp16 = icmp eq i32 %bf.clear15, 61
  br i1 %cmp16, label %land.lhs.true17, label %if.else

land.lhs.true17:                                  ; preds = %land.lhs.true13
  %arrayidx19 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtuint20 = bitcast %union.rtunion_def* %arrayidx19 to i32*
  %6 = load i32* %rtuint20, align 4, !tbaa !3
  %.off337 = add i32 %6, -8
  %7 = icmp ult i32 %.off337, 8
  br i1 %7, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true17
  %call30 = tail call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %insn, i32 1, i32 %3) #6
  %tobool = icmp eq %struct.rtx_def* %call30, null
  %8 = load i32* %rtuint, align 4, !tbaa !3
  %9 = load i32* %rtuint20, align 4, !tbaa !3
  %cmp38 = icmp eq i32 %8, %9
  br i1 %tobool, label %if.end82, label %if.then31

if.then31:                                        ; preds = %if.then
  br i1 %cmp38, label %if.then39, label %if.end

if.then39:                                        ; preds = %if.then31
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str2, i64 0, i64 0), i32 1085, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.move_for_stack_reg, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %if.then31
  %top = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 0
  %10 = load i32* %top, align 4, !tbaa !3
  %cmp40339 = icmp sgt i32 %10, -1
  br i1 %cmp40339, label %for.body.lr.ph, label %if.then54

for.body.lr.ph:                                   ; preds = %if.end
  %11 = sext i32 %10 to i64
  br label %for.body

for.cond:                                         ; preds = %for.body
  %indvars.iv.next = add i64 %indvars.iv, -1
  %dec = add nsw i32 %i.0340, -1
  %12 = trunc i64 %indvars.iv to i32
  %cmp40 = icmp sgt i32 %12, 0
  br i1 %cmp40, label %for.body, label %if.then54

for.body:                                         ; preds = %for.body.lr.ph, %for.cond
  %indvars.iv = phi i64 [ %11, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %i.0340 = phi i32 [ %10, %for.body.lr.ph ], [ %dec, %for.cond ]
  %arrayidx41 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %indvars.iv
  %13 = load i8* %arrayidx41, align 1, !tbaa !0
  %conv = zext i8 %13 to i32
  %cmp45 = icmp eq i32 %conv, %8
  br i1 %cmp45, label %for.end, label %for.cond

for.end:                                          ; preds = %for.body
  %cmp49 = icmp slt i32 %i.0340, 0
  br i1 %cmp49, label %if.then54, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %call51 = tail call fastcc i32 @get_hard_regnum(%struct.stack_def* %regstack, %struct.rtx_def* %1) #7
  %cmp52 = icmp sgt i32 %call51, 7
  br i1 %cmp52, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end, %for.cond, %lor.lhs.false, %for.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str2, i64 0, i64 0), i32 1093, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.move_for_stack_reg, i64 0, i64 0)) #8
  unreachable

if.end55:                                         ; preds = %lor.lhs.false
  %14 = load i32* %rtuint20, align 4, !tbaa !3
  %call59 = tail call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %insn, i32 10, i32 %14) #6
  %tobool60 = icmp eq %struct.rtx_def* %call59, null
  br i1 %tobool60, label %if.end64, label %if.then61

if.then61:                                        ; preds = %if.end55
  %call62 = tail call fastcc %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %0, i32 0) #7
  %call63 = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %insn) #6
  br label %if.end247

if.end64:                                         ; preds = %if.end55
  %15 = load i32* %rtuint20, align 4, !tbaa !3
  %conv68 = trunc i32 %15 to i8
  %idxprom69 = sext i32 %i.0340 to i64
  %arrayidx71 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %idxprom69
  store i8 %conv68, i8* %arrayidx71, align 1, !tbaa !0
  %16 = load i32* %rtuint20, align 4, !tbaa !3
  %sh_prom = zext i32 %16 to i64
  %shl = shl i64 1, %sh_prom
  %reg_set = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 1
  %17 = load i64* %reg_set, align 8, !tbaa !4
  %or = or i64 %shl, %17
  %18 = load i32* %rtuint, align 4, !tbaa !3
  %sh_prom78 = zext i32 %18 to i64
  %shl79 = shl i64 1, %sh_prom78
  %neg = xor i64 %shl79, -1
  %and = and i64 %or, %neg
  store i64 %and, i64* %reg_set, align 8, !tbaa !4
  %call81 = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %insn) #6
  br label %if.end247

if.end82:                                         ; preds = %if.then
  br i1 %cmp38, label %if.then91, label %if.end101

if.then91:                                        ; preds = %if.end82
  %call95 = tail call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %insn, i32 10, i32 %8) #6
  %tobool96 = icmp eq %struct.rtx_def* %call95, null
  br i1 %tobool96, label %if.end99, label %if.then97

if.then97:                                        ; preds = %if.then91
  %call98 = tail call fastcc %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %1, i32 0) #7
  br label %if.end99

if.end99:                                         ; preds = %if.then91, %if.then97
  %call100 = tail call %struct.rtx_def* @delete_insn(%struct.rtx_def* %insn) #6
  br label %if.end247

if.end101:                                        ; preds = %if.end82
  %call102 = tail call fastcc i32 @get_hard_regnum(%struct.stack_def* %regstack, %struct.rtx_def* %1) #7
  %cmp103 = icmp sgt i32 %call102, 7
  br i1 %cmp103, label %if.then105, label %if.end106

if.then105:                                       ; preds = %if.end101
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str2, i64 0, i64 0), i32 1134, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.move_for_stack_reg, i64 0, i64 0)) #8
  unreachable

if.end106:                                        ; preds = %if.end101
  %call107 = tail call fastcc i32 @get_hard_regnum(%struct.stack_def* %regstack, %struct.rtx_def* %0) #7
  tail call fastcc void @replace_reg(%struct.rtx_def** %call, i32 %call107) #7
  %19 = load i32* %rtuint20, align 4, !tbaa !3
  %conv111 = trunc i32 %19 to i8
  %top112 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 0
  %20 = load i32* %top112, align 4, !tbaa !3
  %inc = add nsw i32 %20, 1
  store i32 %inc, i32* %top112, align 4, !tbaa !3
  %idxprom113 = sext i32 %inc to i64
  %arrayidx115 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %idxprom113
  store i8 %conv111, i8* %arrayidx115, align 1, !tbaa !0
  %21 = load i32* %rtuint20, align 4, !tbaa !3
  %sh_prom119 = zext i32 %21 to i64
  %shl120 = shl i64 1, %sh_prom119
  %reg_set121 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 1
  %22 = load i64* %reg_set121, align 8, !tbaa !4
  %or122 = or i64 %shl120, %22
  store i64 %or122, i64* %reg_set121, align 8, !tbaa !4
  tail call fastcc void @replace_reg(%struct.rtx_def** %call4, i32 8) #7
  br label %if.end247

if.else:                                          ; preds = %land.lhs.true17, %land.lhs.true13
  br i1 %cmp, label %land.lhs.true127, label %if.else200

land.lhs.true127:                                 ; preds = %land.lhs.true, %if.else
  %arrayidx129 = getelementptr inbounds %struct.rtx_def* %0, i64 0, i32 1, i64 0
  %rtuint130 = bitcast %union.rtunion_def* %arrayidx129 to i32*
  %23 = load i32* %rtuint130, align 4, !tbaa !3
  %.off335 = add i32 %23, -8
  %24 = icmp ult i32 %.off335, 8
  br i1 %24, label %if.then139, label %if.else200

if.then139:                                       ; preds = %land.lhs.true127
  tail call fastcc void @emit_swap_insn(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %0) #7
  %25 = load i32* %rtuint130, align 4, !tbaa !3
  %call143 = tail call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %insn, i32 1, i32 %25) #6
  %tobool144 = icmp eq %struct.rtx_def* %call143, null
  br i1 %tobool144, label %if.else159, label %if.then145

if.then145:                                       ; preds = %if.then139
  %arrayidx147 = getelementptr inbounds %struct.rtx_def* %call143, i64 0, i32 1, i64 0
  %rtx148 = bitcast %union.rtunion_def* %arrayidx147 to %struct.rtx_def**
  tail call fastcc void @replace_reg(%struct.rtx_def** %rtx148, i32 8) #7
  %top149 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 0
  %26 = load i32* %top149, align 4, !tbaa !3
  %dec150 = add nsw i32 %26, -1
  store i32 %dec150, i32* %top149, align 4, !tbaa !3
  %27 = load i32* %rtuint130, align 4, !tbaa !3
  %sh_prom154 = zext i32 %27 to i64
  %shl155 = shl i64 1, %sh_prom154
  %neg156 = xor i64 %shl155, -1
  %reg_set157 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 1
  %28 = load i64* %reg_set157, align 8, !tbaa !4
  %and158 = and i64 %28, %neg156
  store i64 %and158, i64* %reg_set157, align 8, !tbaa !4
  br label %if.end199

if.else159:                                       ; preds = %if.then139
  %bf.load160 = load i32* %2, align 8
  %bf.lshr = lshr i32 %bf.load160, 16
  %bf.clear161 = and i32 %bf.lshr, 255
  %bf.clear161.off = add i32 %bf.clear161, -17
  %switch = icmp ult i32 %bf.clear161.off, 2
  br i1 %switch, label %land.lhs.true170, label %if.end199

land.lhs.true170:                                 ; preds = %if.else159
  %top171 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 0
  %29 = load i32* %top171, align 4, !tbaa !3
  %cmp172 = icmp slt i32 %29, 7
  br i1 %cmp172, label %if.then174, label %if.end199

if.then174:                                       ; preds = %land.lhs.true170
  %idxprom178330 = zext i32 %bf.clear161 to i64
  %arrayidx179 = getelementptr inbounds [8 x [59 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 0, i64 %idxprom178330
  %30 = load %struct.rtx_def** %arrayidx179, align 8, !tbaa !2
  %cmp183 = icmp eq i32 %bf.clear161, 18
  br i1 %cmp183, label %if.then185, label %if.else187

if.then185:                                       ; preds = %if.then174
  %call186 = tail call %struct.rtx_def* @gen_movtf(%struct.rtx_def* %30, %struct.rtx_def* %30) #6
  br label %if.end189

if.else187:                                       ; preds = %if.then174
  %call188 = tail call %struct.rtx_def* @gen_movxf(%struct.rtx_def* %30, %struct.rtx_def* %30) #6
  br label %if.end189

if.end189:                                        ; preds = %if.else187, %if.then185
  %push_rtx.0 = phi %struct.rtx_def* [ %call186, %if.then185 ], [ %call188, %if.else187 ]
  %call190 = tail call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %push_rtx.0, %struct.rtx_def* %insn) #6
  %arrayidx192 = getelementptr inbounds %struct.rtx_def* %insn, i64 0, i32 1, i64 6
  %rtx193 = bitcast %union.rtunion_def* %arrayidx192 to %struct.rtx_def**
  %31 = load %struct.rtx_def** %rtx193, align 8, !tbaa !2
  %call194 = tail call %struct.rtx_def* @gen_rtx_fmt_ee(i32 3, i32 1, %struct.rtx_def* %30, %struct.rtx_def* %31) #6
  %32 = getelementptr inbounds %union.rtunion_def* %arrayidx192, i64 0, i32 0
  %call194.c = ptrtoint %struct.rtx_def* %call194 to i64
  store i64 %call194.c, i64* %32, align 8, !tbaa !2
  br label %if.end199

if.end199:                                        ; preds = %if.else159, %land.lhs.true170, %if.end189, %if.then145
  tail call fastcc void @replace_reg(%struct.rtx_def** %call, i32 8) #7
  br label %if.end247

if.else200:                                       ; preds = %entry, %land.lhs.true127, %if.else
  %33 = bitcast %struct.rtx_def* %1 to i32*
  %bf.load201 = load i32* %33, align 8
  %bf.clear202 = and i32 %bf.load201, 65535
  %cmp203 = icmp eq i32 %bf.clear202, 61
  br i1 %cmp203, label %land.lhs.true205, label %if.else244

land.lhs.true205:                                 ; preds = %if.else200
  %arrayidx207 = getelementptr inbounds %struct.rtx_def* %1, i64 0, i32 1, i64 0
  %rtuint208 = bitcast %union.rtunion_def* %arrayidx207 to i32*
  %34 = load i32* %rtuint208, align 4, !tbaa !3
  %.off = add i32 %34, -8
  %35 = icmp ult i32 %.off, 8
  br i1 %35, label %if.then217, label %if.else244

if.then217:                                       ; preds = %land.lhs.true205
  %call218 = tail call fastcc i32 @get_hard_regnum(%struct.stack_def* %regstack, %struct.rtx_def* %1) #7
  %cmp219 = icmp sgt i32 %call218, 7
  br i1 %cmp219, label %if.then221, label %if.end222

if.then221:                                       ; preds = %if.then217
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str2, i64 0, i64 0), i32 1190, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.move_for_stack_reg, i64 0, i64 0)) #8
  unreachable

if.end222:                                        ; preds = %if.then217
  %top223 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 0
  %36 = load i32* %top223, align 4, !tbaa !3
  %cmp224 = icmp sgt i32 %36, 7
  br i1 %cmp224, label %if.then226, label %if.end227

if.then226:                                       ; preds = %if.end222
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str2, i64 0, i64 0), i32 1193, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.move_for_stack_reg, i64 0, i64 0)) #8
  unreachable

if.end227:                                        ; preds = %if.end222
  %37 = load i32* %rtuint208, align 4, !tbaa !3
  %conv231 = trunc i32 %37 to i8
  %inc233 = add nsw i32 %36, 1
  store i32 %inc233, i32* %top223, align 4, !tbaa !3
  %idxprom234 = sext i32 %inc233 to i64
  %arrayidx236 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %idxprom234
  store i8 %conv231, i8* %arrayidx236, align 1, !tbaa !0
  %38 = load i32* %rtuint208, align 4, !tbaa !3
  %sh_prom240 = zext i32 %38 to i64
  %shl241 = shl i64 1, %sh_prom240
  %reg_set242 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 1
  %39 = load i64* %reg_set242, align 8, !tbaa !4
  %or243 = or i64 %shl241, %39
  store i64 %or243, i64* %reg_set242, align 8, !tbaa !4
  tail call fastcc void @replace_reg(%struct.rtx_def** %call4, i32 8) #7
  br label %if.end247

if.else244:                                       ; preds = %land.lhs.true205, %if.else200
  tail call void @fancy_abort(i8* getelementptr inbounds ([53 x i8]* @.str2, i64 0, i64 0), i32 1200, i8* getelementptr inbounds ([19 x i8]* @__FUNCTION__.move_for_stack_reg, i64 0, i64 0)) #8
  unreachable

if.end247:                                        ; preds = %if.end199, %if.end227, %if.then61, %if.end64, %if.end99, %if.end106
  ret void
}
