define internal fastcc void @pop_stack(%struct.stack_def* nocapture %regstack, i32 %regno) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.stack_def* %regstack}, i64 0, metadata !1226), !dbg !2552
  tail call void @llvm.dbg.value(metadata !{i32 %regno}, i64 0, metadata !1227), !dbg !2553
  %top1 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 0, !dbg !2554
  %0 = load i32* %top1, align 4, !dbg !2554, !tbaa !1565
  tail call void @llvm.dbg.value(metadata !{i32 %0}, i64 0, metadata !1228), !dbg !2554
  %sh_prom = zext i32 %regno to i64, !dbg !2555
  %shl = shl i64 1, %sh_prom, !dbg !2555
  %neg = xor i64 %shl, -1, !dbg !2555
  %reg_set = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 1, !dbg !2555
  %1 = load i64* %reg_set, align 8, !dbg !2555, !tbaa !1567
  %and = and i64 %1, %neg, !dbg !2555
  store i64 %and, i64* %reg_set, align 8, !dbg !2555, !tbaa !1567
  %dec = add nsw i32 %0, -1, !dbg !2556
  store i32 %dec, i32* %top1, align 4, !dbg !2556, !tbaa !1565
  %idxprom = sext i32 %0 to i64, !dbg !2557
  %arrayidx = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %idxprom, !dbg !2557
  %2 = load i8* %arrayidx, align 1, !dbg !2557, !tbaa !1561
  %conv = zext i8 %2 to i32, !dbg !2557
  %cmp = icmp ne i32 %conv, %regno, !dbg !2557
  %cmp547 = icmp sgt i32 %0, 0, !dbg !2558
  %or.cond = and i1 %cmp, %cmp547, !dbg !2557
  br i1 %or.cond, label %for.body, label %if.end27, !dbg !2557

for.cond:                                         ; preds = %for.body
  %dec25 = add nsw i32 %i.048, -1, !dbg !2558
  %3 = trunc i64 %indvars.iv54 to i32, !dbg !2558
  %cmp5 = icmp sgt i32 %3, 0, !dbg !2558
  br i1 %cmp5, label %for.body, label %if.end27, !dbg !2558

for.body:                                         ; preds = %entry, %for.cond
  %indvars.iv54.in = phi i64 [ %indvars.iv54, %for.cond ], [ %idxprom, %entry ]
  %i.048 = phi i32 [ %dec25, %for.cond ], [ %dec, %entry ]
  %indvars.iv54 = add i64 %indvars.iv54.in, -1, !dbg !2558
  %arrayidx9 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %indvars.iv54, !dbg !2559
  %4 = load i8* %arrayidx9, align 1, !dbg !2559, !tbaa !1561
  %conv10 = zext i8 %4 to i32, !dbg !2559
  %cmp11 = icmp eq i32 %conv10, %regno, !dbg !2559
  tail call void @llvm.dbg.value(metadata !{i32 %dec25}, i64 0, metadata !1229), !dbg !2558
  br i1 %cmp11, label %for.cond14.preheader, label %for.cond, !dbg !2559

for.cond14.preheader:                             ; preds = %for.body
  %cmp1543 = icmp slt i32 %i.048, %0, !dbg !2560
  br i1 %cmp1543, label %for.body17, label %if.end27, !dbg !2560

for.body17:                                       ; preds = %for.cond14.preheader, %for.body17
  %indvars.iv49 = phi i64 [ %indvars.iv.next50, %for.body17 ], [ %indvars.iv54, %for.cond14.preheader ], !dbg !2558
  %indvars.iv.next50 = add i64 %indvars.iv49, 1, !dbg !2560
  %arrayidx20 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %indvars.iv.next50, !dbg !2562
  %5 = load i8* %arrayidx20, align 1, !dbg !2562, !tbaa !1561
  %arrayidx23 = getelementptr inbounds %struct.stack_def* %regstack, i64 0, i32 2, i64 %indvars.iv49, !dbg !2562
  store i8 %5, i8* %arrayidx23, align 1, !dbg !2562, !tbaa !1561
  %6 = trunc i64 %indvars.iv.next50 to i32, !dbg !2560
  %cmp15 = icmp slt i32 %6, %0, !dbg !2560
  br i1 %cmp15, label %for.body17, label %if.end27, !dbg !2560

if.end27:                                         ; preds = %entry, %for.cond, %for.cond14.preheader, %for.body17
  ret void, !dbg !2563
}
