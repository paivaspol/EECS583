define void @visualize_stall_cycles(i32 %stalls) #0 {
entry:
  %0 = load i32* @n_visual_lines, align 4, !tbaa !3
  %cmp = icmp sgt i32 %0, 99
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @print_block_visualization(i8* getelementptr inbounds ([13 x i8]* @.str16, i64 0, i64 0)) #6
  %1 = load i8** @visual_tbl, align 8, !tbaa !0
  store i8 0, i8* %1, align 1
  store i32 0, i32* @n_visual_lines, align 4, !tbaa !3
  store i32 0, i32* @n_vis_no_unit, align 4, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = phi i32 [ 0, %if.then ], [ %0, %entry ]
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* @n_visual_lines, align 4, !tbaa !3
  %3 = load i8** @visual_tbl, align 8, !tbaa !0
  %call = tail call i64 @strlen(i8* %3) #7
  %add.ptr = getelementptr inbounds i8* %3, i64 %call
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* getelementptr inbounds ([10 x i8]* @.str21, i64 0, i64 0), i64 10, i32 1, i1 false)
  %add.ptr.sum = add i64 %call, 9
  %add.ptr3 = getelementptr inbounds i8* %3, i64 %add.ptr.sum
  %conv = zext i32 %stalls to i64
  %4 = load i32* @visual_tbl_line_length, align 4, !tbaa !3
  %conv4 = zext i32 %4 to i64
  %sub7 = add i64 %conv4, -10
  %cmp8 = icmp ugt i64 %conv, %sub7
  %sub15 = add i32 %4, -15
  %stalls.addr.0 = select i1 %cmp8, i32 %sub15, i32 %stalls
  %suffix.0 = select i1 %cmp8, i8* getelementptr inbounds ([7 x i8]* @.str22, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8]* @.str20, i64 0, i64 0)
  %conv18 = sext i32 %stalls.addr.0 to i64
  tail call void @llvm.memset.p0i8.i64(i8* %add.ptr3, i8 46, i64 %conv18, i32 1, i1 false)
  %add.ptr3.sum = add i64 %conv18, %add.ptr.sum
  %add.ptr19 = getelementptr inbounds i8* %3, i64 %add.ptr3.sum
  %call20 = tail call i8* @strcpy(i8* %add.ptr19, i8* %suffix.0) #5
  ret void
}
