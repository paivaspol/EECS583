define internal fastcc void @toe53(i16* nocapture %x, i16* nocapture %y) #0 {
entry:
  %arrayidx.i = getelementptr inbounds i16* %x, i64 1
  %0 = load i16* %arrayidx.i, align 2, !tbaa !0
  %and.i = and i16 %0, 32767
  %cmp.i = icmp eq i16 %and.i, 32767
  br i1 %cmp.i, label %for.body.i, label %if.end

for.cond.i:                                       ; preds = %for.body.i
  %1 = trunc i64 %indvars.iv.next.i to i32
  %cmp2.i = icmp slt i32 %1, 9
  br i1 %cmp2.i, label %for.body.i, label %if.end

for.body.i:                                       ; preds = %entry, %for.cond.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.cond.i ], [ 3, %entry ]
  %arrayidx4.i = getelementptr inbounds i16* %x, i64 %indvars.iv.i
  %2 = load i16* %arrayidx4.i, align 2, !tbaa !0
  %cmp6.i = icmp eq i16 %2, 0
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1
  br i1 %cmp6.i, label %for.cond.i, label %if.then

if.then:                                          ; preds = %for.body.i
  %3 = load i16* %x, align 2, !tbaa !0
  %cmp.i62 = icmp ne i16 %3, 0
  %conv1.i = zext i1 %cmp.i62 to i32
  tail call fastcc void @make_nan(i16* %y, i32 %conv1.i, i32 16) #6
  br label %return

if.end:                                           ; preds = %for.cond.i, %entry
  %add.ptr = getelementptr inbounds i16* %y, i64 3
  store i16 0, i16* %add.ptr, align 2, !tbaa !0
  %4 = load i16* %x, align 2, !tbaa !0
  %tobool2 = icmp eq i16 %4, 0
  %. = select i1 %tobool2, i16 0, i16 -32768
  store i16 %., i16* %add.ptr, align 2, !tbaa !0
  %incdec.ptr5 = getelementptr inbounds i16* %x, i64 2
  %5 = load i16* %arrayidx.i, align 2, !tbaa !0
  %cmp = icmp ugt i16 %5, 2046
  br i1 %cmp, label %if.then7, label %if.end13

if.then7:                                         ; preds = %if.end
  %or = or i16 %., 32752
  store i16 %or, i16* %add.ptr, align 2, !tbaa !0
  %incdec.ptr10 = getelementptr inbounds i16* %y, i64 2
  store i16 0, i16* %incdec.ptr10, align 2, !tbaa !0
  %incdec.ptr11 = getelementptr inbounds i16* %y, i64 1
  store i16 0, i16* %incdec.ptr11, align 2, !tbaa !0
  store i16 0, i16* %y, align 2, !tbaa !0
  br label %return

if.end13:                                         ; preds = %if.end
  %cmp15 = icmp eq i16 %5, 0
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end13
  %call18 = tail call fastcc i32 @eshift(i16* %x, i32 4) #6
  br label %if.end22

if.else:                                          ; preds = %if.end13
  %shl = shl i16 %5, 4
  %call21 = tail call fastcc i32 @eshift(i16* %x, i32 5) #6
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then17
  %i.0 = phi i16 [ 0, %if.then17 ], [ %shl, %if.else ]
  %incdec.ptr23 = getelementptr inbounds i16* %x, i64 3
  %6 = load i16* %incdec.ptr5, align 2, !tbaa !0
  %and = and i16 %6, 15
  %or26 = or i16 %and, %i.0
  %7 = load i16* %add.ptr, align 2, !tbaa !0
  %or3061 = or i16 %or26, %7
  store i16 %or3061, i16* %add.ptr, align 2, !tbaa !0
  %incdec.ptr32 = getelementptr inbounds i16* %x, i64 4
  %8 = load i16* %incdec.ptr23, align 2, !tbaa !0
  %incdec.ptr33 = getelementptr inbounds i16* %y, i64 2
  store i16 %8, i16* %incdec.ptr33, align 2, !tbaa !0
  %incdec.ptr34 = getelementptr inbounds i16* %x, i64 5
  %9 = load i16* %incdec.ptr32, align 2, !tbaa !0
  %incdec.ptr35 = getelementptr inbounds i16* %y, i64 1
  store i16 %9, i16* %incdec.ptr35, align 2, !tbaa !0
  %10 = load i16* %incdec.ptr34, align 2, !tbaa !0
  store i16 %10, i16* %y, align 2, !tbaa !0
  br label %return

return:                                           ; preds = %if.end22, %if.then7, %if.then
  ret void
}
