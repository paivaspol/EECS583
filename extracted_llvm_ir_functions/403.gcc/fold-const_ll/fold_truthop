define internal fastcc %union.tree_node* @fold_truthop(i32 %code, %union.tree_node* %truth_type, %union.tree_node* %lhs, %union.tree_node* %rhs) #0 {
entry:
  %ll_bitsize = alloca i64, align 8
  %ll_bitpos = alloca i64, align 8
  %lr_bitsize = alloca i64, align 8
  %lr_bitpos = alloca i64, align 8
  %rl_bitsize = alloca i64, align 8
  %rl_bitpos = alloca i64, align 8
  %rr_bitsize = alloca i64, align 8
  %rr_bitpos = alloca i64, align 8
  %ll_unsignedp = alloca i32, align 4
  %lr_unsignedp = alloca i32, align 4
  %rl_unsignedp = alloca i32, align 4
  %rr_unsignedp = alloca i32, align 4
  %ll_mode = alloca i32, align 4
  %lr_mode = alloca i32, align 4
  %rl_mode = alloca i32, align 4
  %rr_mode = alloca i32, align 4
  %ll_mask = alloca %union.tree_node*, align 8
  %lr_mask = alloca %union.tree_node*, align 8
  %rl_mask = alloca %union.tree_node*, align 8
  %rr_mask = alloca %union.tree_node*, align 8
  %ll_and_mask = alloca %union.tree_node*, align 8
  %lr_and_mask = alloca %union.tree_node*, align 8
  %rl_and_mask = alloca %union.tree_node*, align 8
  %rr_and_mask = alloca %union.tree_node*, align 8
  %volatilep = alloca i32, align 4
  %side_effects_flag = getelementptr inbounds %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 2
  %0 = bitcast [4 x i8]* %side_effects_flag to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 256
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %lor.lhs.false, label %return

lor.lhs.false:                                    ; preds = %entry
  %side_effects_flag2 = getelementptr inbounds %union.tree_node* %rhs, i64 0, i32 0, i32 0, i32 2
  %1 = bitcast [4 x i8]* %side_effects_flag2 to i32*
  %bf.load3 = load i32* %1, align 8
  %bf.clear5 = and i32 %bf.load3, 256
  %tobool6 = icmp eq i32 %bf.clear5, 0
  br i1 %tobool6, label %if.end, label %return

if.end:                                           ; preds = %lor.lhs.false
  %bf.clear10 = and i32 %bf.load, 255
  %bf.clear14 = and i32 %bf.load3, 255
  %cmp = icmp eq i32 %bf.clear10, 88
  br i1 %cmp, label %land.lhs.true, label %if.end18

land.lhs.true:                                    ; preds = %if.end
  %operands = getelementptr inbounds %union.tree_node* %lhs, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %2 = bitcast i32* %arrayidx to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !3
  %call = call i32 @integer_onep(%union.tree_node* %3) #9
  %tobool15 = icmp eq i32 %call, 0
  br i1 %tobool15, label %if.end18, label %if.then16

if.then16:                                        ; preds = %land.lhs.true
  %4 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !3
  %call17 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 102, %union.tree_node* %truth_type, %union.tree_node* %lhs, %union.tree_node* %4) #9
  br label %if.end18

if.end18:                                         ; preds = %land.lhs.true, %if.then16, %if.end
  %lcode.0 = phi i32 [ 102, %if.then16 ], [ 88, %land.lhs.true ], [ %bf.clear10, %if.end ]
  %lhs.addr.0 = phi %union.tree_node* [ %call17, %if.then16 ], [ %lhs, %land.lhs.true ], [ %lhs, %if.end ]
  %cmp19 = icmp eq i32 %bf.clear14, 88
  br i1 %cmp19, label %land.lhs.true20, label %if.end28

land.lhs.true20:                                  ; preds = %if.end18
  %operands22 = getelementptr inbounds %union.tree_node* %rhs, i64 0, i32 0, i32 2
  %arrayidx23 = getelementptr inbounds i32* %operands22, i64 2
  %5 = bitcast i32* %arrayidx23 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !3
  %call24 = call i32 @integer_onep(%union.tree_node* %6) #9
  %tobool25 = icmp eq i32 %call24, 0
  br i1 %tobool25, label %if.end28, label %if.then26

if.then26:                                        ; preds = %land.lhs.true20
  %7 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !3
  %call27 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 102, %union.tree_node* %truth_type, %union.tree_node* %rhs, %union.tree_node* %7) #9
  br label %if.end28

if.end28:                                         ; preds = %land.lhs.true20, %if.then26, %if.end18
  %rcode.0 = phi i32 [ 102, %if.then26 ], [ 88, %land.lhs.true20 ], [ %bf.clear14, %if.end18 ]
  %rhs.addr.0 = phi %union.tree_node* [ %call27, %if.then26 ], [ %rhs, %land.lhs.true20 ], [ %rhs, %if.end18 ]
  %idxprom646 = zext i32 %lcode.0 to i64
  %arrayidx29 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom646
  %8 = load i8* %arrayidx29, align 1, !tbaa !1
  %cmp30 = icmp eq i8 %8, 60
  br i1 %cmp30, label %lor.lhs.false32, label %return

lor.lhs.false32:                                  ; preds = %if.end28
  %idxprom33647 = zext i32 %rcode.0 to i64
  %arrayidx34 = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom33647
  %9 = load i8* %arrayidx34, align 1, !tbaa !1
  %cmp36 = icmp eq i8 %9, 60
  br i1 %cmp36, label %if.end39, label %return

if.end39:                                         ; preds = %lor.lhs.false32
  %cmp40 = icmp eq i32 %code, 93
  %cmp42 = icmp eq i32 %code, 91
  %.cmp42 = or i1 %cmp40, %cmp42
  %cond = select i1 %.cmp42, i32 93, i32 94
  %operands45 = getelementptr inbounds %union.tree_node* %lhs.addr.0, i64 0, i32 0, i32 2
  %arrayidx46 = bitcast i32* %operands45 to %union.tree_node**
  %10 = load %union.tree_node** %arrayidx46, align 8, !tbaa !3
  %arrayidx49 = getelementptr inbounds i32* %operands45, i64 2
  %11 = bitcast i32* %arrayidx49 to %union.tree_node**
  %12 = load %union.tree_node** %11, align 8, !tbaa !3
  %operands51 = getelementptr inbounds %union.tree_node* %rhs.addr.0, i64 0, i32 0, i32 2
  %arrayidx52 = bitcast i32* %operands51 to %union.tree_node**
  %13 = load %union.tree_node** %arrayidx52, align 8, !tbaa !3
  %arrayidx55 = getelementptr inbounds i32* %operands51, i64 2
  %14 = bitcast i32* %arrayidx55 to %union.tree_node**
  %15 = load %union.tree_node** %14, align 8, !tbaa !3
  %16 = load i32* @ix86_branch_cost, align 4, !tbaa !4
  %cmp56 = icmp sgt i32 %16, 1
  br i1 %cmp56, label %land.lhs.true58, label %if.end94

land.lhs.true58:                                  ; preds = %if.end39
  %type = getelementptr inbounds %union.tree_node* %13, i64 0, i32 0, i32 0, i32 1
  %17 = load %union.tree_node** %type, align 8, !tbaa !3
  %code61 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 2
  %18 = bitcast [4 x i8]* %code61 to i32*
  %bf.load62 = load i32* %18, align 8
  %bf.clear63 = and i32 %bf.load62, 255
  switch i32 %bf.clear63, label %land.lhs.true86 [
    i32 7, label %if.end94
    i32 8, label %land.lhs.true75
  ]

land.lhs.true75:                                  ; preds = %land.lhs.true58
  %type79 = getelementptr inbounds %union.tree_node* %17, i64 0, i32 0, i32 0, i32 1
  %19 = load %union.tree_node** %type79, align 8, !tbaa !3
  %code81 = getelementptr inbounds %union.tree_node* %19, i64 0, i32 0, i32 0, i32 2
  %20 = bitcast [4 x i8]* %code81 to i32*
  %bf.load82 = load i32* %20, align 8
  %bf.clear83 = and i32 %bf.load82, 255
  %cmp84 = icmp eq i32 %bf.clear83, 7
  br i1 %cmp84, label %if.end94, label %land.lhs.true86

land.lhs.true86:                                  ; preds = %land.lhs.true58, %land.lhs.true75
  %call87 = call fastcc i32 @simple_operand_p(%union.tree_node* %13) #7
  %tobool88 = icmp eq i32 %call87, 0
  br i1 %tobool88, label %if.end94, label %land.lhs.true89

land.lhs.true89:                                  ; preds = %land.lhs.true86
  %call90 = call fastcc i32 @simple_operand_p(%union.tree_node* %15) #7
  %tobool91 = icmp eq i32 %call90, 0
  br i1 %tobool91, label %if.end94, label %if.then92

if.then92:                                        ; preds = %land.lhs.true89
  %call93 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %cond, %union.tree_node* %truth_type, %union.tree_node* %lhs.addr.0, %union.tree_node* %rhs.addr.0) #9
  br label %return

if.end94:                                         ; preds = %land.lhs.true58, %land.lhs.true89, %land.lhs.true86, %land.lhs.true75, %if.end39
  %lcode.0.off = add i32 %lcode.0, -101
  %21 = icmp ugt i32 %lcode.0.off, 1
  br i1 %21, label %return, label %lor.lhs.false100

lor.lhs.false100:                                 ; preds = %if.end94
  %rcode.0.off = add i32 %rcode.0, -101
  %22 = icmp ugt i32 %rcode.0.off, 1
  br i1 %22, label %return, label %if.end107

if.end107:                                        ; preds = %lor.lhs.false100
  store i32 0, i32* %volatilep, align 4, !tbaa !4
  %call108 = call fastcc %union.tree_node* @decode_field_reference(%union.tree_node* %10, i64* %ll_bitsize, i64* %ll_bitpos, i32* %ll_mode, i32* %ll_unsignedp, i32* %volatilep, %union.tree_node** %ll_mask, %union.tree_node** %ll_and_mask) #7
  %call109 = call fastcc %union.tree_node* @decode_field_reference(%union.tree_node* %12, i64* %lr_bitsize, i64* %lr_bitpos, i32* %lr_mode, i32* %lr_unsignedp, i32* %volatilep, %union.tree_node** %lr_mask, %union.tree_node** %lr_and_mask) #7
  %call110 = call fastcc %union.tree_node* @decode_field_reference(%union.tree_node* %13, i64* %rl_bitsize, i64* %rl_bitpos, i32* %rl_mode, i32* %rl_unsignedp, i32* %volatilep, %union.tree_node** %rl_mask, %union.tree_node** %rl_and_mask) #7
  %call111 = call fastcc %union.tree_node* @decode_field_reference(%union.tree_node* %15, i64* %rr_bitsize, i64* %rr_bitpos, i32* %rr_mode, i32* %rr_unsignedp, i32* %volatilep, %union.tree_node** %rr_mask, %union.tree_node** %rr_and_mask) #7
  %23 = load i32* %volatilep, align 4, !tbaa !4
  %tobool112 = icmp ne i32 %23, 0
  %cmp114 = icmp eq %union.tree_node* %call108, null
  %or.cond = or i1 %tobool112, %cmp114
  %cmp117 = icmp eq %union.tree_node* %call110, null
  %or.cond651 = or i1 %or.cond, %cmp117
  br i1 %or.cond651, label %return, label %lor.lhs.false119

lor.lhs.false119:                                 ; preds = %if.end107
  %call120 = call i32 @operand_equal_p(%union.tree_node* %call108, %union.tree_node* %call110, i32 0) #7
  %tobool121 = icmp eq i32 %call120, 0
  br i1 %tobool121, label %return, label %if.end123

if.end123:                                        ; preds = %lor.lhs.false119
  %code125 = getelementptr inbounds %union.tree_node* %12, i64 0, i32 0, i32 0, i32 2
  %24 = bitcast [4 x i8]* %code125 to i32*
  %bf.load126 = load i32* %24, align 8
  %bf.clear127 = and i32 %bf.load126, 255
  %cmp128 = icmp eq i32 %bf.clear127, 25
  br i1 %cmp128, label %land.lhs.true130, label %if.else

land.lhs.true130:                                 ; preds = %if.end123
  %code132 = getelementptr inbounds %union.tree_node* %15, i64 0, i32 0, i32 0, i32 2
  %25 = bitcast [4 x i8]* %code132 to i32*
  %bf.load133 = load i32* %25, align 8
  %bf.clear134 = and i32 %bf.load133, 255
  %cmp135 = icmp eq i32 %bf.clear134, 25
  br i1 %cmp135, label %if.end149, label %if.else

if.else:                                          ; preds = %land.lhs.true130, %if.end123
  %cmp138 = icmp eq %union.tree_node* %call109, null
  %cmp141 = icmp eq %union.tree_node* %call111, null
  %or.cond652 = or i1 %cmp138, %cmp141
  br i1 %or.cond652, label %return, label %lor.lhs.false143

lor.lhs.false143:                                 ; preds = %if.else
  %call144 = call i32 @operand_equal_p(%union.tree_node* %call109, %union.tree_node* %call111, i32 0) #7
  %tobool145 = icmp eq i32 %call144, 0
  br i1 %tobool145, label %return, label %if.end149

if.end149:                                        ; preds = %lor.lhs.false143, %land.lhs.true130
  %l_const.0 = phi %union.tree_node* [ %12, %land.lhs.true130 ], [ null, %lor.lhs.false143 ]
  %r_const.0 = phi %union.tree_node* [ %15, %land.lhs.true130 ], [ null, %lor.lhs.false143 ]
  %cond152 = select i1 %.cmp42, i32 101, i32 102
  %cmp153 = icmp eq i32 %lcode.0, %cond152
  br i1 %cmp153, label %if.end166, label %if.then155

if.then155:                                       ; preds = %if.end149
  %tobool156 = icmp eq %union.tree_node* %l_const.0, null
  br i1 %tobool156, label %return, label %land.lhs.true157

land.lhs.true157:                                 ; preds = %if.then155
  %call158 = call i32 @integer_zerop(%union.tree_node* %l_const.0) #9
  %tobool159 = icmp eq i32 %call158, 0
  br i1 %tobool159, label %return, label %land.lhs.true160

land.lhs.true160:                                 ; preds = %land.lhs.true157
  %26 = load %union.tree_node** %ll_mask, align 8, !tbaa !3
  %call161 = call i32 @integer_pow2p(%union.tree_node* %26) #9
  %tobool162 = icmp eq i32 %call161, 0
  br i1 %tobool162, label %return, label %if.then163

if.then163:                                       ; preds = %land.lhs.true160
  store i32 1, i32* %ll_unsignedp, align 4, !tbaa !4
  br label %if.end166

if.end166:                                        ; preds = %if.end149, %if.then163
  %l_const.1 = phi %union.tree_node* [ %26, %if.then163 ], [ %l_const.0, %if.end149 ]
  %cmp167 = icmp eq i32 %rcode.0, %cond152
  br i1 %cmp167, label %if.end180, label %if.then169

if.then169:                                       ; preds = %if.end166
  %tobool170 = icmp eq %union.tree_node* %r_const.0, null
  br i1 %tobool170, label %return, label %land.lhs.true171

land.lhs.true171:                                 ; preds = %if.then169
  %call172 = call i32 @integer_zerop(%union.tree_node* %r_const.0) #9
  %tobool173 = icmp eq i32 %call172, 0
  br i1 %tobool173, label %return, label %land.lhs.true174

land.lhs.true174:                                 ; preds = %land.lhs.true171
  %27 = load %union.tree_node** %rl_mask, align 8, !tbaa !3
  %call175 = call i32 @integer_pow2p(%union.tree_node* %27) #9
  %tobool176 = icmp eq i32 %call175, 0
  br i1 %tobool176, label %return, label %if.then177

if.then177:                                       ; preds = %land.lhs.true174
  store i32 1, i32* %rl_unsignedp, align 4, !tbaa !4
  br label %if.end180

if.end180:                                        ; preds = %if.end166, %if.then177
  %r_const.1 = phi %union.tree_node* [ %27, %if.then177 ], [ %r_const.0, %if.end166 ]
  %28 = load i64* %ll_bitpos, align 8, !tbaa !0
  %29 = load i64* %rl_bitpos, align 8, !tbaa !0
  %cmp181 = icmp slt i64 %28, %29
  %cond183 = select i1 %cmp181, i64 %28, i64 %29
  %conv184 = trunc i64 %cond183 to i32
  %30 = load i64* %ll_bitsize, align 8, !tbaa !0
  %add = add nsw i64 %30, %28
  %31 = load i64* %rl_bitsize, align 8, !tbaa !0
  %add185 = add nsw i64 %31, %29
  %cmp186 = icmp sgt i64 %add, %add185
  %add.add185 = select i1 %cmp186, i64 %add, i64 %add185
  %conv194 = trunc i64 %add.add185 to i32
  %sub = sub nsw i32 %conv194, %conv184
  %type196 = getelementptr inbounds %union.tree_node* %call108, i64 0, i32 0, i32 0, i32 1
  %32 = load %union.tree_node** %type196, align 8, !tbaa !3
  %align = getelementptr inbounds %union.tree_node* %32, i64 0, i32 0, i32 7
  %33 = bitcast %union.tree_node** %align to i32*
  %34 = load i32* %33, align 4, !tbaa !4
  %35 = load i32* @word_mode, align 4, !tbaa !7
  %36 = load i32* %volatilep, align 4, !tbaa !4
  %call198 = call i32 @get_best_mode(i32 %sub, i32 %conv184, i32 %34, i32 %35, i32 %36) #9
  %cmp199 = icmp eq i32 %call198, 0
  br i1 %cmp199, label %return, label %if.end202

if.end202:                                        ; preds = %if.end180
  %idxprom203 = sext i32 %call198 to i64
  %arrayidx204 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom203
  %37 = load i16* %arrayidx204, align 2, !tbaa !5
  %conv205 = zext i16 %37 to i64
  %sext = shl i64 %cond183, 32
  %conv206 = ashr exact i64 %sext, 32
  %neg = sub i64 0, %conv205
  %and = and i64 %conv206, %neg
  %conv208 = zext i16 %37 to i32
  %call209 = call %union.tree_node* @type_for_size(i32 %conv208, i32 1) #9
  %38 = load i64* %ll_bitpos, align 8, !tbaa !0
  %sub210 = sub nsw i64 %38, %and
  %39 = load i64* %rl_bitpos, align 8, !tbaa !0
  %sub211 = sub nsw i64 %39, %and
  %40 = load %union.tree_node** %ll_mask, align 8, !tbaa !3
  %call212 = call %union.tree_node* @convert(%union.tree_node* %call209, %union.tree_node* %40) #9
  %41 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i = call %union.tree_node* @size_int_type_wide(i64 %sub210, %union.tree_node* %41) #9
  %call214 = call fastcc %union.tree_node* @const_binop(i32 82, %union.tree_node* %call212, %union.tree_node* %call.i) #7
  store %union.tree_node* %call214, %union.tree_node** %ll_mask, align 8, !tbaa !3
  %42 = load %union.tree_node** %rl_mask, align 8, !tbaa !3
  %call215 = call %union.tree_node* @convert(%union.tree_node* %call209, %union.tree_node* %42) #9
  %43 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i654 = call %union.tree_node* @size_int_type_wide(i64 %sub211, %union.tree_node* %43) #9
  %call217 = call fastcc %union.tree_node* @const_binop(i32 82, %union.tree_node* %call215, %union.tree_node* %call.i654) #7
  store %union.tree_node* %call217, %union.tree_node** %rl_mask, align 8, !tbaa !3
  %tobool218 = icmp eq %union.tree_node* %l_const.1, null
  br i1 %tobool218, label %if.end241, label %if.then219

if.then219:                                       ; preds = %if.end202
  %call220 = call %union.tree_node* @convert(%union.tree_node* %call209, %union.tree_node* %l_const.1) #9
  %44 = load i64* %ll_bitsize, align 8, !tbaa !0
  %conv221 = trunc i64 %44 to i32
  %45 = load i32* %ll_unsignedp, align 4, !tbaa !4
  %46 = load %union.tree_node** %ll_and_mask, align 8, !tbaa !3
  %call222 = call fastcc %union.tree_node* @unextend(%union.tree_node* %call220, i32 %conv221, i32 %45, %union.tree_node* %46) #7
  %47 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i655 = call %union.tree_node* @size_int_type_wide(i64 %sub210, %union.tree_node* %47) #9
  %call224 = call fastcc %union.tree_node* @const_binop(i32 82, %union.tree_node* %call222, %union.tree_node* %call.i655) #7
  %call225 = call %union.tree_node* @build1(i32 90, %union.tree_node* %call209, %union.tree_node* %call214) #9
  %call226 = call %union.tree_node* @fold(%union.tree_node* %call225) #7
  %call227 = call fastcc %union.tree_node* @const_binop(i32 88, %union.tree_node* %call224, %union.tree_node* %call226) #7
  %call228 = call i32 @integer_zerop(%union.tree_node* %call227) #9
  %tobool229 = icmp eq i32 %call228, 0
  br i1 %tobool229, label %if.then230, label %if.end241

if.then230:                                       ; preds = %if.then219
  %48 = zext i1 %.cmp42 to i32
  %conv232 = xor i32 %48, 1
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([24 x i8]* @.str2, i64 0, i64 0), i32 %conv232) #9
  %49 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !3
  %50 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !3
  %cond238 = select i1 %.cmp42, %union.tree_node* %50, %union.tree_node* %49
  %call239 = call %union.tree_node* @convert(%union.tree_node* %truth_type, %union.tree_node* %cond238) #9
  br label %return

if.end241:                                        ; preds = %if.then219, %if.end202
  %l_const.2 = phi %union.tree_node* [ %call224, %if.then219 ], [ null, %if.end202 ]
  %tobool242 = icmp eq %union.tree_node* %r_const.1, null
  br i1 %tobool242, label %if.end265, label %if.then243

if.then243:                                       ; preds = %if.end241
  %call244 = call %union.tree_node* @convert(%union.tree_node* %call209, %union.tree_node* %r_const.1) #9
  %51 = load i64* %rl_bitsize, align 8, !tbaa !0
  %conv245 = trunc i64 %51 to i32
  %52 = load i32* %rl_unsignedp, align 4, !tbaa !4
  %53 = load %union.tree_node** %rl_and_mask, align 8, !tbaa !3
  %call246 = call fastcc %union.tree_node* @unextend(%union.tree_node* %call244, i32 %conv245, i32 %52, %union.tree_node* %53) #7
  %54 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i656 = call %union.tree_node* @size_int_type_wide(i64 %sub211, %union.tree_node* %54) #9
  %call248 = call fastcc %union.tree_node* @const_binop(i32 82, %union.tree_node* %call246, %union.tree_node* %call.i656) #7
  %call249 = call %union.tree_node* @build1(i32 90, %union.tree_node* %call209, %union.tree_node* %call217) #9
  %call250 = call %union.tree_node* @fold(%union.tree_node* %call249) #7
  %call251 = call fastcc %union.tree_node* @const_binop(i32 88, %union.tree_node* %call248, %union.tree_node* %call250) #7
  %call252 = call i32 @integer_zerop(%union.tree_node* %call251) #9
  %tobool253 = icmp eq i32 %call252, 0
  br i1 %tobool253, label %if.then254, label %if.end265

if.then254:                                       ; preds = %if.then243
  %55 = zext i1 %.cmp42 to i32
  %conv256 = xor i32 %55, 1
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([24 x i8]* @.str2, i64 0, i64 0), i32 %conv256) #9
  %56 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !3
  %57 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !3
  %cond262 = select i1 %.cmp42, %union.tree_node* %57, %union.tree_node* %56
  %call263 = call %union.tree_node* @convert(%union.tree_node* %truth_type, %union.tree_node* %cond262) #9
  br label %return

if.end265:                                        ; preds = %if.then243, %if.end241
  %r_const.2 = phi %union.tree_node* [ %call248, %if.then243 ], [ null, %if.end241 ]
  %cmp266 = icmp eq %union.tree_node* %l_const.2, null
  br i1 %cmp266, label %if.then268, label %if.end455

if.then268:                                       ; preds = %if.end265
  %58 = load i64* %ll_bitsize, align 8, !tbaa !0
  %59 = load i64* %lr_bitsize, align 8, !tbaa !0
  %cmp269 = icmp eq i64 %58, %59
  br i1 %cmp269, label %lor.lhs.false271, label %return

lor.lhs.false271:                                 ; preds = %if.then268
  %60 = load i64* %rl_bitsize, align 8, !tbaa !0
  %61 = load i64* %rr_bitsize, align 8, !tbaa !0
  %cmp272 = icmp eq i64 %60, %61
  br i1 %cmp272, label %lor.lhs.false274, label %return

lor.lhs.false274:                                 ; preds = %lor.lhs.false271
  %62 = load i32* %ll_unsignedp, align 4, !tbaa !4
  %63 = load i32* %lr_unsignedp, align 4, !tbaa !4
  %cmp275 = icmp eq i32 %62, %63
  br i1 %cmp275, label %lor.lhs.false277, label %return

lor.lhs.false277:                                 ; preds = %lor.lhs.false274
  %64 = load i32* %rl_unsignedp, align 4, !tbaa !4
  %65 = load i32* %rr_unsignedp, align 4, !tbaa !4
  %cmp278 = icmp eq i32 %64, %65
  br i1 %cmp278, label %lor.lhs.false280, label %return

lor.lhs.false280:                                 ; preds = %lor.lhs.false277
  %66 = load i64* %ll_bitpos, align 8, !tbaa !0
  %67 = load i64* %rl_bitpos, align 8, !tbaa !0
  %sub281 = sub nsw i64 %66, %67
  %68 = load i64* %lr_bitpos, align 8, !tbaa !0
  %69 = load i64* %rr_bitpos, align 8, !tbaa !0
  %sub282 = sub nsw i64 %68, %69
  %cmp283 = icmp eq i64 %sub281, %sub282
  br i1 %cmp283, label %if.end286, label %return

if.end286:                                        ; preds = %lor.lhs.false280
  %cmp287 = icmp slt i64 %68, %69
  %cond292 = select i1 %cmp287, i64 %68, i64 %69
  %conv293 = trunc i64 %cond292 to i32
  %add294 = add nsw i64 %68, %58
  %add295 = add nsw i64 %69, %60
  %cmp296 = icmp sgt i64 %add294, %add295
  %add294.add295 = select i1 %cmp296, i64 %add294, i64 %add295
  %conv304 = trunc i64 %add294.add295 to i32
  %sub305 = sub nsw i32 %conv304, %conv293
  %type307 = getelementptr inbounds %union.tree_node* %call109, i64 0, i32 0, i32 0, i32 1
  %70 = load %union.tree_node** %type307, align 8, !tbaa !3
  %align309 = getelementptr inbounds %union.tree_node* %70, i64 0, i32 0, i32 7
  %71 = bitcast %union.tree_node** %align309 to i32*
  %72 = load i32* %71, align 4, !tbaa !4
  %73 = load i32* @word_mode, align 4, !tbaa !7
  %74 = load i32* %volatilep, align 4, !tbaa !4
  %call310 = call i32 @get_best_mode(i32 %sub305, i32 %conv293, i32 %72, i32 %73, i32 %74) #9
  %cmp311 = icmp eq i32 %call310, 0
  br i1 %cmp311, label %return, label %if.end314

if.end314:                                        ; preds = %if.end286
  %idxprom315 = sext i32 %call310 to i64
  %arrayidx316 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom315
  %75 = load i16* %arrayidx316, align 2, !tbaa !5
  %conv317 = zext i16 %75 to i64
  %sext648 = shl i64 %cond292, 32
  %conv318 = ashr exact i64 %sext648, 32
  %neg320 = sub i64 0, %conv317
  %and321 = and i64 %conv318, %neg320
  %conv322 = zext i16 %75 to i32
  %call323 = call %union.tree_node* @type_for_size(i32 %conv322, i32 1) #9
  %76 = load i64* %lr_bitpos, align 8, !tbaa !0
  %sub324 = sub nsw i64 %76, %and321
  %77 = load i64* %rr_bitpos, align 8, !tbaa !0
  %sub325 = sub nsw i64 %77, %and321
  %78 = load %union.tree_node** %lr_mask, align 8, !tbaa !3
  %call326 = call %union.tree_node* @convert(%union.tree_node* %call323, %union.tree_node* %78) #9
  %79 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i657 = call %union.tree_node* @size_int_type_wide(i64 %sub324, %union.tree_node* %79) #9
  %call328 = call fastcc %union.tree_node* @const_binop(i32 82, %union.tree_node* %call326, %union.tree_node* %call.i657) #7
  %80 = load %union.tree_node** %rr_mask, align 8, !tbaa !3
  %call329 = call %union.tree_node* @convert(%union.tree_node* %call323, %union.tree_node* %80) #9
  %81 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i658 = call %union.tree_node* @size_int_type_wide(i64 %sub325, %union.tree_node* %81) #9
  %call331 = call fastcc %union.tree_node* @const_binop(i32 82, %union.tree_node* %call329, %union.tree_node* %call.i658) #7
  store %union.tree_node* %call331, %union.tree_node** %rr_mask, align 8, !tbaa !3
  %call332 = call fastcc %union.tree_node* @const_binop(i32 86, %union.tree_node* %call214, %union.tree_node* %call217) #7
  store %union.tree_node* %call332, %union.tree_node** %ll_mask, align 8, !tbaa !3
  %call333 = call fastcc %union.tree_node* @const_binop(i32 86, %union.tree_node* %call328, %union.tree_node* %call331) #7
  store %union.tree_node* %call333, %union.tree_node** %lr_mask, align 8, !tbaa !3
  %cmp334 = icmp eq i16 %37, %75
  %cmp337 = icmp eq i64 %sub210, %sub324
  %or.cond653 = and i1 %cmp334, %cmp337
  br i1 %or.cond653, label %if.then339, label %if.end368

if.then339:                                       ; preds = %if.end314
  %conv341 = trunc i64 %and to i32
  %82 = load i32* %ll_unsignedp, align 4, !tbaa !4
  %tobool342 = icmp eq i32 %82, 0
  br i1 %tobool342, label %lor.rhs343, label %lor.end345

lor.rhs343:                                       ; preds = %if.then339
  %83 = load i32* %rl_unsignedp, align 4, !tbaa !4
  %tobool344 = icmp ne i32 %83, 0
  br label %lor.end345

lor.end345:                                       ; preds = %if.then339, %lor.rhs343
  %84 = phi i1 [ true, %if.then339 ], [ %tobool344, %lor.rhs343 ]
  %lor.ext = zext i1 %84 to i32
  %call346 = call fastcc %union.tree_node* @make_bit_field_ref(%union.tree_node* %call108, %union.tree_node* %call209, i32 %conv208, i32 %conv341, i32 %lor.ext) #7
  %call348 = call fastcc i32 @all_ones_mask_p(%union.tree_node* %call332, i32 %conv208) #7
  %tobool349 = icmp eq i32 %call348, 0
  br i1 %tobool349, label %if.then350, label %if.end352

if.then350:                                       ; preds = %lor.end345
  %call351 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 88, %union.tree_node* %call209, %union.tree_node* %call346, %union.tree_node* %call332) #9
  br label %if.end352

if.end352:                                        ; preds = %lor.end345, %if.then350
  %lhs.addr.1 = phi %union.tree_node* [ %call346, %lor.end345 ], [ %call351, %if.then350 ]
  %conv354 = trunc i64 %and321 to i32
  %85 = load i32* %lr_unsignedp, align 4, !tbaa !4
  %tobool355 = icmp eq i32 %85, 0
  br i1 %tobool355, label %lor.rhs356, label %lor.end358

lor.rhs356:                                       ; preds = %if.end352
  %86 = load i32* %rr_unsignedp, align 4, !tbaa !4
  %tobool357 = icmp ne i32 %86, 0
  br label %lor.end358

lor.end358:                                       ; preds = %if.end352, %lor.rhs356
  %87 = phi i1 [ true, %if.end352 ], [ %tobool357, %lor.rhs356 ]
  %lor.ext359 = zext i1 %87 to i32
  %call360 = call fastcc %union.tree_node* @make_bit_field_ref(%union.tree_node* %call109, %union.tree_node* %call323, i32 %conv322, i32 %conv354, i32 %lor.ext359) #7
  %call362 = call fastcc i32 @all_ones_mask_p(%union.tree_node* %call333, i32 %conv322) #7
  %tobool363 = icmp eq i32 %call362, 0
  br i1 %tobool363, label %if.then364, label %if.end366

if.then364:                                       ; preds = %lor.end358
  %call365 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 88, %union.tree_node* %call323, %union.tree_node* %call360, %union.tree_node* %call333) #9
  br label %if.end366

if.end366:                                        ; preds = %lor.end358, %if.then364
  %rhs.addr.1 = phi %union.tree_node* [ %call360, %lor.end358 ], [ %call365, %if.then364 ]
  %call367 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %cond152, %union.tree_node* %truth_type, %union.tree_node* %lhs.addr.1, %union.tree_node* %rhs.addr.1) #9
  br label %return

if.end368:                                        ; preds = %if.end314
  %88 = load i64* %ll_bitsize, align 8, !tbaa !0
  %89 = load i64* %ll_bitpos, align 8, !tbaa !0
  %add369 = add nsw i64 %89, %88
  %90 = load i64* %rl_bitpos, align 8, !tbaa !0
  %cmp370 = icmp eq i64 %add369, %90
  br i1 %cmp370, label %land.lhs.true372, label %lor.lhs.false376

land.lhs.true372:                                 ; preds = %if.end368
  %91 = load i64* %lr_bitsize, align 8, !tbaa !0
  %92 = load i64* %lr_bitpos, align 8, !tbaa !0
  %add373 = add nsw i64 %92, %91
  %93 = load i64* %rr_bitpos, align 8, !tbaa !0
  %cmp374 = icmp eq i64 %add373, %93
  br i1 %cmp374, label %land.lhs.true372.if.then384_crit_edge, label %lor.lhs.false376

land.lhs.true372.if.then384_crit_edge:            ; preds = %land.lhs.true372
  %.pre = load i64* %rl_bitsize, align 8, !tbaa !0
  br label %if.then384

lor.lhs.false376:                                 ; preds = %land.lhs.true372, %if.end368
  %94 = load i64* %rl_bitsize, align 8, !tbaa !0
  %add377 = add nsw i64 %94, %90
  %cmp378 = icmp eq i64 %89, %add377
  br i1 %cmp378, label %land.lhs.true380, label %return

land.lhs.true380:                                 ; preds = %lor.lhs.false376
  %95 = load i64* %lr_bitpos, align 8, !tbaa !0
  %96 = load i64* %rr_bitpos, align 8, !tbaa !0
  %97 = load i64* %rr_bitsize, align 8, !tbaa !0
  %add381 = add nsw i64 %97, %96
  %cmp382 = icmp eq i64 %95, %add381
  br i1 %cmp382, label %if.then384, label %return

if.then384:                                       ; preds = %land.lhs.true372.if.then384_crit_edge, %land.lhs.true380
  %98 = phi i64 [ %94, %land.lhs.true380 ], [ %.pre, %land.lhs.true372.if.then384_crit_edge ]
  %99 = phi i64 [ %90, %land.lhs.true380 ], [ %add369, %land.lhs.true372.if.then384_crit_edge ]
  %add386 = add nsw i64 %98, %88
  %conv387 = trunc i64 %add386 to i32
  %cmp388 = icmp slt i64 %89, %99
  %cond393 = select i1 %cmp388, i64 %89, i64 %99
  %conv394 = trunc i64 %cond393 to i32
  %100 = load i32* %ll_unsignedp, align 4, !tbaa !4
  %call395 = call fastcc %union.tree_node* @make_bit_field_ref(%union.tree_node* %call108, %union.tree_node* %call209, i32 %conv387, i32 %conv394, i32 %100) #7
  %101 = load i64* %lr_bitsize, align 8, !tbaa !0
  %102 = load i64* %rr_bitsize, align 8, !tbaa !0
  %add396 = add nsw i64 %102, %101
  %conv397 = trunc i64 %add396 to i32
  %103 = load i64* %lr_bitpos, align 8, !tbaa !0
  %104 = load i64* %rr_bitpos, align 8, !tbaa !0
  %cmp398 = icmp slt i64 %103, %104
  %cond403 = select i1 %cmp398, i64 %103, i64 %104
  %conv404 = trunc i64 %cond403 to i32
  %105 = load i32* %lr_unsignedp, align 4, !tbaa !4
  %call405 = call fastcc %union.tree_node* @make_bit_field_ref(%union.tree_node* %call109, %union.tree_node* %call323, i32 %conv397, i32 %conv404, i32 %105) #7
  %cmp406 = icmp slt i64 %sub210, %sub211
  %cond411 = select i1 %cmp406, i64 %sub210, i64 %sub211
  %106 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i659 = call %union.tree_node* @size_int_type_wide(i64 %cond411, %union.tree_node* %106) #9
  %call413 = call fastcc %union.tree_node* @const_binop(i32 83, %union.tree_node* %call332, %union.tree_node* %call.i659) #7
  store %union.tree_node* %call413, %union.tree_node** %ll_mask, align 8, !tbaa !3
  %cmp414 = icmp slt i64 %sub324, %sub325
  %cond419 = select i1 %cmp414, i64 %sub324, i64 %sub325
  %107 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i660 = call %union.tree_node* @size_int_type_wide(i64 %cond419, %union.tree_node* %107) #9
  %call421 = call fastcc %union.tree_node* @const_binop(i32 83, %union.tree_node* %call333, %union.tree_node* %call.i660) #7
  store %union.tree_node* %call421, %union.tree_node** %lr_mask, align 8, !tbaa !3
  %cmp422 = icmp eq %union.tree_node* %call209, %call323
  br i1 %cmp422, label %if.end438, label %if.then424

if.then424:                                       ; preds = %if.then384
  %cmp425 = icmp ugt i16 %37, %75
  br i1 %cmp425, label %if.then427, label %if.else430

if.then427:                                       ; preds = %if.then424
  %call428 = call %union.tree_node* @convert(%union.tree_node* %call323, %union.tree_node* %call395) #9
  %call429 = call %union.tree_node* @convert(%union.tree_node* %call323, %union.tree_node* %call413) #9
  store %union.tree_node* %call429, %union.tree_node** %ll_mask, align 8, !tbaa !3
  br label %if.end438

if.else430:                                       ; preds = %if.then424
  %cmp431 = icmp ult i16 %37, %75
  br i1 %cmp431, label %if.then433, label %if.end438

if.then433:                                       ; preds = %if.else430
  %call434 = call %union.tree_node* @convert(%union.tree_node* %call209, %union.tree_node* %call405) #9
  %call435 = call %union.tree_node* @convert(%union.tree_node* %call209, %union.tree_node* %call421) #9
  store %union.tree_node* %call435, %union.tree_node** %lr_mask, align 8, !tbaa !3
  br label %if.end438

if.end438:                                        ; preds = %if.then384, %if.then427, %if.then433, %if.else430
  %108 = phi %union.tree_node* [ %call421, %if.then427 ], [ %call435, %if.then433 ], [ %call421, %if.else430 ], [ %call421, %if.then384 ]
  %109 = phi %union.tree_node* [ %call429, %if.then427 ], [ %call413, %if.then433 ], [ %call413, %if.else430 ], [ %call413, %if.then384 ]
  %rhs.addr.2 = phi %union.tree_node* [ %call405, %if.then427 ], [ %call434, %if.then433 ], [ %call405, %if.else430 ], [ %call405, %if.then384 ]
  %lhs.addr.2 = phi %union.tree_node* [ %call428, %if.then427 ], [ %call395, %if.then433 ], [ %call395, %if.else430 ], [ %call395, %if.then384 ]
  %type385.0 = phi %union.tree_node* [ %call323, %if.then427 ], [ %call209, %if.then433 ], [ %call209, %if.else430 ], [ %call209, %if.then384 ]
  %110 = load i64* %ll_bitsize, align 8, !tbaa !0
  %111 = load i64* %rl_bitsize, align 8, !tbaa !0
  %add439 = add nsw i64 %111, %110
  %conv440 = trunc i64 %add439 to i32
  %call441 = call fastcc i32 @all_ones_mask_p(%union.tree_node* %109, i32 %conv440) #7
  %tobool442 = icmp eq i32 %call441, 0
  br i1 %tobool442, label %if.then443, label %if.end445

if.then443:                                       ; preds = %if.end438
  %call444 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 88, %union.tree_node* %type385.0, %union.tree_node* %lhs.addr.2, %union.tree_node* %109) #9
  br label %if.end445

if.end445:                                        ; preds = %if.end438, %if.then443
  %lhs.addr.3 = phi %union.tree_node* [ %lhs.addr.2, %if.end438 ], [ %call444, %if.then443 ]
  %112 = load i64* %lr_bitsize, align 8, !tbaa !0
  %113 = load i64* %rr_bitsize, align 8, !tbaa !0
  %add446 = add nsw i64 %113, %112
  %conv447 = trunc i64 %add446 to i32
  %call448 = call fastcc i32 @all_ones_mask_p(%union.tree_node* %108, i32 %conv447) #7
  %tobool449 = icmp eq i32 %call448, 0
  br i1 %tobool449, label %if.then450, label %if.end452

if.then450:                                       ; preds = %if.end445
  %call451 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 88, %union.tree_node* %type385.0, %union.tree_node* %rhs.addr.2, %union.tree_node* %108) #9
  br label %if.end452

if.end452:                                        ; preds = %if.end445, %if.then450
  %rhs.addr.3 = phi %union.tree_node* [ %rhs.addr.2, %if.end445 ], [ %call451, %if.then450 ]
  %call453 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %cond152, %union.tree_node* %truth_type, %union.tree_node* %lhs.addr.3, %union.tree_node* %rhs.addr.3) #9
  br label %return

if.end455:                                        ; preds = %if.end265
  %call456 = call fastcc %union.tree_node* @const_binop(i32 88, %union.tree_node* %call214, %union.tree_node* %call217) #7
  %call457 = call i32 @integer_zerop(%union.tree_node* %call456) #9
  %tobool458 = icmp eq i32 %call457, 0
  br i1 %tobool458, label %land.lhs.true459, label %if.end472

land.lhs.true459:                                 ; preds = %if.end455
  %call460 = call fastcc %union.tree_node* @const_binop(i32 88, %union.tree_node* %call456, %union.tree_node* %l_const.2) #7
  %call461 = call fastcc %union.tree_node* @const_binop(i32 88, %union.tree_node* %call456, %union.tree_node* %r_const.2) #7
  %call462 = call i32 @simple_cst_equal(%union.tree_node* %call460, %union.tree_node* %call461) #9
  %cmp463 = icmp eq i32 %call462, 1
  br i1 %cmp463, label %if.end472, label %if.then465

if.then465:                                       ; preds = %land.lhs.true459
  switch i32 %code, label %if.then468 [
    i32 93, label %if.else470
    i32 91, label %if.else470
  ]

if.then468:                                       ; preds = %if.then465
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([46 x i8]* @.str3, i64 0, i64 0)) #9
  %114 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 12), align 8, !tbaa !3
  %call469 = call %union.tree_node* @convert(%union.tree_node* %truth_type, %union.tree_node* %114) #9
  br label %return

if.else470:                                       ; preds = %if.then465, %if.then465
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([52 x i8]* @.str4, i64 0, i64 0)) #9
  %115 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !3
  %call471 = call %union.tree_node* @convert(%union.tree_node* %truth_type, %union.tree_node* %115) #9
  br label %return

if.end472:                                        ; preds = %land.lhs.true459, %if.end455
  %conv474 = trunc i64 %and to i32
  %116 = load i32* %ll_unsignedp, align 4, !tbaa !4
  %tobool475 = icmp eq i32 %116, 0
  br i1 %tobool475, label %lor.rhs476, label %lor.end478

lor.rhs476:                                       ; preds = %if.end472
  %117 = load i32* %rl_unsignedp, align 4, !tbaa !4
  %tobool477 = icmp ne i32 %117, 0
  br label %lor.end478

lor.end478:                                       ; preds = %if.end472, %lor.rhs476
  %118 = phi i1 [ true, %if.end472 ], [ %tobool477, %lor.rhs476 ]
  %lor.ext479 = zext i1 %118 to i32
  %call480 = call fastcc %union.tree_node* @make_bit_field_ref(%union.tree_node* %call108, %union.tree_node* %call209, i32 %conv208, i32 %conv474, i32 %lor.ext479) #7
  %call481 = call fastcc %union.tree_node* @const_binop(i32 86, %union.tree_node* %call214, %union.tree_node* %call217) #7
  store %union.tree_node* %call481, %union.tree_node** %ll_mask, align 8, !tbaa !3
  %call483 = call fastcc i32 @all_ones_mask_p(%union.tree_node* %call481, i32 %conv208) #7
  %tobool484 = icmp eq i32 %call483, 0
  br i1 %tobool484, label %if.then485, label %if.end487

if.then485:                                       ; preds = %lor.end478
  %call486 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 88, %union.tree_node* %call209, %union.tree_node* %call480, %union.tree_node* %call481) #9
  br label %if.end487

if.end487:                                        ; preds = %lor.end478, %if.then485
  %result.0 = phi %union.tree_node* [ %call480, %lor.end478 ], [ %call486, %if.then485 ]
  %call488 = call fastcc %union.tree_node* @const_binop(i32 86, %union.tree_node* %l_const.2, %union.tree_node* %r_const.2) #7
  %call489 = call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %cond152, %union.tree_node* %truth_type, %union.tree_node* %result.0, %union.tree_node* %call488) #9
  br label %return

return:                                           ; preds = %lor.lhs.false376, %land.lhs.true380, %if.end286, %if.then268, %lor.lhs.false271, %lor.lhs.false274, %lor.lhs.false277, %lor.lhs.false280, %if.end180, %if.then169, %land.lhs.true171, %land.lhs.true174, %if.then155, %land.lhs.true157, %land.lhs.true160, %if.else, %lor.lhs.false143, %lor.lhs.false119, %if.end107, %if.end94, %lor.lhs.false100, %if.end28, %lor.lhs.false32, %entry, %lor.lhs.false, %if.end487, %if.else470, %if.then468, %if.end452, %if.end366, %if.then254, %if.then230, %if.then92
  %retval.0 = phi %union.tree_node* [ %call367, %if.end366 ], [ %call453, %if.end452 ], [ %call489, %if.end487 ], [ %call469, %if.then468 ], [ %call471, %if.else470 ], [ %call263, %if.then254 ], [ %call239, %if.then230 ], [ %call93, %if.then92 ], [ null, %lor.lhs.false ], [ null, %entry ], [ null, %lor.lhs.false32 ], [ null, %if.end28 ], [ null, %lor.lhs.false100 ], [ null, %if.end94 ], [ null, %if.end107 ], [ null, %lor.lhs.false119 ], [ null, %lor.lhs.false143 ], [ null, %if.else ], [ null, %land.lhs.true160 ], [ null, %land.lhs.true157 ], [ null, %if.then155 ], [ null, %land.lhs.true174 ], [ null, %land.lhs.true171 ], [ null, %if.then169 ], [ null, %if.end180 ], [ null, %lor.lhs.false280 ], [ null, %lor.lhs.false277 ], [ null, %lor.lhs.false274 ], [ null, %lor.lhs.false271 ], [ null, %if.then268 ], [ null, %if.end286 ], [ null, %land.lhs.true380 ], [ null, %lor.lhs.false376 ]
  ret %union.tree_node* %retval.0
}
