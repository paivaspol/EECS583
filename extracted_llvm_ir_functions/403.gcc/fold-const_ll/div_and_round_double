define i32 @div_and_round_double(i32 %code, i32 %uns, i64 %lnum_orig, i64 %hnum_orig, i64 %lden_orig, i64 %hden_orig, i64* nocapture %lquo, i64* nocapture %hquo, i64* nocapture %lrem, i64* nocapture %hrem) #0 {
entry:
  %num = alloca [5 x i64], align 16
  %den = alloca [4 x i64], align 16
  %quo = alloca [4 x i64], align 16
  %ltwice = alloca i64, align 8
  %htwice = alloca i64, align 8
  %0 = bitcast [5 x i64]* %num to i8*
  call void @llvm.lifetime.start(i64 40, i8* %0) #1
  %1 = or i64 %hden_orig, %lden_orig
  %2 = icmp eq i64 %1, 0
  %3 = select i1 %2, i64 1, i64 %lden_orig
  %overflow.0 = zext i1 %2 to i32
  %tobool = icmp eq i32 %uns, 0
  br i1 %tobool, label %if.then2, label %if.end16

if.then2:                                         ; preds = %entry
  %cmp3 = icmp slt i64 %hnum_orig, 0
  br i1 %cmp3, label %if.then4, label %if.end10

if.then4:                                         ; preds = %if.then2
  %cmp.i = icmp eq i64 %lnum_orig, 0
  br i1 %cmp.i, label %neg_double.exit, label %neg_double.exit.thread

neg_double.exit.thread:                           ; preds = %if.then4
  %sub2.i = sub i64 0, %lnum_orig
  %neg.i = xor i64 %hnum_orig, -1
  br label %if.end10

neg_double.exit:                                  ; preds = %if.then4
  %sub.i = sub nsw i64 0, %hnum_orig
  %and.i = and i64 %sub.i, %hnum_orig
  %tobool5 = icmp sgt i64 %and.i, -1
  br i1 %tobool5, label %if.end10, label %land.lhs.true6

land.lhs.true6:                                   ; preds = %neg_double.exit
  %and = and i64 %3, %hden_orig
  %cmp7 = icmp eq i64 %and, -1
  %.overflow.0 = select i1 %cmp7, i32 1, i32 %overflow.0
  br label %if.end10

if.end10:                                         ; preds = %neg_double.exit.thread, %land.lhs.true6, %neg_double.exit, %if.then2
  %4 = phi i64 [ 0, %neg_double.exit ], [ %lnum_orig, %if.then2 ], [ 0, %land.lhs.true6 ], [ %sub2.i, %neg_double.exit.thread ]
  %sub.i552 = phi i64 [ %sub.i, %neg_double.exit ], [ %hnum_orig, %if.then2 ], [ %sub.i, %land.lhs.true6 ], [ %neg.i, %neg_double.exit.thread ]
  %overflow.1 = phi i32 [ %overflow.0, %neg_double.exit ], [ %overflow.0, %if.then2 ], [ %.overflow.0, %land.lhs.true6 ], [ %overflow.0, %neg_double.exit.thread ]
  %quo_neg.0 = phi i32 [ -1, %neg_double.exit ], [ 0, %if.then2 ], [ -1, %land.lhs.true6 ], [ -1, %neg_double.exit.thread ]
  %cmp11 = icmp slt i64 %hden_orig, 0
  br i1 %cmp11, label %if.then12, label %if.end16

if.then12:                                        ; preds = %if.end10
  %neg13 = xor i32 %quo_neg.0, -1
  %cmp.i417 = icmp eq i64 %3, 0
  br i1 %cmp.i417, label %if.then.i421, label %if.else.i424

if.then.i421:                                     ; preds = %if.then12
  %sub.i418 = sub nsw i64 0, %hden_orig
  br label %if.end16

if.else.i424:                                     ; preds = %if.then12
  %sub2.i422 = sub i64 0, %3
  %neg.i423 = xor i64 %hden_orig, -1
  br label %if.end16

if.end16:                                         ; preds = %if.else.i424, %if.then.i421, %entry, %if.end10
  %5 = phi i64 [ %lnum_orig, %entry ], [ %4, %if.end10 ], [ %4, %if.then.i421 ], [ %4, %if.else.i424 ]
  %sub.i551 = phi i64 [ %hnum_orig, %entry ], [ %sub.i552, %if.end10 ], [ %sub.i552, %if.then.i421 ], [ %sub.i552, %if.else.i424 ]
  %6 = phi i64 [ %3, %entry ], [ %3, %if.end10 ], [ 0, %if.then.i421 ], [ %sub2.i422, %if.else.i424 ]
  %sub.i418549 = phi i64 [ %hden_orig, %entry ], [ %hden_orig, %if.end10 ], [ %sub.i418, %if.then.i421 ], [ %neg.i423, %if.else.i424 ]
  %overflow.2 = phi i32 [ %overflow.0, %entry ], [ %overflow.1, %if.end10 ], [ %overflow.1, %if.then.i421 ], [ %overflow.1, %if.else.i424 ]
  %quo_neg.1 = phi i32 [ 0, %entry ], [ %quo_neg.0, %if.end10 ], [ %neg13, %if.then.i421 ], [ %neg13, %if.else.i424 ]
  %cmp17 = icmp eq i64 %sub.i551, 0
  br i1 %cmp17, label %land.lhs.true18, label %if.end24

land.lhs.true18:                                  ; preds = %if.end16
  %cmp19 = icmp eq i64 %sub.i418549, 0
  br i1 %cmp19, label %if.then20, label %if.then23

if.then20:                                        ; preds = %land.lhs.true18
  store i64 0, i64* %hrem, align 8, !tbaa !0
  store i64 0, i64* %hquo, align 8, !tbaa !0
  %div = udiv i64 %5, %6
  store i64 %div, i64* %lquo, align 8, !tbaa !0
  br label %finish_up

if.then23:                                        ; preds = %land.lhs.true18
  store i64 0, i64* %lquo, align 8, !tbaa !0
  store i64 0, i64* %hquo, align 8, !tbaa !0
  store i64 0, i64* %hrem, align 8, !tbaa !0
  store i64 %5, i64* %lrem, align 8, !tbaa !0
  br label %finish_up

if.end24:                                         ; preds = %if.end16
  %arraydecay = getelementptr inbounds [4 x i64]* %quo, i64 0, i64 0
  %7 = bitcast [4 x i64]* %quo to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 32, i32 16, i1 false)
  %arraydecay25 = getelementptr inbounds [5 x i64]* %num, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 40, i32 16, i1 false)
  %arraydecay26 = getelementptr inbounds [4 x i64]* %den, i64 0, i64 0
  %8 = bitcast [4 x i64]* %den to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 32, i32 16, i1 false)
  %and.i445 = and i64 %5, 4294967295
  store i64 %and.i445, i64* %arraydecay25, align 16, !tbaa !0
  %shr.i = lshr i64 %5, 32
  %arrayidx1.i = getelementptr inbounds [5 x i64]* %num, i64 0, i64 1
  store i64 %shr.i, i64* %arrayidx1.i, align 8, !tbaa !0
  %and2.i = and i64 %sub.i551, 4294967295
  %arrayidx3.i = getelementptr inbounds [5 x i64]* %num, i64 0, i64 2
  store i64 %and2.i, i64* %arrayidx3.i, align 16, !tbaa !0
  %shr4.i = lshr i64 %sub.i551, 32
  %arrayidx5.i = getelementptr inbounds [5 x i64]* %num, i64 0, i64 3
  store i64 %shr4.i, i64* %arrayidx5.i, align 8, !tbaa !0
  %and.i504 = and i64 %6, 4294967295
  store i64 %and.i504, i64* %arraydecay26, align 16, !tbaa !0
  %shr.i505 = lshr i64 %6, 32
  %arrayidx1.i506 = getelementptr inbounds [4 x i64]* %den, i64 0, i64 1
  store i64 %shr.i505, i64* %arrayidx1.i506, align 8, !tbaa !0
  %and2.i507 = and i64 %sub.i418549, 4294967295
  %arrayidx3.i508 = getelementptr inbounds [4 x i64]* %den, i64 0, i64 2
  store i64 %and2.i507, i64* %arrayidx3.i508, align 16, !tbaa !0
  %shr4.i509 = lshr i64 %sub.i418549, 32
  %arrayidx5.i510 = getelementptr inbounds [4 x i64]* %den, i64 0, i64 3
  store i64 %shr4.i509, i64* %arrayidx5.i510, align 8, !tbaa !0
  %cmp29 = icmp eq i64 %sub.i418549, 0
  %cmp31 = icmp ult i64 %6, 4294967296
  %or.cond555 = and i1 %cmp29, %cmp31
  br i1 %or.cond555, label %for.body, label %for.cond37

for.body:                                         ; preds = %if.end24, %for.body.for.body_crit_edge
  %9 = phi i64 [ %.pre602, %for.body.for.body_crit_edge ], [ %shr4.i, %if.end24 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body.for.body_crit_edge ], [ 3, %if.end24 ]
  %carry.0558 = phi i64 [ %phitmp606, %for.body.for.body_crit_edge ], [ 0, %if.end24 ]
  %add = add i64 %9, %carry.0558
  %div34 = udiv i64 %add, %6
  %arrayidx36 = getelementptr inbounds [4 x i64]* %quo, i64 0, i64 %indvars.iv
  store i64 %div34, i64* %arrayidx36, align 8, !tbaa !0
  %indvars.iv.next = add i64 %indvars.iv, -1
  %10 = trunc i64 %indvars.iv to i32
  %cmp33 = icmp sgt i32 %10, 0
  br i1 %cmp33, label %for.body.for.body_crit_edge, label %if.end186

for.body.for.body_crit_edge:                      ; preds = %for.body
  %rem = urem i64 %add, %6
  %arrayidx.phi.trans.insert = getelementptr inbounds [5 x i64]* %num, i64 0, i64 %indvars.iv.next
  %.pre602 = load i64* %arrayidx.phi.trans.insert, align 8, !tbaa !0
  %phitmp606 = shl i64 %rem, 32
  br label %for.body

for.cond37:                                       ; preds = %if.end24, %for.cond37.for.cond37_crit_edge
  %11 = phi i64 [ %.pre603, %for.cond37.for.cond37_crit_edge ], [ %shr4.i509, %if.end24 ]
  %indvars.iv598 = phi i64 [ %phitmp, %for.cond37.for.cond37_crit_edge ], [ 2, %if.end24 ]
  %i.1 = phi i32 [ %dec44, %for.cond37.for.cond37_crit_edge ], [ 3, %if.end24 ]
  %cmp40 = icmp eq i64 %11, 0
  br i1 %cmp40, label %for.cond37.for.cond37_crit_edge, label %if.then41

for.cond37.for.cond37_crit_edge:                  ; preds = %for.cond37
  %dec44 = add nsw i32 %i.1, -1
  %arrayidx39.phi.trans.insert = getelementptr inbounds [4 x i64]* %den, i64 0, i64 %indvars.iv598
  %.pre603 = load i64* %arrayidx39.phi.trans.insert, align 8, !tbaa !0
  %phitmp = add i64 %indvars.iv598, -1
  br label %for.cond37

if.then41:                                        ; preds = %for.cond37
  %add48 = add nsw i64 %11, 1
  %div49 = udiv i64 4294967296, %add48
  %cmp50 = icmp ugt i64 %div49, 1
  br i1 %cmp50, label %for.body54, label %if.end84

for.body54:                                       ; preds = %if.then41, %for.body54.for.body54_crit_edge
  %12 = phi i64 [ %.pre604, %for.body54.for.body54_crit_edge ], [ %and.i445, %if.then41 ]
  %indvars.iv594 = phi i64 [ %indvars.iv.next595, %for.body54.for.body54_crit_edge ], [ 0, %if.then41 ]
  %carry.1575 = phi i64 [ %shr, %for.body54.for.body54_crit_edge ], [ 0, %if.then41 ]
  %arrayidx56 = getelementptr inbounds [5 x i64]* %num, i64 0, i64 %indvars.iv594
  %mul57 = mul i64 %12, %div49
  %add58 = add i64 %mul57, %carry.1575
  %and59 = and i64 %add58, 4294967295
  store i64 %and59, i64* %arrayidx56, align 8, !tbaa !0
  %shr = lshr i64 %add58, 32
  %indvars.iv.next595 = add i64 %indvars.iv594, 1
  %lftr.wideiv596 = trunc i64 %indvars.iv.next595 to i32
  %exitcond597 = icmp eq i32 %lftr.wideiv596, 4
  br i1 %exitcond597, label %for.end63, label %for.body54.for.body54_crit_edge

for.body54.for.body54_crit_edge:                  ; preds = %for.body54
  %arrayidx56.phi.trans.insert = getelementptr inbounds [5 x i64]* %num, i64 0, i64 %indvars.iv.next595
  %.pre604 = load i64* %arrayidx56.phi.trans.insert, align 8, !tbaa !0
  br label %for.body54

for.end63:                                        ; preds = %for.body54
  %arrayidx64 = getelementptr inbounds [5 x i64]* %num, i64 0, i64 4
  store i64 %shr, i64* %arrayidx64, align 16, !tbaa !0
  br label %for.body67

for.body67:                                       ; preds = %for.body67.for.body67_crit_edge, %for.end63
  %13 = phi i64 [ %and.i504, %for.end63 ], [ %.pre605, %for.body67.for.body67_crit_edge ]
  %indvars.iv590 = phi i64 [ 0, %for.end63 ], [ %indvars.iv.next591, %for.body67.for.body67_crit_edge ]
  %den_hi_sig.0573 = phi i32 [ %i.1, %for.end63 ], [ %den_hi_sig.0.i.3, %for.body67.for.body67_crit_edge ]
  %carry.2572 = phi i64 [ 0, %for.end63 ], [ %shr75, %for.body67.for.body67_crit_edge ]
  %arrayidx69 = getelementptr inbounds [4 x i64]* %den, i64 0, i64 %indvars.iv590
  %mul70 = mul i64 %13, %div49
  %add71 = add i64 %mul70, %carry.2572
  %and72 = and i64 %add71, 4294967295
  store i64 %and72, i64* %arrayidx69, align 8, !tbaa !0
  %cmp78 = icmp eq i64 %and72, 0
  %14 = trunc i64 %indvars.iv590 to i32
  %den_hi_sig.0.i.3 = select i1 %cmp78, i32 %den_hi_sig.0573, i32 %14
  %indvars.iv.next591 = add i64 %indvars.iv590, 1
  %lftr.wideiv592 = trunc i64 %indvars.iv.next591 to i32
  %exitcond593 = icmp eq i32 %lftr.wideiv592, 4
  br i1 %exitcond593, label %if.end84, label %for.body67.for.body67_crit_edge

for.body67.for.body67_crit_edge:                  ; preds = %for.body67
  %shr75 = lshr i64 %add71, 32
  %arrayidx69.phi.trans.insert = getelementptr inbounds [4 x i64]* %den, i64 0, i64 %indvars.iv.next591
  %.pre605 = load i64* %arrayidx69.phi.trans.insert, align 8, !tbaa !0
  br label %for.body67

if.end84:                                         ; preds = %for.body67, %if.then41
  %den_hi_sig.2 = phi i32 [ %i.1, %if.then41 ], [ %den_hi_sig.0.i.3, %for.body67 ]
  %sub = sub nsw i32 4, %den_hi_sig.2
  %cmp87568 = icmp sgt i32 %sub, 0
  br i1 %cmp87568, label %for.body88.lr.ph, label %if.end186

for.body88.lr.ph:                                 ; preds = %if.end84
  %idxprom100 = sext i32 %den_hi_sig.2 to i64
  %arrayidx101 = getelementptr inbounds [4 x i64]* %den, i64 0, i64 %idxprom100
  %15 = load i64* %arrayidx101, align 8, !tbaa !0
  %sub115 = add nsw i32 %den_hi_sig.2, -1
  %idxprom116 = sext i32 %sub115 to i64
  %arrayidx117 = getelementptr inbounds [4 x i64]* %den, i64 0, i64 %idxprom116
  %cmp129559 = icmp slt i32 %den_hi_sig.2, 0
  %16 = add i32 %den_hi_sig.2, 1
  br label %for.body88

for.body88:                                       ; preds = %for.body88.lr.ph, %if.end180
  %i.4570.in = phi i32 [ %sub, %for.body88.lr.ph ], [ %i.4570, %if.end180 ]
  %i.4570 = add nsw i32 %i.4570.in, -1
  %add89 = add nsw i32 %i.4570, %den_hi_sig.2
  %add90 = add i32 %i.4570.in, %den_hi_sig.2
  %idxprom91 = sext i32 %add90 to i64
  %arrayidx92 = getelementptr inbounds [5 x i64]* %num, i64 0, i64 %idxprom91
  %17 = load i64* %arrayidx92, align 8, !tbaa !0
  %mul93 = shl i64 %17, 32
  %idxprom95 = sext i32 %add89 to i64
  %arrayidx96 = getelementptr inbounds [5 x i64]* %num, i64 0, i64 %idxprom95
  %18 = load i64* %arrayidx96, align 8, !tbaa !0
  %add97 = add i64 %mul93, %18
  %cmp102 = icmp eq i64 %17, %15
  br i1 %cmp102, label %if.end108, label %if.then103

if.then103:                                       ; preds = %for.body88
  %div106 = udiv i64 %add97, %15
  br label %if.end108

if.end108:                                        ; preds = %for.body88, %if.then103
  %quo_est.0 = phi i64 [ %div106, %if.then103 ], [ 4294967295, %for.body88 ]
  %mul111 = mul i64 %15, %quo_est.0
  %sub112 = sub i64 %add97, %mul111
  %cmp113 = icmp ult i64 %sub112, 4294967296
  br i1 %cmp113, label %land.lhs.true114, label %if.end127

land.lhs.true114:                                 ; preds = %if.end108
  %19 = load i64* %arrayidx117, align 8, !tbaa !0
  %mul118 = mul i64 %19, %quo_est.0
  %mul119 = shl i64 %sub112, 32
  %sub120 = add nsw i32 %add90, -2
  %idxprom121 = sext i32 %sub120 to i64
  %arrayidx122 = getelementptr inbounds [5 x i64]* %num, i64 0, i64 %idxprom121
  %20 = load i64* %arrayidx122, align 8, !tbaa !0
  %add123 = add i64 %20, %mul119
  %cmp124 = icmp ugt i64 %mul118, %add123
  %dec126 = sext i1 %cmp124 to i64
  %dec126.quo_est.0 = add i64 %dec126, %quo_est.0
  br label %if.end127

if.end127:                                        ; preds = %land.lhs.true114, %if.end108
  %quo_est.1 = phi i64 [ %quo_est.0, %if.end108 ], [ %dec126.quo_est.0, %land.lhs.true114 ]
  br i1 %cmp129559, label %if.end180, label %for.body130.lr.ph

for.body130.lr.ph:                                ; preds = %if.end127
  %21 = sext i32 %i.4570 to i64
  br label %for.body130

for.body130:                                      ; preds = %for.body130, %for.body130.lr.ph
  %indvars.iv576 = phi i64 [ 0, %for.body130.lr.ph ], [ %indvars.iv.next577, %for.body130 ]
  %carry.3561 = phi i64 [ 0, %for.body130.lr.ph ], [ %add148, %for.body130 ]
  %arrayidx132 = getelementptr inbounds [4 x i64]* %den, i64 0, i64 %indvars.iv576
  %22 = load i64* %arrayidx132, align 8, !tbaa !0
  %mul133 = mul i64 %22, %quo_est.1
  %add134 = add i64 %mul133, %carry.3561
  %shr135 = lshr i64 %add134, 32
  %23 = add nsw i64 %indvars.iv576, %21
  %arrayidx138 = getelementptr inbounds [5 x i64]* %num, i64 0, i64 %23
  %24 = load i64* %arrayidx138, align 8, !tbaa !0
  %and139 = and i64 %add134, 4294967295
  %sub140 = sub i64 %24, %and139
  %and141 = and i64 %sub140, 4294967295
  store i64 %and141, i64* %arrayidx138, align 8, !tbaa !0
  %cmp146 = icmp ugt i64 %sub140, 4294967295
  %conv147 = zext i1 %cmp146 to i64
  %add148 = add i64 %conv147, %shr135
  %indvars.iv.next577 = add i64 %indvars.iv576, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next577 to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %16
  br i1 %exitcond, label %for.end151, label %for.body130

for.end151:                                       ; preds = %for.body130
  %.pre = load i64* %arrayidx92, align 8, !tbaa !0
  %cmp154 = icmp ult i64 %.pre, %add148
  br i1 %cmp154, label %if.then156, label %if.end180

if.then156:                                       ; preds = %for.end151
  %dec157 = add i64 %quo_est.1, -1
  br i1 %cmp129559, label %for.end176, label %for.body161.lr.ph

for.body161.lr.ph:                                ; preds = %if.then156
  %25 = sext i32 %i.4570 to i64
  br label %for.body161

for.body161:                                      ; preds = %for.body161, %for.body161.lr.ph
  %indvars.iv579 = phi i64 [ 0, %for.body161.lr.ph ], [ %indvars.iv.next580, %for.body161 ]
  %carry.4564 = phi i64 [ 0, %for.body161.lr.ph ], [ %shr169, %for.body161 ]
  %26 = add nsw i64 %indvars.iv579, %25
  %arrayidx164 = getelementptr inbounds [5 x i64]* %num, i64 0, i64 %26
  %27 = load i64* %arrayidx164, align 8, !tbaa !0
  %arrayidx166 = getelementptr inbounds [4 x i64]* %den, i64 0, i64 %indvars.iv579
  %28 = load i64* %arrayidx166, align 8, !tbaa !0
  %add167 = add i64 %27, %carry.4564
  %add168 = add i64 %add167, %28
  %shr169 = lshr i64 %add168, 32
  %and170 = and i64 %add168, 4294967295
  store i64 %and170, i64* %arrayidx164, align 8, !tbaa !0
  %indvars.iv.next580 = add i64 %indvars.iv579, 1
  %lftr.wideiv582 = trunc i64 %indvars.iv.next580 to i32
  %exitcond583 = icmp eq i32 %lftr.wideiv582, %16
  br i1 %exitcond583, label %for.cond158.for.end176_crit_edge, label %for.body161

for.cond158.for.end176_crit_edge:                 ; preds = %for.body161
  %.pre600 = load i64* %arrayidx92, align 8, !tbaa !0
  br label %for.end176

for.end176:                                       ; preds = %for.cond158.for.end176_crit_edge, %if.then156
  %29 = phi i64 [ %.pre600, %for.cond158.for.end176_crit_edge ], [ %.pre, %if.then156 ]
  %carry.4.lcssa = phi i64 [ %shr169, %for.cond158.for.end176_crit_edge ], [ 0, %if.then156 ]
  %add179 = add i64 %29, %carry.4.lcssa
  store i64 %add179, i64* %arrayidx92, align 8, !tbaa !0
  br label %if.end180

if.end180:                                        ; preds = %if.end127, %for.end176, %for.end151
  %quo_est.2 = phi i64 [ %dec157, %for.end176 ], [ %quo_est.1, %for.end151 ], [ %quo_est.1, %if.end127 ]
  %idxprom181 = sext i32 %i.4570 to i64
  %arrayidx182 = getelementptr inbounds [4 x i64]* %quo, i64 0, i64 %idxprom181
  store i64 %quo_est.2, i64* %arrayidx182, align 8, !tbaa !0
  %cmp87 = icmp sgt i32 %i.4570, 0
  br i1 %cmp87, label %for.body88, label %if.end186

if.end186:                                        ; preds = %if.end84, %if.end180, %for.body
  %30 = load i64* %arraydecay, align 16, !tbaa !0
  %arrayidx1.i521 = getelementptr inbounds [4 x i64]* %quo, i64 0, i64 1
  %31 = load i64* %arrayidx1.i521, align 8, !tbaa !0
  %mul.i = shl i64 %31, 32
  %add.i = add i64 %mul.i, %30
  store i64 %add.i, i64* %lquo, align 8, !tbaa !0
  %arrayidx2.i = getelementptr inbounds [4 x i64]* %quo, i64 0, i64 2
  %32 = load i64* %arrayidx2.i, align 16, !tbaa !0
  %arrayidx3.i522 = getelementptr inbounds [4 x i64]* %quo, i64 0, i64 3
  %33 = load i64* %arrayidx3.i522, align 8, !tbaa !0
  %mul4.i = shl i64 %33, 32
  %add5.i = add i64 %mul4.i, %32
  store i64 %add5.i, i64* %hquo, align 8, !tbaa !0
  br label %finish_up

finish_up:                                        ; preds = %if.end186, %if.then23, %if.then20
  %tobool188 = icmp ne i32 %quo_neg.1, 0
  br i1 %tobool188, label %if.then189, label %finish_up.if.end191_crit_edge

finish_up.if.end191_crit_edge:                    ; preds = %finish_up
  %.pre601 = load i64* %hquo, align 8, !tbaa !0
  br label %if.end191

if.then189:                                       ; preds = %finish_up
  %34 = load i64* %lquo, align 8, !tbaa !0
  %35 = load i64* %hquo, align 8, !tbaa !0
  %cmp.i511 = icmp eq i64 %34, 0
  br i1 %cmp.i511, label %if.then.i515, label %if.else.i518

if.then.i515:                                     ; preds = %if.then189
  store i64 0, i64* %lquo, align 8, !tbaa !0
  %sub.i512 = sub nsw i64 0, %35
  store i64 %sub.i512, i64* %hquo, align 8, !tbaa !0
  br label %if.end191

if.else.i518:                                     ; preds = %if.then189
  %sub2.i516 = sub i64 0, %34
  store i64 %sub2.i516, i64* %lquo, align 8, !tbaa !0
  %neg.i517 = xor i64 %35, -1
  store i64 %neg.i517, i64* %hquo, align 8, !tbaa !0
  br label %if.end191

if.end191:                                        ; preds = %finish_up.if.end191_crit_edge, %if.else.i518, %if.then.i515
  %36 = phi i64 [ %.pre601, %finish_up.if.end191_crit_edge ], [ %neg.i517, %if.else.i518 ], [ %sub.i512, %if.then.i515 ]
  %37 = load i64* %lquo, align 8, !tbaa !0
  %call192 = call i32 @mul_double(i64 %37, i64 %36, i64 %lden_orig, i64 %hden_orig, i64* %lrem, i64* %hrem) #7
  %38 = load i64* %lrem, align 8, !tbaa !0
  %39 = load i64* %hrem, align 8, !tbaa !0
  %cmp.i494 = icmp eq i64 %38, 0
  br i1 %cmp.i494, label %if.then.i498, label %if.else.i501

if.then.i498:                                     ; preds = %if.end191
  store i64 0, i64* %lrem, align 8, !tbaa !0
  %sub.i495 = sub nsw i64 0, %39
  br label %neg_double.exit503

if.else.i501:                                     ; preds = %if.end191
  %sub2.i499 = sub i64 0, %38
  store i64 %sub2.i499, i64* %lrem, align 8, !tbaa !0
  %neg.i500 = xor i64 %39, -1
  br label %neg_double.exit503

neg_double.exit503:                               ; preds = %if.then.i498, %if.else.i501
  %storemerge = phi i64 [ %neg.i500, %if.else.i501 ], [ %sub.i495, %if.then.i498 ]
  store i64 %storemerge, i64* %hrem, align 8, !tbaa !0
  %40 = load i64* %lrem, align 8, !tbaa !0
  %uadd.i484 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %lnum_orig, i64 %40) #1
  %41 = extractvalue { i64, i1 } %uadd.i484, 0
  %add1.i485 = add nsw i64 %storemerge, %hnum_orig
  %cmp.i486 = extractvalue { i64, i1 } %uadd.i484, 1
  %conv2.i487 = zext i1 %cmp.i486 to i64
  %add3.i488 = add nsw i64 %add1.i485, %conv2.i487
  store i64 %41, i64* %lrem, align 8, !tbaa !0
  store i64 %add3.i488, i64* %hrem, align 8, !tbaa !0
  switch i32 %code, label %sw.default [
    i32 62, label %cleanup
    i32 66, label %cleanup
    i32 71, label %cleanup
    i32 64, label %sw.bb195
    i32 68, label %sw.bb195
    i32 63, label %sw.bb206
    i32 67, label %sw.bb206
    i32 65, label %sw.bb218
    i32 69, label %sw.bb218
  ]

sw.bb195:                                         ; preds = %neg_double.exit503, %neg_double.exit503
  br i1 %tobool188, label %land.lhs.true197, label %cleanup

land.lhs.true197:                                 ; preds = %sw.bb195
  %42 = load i64* %lrem, align 8, !tbaa !0
  %43 = or i64 %42, %add3.i488
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %cleanup, label %if.then202

if.then202:                                       ; preds = %land.lhs.true197
  %45 = load i64* %lquo, align 8, !tbaa !0
  %46 = load i64* %hquo, align 8, !tbaa !0
  %uadd.i474 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %45, i64 -1) #1
  %47 = extractvalue { i64, i1 } %uadd.i474, 0
  %add1.i475 = add nsw i64 %46, -1
  %cmp.i476 = extractvalue { i64, i1 } %uadd.i474, 1
  %conv2.i477 = zext i1 %cmp.i476 to i64
  %add3.i478 = add nsw i64 %add1.i475, %conv2.i477
  store i64 %47, i64* %lquo, align 8, !tbaa !0
  store i64 %add3.i478, i64* %hquo, align 8, !tbaa !0
  br label %sw.epilog

sw.bb206:                                         ; preds = %neg_double.exit503, %neg_double.exit503
  br i1 %tobool188, label %cleanup, label %land.lhs.true208

land.lhs.true208:                                 ; preds = %sw.bb206
  %48 = load i64* %lrem, align 8, !tbaa !0
  %49 = or i64 %48, %add3.i488
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %cleanup, label %if.then214

if.then214:                                       ; preds = %land.lhs.true208
  %51 = load i64* %lquo, align 8, !tbaa !0
  %52 = load i64* %hquo, align 8, !tbaa !0
  %uadd.i466 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %51, i64 1) #1
  %53 = extractvalue { i64, i1 } %uadd.i466, 0
  %cmp.i467 = extractvalue { i64, i1 } %uadd.i466, 1
  %conv2.i468 = zext i1 %cmp.i467 to i64
  %add3.i469 = add nsw i64 %conv2.i468, %52
  store i64 %53, i64* %lquo, align 8, !tbaa !0
  store i64 %add3.i469, i64* %hquo, align 8, !tbaa !0
  br label %sw.epilog

sw.bb218:                                         ; preds = %neg_double.exit503, %neg_double.exit503
  %54 = load i64* %lrem, align 8, !tbaa !0
  %cmp225 = icmp slt i64 %add3.i488, 0
  br i1 %cmp225, label %if.then227, label %if.end229

if.then227:                                       ; preds = %sw.bb218
  %cmp.i456 = icmp eq i64 %54, 0
  br i1 %cmp.i456, label %if.then.i460, label %if.else.i463

if.then.i460:                                     ; preds = %if.then227
  %sub.i457 = sub nsw i64 0, %add3.i488
  br label %if.end229

if.else.i463:                                     ; preds = %if.then227
  %sub2.i461 = sub i64 0, %54
  %neg.i462 = xor i64 %add3.i488, -1
  br label %if.end229

if.end229:                                        ; preds = %if.else.i463, %if.then.i460, %sw.bb218
  %55 = phi i64 [ %54, %sw.bb218 ], [ 0, %if.then.i460 ], [ %sub2.i461, %if.else.i463 ]
  %sub.i457547 = phi i64 [ %add3.i488, %sw.bb218 ], [ %sub.i457, %if.then.i460 ], [ %neg.i462, %if.else.i463 ]
  %cmp230 = icmp slt i64 %sub.i418549, 0
  br i1 %cmp230, label %if.then232, label %if.end234

if.then232:                                       ; preds = %if.end229
  %cmp.i446 = icmp eq i64 %6, 0
  br i1 %cmp.i446, label %if.then.i450, label %if.else.i453

if.then.i450:                                     ; preds = %if.then232
  %sub.i447 = sub nsw i64 0, %sub.i418549
  br label %if.end234

if.else.i453:                                     ; preds = %if.then232
  %sub2.i451 = sub i64 0, %6
  %neg.i452 = xor i64 %sub.i418549, -1
  br label %if.end234

if.end234:                                        ; preds = %if.else.i453, %if.then.i450, %if.end229
  %56 = phi i64 [ %6, %if.end229 ], [ 0, %if.then.i450 ], [ %sub2.i451, %if.else.i453 ]
  %sub.i447545 = phi i64 [ %sub.i418549, %if.end229 ], [ %sub.i447, %if.then.i450 ], [ %neg.i452, %if.else.i453 ]
  %call235 = call i32 @mul_double(i64 2, i64 0, i64 %55, i64 %sub.i457547, i64* %ltwice, i64* %htwice) #7
  %57 = load i64* %htwice, align 8, !tbaa !0
  %cmp236 = icmp ult i64 %sub.i447545, %57
  br i1 %cmp236, label %if.then244, label %lor.lhs.false238

lor.lhs.false238:                                 ; preds = %if.end234
  %cmp239 = icmp eq i64 %sub.i447545, %57
  br i1 %cmp239, label %land.lhs.true241, label %cleanup

land.lhs.true241:                                 ; preds = %lor.lhs.false238
  %58 = load i64* %ltwice, align 8, !tbaa !0
  %cmp242 = icmp ult i64 %56, %58
  br i1 %cmp242, label %if.then244, label %cleanup

if.then244:                                       ; preds = %land.lhs.true241, %if.end234
  %59 = load i64* %hquo, align 8, !tbaa !0
  %cmp245 = icmp slt i64 %59, 0
  %60 = load i64* %lquo, align 8, !tbaa !0
  br i1 %cmp245, label %if.then247, label %if.else249

if.then247:                                       ; preds = %if.then244
  %uadd.i435 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %60, i64 -1) #1
  %61 = extractvalue { i64, i1 } %uadd.i435, 0
  %add1.i436 = add nsw i64 %59, -1
  %cmp.i437 = extractvalue { i64, i1 } %uadd.i435, 1
  %conv2.i438 = zext i1 %cmp.i437 to i64
  %add3.i439 = add nsw i64 %add1.i436, %conv2.i438
  store i64 %61, i64* %lquo, align 8, !tbaa !0
  store i64 %add3.i439, i64* %hquo, align 8, !tbaa !0
  br label %sw.epilog

if.else249:                                       ; preds = %if.then244
  %uadd.i427 = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %60, i64 1) #1
  %62 = extractvalue { i64, i1 } %uadd.i427, 0
  %cmp.i428 = extractvalue { i64, i1 } %uadd.i427, 1
  %conv2.i429 = zext i1 %cmp.i428 to i64
  %add3.i430 = add nsw i64 %conv2.i429, %59
  store i64 %62, i64* %lquo, align 8, !tbaa !0
  store i64 %add3.i430, i64* %hquo, align 8, !tbaa !0
  br label %sw.epilog

sw.default:                                       ; preds = %neg_double.exit503
  call void @fancy_abort(i8* getelementptr inbounds ([54 x i8]* @.str, i64 0, i64 0), i32 823, i8* getelementptr inbounds ([21 x i8]* @__FUNCTION__.div_and_round_double, i64 0, i64 0)) #8
  unreachable

sw.epilog:                                        ; preds = %if.else249, %if.then247, %if.then214, %if.then202
  %63 = phi i64 [ %add3.i430, %if.else249 ], [ %add3.i439, %if.then247 ], [ %add3.i469, %if.then214 ], [ %add3.i478, %if.then202 ]
  %64 = load i64* %lquo, align 8, !tbaa !0
  %call254 = call i32 @mul_double(i64 %64, i64 %63, i64 %lden_orig, i64 %hden_orig, i64* %lrem, i64* %hrem) #7
  %65 = load i64* %lrem, align 8, !tbaa !0
  %66 = load i64* %hrem, align 8, !tbaa !0
  %cmp.i407 = icmp eq i64 %65, 0
  br i1 %cmp.i407, label %if.then.i411, label %if.else.i414

if.then.i411:                                     ; preds = %sw.epilog
  store i64 0, i64* %lrem, align 8, !tbaa !0
  %sub.i408 = sub nsw i64 0, %66
  br label %neg_double.exit416

if.else.i414:                                     ; preds = %sw.epilog
  %sub2.i412 = sub i64 0, %65
  store i64 %sub2.i412, i64* %lrem, align 8, !tbaa !0
  %neg.i413 = xor i64 %66, -1
  br label %neg_double.exit416

neg_double.exit416:                               ; preds = %if.then.i411, %if.else.i414
  %storemerge556 = phi i64 [ %neg.i413, %if.else.i414 ], [ %sub.i408, %if.then.i411 ]
  store i64 %storemerge556, i64* %hrem, align 8, !tbaa !0
  %67 = load i64* %lrem, align 8, !tbaa !0
  %uadd.i = call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %lnum_orig, i64 %67) #1
  %68 = extractvalue { i64, i1 } %uadd.i, 0
  %add1.i = add nsw i64 %storemerge556, %hnum_orig
  %cmp.i403 = extractvalue { i64, i1 } %uadd.i, 1
  %conv2.i = zext i1 %cmp.i403 to i64
  %add3.i = add nsw i64 %add1.i, %conv2.i
  store i64 %68, i64* %lrem, align 8, !tbaa !0
  store i64 %add3.i, i64* %hrem, align 8, !tbaa !0
  br label %cleanup

cleanup:                                          ; preds = %land.lhs.true208, %land.lhs.true197, %lor.lhs.false238, %land.lhs.true241, %sw.bb206, %sw.bb195, %neg_double.exit503, %neg_double.exit503, %neg_double.exit503, %neg_double.exit416
  call void @llvm.lifetime.end(i64 40, i8* %0) #1
  ret i32 %overflow.2
}
