define internal fastcc i32 @all_ones_mask_p(%union.tree_node* %mask, i32 %size) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %mask, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !3
  %type2 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %precision3 = getelementptr inbounds %struct.tree_type* %type2, i64 0, i32 6
  %1 = bitcast [4 x i8]* %precision3 to i32*
  %bf.load = load i32* %1, align 4
  %bf.clear = and i32 %bf.load, 511
  %call = tail call %union.tree_node* @build_int_2_wide(i64 -1, i64 -1) #9
  %call4 = tail call %union.tree_node* @signed_type(%union.tree_node* %0) #9
  %type6 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  store %union.tree_node* %call4, %union.tree_node** %type6, align 8, !tbaa !3
  %call7 = tail call i32 @force_fit_type(%union.tree_node* %call, i32 0) #7
  %sub = sub i32 %bf.clear, %size
  %conv = zext i32 %sub to i64
  %2 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i = tail call %union.tree_node* @size_int_type_wide(i64 %conv, %union.tree_node* %2) #9
  %call9 = tail call fastcc %union.tree_node* @const_binop(i32 82, %union.tree_node* %call, %union.tree_node* %call.i) #7
  %3 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 8, !tbaa !3
  %call.i21 = tail call %union.tree_node* @size_int_type_wide(i64 %conv, %union.tree_node* %3) #9
  %call13 = tail call fastcc %union.tree_node* @const_binop(i32 83, %union.tree_node* %call9, %union.tree_node* %call.i21) #7
  %call14 = tail call i32 @tree_int_cst_equal(%union.tree_node* %mask, %union.tree_node* %call13) #9
  ret i32 %call14
}
