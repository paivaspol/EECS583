define %union.tree_node* @size_diffop(%union.tree_node* %arg0, %union.tree_node* %arg1) #0 {
entry:
  %type1 = getelementptr inbounds %union.tree_node* %arg0, i64 0, i32 0, i32 0, i32 1
  %0 = load %union.tree_node** %type1, align 8, !tbaa !3
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2
  %1 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %1, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 6
  br i1 %cmp, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %type3 = bitcast %union.tree_node* %0 to %struct.tree_type*
  %no_force_blk_flag = getelementptr inbounds %struct.tree_type* %type3, i64 0, i32 6
  %2 = bitcast [4 x i8]* %no_force_blk_flag to i32*
  %bf.load4 = load i32* %2, align 4
  %bf.clear5 = and i32 %bf.load4, 131072
  %tobool = icmp eq i32 %bf.clear5, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %type8 = getelementptr inbounds %union.tree_node* %arg1, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type8, align 8, !tbaa !3
  %cmp9 = icmp eq %union.tree_node* %0, %3
  br i1 %cmp9, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([54 x i8]* @.str, i64 0, i64 0), i32 2051, i8* getelementptr inbounds ([12 x i8]* @__FUNCTION__.size_diffop, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %lor.lhs.false6
  %bf.clear13 = and i32 %bf.load, 8192
  %tobool14 = icmp eq i32 %bf.clear13, 0
  br i1 %tobool14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end
  %call = tail call %union.tree_node* @size_binop(i32 60, %union.tree_node* %arg0, %union.tree_node* %arg1) #7
  br label %return

if.end16:                                         ; preds = %if.end
  %4 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 3), align 8, !tbaa !3
  %cmp17 = icmp eq %union.tree_node* %0, %4
  %5 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 5), align 8, !tbaa !3
  %cmp19 = icmp eq %union.tree_node* %0, %5
  %or.cond = or i1 %cmp17, %cmp19
  %.val = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 4), align 8
  %.val73 = load %union.tree_node** getelementptr inbounds ([6 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8
  %cond = select i1 %or.cond, %union.tree_node* %.val, %union.tree_node* %.val73
  %code21 = getelementptr inbounds %union.tree_node* %arg0, i64 0, i32 0, i32 0, i32 2
  %6 = bitcast [4 x i8]* %code21 to i32*
  %bf.load22 = load i32* %6, align 8
  %bf.clear23 = and i32 %bf.load22, 255
  %cmp24 = icmp eq i32 %bf.clear23, 25
  br i1 %cmp24, label %lor.lhs.false25, label %if.then31

lor.lhs.false25:                                  ; preds = %if.end16
  %code27 = getelementptr inbounds %union.tree_node* %arg1, i64 0, i32 0, i32 0, i32 2
  %7 = bitcast [4 x i8]* %code27 to i32*
  %bf.load28 = load i32* %7, align 8
  %bf.clear29 = and i32 %bf.load28, 255
  %cmp30 = icmp eq i32 %bf.clear29, 25
  br i1 %cmp30, label %if.end35, label %if.then31

if.then31:                                        ; preds = %lor.lhs.false25, %if.end16
  %call32 = tail call %union.tree_node* @convert(%union.tree_node* %cond, %union.tree_node* %arg0) #9
  %call33 = tail call %union.tree_node* @convert(%union.tree_node* %cond, %union.tree_node* %arg1) #9
  %call34 = tail call %union.tree_node* @size_binop(i32 60, %union.tree_node* %call32, %union.tree_node* %call33) #7
  br label %return

if.end35:                                         ; preds = %lor.lhs.false25
  %call36 = tail call i32 @tree_int_cst_equal(%union.tree_node* %arg0, %union.tree_node* %arg1) #9
  %tobool37 = icmp eq i32 %call36, 0
  br i1 %tobool37, label %if.else, label %if.then38

if.then38:                                        ; preds = %if.end35
  %8 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !3
  %call39 = tail call %union.tree_node* @convert(%union.tree_node* %cond, %union.tree_node* %8) #9
  br label %return

if.else:                                          ; preds = %if.end35
  %call40 = tail call i32 @tree_int_cst_lt(%union.tree_node* %arg1, %union.tree_node* %arg0) #9
  %tobool41 = icmp eq i32 %call40, 0
  br i1 %tobool41, label %if.else45, label %if.then42

if.then42:                                        ; preds = %if.else
  %call43 = tail call %union.tree_node* @size_binop(i32 60, %union.tree_node* %arg0, %union.tree_node* %arg1) #7
  %call44 = tail call %union.tree_node* @convert(%union.tree_node* %cond, %union.tree_node* %call43) #9
  br label %return

if.else45:                                        ; preds = %if.else
  %9 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 11), align 8, !tbaa !3
  %call46 = tail call %union.tree_node* @convert(%union.tree_node* %cond, %union.tree_node* %9) #9
  %call47 = tail call %union.tree_node* @size_binop(i32 60, %union.tree_node* %arg1, %union.tree_node* %arg0) #7
  %call48 = tail call %union.tree_node* @convert(%union.tree_node* %cond, %union.tree_node* %call47) #9
  %call49 = tail call %union.tree_node* @size_binop(i32 60, %union.tree_node* %call46, %union.tree_node* %call48) #7
  br label %return

return:                                           ; preds = %if.else45, %if.then42, %if.then38, %if.then31, %if.then15
  %retval.0 = phi %union.tree_node* [ %call34, %if.then31 ], [ %call39, %if.then38 ], [ %call44, %if.then42 ], [ %call49, %if.else45 ], [ %call, %if.then15 ]
  ret %union.tree_node* %retval.0
}
