define internal fastcc %union.tree_node* @associate_trees(%union.tree_node* %t1, %union.tree_node* %t2, i32 %code, %union.tree_node* %type) #0 {
entry:
  %cmp = icmp eq %union.tree_node* %t1, null
  br i1 %cmp, label %return, label %if.else

if.else:                                          ; preds = %entry
  %cmp1 = icmp eq %union.tree_node* %t2, null
  br i1 %cmp1, label %return, label %if.end3

if.end3:                                          ; preds = %if.else
  %code4 = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 0, i32 2
  %0 = bitcast [4 x i8]* %code4 to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp5 = icmp eq i32 %bf.clear, %code
  br i1 %cmp5, label %if.then23, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end3
  %code7 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 0, i32 2
  %1 = bitcast [4 x i8]* %code7 to i32*
  %bf.load8 = load i32* %1, align 8
  %bf.clear9 = and i32 %bf.load8, 255
  %cmp10 = icmp eq i32 %bf.clear9, %code
  %cmp16 = icmp eq i32 %bf.clear, 60
  %or.cond = or i1 %cmp10, %cmp16
  %cmp22 = icmp eq i32 %bf.clear9, 60
  %or.cond82 = or i1 %or.cond, %cmp22
  br i1 %or.cond82, label %if.then23, label %if.end49

if.then23:                                        ; preds = %lor.lhs.false, %if.end3
  %cmp28 = icmp eq i32 %bf.clear, 77
  br i1 %cmp28, label %if.then29, label %if.else32

if.then29:                                        ; preds = %if.then23
  %call = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %t2) #9
  %operands = getelementptr inbounds %union.tree_node* %t1, i64 0, i32 0, i32 2
  %arrayidx = bitcast i32* %operands to %union.tree_node**
  %2 = load %union.tree_node** %arrayidx, align 8, !tbaa !3
  %call30 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %2) #9
  %call31 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %type, %union.tree_node* %call, %union.tree_node* %call30) #9
  br label %return

if.else32:                                        ; preds = %if.then23
  %code34 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 0, i32 2
  %3 = bitcast [4 x i8]* %code34 to i32*
  %bf.load35 = load i32* %3, align 8
  %bf.clear36 = and i32 %bf.load35, 255
  %cmp37 = icmp eq i32 %bf.clear36, 77
  %call39 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %t1) #9
  br i1 %cmp37, label %if.then38, label %if.else45

if.then38:                                        ; preds = %if.else32
  %operands41 = getelementptr inbounds %union.tree_node* %t2, i64 0, i32 0, i32 2
  %arrayidx42 = bitcast i32* %operands41 to %union.tree_node**
  %4 = load %union.tree_node** %arrayidx42, align 8, !tbaa !3
  %call43 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %4) #9
  %call44 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 60, %union.tree_node* %type, %union.tree_node* %call39, %union.tree_node* %call43) #9
  br label %return

if.else45:                                        ; preds = %if.else32
  %call47 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %t2) #9
  %call48 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %code, %union.tree_node* %type, %union.tree_node* %call39, %union.tree_node* %call47) #9
  br label %return

if.end49:                                         ; preds = %lor.lhs.false
  %call50 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %t1) #9
  %call51 = tail call %union.tree_node* @convert(%union.tree_node* %type, %union.tree_node* %t2) #9
  %call52 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 %code, %union.tree_node* %type, %union.tree_node* %call50, %union.tree_node* %call51) #9
  %call53 = tail call %union.tree_node* @fold(%union.tree_node* %call52) #7
  br label %return

return:                                           ; preds = %if.else, %entry, %if.end49, %if.else45, %if.then38, %if.then29
  %retval.0 = phi %union.tree_node* [ %call31, %if.then29 ], [ %call44, %if.then38 ], [ %call48, %if.else45 ], [ %call53, %if.end49 ], [ %t2, %entry ], [ %t1, %if.else ]
  ret %union.tree_node* %retval.0
}
