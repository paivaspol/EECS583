define void @lshift_double(i64 %l1, i64 %h1, i64 %count, i32 %prec, i64* nocapture %lv, i64* nocapture %hv, i32 %arith) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{i64 %l1}, i64 0, metadata !794), !dbg !1884
  tail call void @llvm.dbg.value(metadata !{i64 %h1}, i64 0, metadata !795), !dbg !1885
  tail call void @llvm.dbg.value(metadata !{i64 %count}, i64 0, metadata !796), !dbg !1885
  tail call void @llvm.dbg.value(metadata !{i32 %prec}, i64 0, metadata !797), !dbg !1886
  tail call void @llvm.dbg.value(metadata !{i64* %lv}, i64 0, metadata !798), !dbg !1887
  tail call void @llvm.dbg.value(metadata !{i64* %hv}, i64 0, metadata !799), !dbg !1888
  tail call void @llvm.dbg.value(metadata !{i32 %arith}, i64 0, metadata !800), !dbg !1889
  %cmp = icmp slt i64 %count, 0, !dbg !1890
  br i1 %cmp, label %if.then, label %if.end, !dbg !1890

if.then:                                          ; preds = %entry
  %sub = sub nsw i64 0, %count, !dbg !1891
  tail call void @rshift_double(i64 %l1, i64 %h1, i64 %sub, i32 %prec, i64* %lv, i64* %hv, i32 %arith) #7, !dbg !1891
  br label %if.end44, !dbg !1893

if.end:                                           ; preds = %entry
  %cmp1 = icmp sgt i64 %count, 127, !dbg !1894
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !1894

if.then2:                                         ; preds = %if.end
  store i64 0, i64* %hv, align 8, !dbg !1895, !tbaa !1700
  store i64 0, i64* %lv, align 8, !dbg !1897, !tbaa !1700
  br label %if.end13, !dbg !1898

if.else:                                          ; preds = %if.end
  %cmp3 = icmp sgt i64 %count, 63, !dbg !1899
  br i1 %cmp3, label %if.then4, label %if.else6, !dbg !1899

if.then4:                                         ; preds = %if.else
  %sub5 = add nsw i64 %count, -64, !dbg !1900
  %shl = shl i64 %l1, %sub5, !dbg !1900
  store i64 %shl, i64* %hv, align 8, !dbg !1900, !tbaa !1700
  store i64 0, i64* %lv, align 8, !dbg !1902, !tbaa !1700
  br label %if.end13, !dbg !1903

if.else6:                                         ; preds = %if.else
  %shl7 = shl i64 %h1, %count, !dbg !1904
  %sub9 = sub i64 63, %count, !dbg !1904
  %shr = lshr i64 %l1, %sub9, !dbg !1904
  %shr10 = lshr i64 %shr, 1, !dbg !1904
  %or = or i64 %shr10, %shl7, !dbg !1904
  store i64 %or, i64* %hv, align 8, !dbg !1904, !tbaa !1700
  %shl11 = shl i64 %l1, %count, !dbg !1906
  store i64 %shl11, i64* %lv, align 8, !dbg !1906, !tbaa !1700
  br label %if.end13

if.end13:                                         ; preds = %if.then4, %if.else6, %if.then2
  %0 = phi i64 [ 0, %if.then4 ], [ %shl11, %if.else6 ], [ 0, %if.then2 ]
  %cmp14 = icmp ugt i32 %prec, 64, !dbg !1907
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !1907

cond.true:                                        ; preds = %if.end13
  %1 = load i64* %hv, align 8, !dbg !1907, !tbaa !1700
  %sub16 = add i32 %prec, -65, !dbg !1907
  %sh_prom = zext i32 %sub16 to i64, !dbg !1907
  %shr17 = ashr i64 %1, %sh_prom, !dbg !1907
  br label %cond.end, !dbg !1907

cond.false:                                       ; preds = %if.end13
  %sub18 = add i32 %prec, -1, !dbg !1907
  %sh_prom19 = zext i32 %sub18 to i64, !dbg !1907
  %shr20 = lshr i64 %0, %sh_prom19, !dbg !1907
  br label %cond.end, !dbg !1907

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %shr17, %cond.true ], [ %shr20, %cond.false ], !dbg !1907
  %and = and i64 %cond, 1, !dbg !1907
  %sub21 = sub i64 0, %and, !dbg !1907
  tail call void @llvm.dbg.value(metadata !{i64 %sub21}, i64 0, metadata !801), !dbg !1907
  %cmp22 = icmp ugt i32 %prec, 127, !dbg !1908
  br i1 %cmp22, label %if.end44, label %if.else24, !dbg !1908

if.else24:                                        ; preds = %cond.end
  %cmp25 = icmp ugt i32 %prec, 63, !dbg !1909
  br i1 %cmp25, label %if.then26, label %if.else35, !dbg !1909

if.then26:                                        ; preds = %if.else24
  %sub27 = add i32 %prec, -64, !dbg !1910
  %sh_prom28 = zext i32 %sub27 to i64, !dbg !1910
  %shl29 = shl i64 -1, %sh_prom28, !dbg !1910
  %neg = xor i64 %shl29, -1, !dbg !1910
  %2 = load i64* %hv, align 8, !dbg !1910, !tbaa !1700
  %and30 = and i64 %2, %neg, !dbg !1910
  %shl33 = shl i64 %sub21, %sh_prom28, !dbg !1912
  %or34 = or i64 %and30, %shl33, !dbg !1912
  store i64 %or34, i64* %hv, align 8, !dbg !1912, !tbaa !1700
  br label %if.end44, !dbg !1913

if.else35:                                        ; preds = %if.else24
  store i64 %sub21, i64* %hv, align 8, !dbg !1914, !tbaa !1700
  %sh_prom36 = zext i32 %prec to i64, !dbg !1916
  %shl37 = shl i64 -1, %sh_prom36, !dbg !1916
  %neg38 = xor i64 %shl37, -1, !dbg !1916
  %3 = load i64* %lv, align 8, !dbg !1916, !tbaa !1700
  %and39 = and i64 %3, %neg38, !dbg !1916
  %shl41 = shl i64 %sub21, %sh_prom36, !dbg !1917
  %or42 = or i64 %and39, %shl41, !dbg !1917
  store i64 %or42, i64* %lv, align 8, !dbg !1917, !tbaa !1700
  br label %if.end44

if.end44:                                         ; preds = %if.then26, %if.else35, %cond.end, %if.then
  ret void, !dbg !1918
}
