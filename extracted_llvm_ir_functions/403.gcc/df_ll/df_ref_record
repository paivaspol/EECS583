define internal fastcc void @df_ref_record(%struct.df* nocapture %df, %struct.rtx_def* %reg, %struct.rtx_def** %loc, %struct.rtx_def* %insn, i32 %ref_type, i32 %ref_flags) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %reg to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.then [
    i32 63, label %land.lhs.true7
    i32 61, label %if.end34
  ]

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([46 x i8]* @.str, i64 0, i64 0), i32 875, i8* getelementptr inbounds ([14 x i8]* @__FUNCTION__.df_ref_record, i64 0, i64 0)) #7
  unreachable

land.lhs.true7:                                   ; preds = %entry
  %bf.lshr = lshr i32 %bf.load, 16
  %bf.clear9 = and i32 %bf.lshr, 255
  %idxprom174 = zext i32 %bf.clear9 to i64
  %arrayidx = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom174
  %1 = load i8* %arrayidx, align 1, !tbaa !1
  %2 = load i32* @word_mode, align 4, !tbaa !7
  %idxprom10 = sext i32 %2 to i64
  %arrayidx11 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom10
  %3 = load i8* %arrayidx11, align 1, !tbaa !1
  %cmp13 = icmp ult i8 %1, %3
  %arrayidx32.phi.trans.insert = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtx33.phi.trans.insert = bitcast %union.rtunion_def* %arrayidx32.phi.trans.insert to %struct.rtx_def**
  %.pre = load %struct.rtx_def** %rtx33.phi.trans.insert, align 8, !tbaa !3
  %.phi.trans.insert.phi.trans.insert = bitcast %struct.rtx_def* %.pre to i32*
  %bf.load35.pre.pre = load i32* %.phi.trans.insert.phi.trans.insert, align 8
  br i1 %cmp13, label %if.then30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true7
  %bf.lshr23 = lshr i32 %bf.load35.pre.pre, 16
  %bf.clear24 = and i32 %bf.lshr23, 255
  %idxprom25175 = zext i32 %bf.clear24 to i64
  %arrayidx26 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom25175
  %4 = load i8* %arrayidx26, align 1, !tbaa !1
  %cmp28 = icmp ult i8 %1, %4
  br i1 %cmp28, label %if.end34, label %if.then30

if.then30:                                        ; preds = %land.lhs.true7, %lor.lhs.false
  %arrayidx32 = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**
  br label %if.end34

if.end34:                                         ; preds = %entry, %lor.lhs.false, %if.then30
  %bf.load73 = phi i32 [ %bf.load35.pre.pre, %if.then30 ], [ %bf.load, %lor.lhs.false ], [ %bf.load, %entry ]
  %loc.addr.0 = phi %struct.rtx_def** [ %rtx33, %if.then30 ], [ %loc, %lor.lhs.false ], [ %loc, %entry ]
  %reg.addr.0 = phi %struct.rtx_def* [ %.pre, %if.then30 ], [ %reg, %lor.lhs.false ], [ %reg, %entry ]
  %bf.clear36 = and i32 %bf.load73, 65535
  %cmp37 = icmp eq i32 %bf.clear36, 63
  br i1 %cmp37, label %cond.true, label %cond.end

cond.true:                                        ; preds = %if.end34
  %arrayidx40 = getelementptr inbounds %struct.rtx_def* %reg.addr.0, i64 0, i32 1, i64 0
  %rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**
  %5 = load %struct.rtx_def** %rtx41, align 8, !tbaa !3
  br label %cond.end

cond.end:                                         ; preds = %if.end34, %cond.true
  %cond = phi %struct.rtx_def* [ %5, %cond.true ], [ %reg.addr.0, %if.end34 ]
  %arrayidx43 = getelementptr inbounds %struct.rtx_def* %cond, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx43 to i32*
  %6 = load i32* %rtuint, align 4, !tbaa !4
  %cmp44 = icmp ult i32 %6, 53
  br i1 %cmp44, label %if.then46, label %if.else

if.then46:                                        ; preds = %cond.end
  %flags = getelementptr inbounds %struct.df* %df, i64 0, i32 0
  %7 = load i32* %flags, align 4, !tbaa !4
  %and = and i32 %7, 1024
  %tobool = icmp eq i32 %and, 0
  br i1 %tobool, label %if.end132, label %if.end48

if.end48:                                         ; preds = %if.then46
  %.off = add i32 %6, -8
  %8 = icmp ult i32 %.off, 8
  %.off169 = add i32 %6, -21
  %9 = icmp ult i32 %.off169, 8
  %or.cond = or i1 %8, %9
  %.off170 = add i32 %6, -45
  %10 = icmp ult i32 %.off170, 8
  %or.cond178 = or i1 %or.cond, %10
  %.off171 = add i32 %6, -29
  %11 = icmp ult i32 %.off171, 8
  %or.cond180 = or i1 %or.cond178, %11
  %bf.lshr74 = lshr i32 %bf.load73, 16
  %bf.clear75 = and i32 %bf.lshr74, 255
  br i1 %or.cond180, label %cond.true72, label %cond.false88

cond.true72:                                      ; preds = %if.end48
  %idxprom76173 = zext i32 %bf.clear75 to i64
  %arrayidx77 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom76173
  %12 = load i32* %arrayidx77, align 4, !tbaa !8
  %cmp78 = icmp eq i32 %12, 5
  br i1 %cmp78, label %cond.end125, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true72
  %cmp85 = icmp eq i32 %12, 6
  %phitmp = select i1 %cmp85, i32 2, i32 1
  br label %cond.end125

cond.false88:                                     ; preds = %if.end48
  switch i32 %bf.clear75, label %cond.false108 [
    i32 18, label %cond.true94
    i32 24, label %cond.true104
  ]

cond.true94:                                      ; preds = %cond.false88
  %13 = load i32* @target_flags, align 4, !tbaa !4
  %and95 = lshr i32 %13, 25
  %14 = and i32 %and95, 1
  %15 = xor i32 %14, 3
  br label %cond.end125

cond.true104:                                     ; preds = %cond.false88
  %16 = load i32* @target_flags, align 4, !tbaa !4
  %and105 = lshr i32 %16, 24
  %17 = and i32 %and105, 2
  %18 = xor i32 %17, 6
  br label %cond.end125

cond.false108:                                    ; preds = %cond.false88
  %idxprom112172 = zext i32 %bf.clear75 to i64
  %arrayidx113 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom112172
  %19 = load i8* %arrayidx113, align 1, !tbaa !1
  %conv114 = zext i8 %19 to i32
  %20 = load i32* @target_flags, align 4, !tbaa !4
  %and115 = lshr i32 %20, 23
  %21 = and i32 %and115, 4
  %22 = add i32 %21, 4
  %add = add i32 %conv114, -1
  %sub = add i32 %add, %22
  %div = sdiv i32 %sub, %22
  br label %cond.end125

cond.end125:                                      ; preds = %cond.true72, %lor.rhs, %cond.true94, %cond.false108, %cond.true104
  %cond126 = phi i32 [ %15, %cond.true94 ], [ %18, %cond.true104 ], [ %div, %cond.false108 ], [ 2, %cond.true72 ], [ %phitmp, %lor.rhs ]
  %add127 = add i32 %cond126, %6
  %cmp128181 = icmp slt i32 %6, %add127
  br i1 %cmp128181, label %for.body.lr.ph, label %if.end132

for.body.lr.ph:                                   ; preds = %cond.end125
  %23 = sext i32 %6 to i64
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %indvars.iv = phi i64 [ %23, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx131 = getelementptr inbounds [53 x i32]* @reg_raw_mode, i64 0, i64 %indvars.iv
  %24 = load i32* %arrayidx131, align 4, !tbaa !7
  %25 = trunc i64 %indvars.iv to i32
  %call = tail call %struct.rtx_def* @gen_rtx_REG(i32 %24, i32 %25) #8
  tail call fastcc void @df_ref_record_1(%struct.df* %df, %struct.rtx_def* %call, %struct.rtx_def** %loc.addr.0, %struct.rtx_def* %insn, i32 %ref_type, i32 %ref_flags) #6
  %indvars.iv.next = add i64 %indvars.iv, 1
  %26 = trunc i64 %indvars.iv.next to i32
  %cmp128 = icmp slt i32 %26, %add127
  br i1 %cmp128, label %for.body, label %if.end132

if.else:                                          ; preds = %cond.end
  tail call fastcc void @df_ref_record_1(%struct.df* %df, %struct.rtx_def* %reg.addr.0, %struct.rtx_def** %loc.addr.0, %struct.rtx_def* %insn, i32 %ref_type, i32 %ref_flags) #6
  br label %if.end132

if.end132:                                        ; preds = %cond.end125, %for.body, %if.then46, %if.else
  ret void
}
