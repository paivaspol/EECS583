define internal fastcc %union.tree_node* @unary_complex_lvalue(i32 %code, %union.tree_node* nocapture %arg, i32 %flag) #0 {
entry:
  %code1 = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 0, i32 2
  %0 = bitcast [4 x i8]* %code1 to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 255
  switch i32 %bf.clear, label %return [
    i32 47, label %if.then
    i32 51, label %if.then21
  ]

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %1 = bitcast i32* %arrayidx to %union.tree_node**
  %2 = load %union.tree_node** %1, align 8, !tbaa !0
  %call = tail call %union.tree_node* @build_unary_op(i32 %code, %union.tree_node* %2, i32 0) #7
  %type = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 0, i32 1
  %3 = load %union.tree_node** %type, align 8, !tbaa !0
  %code4 = getelementptr inbounds %union.tree_node* %3, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast [4 x i8]* %code4 to i32*
  %bf.load5 = load i32* %4, align 8
  %bf.clear6 = and i32 %bf.load5, 255
  %notlhs = icmp eq i32 %bf.clear6, 23
  %notrhs = icmp ne i32 %flag, 0
  %or.cond.not = or i1 %notrhs, %notlhs
  %5 = load i32* @pedantic, align 4, !tbaa !3
  %tobool.i67 = icmp eq i32 %5, 0
  %or.cond70 = or i1 %or.cond.not, %tobool.i67
  br i1 %or.cond70, label %if.end, label %if.then.i68

if.then.i68:                                      ; preds = %if.then
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([53 x i8]* @.str176, i64 0, i64 0)) #8
  br label %if.end

if.end:                                           ; preds = %if.then, %if.then.i68
  %type10 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1
  %6 = load %union.tree_node** %type10, align 8, !tbaa !0
  %arrayidx13 = bitcast i32* %operands to %union.tree_node**
  %7 = load %union.tree_node** %arrayidx13, align 8, !tbaa !0
  %call14 = tail call %union.tree_node* (i32, %union.tree_node*, ...)* @build(i32 47, %union.tree_node* %6, %union.tree_node* %7, %union.tree_node* %call) #8
  br label %return

if.then21:                                        ; preds = %entry
  %tobool22 = icmp ne i32 %flag, 0
  %8 = load i32* @pedantic, align 4, !tbaa !3
  %tobool.i64 = icmp eq i32 %8, 0
  %or.cond71 = or i1 %tobool22, %tobool.i64
  br i1 %or.cond71, label %if.end24, label %if.then.i65

if.then.i65:                                      ; preds = %if.then21
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([56 x i8]* @.str175, i64 0, i64 0)) #8
  %.pre = load i32* @pedantic, align 4, !tbaa !3
  br label %if.end24

if.end24:                                         ; preds = %if.then.i65, %if.then21
  %9 = phi i32 [ %.pre, %if.then.i65 ], [ %8, %if.then21 ]
  %type26 = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 0, i32 1
  %10 = load %union.tree_node** %type26, align 8, !tbaa !0
  %code28 = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 0, i32 2
  %11 = bitcast [4 x i8]* %code28 to i32*
  %bf.load29 = load i32* %11, align 8
  %bf.clear30 = and i32 %bf.load29, 255
  %cmp31 = icmp eq i32 %bf.clear30, 23
  %brmerge = or i1 %cmp31, %tobool22
  %tobool.i = icmp eq i32 %9, 0
  %or.cond72 = or i1 %brmerge, %tobool.i
  br i1 %or.cond72, label %if.end35, label %if.then.i

if.then.i:                                        ; preds = %if.end24
  tail call void (i8*, ...)* @pedwarn(i8* getelementptr inbounds ([53 x i8]* @.str176, i64 0, i64 0)) #8
  br label %if.end35

if.end35:                                         ; preds = %if.then.i, %if.end24
  %operands37 = getelementptr inbounds %union.tree_node* %arg, i64 0, i32 0, i32 2
  %arrayidx38 = bitcast i32* %operands37 to %union.tree_node**
  %12 = load %union.tree_node** %arrayidx38, align 8, !tbaa !0
  %arrayidx41 = getelementptr inbounds i32* %operands37, i64 2
  %13 = bitcast i32* %arrayidx41 to %union.tree_node**
  %14 = load %union.tree_node** %13, align 8, !tbaa !0
  %call42 = tail call %union.tree_node* @build_unary_op(i32 %code, %union.tree_node* %14, i32 %flag) #7
  %arrayidx45 = getelementptr inbounds i32* %operands37, i64 4
  %15 = bitcast i32* %arrayidx45 to %union.tree_node**
  %16 = load %union.tree_node** %15, align 8, !tbaa !0
  %call46 = tail call %union.tree_node* @build_unary_op(i32 %code, %union.tree_node* %16, i32 %flag) #7
  %call47 = tail call %union.tree_node* @build_conditional_expr(%union.tree_node* %12, %union.tree_node* %call42, %union.tree_node* %call46) #7
  br label %return

return:                                           ; preds = %entry, %if.end35, %if.end
  %retval.0 = phi %union.tree_node* [ %call14, %if.end ], [ %call47, %if.end35 ], [ null, %entry ]
  ret %union.tree_node* %retval.0
}
