define internal fastcc %struct.rtx_def* @extract_split_bit_field(%struct.rtx_def* %op0, i64 %bitsize, i64 %bitpos, i32 %unsignedp) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %op0 to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  switch i32 %bf.clear, label %if.else [
    i32 61, label %if.then
    i32 63, label %if.then
  ]

if.then:                                          ; preds = %entry, %entry
  %1 = load i32* @target_flags, align 4, !tbaa !4
  %and = lshr i32 %1, 20
  %2 = and i32 %and, 32
  %3 = add i32 %2, 32
  br label %while.cond.preheader

if.else:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %op0, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**
  %4 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !3
  %cmp4 = icmp eq %struct.mem_attrs* %4, null
  br i1 %cmp4, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.else
  %align = getelementptr inbounds %struct.mem_attrs* %4, i64 0, i32 4
  %5 = load i32* %align, align 4, !tbaa !4
  br label %cond.end

cond.end:                                         ; preds = %if.else, %cond.true
  %cond8 = phi i32 [ %5, %cond.true ], [ 8, %if.else ]
  %6 = load i32* @target_flags, align 4, !tbaa !4
  %and9 = lshr i32 %6, 20
  %7 = and i32 %and9, 32
  %8 = add i32 %7, 32
  %cmp12.not = icmp uge i32 %cond8, %8
  %brmerge = or i1 %cmp12.not, %cmp4
  %.mux = select i1 %cmp12.not, i32 %8, i32 8
  br i1 %brmerge, label %while.cond.preheader, label %cond.true18

cond.true18:                                      ; preds = %cond.end
  %align22 = getelementptr inbounds %struct.mem_attrs* %4, i64 0, i32 4
  %9 = load i32* %align22, align 4, !tbaa !4
  br label %while.cond.preheader

while.cond.preheader:                             ; preds = %cond.end, %if.then, %cond.true18
  %10 = phi i32 [ %6, %cond.true18 ], [ %6, %cond.end ], [ %1, %if.then ]
  %unit.0.ph = phi i32 [ %9, %cond.true18 ], [ %.mux, %cond.end ], [ %3, %if.then ]
  %cmp32182 = icmp eq i64 %bitsize, 0
  br i1 %cmp32182, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %conv35 = zext i32 %unit.0.ph to i64
  %arrayidx72 = getelementptr inbounds %struct.rtx_def* %op0, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx72 to i32*
  %arrayidx81 = getelementptr inbounds %struct.rtx_def* %op0, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**
  br label %while.body

while.body:                                       ; preds = %while.cond.backedge.while.body_crit_edge, %while.body.lr.ph
  %bf.load66 = phi i32 [ %bf.load, %while.body.lr.ph ], [ %bf.load66.pre, %while.cond.backedge.while.body_crit_edge ]
  %11 = phi i32 [ %10, %while.body.lr.ph ], [ %.pre, %while.cond.backedge.while.body_crit_edge ]
  %first.0185 = phi i32 [ 1, %while.body.lr.ph ], [ 0, %while.cond.backedge.while.body_crit_edge ]
  %result.0184 = phi %struct.rtx_def* [ null, %while.body.lr.ph ], [ %result.0.be, %while.cond.backedge.while.body_crit_edge ]
  %bitsdone.0183 = phi i64 [ 0, %while.body.lr.ph ], [ %conv107, %while.cond.backedge.while.body_crit_edge ]
  %add = add i64 %bitsdone.0183, %bitpos
  %div = udiv i64 %add, %conv35
  %rem = urem i64 %add, %conv35
  %sub = sub i64 %bitsize, %bitsdone.0183
  %and40 = lshr i32 %11, 20
  %12 = and i32 %and40, 32
  %13 = add i32 %12, 32
  %conv43181 = zext i32 %13 to i64
  %cmp44 = icmp ult i64 %sub, %conv43181
  %sub.conv43181 = select i1 %cmp44, i64 %sub, i64 %conv43181
  %sub57 = sub i64 %conv35, %rem
  %cmp58 = icmp ult i64 %sub.conv43181, %sub57
  %cond65 = select i1 %cmp58, i64 %sub.conv43181, i64 %sub57
  %bf.clear67 = and i32 %bf.load66, 65535
  switch i32 %bf.clear67, label %if.end100 [
    i32 63, label %if.then70
    i32 61, label %if.then92
  ]

if.then70:                                        ; preds = %while.body
  %14 = load i32* %rtuint, align 4, !tbaa !4
  %and73 = lshr i32 %11, 23
  %15 = and i32 %and73, 4
  %16 = add i32 %15, 4
  %div76 = udiv i32 %14, %16
  %conv77 = zext i32 %div76 to i64
  %add78 = add i64 %conv77, %div
  %conv79 = trunc i64 %add78 to i32
  %17 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %18 = bitcast %struct.rtx_def* %17 to i32*
  %bf.load85 = load i32* %18, align 8
  %bf.lshr = lshr i32 %bf.load85, 16
  %bf.clear86 = and i32 %bf.lshr, 255
  %call = tail call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %17, i32 %conv79, i32 %bf.clear86) #4
  br label %if.end100

if.then92:                                        ; preds = %while.body
  %conv93 = trunc i64 %div to i32
  %bf.lshr95 = lshr i32 %bf.load66, 16
  %bf.clear96 = and i32 %bf.lshr95, 255
  %call97 = tail call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %op0, i32 %conv93, i32 %bf.clear96) #4
  br label %if.end100

if.end100:                                        ; preds = %while.body, %if.then92, %if.then70
  %word.0 = phi %struct.rtx_def* [ %call, %if.then70 ], [ %call97, %if.then92 ], [ %op0, %while.body ]
  %offset.0 = phi i64 [ 0, %if.then70 ], [ 0, %if.then92 ], [ %div, %while.body ]
  %19 = load i32* @word_mode, align 4, !tbaa !0
  %mul = mul i64 %offset.0, %conv35
  %div102 = lshr i64 %mul, 3
  %call103 = tail call fastcc %struct.rtx_def* @extract_fixed_bit_field(i32 %19, %struct.rtx_def* %word.0, i64 %div102, i64 %cond65, i64 %rem, %struct.rtx_def* null, i32 1) #6
  %add105 = add i64 %cond65, %bitsdone.0183
  %conv107 = and i64 %add105, 4294967295
  %cmp108 = icmp eq i64 %conv107, %cond65
  br i1 %cmp108, label %if.end115, label %if.then110

if.then110:                                       ; preds = %if.end100
  %20 = load i32* @word_mode, align 4, !tbaa !0
  %sub112 = sub i64 %conv107, %cond65
  %call113 = tail call %union.tree_node* @build_int_2_wide(i64 %sub112, i64 0) #4
  %call114 = tail call %struct.rtx_def* @expand_shift(i32 82, i32 %20, %struct.rtx_def* %call103, %union.tree_node* %call113, %struct.rtx_def* null, i32 1) #6
  br label %if.end115

if.end115:                                        ; preds = %if.end100, %if.then110
  %part.0 = phi %struct.rtx_def* [ %call114, %if.then110 ], [ %call103, %if.end100 ]
  %tobool116 = icmp eq i32 %first.0185, 0
  br i1 %tobool116, label %if.else118, label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.end115, %if.else118
  %result.0.be = phi %struct.rtx_def* [ %part.0, %if.end115 ], [ %call119, %if.else118 ]
  %cmp32 = icmp ult i64 %conv107, %bitsize
  br i1 %cmp32, label %while.cond.backedge.while.body_crit_edge, label %while.end

while.cond.backedge.while.body_crit_edge:         ; preds = %while.cond.backedge
  %.pre = load i32* @target_flags, align 4, !tbaa !4
  %bf.load66.pre = load i32* %0, align 8
  br label %while.body

if.else118:                                       ; preds = %if.end115
  %21 = load i32* @word_mode, align 4, !tbaa !0
  %22 = load %struct.optab** getelementptr inbounds ([49 x %struct.optab*]* @optab_table, i64 0, i64 19), align 8, !tbaa !3
  %call119 = tail call %struct.rtx_def* @expand_binop(i32 %21, %struct.optab* %22, %struct.rtx_def* %part.0, %struct.rtx_def* %result.0184, %struct.rtx_def* null, i32 1, i32 3) #4
  br label %while.cond.backedge

while.end:                                        ; preds = %while.cond.backedge, %while.cond.preheader
  %result.0.lcssa = phi %struct.rtx_def* [ null, %while.cond.preheader ], [ %result.0.be, %while.cond.backedge ]
  %tobool121 = icmp eq i32 %unsignedp, 0
  br i1 %tobool121, label %if.end123, label %return

if.end123:                                        ; preds = %while.end
  %23 = load i32* @word_mode, align 4, !tbaa !0
  %24 = load i32* @target_flags, align 4, !tbaa !4
  %and124 = lshr i32 %24, 20
  %25 = and i32 %and124, 32
  %26 = add i32 %25, 32
  %conv127179 = zext i32 %26 to i64
  %sub128 = sub i64 %conv127179, %bitsize
  %call129 = tail call %union.tree_node* @build_int_2_wide(i64 %sub128, i64 0) #4
  %call130 = tail call %struct.rtx_def* @expand_shift(i32 82, i32 %23, %struct.rtx_def* %result.0.lcssa, %union.tree_node* %call129, %struct.rtx_def* null, i32 0) #6
  %27 = load i32* @word_mode, align 4, !tbaa !0
  %28 = load i32* @target_flags, align 4, !tbaa !4
  %and131 = lshr i32 %28, 20
  %29 = and i32 %and131, 32
  %30 = add i32 %29, 32
  %conv134180 = zext i32 %30 to i64
  %sub135 = sub i64 %conv134180, %bitsize
  %call136 = tail call %union.tree_node* @build_int_2_wide(i64 %sub135, i64 0) #4
  %call137 = tail call %struct.rtx_def* @expand_shift(i32 83, i32 %27, %struct.rtx_def* %call130, %union.tree_node* %call136, %struct.rtx_def* null, i32 0) #6
  br label %return

return:                                           ; preds = %while.end, %if.end123
  %retval.0 = phi %struct.rtx_def* [ %call137, %if.end123 ], [ %result.0.lcssa, %while.end ]
  ret %struct.rtx_def* %retval.0
}
