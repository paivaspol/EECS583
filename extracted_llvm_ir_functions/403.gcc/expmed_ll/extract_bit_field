define %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %str_rtx, i64 %bitsize, i64 %bitnum, i32 %unsignedp, %struct.rtx_def* %target, i32 %mode, i32 %tmode, i64 %total_size) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %str_rtx to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 66
  br i1 %cmp, label %cond.end, label %cond.false

cond.false:                                       ; preds = %entry
  %1 = load i32* @target_flags, align 4, !tbaa !4
  %and = lshr i32 %1, 20
  %2 = and i32 %and, 32
  %3 = add i32 %2, 32
  %phitmp = zext i32 %3 to i64
  br label %cond.end

cond.end:                                         ; preds = %entry, %cond.false
  %cond1 = phi i64 [ %phitmp, %cond.false ], [ 8, %entry ]
  %div = udiv i64 %bitnum, %cond1
  %rem = urem i64 %bitnum, %cond1
  %4 = load %struct.insn_operand_data** getelementptr inbounds ([0 x %struct.insn_data]* @insn_data, i64 0, i64 1112, i32 3), align 8, !tbaa !3
  %mode.i = getelementptr inbounds %struct.insn_operand_data* %4, i64 0, i32 2
  %5 = bitcast [2 x i8]* %mode.i to i16*
  %bf.load.i = load i16* %5, align 8
  %cmp3.i = icmp eq i16 %bf.load.i, 0
  %6 = load i32* @word_mode, align 4, !tbaa !0
  %bf.cast.i = zext i16 %bf.load.i to i32
  %retval.0.i = select i1 %cmp3.i, i32 %6, i32 %bf.cast.i
  %7 = load %struct.insn_operand_data** getelementptr inbounds ([0 x %struct.insn_data]* @insn_data, i64 0, i64 1113, i32 3), align 8, !tbaa !3
  %mode.i1163 = getelementptr inbounds %struct.insn_operand_data* %7, i64 0, i32 2
  %8 = bitcast [2 x i8]* %mode.i1163 to i16*
  %bf.load.i1164 = load i16* %8, align 8
  %cmp3.i1165 = icmp eq i16 %bf.load.i1164, 0
  %bf.cast.i1167 = zext i16 %bf.load.i1164 to i32
  %retval.0.i1169 = select i1 %cmp3.i1165, i32 %6, i32 %bf.cast.i1167
  %cmp4 = icmp sgt i64 %total_size, -1
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %div6 = lshr i64 %rem, 7
  %mul = shl nuw nsw i64 %div6, 4
  %sub = sub i64 %total_size, %mul
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %total_size.addr.0 = phi i64 [ %sub, %if.then ], [ %total_size, %cond.end ]
  %cmp7 = icmp eq i32 %tmode, 0
  %mode.tmode = select i1 %cmp7, i32 %mode, i32 %tmode
  %9 = load i32* @target_flags, align 4, !tbaa !4
  %and27 = lshr i32 %9, 23
  %10 = and i32 %and27, 4
  %11 = add i32 %10, 4
  br label %while.cond

while.cond:                                       ; preds = %if.end, %while.body
  %bf.load70 = phi i32 [ %bf.load11.pre, %while.body ], [ %bf.load, %if.end ]
  %op0.0 = phi %struct.rtx_def* [ %14, %while.body ], [ %str_rtx, %if.end ]
  %offset.0 = phi i64 [ %add, %while.body ], [ %div, %if.end ]
  %12 = bitcast %struct.rtx_def* %op0.0 to i32*
  %bf.clear12 = and i32 %bf.load70, 65535
  switch i32 %bf.clear12, label %if.end69.loopexit [
    i32 63, label %while.body
    i32 61, label %land.lhs.true
  ]

while.body:                                       ; preds = %while.cond
  %fld = getelementptr inbounds %struct.rtx_def* %op0.0, i64 0, i32 1
  %rtx = bitcast [1 x %union.rtunion_def]* %fld to %struct.rtx_def**
  %arrayidx26 = getelementptr inbounds %struct.rtx_def* %op0.0, i64 0, i32 1, i64 1
  %rtuint = bitcast %union.rtunion_def* %arrayidx26 to i32*
  %13 = load i32* %rtuint, align 4, !tbaa !4
  %div30 = udiv i32 %13, %11
  %conv31 = zext i32 %div30 to i64
  %add = add i64 %conv31, %offset.0
  %14 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %.phi.trans.insert = bitcast %struct.rtx_def* %14 to i32*
  %bf.load11.pre = load i32* %.phi.trans.insert, align 8
  br label %while.cond

land.lhs.true:                                    ; preds = %while.cond
  %bf.lshr52 = lshr i32 %bf.load70, 16
  %bf.clear53 = and i32 %bf.lshr52, 255
  %cmp54 = icmp eq i32 %bf.clear53, %mode
  %cmp57 = icmp eq i64 %bitnum, 0
  %or.cond = and i1 %cmp54, %cmp57
  br i1 %or.cond, label %land.lhs.true59, label %if.end69

land.lhs.true59:                                  ; preds = %land.lhs.true
  %idxprom631157 = zext i32 %mode to i64
  %arrayidx64 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom631157
  %15 = load i16* %arrayidx64, align 2, !tbaa !5
  %conv65 = zext i16 %15 to i64
  %cmp66 = icmp eq i64 %conv65, %bitsize
  br i1 %cmp66, label %return, label %if.end69

if.end69.loopexit:                                ; preds = %while.cond
  %bf.lshr71.pre = lshr i32 %bf.load70, 16
  %bf.clear72.pre = and i32 %bf.lshr71.pre, 255
  br label %if.end69

if.end69:                                         ; preds = %if.end69.loopexit, %land.lhs.true59, %land.lhs.true
  %bf.clear72.pre-phi = phi i32 [ %bf.clear72.pre, %if.end69.loopexit ], [ %mode, %land.lhs.true59 ], [ %bf.clear53, %land.lhs.true ]
  %call73 = tail call i32 @int_mode_for_mode(i32 %bf.clear72.pre-phi) #4
  %bf.load74 = load i32* %12, align 8
  %bf.lshr75 = lshr i32 %bf.load74, 16
  %bf.clear76 = and i32 %bf.lshr75, 255
  %cmp77 = icmp eq i32 %call73, %bf.clear76
  br i1 %cmp77, label %if.end93, label %if.then79

if.then79:                                        ; preds = %if.end69
  %bf.clear81 = and i32 %bf.load74, 65535
  %cmp82 = icmp eq i32 %bf.clear81, 66
  br i1 %cmp82, label %if.then84, label %if.else

if.then84:                                        ; preds = %if.then79
  %call85 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %op0.0, i32 %call73, i64 0, i32 1, i32 1) #4
  br label %if.end93

if.else:                                          ; preds = %if.then79
  %cmp86 = icmp eq i32 %call73, 51
  br i1 %cmp86, label %if.else90, label %if.then88

if.then88:                                        ; preds = %if.else
  %call89 = tail call %struct.rtx_def* @gen_lowpart(i32 %call73, %struct.rtx_def* %op0.0) #4
  br label %if.end93

if.else90:                                        ; preds = %if.else
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 1077, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.extract_bit_field, i64 0, i64 0)) #5
  unreachable

if.end93:                                         ; preds = %if.end69, %if.then84, %if.then88
  %op0.1 = phi %struct.rtx_def* [ %call85, %if.then84 ], [ %call89, %if.then88 ], [ %op0.0, %if.end69 ]
  %16 = bitcast %struct.rtx_def* %op0.1 to i32*
  %bf.load94 = load i32* %16, align 8
  %bf.clear95 = and i32 %bf.load94, 65535
  %cmp96 = icmp eq i32 %bf.clear95, 66
  br i1 %cmp96, label %if.then98, label %if.end100

if.then98:                                        ; preds = %if.end93
  %call99 = tail call %struct.rtx_def* @shallow_copy_rtx(%struct.rtx_def* %op0.1) #4
  tail call void @set_mem_alias_set(%struct.rtx_def* %call99, i64 0) #4
  tail call void @set_mem_expr(%struct.rtx_def* %call99, %union.tree_node* null) #4
  br label %if.end100

if.end100:                                        ; preds = %if.then98, %if.end93
  %op0.2 = phi %struct.rtx_def* [ %call99, %if.then98 ], [ %op0.1, %if.end93 ]
  %17 = load i32* @target_flags, align 4, !tbaa !4
  %and101 = and i32 %17, 33554432
  %18 = lshr exact i32 %and101, 20
  %19 = add i32 %18, 32
  %conv1041143 = zext i32 %19 to i64
  %rem105 = urem i64 %bitnum, %conv1041143
  %div106 = lshr i64 %rem105, 3
  %20 = lshr exact i32 %and101, 23
  %21 = add i32 %20, 4
  %conv1101144 = zext i32 %21 to i64
  %mul111 = mul i64 %conv1101144, %offset.0
  %add112 = add i64 %mul111, %div106
  %conv113 = trunc i64 %add112 to i32
  %idxprom114 = sext i32 %mode.tmode to i64
  %arrayidx115 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom114
  %22 = load i32* %arrayidx115, align 4, !tbaa !6
  %.off = add i32 %22, -7
  %switch = icmp ult i32 %.off, 2
  br i1 %switch, label %cond.end128, label %cond.false123

cond.false123:                                    ; preds = %if.end100
  %conv124 = trunc i64 %bitsize to i32
  %call127 = tail call i32 @mode_for_size(i32 %conv124, i32 %22, i32 0) #4
  br label %cond.end128

cond.end128:                                      ; preds = %if.end100, %cond.false123
  %cond129 = phi i32 [ %call127, %cond.false123 ], [ %mode, %if.end100 ]
  %23 = bitcast %struct.rtx_def* %op0.2 to i32*
  %bf.load130 = load i32* %23, align 8
  %bf.clear131 = and i32 %bf.load130, 65535
  %cmp132 = icmp eq i32 %bf.clear131, 66
  br i1 %cmp132, label %land.lhs.true152, label %land.lhs.true134

land.lhs.true134:                                 ; preds = %cond.end128
  %idxprom135 = sext i32 %cond129 to i64
  %arrayidx136 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom135
  %24 = load i8* %arrayidx136, align 1, !tbaa !1
  %cmp138 = icmp eq i8 %24, 0
  br i1 %cmp138, label %if.end244, label %land.lhs.true140

land.lhs.true140:                                 ; preds = %land.lhs.true134
  %conv137 = zext i8 %24 to i32
  %rem144 = srem i32 %conv113, %conv137
  %cmp145 = icmp eq i32 %rem144, 0
  br i1 %cmp145, label %land.lhs.true152, label %if.end244

land.lhs.true152:                                 ; preds = %cond.end128, %land.lhs.true140
  %25 = load i32* @target_flags, align 4, !tbaa !4
  %and153 = lshr i32 %25, 20
  %26 = and i32 %and153, 32
  %27 = add i32 %26, 32
  %conv1561156 = zext i32 %27 to i64
  %cmp157 = icmp ugt i64 %conv1561156, %bitsize
  br i1 %cmp157, label %lor.lhs.false173, label %land.lhs.true159

land.lhs.true159:                                 ; preds = %land.lhs.true152
  %idxprom160 = sext i32 %mode to i64
  %arrayidx161 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom160
  %28 = load i16* %arrayidx161, align 2, !tbaa !5
  %conv162 = zext i16 %28 to i64
  %cmp163 = icmp eq i64 %conv162, %bitsize
  br i1 %cmp163, label %land.lhs.true165, label %lor.lhs.false173

land.lhs.true165:                                 ; preds = %land.lhs.true159
  %rem170 = urem i64 %rem, %conv1561156
  %cmp171 = icmp eq i64 %rem170, 0
  br i1 %cmp171, label %if.then192, label %lor.lhs.false173

lor.lhs.false173:                                 ; preds = %land.lhs.true152, %land.lhs.true165, %land.lhs.true159
  %conv174 = trunc i64 %bitsize to i32
  %call177 = tail call i32 @mode_for_size(i32 %conv174, i32 %22, i32 0) #4
  %cmp178 = icmp ne i32 %call177, 51
  %cmp190 = icmp eq i64 %rem, 0
  %or.cond1161 = and i1 %cmp178, %cmp190
  br i1 %or.cond1161, label %lor.lhs.false173.if.then192_crit_edge, label %if.end244

lor.lhs.false173.if.then192_crit_edge:            ; preds = %lor.lhs.false173
  %bf.load193.pre = load i32* %23, align 8
  br label %if.then192

if.then192:                                       ; preds = %lor.lhs.false173.if.then192_crit_edge, %land.lhs.true165
  %bf.load193 = phi i32 [ %bf.load193.pre, %lor.lhs.false173.if.then192_crit_edge ], [ %bf.load130, %land.lhs.true165 ]
  %bf.lshr194 = lshr i32 %bf.load193, 16
  %bf.clear195 = and i32 %bf.lshr194, 255
  %cmp196 = icmp eq i32 %cond129, %bf.clear195
  br i1 %cmp196, label %if.end238, label %if.then198

if.then198:                                       ; preds = %if.then192
  %bf.clear200 = and i32 %bf.load193, 65535
  %cmp201 = icmp eq i32 %bf.clear200, 63
  br i1 %cmp201, label %if.then203, label %if.end228

if.then203:                                       ; preds = %if.then198
  %arrayidx205 = getelementptr inbounds %struct.rtx_def* %op0.2, i64 0, i32 1, i64 0
  %rtx206 = bitcast %union.rtunion_def* %arrayidx205 to %struct.rtx_def**
  %29 = load %struct.rtx_def** %rtx206, align 8, !tbaa !3
  %30 = bitcast %struct.rtx_def* %29 to i32*
  %bf.load207 = load i32* %30, align 8
  %bf.lshr208 = lshr i32 %bf.load207, 16
  %bf.clear209 = and i32 %bf.lshr208, 255
  %cmp210 = icmp eq i32 %bf.clear209, %cond129
  br i1 %cmp210, label %if.end228, label %lor.lhs.false212

lor.lhs.false212:                                 ; preds = %if.then203
  %idxprom213 = sext i32 %cond129 to i64
  %arrayidx214 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom213
  %31 = load i32* %arrayidx214, align 4, !tbaa !6
  switch i32 %31, label %if.else226 [
    i32 1, label %if.end228
    i32 3, label %if.end228
  ]

if.else226:                                       ; preds = %lor.lhs.false212
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 1147, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.extract_bit_field, i64 0, i64 0)) #5
  unreachable

if.end228:                                        ; preds = %if.then203, %lor.lhs.false212, %lor.lhs.false212, %if.then198
  %bf.load229 = phi i32 [ %bf.load193, %if.then198 ], [ %bf.load207, %lor.lhs.false212 ], [ %bf.load207, %lor.lhs.false212 ], [ %bf.load207, %if.then203 ]
  %op0.3 = phi %struct.rtx_def* [ %op0.2, %if.then198 ], [ %29, %lor.lhs.false212 ], [ %29, %lor.lhs.false212 ], [ %29, %if.then203 ]
  %bf.clear230 = and i32 %bf.load229, 65535
  %cmp231 = icmp eq i32 %bf.clear230, 61
  br i1 %cmp231, label %if.then233, label %if.else235

if.then233:                                       ; preds = %if.end228
  %call234 = tail call %struct.rtx_def* @gen_rtx_SUBREG(i32 %cond129, %struct.rtx_def* %op0.3, i32 %conv113) #4
  br label %if.end238

if.else235:                                       ; preds = %if.end228
  %call236 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %op0.3, i32 %cond129, i64 %offset.0, i32 1, i32 1) #4
  br label %if.end238

if.end238:                                        ; preds = %if.then192, %if.then233, %if.else235
  %op0.4 = phi %struct.rtx_def* [ %call234, %if.then233 ], [ %call236, %if.else235 ], [ %op0.2, %if.then192 ]
  %cmp239 = icmp eq i32 %cond129, %mode
  br i1 %cmp239, label %return, label %if.then241

if.then241:                                       ; preds = %if.end238
  %call242 = tail call %struct.rtx_def* @convert_to_mode(i32 %mode.tmode, %struct.rtx_def* %op0.4, i32 %unsignedp) #4
  br label %return

if.end244:                                        ; preds = %lor.lhs.false173, %land.lhs.true140, %land.lhs.true134
  %32 = load i32* @target_flags, align 4, !tbaa !4
  %and245 = lshr i32 %32, 20
  %33 = and i32 %and245, 32
  %34 = add i32 %33, 32
  %conv2481160 = zext i32 %34 to i64
  %cmp249 = icmp ult i64 %conv2481160, %bitsize
  br i1 %cmp249, label %if.then251, label %if.end370

if.then251:                                       ; preds = %if.end244
  %sub2551153 = or i32 %33, 31
  %conv2561154 = zext i32 %sub2551153 to i64
  %add257 = add i64 %conv2561154, %bitsize
  %div262 = udiv i64 %add257, %conv2481160
  %conv263 = trunc i64 %div262 to i32
  %cmp264 = icmp eq %struct.rtx_def* %target, null
  br i1 %cmp264, label %if.then271, label %lor.lhs.false266

lor.lhs.false266:                                 ; preds = %if.then251
  %35 = bitcast %struct.rtx_def* %target to i32*
  %bf.load267 = load i32* %35, align 8
  %bf.clear268 = and i32 %bf.load267, 65535
  %cmp269 = icmp eq i32 %bf.clear268, 61
  br i1 %cmp269, label %if.end273, label %if.then271

if.then271:                                       ; preds = %lor.lhs.false266, %if.then251
  %call272 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %mode) #4
  br label %if.end273

if.end273:                                        ; preds = %lor.lhs.false266, %if.then271
  %target.addr.0 = phi %struct.rtx_def* [ %call272, %if.then271 ], [ %target, %lor.lhs.false266 ]
  %call274 = tail call %struct.rtx_def* @gen_rtx_fmt_e(i32 49, i32 0, %struct.rtx_def* %target.addr.0) #4
  %call275 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call274) #4
  %cmp2761191 = icmp eq i32 %conv263, 0
  br i1 %cmp2761191, label %for.end, label %for.body

for.body:                                         ; preds = %if.end273, %for.inc
  %i.01192 = phi i32 [ %inc, %for.inc ], [ 0, %if.end273 ]
  %36 = load i32* @target_flags, align 4, !tbaa !4
  %and278 = lshr i32 %36, 20
  %37 = and i32 %and278, 32
  %38 = add i32 %37, 32
  %mul281 = mul nsw i32 %38, %i.01192
  %call282 = tail call %struct.rtx_def* @operand_subword(%struct.rtx_def* %target.addr.0, i32 %i.01192, i32 1, i32 0) #4
  %39 = load i32* @target_flags, align 4, !tbaa !4
  %and283 = lshr i32 %39, 20
  %40 = and i32 %and283, 32
  %41 = add i32 %40, 32
  %conv286 = sext i32 %41 to i64
  %mul290 = mul i32 %41, %i.01192
  %conv291 = zext i32 %mul290 to i64
  %sub292 = sub i64 %bitsize, %conv291
  %cmp293 = icmp ult i64 %conv286, %sub292
  %conv286.sub292 = select i1 %cmp293, i64 %conv286, i64 %sub292
  %conv309 = zext i32 %mul281 to i64
  %add310 = add i64 %conv309, %bitnum
  %42 = load i32* @word_mode, align 4, !tbaa !0
  %call311 = tail call %struct.rtx_def* @extract_bit_field(%struct.rtx_def* %op0.2, i64 %conv286.sub292, i64 %add310, i32 1, %struct.rtx_def* %call282, i32 %mode, i32 %42, i64 %total_size.addr.0) #6
  %cmp312 = icmp eq %struct.rtx_def* %call282, null
  br i1 %cmp312, label %if.then314, label %if.end315

if.then314:                                       ; preds = %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 1199, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.extract_bit_field, i64 0, i64 0)) #5
  unreachable

if.end315:                                        ; preds = %for.body
  %cmp316 = icmp eq %struct.rtx_def* %call311, %call282
  br i1 %cmp316, label %for.inc, label %if.then318

if.then318:                                       ; preds = %if.end315
  %call319 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call282, %struct.rtx_def* %call311) #4
  br label %for.inc

for.inc:                                          ; preds = %if.end315, %if.then318
  %inc = add i32 %i.01192, 1
  %cmp276 = icmp ult i32 %inc, %conv263
  br i1 %cmp276, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %if.end273
  %tobool321 = icmp eq i32 %unsignedp, 0
  br i1 %tobool321, label %if.end357, label %if.then322

if.then322:                                       ; preds = %for.end
  %43 = bitcast %struct.rtx_def* %target.addr.0 to i32*
  %bf.load323 = load i32* %43, align 8
  %bf.lshr324 = lshr i32 %bf.load323, 16
  %bf.clear325 = and i32 %bf.lshr324, 255
  %idxprom3261155 = zext i32 %bf.clear325 to i64
  %arrayidx327 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom3261155
  %44 = load i8* %arrayidx327, align 1, !tbaa !1
  %conv328 = zext i8 %44 to i32
  %45 = load i32* @target_flags, align 4, !tbaa !4
  %and329 = lshr i32 %45, 23
  %46 = and i32 %and329, 4
  %47 = add i32 %46, 4
  %mul332 = mul i32 %47, %conv263
  %cmp333 = icmp ugt i32 %conv328, %mul332
  br i1 %cmp333, label %if.then335, label %return

if.then335:                                       ; preds = %if.then322
  %div346 = sdiv i32 %conv328, %47
  %cmp3481189 = icmp ult i32 %conv263, %div346
  br i1 %cmp3481189, label %for.body350, label %return

for.body350:                                      ; preds = %if.then335, %for.body350
  %i336.01190 = phi i32 [ %inc354, %for.body350 ], [ %conv263, %if.then335 ]
  %call351 = tail call %struct.rtx_def* @operand_subword(%struct.rtx_def* %target.addr.0, i32 %i336.01190, i32 1, i32 0) #4
  %48 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !3
  %call352 = tail call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call351, %struct.rtx_def* %48) #4
  %inc354 = add i32 %i336.01190, 1
  %exitcond = icmp eq i32 %inc354, %div346
  br i1 %exitcond, label %return, label %for.body350

if.end357:                                        ; preds = %for.end
  %idxprom358 = sext i32 %mode to i64
  %arrayidx359 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom358
  %49 = load i16* %arrayidx359, align 2, !tbaa !5
  %conv360 = zext i16 %49 to i64
  %sub361 = sub i64 %conv360, %bitsize
  %call362 = tail call %union.tree_node* @build_int_2_wide(i64 %sub361, i64 0) #4
  %call363 = tail call %struct.rtx_def* @expand_shift(i32 82, i32 %mode, %struct.rtx_def* %target.addr.0, %union.tree_node* %call362, %struct.rtx_def* null, i32 0) #6
  %call368 = tail call %union.tree_node* @build_int_2_wide(i64 %sub361, i64 0) #4
  %call369 = tail call %struct.rtx_def* @expand_shift(i32 83, i32 %mode, %struct.rtx_def* %call363, %union.tree_node* %call368, %struct.rtx_def* null, i32 0) #6
  br label %return

if.end370:                                        ; preds = %if.end244
  %call371 = tail call i32 @int_mode_for_mode(i32 %mode.tmode) #4
  %cmp372 = icmp eq i32 %call371, 51
  br i1 %cmp372, label %if.end376, label %if.end380

if.end376:                                        ; preds = %if.end370
  %call375 = tail call i32 @int_mode_for_mode(i32 %mode) #4
  %cmp377 = icmp eq i32 %call375, 51
  br i1 %cmp377, label %if.then379, label %if.end380

if.then379:                                       ; preds = %if.end376
  tail call void @fancy_abort(i8* getelementptr inbounds ([50 x i8]* @.str, i64 0, i64 0), i32 1244, i8* getelementptr inbounds ([18 x i8]* @__FUNCTION__.extract_bit_field, i64 0, i64 0)) #5
  unreachable

if.end380:                                        ; preds = %if.end370, %if.end376
  %int_mode.01188 = phi i32 [ %call375, %if.end376 ], [ %call371, %if.end370 ]
  %bf.load381 = load i32* %23, align 8
  %bf.clear382 = and i32 %bf.load381, 65535
  %cmp383 = icmp eq i32 %bf.clear382, 66
  br i1 %cmp383, label %if.else420, label %if.then385

if.then385:                                       ; preds = %if.end380
  %cmp386 = icmp eq i64 %offset.0, 0
  br i1 %cmp386, label %lor.lhs.false388, label %if.then400

lor.lhs.false388:                                 ; preds = %if.then385
  %bf.lshr390 = lshr i32 %bf.load381, 16
  %bf.clear391 = and i32 %bf.lshr390, 255
  %idxprom3921151 = zext i32 %bf.clear391 to i64
  %arrayidx393 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom3921151
  %50 = load i8* %arrayidx393, align 1, !tbaa !1
  %conv394 = zext i8 %50 to i32
  %51 = load i32* @target_flags, align 4, !tbaa !4
  %and395 = lshr i32 %51, 23
  %52 = and i32 %and395, 4
  %53 = add i32 %52, 4
  %cmp398 = icmp ugt i32 %conv394, %53
  br i1 %cmp398, label %if.then400, label %if.end422

if.then400:                                       ; preds = %if.then385, %lor.lhs.false388
  %cmp403 = icmp eq i32 %bf.clear382, 61
  br i1 %cmp403, label %if.end407, label %if.then405

if.then405:                                       ; preds = %if.then400
  %call406 = tail call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %op0.2) #4
  br label %if.end407

if.end407:                                        ; preds = %if.then400, %if.then405
  %op0.5 = phi %struct.rtx_def* [ %call406, %if.then405 ], [ %op0.2, %if.then400 ]
  %54 = load i32* @target_flags, align 4, !tbaa !4
  %and408 = lshr i32 %54, 20
  %55 = and i32 %and408, 32
  %56 = add i32 %55, 32
  %call411 = tail call i32 @mode_for_size(i32 %56, i32 1, i32 0) #4
  %57 = load i32* @target_flags, align 4, !tbaa !4
  %and412 = lshr i32 %57, 23
  %58 = and i32 %and412, 4
  %59 = add i32 %58, 4
  %conv4151152 = zext i32 %59 to i64
  %mul416 = mul i64 %conv4151152, %offset.0
  %conv417 = trunc i64 %mul416 to i32
  %call418 = tail call %struct.rtx_def* @gen_rtx_SUBREG(i32 %call411, %struct.rtx_def* %op0.5, i32 %conv417) #4
  br label %if.end422

if.else420:                                       ; preds = %if.end380
  %call421 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %str_rtx, i32 1) #4
  br label %if.end422

if.end422:                                        ; preds = %lor.lhs.false388, %if.end407, %if.else420
  %op0.7 = phi %struct.rtx_def* [ %call421, %if.else420 ], [ %call418, %if.end407 ], [ %op0.2, %lor.lhs.false388 ]
  %offset.1 = phi i64 [ %offset.0, %if.else420 ], [ 0, %if.end407 ], [ 0, %lor.lhs.false388 ]
  %tobool423 = icmp eq i32 %unsignedp, 0
  br i1 %tobool423, label %if.else613, label %if.then424

if.then424:                                       ; preds = %if.end422
  %idxprom425 = sext i32 %retval.0.i1169 to i64
  %arrayidx426 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom425
  %60 = load i16* %arrayidx426, align 2, !tbaa !5
  %conv427 = zext i16 %60 to i64
  %cmp428 = icmp ult i64 %conv427, %bitsize
  br i1 %cmp428, label %extzv_loses, label %land.lhs.true430

land.lhs.true430:                                 ; preds = %if.then424
  %61 = bitcast %struct.rtx_def* %op0.7 to i32*
  %bf.load431 = load i32* %61, align 8
  %bf.clear432 = and i32 %bf.load431, 65535
  switch i32 %bf.clear432, label %if.then447 [
    i32 61, label %land.lhs.true440
    i32 63, label %land.lhs.true440
  ]

land.lhs.true440:                                 ; preds = %land.lhs.true430, %land.lhs.true430
  %add441 = add i64 %rem, %bitsize
  %cmp445 = icmp ugt i64 %add441, %conv427
  br i1 %cmp445, label %extzv_loses, label %if.then447

if.then447:                                       ; preds = %land.lhs.true430, %land.lhs.true440
  %call448 = tail call %struct.rtx_def* @get_last_insn() #4
  %bf.load.i1172 = load i16* %8, align 8
  %cmp3.i1173 = icmp eq i16 %bf.load.i1172, 0
  %62 = load i32* @word_mode, align 4, !tbaa !0
  %bf.cast.i1175 = zext i16 %bf.load.i1172 to i32
  %retval.0.i1177 = select i1 %cmp3.i1173, i32 %62, i32 %bf.cast.i1175
  %bf.load450 = load i32* %61, align 8
  %bf.clear451 = and i32 %bf.load450, 65535
  %cmp452 = icmp eq i32 %bf.clear451, 66
  br i1 %cmp452, label %if.then454, label %if.end522

if.then454:                                       ; preds = %if.then447
  %63 = load i32* @volatile_ok, align 4, !tbaa !4
  store i32 1, i32* @volatile_ok, align 4, !tbaa !4
  %predicate = getelementptr inbounds %struct.insn_operand_data* %7, i64 1, i32 0
  %64 = load i32 (%struct.rtx_def*, i32)** %predicate, align 8, !tbaa !3
  %bf.load456 = load i32* %61, align 8
  %bf.lshr457 = lshr i32 %bf.load456, 16
  %bf.clear458 = and i32 %bf.lshr457, 255
  %call459 = tail call i32 %64(%struct.rtx_def* %op0.7, i32 %bf.clear458) #4
  %tobool460 = icmp eq i32 %call459, 0
  br i1 %tobool460, label %if.then461, label %if.else519

if.then461:                                       ; preds = %if.then454
  %bf.load462 = load i32* %61, align 8
  %bf.lshr463 = lshr i32 %bf.load462, 16
  %bf.clear464 = and i32 %bf.lshr463, 255
  %cmp465 = icmp eq i32 %bf.clear464, 51
  br i1 %cmp465, label %if.then479, label %lor.lhs.false467

lor.lhs.false467:                                 ; preds = %if.then461
  %idxprom4711150 = zext i32 %bf.clear464 to i64
  %arrayidx472 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom4711150
  %65 = load i8* %arrayidx472, align 1, !tbaa !1
  %idxprom474 = sext i32 %retval.0.i1177 to i64
  %arrayidx475 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom474
  %66 = load i8* %arrayidx475, align 1, !tbaa !1
  %cmp477 = icmp ugt i8 %65, %66
  br i1 %cmp477, label %if.then479, label %if.end501

if.then479:                                       ; preds = %lor.lhs.false467, %if.then461
  %conv480 = trunc i64 %bitsize to i32
  %conv481 = trunc i64 %bitnum to i32
  %arrayidx483 = getelementptr inbounds %struct.rtx_def* %op0.7, i64 0, i32 1, i64 1
  %rtmem = bitcast %union.rtunion_def* %arrayidx483 to %struct.mem_attrs**
  %67 = load %struct.mem_attrs** %rtmem, align 8, !tbaa !3
  %cmp484 = icmp eq %struct.mem_attrs* %67, null
  br i1 %cmp484, label %cond.end491, label %cond.true486

cond.true486:                                     ; preds = %if.then479
  %align = getelementptr inbounds %struct.mem_attrs* %67, i64 0, i32 4
  %68 = load i32* %align, align 4, !tbaa !4
  br label %cond.end491

cond.end491:                                      ; preds = %if.then479, %cond.true486
  %cond492 = phi i32 [ %68, %cond.true486 ], [ 8, %if.then479 ]
  %bf.lshr494 = lshr i32 %bf.load462, 27
  %bf.clear495 = and i32 %bf.lshr494, 1
  %call496 = tail call i32 @get_best_mode(i32 %conv480, i32 %conv481, i32 %cond492, i32 %retval.0.i1177, i32 %bf.clear495) #4
  br label %if.end501

if.end501:                                        ; preds = %lor.lhs.false467, %cond.end491
  %bestmode.0 = phi i32 [ %call496, %cond.end491 ], [ %bf.clear464, %lor.lhs.false467 ]
  %cmp502 = icmp eq i32 %bestmode.0, 0
  br i1 %cmp502, label %extzv_loses, label %if.end505

if.end505:                                        ; preds = %if.end501
  %idxprom506 = sext i32 %bestmode.0 to i64
  %arrayidx507 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom506
  %69 = load i16* %arrayidx507, align 2, !tbaa !5
  %conv509 = zext i16 %69 to i64
  %div510 = udiv i64 %bitnum, %conv509
  %arrayidx512 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom506
  %70 = load i8* %arrayidx512, align 1, !tbaa !1
  %conv513 = zext i8 %70 to i64
  %mul514 = mul i64 %conv513, %div510
  %rem516 = urem i64 %bitnum, %conv509
  %call517 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %op0.7, i32 %bestmode.0, i64 %mul514, i32 1, i32 1) #4
  %call518 = tail call %struct.rtx_def* @force_reg(i32 %bestmode.0, %struct.rtx_def* %call517) #4
  br label %if.end521

if.else519:                                       ; preds = %if.then454
  %71 = load i32* @byte_mode, align 4, !tbaa !0
  %call520 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %op0.7, i32 %71, i64 %offset.1, i32 1, i32 1) #4
  br label %if.end521

if.end521:                                        ; preds = %if.else519, %if.end505
  %xbitpos.0 = phi i64 [ %rem, %if.else519 ], [ %rem516, %if.end505 ]
  %xop0.0 = phi %struct.rtx_def* [ %call520, %if.else519 ], [ %call518, %if.end505 ]
  store i32 %63, i32* @volatile_ok, align 4, !tbaa !4
  %.phi.trans.insert1209 = bitcast %struct.rtx_def* %xop0.0 to i32*
  %bf.load523.pre = load i32* %.phi.trans.insert1209, align 8
  br label %if.end522

if.end522:                                        ; preds = %if.end521, %if.then447
  %bf.load535 = phi i32 [ %bf.load523.pre, %if.end521 ], [ %bf.load450, %if.then447 ]
  %xbitpos.1 = phi i64 [ %xbitpos.0, %if.end521 ], [ %rem, %if.then447 ]
  %xop0.1 = phi %struct.rtx_def* [ %xop0.0, %if.end521 ], [ %op0.7, %if.then447 ]
  %bf.clear524 = and i32 %bf.load535, 65535
  switch i32 %bf.clear524, label %if.end547 [
    i32 63, label %land.lhs.true527
    i32 61, label %land.lhs.true539
  ]

land.lhs.true527:                                 ; preds = %if.end522
  %bf.lshr529 = lshr i32 %bf.load535, 16
  %bf.clear530 = and i32 %bf.lshr529, 255
  %cmp531 = icmp eq i32 %bf.clear530, %retval.0.i1177
  br i1 %cmp531, label %if.end547, label %extzv_loses

land.lhs.true539:                                 ; preds = %if.end522
  %bf.lshr541 = lshr i32 %bf.load535, 16
  %bf.clear542 = and i32 %bf.lshr541, 255
  %cmp543 = icmp eq i32 %bf.clear542, %retval.0.i1177
  br i1 %cmp543, label %if.end547, label %if.then545

if.then545:                                       ; preds = %land.lhs.true539
  %call546 = tail call %struct.rtx_def* @gen_rtx_SUBREG(i32 %retval.0.i1177, %struct.rtx_def* %xop0.1, i32 0) #4
  br label %if.end547

if.end547:                                        ; preds = %if.end522, %land.lhs.true527, %land.lhs.true539, %if.then545
  %xop0.2 = phi %struct.rtx_def* [ %call546, %if.then545 ], [ %xop0.1, %land.lhs.true539 ], [ %xop0.1, %land.lhs.true527 ], [ %xop0.1, %if.end522 ]
  %idxprom548 = sext i32 %retval.0.i1177 to i64
  %cmp551 = icmp eq %struct.rtx_def* %target, null
  br i1 %cmp551, label %if.then560, label %lor.lhs.false553

lor.lhs.false553:                                 ; preds = %if.end547
  %72 = load i32* @flag_force_mem, align 4, !tbaa !4
  %tobool554 = icmp eq i32 %72, 0
  br i1 %tobool554, label %if.end562, label %land.lhs.true555

land.lhs.true555:                                 ; preds = %lor.lhs.false553
  %73 = bitcast %struct.rtx_def* %target to i32*
  %bf.load556 = load i32* %73, align 8
  %bf.clear557 = and i32 %bf.load556, 65535
  %cmp558 = icmp eq i32 %bf.clear557, 66
  br i1 %cmp558, label %if.then560, label %if.end562

if.then560:                                       ; preds = %land.lhs.true555, %if.end547
  %call561 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %mode.tmode) #4
  br label %if.end562

if.end562:                                        ; preds = %lor.lhs.false553, %if.then560, %land.lhs.true555
  %xtarget.0 = phi %struct.rtx_def* [ %call561, %if.then560 ], [ %target, %land.lhs.true555 ], [ %target, %lor.lhs.false553 ]
  %74 = bitcast %struct.rtx_def* %xtarget.0 to i32*
  %bf.load563 = load i32* %74, align 8
  %bf.lshr564 = lshr i32 %bf.load563, 16
  %bf.clear565 = and i32 %bf.lshr564, 255
  %cmp566 = icmp eq i32 %bf.clear565, %retval.0.i1177
  br i1 %cmp566, label %if.end592, label %if.then568

if.then568:                                       ; preds = %if.end562
  %bf.clear570 = and i32 %bf.load563, 65535
  %cmp571 = icmp eq i32 %bf.clear570, 61
  br i1 %cmp571, label %if.then573, label %if.else589

if.then573:                                       ; preds = %if.then568
  %arrayidx575 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom548
  %75 = load i8* %arrayidx575, align 1, !tbaa !1
  %idxprom5801149 = zext i32 %bf.clear565 to i64
  %arrayidx581 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom5801149
  %76 = load i8* %arrayidx581, align 1, !tbaa !1
  %cmp583 = icmp ugt i8 %75, %76
  %call585 = tail call %struct.rtx_def* @gen_lowpart(i32 %retval.0.i1177, %struct.rtx_def* %xtarget.0) #4
  %call585. = select i1 %cmp583, %struct.rtx_def* %call585, %struct.rtx_def* null
  br label %if.end592

if.else589:                                       ; preds = %if.then568
  %call590 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %retval.0.i1177) #4
  br label %if.end592

if.end592:                                        ; preds = %if.then573, %if.end562, %if.else589
  %xtarget.1 = phi %struct.rtx_def* [ %call590, %if.else589 ], [ %xtarget.0, %if.end562 ], [ %call585, %if.then573 ]
  %xspec_target_subreg.0 = phi %struct.rtx_def* [ null, %if.else589 ], [ null, %if.end562 ], [ %call585., %if.then573 ]
  %predicate594 = getelementptr inbounds %struct.insn_operand_data* %7, i64 0, i32 0
  %77 = load i32 (%struct.rtx_def*, i32)** %predicate594, align 8, !tbaa !3
  %call595 = tail call i32 %77(%struct.rtx_def* %xtarget.1, i32 %retval.0.i1177) #4
  %tobool596 = icmp eq i32 %call595, 0
  br i1 %tobool596, label %if.then597, label %if.end599

if.then597:                                       ; preds = %if.end592
  %call598 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %retval.0.i1177) #4
  br label %if.end599

if.end599:                                        ; preds = %if.end592, %if.then597
  %xtarget.2 = phi %struct.rtx_def* [ %xtarget.1, %if.end592 ], [ %call598, %if.then597 ]
  %call600 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %bitsize) #4
  %call601 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %xbitpos.1) #4
  %call602 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %xtarget.2, i32 1) #4
  %call603 = tail call %struct.rtx_def* @gen_extzv(%struct.rtx_def* %call602, %struct.rtx_def* %xop0.2, %struct.rtx_def* %call600, %struct.rtx_def* %call601) #4
  %tobool604 = icmp eq %struct.rtx_def* %call603, null
  br i1 %tobool604, label %if.else607, label %if.then605

if.then605:                                       ; preds = %if.end599
  %call606 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call603) #4
  br label %if.end825

if.else607:                                       ; preds = %if.end599
  tail call void @delete_insns_since(%struct.rtx_def* %call448) #4
  %call608 = tail call fastcc %struct.rtx_def* @extract_fixed_bit_field(i32 %int_mode.01188, %struct.rtx_def* %op0.7, i64 %offset.1, i64 %bitsize, i64 %rem, %struct.rtx_def* %target, i32 1) #6
  br label %if.end825

extzv_loses:                                      ; preds = %land.lhs.true527, %if.then424, %land.lhs.true440, %if.end501
  %call611 = tail call fastcc %struct.rtx_def* @extract_fixed_bit_field(i32 %int_mode.01188, %struct.rtx_def* %op0.7, i64 %offset.1, i64 %bitsize, i64 %rem, %struct.rtx_def* %target, i32 1) #6
  br label %if.end825

if.else613:                                       ; preds = %if.end422
  %idxprom614 = sext i32 %retval.0.i to i64
  %arrayidx615 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom614
  %78 = load i16* %arrayidx615, align 2, !tbaa !5
  %conv616 = zext i16 %78 to i64
  %cmp617 = icmp ult i64 %conv616, %bitsize
  br i1 %cmp617, label %extv_loses, label %land.lhs.true619

land.lhs.true619:                                 ; preds = %if.else613
  %79 = bitcast %struct.rtx_def* %op0.7 to i32*
  %bf.load620 = load i32* %79, align 8
  %bf.clear621 = and i32 %bf.load620, 65535
  switch i32 %bf.clear621, label %if.then636 [
    i32 61, label %land.lhs.true629
    i32 63, label %land.lhs.true629
  ]

land.lhs.true629:                                 ; preds = %land.lhs.true619, %land.lhs.true619
  %add630 = add i64 %rem, %bitsize
  %cmp634 = icmp ugt i64 %add630, %conv616
  br i1 %cmp634, label %extv_loses, label %if.then636

if.then636:                                       ; preds = %land.lhs.true619, %land.lhs.true629
  %call644 = tail call %struct.rtx_def* @get_last_insn() #4
  %bf.load.i1180 = load i16* %5, align 8
  %cmp3.i1181 = icmp eq i16 %bf.load.i1180, 0
  %80 = load i32* @word_mode, align 4, !tbaa !0
  %bf.cast.i1183 = zext i16 %bf.load.i1180 to i32
  %retval.0.i1185 = select i1 %cmp3.i1181, i32 %80, i32 %bf.cast.i1183
  %bf.load652 = load i32* %79, align 8
  %bf.clear653 = and i32 %bf.load652, 65535
  %cmp654 = icmp eq i32 %bf.clear653, 66
  br i1 %cmp654, label %if.then656, label %if.end732

if.then656:                                       ; preds = %if.then636
  %predicate658 = getelementptr inbounds %struct.insn_operand_data* %4, i64 1, i32 0
  %81 = load i32 (%struct.rtx_def*, i32)** %predicate658, align 8, !tbaa !3
  %bf.lshr660 = lshr i32 %bf.load652, 16
  %bf.clear661 = and i32 %bf.lshr660, 255
  %call662 = tail call i32 %81(%struct.rtx_def* %op0.7, i32 %bf.clear661) #4
  %tobool663 = icmp eq i32 %call662, 0
  br i1 %tobool663, label %if.then664, label %if.else728

if.then664:                                       ; preds = %if.then656
  %bf.load666 = load i32* %79, align 8
  %bf.lshr667 = lshr i32 %bf.load666, 16
  %bf.clear668 = and i32 %bf.lshr667, 255
  %cmp669 = icmp eq i32 %bf.clear668, 51
  br i1 %cmp669, label %if.then683, label %lor.lhs.false671

lor.lhs.false671:                                 ; preds = %if.then664
  %idxprom6751146 = zext i32 %bf.clear668 to i64
  %arrayidx676 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom6751146
  %82 = load i8* %arrayidx676, align 1, !tbaa !1
  %idxprom678 = sext i32 %retval.0.i1185 to i64
  %arrayidx679 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom678
  %83 = load i8* %arrayidx679, align 1, !tbaa !1
  %cmp681 = icmp ugt i8 %82, %83
  br i1 %cmp681, label %if.then683, label %if.end707

if.then683:                                       ; preds = %lor.lhs.false671, %if.then664
  %conv684 = trunc i64 %bitsize to i32
  %conv685 = trunc i64 %bitnum to i32
  %arrayidx687 = getelementptr inbounds %struct.rtx_def* %op0.7, i64 0, i32 1, i64 1
  %rtmem688 = bitcast %union.rtunion_def* %arrayidx687 to %struct.mem_attrs**
  %84 = load %struct.mem_attrs** %rtmem688, align 8, !tbaa !3
  %cmp689 = icmp eq %struct.mem_attrs* %84, null
  br i1 %cmp689, label %cond.end697, label %cond.true691

cond.true691:                                     ; preds = %if.then683
  %align695 = getelementptr inbounds %struct.mem_attrs* %84, i64 0, i32 4
  %85 = load i32* %align695, align 4, !tbaa !4
  br label %cond.end697

cond.end697:                                      ; preds = %if.then683, %cond.true691
  %cond698 = phi i32 [ %85, %cond.true691 ], [ 8, %if.then683 ]
  %bf.lshr700 = lshr i32 %bf.load666, 27
  %bf.clear701 = and i32 %bf.lshr700, 1
  %call702 = tail call i32 @get_best_mode(i32 %conv684, i32 %conv685, i32 %cond698, i32 %retval.0.i1185, i32 %bf.clear701) #4
  br label %if.end707

if.end707:                                        ; preds = %lor.lhs.false671, %cond.end697
  %bestmode665.0 = phi i32 [ %call702, %cond.end697 ], [ %bf.clear668, %lor.lhs.false671 ]
  %cmp708 = icmp eq i32 %bestmode665.0, 0
  br i1 %cmp708, label %extv_loses, label %if.end711

if.end711:                                        ; preds = %if.end707
  %idxprom712 = sext i32 %bestmode665.0 to i64
  %arrayidx713 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom712
  %86 = load i16* %arrayidx713, align 2, !tbaa !5
  %conv715 = zext i16 %86 to i64
  %div716 = udiv i64 %bitnum, %conv715
  %arrayidx718 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom712
  %87 = load i8* %arrayidx718, align 1, !tbaa !1
  %conv719 = zext i8 %87 to i64
  %rem723 = urem i64 %bitnum, %conv715
  %mul720 = shl i64 %div716, 32
  %sext1147 = mul i64 %mul720, %conv719
  %conv725 = ashr exact i64 %sext1147, 32
  %call726 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %op0.7, i32 %bestmode665.0, i64 %conv725, i32 1, i32 1) #4
  %call727 = tail call %struct.rtx_def* @force_reg(i32 %bestmode665.0, %struct.rtx_def* %call726) #4
  br label %if.end732

if.else728:                                       ; preds = %if.then656
  %88 = load i32* @byte_mode, align 4, !tbaa !0
  %sext1148 = shl i64 %offset.1, 32
  %conv729 = ashr exact i64 %sext1148, 32
  %call730 = tail call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %op0.7, i32 %88, i64 %conv729, i32 1, i32 1) #4
  br label %if.end732

if.end732:                                        ; preds = %if.end711, %if.else728, %if.then636
  %xbitpos637.0 = phi i64 [ %rem, %if.else728 ], [ %rem723, %if.end711 ], [ %rem, %if.then636 ]
  %xop0645.0 = phi %struct.rtx_def* [ %call730, %if.else728 ], [ %call727, %if.end711 ], [ %op0.7, %if.then636 ]
  %89 = bitcast %struct.rtx_def* %xop0645.0 to i32*
  %bf.load733 = load i32* %89, align 8
  %bf.clear734 = and i32 %bf.load733, 65535
  switch i32 %bf.clear734, label %if.end757 [
    i32 63, label %land.lhs.true737
    i32 61, label %land.lhs.true749
  ]

land.lhs.true737:                                 ; preds = %if.end732
  %bf.lshr739 = lshr i32 %bf.load733, 16
  %bf.clear740 = and i32 %bf.lshr739, 255
  %cmp741 = icmp eq i32 %bf.clear740, %retval.0.i1185
  br i1 %cmp741, label %if.end757, label %extv_loses

land.lhs.true749:                                 ; preds = %if.end732
  %bf.lshr751 = lshr i32 %bf.load733, 16
  %bf.clear752 = and i32 %bf.lshr751, 255
  %cmp753 = icmp eq i32 %bf.clear752, %retval.0.i1185
  br i1 %cmp753, label %if.end757, label %if.then755

if.then755:                                       ; preds = %land.lhs.true749
  %call756 = tail call %struct.rtx_def* @gen_rtx_SUBREG(i32 %retval.0.i1185, %struct.rtx_def* %xop0645.0, i32 0) #4
  br label %if.end757

if.end757:                                        ; preds = %if.end732, %land.lhs.true737, %land.lhs.true749, %if.then755
  %xop0645.1 = phi %struct.rtx_def* [ %call756, %if.then755 ], [ %xop0645.0, %land.lhs.true749 ], [ %xop0645.0, %land.lhs.true737 ], [ %xop0645.0, %if.end732 ]
  %idxprom758 = sext i32 %retval.0.i1185 to i64
  %cmp761 = icmp eq %struct.rtx_def* %target, null
  br i1 %cmp761, label %if.then770, label %lor.lhs.false763

lor.lhs.false763:                                 ; preds = %if.end757
  %90 = load i32* @flag_force_mem, align 4, !tbaa !4
  %tobool764 = icmp eq i32 %90, 0
  br i1 %tobool764, label %if.end772, label %land.lhs.true765

land.lhs.true765:                                 ; preds = %lor.lhs.false763
  %91 = bitcast %struct.rtx_def* %target to i32*
  %bf.load766 = load i32* %91, align 8
  %bf.clear767 = and i32 %bf.load766, 65535
  %cmp768 = icmp eq i32 %bf.clear767, 66
  br i1 %cmp768, label %if.then770, label %if.end772

if.then770:                                       ; preds = %land.lhs.true765, %if.end757
  %call771 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %mode.tmode) #4
  br label %if.end772

if.end772:                                        ; preds = %lor.lhs.false763, %if.then770, %land.lhs.true765
  %xtarget646.0 = phi %struct.rtx_def* [ %call771, %if.then770 ], [ %target, %land.lhs.true765 ], [ %target, %lor.lhs.false763 ]
  %92 = bitcast %struct.rtx_def* %xtarget646.0 to i32*
  %bf.load773 = load i32* %92, align 8
  %bf.lshr774 = lshr i32 %bf.load773, 16
  %bf.clear775 = and i32 %bf.lshr774, 255
  %cmp776 = icmp eq i32 %bf.clear775, %retval.0.i1185
  br i1 %cmp776, label %if.end803, label %if.then778

if.then778:                                       ; preds = %if.end772
  %bf.clear780 = and i32 %bf.load773, 65535
  %cmp781 = icmp eq i32 %bf.clear780, 61
  br i1 %cmp781, label %if.then783, label %if.else800

if.then783:                                       ; preds = %if.then778
  %arrayidx786 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom758
  %93 = load i8* %arrayidx786, align 1, !tbaa !1
  %idxprom7911145 = zext i32 %bf.clear775 to i64
  %arrayidx792 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom7911145
  %94 = load i8* %arrayidx792, align 1, !tbaa !1
  %cmp794 = icmp ugt i8 %93, %94
  %call796 = tail call %struct.rtx_def* @gen_lowpart(i32 %retval.0.i1185, %struct.rtx_def* %xtarget646.0) #4
  %call796. = select i1 %cmp794, %struct.rtx_def* %call796, %struct.rtx_def* null
  br label %if.end803

if.else800:                                       ; preds = %if.then778
  %call801 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %retval.0.i1185) #4
  br label %if.end803

if.end803:                                        ; preds = %if.then783, %if.end772, %if.else800
  %xtarget646.1 = phi %struct.rtx_def* [ %call801, %if.else800 ], [ %xtarget646.0, %if.end772 ], [ %call796, %if.then783 ]
  %xspec_target_subreg648.0 = phi %struct.rtx_def* [ null, %if.else800 ], [ null, %if.end772 ], [ %call796., %if.then783 ]
  %predicate805 = getelementptr inbounds %struct.insn_operand_data* %4, i64 0, i32 0
  %95 = load i32 (%struct.rtx_def*, i32)** %predicate805, align 8, !tbaa !3
  %call806 = tail call i32 %95(%struct.rtx_def* %xtarget646.1, i32 %retval.0.i1185) #4
  %tobool807 = icmp eq i32 %call806, 0
  br i1 %tobool807, label %if.then808, label %if.end810

if.then808:                                       ; preds = %if.end803
  %call809 = tail call %struct.rtx_def* @gen_reg_rtx(i32 %retval.0.i1185) #4
  br label %if.end810

if.end810:                                        ; preds = %if.end803, %if.then808
  %xtarget646.2 = phi %struct.rtx_def* [ %xtarget646.1, %if.end803 ], [ %call809, %if.then808 ]
  %call811 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %bitsize) #4
  %sext = shl i64 %xbitpos637.0, 32
  %conv812 = ashr exact i64 %sext, 32
  %call813 = tail call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv812) #4
  %call814 = tail call %struct.rtx_def* @protect_from_queue(%struct.rtx_def* %xtarget646.2, i32 1) #4
  %call815 = tail call %struct.rtx_def* @gen_extv(%struct.rtx_def* %call814, %struct.rtx_def* %xop0645.1, %struct.rtx_def* %call811, %struct.rtx_def* %call813) #4
  %tobool816 = icmp eq %struct.rtx_def* %call815, null
  br i1 %tobool816, label %if.else819, label %if.then817

if.then817:                                       ; preds = %if.end810
  %call818 = tail call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call815) #4
  br label %if.end825

if.else819:                                       ; preds = %if.end810
  tail call void @delete_insns_since(%struct.rtx_def* %call644) #4
  %call820 = tail call fastcc %struct.rtx_def* @extract_fixed_bit_field(i32 %int_mode.01188, %struct.rtx_def* %op0.7, i64 %offset.1, i64 %bitsize, i64 %rem, %struct.rtx_def* %target, i32 0) #6
  br label %if.end825

extv_loses:                                       ; preds = %land.lhs.true737, %if.else613, %land.lhs.true629, %if.end707
  %call823 = tail call fastcc %struct.rtx_def* @extract_fixed_bit_field(i32 %int_mode.01188, %struct.rtx_def* %op0.7, i64 %offset.1, i64 %bitsize, i64 %rem, %struct.rtx_def* %target, i32 0) #6
  br label %if.end825

if.end825:                                        ; preds = %extv_loses, %if.else819, %if.then817, %extzv_loses, %if.else607, %if.then605
  %spec_target_subreg.0 = phi %struct.rtx_def* [ null, %extzv_loses ], [ %xspec_target_subreg.0, %if.then605 ], [ null, %if.else607 ], [ null, %extv_loses ], [ %xspec_target_subreg648.0, %if.then817 ], [ null, %if.else819 ]
  %spec_target.0 = phi %struct.rtx_def* [ %target, %extzv_loses ], [ %xtarget.0, %if.then605 ], [ %target, %if.else607 ], [ %target, %extv_loses ], [ %xtarget646.0, %if.then817 ], [ %target, %if.else819 ]
  %target.addr.1 = phi %struct.rtx_def* [ %call611, %extzv_loses ], [ %xtarget.2, %if.then605 ], [ %call608, %if.else607 ], [ %call823, %extv_loses ], [ %xtarget646.2, %if.then817 ], [ %call820, %if.else819 ]
  %cmp826 = icmp eq %struct.rtx_def* %target.addr.1, %spec_target.0
  %cmp830 = icmp eq %struct.rtx_def* %target.addr.1, %spec_target_subreg.0
  %or.cond1214 = or i1 %cmp826, %cmp830
  br i1 %or.cond1214, label %return, label %if.end833

if.end833:                                        ; preds = %if.end825
  %96 = bitcast %struct.rtx_def* %target.addr.1 to i32*
  %bf.load834 = load i32* %96, align 8
  %bf.lshr835 = lshr i32 %bf.load834, 16
  %bf.clear836 = and i32 %bf.lshr835, 255
  %cmp837 = icmp eq i32 %bf.clear836, %mode.tmode
  %cmp843 = icmp eq i32 %bf.clear836, %mode
  %or.cond1162 = or i1 %cmp837, %cmp843
  br i1 %or.cond1162, label %return, label %if.then845

if.then845:                                       ; preds = %if.end833
  switch i32 %22, label %if.then855 [
    i32 1, label %if.else862
    i32 3, label %if.else862
  ]

if.then855:                                       ; preds = %if.then845
  %arrayidx857 = getelementptr inbounds [59 x i16]* @mode_bitsize, i64 0, i64 %idxprom114
  %97 = load i16* %arrayidx857, align 2, !tbaa !5
  %conv858 = zext i16 %97 to i32
  %call859 = tail call i32 @mode_for_size(i32 %conv858, i32 1, i32 0) #4
  %call860 = tail call %struct.rtx_def* @convert_to_mode(i32 %call859, %struct.rtx_def* %target.addr.1, i32 %unsignedp) #4
  %call861 = tail call %struct.rtx_def* @gen_lowpart(i32 %mode.tmode, %struct.rtx_def* %call860) #4
  br label %return

if.else862:                                       ; preds = %if.then845, %if.then845
  %call863 = tail call %struct.rtx_def* @convert_to_mode(i32 %mode.tmode, %struct.rtx_def* %target.addr.1, i32 %unsignedp) #4
  br label %return

return:                                           ; preds = %if.then335, %for.body350, %if.end833, %if.end825, %if.then322, %if.end238, %land.lhs.true59, %if.else862, %if.then855, %if.end357, %if.then241
  %retval.0 = phi %struct.rtx_def* [ %call242, %if.then241 ], [ %call369, %if.end357 ], [ %call861, %if.then855 ], [ %call863, %if.else862 ], [ %op0.0, %land.lhs.true59 ], [ %op0.4, %if.end238 ], [ %target.addr.0, %if.then322 ], [ %spec_target.0, %if.end825 ], [ %target.addr.1, %if.end833 ], [ %target.addr.0, %for.body350 ], [ %target.addr.0, %if.then335 ]
  ret %struct.rtx_def* %retval.0
}
