define %struct.rtx_def* @expand_builtin_expect_jump(%union.tree_node* nocapture %exp, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #0 {
entry:
  %operands = getelementptr inbounds %union.tree_node* %exp, i64 0, i32 0, i32 2
  %arrayidx = getelementptr inbounds i32* %operands, i64 2
  %0 = bitcast i32* %arrayidx to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !3
  %value = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 2
  %2 = bitcast i32* %value to %union.tree_node**
  %3 = load %union.tree_node** %2, align 8, !tbaa !3
  %chain = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0
  %4 = load %union.tree_node** %chain, align 8, !tbaa !3
  %value3 = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 2
  %5 = bitcast i32* %value3 to %union.tree_node**
  %6 = load %union.tree_node** %5, align 8, !tbaa !3
  %type = getelementptr inbounds %union.tree_node* %6, i64 0, i32 0, i32 0, i32 1
  %7 = load %union.tree_node** %type, align 8, !tbaa !3
  %code = getelementptr inbounds %union.tree_node* %7, i64 0, i32 0, i32 0, i32 2
  %8 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %8, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp = icmp eq i32 %bf.clear, 6
  br i1 %cmp, label %land.lhs.true, label %return

land.lhs.true:                                    ; preds = %entry
  %call = tail call i32 @integer_zerop(%union.tree_node* %6) #7
  %tobool = icmp eq i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call6 = tail call i32 @integer_onep(%union.tree_node* %6) #7
  %tobool7 = icmp eq i32 %call6, 0
  br i1 %tobool7, label %return, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %call8 = tail call i32 @unsafe_for_reeval(%union.tree_node* %3) #7
  switch i32 %call8, label %sw.epilog [
    i32 2, label %return
    i32 1, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then
  %call9 = tail call %union.tree_node* @unsave_expr(%union.tree_node* %3) #7
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then, %sw.bb
  %arg0.0 = phi %union.tree_node* [ %3, %if.then ], [ %call9, %sw.bb ]
  tail call void @start_sequence() #7
  tail call void @do_jump(%union.tree_node* %arg0.0, %struct.rtx_def* %if_false_label, %struct.rtx_def* %if_true_label) #7
  %call11 = tail call %struct.rtx_def* @gen_sequence() #7
  tail call void @end_sequence() #7
  %arrayidx12 = getelementptr inbounds %struct.rtx_def* %call11, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtvec_def**
  %9 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !3
  %num_elem129 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 0
  %10 = load i32* %num_elem129, align 4, !tbaa !0
  %cmp13130 = icmp sgt i32 %10, 0
  br i1 %cmp13130, label %for.body, label %for.end

for.body:                                         ; preds = %sw.epilog, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %sw.epilog ]
  %11 = phi %struct.rtvec_def* [ %24, %for.inc ], [ %9, %sw.epilog ]
  %num_jumps.0132 = phi i32 [ %num_jumps.1, %for.inc ], [ 0, %sw.epilog ]
  %arrayidx17 = getelementptr inbounds %struct.rtvec_def* %11, i64 0, i32 1, i64 %indvars.iv
  %12 = load %struct.rtx_def** %arrayidx17, align 8, !tbaa !3
  %13 = bitcast %struct.rtx_def* %12 to i32*
  %bf.load18 = load i32* %13, align 8
  %bf.clear19 = and i32 %bf.load18, 65535
  %cmp20 = icmp eq i32 %bf.clear19, 33
  br i1 %cmp20, label %land.lhs.true21, label %for.inc

land.lhs.true21:                                  ; preds = %for.body
  %call22 = tail call i32 @any_condjump_p(%struct.rtx_def* %12) #7
  %tobool23 = icmp eq i32 %call22, 0
  br i1 %tobool23, label %for.inc, label %land.lhs.true24

land.lhs.true24:                                  ; preds = %land.lhs.true21
  %call25 = tail call %struct.rtx_def* @pc_set(%struct.rtx_def* %12) #7
  %cmp26 = icmp eq %struct.rtx_def* %call25, null
  br i1 %cmp26, label %for.inc, label %if.then27

if.then27:                                        ; preds = %land.lhs.true24
  %arrayidx29 = getelementptr inbounds %struct.rtx_def* %call25, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**
  %14 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %15 = bitcast %struct.rtx_def* %14 to i32*
  %bf.load30 = load i32* %15, align 8
  %bf.clear31 = and i32 %bf.load30, 65535
  %cmp32 = icmp eq i32 %bf.clear31, 72
  br i1 %cmp32, label %if.end, label %for.inc

if.end:                                           ; preds = %if.then27
  %arrayidx35 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 1
  %rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**
  %16 = load %struct.rtx_def** %rtx36, align 8, !tbaa !3
  %17 = bitcast %struct.rtx_def* %16 to i32*
  %bf.load37 = load i32* %17, align 8
  %bf.clear38 = and i32 %bf.load37, 65535
  %cmp39 = icmp eq i32 %bf.clear38, 67
  br i1 %cmp39, label %if.then40, label %if.else

if.then40:                                        ; preds = %if.end
  %arrayidx45 = getelementptr inbounds %struct.rtx_def* %16, i64 0, i32 1, i64 0
  %rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**
  %18 = load %struct.rtx_def** %rtx46, align 8, !tbaa !3
  br label %if.end80

if.else:                                          ; preds = %if.end
  %arrayidx48 = getelementptr inbounds %struct.rtx_def* %14, i64 0, i32 1, i64 2
  %rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**
  %19 = load %struct.rtx_def** %rtx49, align 8, !tbaa !3
  %20 = bitcast %struct.rtx_def* %19 to i32*
  %bf.load50 = load i32* %20, align 8
  %bf.clear51 = and i32 %bf.load50, 65535
  %cmp52 = icmp eq i32 %bf.clear51, 67
  br i1 %cmp52, label %if.then53, label %if.else60

if.then53:                                        ; preds = %if.else
  %arrayidx58 = getelementptr inbounds %struct.rtx_def* %19, i64 0, i32 1, i64 0
  %rtx59 = bitcast %union.rtunion_def* %arrayidx58 to %struct.rtx_def**
  %21 = load %struct.rtx_def** %rtx59, align 8, !tbaa !3
  br label %if.end80

if.else60:                                        ; preds = %if.else
  %cmp66 = icmp eq i32 %bf.clear38, 51
  br i1 %cmp66, label %if.end80, label %if.else68

if.else68:                                        ; preds = %if.else60
  %cmp74 = icmp eq i32 %bf.clear51, 51
  br i1 %cmp74, label %if.end80, label %for.inc

if.end80:                                         ; preds = %if.else68, %if.else60, %if.then53, %if.then40
  %label.0 = phi %struct.rtx_def* [ %18, %if.then40 ], [ %21, %if.then53 ], [ null, %if.else60 ], [ null, %if.else68 ]
  %taken.0 = phi i32 [ 1, %if.then40 ], [ 0, %if.then53 ], [ 1, %if.else60 ], [ 0, %if.else68 ]
  %call81 = tail call i32 @integer_zerop(%union.tree_node* %6) #7
  %not.tobool82 = icmp ne i32 %call81, 0
  %22 = zext i1 %not.tobool82 to i32
  %taken.0. = xor i32 %22, %taken.0
  %cmp85 = icmp eq %struct.rtx_def* %label.0, null
  br i1 %cmp85, label %if.end96, label %if.else87

if.else87:                                        ; preds = %if.end80
  %cmp88 = icmp eq %struct.rtx_def* %label.0, %if_false_label
  br i1 %cmp88, label %if.then89, label %if.else91

if.then89:                                        ; preds = %if.else87
  %23 = xor i32 %taken.0., 1
  br label %if.end96

if.else91:                                        ; preds = %if.else87
  %cmp92 = icmp eq %struct.rtx_def* %label.0, %if_true_label
  br i1 %cmp92, label %if.end96, label %for.inc

if.end96:                                         ; preds = %if.else91, %if.then89, %if.end80
  %taken.2 = phi i32 [ %taken.0., %if.end80 ], [ %23, %if.then89 ], [ %taken.0., %if.else91 ]
  %inc = add nsw i32 %num_jumps.0132, 1
  tail call void @predict_insn_def(%struct.rtx_def* %12, i32 6, i32 %taken.2) #7
  br label %for.inc

for.inc:                                          ; preds = %if.else91, %if.else68, %if.then27, %land.lhs.true24, %land.lhs.true21, %for.body, %if.end96
  %num_jumps.1 = phi i32 [ %inc, %if.end96 ], [ %num_jumps.0132, %for.body ], [ %num_jumps.0132, %land.lhs.true21 ], [ %num_jumps.0132, %land.lhs.true24 ], [ %num_jumps.0132, %if.then27 ], [ %num_jumps.0132, %if.else68 ], [ %num_jumps.0132, %if.else91 ]
  %indvars.iv.next = add i64 %indvars.iv, 1
  %24 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !3
  %num_elem = getelementptr inbounds %struct.rtvec_def* %24, i64 0, i32 0
  %25 = load i32* %num_elem, align 4, !tbaa !0
  %26 = trunc i64 %indvars.iv.next to i32
  %cmp13 = icmp slt i32 %26, %25
  br i1 %cmp13, label %for.body, label %for.end

for.end:                                          ; preds = %for.inc, %sw.epilog
  %num_jumps.0.lcssa = phi i32 [ 0, %sw.epilog ], [ %num_jumps.1, %for.inc ]
  %cmp99 = icmp eq i32 %num_jumps.0.lcssa, 0
  %.call11 = select i1 %cmp99, %struct.rtx_def* null, %struct.rtx_def* %call11
  ret %struct.rtx_def* %.call11

return:                                           ; preds = %entry, %lor.lhs.false, %if.then
  ret %struct.rtx_def* null
}
