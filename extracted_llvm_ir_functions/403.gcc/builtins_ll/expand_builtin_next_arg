define internal fastcc %struct.rtx_def* @expand_builtin_next_arg(%union.tree_node* %arglist) #0 {
entry:
  %0 = load %union.tree_node** @current_function_decl, align 8, !tbaa !3
  %type = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1
  %1 = load %union.tree_node** %type, align 8, !tbaa !3
  %values = getelementptr inbounds %union.tree_node* %1, i64 0, i32 0, i32 1
  %2 = load i8** %values, align 8
  %cmp = icmp eq i8* %2, null
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = bitcast i8* %2 to %union.tree_node*
  %call = tail call %union.tree_node* @tree_last(%union.tree_node* %3) #7
  %value = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %4 = bitcast i32* %value to %union.tree_node**
  %5 = load %union.tree_node** %4, align 8, !tbaa !3
  %6 = load %union.tree_node** getelementptr inbounds ([51 x %union.tree_node*]* @global_trees, i64 0, i64 27), align 8, !tbaa !3
  %cmp4 = icmp eq %union.tree_node* %5, %6
  br i1 %cmp4, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %7 = load %struct.function** @cfun, align 8, !tbaa !3
  %varargs = getelementptr inbounds %struct.function* %7, i64 0, i32 56
  %8 = bitcast [4 x i8]* %varargs to i32*
  %bf.load = load i32* %8, align 8
  %bf.clear = and i32 %bf.load, 65536
  %tobool = icmp eq i32 %bf.clear, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  tail call void (i8*, ...)* @error(i8* getelementptr inbounds ([44 x i8]* @.str120, i64 0, i64 0)) #7
  %9 = load %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 8, !tbaa !3
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %tobool5 = icmp eq %union.tree_node* %arglist, null
  br i1 %tobool5, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.end
  %10 = load %union.tree_node** @current_function_decl, align 8, !tbaa !3
  %arguments = getelementptr inbounds %union.tree_node* %10, i64 0, i32 0, i32 10
  %11 = load %union.tree_node** %arguments, align 8, !tbaa !3
  %call7 = tail call %union.tree_node* @tree_last(%union.tree_node* %11) #7
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %while.cond, %while.cond, %while.cond, %if.then6
  %arglist.pn = phi %union.tree_node* [ %arglist, %if.then6 ], [ %arg.0, %while.cond ], [ %arg.0, %while.cond ], [ %arg.0, %while.cond ], [ %arg.0, %while.cond ]
  %arg.0.in.in = getelementptr inbounds %union.tree_node* %arglist.pn, i64 0, i32 0, i32 2
  %arg.0.in = bitcast i32* %arg.0.in.in to %union.tree_node**
  %arg.0 = load %union.tree_node** %arg.0.in, align 8
  %code = getelementptr inbounds %union.tree_node* %arg.0, i64 0, i32 0, i32 0, i32 2
  %12 = bitcast [4 x i8]* %code to i32*
  %bf.load11 = load i32* %12, align 8
  %bf.clear12 = and i32 %bf.load11, 255
  switch i32 %bf.clear12, label %lor.rhs [
    i32 115, label %while.cond
    i32 114, label %while.cond
    i32 116, label %while.cond
    i32 41, label %while.cond
  ]

lor.rhs:                                          ; preds = %while.cond
  %cmp31 = icmp eq %union.tree_node* %arg.0, %call7
  br i1 %cmp31, label %if.end41, label %if.then32

if.then32:                                        ; preds = %lor.rhs
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([55 x i8]* @.str121, i64 0, i64 0)) #7
  br label %if.end41

if.else:                                          ; preds = %if.end
  %13 = load %struct.function** @cfun, align 8, !tbaa !3
  %varargs34 = getelementptr inbounds %struct.function* %13, i64 0, i32 56
  %14 = bitcast [4 x i8]* %varargs34 to i32*
  %bf.load35 = load i32* %14, align 8
  %bf.clear37 = and i32 %bf.load35, 65536
  %tobool38 = icmp eq i32 %bf.clear37, 0
  br i1 %tobool38, label %if.then39, label %if.end41

if.then39:                                        ; preds = %if.else
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([48 x i8]* @.str122, i64 0, i64 0)) #7
  br label %if.end41

if.end41:                                         ; preds = %lor.rhs, %if.else, %if.then39, %if.then32
  %15 = load i32* @target_flags, align 4, !tbaa !0
  %and = lshr i32 %15, 25
  %16 = and i32 %and, 1
  %17 = or i32 %16, 4
  %18 = load %struct.optab** getelementptr inbounds ([49 x %struct.optab*]* @optab_table, i64 0, i64 0), align 8, !tbaa !3
  %19 = load %struct.function** @cfun, align 8, !tbaa !3
  %internal_arg_pointer = getelementptr inbounds %struct.function* %19, i64 0, i32 15
  %20 = load %struct.rtx_def** %internal_arg_pointer, align 8, !tbaa !3
  %arg_offset_rtx = getelementptr inbounds %struct.function* %19, i64 0, i32 12
  %21 = load %struct.rtx_def** %arg_offset_rtx, align 8, !tbaa !3
  %call43 = tail call %struct.rtx_def* @expand_binop(i32 %17, %struct.optab* %18, %struct.rtx_def* %20, %struct.rtx_def* %21, %struct.rtx_def* null, i32 0, i32 3) #7
  br label %return

return:                                           ; preds = %if.end41, %if.then
  %retval.0 = phi %struct.rtx_def* [ %call43, %if.end41 ], [ %9, %if.then ]
  ret %struct.rtx_def* %retval.0
}
