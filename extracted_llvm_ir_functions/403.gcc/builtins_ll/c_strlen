define internal fastcc %union.tree_node* @c_strlen(%union.tree_node* %src) #0 {
entry:
  %offset_node = alloca %union.tree_node*, align 8
  %call = call %union.tree_node* @string_constant(%union.tree_node* %src, %union.tree_node** %offset_node) #7
  %cmp = icmp eq %union.tree_node* %call, null
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 2
  %1 = load i32* %0, align 4, !tbaa !0
  %sub = add nsw i32 %1, -1
  %pointer = getelementptr inbounds %union.tree_node* %call, i64 0, i32 0, i32 4
  %2 = load %union.tree_node** %pointer, align 8
  %3 = bitcast %union.tree_node* %2 to i8*
  %4 = load %union.tree_node** %offset_node, align 8, !tbaa !3
  %tobool = icmp eq %union.tree_node* %4, null
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end
  %code = getelementptr inbounds %union.tree_node* %4, i64 0, i32 0, i32 0, i32 2
  %5 = bitcast [4 x i8]* %code to i32*
  %bf.load = load i32* %5, align 8
  %bf.clear = and i32 %bf.load, 255
  %cmp2 = icmp eq i32 %bf.clear, 25
  br i1 %cmp2, label %if.else, label %for.cond.preheader

for.cond.preheader:                               ; preds = %land.lhs.true
  %cmp447 = icmp sgt i32 %sub, 0
  br i1 %cmp447, label %for.body, label %for.end

for.cond:                                         ; preds = %for.body
  %6 = trunc i64 %indvars.iv.next to i32
  %cmp4 = icmp slt i32 %6, %sub
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond.preheader, %for.cond
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.cond ], [ 0, %for.cond.preheader ]
  %arrayidx = getelementptr inbounds i8* %3, i64 %indvars.iv
  %7 = load i8* %arrayidx, align 1, !tbaa !1
  %cmp5 = icmp eq i8 %7, 0
  %indvars.iv.next = add i64 %indvars.iv, 1
  br i1 %cmp5, label %return, label %for.cond

for.end:                                          ; preds = %for.cond, %for.cond.preheader
  %conv9 = sext i32 %sub to i64
  %call10 = call %union.tree_node* @size_int_wide(i64 %conv9, i32 0) #7
  %8 = load %union.tree_node** %offset_node, align 8, !tbaa !3
  %call11 = call %union.tree_node* @size_diffop(%union.tree_node* %call10, %union.tree_node* %8) #7
  br label %return

if.else:                                          ; preds = %land.lhs.true
  %call16 = call i32 @host_integerp(%union.tree_node* %4, i32 0) #7
  %tobool17 = icmp eq i32 %call16, 0
  br i1 %tobool17, label %if.then28, label %if.end22

if.end22:                                         ; preds = %if.else
  %9 = load %union.tree_node** %offset_node, align 8, !tbaa !3
  %call20 = call i64 @tree_low_cst(%union.tree_node* %9, i32 0) #7
  %cmp23 = icmp slt i64 %call20, 0
  br i1 %cmp23, label %if.then28, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end, %if.end22
  %offset.044 = phi i64 [ %call20, %if.end22 ], [ 0, %if.end ]
  %conv25 = sext i32 %sub to i64
  %cmp26 = icmp sgt i64 %offset.044, %conv25
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.else, %lor.lhs.false, %if.end22
  call void (i8*, ...)* @warning(i8* getelementptr inbounds ([41 x i8]* @.str109, i64 0, i64 0)) #7
  br label %return

if.end29:                                         ; preds = %lor.lhs.false
  %add.ptr = getelementptr inbounds i8* %3, i64 %offset.044
  %call30 = call i64 @strlen(i8* %add.ptr) #10
  %call31 = call %union.tree_node* @size_int_wide(i64 %call30, i32 1) #7
  br label %return

return:                                           ; preds = %for.body, %entry, %if.end29, %if.then28, %for.end
  %retval.0 = phi %union.tree_node* [ %call11, %for.end ], [ null, %if.then28 ], [ %call31, %if.end29 ], [ null, %entry ], [ null, %for.body ]
  ret %union.tree_node* %retval.0
}
