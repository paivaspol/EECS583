define internal fastcc %struct.rtx_def* @c_readstr(i8* nocapture %str, i32 %mode) #0 {
entry:
  %c = alloca [2 x i64], align 16
  %idxprom = sext i32 %mode to i64
  %arrayidx = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom
  %0 = load i32* %arrayidx, align 4, !tbaa !6
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([52 x i8]* @.str100, i64 0, i64 0), i32 330, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.c_readstr, i64 0, i64 0)) #8
  unreachable

if.end:                                           ; preds = %entry
  %arrayidx1 = getelementptr inbounds [2 x i64]* %c, i64 0, i64 0
  %arrayidx2 = getelementptr inbounds [2 x i64]* %c, i64 0, i64 1
  %arrayidx4 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom
  %1 = bitcast [2 x i64]* %c to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 16, i32 16, i1 false)
  %2 = load i8* %arrayidx4, align 1, !tbaa !1
  %cmp530 = icmp eq i8 %2, 0
  br i1 %cmp530, label %for.end, label %for.body

for.body:                                         ; preds = %if.end, %if.end15
  %indvars.iv = phi i64 [ %indvars.iv.next, %if.end15 ], [ 0, %if.end ]
  %ch.031 = phi i64 [ %ch.1, %if.end15 ], [ 1, %if.end ]
  %3 = shl i64 %indvars.iv, 3
  %4 = trunc i64 %3 to i32
  %cmp7 = icmp ugt i32 %4, 128
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([52 x i8]* @.str100, i64 0, i64 0), i32 344, i8* getelementptr inbounds ([10 x i8]* @__FUNCTION__.c_readstr, i64 0, i64 0)) #8
  unreachable

if.end10:                                         ; preds = %for.body
  %tobool = icmp eq i64 %ch.031, 0
  br i1 %tobool, label %if.end15, label %if.then11

if.then11:                                        ; preds = %if.end10
  %arrayidx13 = getelementptr inbounds i8* %str, i64 %indvars.iv
  %5 = load i8* %arrayidx13, align 1, !tbaa !1
  %conv14 = zext i8 %5 to i64
  br label %if.end15

if.end15:                                         ; preds = %if.end10, %if.then11
  %ch.1 = phi i64 [ %conv14, %if.then11 ], [ 0, %if.end10 ]
  %rem = and i64 %3, 56
  %shl = shl i64 %ch.1, %rem
  %6 = lshr i64 %indvars.iv, 3
  %div = and i64 %6, 67108863
  %arrayidx17 = getelementptr inbounds [2 x i64]* %c, i64 0, i64 %div
  %7 = load i64* %arrayidx17, align 8, !tbaa !4
  %or = or i64 %7, %shl
  store i64 %or, i64* %arrayidx17, align 8, !tbaa !4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %conv = zext i8 %2 to i32
  %8 = trunc i64 %indvars.iv.next to i32
  %cmp5 = icmp ult i32 %8, %conv
  br i1 %cmp5, label %for.body, label %for.cond.for.end_crit_edge

for.cond.for.end_crit_edge:                       ; preds = %if.end15
  %.pre = load i64* %arrayidx1, align 16, !tbaa !4
  %.pre34 = load i64* %arrayidx2, align 8, !tbaa !4
  br label %for.end

for.end:                                          ; preds = %if.end, %for.cond.for.end_crit_edge
  %9 = phi i64 [ 0, %if.end ], [ %.pre34, %for.cond.for.end_crit_edge ]
  %10 = phi i64 [ 0, %if.end ], [ %.pre, %for.cond.for.end_crit_edge ]
  %call = call %struct.rtx_def* @immed_double_const(i64 %10, i64 %9, i32 %mode) #7
  ret %struct.rtx_def* %call
}
