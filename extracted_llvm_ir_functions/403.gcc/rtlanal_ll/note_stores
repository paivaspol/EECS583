define void @note_stores(%struct.rtx_def* %x, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* nocapture %fun, i8* %data) #1 {
entry:
  %0 = bitcast %struct.rtx_def* %x to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 38
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 1
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !0
  %.phi.trans.insert = bitcast %struct.rtx_def* %1 to i32*
  %bf.load1.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %bf.load1 = phi i32 [ %bf.load1.pre, %if.then ], [ %bf.load, %entry ]
  %x.addr.0 = phi %struct.rtx_def* [ %1, %if.then ], [ %x, %entry ]
  %bf.clear2 = and i32 %bf.load1, 65535
  switch i32 %bf.clear2, label %if.end91 [
    i32 47, label %while.cond
    i32 49, label %while.cond
    i32 39, label %if.then72
  ]

while.cond:                                       ; preds = %while.cond, %while.cond, %while.cond, %lor.lhs.false27, %lor.lhs.false27, %lor.lhs.false27, %land.lhs.true, %lor.lhs.false20, %if.end, %if.end
  %x.addr.0.pn = phi %struct.rtx_def* [ %x.addr.0, %if.end ], [ %x.addr.0, %if.end ], [ %dest.0, %lor.lhs.false20 ], [ %dest.0, %land.lhs.true ], [ %dest.0, %lor.lhs.false27 ], [ %dest.0, %lor.lhs.false27 ], [ %dest.0, %lor.lhs.false27 ], [ %dest.0, %while.cond ], [ %dest.0, %while.cond ], [ %dest.0, %while.cond ]
  %dest.0.in.in = getelementptr inbounds %struct.rtx_def* %x.addr.0.pn, i64 0, i32 1, i64 0
  %dest.0.in = bitcast %union.rtunion_def* %dest.0.in.in to %struct.rtx_def**
  %dest.0 = load %struct.rtx_def** %dest.0.in, align 8
  %2 = bitcast %struct.rtx_def* %dest.0 to i32*
  %bf.load11 = load i32* %2, align 8
  %bf.clear12 = and i32 %bf.load11, 65535
  switch i32 %bf.clear12, label %if.else [
    i32 63, label %land.lhs.true
    i32 133, label %while.cond
    i32 132, label %while.cond
    i32 64, label %while.cond
    i32 39, label %if.then44
  ]

land.lhs.true:                                    ; preds = %while.cond
  %arrayidx15 = getelementptr inbounds %struct.rtx_def* %dest.0, i64 0, i32 1, i64 0
  %rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**
  %3 = load %struct.rtx_def** %rtx16, align 8, !tbaa !0
  %4 = bitcast %struct.rtx_def* %3 to i32*
  %bf.load17 = load i32* %4, align 8
  %bf.clear18 = and i32 %bf.load17, 65535
  %cmp19 = icmp eq i32 %bf.clear18, 61
  br i1 %cmp19, label %lor.lhs.false20, label %while.cond

lor.lhs.false20:                                  ; preds = %land.lhs.true
  %arrayidx25 = getelementptr inbounds %struct.rtx_def* %3, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx25 to i32*
  %5 = load i32* %rtuint, align 4, !tbaa !3
  %cmp26 = icmp ugt i32 %5, 52
  br i1 %cmp26, label %while.cond, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %lor.lhs.false20
  switch i32 %bf.clear12, label %if.else [
    i32 133, label %while.cond
    i32 132, label %while.cond
    i32 64, label %while.cond
    i32 39, label %if.then44
  ]

if.then44:                                        ; preds = %while.cond, %lor.lhs.false27
  %arrayidx46 = getelementptr inbounds %struct.rtx_def* %dest.0, i64 0, i32 1, i64 0
  %rtvec = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtvec_def**
  %6 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  %num_elem = getelementptr inbounds %struct.rtvec_def* %6, i64 0, i32 0
  %7 = load i32* %num_elem, align 4, !tbaa !3
  %cmp47124 = icmp sgt i32 %7, 0
  br i1 %cmp47124, label %for.body.lr.ph, label %if.end91

for.body.lr.ph:                                   ; preds = %if.then44
  %8 = sext i32 %7 to i64
  br label %for.body

for.body:                                         ; preds = %for.cond.backedge.for.body_crit_edge, %for.body.lr.ph
  %9 = phi %struct.rtvec_def* [ %6, %for.body.lr.ph ], [ %.pre135, %for.cond.backedge.for.body_crit_edge ]
  %indvars.iv = phi i64 [ %8, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond.backedge.for.body_crit_edge ]
  %indvars.iv.next = add i64 %indvars.iv, -1
  %arrayidx51 = getelementptr inbounds %struct.rtvec_def* %9, i64 0, i32 1, i64 %indvars.iv.next
  %10 = load %struct.rtx_def** %arrayidx51, align 8, !tbaa !0
  %arrayidx53 = getelementptr inbounds %struct.rtx_def* %10, i64 0, i32 1, i64 0
  %rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**
  %11 = load %struct.rtx_def** %rtx54, align 8, !tbaa !0
  %cmp55 = icmp eq %struct.rtx_def* %11, null
  br i1 %cmp55, label %for.cond.backedge, label %if.then56

for.cond.backedge:                                ; preds = %for.body, %if.then56
  %12 = trunc i64 %indvars.iv.next to i32
  %cmp47 = icmp sgt i32 %12, 0
  br i1 %cmp47, label %for.cond.backedge.for.body_crit_edge, label %if.end91

for.cond.backedge.for.body_crit_edge:             ; preds = %for.cond.backedge
  %.pre135 = load %struct.rtvec_def** %rtvec, align 8, !tbaa !0
  br label %for.body

if.then56:                                        ; preds = %for.body
  tail call void %fun(%struct.rtx_def* %11, %struct.rtx_def* %x.addr.0, i8* %data) #5
  br label %for.cond.backedge

if.else:                                          ; preds = %while.cond, %lor.lhs.false27
  tail call void %fun(%struct.rtx_def* %dest.0, %struct.rtx_def* %x.addr.0, i8* %data) #5
  br label %if.end91

if.then72:                                        ; preds = %if.end
  %arrayidx74 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 0
  %rtvec75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtvec_def**
  %13 = load %struct.rtvec_def** %rtvec75, align 8, !tbaa !0
  %num_elem76 = getelementptr inbounds %struct.rtvec_def* %13, i64 0, i32 0
  %14 = load i32* %num_elem76, align 4, !tbaa !3
  %cmp79129 = icmp sgt i32 %14, 0
  br i1 %cmp79129, label %for.body80.lr.ph, label %if.end91

for.body80.lr.ph:                                 ; preds = %if.then72
  %15 = sext i32 %14 to i64
  br label %for.body80

for.body80:                                       ; preds = %for.body80.for.body80_crit_edge, %for.body80.lr.ph
  %16 = phi %struct.rtvec_def* [ %13, %for.body80.lr.ph ], [ %.pre, %for.body80.for.body80_crit_edge ]
  %indvars.iv132 = phi i64 [ %15, %for.body80.lr.ph ], [ %indvars.iv.next133, %for.body80.for.body80_crit_edge ]
  %indvars.iv.next133 = add i64 %indvars.iv132, -1
  %arrayidx86 = getelementptr inbounds %struct.rtvec_def* %16, i64 0, i32 1, i64 %indvars.iv.next133
  %17 = load %struct.rtx_def** %arrayidx86, align 8, !tbaa !0
  tail call void @note_stores(%struct.rtx_def* %17, void (%struct.rtx_def*, %struct.rtx_def*, i8*)* %fun, i8* %data) #4
  %18 = trunc i64 %indvars.iv.next133 to i32
  %cmp79 = icmp sgt i32 %18, 0
  br i1 %cmp79, label %for.body80.for.body80_crit_edge, label %if.end91

for.body80.for.body80_crit_edge:                  ; preds = %for.body80
  %.pre = load %struct.rtvec_def** %rtvec75, align 8, !tbaa !0
  br label %for.body80

if.end91:                                         ; preds = %if.then72, %for.body80, %if.then44, %for.cond.backedge, %if.end, %if.else
  ret void
}
