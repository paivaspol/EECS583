define i64 @get_integer_term(%struct.rtx_def* nocapture %x) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %x}, i64 0, metadata !403), !dbg !1046
  %0 = bitcast %struct.rtx_def* %x to i32*, !dbg !1047
  %bf.load = load i32* %0, align 8, !dbg !1047
  %bf.clear = and i32 %bf.load, 65535, !dbg !1047
  %cmp = icmp eq i32 %bf.clear, 58, !dbg !1047
  br i1 %cmp, label %if.then, label %if.end, !dbg !1047

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %x, i64 0, i32 1, i64 0, !dbg !1048
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !1048
  %1 = load %struct.rtx_def** %rtx, align 8, !dbg !1048, !tbaa !979
  tail call void @llvm.dbg.value(metadata !{%struct.rtx_def* %1}, i64 0, metadata !403), !dbg !1048
  %.phi.trans.insert = bitcast %struct.rtx_def* %1 to i32*
  %bf.load1.pre = load i32* %.phi.trans.insert, align 8, !dbg !1049
  br label %if.end, !dbg !1048

if.end:                                           ; preds = %if.then, %entry
  %bf.load17 = phi i32 [ %bf.load1.pre, %if.then ], [ %bf.load, %entry ]
  %x.addr.0 = phi %struct.rtx_def* [ %1, %if.then ], [ %x, %entry ]
  %bf.clear2 = and i32 %bf.load17, 65535, !dbg !1049
  switch i32 %bf.clear2, label %return [
    i32 76, label %land.lhs.true
    i32 75, label %land.lhs.true20
  ], !dbg !1049

land.lhs.true:                                    ; preds = %if.end
  %arrayidx5 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 1, !dbg !1049
  %rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !1049
  %2 = load %struct.rtx_def** %rtx6, align 8, !dbg !1049, !tbaa !979
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !1049
  %bf.load7 = load i32* %3, align 8, !dbg !1049
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !1049
  %cmp9 = icmp eq i32 %bf.clear8, 54, !dbg !1049
  br i1 %cmp9, label %if.then10, label %return, !dbg !1049

if.then10:                                        ; preds = %land.lhs.true
  %rtwint = getelementptr inbounds %struct.rtx_def* %2, i64 0, i32 1, i64 0, i32 0, !dbg !1050
  %4 = load i64* %rtwint, align 8, !dbg !1050, !tbaa !1051
  %sub = sub nsw i64 0, %4, !dbg !1050
  br label %return, !dbg !1050

land.lhs.true20:                                  ; preds = %if.end
  %arrayidx22 = getelementptr inbounds %struct.rtx_def* %x.addr.0, i64 0, i32 1, i64 1, !dbg !1052
  %rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !1052
  %5 = load %struct.rtx_def** %rtx23, align 8, !dbg !1052, !tbaa !979
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !1052
  %bf.load24 = load i32* %6, align 8, !dbg !1052
  %bf.clear25 = and i32 %bf.load24, 65535, !dbg !1052
  %cmp26 = icmp eq i32 %bf.clear25, 54, !dbg !1052
  br i1 %cmp26, label %if.then27, label %return, !dbg !1052

if.then27:                                        ; preds = %land.lhs.true20
  %rtwint33 = getelementptr inbounds %struct.rtx_def* %5, i64 0, i32 1, i64 0, i32 0, !dbg !1053
  %7 = load i64* %rtwint33, align 8, !dbg !1053, !tbaa !1051
  br label %return, !dbg !1053

return:                                           ; preds = %if.end, %land.lhs.true, %land.lhs.true20, %if.then27, %if.then10
  %retval.0 = phi i64 [ %sub, %if.then10 ], [ %7, %if.then27 ], [ 0, %land.lhs.true20 ], [ 0, %land.lhs.true ], [ 0, %if.end ]
  ret i64 %retval.0, !dbg !1054
}
