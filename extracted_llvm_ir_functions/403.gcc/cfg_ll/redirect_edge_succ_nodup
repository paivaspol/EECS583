define %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %e, %struct.basic_block_def* %new_succ) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%struct.edge_def* %e}, i64 0, metadata !888), !dbg !1331
  tail call void @llvm.dbg.value(metadata !{%struct.basic_block_def* %new_succ}, i64 0, metadata !889), !dbg !1332
  %src = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 2, !dbg !1333
  %0 = load %struct.basic_block_def** %src, align 8, !dbg !1333, !tbaa !1158
  %succ = getelementptr inbounds %struct.basic_block_def* %0, i64 0, i32 5, !dbg !1333
  %s.025 = load %struct.edge_def** %succ, align 8, !dbg !1333
  %tobool26 = icmp eq %struct.edge_def* %s.025, null, !dbg !1333
  br i1 %tobool26, label %if.else, label %for.body, !dbg !1333

for.cond:                                         ; preds = %for.body
  %succ_next = getelementptr inbounds %struct.edge_def* %s.027, i64 0, i32 1, !dbg !1333
  %s.0 = load %struct.edge_def** %succ_next, align 8, !dbg !1333
  %tobool = icmp eq %struct.edge_def* %s.0, null, !dbg !1333
  br i1 %tobool, label %if.else, label %for.body, !dbg !1333

for.body:                                         ; preds = %entry, %for.cond
  %s.027 = phi %struct.edge_def* [ %s.0, %for.cond ], [ %s.025, %entry ]
  %dest = getelementptr inbounds %struct.edge_def* %s.027, i64 0, i32 3, !dbg !1335
  %1 = load %struct.basic_block_def** %dest, align 8, !dbg !1335, !tbaa !1158
  %cmp = icmp ne %struct.basic_block_def* %1, %new_succ, !dbg !1335
  %cmp1 = icmp eq %struct.edge_def* %s.027, %e, !dbg !1335
  %or.cond = or i1 %cmp, %cmp1, !dbg !1335
  br i1 %or.cond, label %for.cond, label %if.then3, !dbg !1335

if.then3:                                         ; preds = %for.body
  %flags = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 6, !dbg !1336
  %2 = load i32* %flags, align 4, !dbg !1336, !tbaa !1163
  %flags4 = getelementptr inbounds %struct.edge_def* %s.027, i64 0, i32 6, !dbg !1336
  %3 = load i32* %flags4, align 4, !dbg !1336, !tbaa !1163
  %or = or i32 %3, %2, !dbg !1336
  store i32 %or, i32* %flags4, align 4, !dbg !1336, !tbaa !1163
  %probability = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 7, !dbg !1338
  %4 = load i32* %probability, align 4, !dbg !1338, !tbaa !1163
  %probability5 = getelementptr inbounds %struct.edge_def* %s.027, i64 0, i32 7, !dbg !1338
  %5 = load i32* %probability5, align 4, !dbg !1338, !tbaa !1163
  %add = add nsw i32 %5, %4, !dbg !1338
  store i32 %add, i32* %probability5, align 4, !dbg !1338, !tbaa !1163
  %count = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 8, !dbg !1339
  %6 = load i64* %count, align 8, !dbg !1339, !tbaa !1233
  %count6 = getelementptr inbounds %struct.edge_def* %s.027, i64 0, i32 8, !dbg !1339
  %7 = load i64* %count6, align 8, !dbg !1339, !tbaa !1233
  %add7 = add nsw i64 %7, %6, !dbg !1339
  store i64 %add7, i64* %count6, align 8, !dbg !1339, !tbaa !1233
  tail call void @remove_edge(%struct.edge_def* %e) #8, !dbg !1340
  tail call void @llvm.dbg.value(metadata !{%struct.edge_def* %s.027}, i64 0, metadata !888), !dbg !1341
  br label %if.end8, !dbg !1342

if.else:                                          ; preds = %for.cond, %entry
  tail call void @llvm.dbg.value(metadata !{%struct.edge_def* %e}, i64 0, metadata !1343), !dbg !1345
  tail call void @llvm.dbg.value(metadata !{%struct.basic_block_def* %new_succ}, i64 0, metadata !1346), !dbg !1347
  %dest.i = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 3, !dbg !1348
  %8 = load %struct.basic_block_def** %dest.i, align 8, !dbg !1348, !tbaa !1158
  %pred.i = getelementptr inbounds %struct.basic_block_def* %8, i64 0, i32 4, !dbg !1348
  tail call void @llvm.dbg.value(metadata !{%struct.edge_def** %pred.i}, i64 0, metadata !1349), !dbg !1348
  br label %for.cond.i, !dbg !1348

for.cond.i:                                       ; preds = %for.cond.i, %if.else
  %pe.0.i = phi %struct.edge_def** [ %pred.i, %if.else ], [ %pred_next.i, %for.cond.i ]
  %9 = load %struct.edge_def** %pe.0.i, align 8, !dbg !1348, !tbaa !1158
  %cmp.i = icmp eq %struct.edge_def* %9, %e, !dbg !1348
  %pred_next.i = getelementptr inbounds %struct.edge_def* %9, i64 0, i32 0, !dbg !1348
  br i1 %cmp.i, label %redirect_edge_succ.exit, label %for.cond.i, !dbg !1348

redirect_edge_succ.exit:                          ; preds = %for.cond.i
  %10 = load %struct.edge_def** %pred_next.i, align 8, !dbg !1350, !tbaa !1158
  store %struct.edge_def* %10, %struct.edge_def** %pe.0.i, align 8, !dbg !1350, !tbaa !1158
  %pred2.i = getelementptr inbounds %struct.basic_block_def* %new_succ, i64 0, i32 4, !dbg !1351
  %11 = load %struct.edge_def** %pred2.i, align 8, !dbg !1351, !tbaa !1158
  %pred_next3.i = getelementptr inbounds %struct.edge_def* %e, i64 0, i32 0, !dbg !1351
  store %struct.edge_def* %11, %struct.edge_def** %pred_next3.i, align 8, !dbg !1351, !tbaa !1158
  store %struct.edge_def* %e, %struct.edge_def** %pred2.i, align 8, !dbg !1352, !tbaa !1158
  store %struct.basic_block_def* %new_succ, %struct.basic_block_def** %dest.i, align 8, !dbg !1353, !tbaa !1158
  br label %if.end8

if.end8:                                          ; preds = %redirect_edge_succ.exit, %if.then3
  %e.addr.0 = phi %struct.edge_def* [ %s.027, %if.then3 ], [ %e, %redirect_edge_succ.exit ]
  ret %struct.edge_def* %e.addr.0, !dbg !1354
}
