define void @free_aux_for_blocks() #0 {
entry:
  %0 = load i8** @first_block_aux_obj, align 8, !dbg !1487, !tbaa !1158
  %tobool = icmp eq i8* %0, null, !dbg !1487
  br i1 %tobool, label %if.then, label %if.end, !dbg !1487

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([47 x i8]* @.str, i64 0, i64 0), i32 669, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.free_aux_for_blocks, i64 0, i64 0)) #7, !dbg !1488
  unreachable, !dbg !1488

if.end:                                           ; preds = %entry
  tail call void @llvm.dbg.value(metadata !1457, i64 0, metadata !1007), !dbg !1489
  tail call void @llvm.dbg.value(metadata !{i8* %0}, i64 0, metadata !1009), !dbg !1489
  %1 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @block_aux_obstack, i64 0, i32 1), align 8, !dbg !1489, !tbaa !1158
  %2 = bitcast %struct._obstack_chunk* %1 to i8*, !dbg !1489
  %cmp = icmp ugt i8* %0, %2, !dbg !1489
  %3 = load i8** getelementptr inbounds (%struct.obstack* @block_aux_obstack, i64 0, i32 4), align 8, !dbg !1489, !tbaa !1158
  %cmp1 = icmp ult i8* %0, %3, !dbg !1489
  %or.cond = and i1 %cmp, %cmp1, !dbg !1489
  br i1 %or.cond, label %if.then2, label %if.else, !dbg !1489

if.then2:                                         ; preds = %if.end
  store i8* %0, i8** getelementptr inbounds (%struct.obstack* @block_aux_obstack, i64 0, i32 2), align 8, !dbg !1489, !tbaa !1158
  store i8* %0, i8** getelementptr inbounds (%struct.obstack* @block_aux_obstack, i64 0, i32 3), align 8, !dbg !1489, !tbaa !1158
  br label %if.end3, !dbg !1489

if.else:                                          ; preds = %if.end
  tail call void @obstack_free(%struct.obstack* @block_aux_obstack, i8* %0) #6, !dbg !1489
  br label %if.end3

if.end3:                                          ; preds = %if.else, %if.then2
  store i8* null, i8** @first_block_aux_obj, align 8, !dbg !1490, !tbaa !1158
  tail call void @llvm.dbg.value(metadata !194, i64 0, metadata !1491), !dbg !1493
  %4 = load i32* @n_basic_blocks, align 4, !dbg !1493, !tbaa !1163
  %cmp3.i = icmp sgt i32 %4, 0, !dbg !1493
  br i1 %cmp3.i, label %for.body.i, label %clear_aux_for_blocks.exit, !dbg !1493

for.body.i:                                       ; preds = %if.end3, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %if.end3 ]
  %5 = load %struct.varray_head_tag** @basic_block_info, align 8, !dbg !1494, !tbaa !1158
  %data.i = getelementptr inbounds %struct.varray_head_tag* %5, i64 0, i32 4, !dbg !1494
  %bb.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*, !dbg !1494
  %arrayidx.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb.i, i64 0, i64 %indvars.iv.i, !dbg !1494
  %6 = load %struct.basic_block_def** %arrayidx.i, align 8, !dbg !1494, !tbaa !1158
  %aux.i = getelementptr inbounds %struct.basic_block_def* %6, i64 0, i32 10, !dbg !1494
  store i8* null, i8** %aux.i, align 8, !dbg !1494, !tbaa !1158
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1, !dbg !1493
  %lftr.wideiv = trunc i64 %indvars.iv.next.i to i32, !dbg !1493
  %exitcond = icmp eq i32 %lftr.wideiv, %4, !dbg !1493
  br i1 %exitcond, label %clear_aux_for_blocks.exit, label %for.body.i, !dbg !1493

clear_aux_for_blocks.exit:                        ; preds = %for.body.i, %if.end3
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 10), align 16, !dbg !1495, !tbaa !1158
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 10), align 16, !dbg !1496, !tbaa !1158
  ret void, !dbg !1497
}
