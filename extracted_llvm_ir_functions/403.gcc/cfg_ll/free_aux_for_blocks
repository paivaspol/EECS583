define void @free_aux_for_blocks() #0 {
entry:
  %0 = load i8** @first_block_aux_obj, align 8, !tbaa !0
  %tobool = icmp eq i8* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([47 x i8]* @.str, i64 0, i64 0), i32 669, i8* getelementptr inbounds ([20 x i8]* @__FUNCTION__.free_aux_for_blocks, i64 0, i64 0)) #6
  unreachable

if.end:                                           ; preds = %entry
  %1 = load %struct._obstack_chunk** getelementptr inbounds (%struct.obstack* @block_aux_obstack, i64 0, i32 1), align 8, !tbaa !0
  %2 = bitcast %struct._obstack_chunk* %1 to i8*
  %cmp = icmp ugt i8* %0, %2
  %3 = load i8** getelementptr inbounds (%struct.obstack* @block_aux_obstack, i64 0, i32 4), align 8, !tbaa !0
  %cmp1 = icmp ult i8* %0, %3
  %or.cond = and i1 %cmp, %cmp1
  br i1 %or.cond, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i8* %0, i8** getelementptr inbounds (%struct.obstack* @block_aux_obstack, i64 0, i32 2), align 8, !tbaa !0
  store i8* %0, i8** getelementptr inbounds (%struct.obstack* @block_aux_obstack, i64 0, i32 3), align 8, !tbaa !0
  br label %if.end3

if.else:                                          ; preds = %if.end
  tail call void @obstack_free(%struct.obstack* @block_aux_obstack, i8* %0) #5
  br label %if.end3

if.end3:                                          ; preds = %if.else, %if.then2
  store i8* null, i8** @first_block_aux_obj, align 8, !tbaa !0
  %4 = load i32* @n_basic_blocks, align 4, !tbaa !3
  %cmp3.i = icmp sgt i32 %4, 0
  br i1 %cmp3.i, label %for.body.i, label %clear_aux_for_blocks.exit

for.body.i:                                       ; preds = %if.end3, %for.body.i
  %indvars.iv.i = phi i64 [ %indvars.iv.next.i, %for.body.i ], [ 0, %if.end3 ]
  %5 = load %struct.varray_head_tag** @basic_block_info, align 8, !tbaa !0
  %data.i = getelementptr inbounds %struct.varray_head_tag* %5, i64 0, i32 4
  %bb.i = bitcast %union.varray_data_tag* %data.i to [1 x %struct.basic_block_def*]*
  %arrayidx.i = getelementptr inbounds [1 x %struct.basic_block_def*]* %bb.i, i64 0, i64 %indvars.iv.i
  %6 = load %struct.basic_block_def** %arrayidx.i, align 8, !tbaa !0
  %aux.i = getelementptr inbounds %struct.basic_block_def* %6, i64 0, i32 10
  store i8* null, i8** %aux.i, align 8, !tbaa !0
  %indvars.iv.next.i = add i64 %indvars.iv.i, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %4
  br i1 %exitcond, label %clear_aux_for_blocks.exit, label %for.body.i

clear_aux_for_blocks.exit:                        ; preds = %for.body.i, %if.end3
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 0, i32 10), align 16, !tbaa !0
  store i8* null, i8** getelementptr inbounds ([2 x %struct.basic_block_def]* @entry_exit_blocks, i64 0, i64 1, i32 10), align 16, !tbaa !0
  ret void
}
