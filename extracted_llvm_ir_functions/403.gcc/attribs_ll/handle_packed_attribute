define internal noalias %union.tree_node* @handle_packed_attribute(%union.tree_node** %node, %union.tree_node* nocapture %name, %union.tree_node* nocapture %args, i32 %flags, i8* nocapture %no_add_attrs) #0 {
entry:
  tail call void @llvm.dbg.value(metadata !{%union.tree_node** %node}, i64 0, metadata !1004), !dbg !1164
  tail call void @llvm.dbg.value(metadata !{%union.tree_node* %name}, i64 0, metadata !1005), !dbg !1165
  tail call void @llvm.dbg.value(metadata !{%union.tree_node* %args}, i64 0, metadata !1006), !dbg !1166
  tail call void @llvm.dbg.value(metadata !{i32 %flags}, i64 0, metadata !1007), !dbg !1167
  tail call void @llvm.dbg.value(metadata !{i8* %no_add_attrs}, i64 0, metadata !1008), !dbg !1168
  tail call void @llvm.dbg.value(metadata !1169, i64 0, metadata !1009), !dbg !1170
  %0 = load %union.tree_node** %node, align 8, !dbg !1171, !tbaa !1026
  %code = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 2, !dbg !1171
  %1 = bitcast [4 x i8]* %code to i32*, !dbg !1171
  %bf.load = load i32* %1, align 8, !dbg !1171
  %bf.clear = and i32 %bf.load, 255, !dbg !1171
  %idxprom40 = zext i32 %bf.clear to i64, !dbg !1171
  %arrayidx = getelementptr inbounds [256 x i8]* @tree_code_type, i64 0, i64 %idxprom40, !dbg !1171
  %2 = load i8* %arrayidx, align 1, !dbg !1171, !tbaa !1027
  %cmp = icmp eq i8 %2, 100, !dbg !1171
  br i1 %cmp, label %if.end11, label %if.then12, !dbg !1171

if.end11:                                         ; preds = %entry
  %type10 = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 0, i32 1, !dbg !1172
  tail call void @llvm.dbg.value(metadata !{%union.tree_node** %type10}, i64 0, metadata !1009), !dbg !1172
  switch i32 %bf.clear, label %if.else30 [
    i32 33, label %if.then12
    i32 37, label %if.then26
  ], !dbg !1174

if.then12:                                        ; preds = %if.end11, %entry
  %type.042 = phi %union.tree_node** [ %type10, %if.end11 ], [ %node, %entry ]
  %and = and i32 %flags, 8, !dbg !1175
  %tobool13 = icmp eq i32 %and, 0, !dbg !1175
  %3 = load %union.tree_node** %type.042, align 8, !dbg !1177, !tbaa !1026
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !1175

if.then14:                                        ; preds = %if.then12
  %call = tail call %union.tree_node* @build_type_copy(%union.tree_node* %3) #5, !dbg !1177
  store %union.tree_node* %call, %union.tree_node** %type.042, align 8, !dbg !1177, !tbaa !1026
  br label %if.end15, !dbg !1177

if.end15:                                         ; preds = %if.then12, %if.then14
  %4 = phi %union.tree_node* [ %call, %if.then14 ], [ %3, %if.then12 ]
  %type16 = bitcast %union.tree_node* %4 to %struct.tree_type*, !dbg !1178
  %packed_flag = getelementptr inbounds %struct.tree_type* %type16, i64 0, i32 6, !dbg !1178
  %5 = bitcast [4 x i8]* %packed_flag to i32*, !dbg !1178
  %bf.load17 = load i32* %5, align 4, !dbg !1178
  %bf.set = or i32 %bf.load17, 1048576, !dbg !1178
  store i32 %bf.set, i32* %5, align 4, !dbg !1178
  br label %if.end32, !dbg !1179

if.then26:                                        ; preds = %if.end11
  %regdecl_flag = getelementptr inbounds %union.tree_node* %0, i64 0, i32 0, i32 5, !dbg !1180
  %6 = bitcast [8 x i8]* %regdecl_flag to i64*, !dbg !1180
  %bf.load27 = load i64* %6, align 8, !dbg !1180
  %bf.set29 = or i64 %bf.load27, 1024, !dbg !1180
  store i64 %bf.set29, i64* %6, align 8, !dbg !1180
  br label %if.end32, !dbg !1180

if.else30:                                        ; preds = %if.end11
  %id = getelementptr inbounds %union.tree_node* %name, i64 0, i32 0, i32 1, !dbg !1181
  %7 = getelementptr inbounds i8** %id, i64 1, !dbg !1181
  %8 = load i8** %7, align 8, !dbg !1181, !tbaa !1026
  tail call void (i8*, ...)* @warning(i8* getelementptr inbounds ([23 x i8]* @.str4, i64 0, i64 0), i8* %8) #5, !dbg !1181
  store i8 1, i8* %no_add_attrs, align 1, !dbg !1183, !tbaa !1050
  br label %if.end32

if.end32:                                         ; preds = %if.then26, %if.else30, %if.end15
  ret %union.tree_node* null, !dbg !1184
}
