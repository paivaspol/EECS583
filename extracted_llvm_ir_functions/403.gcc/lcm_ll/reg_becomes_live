define internal void @reg_becomes_live(%struct.rtx_def* nocapture %reg, %struct.rtx_def* nocapture %setter, i8* nocapture %live) #0 {
entry:
  %0 = bitcast %struct.rtx_def* %reg to i32*
  %bf.load = load i32* %0, align 8
  %bf.clear = and i32 %bf.load, 65535
  %cmp = icmp eq i32 %bf.clear, 63
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %reg, i64 0, i32 1, i64 0
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %1 = load %struct.rtx_def** %rtx, align 8, !tbaa !3
  %.phi.trans.insert = bitcast %struct.rtx_def* %1 to i32*
  %bf.load1.pre = load i32* %.phi.trans.insert, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %bf.load1 = phi i32 [ %bf.load1.pre, %if.then ], [ %bf.load, %entry ]
  %reg.addr.0 = phi %struct.rtx_def* [ %1, %if.then ], [ %reg, %entry ]
  %bf.clear2 = and i32 %bf.load1, 65535
  %cmp3 = icmp eq i32 %bf.clear2, 61
  br i1 %cmp3, label %if.end5, label %if.end69

if.end5:                                          ; preds = %if.end
  %arrayidx7 = getelementptr inbounds %struct.rtx_def* %reg.addr.0, i64 0, i32 1, i64 0
  %rtuint = bitcast %union.rtunion_def* %arrayidx7 to i32*
  %2 = load i32* %rtuint, align 4, !tbaa !0
  %cmp8 = icmp slt i32 %2, 53
  br i1 %cmp8, label %if.then9, label %if.end69

if.then9:                                         ; preds = %if.end5
  %.off = add i32 %2, -8
  %3 = icmp ult i32 %.off, 8
  %.off92 = add i32 %2, -21
  %4 = icmp ult i32 %.off92, 8
  %or.cond = or i1 %3, %4
  %.off93 = add i32 %2, -45
  %5 = icmp ult i32 %.off93, 8
  %or.cond99 = or i1 %or.cond, %5
  %.off94 = add i32 %2, -29
  %6 = icmp ult i32 %.off94, 8
  %or.cond101 = or i1 %or.cond99, %6
  %bf.lshr = lshr i32 %bf.load1, 16
  %bf.clear24 = and i32 %bf.lshr, 255
  br i1 %or.cond101, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then9
  %idxprom96 = zext i32 %bf.clear24 to i64
  %arrayidx25 = getelementptr inbounds [59 x i32]* @mode_class, i64 0, i64 %idxprom96
  %7 = load i32* %arrayidx25, align 4, !tbaa !5
  %cmp26 = icmp eq i32 %7, 5
  br i1 %cmp26, label %for.body.lr.ph, label %lor.rhs

lor.rhs:                                          ; preds = %cond.true
  %cmp32 = icmp eq i32 %7, 6
  %phitmp = select i1 %cmp32, i32 2, i32 1
  br label %for.body.lr.ph

cond.false:                                       ; preds = %if.then9
  switch i32 %bf.clear24, label %for.cond.preheader [
    i32 18, label %cond.true37
    i32 24, label %cond.true44
  ]

cond.true37:                                      ; preds = %cond.false
  %8 = load i32* @target_flags, align 4, !tbaa !0
  %and = lshr i32 %8, 25
  %9 = and i32 %and, 1
  %10 = xor i32 %9, 3
  br label %for.body.lr.ph

cond.true44:                                      ; preds = %cond.false
  %11 = load i32* @target_flags, align 4, !tbaa !0
  %and45 = lshr i32 %11, 24
  %12 = and i32 %and45, 2
  %13 = xor i32 %12, 6
  br label %for.body.lr.ph

for.cond.preheader:                               ; preds = %cond.false
  %idxprom5295 = zext i32 %bf.clear24 to i64
  %arrayidx53 = getelementptr inbounds [59 x i8]* @mode_size, i64 0, i64 %idxprom5295
  %14 = load i8* %arrayidx53, align 1, !tbaa !1
  %conv = zext i8 %14 to i32
  %15 = load i32* @target_flags, align 4, !tbaa !0
  %and54 = lshr i32 %15, 23
  %16 = and i32 %and54, 4
  %17 = add i32 %16, 4
  %add = add i32 %conv, -1
  %sub = add i32 %add, %17
  %div = sdiv i32 %sub, %17
  %cmp66103 = icmp sgt i32 %div, 0
  br i1 %cmp66103, label %for.body.lr.ph, label %if.end69

for.body.lr.ph:                                   ; preds = %cond.true, %lor.rhs, %cond.true37, %cond.true44, %for.cond.preheader
  %nregs.0.in.ph109 = phi i32 [ %div, %for.cond.preheader ], [ %13, %cond.true44 ], [ %10, %cond.true37 ], [ %phitmp, %lor.rhs ], [ 2, %cond.true ]
  %18 = bitcast i8* %live to i64*
  %.promoted = load i64* %18, align 8, !tbaa !4
  br label %for.body

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %or105 = phi i64 [ %.promoted, %for.body.lr.ph ], [ %or, %for.body ]
  %nregs.0104.in = phi i32 [ %nregs.0.in.ph109, %for.body.lr.ph ], [ %nregs.0104, %for.body ]
  %nregs.0104 = add nsw i32 %nregs.0104.in, -1
  %add68 = add nsw i32 %nregs.0104, %2
  %sh_prom = zext i32 %add68 to i64
  %shl = shl i64 1, %sh_prom
  %or = or i64 %or105, %shl
  %cmp66 = icmp sgt i32 %nregs.0104, 0
  br i1 %cmp66, label %for.body, label %for.cond.if.end69.loopexit_crit_edge

for.cond.if.end69.loopexit_crit_edge:             ; preds = %for.body
  store i64 %or, i64* %18, align 8, !tbaa !4
  br label %if.end69

if.end69:                                         ; preds = %for.cond.preheader, %for.cond.if.end69.loopexit_crit_edge, %if.end, %if.end5
  ret void
}
