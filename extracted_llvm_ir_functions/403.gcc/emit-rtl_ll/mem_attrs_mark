define internal void @mem_attrs_mark(i8* nocapture %x) #0 {
entry:
  %expr = getelementptr inbounds i8* %x, i64 8
  %0 = bitcast i8* %expr to %union.tree_node**
  %1 = load %union.tree_node** %0, align 8, !tbaa !4
  %tobool = icmp eq %union.tree_node* %1, null
  br i1 %tobool, label %if.end12, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = bitcast %union.tree_node* %1 to i8*
  %call = tail call i32 @ggc_set_mark(i8* %2) #8
  %tobool2 = icmp eq i32 %call, 0
  br i1 %tobool2, label %do.body4, label %if.end12

do.body4:                                         ; preds = %land.lhs.true
  %3 = load %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !4
  %elements_used = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 1
  %4 = load i64* %elements_used, align 8, !tbaa !3
  %num_elements = getelementptr inbounds %struct.varray_head_tag* %3, i64 0, i32 0
  %5 = load i64* %num_elements, align 8, !tbaa !3
  %cmp5 = icmp ult i64 %4, %5
  br i1 %cmp5, label %if.end, label %if.then6

if.then6:                                         ; preds = %do.body4
  %mul = shl i64 %5, 1
  %call8 = tail call %struct.varray_head_tag* @varray_grow(%struct.varray_head_tag* %3, i64 %mul) #8
  store %struct.varray_head_tag* %call8, %struct.varray_head_tag** @ggc_pending_trees, align 8, !tbaa !4
  %elements_used9.phi.trans.insert = getelementptr inbounds %struct.varray_head_tag* %call8, i64 0, i32 1
  %.pre = load i64* %elements_used9.phi.trans.insert, align 8, !tbaa !3
  br label %if.end

if.end:                                           ; preds = %do.body4, %if.then6
  %6 = phi i64 [ %4, %do.body4 ], [ %.pre, %if.then6 ]
  %7 = phi %struct.varray_head_tag* [ %3, %do.body4 ], [ %call8, %if.then6 ]
  %elements_used9 = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 1
  %inc = add i64 %6, 1
  store i64 %inc, i64* %elements_used9, align 8, !tbaa !3
  %data = getelementptr inbounds %struct.varray_head_tag* %7, i64 0, i32 4
  %tree = bitcast %union.varray_data_tag* %data to [1 x %union.tree_node*]*
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*]* %tree, i64 0, i64 %6
  store %union.tree_node* %1, %union.tree_node** %arrayidx, align 8, !tbaa !4
  br label %if.end12

if.end12:                                         ; preds = %entry, %land.lhs.true, %if.end
  %offset = getelementptr inbounds i8* %x, i64 16
  %8 = bitcast i8* %offset to %struct.rtx_def**
  %9 = load %struct.rtx_def** %8, align 8, !tbaa !4
  %tobool13 = icmp eq %struct.rtx_def* %9, null
  br i1 %tobool13, label %if.end24, label %land.lhs.true18

land.lhs.true18:                                  ; preds = %if.end12
  %10 = getelementptr inbounds %struct.rtx_def* %9, i64 0, i32 0, i64 0
  %call19 = tail call i32 @ggc_set_mark(i8* %10) #8
  %tobool20 = icmp eq i32 %call19, 0
  br i1 %tobool20, label %if.then21, label %if.end24

if.then21:                                        ; preds = %land.lhs.true18
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %9) #8
  br label %if.end24

if.end24:                                         ; preds = %if.end12, %land.lhs.true18, %if.then21
  %size = getelementptr inbounds i8* %x, i64 24
  %11 = bitcast i8* %size to %struct.rtx_def**
  %12 = load %struct.rtx_def** %11, align 8, !tbaa !4
  %tobool25 = icmp eq %struct.rtx_def* %12, null
  br i1 %tobool25, label %if.end37, label %land.lhs.true31

land.lhs.true31:                                  ; preds = %if.end24
  %13 = getelementptr inbounds %struct.rtx_def* %12, i64 0, i32 0, i64 0
  %call32 = tail call i32 @ggc_set_mark(i8* %13) #8
  %tobool33 = icmp eq i32 %call32, 0
  br i1 %tobool33, label %if.then34, label %if.end37

if.then34:                                        ; preds = %land.lhs.true31
  tail call void @ggc_mark_rtx_children(%struct.rtx_def* %12) #8
  br label %if.end37

if.end37:                                         ; preds = %if.end24, %land.lhs.true31, %if.then34
  ret void
}
