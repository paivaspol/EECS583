define %struct.rtvec_def* @gen_rtvec_v(i32 %n, %struct.rtx_def** nocapture %argp) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %call = tail call %struct.rtvec_def* @rtvec_alloc(i32 %n) #8
  %cmp17 = icmp sgt i32 %n, 0
  br i1 %cmp17, label %for.body, label %return

for.body:                                         ; preds = %if.end, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.end ]
  %argp.addr.08 = phi %struct.rtx_def** [ %incdec.ptr, %for.body ], [ %argp, %if.end ]
  %incdec.ptr = getelementptr inbounds %struct.rtx_def** %argp.addr.08, i64 1
  %0 = load %struct.rtx_def** %argp.addr.08, align 8, !tbaa !4
  %arrayidx = getelementptr inbounds %struct.rtvec_def* %call, i64 0, i32 1, i64 %indvars.iv
  store %struct.rtx_def* %0, %struct.rtx_def** %arrayidx, align 8, !tbaa !4
  %indvars.iv.next = add i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %lftr.wideiv, %n
  br i1 %exitcond, label %return, label %for.body

return:                                           ; preds = %if.end, %for.body, %entry
  %retval.0 = phi %struct.rtvec_def* [ null, %entry ], [ %call, %for.body ], [ %call, %if.end ]
  ret %struct.rtvec_def* %retval.0
}
