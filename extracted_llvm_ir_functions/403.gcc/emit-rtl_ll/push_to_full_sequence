define void @push_to_full_sequence(%struct.rtx_def* %first, %struct.rtx_def* %last) #0 {
entry:
  tail call void @start_sequence() #9
  %0 = load %struct.function** @cfun, align 8, !tbaa !4
  %emit = getelementptr inbounds %struct.function* %0, i64 0, i32 3
  %1 = load %struct.emit_status** %emit, align 8, !tbaa !4
  %x_first_insn = getelementptr inbounds %struct.emit_status* %1, i64 0, i32 2
  store %struct.rtx_def* %first, %struct.rtx_def** %x_first_insn, align 8, !tbaa !4
  %2 = load %struct.function** @cfun, align 8, !tbaa !4
  %emit1 = getelementptr inbounds %struct.function* %2, i64 0, i32 3
  %3 = load %struct.emit_status** %emit1, align 8, !tbaa !4
  %x_last_insn = getelementptr inbounds %struct.emit_status* %3, i64 0, i32 3
  store %struct.rtx_def* %last, %struct.rtx_def** %x_last_insn, align 8, !tbaa !4
  %tobool = icmp eq %struct.rtx_def* %last, null
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %arrayidx = getelementptr inbounds %struct.rtx_def* %last, i64 0, i32 1, i64 2
  %rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**
  %4 = load %struct.rtx_def** %rtx, align 8, !tbaa !4
  %tobool2 = icmp eq %struct.rtx_def* %4, null
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([52 x i8]* @.str, i64 0, i64 0), i32 4491, i8* getelementptr inbounds ([22 x i8]* @__FUNCTION__.push_to_full_sequence, i64 0, i64 0)) #10
  unreachable

if.end:                                           ; preds = %land.lhs.true, %entry
  ret void
}
